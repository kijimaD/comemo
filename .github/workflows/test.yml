name: Check

on:
  push:
  pull_request:

jobs:
  test:
    name: テスト実行
    runs-on: ubuntu-latest

    strategy:
      matrix:
        go-version: [1.22, 1.23, 1.24]

    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4

    - name: Go環境をセットアップ
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Go環境の確認
      run: |
        go version
        go env

    - name: 依存関係をダウンロード
      run: go mod download

    - name: 依存関係を検証
      run: go mod verify

    - name: コードフォーマットチェック
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "以下のファイルがフォーマットされていません:"
          gofmt -s -l .
          exit 1
        fi

    - name: Go Vet実行
      run: go vet ./...

    - name: テスト実行
      run: |
        go test -v -race -coverprofile=coverage.out ./...

    - name: カバレッジレポート生成
      run: go tool cover -html=coverage.out -o coverage.html

    - name: カバレッジ結果をアップロード
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-go${{ matrix.go-version }}
        path: |
          coverage.out
          coverage.html
        retention-days: 30

    - name: テスト結果サマリー
      run: |
        echo "## テスト結果 🧪" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Go バージョン: ${{ matrix.go-version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### カバレッジ" >> $GITHUB_STEP_SUMMARY
        go tool cover -func=coverage.out | tail -1 | awk '{print "総カバレッジ: " $3}' >> $GITHUB_STEP_SUMMARY

  build:
    name: ビルド確認
    runs-on: ubuntu-latest
    needs: test

    strategy:
      matrix:
        go-version: [1.24]
        os: [linux, windows, darwin]
        arch: [amd64, arm64]
        exclude:
          # Windows ARM64は除外（一般的でないため）
          - os: windows
            arch: arm64

    steps:
    - name: リポジトリをチェックアウト
      uses: actions/checkout@v4

    - name: Go環境をセットアップ
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: クロスコンパイルビルド
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
      run: |
        go build -v -o comemo-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }} .
