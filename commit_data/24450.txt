commit 4addec3aaa495acc7c111acfd0889d8a994bc9f2
Author: Russ Cox <rsc@golang.org>
Date:   Wed Jul 29 15:18:56 2015 -0400

    runtime: reenable bad pointer check in GC
    
    The last time we tried this, linux/arm64 broke.
    The series of CLs leading to this one fixes that problem.
    Let's try again.
    
    Fixes #9880.
    
    Change-Id: I67bc1d959175ec972d4dcbe4aa6f153790f74251
    Reviewed-on: https://go-review.googlesource.com/12849
    Reviewed-by: Brad Fitzpatrick <bradfitz@golang.org>
    Reviewed-by: Austin Clements <austin@google.com>
---
 src/runtime/mbitmap.go | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/runtime/mbitmap.go b/src/runtime/mbitmap.go
index ef17409ebe..b9b52a7bc4 100644
--- a/src/runtime/mbitmap.go
+++ b/src/runtime/mbitmap.go
@@ -201,7 +201,7 @@ func heapBitsForObject(p uintptr) (base uintptr, hbits heapBits, s *mspan) {
 		// The following ensures that we are rigorous about what data
 		// structures hold valid pointers.
 		// TODO(rsc): Check if this still happens.
-		if false {
+		if true {
 			// Still happens sometimes. We don't know why.
 			printlock()
 			print("runtime:objectstart Span weird: p=", hex(p), " k=", hex(k))
