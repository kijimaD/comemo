commit 123510bf8302ecacc1cc73e4255f6b72e7fcb9a7
Author: Ian Lance Taylor <iant@golang.org>
Date:   Thu Jan 21 12:43:34 2016 -0800

    runtime: save context value in NetBSD sigtramp
    
    On NetBSD a signal handler returns to the kernel by calling the
    setcontext system call with the context passed to the signal handler.
    The implementation of runtime·sigreturn_tramp for amd64, copied from the
    NetBSD libc, expects that context address to be in r15.  That works in
    the NetBSD libc because r15 is preserved across the call to the signal
    handler.  It fails in the Go library because r15 is not preserved.
    There are various ways to fix this; this one uses the simple approach,
    essentially identical to the one in the NetBSD libc, of preserving r15
    across the signal handler proper.
    
    Looking at the code for 386 and arm suggests that they are OK.  However,
    I have not actually tested them.
    
    Update #14052.
    
    Change-Id: I2b516b1d05fe5d3b8911e65ca761d621dc37fa1b
    Reviewed-on: https://go-review.googlesource.com/18815
    Run-TryBot: Ian Lance Taylor <iant@golang.org>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Brad Fitzpatrick <bradfitz@golang.org>
---
 src/runtime/sys_netbsd_amd64.s | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/src/runtime/sys_netbsd_amd64.s b/src/runtime/sys_netbsd_amd64.s
index 35a1b5dd00..fb21f1155a 100644
--- a/src/runtime/sys_netbsd_amd64.s
+++ b/src/runtime/sys_netbsd_amd64.s
@@ -245,11 +245,13 @@ TEXT runtime·sigfwd(SB),NOSPLIT,$0-32
 	CALL	AX
 	RET
 
-TEXT runtime·sigtramp(SB),NOSPLIT,$24
+TEXT runtime·sigtramp(SB),NOSPLIT,$32
 	MOVQ	DI, 0(SP)   // signum
 	MOVQ	SI, 8(SP)   // info
 	MOVQ	DX, 16(SP)  // ctx
+	MOVQ	R15, 24(SP) // for sigreturn
 	CALL	runtime·sigtrampgo(SB)
+	MOVQ	24(SP), R15
 	RET
 
 TEXT runtime·mmap(SB),NOSPLIT,$0
