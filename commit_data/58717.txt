commit 34416d7f6f93cd6562636e311c362ebe421f1a4c
Author: Matthew Dempsky <mdempsky@google.com>
Date:   Tue Dec 5 12:56:04 2023 -0800

    cmd/compile: fix escape analysis of string min/max
    
    When I was plumbing min/max support through the compiler, I was
    thinking mostly about numeric argument types. As a result, I forgot
    that escape analysis would need to be aware that min/max can operate
    on string values, which contain pointers.
    
    Fixes #64565.
    
    Change-Id: I36127ce5a2da942401910fa0f9de922726c9f94d
    Reviewed-on: https://go-review.googlesource.com/c/go/+/547715
    Reviewed-by: Keith Randall <khr@google.com>
    Reviewed-by: Mauri de Souza Meneguzzo <mauri870@gmail.com>
    Auto-Submit: Matthew Dempsky <mdempsky@google.com>
    LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>
---
 src/cmd/compile/internal/escape/call.go | 13 ++++++++++---
 test/escape_calls.go                    |  7 +++++++
 test/fixedbugs/issue64565.go            | 15 +++++++++++++++
 test/fixedbugs/issue64565.out           |  3 +++
 4 files changed, 35 insertions(+), 3 deletions(-)

diff --git a/src/cmd/compile/internal/escape/call.go b/src/cmd/compile/internal/escape/call.go
index bf40de0544..4a3753ada9 100644
--- a/src/cmd/compile/internal/escape/call.go
+++ b/src/cmd/compile/internal/escape/call.go
@@ -155,10 +155,17 @@ func (e *escape) call(ks []hole, call ir.Node) {
 		e.discard(call.X)
 		e.discard(call.Y)
 
-	case ir.ODELETE, ir.OMAX, ir.OMIN, ir.OPRINT, ir.OPRINTLN, ir.ORECOVERFP:
+	case ir.ODELETE, ir.OPRINT, ir.OPRINTLN, ir.ORECOVERFP:
 		call := call.(*ir.CallExpr)
-		for i := range call.Args {
-			e.discard(call.Args[i])
+		for _, arg := range call.Args {
+			e.discard(arg)
+		}
+		e.discard(call.RType)
+
+	case ir.OMIN, ir.OMAX:
+		call := call.(*ir.CallExpr)
+		for _, arg := range call.Args {
+			argument(ks[0], arg)
 		}
 		e.discard(call.RType)
 
diff --git a/test/escape_calls.go b/test/escape_calls.go
index aa7c7f516c..5424c006ee 100644
--- a/test/escape_calls.go
+++ b/test/escape_calls.go
@@ -52,3 +52,10 @@ func bar() {
 	s := "string"
 	f([]string{s}) // ERROR "\[\]string{...} escapes to heap"
 }
+
+func strmin(a, b, c string) string { // ERROR "leaking param: a to result ~r0 level=0" "leaking param: b to result ~r0 level=0" "leaking param: c to result ~r0 level=0"
+	return min(a, b, c)
+}
+func strmax(a, b, c string) string { // ERROR "leaking param: a to result ~r0 level=0" "leaking param: b to result ~r0 level=0" "leaking param: c to result ~r0 level=0"
+	return max(a, b, c)
+}
diff --git a/test/fixedbugs/issue64565.go b/test/fixedbugs/issue64565.go
new file mode 100644
index 0000000000..634025ce3e
--- /dev/null
+++ b/test/fixedbugs/issue64565.go
@@ -0,0 +1,15 @@
+// run
+
+// Copyright 2023 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package main
+
+func main() {
+	m := "0"
+	for _, c := range "321" {
+		m = max(string(c), m)
+		println(m)
+	}
+}
diff --git a/test/fixedbugs/issue64565.out b/test/fixedbugs/issue64565.out
new file mode 100644
index 0000000000..1f242fa6f0
--- /dev/null
+++ b/test/fixedbugs/issue64565.out
@@ -0,0 +1,3 @@
+3
+3
+3
