commit 175c4015233272311d20dad8eb3e6f7d1acd941a
Author: Jan Ziak <0xe2.0x9a.0x9b@gmail.com>
Date:   Fri Mar 15 06:57:50 2013 +0100

    cmd/gc: unroll small array types
    
    R=golang-dev, rsc
    CC=golang-dev, nigeltao
    https://golang.org/cl/7812044
---
 src/cmd/gc/reflect.c | 20 +++++++++++++++++---
 1 file changed, 17 insertions(+), 3 deletions(-)

diff --git a/src/cmd/gc/reflect.c b/src/cmd/gc/reflect.c
index b8eb799388..026b5a12b5 100644
--- a/src/cmd/gc/reflect.c
+++ b/src/cmd/gc/reflect.c
@@ -1025,11 +1025,24 @@ dalgsym(Type *t)
 	return s;
 }
 
+static int
+gcinline(Type *t) {
+	switch(t->etype) {
+	case TARRAY:
+		if(t->bound == 1)
+			return 1;
+		if(t->width <= 4*widthptr)
+			return 1;
+		break;
+	}
+	return 0;
+}
+
 static int
 dgcsym1(Sym *s, int ot, Type *t, vlong *off, int stack_size)
 {
 	Type *t1;
-	vlong o, off2, fieldoffset;
+	vlong o, off2, fieldoffset, i;
 
 	if(t->align > 0 && (*off % t->align) != 0)
 		fatal("dgcsym1: invalid initial alignment, %T", t);
@@ -1132,8 +1145,9 @@ dgcsym1(Sym *s, int ot, Type *t, vlong *off, int stack_size)
 		} else {
 			if(t->bound < 1 || !haspointers(t->type)) {
 				*off += t->width;
-			} else if(t->bound == 1) {
-				ot = dgcsym1(s, ot, t->type, off, stack_size);  // recursive call of dgcsym1
+			} else if(gcinline(t)) {
+				for(i=0; i<t->bound; i++)
+					ot = dgcsym1(s, ot, t->type, off, stack_size);  // recursive call of dgcsym1
 			} else {
 				if(stack_size < GC_STACK_CAPACITY) {
 					ot = duintptr(s, ot, GC_ARRAY_START);  // a stack push during GC
