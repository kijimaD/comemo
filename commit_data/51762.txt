commit 8cf11694abbfbdbd4fe0b2c08511f81b8bfe5017
Author: Keith Randall <khr@golang.org>
Date:   Thu Mar 10 09:02:34 2022 -0800

    cmd/compile: fix transform of OEQ/ONE when one arg is a type param
    
    At this point in stenciling, we have shape types, not raw type parameters.
    The code was correct in the other part of this function.
    
    Update #51522
    
    Change-Id: Ife495160a2be5f6af5400363c3efb68dda518b5f
    Reviewed-on: https://go-review.googlesource.com/c/go/+/391475
    Trust: Keith Randall <khr@golang.org>
    Run-TryBot: Keith Randall <khr@golang.org>
    Reviewed-by: Cuong Manh Le <cuong.manhle.vn@gmail.com>
    TryBot-Result: Gopher Robot <gobot@golang.org>
    Reviewed-by: Ian Lance Taylor <iant@golang.org>
---
 src/cmd/compile/internal/noder/transform.go |  2 +-
 test/typeparam/issue51522a.go               | 42 +++++++++++++++++++++++++++++
 2 files changed, 43 insertions(+), 1 deletion(-)

diff --git a/src/cmd/compile/internal/noder/transform.go b/src/cmd/compile/internal/noder/transform.go
index 208630271d..43fd73fdbc 100644
--- a/src/cmd/compile/internal/noder/transform.go
+++ b/src/cmd/compile/internal/noder/transform.go
@@ -242,7 +242,7 @@ func transformCompare(n *ir.BinaryExpr) {
 			aop, _ := typecheck.Assignop(rt, lt)
 			if aop != ir.OXXX {
 				types.CalcSize(rt)
-				if rt.HasTParam() || rt.IsInterface() == lt.IsInterface() || rt.Size() >= 1<<16 {
+				if rt.HasShape() || rt.IsInterface() == lt.IsInterface() || rt.Size() >= 1<<16 {
 					r = ir.NewConvExpr(base.Pos, aop, lt, r)
 					r.SetTypecheck(1)
 				}
diff --git a/test/typeparam/issue51522a.go b/test/typeparam/issue51522a.go
new file mode 100644
index 0000000000..3f854080a7
--- /dev/null
+++ b/test/typeparam/issue51522a.go
@@ -0,0 +1,42 @@
+// run
+
+// Copyright 2022 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+package main
+
+
+func f[T comparable](i any) {
+	var t T
+
+	if i != t {
+		println("FAIL: if i != t")
+	}
+}
+
+type myint int
+
+func (m myint) foo() {
+}
+
+type fooer interface {
+	foo()
+}
+
+type comparableFoo interface {
+	comparable
+	foo()
+}
+
+func g[T comparableFoo](i fooer) {
+	var t T
+
+	if i != t {
+		println("FAIL: if i != t")
+	}
+}
+
+func main() {
+	f[int](int(0))
+	g[myint](myint(0))
+}
