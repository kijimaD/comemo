commit ae10914e67e6e99fec94b3d190558131a24ecd8e
Author: Michael Munday <mike.munday@ibm.com>
Date:   Mon Mar 19 13:11:16 2018 -0400

    cmd/compile: mark LAA and LAAG as clobbering flags on s390x
    
    The atomic add instructions modify the condition code and so need to
    be marked as clobbering flags.
    
    Fixes #24449.
    
    Change-Id: Ic69c8d775fbdbfb2a56c5e0cfca7a49c0d7f6897
    Reviewed-on: https://go-review.googlesource.com/101455
    Run-TryBot: Michael Munday <mike.munday@ibm.com>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Brad Fitzpatrick <bradfitz@golang.org>
---
 src/cmd/compile/internal/ssa/gen/S390XOps.go |  4 +-
 src/cmd/compile/internal/ssa/opGen.go        |  2 +
 test/fixedbugs/issue24449.go                 | 62 ++++++++++++++++++++++++++++
 3 files changed, 66 insertions(+), 2 deletions(-)

diff --git a/src/cmd/compile/internal/ssa/gen/S390XOps.go b/src/cmd/compile/internal/ssa/gen/S390XOps.go
index 673085dd2b..3cda2774a4 100644
--- a/src/cmd/compile/internal/ssa/gen/S390XOps.go
+++ b/src/cmd/compile/internal/ssa/gen/S390XOps.go
@@ -491,8 +491,8 @@ func init() {
 		// Atomic adds.
 		// *(arg0+auxint+aux) += arg1.  arg2=mem.
 		// Returns a tuple of <old contents of *(arg0+auxint+aux), memory>.
-		{name: "LAA", argLength: 3, reg: gpstorelaa, asm: "LAA", typ: "(UInt32,Mem)", aux: "SymOff", faultOnNilArg0: true, hasSideEffects: true, symEffect: "RdWr"},
-		{name: "LAAG", argLength: 3, reg: gpstorelaa, asm: "LAAG", typ: "(UInt64,Mem)", aux: "SymOff", faultOnNilArg0: true, hasSideEffects: true, symEffect: "RdWr"},
+		{name: "LAA", argLength: 3, reg: gpstorelaa, asm: "LAA", typ: "(UInt32,Mem)", aux: "SymOff", clobberFlags: true, faultOnNilArg0: true, hasSideEffects: true, symEffect: "RdWr"},
+		{name: "LAAG", argLength: 3, reg: gpstorelaa, asm: "LAAG", typ: "(UInt64,Mem)", aux: "SymOff", clobberFlags: true, faultOnNilArg0: true, hasSideEffects: true, symEffect: "RdWr"},
 		{name: "AddTupleFirst32", argLength: 2}, // arg1=tuple <x,y>.  Returns <x+arg0,y>.
 		{name: "AddTupleFirst64", argLength: 2}, // arg1=tuple <x,y>.  Returns <x+arg0,y>.
 
diff --git a/src/cmd/compile/internal/ssa/opGen.go b/src/cmd/compile/internal/ssa/opGen.go
index 1ab0e45b0a..fe6189190e 100644
--- a/src/cmd/compile/internal/ssa/opGen.go
+++ b/src/cmd/compile/internal/ssa/opGen.go
@@ -23541,6 +23541,7 @@ var opcodeTable = [...]opInfo{
 		name:           "LAA",
 		auxType:        auxSymOff,
 		argLen:         3,
+		clobberFlags:   true,
 		faultOnNilArg0: true,
 		hasSideEffects: true,
 		symEffect:      SymRdWr,
@@ -23559,6 +23560,7 @@ var opcodeTable = [...]opInfo{
 		name:           "LAAG",
 		auxType:        auxSymOff,
 		argLen:         3,
+		clobberFlags:   true,
 		faultOnNilArg0: true,
 		hasSideEffects: true,
 		symEffect:      SymRdWr,
diff --git a/test/fixedbugs/issue24449.go b/test/fixedbugs/issue24449.go
new file mode 100644
index 0000000000..b236645103
--- /dev/null
+++ b/test/fixedbugs/issue24449.go
@@ -0,0 +1,62 @@
+// run
+
+// Copyright 2018 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package main
+
+import (
+	"sync/atomic"
+)
+
+var cnt32 int32
+
+//go:noinline
+func test32(a, b []int) bool {
+	// Try to generate flag value, issue atomic
+	// adds and then re-use the flag value to see if
+	// the atomic add has clobbered them.
+	atomic.AddInt32(&cnt32, 1)
+	if len(a) == len(b) {
+		atomic.AddInt32(&cnt32, 2)
+	}
+	atomic.AddInt32(&cnt32, 4)
+	if len(a) >= len(b) {
+		atomic.AddInt32(&cnt32, 8)
+	}
+	if len(a) <= len(b) {
+		atomic.AddInt32(&cnt32, 16)
+	}
+	return atomic.LoadInt32(&cnt32) == 31
+}
+
+var cnt64 int64
+
+//go:noinline
+func test64(a, b []int) bool {
+	// Try to generate flag value, issue atomic
+	// adds and then re-use the flag value to see if
+	// the atomic add has clobbered them.
+	atomic.AddInt64(&cnt64, 1)
+	if len(a) == len(b) {
+		atomic.AddInt64(&cnt64, 2)
+	}
+	atomic.AddInt64(&cnt64, 4)
+	if len(a) >= len(b) {
+		atomic.AddInt64(&cnt64, 8)
+	}
+	if len(a) <= len(b) {
+		atomic.AddInt64(&cnt64, 16)
+	}
+	return atomic.LoadInt64(&cnt64) == 31
+}
+
+func main() {
+	if !test32([]int{}, []int{}) {
+		panic("test32")
+	}
+	if !test64([]int{}, []int{}) {
+		panic("test64")
+	}
+}
