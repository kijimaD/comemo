commit 556b3f5bdf935d80d83b26520838852fd840ef70
Author: Matthew Dempsky <mdempsky@google.com>
Date:   Tue Apr 2 23:23:24 2019 -0700

    test: add regress tests for unsafe.Pointer rules
    
    Updates #23109.
    
    Change-Id: I55f7860c868acc948a6397ab6a9295e177724a56
    Reviewed-on: https://go-review.googlesource.com/c/go/+/170450
    Run-TryBot: Matthew Dempsky <mdempsky@google.com>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Cherry Zhang <cherryyz@google.com>
---
 test/escape_unsafe.go | 69 +++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 69 insertions(+)

diff --git a/test/escape_unsafe.go b/test/escape_unsafe.go
new file mode 100644
index 0000000000..16f14c07be
--- /dev/null
+++ b/test/escape_unsafe.go
@@ -0,0 +1,69 @@
+// errorcheck -0 -m -l
+
+// Copyright 2019 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// Test escape analysis for unsafe.Pointer rules.
+
+package escape
+
+import (
+	"reflect"
+	"unsafe"
+)
+
+// (1) Conversion of a *T1 to Pointer to *T2.
+
+func convert(p *float64) *uint64 { // ERROR "leaking param: p to result ~r1 level=0$"
+	return (*uint64)(unsafe.Pointer(p))
+}
+
+// (3) Conversion of a Pointer to a uintptr and back, with arithmetic.
+
+func arithAdd() unsafe.Pointer {
+	var x [2]byte // ERROR "moved to heap: x"
+	return unsafe.Pointer(uintptr(unsafe.Pointer(&x[0])) + 1)
+}
+
+func arithSub() unsafe.Pointer {
+	var x [2]byte // ERROR "moved to heap: x"
+	return unsafe.Pointer(uintptr(unsafe.Pointer(&x[1])) - 1)
+}
+
+func arithMask() unsafe.Pointer {
+	var x [2]byte // ERROR "moved to heap: x"
+	return unsafe.Pointer(uintptr(unsafe.Pointer(&x[1])) &^ 1)
+}
+
+// (5) Conversion of the result of reflect.Value.Pointer or
+// reflect.Value.UnsafeAddr from uintptr to Pointer.
+
+// BAD: should be "leaking param: p to result ~r1 level=0$"
+func valuePointer(p *int) unsafe.Pointer { // ERROR "leaking param: p$"
+	return unsafe.Pointer(reflect.ValueOf(p).Pointer()) // ERROR "p escapes to heap"
+}
+
+// BAD: should be "leaking param: p to result ~r1 level=0$"
+func valueUnsafeAddr(p *int) unsafe.Pointer { // ERROR "leaking param: p$"
+	return unsafe.Pointer(reflect.ValueOf(p).Elem().UnsafeAddr()) // ERROR "p escapes to heap"
+}
+
+// (6) Conversion of a reflect.SliceHeader or reflect.StringHeader
+// Data field to or from Pointer.
+
+func fromSliceData(s []int) unsafe.Pointer { // ERROR "leaking param: s to result ~r1 level=0$"
+	return unsafe.Pointer((*reflect.SliceHeader)(unsafe.Pointer(&s)).Data)
+}
+
+func fromStringData(s string) unsafe.Pointer { // ERROR "leaking param: s to result ~r1 level=0$"
+	return unsafe.Pointer((*reflect.StringHeader)(unsafe.Pointer(&s)).Data)
+}
+
+func toSliceData(s *[]int, p unsafe.Pointer) { // ERROR "s does not escape" "leaking param: p$"
+	(*reflect.SliceHeader)(unsafe.Pointer(s)).Data = uintptr(p)
+}
+
+func toStringData(s *string, p unsafe.Pointer) { // ERROR "s does not escape" "leaking param: p$"
+	(*reflect.SliceHeader)(unsafe.Pointer(s)).Data = uintptr(p)
+}
