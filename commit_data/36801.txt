commit 555eb70db2f7ff4aa22768339425430c1dfdf6ac
Author: Tim Cooper <tim.cooper@layeh.com>
Date:   Tue May 29 17:29:31 2018 -0300

    all: regenerate stringer files
    
    Change-Id: I34838320047792c4719837591e848b87ccb7f5ab
    Reviewed-on: https://go-review.googlesource.com/115058
    Reviewed-by: Brad Fitzpatrick <bradfitz@golang.org>
---
 src/cmd/internal/objabi/reloctype_string.go |  4 ++--
 src/debug/macho/reloctype_string.go         | 10 +++++-----
 src/math/big/accuracy_string.go             |  8 ++++----
 src/math/big/roundingmode_string.go         |  8 ++++----
 4 files changed, 15 insertions(+), 15 deletions(-)

diff --git a/src/cmd/internal/objabi/reloctype_string.go b/src/cmd/internal/objabi/reloctype_string.go
index b3dbaa39eb..2cd3a94045 100644
--- a/src/cmd/internal/objabi/reloctype_string.go
+++ b/src/cmd/internal/objabi/reloctype_string.go
@@ -4,9 +4,9 @@ package objabi
 
 import "strconv"
 
-const _RelocType_name = "R_ADDRR_ADDRPOWERR_ADDRARM64R_ADDRMIPSR_ADDROFFR_WEAKADDROFFR_SIZER_CALLR_CALLARMR_CALLARM64R_CALLINDR_CALLPOWERR_CALLMIPSR_CONSTR_PCRELR_TLS_LER_TLS_IER_GOTOFFR_PLT0R_PLT1R_PLT2R_USEFIELDR_USETYPER_METHODOFFR_POWER_TOCR_GOTPCRELR_JMPMIPSR_DWARFSECREFR_DWARFFILEREFR_ARM64_TLS_LER_ARM64_TLS_IER_ARM64_GOTPCRELR_POWER_TLS_LER_POWER_TLS_IER_POWER_TLSR_ADDRPOWER_DSR_ADDRPOWER_GOTR_ADDRPOWER_PCRELR_ADDRPOWER_TOCRELR_ADDRPOWER_TOCREL_DSR_PCRELDBLR_ADDRMIPSUR_ADDRMIPSTLSR_ADDRCUOFF"
+const _RelocType_name = "R_ADDRR_ADDRPOWERR_ADDRARM64R_ADDRMIPSR_ADDROFFR_WEAKADDROFFR_SIZER_CALLR_CALLARMR_CALLARM64R_CALLINDR_CALLPOWERR_CALLMIPSR_CONSTR_PCRELR_TLS_LER_TLS_IER_GOTOFFR_PLT0R_PLT1R_PLT2R_USEFIELDR_USETYPER_METHODOFFR_POWER_TOCR_GOTPCRELR_JMPMIPSR_DWARFSECREFR_DWARFFILEREFR_ARM64_TLS_LER_ARM64_TLS_IER_ARM64_GOTPCRELR_POWER_TLS_LER_POWER_TLS_IER_POWER_TLSR_ADDRPOWER_DSR_ADDRPOWER_GOTR_ADDRPOWER_PCRELR_ADDRPOWER_TOCRELR_ADDRPOWER_TOCREL_DSR_PCRELDBLR_ADDRMIPSUR_ADDRMIPSTLSR_ADDRCUOFFR_WASMIMPORT"
 
-var _RelocType_index = [...]uint16{0, 6, 17, 28, 38, 47, 60, 66, 72, 81, 92, 101, 112, 122, 129, 136, 144, 152, 160, 166, 172, 178, 188, 197, 208, 219, 229, 238, 251, 265, 279, 293, 309, 323, 337, 348, 362, 377, 394, 412, 433, 443, 454, 467, 478}
+var _RelocType_index = [...]uint16{0, 6, 17, 28, 38, 47, 60, 66, 72, 81, 92, 101, 112, 122, 129, 136, 144, 152, 160, 166, 172, 178, 188, 197, 208, 219, 229, 238, 251, 265, 279, 293, 309, 323, 337, 348, 362, 377, 394, 412, 433, 443, 454, 467, 478, 490}
 
 func (i RelocType) String() string {
 	i -= 1
diff --git a/src/debug/macho/reloctype_string.go b/src/debug/macho/reloctype_string.go
index 6d5c5d87e8..9c2b13186e 100644
--- a/src/debug/macho/reloctype_string.go
+++ b/src/debug/macho/reloctype_string.go
@@ -2,7 +2,7 @@
 
 package macho
 
-import "fmt"
+import "strconv"
 
 const _RelocTypeGeneric_name = "GENERIC_RELOC_VANILLAGENERIC_RELOC_PAIRGENERIC_RELOC_SECTDIFFGENERIC_RELOC_PB_LA_PTRGENERIC_RELOC_LOCAL_SECTDIFFGENERIC_RELOC_TLV"
 
@@ -10,7 +10,7 @@ var _RelocTypeGeneric_index = [...]uint8{0, 21, 39, 61, 84, 112, 129}
 
 func (i RelocTypeGeneric) String() string {
 	if i < 0 || i >= RelocTypeGeneric(len(_RelocTypeGeneric_index)-1) {
-		return fmt.Sprintf("RelocTypeGeneric(%d)", i)
+		return "RelocTypeGeneric(" + strconv.FormatInt(int64(i), 10) + ")"
 	}
 	return _RelocTypeGeneric_name[_RelocTypeGeneric_index[i]:_RelocTypeGeneric_index[i+1]]
 }
@@ -21,7 +21,7 @@ var _RelocTypeX86_64_index = [...]uint8{0, 21, 40, 59, 80, 96, 119, 140, 161, 18
 
 func (i RelocTypeX86_64) String() string {
 	if i < 0 || i >= RelocTypeX86_64(len(_RelocTypeX86_64_index)-1) {
-		return fmt.Sprintf("RelocTypeX86_64(%d)", i)
+		return "RelocTypeX86_64(" + strconv.FormatInt(int64(i), 10) + ")"
 	}
 	return _RelocTypeX86_64_name[_RelocTypeX86_64_index[i]:_RelocTypeX86_64_index[i+1]]
 }
@@ -32,7 +32,7 @@ var _RelocTypeARM_index = [...]uint8{0, 17, 31, 49, 73, 92, 106, 126, 148, 162,
 
 func (i RelocTypeARM) String() string {
 	if i < 0 || i >= RelocTypeARM(len(_RelocTypeARM_index)-1) {
-		return fmt.Sprintf("RelocTypeARM(%d)", i)
+		return "RelocTypeARM(" + strconv.FormatInt(int64(i), 10) + ")"
 	}
 	return _RelocTypeARM_name[_RelocTypeARM_index[i]:_RelocTypeARM_index[i+1]]
 }
@@ -43,7 +43,7 @@ var _RelocTypeARM64_index = [...]uint16{0, 20, 42, 62, 80, 101, 128, 158, 184, 2
 
 func (i RelocTypeARM64) String() string {
 	if i < 0 || i >= RelocTypeARM64(len(_RelocTypeARM64_index)-1) {
-		return fmt.Sprintf("RelocTypeARM64(%d)", i)
+		return "RelocTypeARM64(" + strconv.FormatInt(int64(i), 10) + ")"
 	}
 	return _RelocTypeARM64_name[_RelocTypeARM64_index[i]:_RelocTypeARM64_index[i+1]]
 }
diff --git a/src/math/big/accuracy_string.go b/src/math/big/accuracy_string.go
index 24ef7f1077..1501ace00d 100644
--- a/src/math/big/accuracy_string.go
+++ b/src/math/big/accuracy_string.go
@@ -1,8 +1,8 @@
-// generated by stringer -type=Accuracy; DO NOT EDIT
+// Code generated by "stringer -type=Accuracy"; DO NOT EDIT.
 
 package big
 
-import "fmt"
+import "strconv"
 
 const _Accuracy_name = "BelowExactAbove"
 
@@ -10,8 +10,8 @@ var _Accuracy_index = [...]uint8{0, 5, 10, 15}
 
 func (i Accuracy) String() string {
 	i -= -1
-	if i < 0 || i+1 >= Accuracy(len(_Accuracy_index)) {
-		return fmt.Sprintf("Accuracy(%d)", i+-1)
+	if i < 0 || i >= Accuracy(len(_Accuracy_index)-1) {
+		return "Accuracy(" + strconv.FormatInt(int64(i+-1), 10) + ")"
 	}
 	return _Accuracy_name[_Accuracy_index[i]:_Accuracy_index[i+1]]
 }
diff --git a/src/math/big/roundingmode_string.go b/src/math/big/roundingmode_string.go
index 05024b8065..c7629eb98b 100644
--- a/src/math/big/roundingmode_string.go
+++ b/src/math/big/roundingmode_string.go
@@ -1,16 +1,16 @@
-// generated by stringer -type=RoundingMode; DO NOT EDIT
+// Code generated by "stringer -type=RoundingMode"; DO NOT EDIT.
 
 package big
 
-import "fmt"
+import "strconv"
 
 const _RoundingMode_name = "ToNearestEvenToNearestAwayToZeroAwayFromZeroToNegativeInfToPositiveInf"
 
 var _RoundingMode_index = [...]uint8{0, 13, 26, 32, 44, 57, 70}
 
 func (i RoundingMode) String() string {
-	if i+1 >= RoundingMode(len(_RoundingMode_index)) {
-		return fmt.Sprintf("RoundingMode(%d)", i)
+	if i >= RoundingMode(len(_RoundingMode_index)-1) {
+		return "RoundingMode(" + strconv.FormatInt(int64(i), 10) + ")"
 	}
 	return _RoundingMode_name[_RoundingMode_index[i]:_RoundingMode_index[i+1]]
 }
