commit c62b003eba484d54c2707b379d29240e5367e98f
Author: David du Colombier <0intro@gmail.com>
Date:   Fri Feb 27 17:51:25 2015 +0100

    build: restore original timeouts in run.rc
    
    The timeouts were increased in CL 2462 and CL 2510
    to work around a slowness issue when running Go
    programs on a Plan 9 machine on GCE.
    
    Since we figured out this issue, we can restore
    the timeouts to their original values.
    
    Updates #10028.
    
    Change-Id: I2e5b91666461715df69df97ea791f3d88d9de4d0
    Reviewed-on: https://go-review.googlesource.com/6261
    Reviewed-by: Brad Fitzpatrick <bradfitz@golang.org>
---
 src/run.rc | 8 ++------
 1 file changed, 2 insertions(+), 6 deletions(-)

diff --git a/src/run.rc b/src/run.rc
index 1c92f0389c..c28ba34498 100755
--- a/src/run.rc
+++ b/src/run.rc
@@ -29,7 +29,7 @@ if not {
 GOROOT_FINAL = ()
 
 echo '# Testing packages.'
-time go test std cmd -short -timeout 240s
+time go test std cmd -short -timeout 120s
 echo
 
 # Temporary GCE builder hack until Plan 9 on GCE is fast enough.
@@ -42,12 +42,8 @@ if(~ $GOTESTONLY std) {
 
 # We set GOMAXPROCS=2 in addition to -cpu=1,2,4 in order to test runtime bootstrap code,
 # creation of first goroutines and first garbage collections in the parallel setting.
-# TODO(bradfitz,0intro): make this not be 15 minutes once Plan 9 runs quickly on GCE.
-# Linux does 63 seconds on GCE, but Plan 9 was failing with 8 minutes.
-# See issue 8393 and 9491.
-# TODO(bradfitz,0intro): remove -v once we see some a successful build.
 echo '# GOMAXPROCS=2 runtime -cpu=1,2,4'
-GOMAXPROCS=2 go test runtime -v -short -timeout 15m -cpu 1,2,4
+GOMAXPROCS=2 go test runtime -short -timeout 240s -cpu 1,2,4
 echo
 
 echo '# sync -cpu=10'
