commit f59f9b85276b6f80b6e55ea747a5df64bb83ecce
Author: Dmitry Vyukov <dvyukov@google.com>
Date:   Fri Feb 13 17:14:48 2015 +0300

    runtime: fix stack corruption in race mode
    
    MOVQ RARG0, 0(SP) smashes exactly what was saved by PUSHQ R15.
    This code managed to work somehow with the current race runtime,
    but corrupts caller arguments with new race runtime that I am testing.
    
    Change-Id: I9ffe8b5eee86451db36e99dbf4d11f320192e576
    Reviewed-on: https://go-review.googlesource.com/4810
    Reviewed-by: Keith Randall <khr@golang.org>
---
 src/runtime/race_amd64.s | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/src/runtime/race_amd64.s b/src/runtime/race_amd64.s
index 972cbe3f8a..267cd6cec4 100644
--- a/src/runtime/race_amd64.s
+++ b/src/runtime/race_amd64.s
@@ -383,8 +383,9 @@ TEXT	runtime·racesymbolizethunk(SB), NOSPLIT, $56-8
 	MOVQ	g_m(R13), R13
 	MOVQ	m_g0(R13), R14
 	MOVQ	R14, g(R12)	// g = m->g0
-	MOVQ	RARG0, 0(SP)	// func arg
+	PUSHQ	RARG0	// func arg
 	CALL	runtime·racesymbolize(SB)
+	POPQ	R12
 	// All registers are smashed after Go code, reload.
 	get_tls(R12)
 	MOVQ	g(R12), R13
