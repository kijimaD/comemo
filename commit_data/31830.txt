commit df6025bc0d7746fdf40a39398e5d8799ccf78a55
Author: Austin Clements <austin@google.com>
Date:   Thu Mar 16 17:02:24 2017 -0400

    runtime: disallow malloc or panic in scavenge
    
    Mallocs and panics in the scavenge path are particularly nasty because
    they're likely to silently self-deadlock on the mheap.lock. Avoid
    sinking lots of time into debugging these issues in the future by
    turning these into immediate throws.
    
    Change-Id: Ib36fdda33bc90b21c32432b03561630c1f3c69bc
    Reviewed-on: https://go-review.googlesource.com/38293
    Run-TryBot: Austin Clements <austin@google.com>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Rick Hudson <rlh@golang.org>
---
 src/runtime/mheap.go | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/src/runtime/mheap.go b/src/runtime/mheap.go
index e08680023d..8cd78d460a 100644
--- a/src/runtime/mheap.go
+++ b/src/runtime/mheap.go
@@ -991,6 +991,11 @@ func scavengelist(list *mSpanList, now, limit uint64) uintptr {
 }
 
 func (h *mheap) scavenge(k int32, now, limit uint64) {
+	// Disallow malloc or panic while holding the heap lock. We do
+	// this here because this is an non-mallocgc entry-point to
+	// the mheap API.
+	gp := getg()
+	gp.m.mallocing++
 	lock(&h.lock)
 	var sumreleased uintptr
 	for i := 0; i < len(h.free); i++ {
@@ -998,6 +1003,7 @@ func (h *mheap) scavenge(k int32, now, limit uint64) {
 	}
 	sumreleased += scavengelist(&h.freelarge, now, limit)
 	unlock(&h.lock)
+	gp.m.mallocing--
 
 	if debug.gctrace > 0 {
 		if sumreleased > 0 {
