commit 01e072db5d26c224dfbe7763a5b94ab23c163983
Author: Ian Lance Taylor <iant@golang.org>
Date:   Tue Dec 11 07:46:10 2018 -0800

    cmd/cgo: don't cache bad pointer typedefs
    
    The set of bad pointer typedefs changes as we see more typedefs, so
    avoid looking in the cache when we find one.
    
    Fixes #29175
    
    Change-Id: Idd82289bdd8628d11a983fa5ec96517e3a5bcbf1
    Reviewed-on: https://go-review.googlesource.com/c/153597
    Run-TryBot: Ian Lance Taylor <iant@golang.org>
    Reviewed-by: Keith Randall <khr@golang.org>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
---
 src/cmd/cgo/gcc.go | 18 ++++++++++++++----
 1 file changed, 14 insertions(+), 4 deletions(-)

diff --git a/src/cmd/cgo/gcc.go b/src/cmd/cgo/gcc.go
index 17a9936e6a..321d4db040 100644
--- a/src/cmd/cgo/gcc.go
+++ b/src/cmd/cgo/gcc.go
@@ -2177,12 +2177,22 @@ func (c *typeConv) FinishType(pos token.Pos) {
 // Type returns a *Type with the same memory layout as
 // dtype when used as the type of a variable or a struct field.
 func (c *typeConv) Type(dtype dwarf.Type, pos token.Pos) *Type {
+	// Always recompute bad pointer typedefs, as the set of such
+	// typedefs changes as we see more types.
+	checkCache := true
+	if dtt, ok := dtype.(*dwarf.TypedefType); ok && c.badPointerTypedef(dtt) {
+		checkCache = false
+	}
+
 	key := dtype.String()
-	if t, ok := c.m[key]; ok {
-		if t.Go == nil {
-			fatalf("%s: type conversion loop at %s", lineno(pos), dtype)
+
+	if checkCache {
+		if t, ok := c.m[key]; ok {
+			if t.Go == nil {
+				fatalf("%s: type conversion loop at %s", lineno(pos), dtype)
+			}
+			return t
 		}
-		return t
 	}
 
 	t := new(Type)
