commit d3a2021f71d5a4d31bba88ca634823b14904e239
Author: Mikio Hara <mikioh.mikioh@gmail.com>
Date:   Thu Sep 4 16:23:37 2014 +0900

    runtime: fix typos
    
    LGTM=dvyukov
    R=dvyukov
    CC=golang-codereviews
    https://golang.org/cl/141000043
---
 src/pkg/runtime/netpoll.go | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/pkg/runtime/netpoll.go b/src/pkg/runtime/netpoll.go
index 5c410fc678..55f90f8c1e 100644
--- a/src/pkg/runtime/netpoll.go
+++ b/src/pkg/runtime/netpoll.go
@@ -14,7 +14,7 @@ import "unsafe"
 // func netpollopen(fd uintptr, pd *pollDesc) int32	// to arm edge-triggered notifications
 // and associate fd with pd.
 // An implementation must call the following function to denote that the pd is ready.
-// func netpollready(rg, wg **gp, pd *pollDesc, mode int32)
+// func netpollready(gpp **g, pd *pollDesc, mode int32)
 
 // pollDesc contains 2 binary semaphores, rg and wg, to park reader and writer
 // goroutines respectively. The semaphore can be in the following states:
@@ -99,7 +99,7 @@ func netpollOpen(fd uintptr) (*pollDesc, int) {
 
 func netpollClose(pd *pollDesc) {
 	if !pd.closing {
-		gothrow("runtime_pollClose: close w/o unblock")
+		gothrow("netpollClose: close w/o unblock")
 	}
 	if pd.wg != 0 && pd.wg != pdReady {
 		gothrow("netpollClose: blocked write on closing descriptor")
@@ -388,7 +388,7 @@ func netpolldeadlineimpl(pd *pollDesc, seq uintptr, read, write bool) {
 	var rg *g
 	if read {
 		if pd.rd <= 0 || pd.rt.f == nil {
-			gothrow("netpollDeadlineImpl: inconsistent read deadline")
+			gothrow("netpolldeadlineimpl: inconsistent read deadline")
 		}
 		pd.rd = -1
 		atomicstorep(unsafe.Pointer(&pd.rt.f), nil) // full memory barrier between store to rd and load of rg in netpollunblock
