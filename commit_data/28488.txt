commit e149624ebb00a2fcc59bc02b9f122e3c4bae6e9c
Author: Austin Clements <austin@google.com>
Date:   Fri May 27 14:24:26 2016 -0400

    cmd/compile/internal/gc: gofmt
    
    Commit 36a80c5 introduced formatting errors.
    
    Change-Id: I6d5b231200cd7abcd5b94c1a3f4e99f10ee11c4f
    Reviewed-on: https://go-review.googlesource.com/23513
    Reviewed-by: David Chase <drchase@google.com>
    Run-TryBot: David Chase <drchase@google.com>
---
 src/cmd/compile/internal/gc/closure.go |  2 +-
 src/cmd/compile/internal/gc/dcl.go     |  7 +++----
 src/cmd/compile/internal/gc/syntax.go  | 20 ++++++++++----------
 3 files changed, 14 insertions(+), 15 deletions(-)

diff --git a/src/cmd/compile/internal/gc/closure.go b/src/cmd/compile/internal/gc/closure.go
index 6d84aed7b1..ecdf19a2c4 100644
--- a/src/cmd/compile/internal/gc/closure.go
+++ b/src/cmd/compile/internal/gc/closure.go
@@ -69,7 +69,7 @@ func closurebody(body []*Node) *Node {
 		// Unlink from v1; see comment in syntax.go type Param for these fields.
 		v1 := v.Name.Defn
 		v1.Name.Param.Innermost = v.Name.Param.Outer
-		
+
 		// If the closure usage of v is not dense,
 		// we need to make it dense; now that we're out
 		// of the function in which v appeared,
diff --git a/src/cmd/compile/internal/gc/dcl.go b/src/cmd/compile/internal/gc/dcl.go
index 9e7efdb3fc..a4b98ec7c5 100644
--- a/src/cmd/compile/internal/gc/dcl.go
+++ b/src/cmd/compile/internal/gc/dcl.go
@@ -403,7 +403,7 @@ func oldname(s *Sym) *Node {
 			c.Addable = false
 			c.Ullman = 2
 			c.Name.Funcdepth = Funcdepth
-			
+
 			// Link into list of active closure variables.
 			// Popped from list in func closurebody.
 			c.Name.Param.Outer = n.Name.Param.Innermost
@@ -508,7 +508,7 @@ func ifacedcl(n *Node) {
 	n.Func = new(Func)
 	n.Func.FCurfn = Curfn
 	dclcontext = PPARAM
-	
+
 	funcstart(n)
 	funcargs(n.Right)
 
@@ -670,8 +670,7 @@ func funcargs2(t *Type) {
 }
 
 var funcstack []*Node // stack of previous values of Curfn
-var Funcdepth int32 // len(funcstack) during parsing, but then forced to be the same later during compilation
-
+var Funcdepth int32   // len(funcstack) during parsing, but then forced to be the same later during compilation
 
 // start the function.
 // called before funcargs; undone at end of funcbody.
diff --git a/src/cmd/compile/internal/gc/syntax.go b/src/cmd/compile/internal/gc/syntax.go
index d4bfc84d67..e673db9004 100644
--- a/src/cmd/compile/internal/gc/syntax.go
+++ b/src/cmd/compile/internal/gc/syntax.go
@@ -156,16 +156,16 @@ func (n *Node) SetOpt(x interface{}) {
 
 // Name holds Node fields used only by named nodes (ONAME, OPACK, OLABEL, ODCLFIELD, some OLITERAL).
 type Name struct {
-	Pack      *Node // real package for import . names
-	Pkg       *Pkg  // pkg for OPACK nodes
-	Heapaddr  *Node // temp holding heap address of param (could move to Param?)
-	Inlvar    *Node // ONAME substitute while inlining (could move to Param?)
-	Defn      *Node // initializing assignment
-	Curfn     *Node // function for local variables
+	Pack      *Node  // real package for import . names
+	Pkg       *Pkg   // pkg for OPACK nodes
+	Heapaddr  *Node  // temp holding heap address of param (could move to Param?)
+	Inlvar    *Node  // ONAME substitute while inlining (could move to Param?)
+	Defn      *Node  // initializing assignment
+	Curfn     *Node  // function for local variables
 	Param     *Param // additional fields for ONAME, ODCLFIELD
-	Decldepth int32 // declaration loop depth, increased for every loop or label
-	Vargen    int32 // unique name for ONAME within a function.  Function outputs are numbered starting at one.
-	Iota      int32 // value if this name is iota
+	Decldepth int32  // declaration loop depth, increased for every loop or label
+	Vargen    int32  // unique name for ONAME within a function.  Function outputs are numbered starting at one.
+	Iota      int32  // value if this name is iota
 	Funcdepth int32
 	Method    bool // OCALLMETH name
 	Readonly  bool
@@ -254,7 +254,7 @@ type Param struct {
 	// Because of the sharding of pieces of the node, x.Defn means x.Name.Defn
 	// and x.Innermost/Outer means x.Name.Param.Innermost/Outer.
 	Innermost *Node
-	Outer *Node
+	Outer     *Node
 }
 
 // Func holds Node fields used only with function-like nodes.
