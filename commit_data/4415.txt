commit 19c18358ca108363d3facd5ca5b39f0048b4ddb5
Author: Russ Cox <rsc@golang.org>
Date:   Mon Dec 14 19:06:20 2009 -0800

    runtime: in exitsyscall, avoid confusing garbage collector
    
    R=r
    CC=golang-dev
    https://golang.org/cl/178046
---
 src/pkg/runtime/proc.c | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

diff --git a/src/pkg/runtime/proc.c b/src/pkg/runtime/proc.c
index f04cb66928..e81089bfae 100644
--- a/src/pkg/runtime/proc.c
+++ b/src/pkg/runtime/proc.c
@@ -566,14 +566,19 @@ runtimeÂ·exitsyscall(void)
 		unlock(&sched);
 		return;
 	}
-	g->status = Grunning;
 	sched.msyscall--;
 	sched.mcpu++;
 	// Fast path - if there's room for this m, we're done.
 	if(sched.mcpu <= sched.mcpumax) {
+		g->status = Grunning;
 		unlock(&sched);
 		return;
 	}
+	// Tell scheduler to put g back on the run queue:
+	// mostly equivalent to g->status = Grunning,
+	// but keeps the garbage collector from thinking
+	// that g is running right now, which it's not.
+	g->readyonstop = 1;
 	unlock(&sched);
 
 	// Slow path - all the cpus are taken.
