commit d25c3eadea9bc5c8b6451c3502d6063dd618a3af
Author: Michael Hudson-Doyle <michael.hudson@canonical.com>
Date:   Fri May 27 15:41:55 2016 +1200

    cmd/compile: do not generate tail calls when dynamic linking on ppc64le
    
    When a wrapper method calls the real implementation, it's not possible to use a
    tail call when dynamic linking on ppc64le. The bad scenario is when a local
    call is made to the wrapper: the wrapper will call the implementation, which
    might be in a different module and so set the TOC to the appropriate value for
    that module. But if it returns directly to the wrapper's caller, nothing will
    reset it to the correct value for that function.
    
    Change-Id: Icebf24c9a2a0a9a7c2bce6bd6f1358657284fb10
    Reviewed-on: https://go-review.googlesource.com/23468
    Reviewed-by: Ian Lance Taylor <iant@golang.org>
    Run-TryBot: Michael Hudson-Doyle <michael.hudson@canonical.com>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
---
 misc/cgo/testshared/src/depBase/dep.go | 4 ++++
 misc/cgo/testshared/src/exe2/exe2.go   | 3 ++-
 src/cmd/compile/internal/gc/subr.go    | 8 +++++++-
 3 files changed, 13 insertions(+), 2 deletions(-)

diff --git a/misc/cgo/testshared/src/depBase/dep.go b/misc/cgo/testshared/src/depBase/dep.go
index f9d3d7ce3a..3ceba34a2b 100644
--- a/misc/cgo/testshared/src/depBase/dep.go
+++ b/misc/cgo/testshared/src/depBase/dep.go
@@ -12,6 +12,10 @@ type Dep struct {
 	X int
 }
 
+func (d *Dep) Method() int {
+	return 10
+}
+
 func F() int {
 	return V
 }
diff --git a/misc/cgo/testshared/src/exe2/exe2.go b/misc/cgo/testshared/src/exe2/exe2.go
index acdb4ddcc5..675fd1f365 100644
--- a/misc/cgo/testshared/src/exe2/exe2.go
+++ b/misc/cgo/testshared/src/exe2/exe2.go
@@ -3,5 +3,6 @@ package main
 import "dep2"
 
 func main() {
-	dep2.W = dep2.G() + 1
+	d := &dep2.Dep2{}
+	dep2.W = dep2.G() + 1 + d.Method()
 }
diff --git a/src/cmd/compile/internal/gc/subr.go b/src/cmd/compile/internal/gc/subr.go
index c2abff7b63..1db1cbade8 100644
--- a/src/cmd/compile/internal/gc/subr.go
+++ b/src/cmd/compile/internal/gc/subr.go
@@ -1860,7 +1860,13 @@ func genwrapper(rcvr *Type, method *Field, newnam *Sym, iface int) {
 	dot := adddot(NodSym(OXDOT, this.Left, method.Sym))
 
 	// generate call
-	if !instrumenting && rcvr.IsPtr() && methodrcvr.IsPtr() && method.Embedded != 0 && !isifacemethod(method.Type) {
+	// It's not possible to use a tail call when dynamic linking on ppc64le. The
+	// bad scenario is when a local call is made to the wrapper: the wrapper will
+	// call the implementation, which might be in a different module and so set
+	// the TOC to the appropriate value for that module. But if it returns
+	// directly to the wrapper's caller, nothing will reset it to the correct
+	// value for that function.
+	if !instrumenting && rcvr.IsPtr() && methodrcvr.IsPtr() && method.Embedded != 0 && !isifacemethod(method.Type) && !(Thearch.LinkArch.Name == "ppc64le" && Ctxt.Flag_dynlink) {
 		// generate tail call: adjust pointer receiver and jump to embedded method.
 		dot = dot.Left // skip final .M
 		// TODO(mdempsky): Remove dependency on dotlist.
