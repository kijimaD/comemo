commit 4ce9ea52c9ac48f85fba1233b6e7d563f89dff8b
Author: Nigel Tao <nigeltao@golang.org>
Date:   Thu Oct 22 23:59:00 2020 +1100

    strconv: fix Eisel-Lemire for negative zero
    
    This is somewhat academic (and no tests failed before this commit),
    since func atof64 only calls func eiselLemire when func atof64exact
    fails, and func atof64exact doesn't fail when parsing positive or
    negative zeroes. But it's still worth fixing.
    
    Change-Id: Ibe6ef4c8fd96827673b711d5456003fbc447e39c
    Reviewed-on: https://go-review.googlesource.com/c/go/+/264140
    Trust: Nigel Tao <nigeltao@golang.org>
    Trust: Robert Griesemer <gri@golang.org>
    Reviewed-by: Robert Griesemer <gri@golang.org>
---
 src/strconv/eisel_lemire.go | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/src/strconv/eisel_lemire.go b/src/strconv/eisel_lemire.go
index 00fadbdb96..5cd22a7e37 100644
--- a/src/strconv/eisel_lemire.go
+++ b/src/strconv/eisel_lemire.go
@@ -22,14 +22,17 @@ import (
 	"math/bits"
 )
 
-func eiselLemire(man uint64, exp10 int, neg bool) (ret float64, ok bool) {
+func eiselLemire(man uint64, exp10 int, neg bool) (f float64, ok bool) {
 	// The terse comments in this function body refer to sections of the
 	// https://nigeltao.github.io/blog/2020/eisel-lemire.html blog post.
 
 	// Exp10 Range.
 	const exp10Min, exp10Max = -307, +288
 	if man == 0 {
-		return 0, true
+		if neg {
+			f = math.Float64frombits(0x80000000_00000000) // Negative zero.
+		}
+		return f, true
 	}
 	if exp10 < exp10Min || exp10Max < exp10 {
 		return 0, false
