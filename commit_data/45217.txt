commit 6b8e3e2d060b009fe92b39f7022445d96e225325
Author: Cherry Zhang <cherryyz@google.com>
Date:   Sat Apr 17 22:50:13 2021 -0400

    cmd/compile: reduce redundant register moves for regabi calls
    
    Currently, if we have AX=a and BX=b, and we want to make a call
    F(1, a, b), to move arguments into the desired registers it emits
    
            MOVQ AX, CX
            MOVL $1, AX // AX=1
            MOVQ BX, DX
            MOVQ CX, BX // BX=a
            MOVQ DX, CX // CX=b
    
    This has a few redundant moves.
    
    This is because we process inputs in order. First, allocate 1 to
    AX, which kicks out a (in AX) to CX (a free register at the
    moment). Then, allocate a to BX, which kicks out b (in BX) to DX.
    Finally, put b to CX.
    
    Notice that if we start with allocating CX=b, then BX=a, AX=1,
    we will not have redundant moves. This CL reduces redundant moves
    by allocating them in different order: First, for inpouts that are
    already in place, keep them there. Then allocate free registers.
    Then everything else.
    
                                 before       after
    cmd/compile binary size     23703888    23609680
                text size        8565899     8533291
    
    (with regabiargs enabled.)
    
    Change-Id: I69e1bdf745f2c90bb791f6d7c45b37384af1e874
    Reviewed-on: https://go-review.googlesource.com/c/go/+/311371
    Trust: Cherry Zhang <cherryyz@google.com>
    Reviewed-by: David Chase <drchase@google.com>
    Reviewed-by: Than McIntosh <thanm@google.com>

 src/cmd/compile/internal/ssa/regalloc.go | 54 +++++++++++++++++++++++++++++---
 test/codegen/regabi_regalloc.go          | 23 ++++++++++++++
 2 files changed, 73 insertions(+), 4 deletions(-)
