commit 04845fe78aeba33106c6f8a40d05e608ca687214
Author: Keith Randall <khr@google.com>
Date:   Mon May 6 12:58:54 2019 -0700

    reflect: special-case panic message when returning Value{} from MakeFunc function
    
    Before this CL we used to panic with "nil pointer dereference" because
    the value we're calling assignTo on is the zero Value. Provide a better
    error message.
    
    Fixes #28748
    
    Change-Id: I7dd4c9e30b599863664d91e78cc45878d8b0052e
    Reviewed-on: https://go-review.googlesource.com/c/go/+/175440
    Run-TryBot: Keith Randall <khr@golang.org>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Brad Fitzpatrick <bradfitz@golang.org>
---
 src/reflect/value.go         |  4 ++++
 test/fixedbugs/issue28748.go | 32 ++++++++++++++++++++++++++++++++
 2 files changed, 36 insertions(+)

diff --git a/src/reflect/value.go b/src/reflect/value.go
index f0db434009..c58b2d2567 100644
--- a/src/reflect/value.go
+++ b/src/reflect/value.go
@@ -560,6 +560,10 @@ func callReflect(ctxt *makeFuncImpl, frame unsafe.Pointer, retValid *bool) {
 		}
 		for i, typ := range ftyp.out() {
 			v := out[i]
+			if v.typ == nil {
+				panic("reflect: function created by MakeFunc using " + funcName(f) +
+					" returned zero Value")
+			}
 			if v.flag&flagRO != 0 {
 				panic("reflect: function created by MakeFunc using " + funcName(f) +
 					" returned value obtained from unexported field")
diff --git a/test/fixedbugs/issue28748.go b/test/fixedbugs/issue28748.go
new file mode 100644
index 0000000000..4f9b0222ab
--- /dev/null
+++ b/test/fixedbugs/issue28748.go
@@ -0,0 +1,32 @@
+// run
+
+package main
+
+import (
+	"fmt"
+	"reflect"
+	"strings"
+)
+
+// Copyright 2019 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+func main() {
+	defer func() {
+		e := recover()
+		if e == nil {
+			panic("should have panicked")
+		}
+		text := fmt.Sprintf("%s", e) // handles both string and runtime.errorString
+		if !strings.HasPrefix(text, "reflect:") {
+			panic("wanted a reflect error, got this instead:\n" + text)
+		}
+	}()
+	r := reflect.MakeFunc(reflect.TypeOf(func() error { return nil }),
+		func(args []reflect.Value) []reflect.Value {
+			var x [1]reflect.Value
+			return x[:]
+		}).Interface().(func() error)
+	r()
+}
