commit 10c8b7c1d7bb973a0b2bc6858b4d5b705cdaa402
Author: Keith Randall <khr@golang.org>
Date:   Mon Jul 12 16:12:55 2021 -0700

    [dev.typeparams] cmd/compile: use dictionary to convert arguments of ==, != to interfaces
    
    When comparing a value whose type is a type parameter to an interface,
    we need to convert that type parameter to an interface using the dictionary
    entries.
    
    Change-Id: I409c9e36e376fe4ef8163407d0fd4e84496d5b65
    Reviewed-on: https://go-review.googlesource.com/c/go/+/334150
    Trust: Keith Randall <khr@golang.org>
    Trust: Dan Scales <danscales@google.com>
    Run-TryBot: Keith Randall <khr@golang.org>
    TryBot-Result: Go Bot <gobot@golang.org>
    Reviewed-by: Dan Scales <danscales@google.com>
---
 src/cmd/compile/internal/noder/stencil.go | 15 +++++++
 test/typeparam/equal.go                   | 71 +++++++++++++++++++++++++++++++
 2 files changed, 86 insertions(+)

diff --git a/src/cmd/compile/internal/noder/stencil.go b/src/cmd/compile/internal/noder/stencil.go
index 1759fbc4cf..f4935fe22a 100644
--- a/src/cmd/compile/internal/noder/stencil.go
+++ b/src/cmd/compile/internal/noder/stencil.go
@@ -1242,6 +1242,21 @@ func (subst *subster) node(n ir.Node) ir.Node {
 			if ix := subst.findDictType(t); ix >= 0 {
 				m = subst.convertUsingDictionary(x.Pos(), m.(*ir.ConvExpr).X, m.Type(), t, ix)
 			}
+		case ir.OEQ, ir.ONE:
+			// Equality between a non-interface and an interface requires the non-interface
+			// to be promoted to an interface.
+			x := x.(*ir.BinaryExpr)
+			m := m.(*ir.BinaryExpr)
+			if i := x.Y.Type(); i.IsInterface() {
+				if ix := subst.findDictType(x.X.Type()); ix >= 0 {
+					m.X = subst.convertUsingDictionary(m.X.Pos(), m.X, i, x.X.Type(), ix)
+				}
+			}
+			if i := x.X.Type(); i.IsInterface() {
+				if ix := subst.findDictType(x.Y.Type()); ix >= 0 {
+					m.Y = subst.convertUsingDictionary(m.Y.Pos(), m.Y, i, x.X.Type(), ix)
+				}
+			}
 		}
 		return m
 	}
diff --git a/test/typeparam/equal.go b/test/typeparam/equal.go
new file mode 100644
index 0000000000..6776b19d12
--- /dev/null
+++ b/test/typeparam/equal.go
@@ -0,0 +1,71 @@
+// run -gcflags=-G=3
+
+// Copyright 2021 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// comparisons of type parameters to interfaces
+
+package main
+
+func f[T comparable](t, u T) bool {
+	// Comparing two type parameters directly.
+	// (Not really testing comparisons to interfaces, but just 'cause we're here.)
+	return t == u
+}
+
+func g[T comparable](t T, i interface{}) bool {
+	// Compare type parameter value to empty interface.
+	return t == i
+}
+
+type I interface {
+	foo()
+}
+
+type C interface {
+	comparable
+	I
+}
+
+func h[T C](t T, i I) bool {
+	// Compare type parameter value to nonempty interface.
+	return t == i
+}
+
+type myint int
+
+func (x myint) foo() {
+}
+
+func k[T comparable](t T, i interface{}) bool {
+	// Compare derived type value to interface.
+	return struct{a, b T}{t, t} == i
+}
+
+func main() {
+	assert(f(3, 3))
+	assert(!f(3, 5))
+	assert(g(3, 3))
+	assert(!g(3, 5))
+	assert(h(myint(3), myint(3)))
+	assert(!h(myint(3), myint(5)))
+
+	type S struct { a, b float64 }
+
+	assert(f(S{3,5}, S{3,5}))
+	assert(!f(S{3,5}, S{4,6}))
+	assert(g(S{3,5}, S{3,5}))
+	assert(!g(S{3,5}, S{4,6}))
+
+	assert(k(3, struct{a, b int}{3, 3}))
+	assert(!k(3, struct{a, b int}{3, 4}))
+}
+
+func assert(b bool)  {
+	if !b {
+		panic("assertion failed")
+	}
+}
+
+
