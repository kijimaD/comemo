commit ad8b0d915b2e19ec74982611ea0a2e10b3c6cd1b
Author: Robert Griesemer <gri@golang.org>
Date:   Thu Feb 24 19:29:25 2011 -0800

    bug324.go: test case for issue 1550
    
    Also: renamed fixedbugs/bug322.go to fixedbugs/bug323.go
    because we already have a bugs/bug322.go and bug322.dir.
    
    R=rsc
    CC=golang-dev
    https://golang.org/cl/4219044
---
 test/bugs/bug324.dir/main.go            | 48 +++++++++++++++++++++++++++++++++
 test/bugs/bug324.dir/p.go               | 15 +++++++++++
 test/bugs/bug324.go                     |  8 ++++++
 test/fixedbugs/{bug322.go => bug323.go} |  0
 test/golden.out                         |  3 +++
 5 files changed, 74 insertions(+)

diff --git a/test/bugs/bug324.dir/main.go b/test/bugs/bug324.dir/main.go
new file mode 100644
index 0000000000..37f2a59e44
--- /dev/null
+++ b/test/bugs/bug324.dir/main.go
@@ -0,0 +1,48 @@
+// Copyright 2011 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package main
+
+import (
+	"./p"
+)
+
+type Exported interface {
+	private()
+}
+
+type Implementation struct{}
+
+func (p *Implementation) private() { println("main.Implementation.private()") }
+
+
+func main() {
+	// nothing unusual here
+	var x Exported
+	x = new(Implementation)
+	x.private()  //  main.Implementation.private()
+
+	// same here - should be and is legal
+	var px p.Exported
+	px = p.X
+	
+	// this assignment is correctly illegal:
+	//	px.private undefined (cannot refer to unexported field or method private)
+	// px.private()
+
+	// this assignment is correctly illegal:
+	//	*Implementation does not implement p.Exported (missing p.private method)
+	// px = new(Implementation)
+
+	// this assignment is correctly illegal:
+	//	p.Exported does not implement Exported (missing private method)
+	// x = px
+
+	// this assignment unexpectedly compiles and then executes
+	x = px.(Exported)  // ERROR "does not implement"
+
+	// this is a legitimate call, but because of the previous assignment,
+	// it invokes the method private in p!
+	x.private()  // p.Implementation.private()
+}
diff --git a/test/bugs/bug324.dir/p.go b/test/bugs/bug324.dir/p.go
new file mode 100644
index 0000000000..d1e3b991aa
--- /dev/null
+++ b/test/bugs/bug324.dir/p.go
@@ -0,0 +1,15 @@
+// Copyright 2011 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package p
+
+type Exported interface {
+	private()
+}
+
+type Implementation struct{}
+
+func (p *Implementation) private() { println("p.Implementation.private()") }
+
+var X = new(Implementation)
diff --git a/test/bugs/bug324.go b/test/bugs/bug324.go
new file mode 100644
index 0000000000..8b4e292003
--- /dev/null
+++ b/test/bugs/bug324.go
@@ -0,0 +1,8 @@
+// $G $D/$F.dir/p.go && errchk $G $D/$F.dir/main.go
+
+// Copyright 2011 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// Test case for issue 1550
+ignored
diff --git a/test/fixedbugs/bug322.go b/test/fixedbugs/bug323.go
similarity index 100%
rename from test/fixedbugs/bug322.go
rename to test/fixedbugs/bug323.go
diff --git a/test/golden.out b/test/golden.out
index 7883973e02..cc699d4500 100644
--- a/test/golden.out
+++ b/test/golden.out
@@ -164,3 +164,6 @@ bugs/bug322.dir/main.go:19: implicit assignment of unexported field 'x' of lib.T
 bugs/bug322.dir/main.go:22: implicit assignment of unexported field 'x' of lib.T in assignment
 bugs/bug322.dir/main.go:31: implicit assignment of unexported field 'x' of lib.T in method receiver
 BUG: fails incorrectly
+
+=========== bugs/bug324.go
+BUG: errchk: command succeeded unexpectedly
