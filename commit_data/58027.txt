commit 2b462646edefe47650851e8ba23cc787c57ae745
Author: Michael Pratt <mpratt@google.com>
Date:   Fri Sep 8 14:54:29 2023 -0400

    runtime: set stackguard1 on extra M g0
    
    [This is an unmodified redo of CL 527056.]
    
    Standard Ms set g0.stackguard1 to the same value as stackguard0 in
    mstart0. For consistency, extra Ms should do the same for their g0. Do
    this in needm -> callbackUpdateSystemStack.
    
    Background: getg().stackguard1 is used as the stack guard for the stack
    growth prolouge in functions marked //go:systemstack [1]. User Gs set
    stackguard1 to ^uintptr(0) so that the check always fail, calling
    morestackc, which throws to report a //go:systemstack function call on a
    user stack.
    
    g0 setting stackguard1 is unnecessary for this functionality. 0 would be
    sufficient, as g0 is always allowed to call //go:systemstack functions.
    However, since we have the check anyway, setting stackguard1 to the
    actual stack bound is useful to detect actual stack overflows on g0
    (though morestackc doesn't detect this case and would report a
    misleading message about user stacks).
    
    [1] cmd/internal/obj calls //go:systemstack functions AttrCFunc. This is
    a holdover from when the runtime contained actual C functions. But since
    CL 2275, it has simply meant "pretend this is a C function, which would
    thus need to use the system stack". Hence the name morestackc. At this
    point, this terminology is pretty far removed from reality and should
    probably be updated to something more intuitive.
    
    Change-Id: If315677217354465fbbfbd0d406d79be20db0cc3
    Reviewed-on: https://go-review.googlesource.com/c/go/+/527716
    Auto-Submit: Michael Pratt <mpratt@google.com>
    Reviewed-by: Cherry Mui <cherryyz@google.com>
    LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>
---
 src/runtime/cgocall.go  | 2 ++
 src/runtime/runtime2.go | 2 +-
 2 files changed, 3 insertions(+), 1 deletion(-)

diff --git a/src/runtime/cgocall.go b/src/runtime/cgocall.go
index debd8cf5e8..e4da34b31d 100644
--- a/src/runtime/cgocall.go
+++ b/src/runtime/cgocall.go
@@ -233,6 +233,7 @@ func callbackUpdateSystemStack(mp *m, sp uintptr, signal bool) {
 		g0.stack.hi = sp + 1024
 		g0.stack.lo = sp - 32*1024
 		g0.stackguard0 = g0.stack.lo + stackGuard
+		g0.stackguard1 = g0.stackguard0
 
 		print("M ", mp.id, " procid ", mp.procid, " runtime: cgocallback with sp=", hex(sp), " out of bounds [", hex(lo), ", ", hex(hi), "]")
 		print("\n")
@@ -271,6 +272,7 @@ func callbackUpdateSystemStack(mp *m, sp uintptr, signal bool) {
 		}
 	}
 	g0.stackguard0 = g0.stack.lo + stackGuard
+	g0.stackguard1 = g0.stackguard0
 }
 
 // Call from C back to Go. fn must point to an ABIInternal Go entry-point.
diff --git a/src/runtime/runtime2.go b/src/runtime/runtime2.go
index 8809b5d569..34f66d4ada 100644
--- a/src/runtime/runtime2.go
+++ b/src/runtime/runtime2.go
@@ -423,7 +423,7 @@ type g struct {
 	// stack describes the actual stack memory: [stack.lo, stack.hi).
 	// stackguard0 is the stack pointer compared in the Go stack growth prologue.
 	// It is stack.lo+StackGuard normally, but can be StackPreempt to trigger a preemption.
-	// stackguard1 is the stack pointer compared in the C stack growth prologue.
+	// stackguard1 is the stack pointer compared in the //go:systemstack stack growth prologue.
 	// It is stack.lo+StackGuard on g0 and gsignal stacks.
 	// It is ~0 on other goroutine stacks, to trigger a call to morestackc (and crash).
 	stack       stack   // offset known to runtime/cgo
