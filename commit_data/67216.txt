commit a0dc7bf08481d906cb7d65d86bb347a583d84fd0
Author: Cuong Manh Le <cuong.manhle.vn@gmail.com>
Date:   Thu May 22 18:06:27 2025 +0700

    cmd/compile: fix ICE when transforming loopvar
    
    When transforming for loop variables, the compiler does roughly
    following steps:
    
            (1) prebody = {z := z' for z in leaked}
            ...
            (4) init' = (init : s/z/z' for z in leaked)
    
    However, the definition of z is not updated to `z := z'` statement,
    causing ReassignOracle incorrectly use the new init statement with z'
    instead of z, trigger the ICE.
    
    Fixing this by updating the correct/new definition statement for z
    during the prebody initialization.
    
    Fixes #73823
    
    Change-Id: Ice2a6741be7478506c58f4000f591d5582029136
    Reviewed-on: https://go-review.googlesource.com/c/go/+/675475
    Auto-Submit: Cuong Manh Le <cuong.manhle.vn@gmail.com>
    LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>
    Reviewed-by: Keith Randall <khr@google.com>
    Reviewed-by: David Chase <drchase@google.com>
---
 src/cmd/compile/internal/loopvar/loopvar.go |  1 +
 test/fixedbugs/issue73823.go                | 58 +++++++++++++++++++++++++++++
 2 files changed, 59 insertions(+)

diff --git a/src/cmd/compile/internal/loopvar/loopvar.go b/src/cmd/compile/internal/loopvar/loopvar.go
index 030fc04c13..5a4590d299 100644
--- a/src/cmd/compile/internal/loopvar/loopvar.go
+++ b/src/cmd/compile/internal/loopvar/loopvar.go
@@ -305,6 +305,7 @@ func ForCapture(fn *ir.Func) []VarAndLoop {
 						as := ir.NewAssignStmt(x.Pos(), z, tz)
 						as.Def = true
 						as.SetTypecheck(1)
+						z.Defn = as
 						preBody.Append(as)
 						dclFixups[z] = as
 
diff --git a/test/fixedbugs/issue73823.go b/test/fixedbugs/issue73823.go
new file mode 100644
index 0000000000..2f66266254
--- /dev/null
+++ b/test/fixedbugs/issue73823.go
@@ -0,0 +1,58 @@
+// compile
+
+// Copyright 2025 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package p
+
+type Backend interface {
+	Hash(ignores func(bucketName, keyName []byte) bool) (uint32, error)
+}
+
+type backend struct {
+}
+
+func first() (key []byte, value []byte) {
+	return
+}
+
+func (b *backend) View(fn func() error) error {
+	return nil
+}
+
+func (b *backend) Hash(ignores func(bucketName, keyName []byte) bool) (uint32, error) {
+	err := b.View(func() error {
+		for next, _ := first(); next != nil; next, _ = first() {
+			_ = next
+		}
+		return nil
+	})
+	return 0, err
+}
+
+func defragdb() error {
+	for next, _ := first(); next != nil; next, _ = first() {
+		_ = f(next)
+		ForEach(func(k, v []byte) error {
+			_ = next
+			return nil
+		})
+	}
+
+	return nil
+}
+
+func ForEach(fn func(k, v []byte) error) error {
+	for k, v := first(); k != nil; k, v = first() {
+		if err := fn(k, v); err != nil {
+			return err
+		}
+	}
+	return nil
+}
+
+//go:noinline
+func f(any) string {
+	return ""
+}
