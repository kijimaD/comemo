commit e4ca60eca70ee949aa927c290726b1d062cefcd7
Author: Rob Pike <r@golang.org>
Date:   Mon Mar 17 19:05:07 2008 -0700

    change Main, Init to lower case.
    make new() take an optional expression, not expression list.
    add an example for new().
    
    SVN=112895
---
 doc/go_lang.txt | 15 ++++++++-------
 1 file changed, 8 insertions(+), 7 deletions(-)

diff --git a/doc/go_lang.txt b/doc/go_lang.txt
index b6925006a2..31e4106905 100644
--- a/doc/go_lang.txt
+++ b/doc/go_lang.txt
@@ -56,13 +56,13 @@ declarations followed by other declarations.  There are no statements
 at the top level of a file.
 
 A program consists of a number of packages.  By convention, one
-package, by default called Main, is the starting point for execution.
-It contains a function, also called Main, that is the first function invoked
+package, by default called main, is the starting point for execution.
+It contains a function, also called main, that is the first function invoked
 by the run time system.
 
 If any package within the program
-contains a function Init(), that function will be executed
-before Main.Main() is called.  The details of initialization are
+contains a function init(), that function will be executed
+before main.main() is called.  The details of initialization are
 still under development.
 
 
@@ -149,7 +149,7 @@ comprehensible composability of types.
 Here is a complete example Go program that implements a concurrent prime sieve:
 
 
-  package Main
+  package main
   
   // Send the sequence 2, 3, 4, ... to channel 'ch'.
   func Generate(ch *chan> int) {
@@ -182,7 +182,7 @@ Here is a complete example Go program that implements a concurrent prime sieve:
     }
   }
   
-  func Main() {
+  func main() {
     Sieve()
   }
 
@@ -999,7 +999,7 @@ Expression syntax is based on that of C but with fewer precedence levels.
   
   Call = Expression "(" [ ExpressionList ] ")" .
   Conversion = TypeName "(" [ ExpressionList ] ")" .
-  Allocation = "new" "(" Type [ "," ExpressionList ] ")" .
+  Allocation = "new" "(" Type [ "," Expression ] ")" .
 
   binary_op = log_op | rel_op | add_op | mul_op .
   log_op = "||" | "&&" .
@@ -1052,6 +1052,7 @@ Primary expressions
   (s + ".txt")
   f(3.1415, true)
   Point(1, 2)
+  new([]int, 100)
   m["foo"]
   s[i : j + 1]
   obj.color
