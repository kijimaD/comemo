commit 63daa774b566d7fe58b3aa82cda9e595929bb777
Author: Rob Findley <rfindley@google.com>
Date:   Mon Jun 21 20:16:37 2021 -0400

    go/types: guard against checking instantiation when generics is disabled
    
    When type checking t[_], where t is a type name, it was possible to leak
    an error message related to generics. Fix this by guarding on
    typeparams.Enabled.
    
    In order to test this fix, we need to be able to run the new go/types
    test only if type parameters are disabled. Introduce the .go1 test data
    suffix (similar to .go2) to control this behavior.
    
    Originally found via fuzzing, though the test case was manually
    simplified.
    
    Updates #46404
    
    Change-Id: Ib1e2c27cf974c2a5ca5b9d6d01b84a30ba4d583b
    Reviewed-on: https://go-review.googlesource.com/c/go/+/329793
    Trust: Robert Findley <rfindley@google.com>
    Trust: Robert Griesemer <gri@golang.org>
    Run-TryBot: Robert Findley <rfindley@google.com>
    TryBot-Result: Go Bot <gobot@golang.org>
    Reviewed-by: Robert Griesemer <gri@golang.org>
---
 src/go/types/check_test.go                     | 13 ++++++++-----
 src/go/types/testdata/fixedbugs/issue46404.go1 |  8 ++++++++
 src/go/types/typexpr.go                        |  8 ++++++--
 3 files changed, 22 insertions(+), 7 deletions(-)

diff --git a/src/go/types/check_test.go b/src/go/types/check_test.go
index 6c3b630a1b..5a3e57ba44 100644
--- a/src/go/types/check_test.go
+++ b/src/go/types/check_test.go
@@ -207,12 +207,15 @@ func checkFiles(t *testing.T, sizes Sizes, goVersion string, filenames []string,
 		t.Fatal("no source files")
 	}
 
+	if strings.HasSuffix(filenames[0], ".go2") && !typeparams.Enabled {
+		t.Skip("type params are not enabled")
+	}
+	if strings.HasSuffix(filenames[0], ".go1") && typeparams.Enabled {
+		t.Skip("type params are enabled")
+	}
+
 	mode := parser.AllErrors
-	if strings.HasSuffix(filenames[0], ".go2") {
-		if !typeparams.Enabled {
-			t.Skip("type params are not enabled")
-		}
-	} else {
+	if !strings.HasSuffix(filenames[0], ".go2") {
 		mode |= typeparams.DisallowParsing
 	}
 
diff --git a/src/go/types/testdata/fixedbugs/issue46404.go1 b/src/go/types/testdata/fixedbugs/issue46404.go1
new file mode 100644
index 0000000000..db604bc1ac
--- /dev/null
+++ b/src/go/types/testdata/fixedbugs/issue46404.go1
@@ -0,0 +1,8 @@
+// Copyright 2021 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package issue46404
+
+// Check that we don't type check t[_] as an instantiation.
+type t [t /* ERROR not a type */ [_]]_ // ERROR cannot use
diff --git a/src/go/types/typexpr.go b/src/go/types/typexpr.go
index 5185c33fcb..1738d864a6 100644
--- a/src/go/types/typexpr.go
+++ b/src/go/types/typexpr.go
@@ -463,8 +463,12 @@ func (check *Checker) typInternal(e0 ast.Expr, def *Named) (T Type) {
 		}
 
 	case *ast.IndexExpr:
-		exprs := typeparams.UnpackExpr(e.Index)
-		return check.instantiatedType(e.X, exprs, def)
+		if typeparams.Enabled {
+			exprs := typeparams.UnpackExpr(e.Index)
+			return check.instantiatedType(e.X, exprs, def)
+		}
+		check.errorf(e0, _NotAType, "%s is not a type", e0)
+		check.use(e.X)
 
 	case *ast.ParenExpr:
 		// Generic types must be instantiated before they can be used in any form.
