commit eb8f2a832078d0748bcf1eb38357c8119fdbccb7
Author: Josh Bleecher Snyder <josharian@gmail.com>
Date:   Fri Nov 11 07:37:32 2016 -0800

    all: fix vet nits
    
    Fixes these complaints from vet:
    
    cmd/compile/internal/gc/noder.go:32: cmd/compile/internal/syntax.Error composite literal uses unkeyed fields
    cmd/compile/internal/gc/noder.go:1035: cmd/compile/internal/syntax.Error composite literal uses unkeyed fields
    cmd/compile/internal/gc/noder.go:1051: cmd/compile/internal/syntax.Error composite literal uses unkeyed fields
    cmd/compile/internal/syntax/parser_test.go:182: possible formatting directive in Error call
    net/http/client_test.go:1334: possible formatting directive in Fatal call
    
    Change-Id: I5f90ec30f3c106c7e66c92e2b6f8d3b4874fec66
    Reviewed-on: https://go-review.googlesource.com/33133
    Run-TryBot: Josh Bleecher Snyder <josharian@gmail.com>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Brad Fitzpatrick <bradfitz@golang.org>
---
 src/cmd/compile/internal/gc/noder.go           | 6 +++---
 src/cmd/compile/internal/syntax/parser_test.go | 2 +-
 src/net/http/client_test.go                    | 2 +-
 3 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/src/cmd/compile/internal/gc/noder.go b/src/cmd/compile/internal/gc/noder.go
index 35cbeb5a25..f9de48a08b 100644
--- a/src/cmd/compile/internal/gc/noder.go
+++ b/src/cmd/compile/internal/gc/noder.go
@@ -29,7 +29,7 @@ func parseFile(filename string) {
 
 	if !imported_unsafe {
 		for _, x := range p.linknames {
-			p.error(syntax.Error{0, x, "//go:linkname only allowed in Go files that import \"unsafe\""})
+			p.error(syntax.Error{Line: x, Msg: "//go:linkname only allowed in Go files that import \"unsafe\""})
 		}
 	}
 
@@ -1032,7 +1032,7 @@ func (p *noder) pragma(pos, line int, text string) syntax.Pragma {
 			break
 		}
 		if n > 1e8 {
-			p.error(syntax.Error{pos, line, "line number out of range"})
+			p.error(syntax.Error{Pos: pos, Line: line, Msg: "line number out of range"})
 			errorexit()
 		}
 		if n <= 0 {
@@ -1048,7 +1048,7 @@ func (p *noder) pragma(pos, line int, text string) syntax.Pragma {
 
 		f := strings.Fields(text)
 		if len(f) != 3 {
-			p.error(syntax.Error{pos, line, "usage: //go:linkname localname linkname"})
+			p.error(syntax.Error{Pos: pos, Line: line, Msg: "usage: //go:linkname localname linkname"})
 			break
 		}
 		lookup(f[1]).Linkname = f[2]
diff --git a/src/cmd/compile/internal/syntax/parser_test.go b/src/cmd/compile/internal/syntax/parser_test.go
index dc7f91d5ef..c4b43bfe78 100644
--- a/src/cmd/compile/internal/syntax/parser_test.go
+++ b/src/cmd/compile/internal/syntax/parser_test.go
@@ -179,6 +179,6 @@ func TestParseFile(t *testing.T) {
 		t.Error("missing io error")
 	}
 	if err != first {
-		t.Error("got %v; want first error %v", err, first)
+		t.Errorf("got %v; want first error %v", err, first)
 	}
 }
diff --git a/src/net/http/client_test.go b/src/net/http/client_test.go
index b1677c1e08..d96e2670e2 100644
--- a/src/net/http/client_test.go
+++ b/src/net/http/client_test.go
@@ -1331,7 +1331,7 @@ func TestClientTimeoutCancel(t *testing.T) {
 	cancel()
 	_, err = io.Copy(ioutil.Discard, res.Body)
 	if err != ExportErrRequestCanceled {
-		t.Fatal("error = %v; want errRequestCanceled")
+		t.Fatalf("error = %v; want errRequestCanceled", err)
 	}
 }
 
