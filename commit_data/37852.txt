commit db3f52db8edfa51c76d1e3e1a417d46b85528132
Author: Leigh McCulloch <leighmcc@gmail.com>
Date:   Sun Sep 2 16:53:03 2018 +0000

    go/types: correct misspelling in function doc
    
    The indirectType function comment uses the phrase 'layed out'. In the
    context of that phrase, where something is being placed or sprawled,
    the word should be 'laid'. 'Layed' is a misspelling of 'laid'.
    
    Change-Id: I05ecb97637276e2252c47e92a0bd678130714889
    GitHub-Last-Rev: 6ee67371b42c12ceaf4c6c245319748008ac7e7b
    GitHub-Pull-Request: golang/go#27444
    Reviewed-on: https://go-review.googlesource.com/132779
    Reviewed-by: Ian Lance Taylor <iant@golang.org>
---
 src/go/types/typexpr.go | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/go/types/typexpr.go b/src/go/types/typexpr.go
index 2edd1f5bac..83848099c2 100644
--- a/src/go/types/typexpr.go
+++ b/src/go/types/typexpr.go
@@ -132,7 +132,7 @@ func (check *Checker) definedType(e ast.Expr, def *Named) (T Type) {
 
 // indirectType is like typ but it also breaks the (otherwise) infinite size of recursive
 // types by introducing an indirection. It should be called for components of types that
-// are not layed out in place in memory, such as pointer base types, slice or map element
+// are not laid out in place in memory, such as pointer base types, slice or map element
 // types, function parameter types, etc.
 func (check *Checker) indirectType(e ast.Expr) Type {
 	check.push(indir)
