commit 1b60284c0a375de2349540771a3bc1a719ddf52e
Author: Matthew Dempsky <mdempsky@google.com>
Date:   Fri Jun 25 01:54:50 2021 -0700

    [dev.typeparams] cmd/compile: simplify variable capturing in unified IR
    
    While initially building out unified IR, I didn't have any indexing
    scheme. Everything was written out in order. Consequently, if I wanted
    to write A before B, I had to compute A before B.
    
    One particular example of this is handling closure variables: the
    reader needs the list of closure variables before it can start reading
    the function body, so I had to write them out first, and so I had to
    compute them first in a separate, dedicated pass.
    
    However, that constraint went away a while ago. For example, it's now
    possible to replace the two-pass closure variable capture with a
    single pass. We just write out the function body earlier, but then
    wait to write out its index.
    
    I anticipate this approach will make it easier to implement
    dictionaries: rather than needing a separate pass to correctly
    recognize and handle all of the generics cases, we can just hook into
    the existing logic.
    
    Change-Id: Iab1e07f9202cd5d2b6864eef10116960456214df
    Reviewed-on: https://go-review.googlesource.com/c/go/+/330851
    Trust: Matthew Dempsky <mdempsky@google.com>
    Run-TryBot: Matthew Dempsky <mdempsky@google.com>
    TryBot-Result: Go Bot <gobot@golang.org>
    Reviewed-by: Cuong Manh Le <cuong.manhle.vn@gmail.com>

 src/cmd/compile/internal/noder/linker.go |   2 -
 src/cmd/compile/internal/noder/reader.go |  54 ++++----
 src/cmd/compile/internal/noder/writer.go | 223 ++++++++-----------------------
 3 files changed, 80 insertions(+), 199 deletions(-)
