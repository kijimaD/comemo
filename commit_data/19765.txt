commit 040eeff71c63451cdbc417defa8c907962577619
Author: Shenghou Ma <minux@golang.org>
Date:   Fri Jul 18 02:59:54 2014 -0400

    undo CL 109640045 / f97fb06525e5
    
    Breaks build for FreeBSD. Probably clang related?
    
    ««« original CL description
    cmd/cgo: disable inappropriate warnings when the gcc struct is empty
    
    package main
    //#cgo CFLAGS: -Wall
    //void test() {}
    import "C"
    func main() {
        C.test()
    }
    
    This code will cause gcc issuing warnings about unused variable.
    
    This commit use offset of the second return value of
    Packages.structType to detect whether the gcc struct is empty,
    and if it's directly invoke the C function instead of writing an
    unused code.
    
    LGTM=dave, minux
    R=golang-codereviews, iant, minux, dave
    CC=golang-codereviews
    https://golang.org/cl/109640045
    
    »»»
    
    TBR=dfc
    R=dave
    CC=golang-codereviews
    https://golang.org/cl/114990044
---
 misc/cgo/test/empty.go | 18 ------------------
 src/cmd/cgo/out.go     |  6 ++----
 2 files changed, 2 insertions(+), 22 deletions(-)

diff --git a/misc/cgo/test/empty.go b/misc/cgo/test/empty.go
deleted file mode 100644
index daa7485492..0000000000
--- a/misc/cgo/test/empty.go
+++ /dev/null
@@ -1,18 +0,0 @@
-// Copyright 2014 The Go Authors.  All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-
-package cgotest
-
-/*
-#cgo CFLAGS: -Werror=unused-variable
-void funcWithoutAnyParams() {}
-*/
-import "C"
-
-// Only test whether this can be compiled, unused
-// variable (e.g. empty gcc strut) could cause
-// warning/error under stricter CFLAGS.
-func testEmptyGccStruct() {
-	C.funcWithoutAnyParams()
-}
diff --git a/src/cmd/cgo/out.go b/src/cmd/cgo/out.go
index a5fffd0568..c6c27c4dbf 100644
--- a/src/cmd/cgo/out.go
+++ b/src/cmd/cgo/out.go
@@ -517,7 +517,7 @@ func (p *Package) writeOutputFunc(fgcc *os.File, n *Name) {
 		return
 	}
 
-	ctype, offset := p.structType(n)
+	ctype, _ := p.structType(n)
 
 	// Gcc wrapper unpacks the C argument struct
 	// and calls the actual C function.
@@ -530,9 +530,7 @@ func (p *Package) writeOutputFunc(fgcc *os.File, n *Name) {
 	// We're trying to write a gcc struct that matches 6c/8c/5c's layout.
 	// Use packed attribute to force no padding in this struct in case
 	// gcc has different packing requirements.
-	if offset != 0 {
-		fmt.Fprintf(fgcc, "\t%s %v *a = v;\n", ctype, p.packedAttribute())
-	}
+	fmt.Fprintf(fgcc, "\t%s %v *a = v;\n", ctype, p.packedAttribute())
 	fmt.Fprintf(fgcc, "\t")
 	if t := n.FuncType.Result; t != nil {
 		fmt.Fprintf(fgcc, "a->r = ")
