commit 04d64a3b36f872e97d965197337d001d5361d71c
Author: Than McIntosh <thanm@google.com>
Date:   Fri Sep 15 15:48:49 2023 -0400

    cmd/compile/inline/inleur: use "largest possible score" to revise inlinability
    
    The current GOEXPERIMENT=newinliner strategy us to run "CanInline" for
    a given function F with an expanded/relaxed budget of 160 (instead of
    the default 80), and then only inline a call to F if the adjustments
    we made to F's original score are below 80.
    
    This way of doing things winds up writing out many more functions to
    export data that have size between 80 and 160, on the theory that they
    might be inlinable somewhere given the right context, which is
    expensive from a compile time perspective.
    
    This patch changes things to add a pass that revises the inlinability
    of a function after its properties are computed by looking at its
    properties and estimating the largest possible negative score
    adjustment that could happen given the various return and param props.
    If the computed score for the function minus the max adjust is not
    less than 80, then we demote it from inlinable to non-inlinable to
    save compile time.
    
    Change-Id: Iedaac520d47f632be4fff3bd15d30112b46ec573
    Reviewed-on: https://go-review.googlesource.com/c/go/+/529118
    Reviewed-by: Matthew Dempsky <mdempsky@google.com>
    LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>

 src/cmd/compile/internal/inline/inl.go             |  4 ++
 src/cmd/compile/internal/inline/inlheur/analyze.go | 22 +++++++
 src/cmd/compile/internal/inline/inlheur/scoring.go | 69 ++++++++++++++++++++--
 3 files changed, 91 insertions(+), 4 deletions(-)
