commit 7df2854f7087bc19ad4d23a1eed2fdfa8161b1ed
Author: Rob Pike <r@golang.org>
Date:   Fri Apr 17 11:37:08 2015 -0700

    doc/articles/go_command.html: mention go generate
    
    Fix some out-of-date remarks.
    
    Fixes #10489.
    
    Change-Id: I8f0cce2588828052a5d013e7bac6bcfeb220579d
    Reviewed-on: https://go-review.googlesource.com/9008
    Reviewed-by: Russ Cox <rsc@golang.org>
---
 doc/articles/go_command.html | 13 +++++++++----
 1 file changed, 9 insertions(+), 4 deletions(-)

diff --git a/doc/articles/go_command.html b/doc/articles/go_command.html
index 2978628cd2..cc1d86aef4 100644
--- a/doc/articles/go_command.html
+++ b/doc/articles/go_command.html
@@ -250,11 +250,16 @@ projects at once within a single <code>$GOPATH</code> root directory.</p>
 <h2>Limitations</h2>
 
 <p>As mentioned above, the go command is not a general-purpose build
-tool. In particular, it does not have any facility for generating Go
-source files during a build.  Instead, if you want to use a tool like
-yacc or the protocol buffer compiler, you will need to write a
+tool.
+In particular, it does not have any facility for generating Go
+source files <em>during</em> a build, although it does provide
+<a href="/cmd/go/#hdr-Generate_Go_files_by_processing_source"><code>go</code>
+<code>generate</code></a>,
+which can automate the creation of Go files <em>before</em>
+the build, such as by running <code>yacc</code>.
+For more advanced build setups, you may need to write a
 makefile (or a configuration file for the build tool of your choice)
-to generate the Go files and then check those generated source files
+to run whatever tool creates the Go files and then check those generated source files
 into your repository. This is more work for you, the package author,
 but it is significantly less work for your users, who can use
 "<code>go get</code>" without needing to obtain and build
