commit 793844207d81bdc41212bc300195469c65c39766
Author: Austin Clements <austin@google.com>
Date:   Thu Apr 8 12:50:39 2021 -0400

    cmd/go: strip GOEXPERIMENT from hash salt
    
    The go command salts cache hashes using runtime.Version() (the Go
    version the go command was built with) in order to separate objects
    built with different versions of Go.
    
    CL 307820 added the active GOEXPERIMENTs to the result of
    runtime.Version, which affected cmd/go's hash salt. Since dist builds
    go_bootstrap with all GOEXPERIMENTs disabled, but then go_bootstrap
    builds the final go binary with the GOEXPERIMENTs passed to make.bash,
    if any GOEXPERIMENTs were passed, go_bootstrap and the final go binary
    produce different cache hashes. At the very end of dist, it uses the
    final go binary to check the hashes of all packages, but these hashes
    were produced by go_bootstrap, so it concludes everything is stale.
    
    This should fix the builders that enable GOEXPERIMENTs, including the
    regabi and staticlockranking builders.
    
    Change-Id: Ie389929dff6f7b6eff2b19a2f43507e72be5f32e
    Reviewed-on: https://go-review.googlesource.com/c/go/+/308591
    Trust: Austin Clements <austin@google.com>
    Reviewed-by: Matthew Dempsky <mdempsky@google.com>
    Reviewed-by: Bryan C. Mills <bcmills@google.com>
---
 src/cmd/dist/build.go             |  2 +-
 src/cmd/go/internal/cache/hash.go | 17 ++++++++++++++++-
 2 files changed, 17 insertions(+), 2 deletions(-)

diff --git a/src/cmd/dist/build.go b/src/cmd/dist/build.go
index 8accb6db8f..f8f8003ff7 100644
--- a/src/cmd/dist/build.go
+++ b/src/cmd/dist/build.go
@@ -1541,7 +1541,7 @@ func checkNotStale(goBinary string, targets ...string) {
 				break
 			}
 		}
-		fatalf("unexpected stale targets reported by %s list -gcflags=\"%s\" -ldflags=\"%s\" for %v:\n%s", goBinary, gogcflags, goldflags, targets, out)
+		fatalf("unexpected stale targets reported by %s list -gcflags=\"%s\" -ldflags=\"%s\" for %v (consider rerunning with GOMAXPROCS=1 GODEBUG=gocachehash=1):\n%s", goBinary, gogcflags, goldflags, targets, out)
 	}
 }
 
diff --git a/src/cmd/go/internal/cache/hash.go b/src/cmd/go/internal/cache/hash.go
index e4bb2a34bb..f16215428a 100644
--- a/src/cmd/go/internal/cache/hash.go
+++ b/src/cmd/go/internal/cache/hash.go
@@ -12,6 +12,7 @@ import (
 	"io"
 	"os"
 	"runtime"
+	"strings"
 	"sync"
 )
 
@@ -36,7 +37,21 @@ type Hash struct {
 // of other versions. This salt will result in additional ActionID files
 // in the cache, but not additional copies of the large output files,
 // which are still addressed by unsalted SHA256.
-var hashSalt = []byte(runtime.Version())
+//
+// We strip any GOEXPERIMENTs the go tool was built with from this
+// version string on the assumption that they shouldn't affect go tool
+// execution. This also allows bootstrapping to converge faster
+// because dist builds go_bootstrap without any experiments.
+var hashSalt = []byte(stripExperiment(runtime.Version()))
+
+// stripExperiment strips any GOEXPERIMENT configuration from the Go
+// version string.
+func stripExperiment(version string) string {
+	if i := strings.Index(version, " X:"); i >= 0 {
+		return version[:i]
+	}
+	return version
+}
 
 // Subkey returns an action ID corresponding to mixing a parent
 // action ID with a string description of the subkey.
