commit 08959defa89f3a37775f744a52bfbbff93e742d6
Author: Stefan Nilsson <snilsson@nada.kth.se>
Date:   Thu Mar 22 09:27:02 2012 -0700

    sort: add time complexity to doc
    
    Let's tell the world that Go's sort is O(n log n).
    Surely this is a feature we intend to keep.
    
    R=golang-dev, gri
    CC=golang-dev
    https://golang.org/cl/5867045
---
 src/pkg/sort/sort.go | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/src/pkg/sort/sort.go b/src/pkg/sort/sort.go
index ca715645af..62a4d55e79 100644
--- a/src/pkg/sort/sort.go
+++ b/src/pkg/sort/sort.go
@@ -184,7 +184,8 @@ func quickSort(data Interface, a, b, maxDepth int) {
 }
 
 // Sort sorts data.
-// The algorithm used is not guaranteed to be a stable sort.
+// It makes one call to data.Len to determine n, and O(n*log(n)) calls to
+// data.Less and data.Swap. The sort is not guaranteed to be stable.
 func Sort(data Interface) {
 	// Switch to heapsort if depth of 2*ceil(lg(n+1)) is reached.
 	n := data.Len()
