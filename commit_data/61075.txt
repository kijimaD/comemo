commit 0fb33863b78c03f4f3d6228e310869f2edff1195
Author: Mateusz Poliwczak <mpoliwczak34@gmail.com>
Date:   Sat Sep 28 16:20:58 2024 +0000

    net,os: use os.LookupEnv instead of syscall.Getenv
    
    The os package already has a function for retrieving an environment
    variable with a ok boolean, we don't need to use syscall directly.
    
    Change-Id: Ife873e7245261ec765b628e31a0e7a7bc4dff934
    GitHub-Last-Rev: bc5f30bf56c87a94e0f17dd67a15aa4b2d7e3fd4
    GitHub-Pull-Request: golang/go#69700
    Reviewed-on: https://go-review.googlesource.com/c/go/+/616342
    Reviewed-by: Michael Knyszek <mknyszek@google.com>
    Auto-Submit: Ian Lance Taylor <iant@google.com>
    LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>
    Reviewed-by: Ian Lance Taylor <iant@google.com>
---
 src/net/conf.go           | 3 +--
 src/os/exec/lp_windows.go | 3 +--
 2 files changed, 2 insertions(+), 4 deletions(-)

diff --git a/src/net/conf.go b/src/net/conf.go
index 358f5434c4..1b48546f1b 100644
--- a/src/net/conf.go
+++ b/src/net/conf.go
@@ -13,7 +13,6 @@ import (
 	"os"
 	"runtime"
 	"sync"
-	"syscall"
 )
 
 // The net package's name resolution is rather complicated.
@@ -138,7 +137,7 @@ func initConfVal() {
 	// prefer the cgo resolver.
 	// Note that LOCALDOMAIN can change behavior merely by being
 	// specified with the empty string.
-	_, localDomainDefined := syscall.Getenv("LOCALDOMAIN")
+	_, localDomainDefined := os.LookupEnv("LOCALDOMAIN")
 	if localDomainDefined || os.Getenv("RES_OPTIONS") != "" || os.Getenv("HOSTALIASES") != "" {
 		confVal.preferCgo = true
 		return
diff --git a/src/os/exec/lp_windows.go b/src/os/exec/lp_windows.go
index 0e058d41b0..1225674306 100644
--- a/src/os/exec/lp_windows.go
+++ b/src/os/exec/lp_windows.go
@@ -10,7 +10,6 @@ import (
 	"os"
 	"path/filepath"
 	"strings"
-	"syscall"
 )
 
 // ErrNotFound is the error resulting if a path search failed to find an executable file.
@@ -154,7 +153,7 @@ func lookPath(file string, exts []string) (string, error) {
 		dotf   string
 		dotErr error
 	)
-	if _, found := syscall.Getenv("NoDefaultCurrentDirectoryInExePath"); !found {
+	if _, found := os.LookupEnv("NoDefaultCurrentDirectoryInExePath"); !found {
 		if f, err := findExecutable(filepath.Join(".", file), exts); err == nil {
 			if execerrdot.Value() == "0" {
 				execerrdot.IncNonDefault()
