commit 6ee6d6ec55efac70555e49728902ff0c10630b8f
Author: Russ Cox <rsc@golang.org>
Date:   Wed Jan 28 16:58:48 2009 -0800

    add stack test
    
    R=r
    DELTA=48  (48 added, 0 deleted, 0 changed)
    OCL=23715
    CL=23732
---
 test/stack.go | 52 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 52 insertions(+)

diff --git a/test/stack.go b/test/stack.go
new file mode 100644
index 0000000000..9fecc9102c
--- /dev/null
+++ b/test/stack.go
@@ -0,0 +1,52 @@
+// $G $D/$F.go && $L $F.$A && ./$A.out
+
+// Copyright 2009 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// Try to tickle stack splitting bugs by doing
+// go and defer at different stack depths.
+
+package main
+
+type T [20] int;
+
+func g(c chan int, t T) {
+	s := 0;
+	for i := 0; i < len(t); i++ {
+		s += t[i];
+	}
+	c <- s;
+}
+
+func d(t T) {
+	s := 0;
+	for i := 0; i < len(t); i++ {
+		s += t[i];
+	}
+	if s != len(t) {
+		panicln("bad defer", s);
+	}
+}
+
+var c = make(chan int);
+var t T;
+
+func recur(n int) {
+	go g(c, t);
+	s := <-c;
+	if s != len(t) {
+		panicln("bad go", s);
+	}
+	if n > 0 {
+		recur(n-1);
+	}
+	defer d(t);
+}
+
+func main() {
+	for i := 0; i < len(t); i++ {
+		t[i] = 1;
+	}
+	recur(10000);
+}
