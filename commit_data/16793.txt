commit 85a7c090c4f831b6d29556c36bbe0a6cd8e8da6d
Author: Daniel Morsing <daniel.morsing@gmail.com>
Date:   Wed Jul 17 11:04:34 2013 +0200

    cmd/8g: Make clearfat non-interleaved with pointer calculations.
    
    clearfat (used to zero initialize structures) will use AX for x86 block ops. If we write to AX while calculating the dest pointer, we will fill the structure with incorrect values.
    Since 64-bit arithmetic uses AX to synthesize a 64-bit register, getting an adress by indexing with 64-bit ops can clobber the register.
    
    Fixes #5820.
    
    R=golang-dev, rsc
    CC=golang-dev
    https://golang.org/cl/11383043
---
 src/cmd/8g/ggen.c           |  2 +-
 test/fixedbugs/issue5820.go | 18 ++++++++++++++++++
 2 files changed, 19 insertions(+), 1 deletion(-)

diff --git a/src/cmd/8g/ggen.c b/src/cmd/8g/ggen.c
index 1095d5e441..5570e12855 100644
--- a/src/cmd/8g/ggen.c
+++ b/src/cmd/8g/ggen.c
@@ -78,9 +78,9 @@ clearfat(Node *nl)
 	c = w % 4;	// bytes
 	q = w / 4;	// quads
 
-	gconreg(AMOVL, 0, D_AX);
 	nodreg(&n1, types[tptr], D_DI);
 	agen(nl, &n1);
+	gconreg(AMOVL, 0, D_AX);
 
 	if(q >= 4) {
 		gconreg(AMOVL, q, D_CX);
diff --git a/test/fixedbugs/issue5820.go b/test/fixedbugs/issue5820.go
new file mode 100644
index 0000000000..94de06d57d
--- /dev/null
+++ b/test/fixedbugs/issue5820.go
@@ -0,0 +1,18 @@
+// run
+
+// Copyright 2013 The Go Authors.  All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// issue 5820: register clobber when clearfat and 64 bit arithmetic is interleaved.
+
+package main
+
+func main() {
+	array := make([][]int, 2)
+	index := uint64(1)
+	array[index] = nil
+	if array[1] != nil {
+		panic("array[1] != nil")
+	}
+}
