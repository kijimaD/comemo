commit 720c4c016c75d37d14e0621696127819c8a73b0b
Author: Dave Cheney <dave@cheney.net>
Date:   Fri Apr 8 17:50:40 2016 +1000

    runtime: merge lfstack_amd64.go into lfstack_64bit.go
    
    Merge the amd64 lfstack implementation into the general 64 bit
    implementation.
    
    Change-Id: Id9ed61b90d2e3bc3b0246294c03eb2c92803b6ca
    Reviewed-on: https://go-review.googlesource.com/21707
    Run-TryBot: Dave Cheney <dave@cheney.net>
    Reviewed-by: Minux Ma <minux@golang.org>
---
 src/runtime/lfstack_64bit.go | 11 ++++++++++-
 src/runtime/lfstack_amd64.go | 22 ----------------------
 2 files changed, 10 insertions(+), 23 deletions(-)

diff --git a/src/runtime/lfstack_64bit.go b/src/runtime/lfstack_64bit.go
index 8180b0a248..5367f08c56 100644
--- a/src/runtime/lfstack_64bit.go
+++ b/src/runtime/lfstack_64bit.go
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-// +build arm64 mips64 mips64le ppc64 ppc64le s390x
+// +build amd64 arm64 mips64 mips64le ppc64 ppc64le s390x
 
 package runtime
 
@@ -22,6 +22,10 @@ const (
 	// s390x         TASK_SIZE         0x020000000000UL (41 bit addresses)
 	//
 	// These values may increase over time.
+	//
+	// On AMD64, virtual addresses are 48-bit numbers sign extended to 64.
+	// We shift the address left 16 to eliminate the sign extended part and make
+	// room in the bottom for the count.
 	addrBits = 48
 
 	// In addition to the 16 bits taken from the top, we can take 3 from the
@@ -35,5 +39,10 @@ func lfstackPack(node *lfnode, cnt uintptr) uint64 {
 }
 
 func lfstackUnpack(val uint64) *lfnode {
+	if GOARCH == "amd64" {
+		// amd64 systems can place the stack above the VA hole, so we need to sign extend
+		// val before unpacking.
+		return (*lfnode)(unsafe.Pointer(uintptr(int64(val) >> cntBits << 3)))
+	}
 	return (*lfnode)(unsafe.Pointer(uintptr(val >> cntBits << 3)))
 }
diff --git a/src/runtime/lfstack_amd64.go b/src/runtime/lfstack_amd64.go
deleted file mode 100644
index 6397e1d47f..0000000000
--- a/src/runtime/lfstack_amd64.go
+++ /dev/null
@@ -1,22 +0,0 @@
-// Copyright 2014 The Go Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-
-package runtime
-
-import "unsafe"
-
-// On AMD64, virtual addresses are 48-bit numbers sign extended to 64.
-// We shift the address left 16 to eliminate the sign extended part and make
-// room in the bottom for the count.
-// In addition to the 16 bits taken from the top, we can take 3 from the
-// bottom, because node must be pointer-aligned, giving a total of 19 bits
-// of count.
-
-func lfstackPack(node *lfnode, cnt uintptr) uint64 {
-	return uint64(uintptr(unsafe.Pointer(node)))<<16 | uint64(cnt&(1<<19-1))
-}
-
-func lfstackUnpack(val uint64) *lfnode {
-	return (*lfnode)(unsafe.Pointer(uintptr(int64(val) >> 19 << 3)))
-}
