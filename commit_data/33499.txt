commit 43d4c9f4f18cad9ac738e15e1721b8ef32c5e31c
Author: Josh Bleecher Snyder <josharian@gmail.com>
Date:   Thu Aug 17 10:24:13 2017 -0700

    runtime: tiny refactor in evacuate
    
    Since oldbucket == h.nevacuate, we can just increment h.nevacuate here.
    This removes oldbucket from scope, which will be useful shortly.
    
    Change-Id: I70f81ec3995f17845ebf5d77ccd20ea4338f23e6
    Reviewed-on: https://go-review.googlesource.com/56932
    Run-TryBot: Josh Bleecher Snyder <josharian@gmail.com>
    Reviewed-by: Daniel Mart√≠ <mvdan@mvdan.cc>
    Reviewed-by: Avelino <t@avelino.xxx>
    Reviewed-by: Keith Randall <khr@golang.org>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
---
 src/runtime/hashmap.go | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/runtime/hashmap.go b/src/runtime/hashmap.go
index f3434eb788..dcaab8c185 100644
--- a/src/runtime/hashmap.go
+++ b/src/runtime/hashmap.go
@@ -1140,7 +1140,7 @@ func evacuate(t *maptype, h *hmap, oldbucket uintptr) {
 
 	// Advance evacuation mark
 	if oldbucket == h.nevacuate {
-		h.nevacuate = oldbucket + 1
+		h.nevacuate++
 		// Experiments suggest that 1024 is overkill by at least an order of magnitude.
 		// Put it in there as a safeguard anyway, to ensure O(1) behavior.
 		stop := h.nevacuate + 1024
