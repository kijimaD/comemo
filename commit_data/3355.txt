commit 9f6328633de436e42b3fe5c81cf6278d73c820a9
Author: Austin Clements <aclements@csail.mit.edu>
Date:   Thu Sep 24 08:32:10 2009 -0700

    Fix declared and not set errors in old ptrace package (still
    used by ogle)
    
    R=rsc
    APPROVED=rsc
    DELTA=4  (0 added, 1 deleted, 3 changed)
    OCL=34852
    CL=34964
---
 usr/austin/ptrace/ptrace_linux.go | 7 +++----
 1 file changed, 3 insertions(+), 4 deletions(-)

diff --git a/usr/austin/ptrace/ptrace_linux.go b/usr/austin/ptrace/ptrace_linux.go
index 06c02808f2..83faa667fc 100644
--- a/usr/austin/ptrace/ptrace_linux.go
+++ b/usr/austin/ptrace/ptrace_linux.go
@@ -419,7 +419,6 @@ func (p *process) uninstallBreakpoints() os.Error {
 // event.
 func (t *thread) wait() {
 	for {
-		var err os.Error;
 		var ev debugEvent;
 		ev.t = t;
 		t.logTrace("beginning wait");
@@ -762,7 +761,7 @@ func (p *process) do(f func () os.Error) os.Error {
 // stopMonitor stops the monitor with the given error.  If the monitor
 // is already stopped, does nothing.
 func (p *process) stopMonitor(err os.Error) {
-	doNotBlock := p.stopReq <- err;
+	_ = p.stopReq <- err;
 	// TODO(austin) Wait until monitor has exited?
 }
 
@@ -1213,7 +1212,7 @@ func (p *process) attachAllThreads() os.Error {
 				continue;
 			}
 
-			t, err := p.attachThread(tid);
+			_, err = p.attachThread(tid);
 			if err != nil {
 				// There could have been a race, or
 				// this process could be a zobmie.
@@ -1308,7 +1307,7 @@ func ForkExec(argv0 string, argv []string, envv []string, dir string, fd []*os.F
 		p.pid = pid;
 
 		// The process will raise SIGTRAP when it reaches execve.
-		t, err := p.newThread(pid, syscall.SIGTRAP, false);
+		_, err := p.newThread(pid, syscall.SIGTRAP, false);
 		return err;
 	});
 	if err != nil {
