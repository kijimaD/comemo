commit de65aa41d865bad0b3eba573742834b9b29237b9
Author: Michael Pratt <mpratt@google.com>
Date:   Tue Feb 20 20:39:53 2024 +0000

    Revert "hash/maphash: parallel run test"
    
    This reverts CL 564576.
    
    Reason for revert: flaky on linux-386-longtest
    
    Fixes #65823.
    
    Change-Id: I20e11f15af050eae9a6c15e756a52ffad327c458
    Reviewed-on: https://go-review.googlesource.com/c/go/+/565536
    LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>
    Auto-Submit: Michael Pratt <mpratt@google.com>
    Reviewed-by: Michael Knyszek <mknyszek@google.com>
---
 src/hash/maphash/smhasher_test.go | 11 -----------
 1 file changed, 11 deletions(-)

diff --git a/src/hash/maphash/smhasher_test.go b/src/hash/maphash/smhasher_test.go
index c183243809..085036bd7b 100644
--- a/src/hash/maphash/smhasher_test.go
+++ b/src/hash/maphash/smhasher_test.go
@@ -29,7 +29,6 @@ var fixedSeed = MakeSeed()
 // hash should not depend on values outside key.
 // hash should not depend on alignment.
 func TestSmhasherSanity(t *testing.T) {
-	t.Parallel()
 	r := rand.New(rand.NewSource(1234))
 	const REP = 10
 	const KEYMAX = 128
@@ -108,7 +107,6 @@ func (s *hashSet) check(t *testing.T) {
 
 // a string plus adding zeros must make distinct hashes
 func TestSmhasherAppendedZeros(t *testing.T) {
-	t.Parallel()
 	s := "hello" + strings.Repeat("\x00", 256)
 	h := newHashSet()
 	for i := 0; i <= len(s); i++ {
@@ -119,7 +117,6 @@ func TestSmhasherAppendedZeros(t *testing.T) {
 
 // All 0-3 byte strings have distinct hashes.
 func TestSmhasherSmallKeys(t *testing.T) {
-	t.Parallel()
 	h := newHashSet()
 	var b [3]byte
 	for i := 0; i < 256; i++ {
@@ -141,7 +138,6 @@ func TestSmhasherSmallKeys(t *testing.T) {
 
 // Different length strings of all zeros have distinct hashes.
 func TestSmhasherZeros(t *testing.T) {
-	t.Parallel()
 	N := 256 * 1024
 	if testing.Short() {
 		N = 1024
@@ -162,7 +158,6 @@ func TestSmhasherTwoNonzero(t *testing.T) {
 	if testing.Short() {
 		t.Skip("Skipping in short mode")
 	}
-	t.Parallel()
 	h := newHashSet()
 	for n := 2; n <= 16; n++ {
 		twoNonZero(h, n)
@@ -205,7 +200,6 @@ func TestSmhasherCyclic(t *testing.T) {
 	if testing.Short() {
 		t.Skip("Skipping in short mode")
 	}
-	t.Parallel()
 	r := rand.New(rand.NewSource(1234))
 	const REPEAT = 8
 	const N = 1000000
@@ -235,7 +229,6 @@ func TestSmhasherSparse(t *testing.T) {
 	if testing.Short() {
 		t.Skip("Skipping in short mode")
 	}
-	t.Parallel()
 	sparse(t, 32, 6)
 	sparse(t, 40, 6)
 	sparse(t, 48, 5)
@@ -274,7 +267,6 @@ func TestSmhasherPermutation(t *testing.T) {
 	if testing.Short() {
 		t.Skip("Skipping in short mode")
 	}
-	t.Parallel()
 	permutation(t, []uint32{0, 1, 2, 3, 4, 5, 6, 7}, 8)
 	permutation(t, []uint32{0, 1 << 29, 2 << 29, 3 << 29, 4 << 29, 5 << 29, 6 << 29, 7 << 29}, 8)
 	permutation(t, []uint32{0, 1}, 20)
@@ -415,7 +407,6 @@ func windowed(t *testing.T, k key) {
 	if testing.Short() {
 		t.Skip("Skipping in short mode")
 	}
-	t.Parallel()
 	const BITS = 16
 
 	for r := 0; r < k.bits(); r++ {
@@ -438,7 +429,6 @@ func TestSmhasherText(t *testing.T) {
 	if testing.Short() {
 		t.Skip("Skipping in short mode")
 	}
-	t.Parallel()
 	text(t, "Foo", "Bar")
 	text(t, "FooBar", "")
 	text(t, "", "FooBar")
@@ -473,7 +463,6 @@ func TestSmhasherSeed(t *testing.T) {
 	if unsafe.Sizeof(uintptr(0)) == 4 {
 		t.Skip("32-bit platforms don't have ideal seed-input distributions (see issue 33988)")
 	}
-	t.Parallel()
 	h := newHashSet()
 	const N = 100000
 	s := "hello"
