commit 33e0f3d853f871d849cd8e3b30a31b91d00bb209
Author: Austin Clements <austin@google.com>
Date:   Mon Apr 27 15:42:45 2015 -0400

    runtime: fix some out of date comments and typos
    
    Change-Id: I061057414c722c5a0f03c709528afc8554114db6
    Reviewed-on: https://go-review.googlesource.com/9367
    Reviewed-by: Rick Hudson <rlh@golang.org>
---
 src/runtime/mgcmark.go | 3 +--
 src/runtime/proc1.go   | 2 +-
 2 files changed, 2 insertions(+), 3 deletions(-)

diff --git a/src/runtime/mgcmark.go b/src/runtime/mgcmark.go
index 5483c68c56..7fc4594eb6 100644
--- a/src/runtime/mgcmark.go
+++ b/src/runtime/mgcmark.go
@@ -660,8 +660,7 @@ func shade(b uintptr) {
 }
 
 // obj is the start of an object with mark mbits.
-// If it isn't already marked, mark it and enqueue into workbuf.
-// Return possibly new workbuf to use.
+// If it isn't already marked, mark it and enqueue into gcw.
 // base and off are for debugging only and could be removed.
 //go:nowritebarrier
 func greyobject(obj, base, off uintptr, hbits heapBits, span *mspan, gcw *gcWork) {
diff --git a/src/runtime/proc1.go b/src/runtime/proc1.go
index 3751e35bb7..c5c1173a15 100644
--- a/src/runtime/proc1.go
+++ b/src/runtime/proc1.go
@@ -748,7 +748,7 @@ func mstart1() {
 // safe point and execute fn on that P. If the P is not executing code
 // (it is idle or in a syscall), this will call fn(p) directly while
 // preventing the P from exiting its state. This does not ensure that
-// fn will run on every CPU executing Go code, but it act as a global
+// fn will run on every CPU executing Go code, but it acts as a global
 // memory barrier. GC uses this as a "ragged barrier."
 //
 // The caller must hold worldsema.
