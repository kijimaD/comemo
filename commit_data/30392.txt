commit 7f4c3e87106a367babb6662b2d1e3b485e0d07af
Author: Josh Bleecher Snyder <josharian@gmail.com>
Date:   Wed Nov 2 19:02:15 2016 -0700

    all: update s390x assembly to use vet-friendly names
    
    No functional changes.
    
    Change-Id: Ibf592c04be506a76577d48574e84ab20c3238b49
    Reviewed-on: https://go-review.googlesource.com/32589
    Run-TryBot: Josh Bleecher Snyder <josharian@gmail.com>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Michael Munday <munday@ca.ibm.com>
---
 src/crypto/aes/asm_s390x.s    |  8 ++++----
 src/runtime/asm_s390x.s       | 12 ++++++------
 src/runtime/sys_linux_s390x.s |  4 ++--
 src/sync/atomic/asm_s390x.s   | 22 +++++++++++-----------
 4 files changed, 23 insertions(+), 23 deletions(-)

diff --git a/src/crypto/aes/asm_s390x.s b/src/crypto/aes/asm_s390x.s
index 5714aee318..6f2c932e0b 100644
--- a/src/crypto/aes/asm_s390x.s
+++ b/src/crypto/aes/asm_s390x.s
@@ -41,20 +41,20 @@ notfound:
 	MOVB	$0, ret+0(FP)
 	RET
 
-// func cryptBlocks(function code, key, dst, src *byte, length int)
+// func cryptBlocks(c code, key, dst, src *byte, length int)
 TEXT ·cryptBlocks(SB),NOSPLIT,$0-40
 	MOVD	key+8(FP), R1
 	MOVD	dst+16(FP), R2
 	MOVD	src+24(FP), R4
 	MOVD	length+32(FP), R5
-	MOVD	function+0(FP), R0
+	MOVD	c+0(FP), R0
 loop:
 	WORD	$0xB92E0024 // cipher message (KM)
 	BVS	loop        // branch back if interrupted
 	XOR	R0, R0
 	RET
 
-// func cryptBlocksChain(function code, iv, key, dst, src *byte, length int)
+// func cryptBlocksChain(c code, iv, key, dst, src *byte, length int)
 TEXT ·cryptBlocksChain(SB),NOSPLIT,$48-48
 	LA	params-48(SP), R1
 	MOVD	iv+8(FP), R8
@@ -64,7 +64,7 @@ TEXT ·cryptBlocksChain(SB),NOSPLIT,$48-48
 	MOVD	dst+24(FP), R2
 	MOVD	src+32(FP), R4
 	MOVD	length+40(FP), R5
-	MOVD	function+0(FP), R0
+	MOVD	c+0(FP), R0
 loop:
 	WORD	$0xB92F0024       // cipher message with chaining (KMC)
 	BVS	loop              // branch back if interrupted
diff --git a/src/runtime/asm_s390x.s b/src/runtime/asm_s390x.s
index b936b528b5..9e469c45fb 100644
--- a/src/runtime/asm_s390x.s
+++ b/src/runtime/asm_s390x.s
@@ -741,10 +741,10 @@ TEXT runtime·aeshash64(SB),NOSPLIT|NOFRAME,$0-0
 TEXT runtime·aeshashstr(SB),NOSPLIT|NOFRAME,$0-0
 	MOVW	(R0), R15
 
-// memequal(p, q unsafe.Pointer, size uintptr) bool
+// memequal(a, b unsafe.Pointer, size uintptr) bool
 TEXT runtime·memequal(SB),NOSPLIT|NOFRAME,$0-25
-	MOVD	p+0(FP), R3
-	MOVD	q+8(FP), R5
+	MOVD	a+0(FP), R3
+	MOVD	b+8(FP), R5
 	MOVD	size+16(FP), R6
 	LA	ret+24(FP), R7
 	BR	runtime·memeqbody(SB)
@@ -763,9 +763,9 @@ TEXT runtime·memequal_varlen(SB),NOSPLIT|NOFRAME,$0-17
 // See runtime_test.go:eqstring_generic for
 // equivalent Go code.
 TEXT runtime·eqstring(SB),NOSPLIT|NOFRAME,$0-33
-	MOVD	s1str+0(FP), R3
-	MOVD	s1len+8(FP), R6
-	MOVD	s2str+16(FP), R5
+	MOVD	s1_base+0(FP), R3
+	MOVD	s1_len+8(FP), R6
+	MOVD	s2_base+16(FP), R5
 	LA	ret+32(FP), R7
 	BR	runtime·memeqbody(SB)
 
diff --git a/src/runtime/sys_linux_s390x.s b/src/runtime/sys_linux_s390x.s
index b7037a8a6c..47f34d9ea4 100644
--- a/src/runtime/sys_linux_s390x.s
+++ b/src/runtime/sys_linux_s390x.s
@@ -311,8 +311,8 @@ TEXT runtime·clone(SB),NOSPLIT|NOFRAME,$0
 
 	// Copy mp, gp, fn off parent stack for use by child.
 	// Careful: Linux system call clobbers ???.
-	MOVD	mm+16(FP), R7
-	MOVD	gg+24(FP), R8
+	MOVD	mp+16(FP), R7
+	MOVD	gp+24(FP), R8
 	MOVD	fn+32(FP), R9
 
 	MOVD	R7, -8(R2)
diff --git a/src/sync/atomic/asm_s390x.s b/src/sync/atomic/asm_s390x.s
index b5389be38f..cf61013254 100644
--- a/src/sync/atomic/asm_s390x.s
+++ b/src/sync/atomic/asm_s390x.s
@@ -37,15 +37,15 @@ TEXT ·CompareAndSwapInt32(SB),NOSPLIT,$0-17
 	BR	·CompareAndSwapUint32(SB)
 
 TEXT ·CompareAndSwapUint32(SB),NOSPLIT,$0-17
-	MOVD	ptr+0(FP), R3
+	MOVD	addr+0(FP), R3
 	MOVWZ	old+8(FP), R4
 	MOVWZ	new+12(FP), R5
 	CS	R4, R5, 0(R3) // if R4==(R3) then (R3)=R5 else R4=(R3)
 	BNE	cas_fail
-	MOVB	$1, ret+16(FP)
+	MOVB	$1, swapped+16(FP)
 	RET
 cas_fail:
-	MOVB	$0, ret+16(FP)
+	MOVB	$0, swapped+16(FP)
 	RET
 
 TEXT ·CompareAndSwapUintptr(SB),NOSPLIT,$0-25
@@ -55,29 +55,29 @@ TEXT ·CompareAndSwapInt64(SB),NOSPLIT,$0-25
 	BR	·CompareAndSwapUint64(SB)
 
 TEXT ·CompareAndSwapUint64(SB),NOSPLIT,$0-25
-	MOVD	ptr+0(FP), R3
+	MOVD	addr+0(FP), R3
 	MOVD	old+8(FP), R4
 	MOVD	new+16(FP), R5
 	CSG	R4, R5, 0(R3) // if R4==(R3) then (R3)=R5 else R4=(R3)
 	BNE	cas64_fail
-	MOVB	$1, ret+24(FP)
+	MOVB	$1, swapped+24(FP)
 	RET
 cas64_fail:
-	MOVB	$0, ret+24(FP)
+	MOVB	$0, swapped+24(FP)
 	RET
 
 TEXT ·AddInt32(SB),NOSPLIT,$0-20
 	BR	·AddUint32(SB)
 
 TEXT ·AddUint32(SB),NOSPLIT,$0-20
-	MOVD	ptr+0(FP), R4
+	MOVD	addr+0(FP), R4
 	MOVWZ	delta+8(FP), R5
 	MOVWZ	(R4), R3
 repeat:
 	ADD	R3, R5, R6
 	CS	R3, R6, (R4) // if R3==(R4) then (R4)=R6 else R3=(R4)
 	BNE	repeat
-	MOVW	R6, ret+16(FP)
+	MOVW	R6, new+16(FP)
 	RET
 
 TEXT ·AddUintptr(SB),NOSPLIT,$0-24
@@ -87,14 +87,14 @@ TEXT ·AddInt64(SB),NOSPLIT,$0-24
 	BR	·AddUint64(SB)
 
 TEXT ·AddUint64(SB),NOSPLIT,$0-24
-	MOVD	ptr+0(FP), R4
+	MOVD	addr+0(FP), R4
 	MOVD	delta+8(FP), R5
 	MOVD	(R4), R3
 repeat:
 	ADD	R3, R5, R6
 	CSG	R3, R6, (R4) // if R3==(R4) then (R4)=R6 else R3=(R4)
 	BNE	repeat
-	MOVD	R6, ret+16(FP)
+	MOVD	R6, new+16(FP)
 	RET
 
 TEXT ·LoadInt32(SB),NOSPLIT,$0-12
@@ -125,7 +125,7 @@ TEXT ·StoreInt32(SB),NOSPLIT,$0-12
 	BR	·StoreUint32(SB)
 
 TEXT ·StoreUint32(SB),NOSPLIT,$0-12
-	MOVD	ptr+0(FP), R3
+	MOVD	addr+0(FP), R3
 	MOVW	val+8(FP), R4
 	MOVW	R4, 0(R3)
 	RET
