commit 276fb279d1703451e5b962350727f84e4e8e9814
Author: Robert Griesemer <gri@golang.org>
Date:   Wed Oct 13 11:50:46 2021 -0700

    cmd/compile/internal/syntax: remove AllowTypeSets mode
    
    The respective issue has been accepted, so we can always
    accept constraint literals with omitted interfaces.
    
    For #48424.
    
    Change-Id: Ia3d325401252a5a22d5ffa98d2ae6af73178dec0
    Reviewed-on: https://go-review.googlesource.com/c/go/+/355709
    Trust: Robert Griesemer <gri@golang.org>
    Reviewed-by: Robert Findley <rfindley@google.com>
---
 src/cmd/compile/internal/noder/noder.go         | 2 +-
 src/cmd/compile/internal/syntax/error_test.go   | 2 +-
 src/cmd/compile/internal/syntax/parser.go       | 2 +-
 src/cmd/compile/internal/syntax/parser_test.go  | 6 +++---
 src/cmd/compile/internal/syntax/printer_test.go | 4 ++--
 src/cmd/compile/internal/syntax/syntax.go       | 1 -
 src/cmd/compile/internal/types2/check_test.go   | 2 +-
 7 files changed, 9 insertions(+), 10 deletions(-)

diff --git a/src/cmd/compile/internal/noder/noder.go b/src/cmd/compile/internal/noder/noder.go
index 2e7b636681..7c14fcf041 100644
--- a/src/cmd/compile/internal/noder/noder.go
+++ b/src/cmd/compile/internal/noder/noder.go
@@ -36,7 +36,7 @@ func LoadPackage(filenames []string) {
 
 	mode := syntax.CheckBranches
 	if supportsGenerics {
-		mode |= syntax.AllowGenerics | syntax.AllowTypeSets
+		mode |= syntax.AllowGenerics
 	}
 
 	// Limit the number of simultaneously open files.
diff --git a/src/cmd/compile/internal/syntax/error_test.go b/src/cmd/compile/internal/syntax/error_test.go
index 0ab3c20ce5..d87e8eaee3 100644
--- a/src/cmd/compile/internal/syntax/error_test.go
+++ b/src/cmd/compile/internal/syntax/error_test.go
@@ -130,7 +130,7 @@ func testSyntaxErrors(t *testing.T, filename string) {
 
 	var mode Mode
 	if strings.HasSuffix(filename, ".go2") {
-		mode = AllowGenerics | AllowTypeSets
+		mode = AllowGenerics
 	}
 	ParseFile(filename, func(err error) {
 		e, ok := err.(Error)
diff --git a/src/cmd/compile/internal/syntax/parser.go b/src/cmd/compile/internal/syntax/parser.go
index a669c54712..e78e77561d 100644
--- a/src/cmd/compile/internal/syntax/parser.go
+++ b/src/cmd/compile/internal/syntax/parser.go
@@ -1820,7 +1820,7 @@ func (p *parser) paramDeclOrNil(name *Name, follow token) *Field {
 	}
 
 	// type set notation is ok in type parameter lists
-	typeSetsOk := p.mode&AllowTypeSets != 0 && follow == _Rbrack
+	typeSetsOk := follow == _Rbrack
 
 	pos := p.pos()
 	if name != nil {
diff --git a/src/cmd/compile/internal/syntax/parser_test.go b/src/cmd/compile/internal/syntax/parser_test.go
index 29682012e5..68f3c376c9 100644
--- a/src/cmd/compile/internal/syntax/parser_test.go
+++ b/src/cmd/compile/internal/syntax/parser_test.go
@@ -26,11 +26,11 @@ var (
 )
 
 func TestParse(t *testing.T) {
-	ParseFile(*src_, func(err error) { t.Error(err) }, nil, AllowGenerics|AllowTypeSets)
+	ParseFile(*src_, func(err error) { t.Error(err) }, nil, AllowGenerics)
 }
 
 func TestVerify(t *testing.T) {
-	ast, err := ParseFile(*src_, func(err error) { t.Error(err) }, nil, AllowGenerics|AllowTypeSets)
+	ast, err := ParseFile(*src_, func(err error) { t.Error(err) }, nil, AllowGenerics)
 	if err != nil {
 		return // error already reported
 	}
@@ -46,7 +46,7 @@ func TestParseGo2(t *testing.T) {
 	for _, fi := range list {
 		name := fi.Name()
 		if !fi.IsDir() && !strings.HasPrefix(name, ".") {
-			ParseFile(filepath.Join(dir, name), func(err error) { t.Error(err) }, nil, AllowGenerics|AllowTypeSets)
+			ParseFile(filepath.Join(dir, name), func(err error) { t.Error(err) }, nil, AllowGenerics)
 		}
 	}
 }
diff --git a/src/cmd/compile/internal/syntax/printer_test.go b/src/cmd/compile/internal/syntax/printer_test.go
index 9b5331b148..604f1fc1ca 100644
--- a/src/cmd/compile/internal/syntax/printer_test.go
+++ b/src/cmd/compile/internal/syntax/printer_test.go
@@ -72,7 +72,7 @@ var stringTests = []string{
 	"package p; func (*R[A, B, C]) _()",
 	"package p; func (_ *R[A, B, C]) _()",
 
-	// type constraint literals with elided interfaces (only if AllowTypeSets is set)
+	// type constraint literals with elided interfaces
 	"package p; func _[P ~int, Q int | string]() {}",
 	"package p; func _[P struct{f int}, Q *P]() {}",
 
@@ -94,7 +94,7 @@ var stringTests = []string{
 
 func TestPrintString(t *testing.T) {
 	for _, want := range stringTests {
-		ast, err := Parse(nil, strings.NewReader(want), nil, nil, AllowGenerics|AllowTypeSets)
+		ast, err := Parse(nil, strings.NewReader(want), nil, nil, AllowGenerics)
 		if err != nil {
 			t.Error(err)
 			continue
diff --git a/src/cmd/compile/internal/syntax/syntax.go b/src/cmd/compile/internal/syntax/syntax.go
index 49ba87786e..f3d4c09ed5 100644
--- a/src/cmd/compile/internal/syntax/syntax.go
+++ b/src/cmd/compile/internal/syntax/syntax.go
@@ -17,7 +17,6 @@ type Mode uint
 const (
 	CheckBranches Mode = 1 << iota // check correct use of labels, break, continue, and goto statements
 	AllowGenerics
-	AllowTypeSets // requires AllowGenerics; remove once #48424 is decided
 )
 
 // Error describes a syntax error. Error implements the error interface.
diff --git a/src/cmd/compile/internal/types2/check_test.go b/src/cmd/compile/internal/types2/check_test.go
index 5b2f09425b..bc68e76407 100644
--- a/src/cmd/compile/internal/types2/check_test.go
+++ b/src/cmd/compile/internal/types2/check_test.go
@@ -100,7 +100,7 @@ func testFiles(t *testing.T, filenames []string, colDelta uint, manual bool) {
 
 	var mode syntax.Mode
 	if strings.HasSuffix(filenames[0], ".go2") {
-		mode |= syntax.AllowGenerics | syntax.AllowTypeSets
+		mode |= syntax.AllowGenerics
 	}
 	// parse files and collect parser errors
 	files, errlist := parseFiles(t, filenames, mode)
