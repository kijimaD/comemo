commit 1e1fa5903b760c6714ba17e50bf850b01f49135c
Author: Katie Hockman <katie@golang.org>
Date:   Tue Nov 10 15:54:12 2020 -0500

    math/big: fix shift for recursive division
    
    The previous s value could cause a crash
    for certain inputs.
    
    Will check in tests and documentation improvements later.
    
    Thanks to the Go Ethereum team and the OSS-Fuzz project for reporting this.
    Thanks to RÃ©my Oudompheng and Robert Griesemer for their help
    developing and validating the fix.
    
    Fixes CVE-2020-28362
    
    Change-Id: Ibbf455c4436bcdb07c84a34fa6551fb3422356d3
    Reviewed-on: https://team-review.git.corp.google.com/c/golang/go-private/+/899974
    Reviewed-by: Roland Shoemaker <bracewell@google.com>
    Reviewed-by: Filippo Valsorda <valsorda@google.com>
    Reviewed-on: https://go-review.googlesource.com/c/go/+/269657
    Trust: Katie Hockman <katie@golang.org>
    Trust: Roland Shoemaker <roland@golang.org>
    Run-TryBot: Katie Hockman <katie@golang.org>
    Reviewed-by: Roland Shoemaker <roland@golang.org>
    TryBot-Result: Go Bot <gobot@golang.org>
---
 src/math/big/nat.go | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/math/big/nat.go b/src/math/big/nat.go
index c2f3787848..068176e1c1 100644
--- a/src/math/big/nat.go
+++ b/src/math/big/nat.go
@@ -929,7 +929,7 @@ func (z nat) divRecursiveStep(u, v nat, depth int, tmp *nat, temps []*nat) {
 
 	// Now u < (v<<B), compute lower bits in the same way.
 	// Choose shift = B-1 again.
-	s := B
+	s := B - 1
 	qhat := *temps[depth]
 	qhat.clear()
 	qhat.divRecursiveStep(u[s:].norm(), v[s:], depth+1, tmp, temps)
