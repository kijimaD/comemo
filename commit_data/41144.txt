commit 895b7c85addfffe19b66d8ca71c31799d6e55990
Author: Ian Lance Taylor <iant@golang.org>
Date:   Tue Jan 21 16:50:56 2020 -0800

    runtime: don't skip checkTimers if we would clear deleted timers
    
    The timers code used to have a problem: if code started and stopped a
    lot of timers, as would happen with, for example, lots of calls to
    context.WithTimeout, then it would steadily use memory holding timers
    that had stopped but not been removed from the timer heap.
    That problem was fixed by CL 214299, which would remove all deleted
    timers whenever they got to be more than 1/4 of the total number of
    timers on the heap.
    
    The timers code had a different problem: if there were some idle P's,
    the running P's would have lock contention trying to steal their timers.
    That problem was fixed by CL 214185, which only acquired the timer lock
    if the next timer was ready to run or there were some timers to adjust.
    
    Unfortunately, CL 214185 partially undid 214299, in that we could now
    accumulate an increasing number of deleted timers while there were no
    timers ready to run. This CL restores the 214299 behavior, by checking
    whether there are lots of deleted timers without acquiring the lock.
    
    This is a performance issue to consider for the 1.14 release.
    
    Change-Id: I13c980efdcc2a46eb84882750c39e3f7c5b2e7c3
    Reviewed-on: https://go-review.googlesource.com/c/go/+/215722
    Run-TryBot: Ian Lance Taylor <iant@golang.org>
    Reviewed-by: Austin Clements <austin@google.com>
    TryBot-Result: Gobot Gobot <gobot@golang.org>

 src/runtime/proc.go     |  9 ++++++++-
 src/runtime/runtime2.go |  6 +++++-
 src/runtime/time.go     | 32 +++++++++++++++++++++-----------
 3 files changed, 34 insertions(+), 13 deletions(-)
