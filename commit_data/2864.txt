commit f17c6bcafb48c28e965683e32e73a4dab423ed75
Author: Rob Pike <r@golang.org>
Date:   Mon Aug 3 15:27:15 2009 -0700

    this time really clean up a TODO
    
    R=rsc
    DELTA=28  (0 added, 20 deleted, 8 changed)
    OCL=32676
    CL=32684
---
 src/cmd/gobuild/util.go | 28 ++++------------------------
 1 file changed, 4 insertions(+), 24 deletions(-)

diff --git a/src/cmd/gobuild/util.go b/src/cmd/gobuild/util.go
index 3f38cc6986..55ce1398d8 100644
--- a/src/cmd/gobuild/util.go
+++ b/src/cmd/gobuild/util.go
@@ -264,36 +264,16 @@ func SourceFiles(dir string) ([]string, os.Error) {
 	return out, nil;
 }
 
-// TODO(rsc): Implement these for real as
-// os.MkdirAll and os.RemoveAll and then
-// make these wrappers that call fatal on error.
-
 func MkdirAll(name string) {
-	p, err := exec.Run("/bin/mkdir", []string{"mkdir", "-p", name}, os.Environ(), exec.DevNull, exec.PassThrough, exec.PassThrough);
+	err := path.MkdirAll(name);
 	if err != nil {
-		fatal("run /bin/mkdir: %v", err);
-	}
-	w, err1 := p.Wait(0);
-	if err1 != nil {
-		fatal("wait /bin/mkdir: %v", err);
-	}
-	if !w.Exited() || w.ExitStatus() != 0 {
-		fatal("/bin/mkdir: %v", w);
+		fatal("MkdirAll: %v", err);
 	}
 }
 
 func RemoveAll(name string) {
-	p, err := exec.Run("/bin/rm", []string{"rm", "-rf", name}, os.Environ(), exec.DevNull, exec.PassThrough, exec.PassThrough);
-	if err != nil {
-		fatal("run /bin/rm: %v", err);
-	}
-	w, err := p.Wait(0);
+	err := path.RemoveAll(name);
 	if err != nil {
-		fatal("wait /bin/rm: %v", err);
-	}
-	if !w.Exited() || w.ExitStatus() != 0 {
-		fatal("/bin/rm: %v", w);
+		fatal("RemoveAll: %v", err);
 	}
-
 }
-
