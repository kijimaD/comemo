commit d6ed1b70ade474a901eb5deaf00e536d26a6ccd6
Author: Dmitriy Vyukov <dvyukov@google.com>
Date:   Thu Jul 21 11:29:08 2011 -0400

    runtime: replace centralized ncgocall counter with a distributed one
    
    R=golang-dev, rsc
    CC=golang-dev
    https://golang.org/cl/4809042
---
 src/pkg/runtime/cgocall.c | 9 ++++++---
 src/pkg/runtime/proc.c    | 4 +++-
 src/pkg/runtime/runtime.h | 1 +
 3 files changed, 10 insertions(+), 4 deletions(-)

diff --git a/src/pkg/runtime/cgocall.c b/src/pkg/runtime/cgocall.c
index 58f287e906..829448b020 100644
--- a/src/pkg/runtime/cgocall.c
+++ b/src/pkg/runtime/cgocall.c
@@ -83,7 +83,6 @@
 // callee-save registers for gcc and returns to GoF, which returns to f.
 
 void *initcgo;	/* filled in by dynamic linker when Cgo is available */
-int64 ncgocall;
 
 static void unlockm(void);
 static void unwindm(void);
@@ -101,7 +100,7 @@ runtime·cgocall(void (*fn)(void*), void *arg)
 	if(fn == 0)
 		runtime·throw("cgocall nil");
 
-	ncgocall++;
+	m->ncgocall++;
 
 	/*
 	 * Lock g to m to ensure we stay on the same stack if we do a
@@ -155,7 +154,11 @@ unlockm(void)
 void
 runtime·Cgocalls(int64 ret)
 {
-	ret = ncgocall;
+	M *m;
+
+	ret = 0;
+	for(m=runtime·atomicloadp(&runtime·allm); m; m=m->alllink)
+		ret += m->ncgocall;
 	FLUSH(&ret);
 }
 
diff --git a/src/pkg/runtime/proc.c b/src/pkg/runtime/proc.c
index 56c8f9bcf9..6416651ce5 100644
--- a/src/pkg/runtime/proc.c
+++ b/src/pkg/runtime/proc.c
@@ -278,7 +278,9 @@ mcommoninit(M *m)
 	// Add to runtime·allm so garbage collector doesn't free m
 	// when it is just in a register or thread-local storage.
 	m->alllink = runtime·allm;
-	runtime·allm = m;
+	// runtime·Cgocalls() iterates over allm w/o schedlock,
+	// so we need to publish it safely.
+	runtime·atomicstorep(&runtime·allm, m);
 
 	m->id = runtime·sched.mcount++;
 	m->fastrand = 0x49f6428aUL + m->id;
diff --git a/src/pkg/runtime/runtime.h b/src/pkg/runtime/runtime.h
index ef0cc00f94..50c2b0eeca 100644
--- a/src/pkg/runtime/runtime.h
+++ b/src/pkg/runtime/runtime.h
@@ -231,6 +231,7 @@ struct	M
 	int32	dying;
 	int32	profilehz;
 	uint32	fastrand;
+	uint64	ncgocall;
 	Note	havenextg;
 	G*	nextg;
 	M*	alllink;	// on allm
