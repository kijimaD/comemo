commit 370cadd0e43ddfcfd494eefefc5bd4e85d7efcf8
Author: hopehook <hopehook.com@gmail.com>
Date:   Fri Apr 8 13:37:40 2022 +0800

    cmd/compile: add a test case and some comments for deadlock on syntax error
    
    After CL 398014 fixed a compiler deadlock on syntax errors,
    this CL adds a test case and more details for that.
    
    How it was fixed:
    
    CL 57751 introduced a channel "sem" to limit the number of
    simultaneously open files.
    
    Unfortunately, when the number of syntax processing goroutines
    exceeds this limit, will easily trigger deadlock.
    
    In the original implementation, "sem" only limited the number
    of open files, not the number of concurrent goroutines, which
    will cause extra goroutines to block on "sem". When the p.err
    of the following iteration happens to be held by the blocking
    goroutine, it will fall into a circular wait, which is a deadlock.
    
    CL 398014 fixed the above deadlock, also see issue #52127.
    
    First, move "sem <- struct{}{}" to the outside of the syntax
    processing goroutine, so that the number of concurrent goroutines
    does not exceed the number of open files, to ensure that all
    goroutines in execution can eventually write to p.err.
    
    Second, move the entire syntax processing logic into a separate
    goroutine to avoid blocking on the producer side.
    
    Change-Id: I1bb89bfee3d2703784f0c0d4ded82baab2ae867a
    Reviewed-on: https://go-review.googlesource.com/c/go/+/399054
    Run-TryBot: Ian Lance Taylor <iant@golang.org>
    TryBot-Result: Gopher Robot <gobot@golang.org>
    Reviewed-by: Matthew Dempsky <mdempsky@google.com>
    Auto-Submit: Matthew Dempsky <mdempsky@google.com>
    Reviewed-by: Ian Lance Taylor <iant@google.com>

 src/cmd/compile/internal/noder/noder.go |  1 +
 test/fixedbugs/issue52127.go            | 62 +++++++++++++++++++++++++++++++++
 2 files changed, 63 insertions(+)
