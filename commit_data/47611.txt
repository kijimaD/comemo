commit 3304b2235af0a88ba0bb21edaf2c60df47b6e0a8
Author: Austin Clements <austin@google.com>
Date:   Wed Mar 31 16:40:52 2021 -0400

    cmd/compile: fix incoming ABI with GOEXPERIMENT=regabiargs
    
    When regabiargs is enabled, a function's incoming ABI should be
    determined solely by the function's own definition ABI (which is
    usually ABIInternal, but can be ABI0 for ABI wrappers).
    
    For example, the current code miscompiles ABI0 -> ABIInternal wrappers
    when the experiment is enabled because it treats the wrapper itself as
    being called as ABIInternal. This causes it to assume the incoming
    arguments are already in registers, so usually the wrapper doesn't do
    anything with the arguments because it thinks they're already in the
    right place. With this fix, these wrappers now correctly load the
    arguments from the stack and put them in registers.
    
    For #40724.
    
    Change-Id: Iec784e88ebc55d9e95e830ed7533aa336f3b1ca2
    Reviewed-on: https://go-review.googlesource.com/c/go/+/306409
    Trust: Austin Clements <austin@google.com>
    Run-TryBot: Austin Clements <austin@google.com>
    TryBot-Result: Go Bot <gobot@golang.org>
    Reviewed-by: Than McIntosh <thanm@google.com>
    Reviewed-by: Cherry Zhang <cherryyz@google.com>
---
 src/cmd/compile/internal/ssagen/ssa.go | 25 +++++++++++++++++--------
 1 file changed, 17 insertions(+), 8 deletions(-)

diff --git a/src/cmd/compile/internal/ssagen/ssa.go b/src/cmd/compile/internal/ssagen/ssa.go
index 57099371e6..aaea732057 100644
--- a/src/cmd/compile/internal/ssagen/ssa.go
+++ b/src/cmd/compile/internal/ssagen/ssa.go
@@ -225,13 +225,26 @@ const magicNameDotSuffix = ".MagicMethodNameForTestingRegisterABI"
 const magicLastTypeName = "MagicLastTypeNameForTestingRegisterABI"
 
 // abiForFunc implements ABI policy for a function, but does not return a copy of the ABI.
-// Passing a nil function returns ABIInternal.
+// Passing a nil function returns the default ABI based on experiment configuration.
 func abiForFunc(fn *ir.Func, abi0, abi1 *abi.ABIConfig) *abi.ABIConfig {
-	a := abi1
-	if !regabiEnabledForAllCompilation() {
-		a = abi0
+	if objabi.Experiment.RegabiArgs {
+		// Select the ABI based on the function's defining ABI.
+		if fn == nil {
+			return abi1
+		}
+		switch fn.ABI {
+		case obj.ABI0:
+			return abi0
+		case obj.ABIInternal:
+			// TODO(austin): Clean up the nomenclature here.
+			// It's not clear that "abi1" is ABIInternal.
+			return abi1
+		}
+		base.Fatalf("function %v has unknown ABI %v", fn, fn.ABI)
+		panic("not reachable")
 	}
 
+	a := abi0
 	if fn != nil {
 		name := ir.FuncName(fn)
 		magicName := strings.HasSuffix(name, magicNameDotSuffix)
@@ -263,10 +276,6 @@ func regAbiForFuncType(ft *types.Func) bool {
 	return np > 0 && strings.Contains(ft.Params.FieldType(np-1).String(), magicLastTypeName)
 }
 
-func regabiEnabledForAllCompilation() bool {
-	return objabi.Experiment.RegabiArgs
-}
-
 // getParam returns the Field of ith param of node n (which is a
 // function/method/interface call), where the receiver of a method call is
 // considered as the 0th parameter. This does not include the receiver of an
