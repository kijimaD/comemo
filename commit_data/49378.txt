commit 850768bbc9fd2d74a88233fa1f46791d08d1afc8
Author: astraw99 <wangchengiscool@gmail.com>
Date:   Mon Aug 16 09:54:40 2021 +0000

    time: update current time comment
    
    In the time package, the ticker and timer both send
    current time to channel C, so this PR update the comment
    to understand them better.
    
    Change-Id: I99846a40bf8ef780bf0062dd84cf721b3b892a1b
    GitHub-Last-Rev: 535da54b8ebd25be22289699212364df0aa49c7f
    GitHub-Pull-Request: golang/go#47597
    Reviewed-on: https://go-review.googlesource.com/c/go/+/340649
    Reviewed-by: Ian Lance Taylor <iant@golang.org>
    Run-TryBot: Ian Lance Taylor <iant@golang.org>
    TryBot-Result: Go Bot <gobot@golang.org>
    Trust: Dmitri Shuralyov <dmitshur@golang.org>
---
 src/time/sleep.go | 6 +-----
 src/time/tick.go  | 6 +++---
 2 files changed, 4 insertions(+), 8 deletions(-)

diff --git a/src/time/sleep.go b/src/time/sleep.go
index 4f45799414..b467d1d589 100644
--- a/src/time/sleep.go
+++ b/src/time/sleep.go
@@ -139,12 +139,8 @@ func (t *Timer) Reset(d Duration) bool {
 	return resetTimer(&t.r, w)
 }
 
+// sendTime does a non-blocking send of the current time on c.
 func sendTime(c interface{}, seq uintptr) {
-	// Non-blocking send of time on c.
-	// Used in NewTimer, it cannot block anyway (buffer).
-	// Used in NewTicker, dropping sends on the floor is
-	// the desired behavior when the reader gets behind,
-	// because the sends are periodic.
 	select {
 	case c.(chan Time) <- Now():
 	default:
diff --git a/src/time/tick.go b/src/time/tick.go
index 81d2a43f28..f9522b0b75 100644
--- a/src/time/tick.go
+++ b/src/time/tick.go
@@ -14,9 +14,9 @@ type Ticker struct {
 }
 
 // NewTicker returns a new Ticker containing a channel that will send
-// the time on the channel after each tick. The period of the ticks is
-// specified by the duration argument. The ticker will adjust the time
-// interval or drop ticks to make up for slow receivers.
+// the current time on the channel after each tick. The period of the
+// ticks is specified by the duration argument. The ticker will adjust
+// the time interval or drop ticks to make up for slow receivers.
 // The duration d must be greater than zero; if not, NewTicker will
 // panic. Stop the ticker to release associated resources.
 func NewTicker(d Duration) *Ticker {
