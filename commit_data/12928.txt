commit 32c3a626da60210c85dc004ead609941dfff73bc
Author: Michael Chaten <mchaten@gmail.com>
Date:   Sat Apr 21 13:24:41 2012 +1000

    runtime: add benchmark for complex128 division
    
    R=golang-dev, dave, rsc
    CC=golang-dev, minux.ma
    https://golang.org/cl/6070043
---
 src/pkg/runtime/complex_test.go | 57 +++++++++++++++++++++++++++++++++++++++++
 1 file changed, 57 insertions(+)

diff --git a/src/pkg/runtime/complex_test.go b/src/pkg/runtime/complex_test.go
new file mode 100644
index 0000000000..ebe2d59124
--- /dev/null
+++ b/src/pkg/runtime/complex_test.go
@@ -0,0 +1,57 @@
+// Copyright 2012 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package runtime_test
+
+import (
+	"math/cmplx"
+	"testing"
+)
+
+var result complex128
+
+func BenchmarkComplex128DivNormal(b *testing.B) {
+	d := 15 + 2i
+	n := 32 + 3i
+	for i := 0; i < b.N; i++ {
+		n += n / d
+	}
+	result = n
+}
+
+func BenchmarkComplex128DivNisNaN(b *testing.B) {
+	d := cmplx.NaN()
+	n := 32 + 3i
+	for i := 0; i < b.N; i++ {
+		n += n / d
+	}
+	result = n
+}
+
+func BenchmarkComplex128DivDisNaN(b *testing.B) {
+	d := 15 + 2i
+	n := cmplx.NaN()
+	for i := 0; i < b.N; i++ {
+		n += n / d
+	}
+	result = n
+}
+
+func BenchmarkComplex128DivNisInf(b *testing.B) {
+	d := 15 + 2i
+	n := cmplx.Inf()
+	for i := 0; i < b.N; i++ {
+		n += n / d
+	}
+	result = n
+}
+
+func BenchmarkComplex128DivDisInf(b *testing.B) {
+	d := cmplx.Inf()
+	n := 32 + 3i
+	for i := 0; i < b.N; i++ {
+		n += n / d
+	}
+	result = n
+}
