commit 872496da2bbda59ef598e8c16f0ebfa41c98a462
Author: Russ Cox <rsc@golang.org>
Date:   Fri Jan 17 12:28:58 2025 -0500

    math/big: replace nat pool with Word stack
    
    In the early days of math/big, algorithms that needed more space
    grew the result larger than it needed to be and then used the
    high words as extra space. This made results their own temporary
    space caches, at the cost that saving a result in a data structure
    might hold significantly more memory than necessary.
    Specifically, new(big.Int).Mul(x, y) returned a big.Int with a
    backing slice 3X as big as it strictly needed to be.
    If you are storing many multiplication results, or even a single
    large result, the 3X overhead can add up.
    
    This approach to storage for temporaries also requires being able
    to analyze the algorithms to predict the exact amount they need,
    which can be difficult.
    
    For both these reasons, the implementation of recursive long division,
    which came later, introduced a “nat pool” where temporaries could be
    stored and reused, or reclaimed by the GC when no longer used.
    This avoids the storage and bookkeeping overheads but introduces a
    per-temporary sync.Pool overhead. divRecursiveStep takes an array
    of cached temporaries to remove some of that overhead.
    The nat pool was better but is still not quite right.
    
    This CL introduces something even better than the nat pool
    (still probably not quite right, but the best I can see for now):
    a sync.Pool holding stacks for allocating temporaries.
    Now an operation can get one stack out of the pool and then
    allocate as many temporaries as it needs during the operation,
    eventually returning the stack back to the pool. The sync.Pool
    operations are now per-exported-operation (like big.Int.Mul),
    not per-temporary.
    
    This CL converts both the pre-allocation in nat.mul and the
    uses of the nat pool to use stack pools instead. This simplifies
    some code and sets us up better for more complex algorithms
    (such as Toom-Cook or FFT-based multiplication) that need
    more temporaries. It is also a little bit faster.
    
    goos: linux
    goarch: amd64
    pkg: math/big
    cpu: Intel(R) Xeon(R) CPU @ 3.10GHz
                             │     old     │                 new                 │
                             │   sec/op    │   sec/op     vs base                │
    Div/20/10-16               23.68n ± 0%   22.21n ± 0%   -6.21% (p=0.000 n=15)
    Div/40/20-16               23.68n ± 0%   22.21n ± 0%   -6.21% (p=0.000 n=15)
    Div/100/50-16              56.65n ± 0%   55.53n ± 0%   -1.98% (p=0.000 n=15)
    Div/200/100-16             194.6n ± 1%   172.8n ± 0%  -11.20% (p=0.000 n=15)
    Div/400/200-16             232.1n ± 0%   206.7n ± 0%  -10.94% (p=0.000 n=15)
    Div/1000/500-16            405.3n ± 1%   383.8n ± 0%   -5.30% (p=0.000 n=15)
    Div/2000/1000-16           810.4n ± 1%   795.2n ± 0%   -1.88% (p=0.000 n=15)
    Div/20000/10000-16         25.88µ ± 0%   25.39µ ± 0%   -1.89% (p=0.000 n=15)
    Div/200000/100000-16       931.5µ ± 0%   924.3µ ± 0%   -0.77% (p=0.000 n=15)
    Div/2000000/1000000-16     37.77m ± 0%   37.75m ± 0%        ~ (p=0.098 n=15)
    Div/20000000/10000000-16    1.367 ± 0%    1.377 ± 0%   +0.72% (p=0.003 n=15)
    NatMul/10-16               168.5n ± 3%   164.0n ± 4%        ~ (p=0.751 n=15)
    NatMul/100-16              6.086µ ± 3%   5.380µ ± 3%  -11.60% (p=0.000 n=15)
    NatMul/1000-16             238.1µ ± 3%   228.3µ ± 1%   -4.12% (p=0.000 n=15)
    NatMul/10000-16            8.721m ± 2%   8.518m ± 1%   -2.33% (p=0.000 n=15)
    NatMul/100000-16           369.6m ± 0%   371.1m ± 0%   +0.42% (p=0.000 n=15)
    geomean                    19.57µ        18.74µ        -4.21%
    
                     │     old      │                  new                   │
                     │     B/op     │     B/op      vs base                  │
    NatMul/10-16         192.0 ± 0%     192.0 ± 0%        ~ (p=1.000 n=15) ¹
    NatMul/100-16      4.750Ki ± 0%   1.751Ki ± 0%  -63.14% (p=0.000 n=15)
    NatMul/1000-16     48.16Ki ± 0%   16.02Ki ± 0%  -66.73% (p=0.000 n=15)
    NatMul/10000-16    482.9Ki ± 1%   165.4Ki ± 3%  -65.75% (p=0.000 n=15)
    NatMul/100000-16   5.747Mi ± 7%   4.197Mi ± 0%  -26.97% (p=0.000 n=15)
    geomean            41.42Ki        20.63Ki       -50.18%
    ¹ all samples are equal
    
                     │     old     │                 new                  │
                     │  allocs/op  │  allocs/op   vs base                 │
    NatMul/10-16       1.000 ±  0%   1.000 ±  0%       ~ (p=1.000 n=15) ¹
    NatMul/100-16      1.000 ±  0%   1.000 ±  0%       ~ (p=1.000 n=15) ¹
    NatMul/1000-16     1.000 ±  0%   1.000 ±  0%       ~ (p=1.000 n=15) ¹
    NatMul/10000-16    1.000 ±  0%   1.000 ±  0%       ~ (p=1.000 n=15) ¹
    NatMul/100000-16   7.000 ± 14%   7.000 ± 14%       ~ (p=0.668 n=15)
    geomean            1.476         1.476        +0.00%
    ¹ all samples are equal
    
    goos: linux
    goarch: amd64
    pkg: math/big
    cpu: Intel(R) Xeon(R) Platinum 8481C CPU @ 2.70GHz
                             │     old     │                 new                 │
                             │   sec/op    │   sec/op     vs base                │
    Div/20/10-88               15.84n ± 1%   13.12n ± 0%  -17.17% (p=0.000 n=15)
    Div/40/20-88               15.88n ± 1%   13.12n ± 0%  -17.38% (p=0.000 n=15)
    Div/100/50-88              26.42n ± 0%   25.47n ± 0%   -3.60% (p=0.000 n=15)
    Div/200/100-88             132.4n ± 0%   114.9n ± 0%  -13.22% (p=0.000 n=15)
    Div/400/200-88             150.1n ± 0%   135.6n ± 0%   -9.66% (p=0.000 n=15)
    Div/1000/500-88            275.5n ± 0%   264.1n ± 0%   -4.14% (p=0.000 n=15)
    Div/2000/1000-88           586.5n ± 0%   581.1n ± 0%   -0.92% (p=0.000 n=15)
    Div/20000/10000-88         25.87µ ± 0%   25.72µ ± 0%   -0.59% (p=0.000 n=15)
    Div/200000/100000-88       772.2µ ± 0%   779.0µ ± 0%   +0.88% (p=0.000 n=15)
    Div/2000000/1000000-88     33.36m ± 0%   33.63m ± 0%   +0.80% (p=0.000 n=15)
    Div/20000000/10000000-88    1.307 ± 0%    1.320 ± 0%   +1.03% (p=0.000 n=15)
    NatMul/10-88               140.4n ± 0%   148.8n ± 4%   +5.98% (p=0.000 n=15)
    NatMul/100-88              4.663µ ± 1%   4.388µ ± 1%   -5.90% (p=0.000 n=15)
    NatMul/1000-88             207.7µ ± 0%   205.8µ ± 0%   -0.89% (p=0.000 n=15)
    NatMul/10000-88            8.456m ± 0%   8.468m ± 0%   +0.14% (p=0.021 n=15)
    NatMul/100000-88           295.1m ± 0%   297.9m ± 0%   +0.94% (p=0.000 n=15)
    geomean                    14.96µ        14.33µ        -4.23%
    
                     │     old      │                   new                   │
                     │     B/op     │     B/op       vs base                  │
    NatMul/10-88         192.0 ± 0%     192.0 ±  0%        ~ (p=1.000 n=15) ¹
    NatMul/100-88      4.750Ki ± 0%   1.758Ki ±  0%  -62.99% (p=0.000 n=15)
    NatMul/1000-88     48.44Ki ± 0%   16.08Ki ±  0%  -66.80% (p=0.000 n=15)
    NatMul/10000-88    489.7Ki ± 1%   166.1Ki ±  3%  -66.08% (p=0.000 n=15)
    NatMul/100000-88   5.546Mi ± 0%   3.819Mi ± 60%  -31.15% (p=0.000 n=15)
    geomean            41.29Ki        20.30Ki        -50.85%
    ¹ all samples are equal
    
                     │     old     │                 new                  │
                     │  allocs/op  │  allocs/op   vs base                 │
    NatMul/10-88       1.000 ±  0%   1.000 ±  0%       ~ (p=1.000 n=15) ¹
    NatMul/100-88      1.000 ±  0%   1.000 ±  0%       ~ (p=1.000 n=15) ¹
    NatMul/1000-88     1.000 ±  0%   1.000 ±  0%       ~ (p=1.000 n=15) ¹
    NatMul/10000-88    1.000 ±  0%   1.000 ±  0%       ~ (p=1.000 n=15) ¹
    NatMul/100000-88   5.000 ± 20%   6.000 ± 67%       ~ (p=0.672 n=15)
    geomean            1.380         1.431        +3.71%
    ¹ all samples are equal
    
    goos: linux
    goarch: arm64
    pkg: math/big
                             │     old     │                 new                 │
                             │   sec/op    │   sec/op     vs base                │
    Div/20/10-16               15.85n ± 0%   15.23n ± 0%   -3.91% (p=0.000 n=15)
    Div/40/20-16               15.88n ± 0%   15.22n ± 0%   -4.16% (p=0.000 n=15)
    Div/100/50-16              29.69n ± 0%   26.39n ± 0%  -11.11% (p=0.000 n=15)
    Div/200/100-16             149.2n ± 0%   123.3n ± 0%  -17.36% (p=0.000 n=15)
    Div/400/200-16             160.3n ± 0%   139.2n ± 0%  -13.16% (p=0.000 n=15)
    Div/1000/500-16            271.0n ± 0%   256.1n ± 0%   -5.50% (p=0.000 n=15)
    Div/2000/1000-16           545.3n ± 0%   527.0n ± 0%   -3.36% (p=0.000 n=15)
    Div/20000/10000-16         22.60µ ± 0%   22.20µ ± 0%   -1.77% (p=0.000 n=15)
    Div/200000/100000-16       889.0µ ± 0%   892.2µ ± 0%   +0.35% (p=0.000 n=15)
    Div/2000000/1000000-16     38.01m ± 0%   38.12m ± 0%   +0.30% (p=0.000 n=15)
    Div/20000000/10000000-16    1.437 ± 0%    1.444 ± 0%   +0.50% (p=0.000 n=15)
    NatMul/10-16               166.4n ± 2%   169.5n ± 1%   +1.86% (p=0.000 n=15)
    NatMul/100-16              5.733µ ± 1%   5.570µ ± 1%   -2.84% (p=0.000 n=15)
    NatMul/1000-16             232.6µ ± 1%   229.8µ ± 0%   -1.22% (p=0.000 n=15)
    NatMul/10000-16            9.039m ± 1%   8.969m ± 0%   -0.77% (p=0.000 n=15)
    NatMul/100000-16           367.0m ± 0%   368.8m ± 0%   +0.48% (p=0.000 n=15)
    geomean                    16.15µ        15.50µ        -4.01%
    
                     │     old      │                  new                   │
                     │     B/op     │     B/op      vs base                  │
    NatMul/10-16         192.0 ± 0%     192.0 ± 0%        ~ (p=1.000 n=15) ¹
    NatMul/100-16      4.750Ki ± 0%   1.751Ki ± 0%  -63.14% (p=0.000 n=15)
    NatMul/1000-16     48.33Ki ± 0%   16.02Ki ± 0%  -66.85% (p=0.000 n=15)
    NatMul/10000-16    536.5Ki ± 1%   165.7Ki ± 3%  -69.12% (p=0.000 n=15)
    NatMul/100000-16   6.078Mi ± 6%   4.197Mi ± 0%  -30.94% (p=0.000 n=15)
    geomean            42.81Ki        20.64Ki       -51.78%
    ¹ all samples are equal
    
                     │     old     │                  new                  │
                     │  allocs/op  │  allocs/op   vs base                  │
    NatMul/10-16       1.000 ±  0%   1.000 ±  0%        ~ (p=1.000 n=15) ¹
    NatMul/100-16      1.000 ±  0%   1.000 ±  0%        ~ (p=1.000 n=15) ¹
    NatMul/1000-16     1.000 ±  0%   1.000 ±  0%        ~ (p=1.000 n=15) ¹
    NatMul/10000-16    2.000 ± 50%   1.000 ±  0%  -50.00% (p=0.001 n=15)
    NatMul/100000-16   9.000 ± 11%   8.000 ± 12%  -11.11% (p=0.001 n=15)
    geomean            1.783         1.516        -14.97%
    ¹ all samples are equal
    
    goos: darwin
    goarch: arm64
    pkg: math/big
    cpu: Apple M3 Pro
                             │     old      │                new                 │
                             │    sec/op    │   sec/op     vs base               │
    Div/20/10-12                9.850n ± 1%   9.405n ± 1%  -4.52% (p=0.000 n=15)
    Div/40/20-12                9.858n ± 0%   9.403n ± 1%  -4.62% (p=0.000 n=15)
    Div/100/50-12               16.40n ± 1%   14.81n ± 0%  -9.70% (p=0.000 n=15)
    Div/200/100-12              88.48n ± 2%   80.88n ± 0%  -8.59% (p=0.000 n=15)
    Div/400/200-12             107.90n ± 1%   99.28n ± 1%  -7.99% (p=0.000 n=15)
    Div/1000/500-12             188.8n ± 1%   178.6n ± 1%  -5.40% (p=0.000 n=15)
    Div/2000/1000-12            399.9n ± 0%   389.1n ± 0%  -2.70% (p=0.000 n=15)
    Div/20000/10000-12          13.94µ ± 2%   13.81µ ± 1%       ~ (p=0.574 n=15)
    Div/200000/100000-12        523.8µ ± 0%   521.7µ ± 0%  -0.40% (p=0.000 n=15)
    Div/2000000/1000000-12      21.46m ± 0%   21.48m ± 0%       ~ (p=0.067 n=15)
    Div/20000000/10000000-12    812.5m ± 0%   812.9m ± 0%       ~ (p=0.061 n=15)
    NatMul/10-12                77.14n ± 0%   78.35n ± 1%  +1.57% (p=0.000 n=15)
    NatMul/100-12               2.999µ ± 0%   2.871µ ± 1%  -4.27% (p=0.000 n=15)
    NatMul/1000-12              126.2µ ± 0%   126.8µ ± 0%  +0.51% (p=0.011 n=15)
    NatMul/10000-12             5.099m ± 0%   5.125m ± 0%  +0.51% (p=0.000 n=15)
    NatMul/100000-12            206.7m ± 0%   208.4m ± 0%  +0.80% (p=0.000 n=15)
    geomean                     9.512µ        9.236µ       -2.91%
    
                     │     old      │                   new                    │
                     │     B/op     │      B/op       vs base                  │
    NatMul/10-12         192.0 ± 0%     192.0 ±   0%        ~ (p=1.000 n=15) ¹
    NatMul/100-12      4.750Ki ± 0%   1.750Ki ±   0%  -63.16% (p=0.000 n=15)
    NatMul/1000-12     48.13Ki ± 0%   16.01Ki ±   0%  -66.73% (p=0.000 n=15)
    NatMul/10000-12    483.5Ki ± 1%   163.2Ki ±   2%  -66.24% (p=0.000 n=15)
    NatMul/100000-12   5.480Mi ± 4%   1.532Mi ± 104%  -72.05% (p=0.000 n=15)
    geomean            41.03Ki        16.82Ki         -59.01%
    ¹ all samples are equal
    
                     │    old     │                  new                   │
                     │ allocs/op  │  allocs/op    vs base                  │
    NatMul/10-12       1.000 ± 0%   1.000 ±   0%        ~ (p=1.000 n=15) ¹
    NatMul/100-12      1.000 ± 0%   1.000 ±   0%        ~ (p=1.000 n=15) ¹
    NatMul/1000-12     1.000 ± 0%   1.000 ±   0%        ~ (p=1.000 n=15) ¹
    NatMul/10000-12    1.000 ± 0%   1.000 ±   0%        ~ (p=1.000 n=15) ¹
    NatMul/100000-12   5.000 ± 0%   1.000 ± 400%  -80.00% (p=0.007 n=15)
    geomean            1.380        1.000         -27.52%
    ¹ all samples are equal
    
    Change-Id: I7efa6fe37971ed26ae120a32250fcb47ece0a011
    Reviewed-on: https://go-review.googlesource.com/c/go/+/650638
    LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>
    Auto-Submit: Russ Cox <rsc@golang.org>
    Reviewed-by: Ian Lance Taylor <iant@google.com>
    Reviewed-by: Alan Donovan <adonovan@google.com>

 src/math/big/arith_test.go   |   5 +-
 src/math/big/float.go        |   8 +-
 src/math/big/int.go          |  20 +--
 src/math/big/nat.go          | 310 +++++++++++++++++++++++++------------------
 src/math/big/nat_test.go     |  74 ++++++++---
 src/math/big/natconv.go      |  25 ++--
 src/math/big/natconv_test.go |  21 ++-
 src/math/big/natdiv.go       |  98 ++++++--------
 src/math/big/prime.go        |  42 +++---
 src/math/big/prime_test.go   |  17 ++-
 src/math/big/rat.go          |  73 ++++++----
 src/math/big/ratconv.go      |  28 ++--
 12 files changed, 429 insertions(+), 292 deletions(-)
