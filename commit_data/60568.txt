commit ecadbe9faa1752fb949471b95743a48e89a65ee2
Author: Robert Griesemer <gri@golang.org>
Date:   Wed Jul 31 13:12:50 2024 -0700

    go/types: generate recording.go
    
    Change-Id: I530df137bcb5094a828f97ecbe204265b50c8546
    Reviewed-on: https://go-review.googlesource.com/c/go/+/602118
    Auto-Submit: Robert Griesemer <gri@google.com>
    LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>
    Reviewed-by: Robert Griesemer <gri@google.com>
    Reviewed-by: Tim King <taking@google.com>
---
 src/go/types/generate_test.go | 12 +++++++++---
 src/go/types/recording.go     |  5 ++++-
 2 files changed, 13 insertions(+), 4 deletions(-)

diff --git a/src/go/types/generate_test.go b/src/go/types/generate_test.go
index 79a8e77a75..de2e63d163 100644
--- a/src/go/types/generate_test.go
+++ b/src/go/types/generate_test.go
@@ -159,9 +159,15 @@ var filemap = map[string]action{
 			"syntax.StringLit->token.STRING") // must happen before renaming identifiers
 		renameIdents(f, "syntax->ast")
 	},
-	"package.go":       nil,
-	"pointer.go":       nil,
-	"predicates.go":    nil,
+	"package.go":    nil,
+	"pointer.go":    nil,
+	"predicates.go": nil,
+	"recording.go": func(f *ast.File) {
+		renameImportPath(f, `"cmd/compile/internal/syntax"->"go/ast"`)
+		renameSelectorExprs(f, "syntax.Name->ast.Ident") // must happen before renaming identifiers
+		renameIdents(f, "syntax->ast")
+		fixAtPosCall(f)
+	},
 	"scope.go":         func(f *ast.File) { fixTokenPos(f); renameIdents(f, "InsertLazy->_InsertLazy") },
 	"selection.go":     nil,
 	"sizes.go":         func(f *ast.File) { renameIdents(f, "IsSyncAtomicAlign64->_IsSyncAtomicAlign64") },
diff --git a/src/go/types/recording.go b/src/go/types/recording.go
index fa73835983..8bdc0dfa0e 100644
--- a/src/go/types/recording.go
+++ b/src/go/types/recording.go
@@ -1,9 +1,12 @@
+// Code generated by "go test -run=Generate -write=all"; DO NOT EDIT.
+// Source: ../../cmd/compile/internal/types2/recording.go
+
 // Copyright 2024 The Go Authors. All rights reserved.
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
 // This file implements recording of type information
-// in the types.Info maps.
+// in the types2.Info maps.
 
 package types
 
