commit b78a7b7dabd367722affa7188adb26d503b39109
Author: Rob Pike <r@golang.org>
Date:   Sun Dec 11 21:03:49 2011 -0800

    doc/go_tutorial: make clear the file example is Unix-specific
    Fixes #2553.
    
    R=golang-dev, adg
    CC=golang-dev
    https://golang.org/cl/5472074
---
 doc/go_tutorial.html | 10 ++++++++--
 doc/go_tutorial.tmpl | 10 ++++++++--
 2 files changed, 16 insertions(+), 4 deletions(-)

diff --git a/doc/go_tutorial.html b/doc/go_tutorial.html
index 145ea21106..f7e4e7b821 100644
--- a/doc/go_tutorial.html
+++ b/doc/go_tutorial.html
@@ -481,8 +481,9 @@ assigned to a variable.
 <p>
 <h2>An I/O Package</h2>
 <p>
-Next we'll look at a simple package for doing file I/O with an
-open/close/read/write interface.  Here's the start of <code>file.go</code>:
+Next we'll look at a simple package for doing Unix file I/O with an
+open/close/read/write interface.
+Here's the start of <code>file.go</code>:
 <p>
 <pre><!--{{code "progs/file.go" `/package/` `/^}/`}}
 -->package file
@@ -507,6 +508,11 @@ and reproduce the rudiments of its file I/O.
 <p>
 The other item is the low-level, external <code>syscall</code> package, which provides
 a primitive interface to the underlying operating system's calls.
+The <code>syscall</code> package is very system-dependent, and the way it's
+used here works only on Unix-like systems,
+but the general ideas explored here apply broadly.
+(A Windows version is available in
+<a href="progs/file_windows.go"><code>file_windows.go</code></a>.)
 <p>
 Next is a type definition: the <code>type</code> keyword introduces a type declaration,
 in this case a data structure called <code>File</code>.
diff --git a/doc/go_tutorial.tmpl b/doc/go_tutorial.tmpl
index 2a583e2f49..b07a198404 100644
--- a/doc/go_tutorial.tmpl
+++ b/doc/go_tutorial.tmpl
@@ -422,8 +422,9 @@ assigned to a variable.
 <p>
 <h2>An I/O Package</h2>
 <p>
-Next we'll look at a simple package for doing file I/O with an
-open/close/read/write interface.  Here's the start of <code>file.go</code>:
+Next we'll look at a simple package for doing Unix file I/O with an
+open/close/read/write interface.
+Here's the start of <code>file.go</code>:
 <p>
 {{code "progs/file.go" `/package/` `/^}/`}}
 <p>
@@ -436,6 +437,11 @@ and reproduce the rudiments of its file I/O.
 <p>
 The other item is the low-level, external <code>syscall</code> package, which provides
 a primitive interface to the underlying operating system's calls.
+The <code>syscall</code> package is very system-dependent, and the way it's
+used here works only on Unix-like systems,
+but the general ideas explored here apply broadly.
+(A Windows version is available in
+<a href="progs/file_windows.go"><code>file_windows.go</code></a>.)
 <p>
 Next is a type definition: the <code>type</code> keyword introduces a type declaration,
 in this case a data structure called <code>File</code>.
