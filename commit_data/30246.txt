commit db56a63547d7ae9f19afd2497c67f717154f9115
Author: Austin Clements <austin@google.com>
Date:   Mon Oct 3 14:45:52 2016 -0400

    runtime: avoid write barriers to uninitialized finalizer frame memory
    
    runfinq allocates a stack frame on the heap for constructing the
    finalizer function calls and reuses it for each call. However, because
    the type of this frame is constantly shifting, it tells mallocgc there
    are no pointers in it and it acts essentially like uninitialized
    memory between uses. But runfinq uses pointer writes with write
    barriers to "initialize" this memory, which is not going to be safe
    with the hybrid barrier, since the hybrid barrier may see a stale
    pointer left in the "uninitialized" frame.
    
    Fix this by zero-initializing the argument values in the frame before
    writing the argument pointers.
    
    Updates #17503.
    
    Change-Id: I951c0a2be427eb9082a32d65c4410e6fdef041be
    Reviewed-on: https://go-review.googlesource.com/31453
    Reviewed-by: Rick Hudson <rlh@golang.org>

 src/runtime/mfinal.go | 5 +++++
 1 file changed, 5 insertions(+)
