commit 5993a75869310212763b0055c2e68faa1349fb2d
Author: Tobias Klauser <tklauser@distanz.ch>
Date:   Fri Sep 22 10:42:12 2017 +0200

    runtime: fix typo in the word "preceding"
    
    Change-Id: I6d8c8ca0dee972cabfcc95fda23aea25692633a5
    Reviewed-on: https://go-review.googlesource.com/65350
    Reviewed-by: Daniel Martí <mvdan@mvdan.cc>
---
 src/runtime/race.go | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/runtime/race.go b/src/runtime/race.go
index 20f19ea719..2f5713d30e 100644
--- a/src/runtime/race.go
+++ b/src/runtime/race.go
@@ -29,7 +29,7 @@ func RaceErrors() int {
 // between goroutines. These inform the race detector about actual synchronization
 // that it can't see for some reason (e.g. synchronization within RaceDisable/RaceEnable
 // sections of code).
-// RaceAcquire establishes a happens-before relation with the preceeding
+// RaceAcquire establishes a happens-before relation with the preceding
 // RaceReleaseMerge on addr up to and including the last RaceRelease on addr.
 // In terms of the C memory model (C11 §5.1.2.4, §7.17.3),
 // RaceAcquire is equivalent to atomic_load(memory_order_acquire).
@@ -51,7 +51,7 @@ func RaceRelease(addr unsafe.Pointer) {
 //go:nosplit
 
 // RaceReleaseMerge is like RaceRelease, but also establishes a happens-before
-// relation with the preceeding RaceRelease or RaceReleaseMerge on addr.
+// relation with the preceding RaceRelease or RaceReleaseMerge on addr.
 //
 // In terms of the C memory model, RaceReleaseMerge is equivalent to
 // atomic_exchange(memory_order_release).
