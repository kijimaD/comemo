commit 9208ed322459809cf26f65485d0e6d248dadb830
Author: Mikio Hara <mikioh.mikioh@gmail.com>
Date:   Wed Jun 15 01:09:51 2016 +0900

    os: fix blockUntilWaitable on freebsd/{386,arm}
    
    The previous fix was wrong because it had two misunderstandings on
    freebsd32 calling convention like the following:
    - 32-bit id1 implies that it is the upper half of 64-bit id, indeed it
      depends on machine endianness.
    - 32-bit ARM calling convension doesn't conform to freebsd32_args,
      indeed it does.
    
    This change fixes the bugs and makes blockUntilWaitable work correctly
    on freebsd/{386,arm}.
    
    Fixes #16064.
    
    Change-Id: I820c6d01d59a43ac4f2ab381f757c03b14bca75e
    Reviewed-on: https://go-review.googlesource.com/24064
    Reviewed-by: Ian Lance Taylor <iant@golang.org>
---
 src/os/wait_wait6.go | 19 +++++++------------
 1 file changed, 7 insertions(+), 12 deletions(-)

diff --git a/src/os/wait_wait6.go b/src/os/wait_wait6.go
index 2f27feda8d..7f4780ae2d 100644
--- a/src/os/wait_wait6.go
+++ b/src/os/wait_wait6.go
@@ -18,25 +18,20 @@ const _P_PID = 0
 // It does not actually call p.Wait.
 func (p *Process) blockUntilWaitable() (bool, error) {
 	var errno syscall.Errno
+	// The arguments on 32-bit FreeBSD look like the following:
+	// - freebsd32_wait6_args{ idtype, id1, id2, status, options, wrusage, info } or
+	// - freebsd32_wait6_args{ idtype, pad, id1, id2, status, options, wrusage, info } when PAD64_REQUIRED=1 on ARM, MIPS or PowerPC
 	if runtime.GOARCH == "386" {
-		// The arguments on 32-bit FreeBSD except ARM look
-		// like the following:
-		// - freebsd32_wait6_args{ idtype, id1, id2, status, options, wrusage, info } or
-		// - freebsd32_wait6_args{ idtype, pad, id1, id2, status, options, wrusage, info } when PAD64_REQUIRED=1 on MIPS or PowerPC
-		_, _, errno = syscall.Syscall9(syscall.SYS_WAIT6, _P_PID, 0, uintptr(p.Pid), 0, syscall.WEXITED|syscall.WNOWAIT, 0, 0, 0, 0)
+		_, _, errno = syscall.Syscall9(syscall.SYS_WAIT6, _P_PID, uintptr(p.Pid), 0, 0, syscall.WEXITED|syscall.WNOWAIT, 0, 0, 0, 0)
+	} else if runtime.GOARCH == "arm" {
+		_, _, errno = syscall.Syscall9(syscall.SYS_WAIT6, _P_PID, 0, uintptr(p.Pid), 0, 0, syscall.WEXITED|syscall.WNOWAIT, 0, 0, 0)
 	} else {
 		_, _, errno = syscall.Syscall6(syscall.SYS_WAIT6, _P_PID, uintptr(p.Pid), 0, syscall.WEXITED|syscall.WNOWAIT, 0, 0)
 	}
 	if errno != 0 {
 		// The wait6 system call is supported only on FreeBSD
 		// 9.3 and above, so it may return an ENOSYS error.
-		// Also the system call may return an ECHILD error
-		// when the child process has not finished the
-		// transformation using execve system call.
-		// In both cases, we just leave the care of child
-		// process to the following wait4 system call in
-		// Process.wait.
-		if errno == syscall.ENOSYS || errno == syscall.ECHILD {
+		if errno == syscall.ENOSYS {
 			return false, nil
 		}
 		return false, NewSyscallError("wait6", errno)
