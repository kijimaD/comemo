commit a2c959fe97e094f337f46e529e9e7d1a34a7c26a
Author: alirezaarzehgar <alirezaarzehgar82@gmail.com>
Date:   Wed Feb 19 19:47:14 2025 +0330

    html/template: add available godoc link
    
    Change-Id: I50404dbf0f10ee59007bd0dc5353f38e056a0430
    Reviewed-on: https://go-review.googlesource.com/c/go/+/650655
    Reviewed-by: Michael Knyszek <mknyszek@google.com>
    LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>
    Auto-Submit: Ian Lance Taylor <iant@google.com>
    Reviewed-by: Ian Lance Taylor <iant@google.com>
---
 src/html/escape.go | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/html/escape.go b/src/html/escape.go
index b718c247ff..d66a3e4837 100644
--- a/src/html/escape.go
+++ b/src/html/escape.go
@@ -173,16 +173,16 @@ var htmlEscaper = strings.NewReplacer(
 
 // EscapeString escapes special characters like "<" to become "&lt;". It
 // escapes only five such characters: <, >, &, ' and ".
-// UnescapeString(EscapeString(s)) == s always holds, but the converse isn't
+// [UnescapeString](EscapeString(s)) == s always holds, but the converse isn't
 // always true.
 func EscapeString(s string) string {
 	return htmlEscaper.Replace(s)
 }
 
 // UnescapeString unescapes entities like "&lt;" to become "<". It unescapes a
-// larger range of entities than EscapeString escapes. For example, "&aacute;"
+// larger range of entities than [EscapeString] escapes. For example, "&aacute;"
 // unescapes to "รก", as does "&#225;" and "&#xE1;".
-// UnescapeString(EscapeString(s)) == s always holds, but the converse isn't
+// UnescapeString([EscapeString](s)) == s always holds, but the converse isn't
 // always true.
 func UnescapeString(s string) string {
 	i := strings.IndexByte(s, '&')
