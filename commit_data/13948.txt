commit 4391abfb1dc855e7648f2157d301b5b435c6539e
Author: Rob Pike <r@golang.org>
Date:   Tue Sep 25 14:14:26 2012 +1000

    test/bench/shootout: new data after 64-bit ints for amd64
    
    R=golang-dev, dsymonds
    CC=golang-dev
    https://golang.org/cl/6564046
---
 test/bench/shootout/timing.log | 92 ++++++++++++++++++++++++++++++++++++++++++
 test/bench/shootout/timing.sh  |  2 +-
 2 files changed, 93 insertions(+), 1 deletion(-)

diff --git a/test/bench/shootout/timing.log b/test/bench/shootout/timing.log
index 95d7982a27..ee1f889b4a 100644
--- a/test/bench/shootout/timing.log
+++ b/test/bench/shootout/timing.log
@@ -1069,3 +1069,95 @@ pidigits 10000
 	gc pidigits	2.85u 0.02s 2.88r # -22%
 	gc_B pidigits	2.88u 0.01s 2.90r # -21%
 
+# Sep 26, 2012
+# 64-bit ints, plus significantly better floating-point code.
+# Interesting details:
+# 	Generally something in the 0-10% slower range, some (binary tree) more
+#	Floating-point noticeably faster:
+#		nbody -25%
+#		mandelbrot -37% relative to Go 1.
+#	Other:
+#		regex-dna +47%
+fasta -n 25000000
+	gcc -O2 fasta.c	1.43u 0.03s 1.46r
+	gccgo -O2 fasta.go	1.47u 0.00s 1.47r
+	gc fasta	1.78u 0.01s 1.80r
+	gc_B fasta	1.76u 0.00s 1.76r
+
+reverse-complement < output-of-fasta-25000000
+	gcc -O2 reverse-complement.c	1.14u 0.39s 11.19r
+	gccgo -O2 reverse-complement.go	0.91u 0.17s 1.09r
+	gc reverse-complement	1.12u 0.18s 1.31r
+	gc_B reverse-complement	1.12u 0.15s 1.28r
+
+nbody -n 50000000
+	gcc -O2 nbody.c -lm	13.02u 0.00s 13.05r
+	gccgo -O2 nbody.go	13.90u 0.00s 13.93r
+	gc nbody	17.05u 0.00s 17.09r
+	gc_B nbody	16.30u 0.00s 16.34r
+
+binary-tree 15 # too slow to use 20
+	gcc -O2 binary-tree.c -lm	0.61u 0.00s 0.61r
+	gccgo -O2 binary-tree.go	1.24u 0.04s 1.29r
+	gccgo -O2 binary-tree-freelist.go	0.21u 0.01s 0.22r
+	gc binary-tree	1.93u 0.02s 1.96r
+	gc binary-tree-freelist	0.32u 0.00s 0.33r
+
+fannkuch 12
+	gcc -O2 fannkuch.c	45.19u 0.00s 45.29r
+	gccgo -O2 fannkuch.go	60.32u 0.00s 60.45r
+	gccgo -O2 fannkuch-parallel.go	185.59u 0.00s 59.49r
+	gc fannkuch	72.14u 0.00s 72.30r
+	gc fannkuch-parallel	172.54u 0.00s 43.59r
+	gc_B fannkuch	53.55u 0.00s 53.67r
+
+regex-dna 100000
+	gcc -O2 regex-dna.c -lpcre	0.47u 0.00s 0.47r
+	gccgo -O2 regex-dna.go	6.49u 0.05s 6.56r
+	gccgo -O2 regex-dna-parallel.go	14.60u 0.67s 4.42r
+	gc regex-dna	3.91u 0.00s 3.92r
+	gc regex-dna-parallel	4.01u 0.03s 1.56r
+	gc_B regex-dna	3.91u 0.00s 3.92r
+
+spectral-norm 5500
+	gcc -O2 spectral-norm.c -lm	15.85u 0.00s 15.89r
+	gccgo -O2 spectral-norm.go	15.86u 0.00s 15.89r
+	gc spectral-norm	19.72u 0.00s 19.76r
+	gc_B spectral-norm	19.68u 0.01s 19.74r
+
+k-nucleotide 1000000
+	gcc -O2 k-nucleotide.c -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -lglib-2.0 	4.90u 0.01s 4.93r
+	gccgo -O2 k-nucleotide.go	4.78u 0.01s 4.80r
+	gccgo -O2 k-nucleotide-parallel.go	6.49u 0.02s 2.18r
+	gc k-nucleotide	9.05u 0.02s 9.09r
+	gc k-nucleotide-parallel	9.27u 0.01s 3.29r
+	gc_B k-nucleotide	8.95u 0.03s 9.00r
+
+mandelbrot 16000
+	gcc -O2 mandelbrot.c	36.11u 0.00s 36.19r
+	gccgo -O2 mandelbrot.go	43.67u 0.00s 43.77r
+	gc mandelbrot	38.57u 0.00s 38.66r
+	gc_B mandelbrot	38.59u 0.00s 38.68r
+
+meteor 2098
+	gcc -O2 meteor-contest.c	0.09u 0.00s 0.09r
+	gccgo -O2 meteor-contest.go	0.09u 0.00s 0.09r
+	gc meteor-contest	0.13u 0.00s 0.14r
+	gc_B meteor-contest	0.12u 0.00s 0.13r
+
+pidigits 10000
+	gcc -O2 pidigits.c -lgmp	2.26u 0.00s 2.27r
+	gccgo -O2 pidigits.go	9.05u 0.00s 9.07r
+	gc pidigits	2.88u 0.02s 2.90r
+	gc_B pidigits	2.89u 0.00s 2.90r
+
+threadring 50000000
+	gcc -O2 threadring.c -lpthread	37.30u 327.81s 289.28r
+	gccgo -O2 threadring.go	42.83u 26.15s 69.14r
+	gc threadring	13.00u 0.00s 13.03r
+
+chameneos 6000000
+	gcc -O2 chameneosredux.c -lpthread	8.80u 71.67s 12.19r
+	gccgo -O2 chameneosredux.go	11.28u 6.68s 18.00r
+	gc chameneosredux	6.94u 0.00s 6.96r
+
diff --git a/test/bench/shootout/timing.sh b/test/bench/shootout/timing.sh
index 890c7e8093..d269b87568 100755
--- a/test/bench/shootout/timing.sh
+++ b/test/bench/shootout/timing.sh
@@ -126,7 +126,7 @@ regexdna() {
 	runonly gcc -O2 fasta.c
 	runonly a.out 100000 > x
 	runonly echo 'regex-dna 100000'
-	runonly 'gcc -O2 regex-dna.c -lpcre' a.out <x
+	run 'gcc -O2 regex-dna.c -lpcre' a.out <x
 	run 'gccgo -O2 regex-dna.go' a.out <x
 	run 'gccgo -O2 regex-dna-parallel.go' a.out <x
 	run 'gc regex-dna' $O.out <x
