commit 38df0459ae1631e223edbe2c9f1a970bbb994fe9
Author: Rob Pike <r@golang.org>
Date:   Tue Dec 13 11:13:23 2011 -0800

    strconv: make QuoteRune etc. take a rune argument
    Just an oversight it didn't already.
    Fixes #2515.
    
    R=golang-dev, rsc
    CC=golang-dev
    https://golang.org/cl/5483064
---
 src/pkg/fmt/format.go         |  4 ++--
 src/pkg/strconv/quote.go      | 16 ++++++++--------
 src/pkg/strconv/quote_test.go |  2 +-
 3 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/src/pkg/fmt/format.go b/src/pkg/fmt/format.go
index fbafa9d9ad..5f62c067f0 100644
--- a/src/pkg/fmt/format.go
+++ b/src/pkg/fmt/format.go
@@ -331,9 +331,9 @@ func (f *fmt) fmt_q(s string) {
 func (f *fmt) fmt_qc(c int64) {
 	var quoted string
 	if f.plus {
-		quoted = strconv.QuoteRuneToASCII(int(c))
+		quoted = strconv.QuoteRuneToASCII(rune(c))
 	} else {
-		quoted = strconv.QuoteRune(int(c))
+		quoted = strconv.QuoteRune(rune(c))
 	}
 	f.padString(quoted)
 }
diff --git a/src/pkg/strconv/quote.go b/src/pkg/strconv/quote.go
index 30b384df8e..edba62954b 100644
--- a/src/pkg/strconv/quote.go
+++ b/src/pkg/strconv/quote.go
@@ -116,30 +116,30 @@ func AppendQuoteToASCII(dst []byte, s string) []byte {
 // rune.  The returned string uses Go escape sequences (\t, \n, \xFF, \u0100)
 // for control characters and non-printable characters as defined by
 // unicode.IsPrint.
-func QuoteRune(rune int) string {
+func QuoteRune(r rune) string {
 	// TODO: avoid the allocation here.
-	return quoteWith(string(rune), '\'', false)
+	return quoteWith(string(r), '\'', false)
 }
 
 // AppendQuoteRune appends a single-quoted Go character literal representing the rune,
 // as generated by QuoteRune, to dst and returns the extended buffer.
-func AppendQuoteRune(dst []byte, rune int) []byte {
-	return append(dst, QuoteRune(rune)...)
+func AppendQuoteRune(dst []byte, r rune) []byte {
+	return append(dst, QuoteRune(r)...)
 }
 
 // QuoteRuneToASCII returns a single-quoted Go character literal representing
 // the rune.  The returned string uses Go escape sequences (\t, \n, \xFF,
 // \u0100) for non-ASCII characters and non-printable characters as defined
 // by unicode.IsPrint.
-func QuoteRuneToASCII(rune int) string {
+func QuoteRuneToASCII(r rune) string {
 	// TODO: avoid the allocation here.
-	return quoteWith(string(rune), '\'', true)
+	return quoteWith(string(r), '\'', true)
 }
 
 // AppendQuoteRune appends a single-quoted Go character literal representing the rune,
 // as generated by QuoteRuneToASCII, to dst and returns the extended buffer.
-func AppendQuoteRuneToASCII(dst []byte, rune int) []byte {
-	return append(dst, QuoteRuneToASCII(rune)...)
+func AppendQuoteRuneToASCII(dst []byte, r rune) []byte {
+	return append(dst, QuoteRuneToASCII(r)...)
 }
 
 // CanBackquote returns whether the string s would be
diff --git a/src/pkg/strconv/quote_test.go b/src/pkg/strconv/quote_test.go
index e440797162..419943d83c 100644
--- a/src/pkg/strconv/quote_test.go
+++ b/src/pkg/strconv/quote_test.go
@@ -47,7 +47,7 @@ func TestQuoteToASCII(t *testing.T) {
 }
 
 type quoteRuneTest struct {
-	in    int
+	in    rune
 	out   string
 	ascii string
 }
