commit 0330aad03839fe24d15b1f4b012e908ae3b4614d
Author: Bryan C. Mills <bcmills@google.com>
Date:   Thu Oct 26 12:06:04 2023 -0400

    os: report IO_REPARSE_TAG_DEDUP files as regular in Stat and Lstat
    
    Prior to CL 460595, Lstat reported most reparse points as regular
    files. However, reparse points can in general implement unusual
    behaviors (consider IO_REPARSE_TAG_AF_UNIX or IO_REPARSE_TAG_LX_CHR),
    and Windows allows arbitrary user-defined reparse points, so in
    general we must not assume that an unrecognized reparse tag represents
    a regular file; in CL 460595, we began marking them as irregular.
    
    As it turns out, the Data Deduplication service on Windows Server runs
    an Optimization job that turns regular files into reparse files with
    the tag IO_REPARSE_TAG_DEDUP. Those files still behave more-or-less
    like regular files, in that they have well-defined sizes and support
    random-access reads and writes, so most programs can treat them as
    regular files without difficulty. However, they are still reparse
    files: as a result, on servers with the Data Deduplication service
    enabled, files could arbitrarily change from “regular” to “irregular”
    without explicit user intervention.
    
    Since dedup files are converted in the background and otherwise behave
    like regular files, this change adds a special case to report DEDUP
    reparse points as regular.
    
    Fixes #63429.
    
    No test because to my knowledge we don't have any Windows builders
    that have the deduplication service enabled, nor do we have a way to
    reliably guarantee the existence of an IO_REPARSE_TAG_DEDUP file.
    
    (In theory we could add a builder with the service enabled on a
    specific volume, write a test that encodes knowledge of that volume,
    and use the GO_BUILDER_NAME environment variable to run that test only
    on the specially-configured builders. However, I don't currently have
    the bandwidth to reconfigure the builders in this way, and given the
    simplicity of the change I think it is unlikely to regress
    accidentally.)
    
    Change-Id: I649e7ef0b67e3939a980339ce7ec6a20b31b23a1
    Cq-Include-Trybots: luci.golang.try:gotip-windows-amd64-longtest
    Reviewed-on: https://go-review.googlesource.com/c/go/+/537915
    LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>
    Reviewed-by: David Chase <drchase@google.com>
    Reviewed-by: Alex Brainman <alex.brainman@gmail.com>
    Reviewed-by: Quim Muntal <quimmuntal@gmail.com>
    Auto-Submit: Bryan Mills <bcmills@google.com>

 src/internal/syscall/windows/reparse_windows.go |  1 +
 src/os/types_windows.go                         | 18 +++++++++++++++++-
 2 files changed, 18 insertions(+), 1 deletion(-)
