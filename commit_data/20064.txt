commit 078a9cbc6cf539074ae975debc5d5396352d16b7
Author: Matthew Dempsky <mdempsky@google.com>
Date:   Wed Aug 13 11:16:30 2014 -0700

    cmd/cgo, debug/dwarf: fix translation of zero-size arrays
    
    In cgo, now that recursive calls to typeConv.Type() always work,
    we can more robustly calculate the array sizes based on the size
    of our element type.
    
    Also, in debug/dwarf, the decision to call zeroType is made
    based on a type's usage within a particular struct, but dwarf.Type
    values are cached in typeCache, so the modification might affect
    uses of the type in other structs.  Current compilers don't appear
    to share DWARF type entries for "[]foo" and "[0]foo", but they also
    don't consistently share type entries in other cases.  Arguably
    modifying the types is an improvement in some cases, but varying
    translated types according to compiler whims seems like a bad idea.
    
    Lastly, also in debug/dwarf, zeroType only needs to rewrite the
    top-level dimension, and only if the rest of the array size is
    non-zero.
    
    Fixes #8428.
    
    LGTM=iant
    R=iant
    CC=golang-codereviews
    https://golang.org/cl/127980043

 misc/cgo/test/issue8428.go  | 48 +++++++++++++++++++++++++++++++++
 src/cmd/cgo/gcc.go          | 65 +++++++++++++++++++++------------------------
 src/pkg/debug/dwarf/type.go | 52 ++++++++++++++++++++----------------
 3 files changed, 108 insertions(+), 57 deletions(-)
