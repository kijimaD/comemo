commit 785cb7e098b689e9d8c2d4be856f3ffa1825042e
Author: Josh Bleecher Snyder <josharian@gmail.com>
Date:   Sun Feb 12 22:56:50 2017 -0800

    all: fix some printf format strings
    
    Appease vet.
    
    Change-Id: Ie88de08b91041990c0eaf2e15628cdb98d40c660
    Reviewed-on: https://go-review.googlesource.com/36938
    Run-TryBot: Josh Bleecher Snyder <josharian@gmail.com>
    Reviewed-by: Brad Fitzpatrick <bradfitz@golang.org>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
---
 src/cmd/internal/src/xpos_test.go | 4 ++--
 src/cmd/nm/nm_test.go             | 6 +++---
 src/math/big/prime_test.go        | 2 +-
 3 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/src/cmd/internal/src/xpos_test.go b/src/cmd/internal/src/xpos_test.go
index 274bd761cd..3f5b848b3c 100644
--- a/src/cmd/internal/src/xpos_test.go
+++ b/src/cmd/internal/src/xpos_test.go
@@ -59,9 +59,9 @@ func TestConversion(t *testing.T) {
 func TestSize(t *testing.T) {
 	var p XPos
 	if unsafe.Alignof(p) != 4 {
-		t.Errorf("alignment = %s; want 4", unsafe.Alignof(p))
+		t.Errorf("alignment = %v; want 4", unsafe.Alignof(p))
 	}
 	if unsafe.Sizeof(p) != 8 {
-		t.Errorf("size = %s; want 8", unsafe.Sizeof(p))
+		t.Errorf("size = %v; want 8", unsafe.Sizeof(p))
 	}
 }
diff --git a/src/cmd/nm/nm_test.go b/src/cmd/nm/nm_test.go
index d7a867a0fd..170d87a690 100644
--- a/src/cmd/nm/nm_test.go
+++ b/src/cmd/nm/nm_test.go
@@ -34,7 +34,7 @@ func testMain(m *testing.M) int {
 
 	tmpDir, err := ioutil.TempDir("", "TestNM")
 	if err != nil {
-		fmt.Printf("TempDir failed: ", err)
+		fmt.Println("TempDir failed:", err)
 		return 2
 	}
 	defer os.RemoveAll(tmpDir)
@@ -42,7 +42,7 @@ func testMain(m *testing.M) int {
 	testnmpath = filepath.Join(tmpDir, "testnm.exe")
 	gotool, err := testenv.GoTool()
 	if err != nil {
-		fmt.Printf("GoTool failed: ", err)
+		fmt.Println("GoTool failed:", err)
 		return 2
 	}
 	out, err := exec.Command(gotool, "build", "-o", testnmpath, "cmd/nm").CombinedOutput()
@@ -149,7 +149,7 @@ func testGoFile(t *testing.T, iscgo, isexternallinker bool) {
 	}
 	err = scanner.Err()
 	if err != nil {
-		t.Fatal("error reading nm output: %v", err)
+		t.Fatalf("error reading nm output: %v", err)
 	}
 	if len(names) > 0 {
 		t.Errorf("executable is missing %v symbols", names)
diff --git a/src/math/big/prime_test.go b/src/math/big/prime_test.go
index a2d3d18f8f..77605195e5 100644
--- a/src/math/big/prime_test.go
+++ b/src/math/big/prime_test.go
@@ -200,7 +200,7 @@ func testPseudoprimes(t *testing.T, name string, cond func(nat) bool, want []int
 		n[0] = Word(i)
 		pseudo := cond(n)
 		if pseudo && (len(want) == 0 || i != want[0]) {
-			t.Errorf("%s(%v, base=2) = %v, want false", name, i)
+			t.Errorf("%s(%v, base=2) = true, want false", name, i)
 		} else if !pseudo && len(want) >= 1 && i == want[0] {
 			t.Errorf("%s(%v, base=2) = false, want true", name, i)
 		}
