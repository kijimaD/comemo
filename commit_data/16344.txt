commit 13081942042636c6ebeee837a25977f7fdf65f1e
Author: Dmitriy Vyukov <dvyukov@google.com>
Date:   Mon May 20 08:17:21 2013 +0400

    runtime: zeroize g->fnstart to not prevent GC of the closure
    Fixes #5493.
    
    R=golang-dev, minux.ma, iant
    CC=golang-dev
    https://golang.org/cl/9557043
---
 src/pkg/runtime/proc.c      |  1 +
 test/fixedbugs/issue5493.go | 52 +++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 53 insertions(+)

diff --git a/src/pkg/runtime/proc.c b/src/pkg/runtime/proc.c
index 4875ad87c9..10170d874e 100644
--- a/src/pkg/runtime/proc.c
+++ b/src/pkg/runtime/proc.c
@@ -1232,6 +1232,7 @@ static void
 goexit0(G *gp)
 {
 	gp->status = Gdead;
+	gp->fnstart = nil;
 	gp->m = nil;
 	gp->lockedm = nil;
 	m->curg = nil;
diff --git a/test/fixedbugs/issue5493.go b/test/fixedbugs/issue5493.go
new file mode 100644
index 0000000000..fe571bc085
--- /dev/null
+++ b/test/fixedbugs/issue5493.go
@@ -0,0 +1,52 @@
+// run
+
+// Copyright 2013 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package main
+
+import (
+	"runtime"
+	"sync"
+	"sync/atomic"
+	"time"
+)
+
+const N = 10
+var count int64
+
+func run() error {
+	f1 := func() {}
+	f2 := func() {
+		func() {
+			f1()
+		}()
+	}
+	runtime.SetFinalizer(&f1, func(f *func()) {
+		atomic.AddInt64(&count, -1)
+	})
+	go f2()
+	return nil
+}
+
+func main() {
+	count = N
+	var wg sync.WaitGroup
+	wg.Add(N)
+	for i := 0; i < N; i++ {
+		go func() {
+			run()
+			wg.Done()
+		}()
+	}
+	wg.Wait()
+	for i := 0; i < 2*N; i++ {
+		time.Sleep(10 * time.Millisecond)
+		runtime.GC()
+	}
+	if count != 0 {
+		panic("not all finalizers are called")
+	}
+}
+
