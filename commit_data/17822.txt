commit 06ad3b2de1c6608d3ec3139f7daddb67dc03e1cc
Author: Russ Cox <rsc@golang.org>
Date:   Fri Oct 18 15:56:25 2013 -0400

    cmd/cgo: stop using compiler error message text to analyze C names
    
    The old approach to determining whether "name" was a type, constant,
    or expression was to compile the C program
    
            name;
    
    and scan the errors and warnings generated by the compiler.
    This requires looking for specific substrings in the errors and warnings,
    which ties the implementation to specific compiler versions.
    As compilers change their errors or drop warnings, cgo breaks.
    This happens slowly but it does happen.
    Clang in particular (now required on OS X) has a significant churn rate.
    
    The new approach compiles a slightly more complex program
    that is either valid C or not valid C depending on what kind of
    thing "name" is. It uses only the presence or absence of an error
    message on a particular line, not the error text itself. The program is:
    
            // error if and only if name is undeclared
            void f1(void) { typeof(name) *x; }
    
            // error if and only if name is not a type
            void f2(void) { name *x; }
    
            // error if and only if name is not an integer constant
            void f3(void) { enum { x = (name)*1 }; }
    
    I had not been planning to do this until Go 1.3, because it is a
    non-trivial change, but it fixes a real Xcode 5 problem in Go 1.2,
    and the new code is easier to understand than the old code.
    It should be significantly more robust.
    
    Fixes #6596.
    Fixes #6612.
    
    R=golang-dev, r, james, iant
    CC=golang-dev
    https://golang.org/cl/15070043

 misc/cgo/test/cgo_test.go  |   1 +
 misc/cgo/test/issue6612.go |  93 ++++++++++++++++++
 src/cmd/cgo/doc.go         |  47 +++++-----
 src/cmd/cgo/gcc.go         | 229 +++++++++++++++++++++------------------------
 4 files changed, 225 insertions(+), 145 deletions(-)
