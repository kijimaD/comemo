commit 8cbb5d03bf882cfcfa08f4313219e4fc68db7517
Author: Ian Lance Taylor <iant@golang.org>
Date:   Sun May 31 11:18:52 2009 -0700

    Adjust expected errors to work with gccgo.
    
    The change to assign.go is because the gcc testsuite fails to
    handle .* in a normal way: it matches against the entire
    compiler output, not just a single line.
    
    assign.go:15:6: error: incompatible types in assignment (implicit assignment of 'sync.Mutex' hidden field 'key')
    assign.go:19:6: error: incompatible types in assignment (implicit assignment of 'sync.Mutex' hidden field 'key')
    assign.go:23:6: error: incompatible types in assignment (implicit assignment of 'sync.Mutex' hidden field 'key')
    assign.go:27:6: error: incompatible types in assignment (implicit assignment of 'sync.Mutex' hidden field 'key')
    
    chan/perm.go:14:5: error: incompatible types in assignment
    chan/perm.go:15:5: error: incompatible types in assignment
    chan/perm.go:16:6: error: incompatible types in assignment
    chan/perm.go:17:6: error: incompatible types in assignment
    chan/perm.go:24:7: error: invalid send on receive-only channel
    chan/perm.go:25:12: error: invalid send on receive-only channel
    chan/perm.go:31:4: error: invalid receive on send-only channel
    chan/perm.go:32:9: error: invalid receive on send-only channel
    chan/perm.go:38:2: error: invalid send on receive-only channel
    chan/perm.go:42:2: error: invalid receive on send-only channel
    
    initializerr.go:14:17: error: reference to undefined variable 'X'
    initializerr.go:14:19: error: mixture of field and value initializers
    initializerr.go:15:26: error: duplicate value for field 'Y'
    initializerr.go:16:10: error: too many values in struct composite literal
    initializerr.go:18:19: error: index expression is not integer constant
    initializerr.go:17:11: error: too many elements in composite literal
    
    R=rsc
    DELTA=12  (0 added, 0 deleted, 12 changed)
    OCL=29657
    CL=29665
---
 test/assign.go       | 8 ++++----
 test/chan/perm.go    | 8 ++++----
 test/golden.out      | 2 +-
 test/initializerr.go | 6 +++---
 4 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/test/assign.go b/test/assign.go
index a98b7b75a0..9fe9ea0791 100644
--- a/test/assign.go
+++ b/test/assign.go
@@ -16,18 +16,18 @@ type T struct {
 func main() {
 	{
 		var x, y sync.Mutex;
-		x = y;	// ERROR "assignment.*Mutex"
+		x = y;	// ERROR "assignment\[ -~\]*Mutex"
 	}
 	{
 		var x, y T;
-		x = y;	// ERROR "assignment.*Mutex"
+		x = y;	// ERROR "assignment\[ -~\]*Mutex"
 	}
 	{
 		var x, y [2]sync.Mutex;
-		x = y;	// ERROR "assignment.*Mutex"
+		x = y;	// ERROR "assignment\[ -~\]*Mutex"
 	}
 	{
 		var x, y [2]T;
-		x = y;	// ERROR "assignment.*Mutex"
+		x = y;	// ERROR "assignment\[ -~\]*Mutex"
 	}
 }
diff --git a/test/chan/perm.go b/test/chan/perm.go
index 31ab840085..cdbef6246c 100644
--- a/test/chan/perm.go
+++ b/test/chan/perm.go
@@ -15,10 +15,10 @@ var (
 func main() {
 	cr = c;		// ok
 	cs = c;		// ok
-	c = cr;		// ERROR "illegal types"
-	c = cs;		// ERROR "illegal types"
-	cr = cs;	// ERROR "illegal types"
-	cs = cr;	// ERROR "illegal types"
+	c = cr;		// ERROR "illegal types|incompatible"
+	c = cs;		// ERROR "illegal types|incompatible"
+	cr = cs;	// ERROR "illegal types|incompatible"
+	cs = cr;	// ERROR "illegal types|incompatible"
 
 	c <- 0;		// ok
 	ok := c <- 0;	// ok
diff --git a/test/golden.out b/test/golden.out
index b5dbddffe6..131fc895b9 100644
--- a/test/golden.out
+++ b/test/golden.out
@@ -27,7 +27,7 @@ panic PC=xxx
 hello, world
 
 =========== ./initializerr.go
-BUG: errchk: ./initializerr.go:17: missing expected error: 'index'
+BUG: errchk: ./initializerr.go:17: missing expected error: 'index|too many'
 
 =========== ./peano.go
 0! = 1
diff --git a/test/initializerr.go b/test/initializerr.go
index 2700ba097b..b0366dddec 100644
--- a/test/initializerr.go
+++ b/test/initializerr.go
@@ -15,10 +15,10 @@ type T struct {
 }
 
 var x = 1
-var a1 = S { 0, X: 1 };	// ERROR "mixture"
+var a1 = S { 0, X: 1 };	// ERROR "mixture|undefined"
 var a2 = S { Y: 3, Z: 2, Y: 3 }; // ERROR "duplicate"
-var a3 = T { 1, 2, 3, 4, 5, 6 };	// ERROR "convert"
-var a4 = [5]byte{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }	// ERROR "index"
+var a3 = T { 1, 2, 3, 4, 5, 6 };	// ERROR "convert|too many"
+var a4 = [5]byte{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }	// ERROR "index|too many"
 var a5 = []byte { x: 2 }	// ERROR "index"
 
 var ok1 = S { }	// should be ok
