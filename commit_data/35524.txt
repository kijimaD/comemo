commit eb5925f5ff6e3690ce2d9fa680829560cbb11970
Author: Daniel Martí <mvdan@mvdan.cc>
Date:   Mon Feb 19 21:03:12 2018 +0000

    text/template: remove associate's error return
    
    It's always nil, so simplify its signature. Found with unparam.
    
    Change-Id: I45dd0f868ec2f5de98a970776be686417c8d73b6
    Reviewed-on: https://go-review.googlesource.com/95235
    Run-TryBot: Daniel Martí <mvdan@mvdan.cc>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Ian Lance Taylor <iant@golang.org>
---
 src/text/template/template.go | 11 +++++------
 1 file changed, 5 insertions(+), 6 deletions(-)

diff --git a/src/text/template/template.go b/src/text/template/template.go
index 2246f676e6..9ca0705ecc 100644
--- a/src/text/template/template.go
+++ b/src/text/template/template.go
@@ -125,9 +125,8 @@ func (t *Template) AddParseTree(name string, tree *parse.Tree) (*Template, error
 		nt = t.New(name)
 	}
 	// Even if nt == t, we need to install it in the common.tmpl map.
-	if replace, err := t.associate(nt, tree); err != nil {
-		return nil, err
-	} else if replace || nt.Tree == nil {
+	replace := t.associate(nt, tree)
+	if replace || nt.Tree == nil {
 		nt.Tree = tree
 	}
 	return nt, nil
@@ -212,15 +211,15 @@ func (t *Template) Parse(text string) (*Template, error) {
 // associate installs the new template into the group of templates associated
 // with t. The two are already known to share the common structure.
 // The boolean return value reports whether to store this tree as t.Tree.
-func (t *Template) associate(new *Template, tree *parse.Tree) (bool, error) {
+func (t *Template) associate(new *Template, tree *parse.Tree) bool {
 	if new.common != t.common {
 		panic("internal error: associate not common")
 	}
 	if old := t.tmpl[new.name]; old != nil && parse.IsEmptyTree(tree.Root) && old.Tree != nil {
 		// If a template by that name exists,
 		// don't replace it with an empty template.
-		return false, nil
+		return false
 	}
 	t.tmpl[new.name] = new
-	return true, nil
+	return true
 }
