commit 9006f4913017627f4615f23bb2095e94dddee3b1
Author: Russ Cox <rsc@golang.org>
Date:   Mon Oct 5 16:45:24 2009 -0700

    comment tweaks; implement precise name
    character sets.
    
    R=r
    DELTA=339  (257 added, 1 deleted, 81 changed)
    OCL=35344
    CL=35346
---
 src/pkg/xml/read.go |   2 +-
 src/pkg/xml/xml.go  | 406 ++++++++++++++++++++++++++++++++++++++++++----------
 2 files changed, 332 insertions(+), 76 deletions(-)

diff --git a/src/pkg/xml/read.go b/src/pkg/xml/read.go
index c6f81ee5ca..025890b8fd 100644
--- a/src/pkg/xml/read.go
+++ b/src/pkg/xml/read.go
@@ -218,7 +218,7 @@ func (p *Parser) unmarshal(val reflect.Value, start *StartElement) os.Error {
 		}
 
 		// Assign attributes.
-		// Also, do we need to save character data?
+		// Also, determine whether we need to save character data.
 		for i, n := 0, typ.NumField(); i < n; i++ {
 			f := typ.Field(i);
 			switch f.Tag {
diff --git a/src/pkg/xml/xml.go b/src/pkg/xml/xml.go
index 63723f12c8..224d607430 100644
--- a/src/pkg/xml/xml.go
+++ b/src/pkg/xml/xml.go
@@ -6,6 +6,10 @@
 // understands XML name spaces.
 package xml
 
+// References:
+//    Annotated XML spec: http://www.xml.com/axml/testaxml.htm
+//    XML name spaces: http://www.w3.org/TR/REC-xml-names/
+
 // TODO(rsc):
 //	Test error handling.
 //	Expose parser line number in errors.
@@ -720,14 +724,15 @@ func (p *Parser) nsname() (name Name, ok bool) {
 }
 
 // Get name: /first(first|second)*/
-// Unlike most routines, do not set p.err if the name is
-// merely malformed.  Let the caller provide better context.
+// Do not set p.err if the name is missing: let the caller provide better context.
 func (p *Parser) name() (s string, ok bool) {
 	var b byte;
 	if b, ok = p.getc(); !ok {
 		return;
 	}
-	if b < utf8.RuneSelf && !isFirst(b) {
+
+	// As a first approximation, we gather the bytes [A-Za-z_:.-\x80-\xFF]*
+	if b < utf8.RuneSelf && !isNameByte(b) {
 		p.ungetc(b);
 		return;
 	}
@@ -737,88 +742,339 @@ func (p *Parser) name() (s string, ok bool) {
 		if b, ok = p.getc(); !ok {
 			return;
 		}
-		if b < utf8.RuneSelf && !isFirst(b) && !isSecond(b) {
+		if b < utf8.RuneSelf && !isNameByte(b) {
 			p.ungetc(b);
 			break;
 		}
 		p.buf.WriteByte(b);
 	}
-	return p.buf.String(), true;
+
+	// Then we check the characters.
+	s = p.buf.String();
+	for i, c := range s {
+		if !unicode.Is(first, c) && (i == 0 || !unicode.Is(second, c)) {
+			p.err = SyntaxError("invalid XML name: " + s);
+			return "", false;
+		}
+	}
+	return s, true;
 }
 
-// We allow any Unicode char >= 0x80, but the XML spec is pickier:
-// the exact character sets are listed in the comment at the end of the file.
-func isFirst(c byte) bool {
+func isNameByte(c byte) bool {
 	return 'A' <= c && c <= 'Z' ||
 		'a' <= c && c <= 'z' ||
-		c == '_' ||
-		c == ':';
+		c == '_' || c == ':' || c == '.' || c == '-';
 }
 
-func isSecond(c byte) bool {
-	return c == '.' || c == '-';
-}
+// These tables were generated by cut and paste from Appendix B of
+// the XML spec at http://www.xml.com/axml/testaxml.htm
+// and then reformatting.  First corresponds to (Letter | '_' | ':')
+// and second corresponds to NameChar.
 
-// The precise form of an XML name is /first(first|second)*/, where
-// first is one of these characters:
-//
-// 003A        04D0-04EB   0A59-0A5C   0C35-0C39   0F49-0F69   1E00-1E9B
-// 0041-005A   04EE-04F5   0A5E        0C60-0C61   10A0-10C5   1EA0-1EF9
-// 005F        04F8-04F9   0A72-0A74   0C85-0C8C   10D0-10F6   1F00-1F15
-// 0061-007A   0531-0556   0A85-0A8B   0C8E-0C90   1100        1F18-1F1D
-// 00C0-00D6   0559        0A8D        0C92-0CA8   1102-1103   1F20-1F45
-// 00D8-00F6   0561-0586   0A8F-0A91   0CAA-0CB3   1105-1107   1F48-1F4D
-// 00F8-00FF   05D0-05EA   0A93-0AA8   0CB5-0CB9   1109        1F50-1F57
-// 0100-0131   05F0-05F2   0AAA-0AB0   0CDE        110B-110C   1F59
-// 0134-013E   0621-063A   0AB2-0AB3   0CE0-0CE1   110E-1112   1F5B
-// 0141-0148   0641-064A   0AB5-0AB9   0D05-0D0C   113C        1F5D
-// 014A-017E   0671-06B7   0ABD        0D0E-0D10   113E        1F5F-1F7D
-// 0180-01C3   06BA-06BE   0AE0        0D12-0D28   1140        1F80-1FB4
-// 01CD-01F0   06C0-06CE   0B05-0B0C   0D2A-0D39   114C        1FB6-1FBC
-// 01F4-01F5   06D0-06D3   0B0F-0B10   0D60-0D61   114E        1FBE
-// 01FA-0217   06D5        0B13-0B28   0E01-0E2E   1150        1FC2-1FC4
-// 0250-02A8   06E5-06E6   0B2A-0B30   0E30        1154-1155   1FC6-1FCC
-// 02BB-02C1   0905-0939   0B32-0B33   0E32-0E33   1159        1FD0-1FD3
-// 0386        093D        0B36-0B39   0E40-0E45   115F-1161   1FD6-1FDB
-// 0388-038A   0958-0961   0B3D        0E81-0E82   1163        1FE0-1FEC
-// 038C        0985-098C   0B5C-0B5D   0E84        1165        1FF2-1FF4
-// 038E-03A1   098F-0990   0B5F-0B61   0E87-0E88   1167        1FF6-1FFC
-// 03A3-03CE   0993-09A8   0B85-0B8A   0E8A        1169        2126
-// 03D0-03D6   09AA-09B0   0B8E-0B90   0E8D        116D-116E   212A-212B
-// 03DA        09B2        0B92-0B95   0E94-0E97   1172-1173   212E
-// 03DC        09B6-09B9   0B99-0B9A   0E99-0E9F   1175        2180-2182
-// 03DE        09DC-09DD   0B9C        0EA1-0EA3   119E        3007
-// 03E0        09DF-09E1   0B9E-0B9F   0EA5        11A8        3021-3029
-// 03E2-03F3   09F0-09F1   0BA3-0BA4   0EA7        11AB        3041-3094
-// 0401-040C   0A05-0A0A   0BA8-0BAA   0EAA-0EAB   11AE-11AF   30A1-30FA
-// 040E-044F   0A0F-0A10   0BAE-0BB5   0EAD-0EAE   11B7-11B8   3105-312C
-// 0451-045C   0A13-0A28   0BB7-0BB9   0EB0        11BA        4E00-9FA5
-// 045E-0481   0A2A-0A30   0C05-0C0C   0EB2-0EB3   11BC-11C2   AC00-D7A3
-// 0490-04C4   0A32-0A33   0C0E-0C10   0EBD        11EB
-// 04C7-04C8   0A35-0A36   0C12-0C28   0EC0-0EC4   11F0
-// 04CB-04CC   0A38-0A39   0C2A-0C33   0F40-0F47   11F9
-//
-// and a second is one of these:
-//
-// 002D        06DD-06DF   09E6-09EF   0B56-0B57   0D3E-0D43   0F3E
-// 002E        06E0-06E4   0A02        0B66-0B6F   0D46-0D48   0F3F
-// 0030-0039   06E7-06E8   0A3C        0B82-0B83   0D4A-0D4D   0F71-0F84
-// 00B7        06EA-06ED   0A3E        0BBE-0BC2   0D57        0F86-0F8B
-// 02D0        06F0-06F9   0A3F        0BC6-0BC8   0D66-0D6F   0F90-0F95
-// 02D1        0901-0903   0A40-0A42   0BCA-0BCD   0E31        0F97
-// 0300-0345   093C        0A47-0A48   0BD7        0E34-0E3A   0F99-0FAD
-// 0360-0361   093E-094C   0A4B-0A4D   0BE7-0BEF   0E46        0FB1-0FB7
-// 0387        094D        0A66-0A6F   0C01-0C03   0E47-0E4E   0FB9
-// 0483-0486   0951-0954   0A70-0A71   0C3E-0C44   0E50-0E59   20D0-20DC
-// 0591-05A1   0962-0963   0A81-0A83   0C46-0C48   0EB1        20E1
-// 05A3-05B9   0966-096F   0ABC        0C4A-0C4D   0EB4-0EB9   3005
-// 05BB-05BD   0981-0983   0ABE-0AC5   0C55-0C56   0EBB-0EBC   302A-302F
-// 05BF        09BC        0AC7-0AC9   0C66-0C6F   0EC6        3031-3035
-// 05C1-05C2   09BE        0ACB-0ACD   0C82-0C83   0EC8-0ECD   3099
-// 05C4        09BF        0AE6-0AEF   0CBE-0CC4   0ED0-0ED9   309A
-// 0640        09C0-09C4   0B01-0B03   0CC6-0CC8   0F18-0F19   309D-309E
-// 064B-0652   09C7-09C8   0B3C        0CCA-0CCD   0F20-0F29   30FC-30FE
-// 0660-0669   09CB-09CD   0B3E-0B43   0CD5-0CD6   0F35
-// 0670        09D7        0B47-0B48   0CE6-0CEF   0F37
-// 06D6-06DC   09E2-09E3   0B4B-0B4D   0D02-0D03   0F39
+var first = []unicode.Range{
+	unicode.Range{0x003A, 0x003A, 1},
+	unicode.Range{0x0041, 0x005A, 1},
+	unicode.Range{0x005F, 0x005F, 1},
+	unicode.Range{0x0061, 0x007A, 1},
+	unicode.Range{0x00C0, 0x00D6, 1},
+	unicode.Range{0x00D8, 0x00F6, 1},
+	unicode.Range{0x00F8, 0x00FF, 1},
+	unicode.Range{0x0100, 0x0131, 1},
+	unicode.Range{0x0134, 0x013E, 1},
+	unicode.Range{0x0141, 0x0148, 1},
+	unicode.Range{0x014A, 0x017E, 1},
+	unicode.Range{0x0180, 0x01C3, 1},
+	unicode.Range{0x01CD, 0x01F0, 1},
+	unicode.Range{0x01F4, 0x01F5, 1},
+	unicode.Range{0x01FA, 0x0217, 1},
+	unicode.Range{0x0250, 0x02A8, 1},
+	unicode.Range{0x02BB, 0x02C1, 1},
+	unicode.Range{0x0386, 0x0386, 1},
+	unicode.Range{0x0388, 0x038A, 1},
+	unicode.Range{0x038C, 0x038C, 1},
+	unicode.Range{0x038E, 0x03A1, 1},
+	unicode.Range{0x03A3, 0x03CE, 1},
+	unicode.Range{0x03D0, 0x03D6, 1},
+	unicode.Range{0x03DA, 0x03E0, 2},
+	unicode.Range{0x03E2, 0x03F3, 1},
+	unicode.Range{0x0401, 0x040C, 1},
+	unicode.Range{0x040E, 0x044F, 1},
+	unicode.Range{0x0451, 0x045C, 1},
+	unicode.Range{0x045E, 0x0481, 1},
+	unicode.Range{0x0490, 0x04C4, 1},
+	unicode.Range{0x04C7, 0x04C8, 1},
+	unicode.Range{0x04CB, 0x04CC, 1},
+	unicode.Range{0x04D0, 0x04EB, 1},
+	unicode.Range{0x04EE, 0x04F5, 1},
+	unicode.Range{0x04F8, 0x04F9, 1},
+	unicode.Range{0x0531, 0x0556, 1},
+	unicode.Range{0x0559, 0x0559, 1},
+	unicode.Range{0x0561, 0x0586, 1},
+	unicode.Range{0x05D0, 0x05EA, 1},
+	unicode.Range{0x05F0, 0x05F2, 1},
+	unicode.Range{0x0621, 0x063A, 1},
+	unicode.Range{0x0641, 0x064A, 1},
+	unicode.Range{0x0671, 0x06B7, 1},
+	unicode.Range{0x06BA, 0x06BE, 1},
+	unicode.Range{0x06C0, 0x06CE, 1},
+	unicode.Range{0x06D0, 0x06D3, 1},
+	unicode.Range{0x06D5, 0x06D5, 1},
+	unicode.Range{0x06E5, 0x06E6, 1},
+	unicode.Range{0x0905, 0x0939, 1},
+	unicode.Range{0x093D, 0x093D, 1},
+	unicode.Range{0x0958, 0x0961, 1},
+	unicode.Range{0x0985, 0x098C, 1},
+	unicode.Range{0x098F, 0x0990, 1},
+	unicode.Range{0x0993, 0x09A8, 1},
+	unicode.Range{0x09AA, 0x09B0, 1},
+	unicode.Range{0x09B2, 0x09B2, 1},
+	unicode.Range{0x09B6, 0x09B9, 1},
+	unicode.Range{0x09DC, 0x09DD, 1},
+	unicode.Range{0x09DF, 0x09E1, 1},
+	unicode.Range{0x09F0, 0x09F1, 1},
+	unicode.Range{0x0A05, 0x0A0A, 1},
+	unicode.Range{0x0A0F, 0x0A10, 1},
+	unicode.Range{0x0A13, 0x0A28, 1},
+	unicode.Range{0x0A2A, 0x0A30, 1},
+	unicode.Range{0x0A32, 0x0A33, 1},
+	unicode.Range{0x0A35, 0x0A36, 1},
+	unicode.Range{0x0A38, 0x0A39, 1},
+	unicode.Range{0x0A59, 0x0A5C, 1},
+	unicode.Range{0x0A5E, 0x0A5E, 1},
+	unicode.Range{0x0A72, 0x0A74, 1},
+	unicode.Range{0x0A85, 0x0A8B, 1},
+	unicode.Range{0x0A8D, 0x0A8D, 1},
+	unicode.Range{0x0A8F, 0x0A91, 1},
+	unicode.Range{0x0A93, 0x0AA8, 1},
+	unicode.Range{0x0AAA, 0x0AB0, 1},
+	unicode.Range{0x0AB2, 0x0AB3, 1},
+	unicode.Range{0x0AB5, 0x0AB9, 1},
+	unicode.Range{0x0ABD, 0x0AE0, 0x23},
+	unicode.Range{0x0B05, 0x0B0C, 1},
+	unicode.Range{0x0B0F, 0x0B10, 1},
+	unicode.Range{0x0B13, 0x0B28, 1},
+	unicode.Range{0x0B2A, 0x0B30, 1},
+	unicode.Range{0x0B32, 0x0B33, 1},
+	unicode.Range{0x0B36, 0x0B39, 1},
+	unicode.Range{0x0B3D, 0x0B3D, 1},
+	unicode.Range{0x0B5C, 0x0B5D, 1},
+	unicode.Range{0x0B5F, 0x0B61, 1},
+	unicode.Range{0x0B85, 0x0B8A, 1},
+	unicode.Range{0x0B8E, 0x0B90, 1},
+	unicode.Range{0x0B92, 0x0B95, 1},
+	unicode.Range{0x0B99, 0x0B9A, 1},
+	unicode.Range{0x0B9C, 0x0B9C, 1},
+	unicode.Range{0x0B9E, 0x0B9F, 1},
+	unicode.Range{0x0BA3, 0x0BA4, 1},
+	unicode.Range{0x0BA8, 0x0BAA, 1},
+	unicode.Range{0x0BAE, 0x0BB5, 1},
+	unicode.Range{0x0BB7, 0x0BB9, 1},
+	unicode.Range{0x0C05, 0x0C0C, 1},
+	unicode.Range{0x0C0E, 0x0C10, 1},
+	unicode.Range{0x0C12, 0x0C28, 1},
+	unicode.Range{0x0C2A, 0x0C33, 1},
+	unicode.Range{0x0C35, 0x0C39, 1},
+	unicode.Range{0x0C60, 0x0C61, 1},
+	unicode.Range{0x0C85, 0x0C8C, 1},
+	unicode.Range{0x0C8E, 0x0C90, 1},
+	unicode.Range{0x0C92, 0x0CA8, 1},
+	unicode.Range{0x0CAA, 0x0CB3, 1},
+	unicode.Range{0x0CB5, 0x0CB9, 1},
+	unicode.Range{0x0CDE, 0x0CDE, 1},
+	unicode.Range{0x0CE0, 0x0CE1, 1},
+	unicode.Range{0x0D05, 0x0D0C, 1},
+	unicode.Range{0x0D0E, 0x0D10, 1},
+	unicode.Range{0x0D12, 0x0D28, 1},
+	unicode.Range{0x0D2A, 0x0D39, 1},
+	unicode.Range{0x0D60, 0x0D61, 1},
+	unicode.Range{0x0E01, 0x0E2E, 1},
+	unicode.Range{0x0E30, 0x0E30, 1},
+	unicode.Range{0x0E32, 0x0E33, 1},
+	unicode.Range{0x0E40, 0x0E45, 1},
+	unicode.Range{0x0E81, 0x0E82, 1},
+	unicode.Range{0x0E84, 0x0E84, 1},
+	unicode.Range{0x0E87, 0x0E88, 1},
+	unicode.Range{0x0E8A, 0x0E8D, 3},
+	unicode.Range{0x0E94, 0x0E97, 1},
+	unicode.Range{0x0E99, 0x0E9F, 1},
+	unicode.Range{0x0EA1, 0x0EA3, 1},
+	unicode.Range{0x0EA5, 0x0EA7, 2},
+	unicode.Range{0x0EAA, 0x0EAB, 1},
+	unicode.Range{0x0EAD, 0x0EAE, 1},
+	unicode.Range{0x0EB0, 0x0EB0, 1},
+	unicode.Range{0x0EB2, 0x0EB3, 1},
+	unicode.Range{0x0EBD, 0x0EBD, 1},
+	unicode.Range{0x0EC0, 0x0EC4, 1},
+	unicode.Range{0x0F40, 0x0F47, 1},
+	unicode.Range{0x0F49, 0x0F69, 1},
+	unicode.Range{0x10A0, 0x10C5, 1},
+	unicode.Range{0x10D0, 0x10F6, 1},
+	unicode.Range{0x1100, 0x1100, 1},
+	unicode.Range{0x1102, 0x1103, 1},
+	unicode.Range{0x1105, 0x1107, 1},
+	unicode.Range{0x1109, 0x1109, 1},
+	unicode.Range{0x110B, 0x110C, 1},
+	unicode.Range{0x110E, 0x1112, 1},
+	unicode.Range{0x113C, 0x1140, 2},
+	unicode.Range{0x114C, 0x1150, 2},
+	unicode.Range{0x1154, 0x1155, 1},
+	unicode.Range{0x1159, 0x1159, 1},
+	unicode.Range{0x115F, 0x1161, 1},
+	unicode.Range{0x1163, 0x1169, 2},
+	unicode.Range{0x116D, 0x116E, 1},
+	unicode.Range{0x1172, 0x1173, 1},
+	unicode.Range{0x1175, 0x119E, 0x119E-0x1175},
+	unicode.Range{0x11A8, 0x11AB, 0x11AB-0x11A8},
+	unicode.Range{0x11AE, 0x11AF, 1},
+	unicode.Range{0x11B7, 0x11B8, 1},
+	unicode.Range{0x11BA, 0x11BA, 1},
+	unicode.Range{0x11BC, 0x11C2, 1},
+	unicode.Range{0x11EB, 0x11F0, 0x11F0-0x11EB},
+	unicode.Range{0x11F9, 0x11F9, 1},
+	unicode.Range{0x1E00, 0x1E9B, 1},
+	unicode.Range{0x1EA0, 0x1EF9, 1},
+	unicode.Range{0x1F00, 0x1F15, 1},
+	unicode.Range{0x1F18, 0x1F1D, 1},
+	unicode.Range{0x1F20, 0x1F45, 1},
+	unicode.Range{0x1F48, 0x1F4D, 1},
+	unicode.Range{0x1F50, 0x1F57, 1},
+	unicode.Range{0x1F59, 0x1F5B, 0x1F5B-0x1F59},
+	unicode.Range{0x1F5D, 0x1F5D, 1},
+	unicode.Range{0x1F5F, 0x1F7D, 1},
+	unicode.Range{0x1F80, 0x1FB4, 1},
+	unicode.Range{0x1FB6, 0x1FBC, 1},
+	unicode.Range{0x1FBE, 0x1FBE, 1},
+	unicode.Range{0x1FC2, 0x1FC4, 1},
+	unicode.Range{0x1FC6, 0x1FCC, 1},
+	unicode.Range{0x1FD0, 0x1FD3, 1},
+	unicode.Range{0x1FD6, 0x1FDB, 1},
+	unicode.Range{0x1FE0, 0x1FEC, 1},
+	unicode.Range{0x1FF2, 0x1FF4, 1},
+	unicode.Range{0x1FF6, 0x1FFC, 1},
+	unicode.Range{0x2126, 0x2126, 1},
+	unicode.Range{0x212A, 0x212B, 1},
+	unicode.Range{0x212E, 0x212E, 1},
+	unicode.Range{0x2180, 0x2182, 1},
+	unicode.Range{0x3007, 0x3007, 1},
+	unicode.Range{0x3021, 0x3029, 1},
+	unicode.Range{0x3041, 0x3094, 1},
+	unicode.Range{0x30A1, 0x30FA, 1},
+	unicode.Range{0x3105, 0x312C, 1},
+	unicode.Range{0x4E00, 0x9FA5, 1},
+	unicode.Range{0xAC00, 0xD7A3, 1},
+}
 
+var second = []unicode.Range{
+	unicode.Range{0x002D, 0x002E, 1},
+	unicode.Range{0x0030, 0x0039, 1},
+	unicode.Range{0x00B7, 0x00B7, 1},
+	unicode.Range{0x02D0, 0x02D1, 1},
+	unicode.Range{0x0300, 0x0345, 1},
+	unicode.Range{0x0360, 0x0361, 1},
+	unicode.Range{0x0387, 0x0387, 1},
+	unicode.Range{0x0483, 0x0486, 1},
+	unicode.Range{0x0591, 0x05A1, 1},
+	unicode.Range{0x05A3, 0x05B9, 1},
+	unicode.Range{0x05BB, 0x05BD, 1},
+	unicode.Range{0x05BF, 0x05BF, 1},
+	unicode.Range{0x05C1, 0x05C2, 1},
+	unicode.Range{0x05C4, 0x0640, 0x0640-0x05C4},
+	unicode.Range{0x064B, 0x0652, 1},
+	unicode.Range{0x0660, 0x0669, 1},
+	unicode.Range{0x0670, 0x0670, 1},
+	unicode.Range{0x06D6, 0x06DC, 1},
+	unicode.Range{0x06DD, 0x06DF, 1},
+	unicode.Range{0x06E0, 0x06E4, 1},
+	unicode.Range{0x06E7, 0x06E8, 1},
+	unicode.Range{0x06EA, 0x06ED, 1},
+	unicode.Range{0x06F0, 0x06F9, 1},
+	unicode.Range{0x0901, 0x0903, 1},
+	unicode.Range{0x093C, 0x093C, 1},
+	unicode.Range{0x093E, 0x094C, 1},
+	unicode.Range{0x094D, 0x094D, 1},
+	unicode.Range{0x0951, 0x0954, 1},
+	unicode.Range{0x0962, 0x0963, 1},
+	unicode.Range{0x0966, 0x096F, 1},
+	unicode.Range{0x0981, 0x0983, 1},
+	unicode.Range{0x09BC, 0x09BC, 1},
+	unicode.Range{0x09BE, 0x09BF, 1},
+	unicode.Range{0x09C0, 0x09C4, 1},
+	unicode.Range{0x09C7, 0x09C8, 1},
+	unicode.Range{0x09CB, 0x09CD, 1},
+	unicode.Range{0x09D7, 0x09D7, 1},
+	unicode.Range{0x09E2, 0x09E3, 1},
+	unicode.Range{0x09E6, 0x09EF, 1},
+	unicode.Range{0x0A02, 0x0A3C, 0x3A},
+	unicode.Range{0x0A3E, 0x0A3F, 1},
+	unicode.Range{0x0A40, 0x0A42, 1},
+	unicode.Range{0x0A47, 0x0A48, 1},
+	unicode.Range{0x0A4B, 0x0A4D, 1},
+	unicode.Range{0x0A66, 0x0A6F, 1},
+	unicode.Range{0x0A70, 0x0A71, 1},
+	unicode.Range{0x0A81, 0x0A83, 1},
+	unicode.Range{0x0ABC, 0x0ABC, 1},
+	unicode.Range{0x0ABE, 0x0AC5, 1},
+	unicode.Range{0x0AC7, 0x0AC9, 1},
+	unicode.Range{0x0ACB, 0x0ACD, 1},
+	unicode.Range{0x0AE6, 0x0AEF, 1},
+	unicode.Range{0x0B01, 0x0B03, 1},
+	unicode.Range{0x0B3C, 0x0B3C, 1},
+	unicode.Range{0x0B3E, 0x0B43, 1},
+	unicode.Range{0x0B47, 0x0B48, 1},
+	unicode.Range{0x0B4B, 0x0B4D, 1},
+	unicode.Range{0x0B56, 0x0B57, 1},
+	unicode.Range{0x0B66, 0x0B6F, 1},
+	unicode.Range{0x0B82, 0x0B83, 1},
+	unicode.Range{0x0BBE, 0x0BC2, 1},
+	unicode.Range{0x0BC6, 0x0BC8, 1},
+	unicode.Range{0x0BCA, 0x0BCD, 1},
+	unicode.Range{0x0BD7, 0x0BD7, 1},
+	unicode.Range{0x0BE7, 0x0BEF, 1},
+	unicode.Range{0x0C01, 0x0C03, 1},
+	unicode.Range{0x0C3E, 0x0C44, 1},
+	unicode.Range{0x0C46, 0x0C48, 1},
+	unicode.Range{0x0C4A, 0x0C4D, 1},
+	unicode.Range{0x0C55, 0x0C56, 1},
+	unicode.Range{0x0C66, 0x0C6F, 1},
+	unicode.Range{0x0C82, 0x0C83, 1},
+	unicode.Range{0x0CBE, 0x0CC4, 1},
+	unicode.Range{0x0CC6, 0x0CC8, 1},
+	unicode.Range{0x0CCA, 0x0CCD, 1},
+	unicode.Range{0x0CD5, 0x0CD6, 1},
+	unicode.Range{0x0CE6, 0x0CEF, 1},
+	unicode.Range{0x0D02, 0x0D03, 1},
+	unicode.Range{0x0D3E, 0x0D43, 1},
+	unicode.Range{0x0D46, 0x0D48, 1},
+	unicode.Range{0x0D4A, 0x0D4D, 1},
+	unicode.Range{0x0D57, 0x0D57, 1},
+	unicode.Range{0x0D66, 0x0D6F, 1},
+	unicode.Range{0x0E31, 0x0E31, 1},
+	unicode.Range{0x0E34, 0x0E3A, 1},
+	unicode.Range{0x0E46, 0x0E46, 1},
+	unicode.Range{0x0E47, 0x0E4E, 1},
+	unicode.Range{0x0E50, 0x0E59, 1},
+	unicode.Range{0x0EB1, 0x0EB1, 1},
+	unicode.Range{0x0EB4, 0x0EB9, 1},
+	unicode.Range{0x0EBB, 0x0EBC, 1},
+	unicode.Range{0x0EC6, 0x0EC6, 1},
+	unicode.Range{0x0EC8, 0x0ECD, 1},
+	unicode.Range{0x0ED0, 0x0ED9, 1},
+	unicode.Range{0x0F18, 0x0F19, 1},
+	unicode.Range{0x0F20, 0x0F29, 1},
+	unicode.Range{0x0F35, 0x0F39, 2},
+	unicode.Range{0x0F3E, 0x0F3F, 1},
+	unicode.Range{0x0F71, 0x0F84, 1},
+	unicode.Range{0x0F86, 0x0F8B, 1},
+	unicode.Range{0x0F90, 0x0F95, 1},
+	unicode.Range{0x0F97, 0x0F97, 1},
+	unicode.Range{0x0F99, 0x0FAD, 1},
+	unicode.Range{0x0FB1, 0x0FB7, 1},
+	unicode.Range{0x0FB9, 0x0FB9, 1},
+	unicode.Range{0x20D0, 0x20DC, 1},
+	unicode.Range{0x20E1, 0x3005, 0x3005-0x20E1},
+	unicode.Range{0x302A, 0x302F, 1},
+	unicode.Range{0x3031, 0x3035, 1},
+	unicode.Range{0x3099, 0x309A, 1},
+	unicode.Range{0x309D, 0x309E, 1},
+	unicode.Range{0x30FC, 0x30FE, 1},
+}
