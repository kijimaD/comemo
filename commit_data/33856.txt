commit bc8bb5b27a5abe48fbfc79ae4a1ce4c87ca90bbc
Author: Ilya Tocar <ilya.tocar@intel.com>
Date:   Tue Sep 12 15:31:09 2017 -0500

    unicode: speed-up is16/is32
    
    Avoid division in common case. There are 5438 ranges in unicode/tables.go
    4110 of them have stride 1.
    Stride 1 case got significantly faster. Other stride is a bit slower.
    Measured by
    
    import (
            "testing"
            "unicode"
    )
    
    func BenchmarkDiv1(b *testing.B) {
            rtb := &unicode.RangeTable{
                    R16: []unicode.Range16{
                            {0xa800, 0xdfff, 1}, // or 3
                    },
            }
            for i := 0; i < b.N; i++ {
                    unicode.Is(rtb, rune(0xc700))
            }
    }
    
    Div1-6  15.6ns ± 1%   9.9ns ± 1%  -36.54%  (p=0.000 n=10+10)
    Div3-6  15.5ns ± 1%  16.1ns ± 1%   +3.67%  (p=0.000 n=10+10)
    
    Helps a bit with xml parsing from issue #21823
    
    XMLsax-6   30.9s ± 0%   29.6s ± 0%  -4.15%  (p=0.000 n=10+9)
    
    Change-Id: Ibac1a91d7b9474d0c134b0add83e56caa62daa20
    Reviewed-on: https://go-review.googlesource.com/63390
    Run-TryBot: Ilya Tocar <ilya.tocar@intel.com>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Ian Lance Taylor <iant@golang.org>
---
 src/unicode/letter.go | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/src/unicode/letter.go b/src/unicode/letter.go
index 90b0b414da..4d9fc67165 100644
--- a/src/unicode/letter.go
+++ b/src/unicode/letter.go
@@ -97,7 +97,7 @@ func is16(ranges []Range16, r uint16) bool {
 				return false
 			}
 			if r <= range_.Hi {
-				return (r-range_.Lo)%range_.Stride == 0
+				return range_.Stride == 1 || (r-range_.Lo)%range_.Stride == 0
 			}
 		}
 		return false
@@ -110,7 +110,7 @@ func is16(ranges []Range16, r uint16) bool {
 		m := lo + (hi-lo)/2
 		range_ := &ranges[m]
 		if range_.Lo <= r && r <= range_.Hi {
-			return (r-range_.Lo)%range_.Stride == 0
+			return range_.Stride == 1 || (r-range_.Lo)%range_.Stride == 0
 		}
 		if r < range_.Lo {
 			hi = m
@@ -130,7 +130,7 @@ func is32(ranges []Range32, r uint32) bool {
 				return false
 			}
 			if r <= range_.Hi {
-				return (r-range_.Lo)%range_.Stride == 0
+				return range_.Stride == 1 || (r-range_.Lo)%range_.Stride == 0
 			}
 		}
 		return false
@@ -143,7 +143,7 @@ func is32(ranges []Range32, r uint32) bool {
 		m := lo + (hi-lo)/2
 		range_ := ranges[m]
 		if range_.Lo <= r && r <= range_.Hi {
-			return (r-range_.Lo)%range_.Stride == 0
+			return range_.Stride == 1 || (r-range_.Lo)%range_.Stride == 0
 		}
 		if r < range_.Lo {
 			hi = m
