commit 6c4a8d195b627bf216c6cd22e8237c6faf99cad5
Author: Austin Clements <austin@google.com>
Date:   Fri Dec 16 15:56:13 2016 -0500

    runtime: don't hold global gcBitsArenas lock over allocation
    
    Currently, newArena holds the gcBitsArenas lock across allocating
    memory from the OS for a new gcBits arena. This is a global lock and
    allocating physical memory can be expensive, so this has the potential
    to cause high lock contention, especially since every single span
    sweep operation calls newArena (via newMarkBits).
    
    Improve the situation by temporarily dropping the lock across
    allocation. This means the caller now has to revalidate its
    assumptions after the lock is dropped, so this also factors out that
    code path and reinvokes it after the lock is acquired.
    
    Change-Id: I1113200a954ab4aad16b5071512583cfac744bdc
    Reviewed-on: https://go-review.googlesource.com/34594
    Run-TryBot: Austin Clements <austin@google.com>
    Reviewed-by: Rick Hudson <rlh@golang.org>

 src/runtime/mheap.go | 60 +++++++++++++++++++++++++++++++++++++++-------------
 1 file changed, 45 insertions(+), 15 deletions(-)
