commit c6611b2f7e31aa9152f9279fd9ba0343137af7c0
Author: Bryan C. Mills <bcmills@google.com>
Date:   Fri Feb 22 12:14:23 2019 -0500

    misc/cgo/stdio: fix tests in module mode
    
    Updates #30228
    
    Change-Id: I4d213c6fe68c47ccb877f13b55128e035f76a26b
    Reviewed-on: https://go-review.googlesource.com/c/163421
    Run-TryBot: Bryan C. Mills <bcmills@google.com>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Ian Lance Taylor <iant@golang.org>
---
 misc/cgo/stdio/overlaydir_test.go            | 81 ++++++++++++++++++++++++++++
 misc/cgo/stdio/stdio_test.go                 | 60 +++++++++++++++++++++
 misc/cgo/stdio/{ => testdata}/chain.go       |  2 +-
 misc/cgo/stdio/{ => testdata}/chain.out      |  0
 misc/cgo/stdio/{ => testdata}/fib.go         |  2 +-
 misc/cgo/stdio/{ => testdata}/fib.out        |  0
 misc/cgo/stdio/{ => testdata}/hello.go       |  2 +-
 misc/cgo/stdio/{ => testdata}/hello.out      |  0
 misc/cgo/stdio/{ => testdata}/run.out        |  0
 misc/cgo/stdio/{ => testdata/stdio}/file.go  |  0
 misc/cgo/stdio/{ => testdata/stdio}/stdio.go |  0
 src/cmd/dist/test.go                         |  2 +-
 12 files changed, 145 insertions(+), 4 deletions(-)

diff --git a/misc/cgo/stdio/overlaydir_test.go b/misc/cgo/stdio/overlaydir_test.go
new file mode 100644
index 0000000000..8a8dcdb3a5
--- /dev/null
+++ b/misc/cgo/stdio/overlaydir_test.go
@@ -0,0 +1,81 @@
+// Copyright 2019 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package stdio_test
+
+import (
+	"io"
+	"os"
+	"path/filepath"
+	"strings"
+)
+
+// overlayDir makes a minimal-overhead copy of srcRoot in which new files may be added.
+//
+// TODO: Once we no longer need to support the misc module in GOPATH mode,
+// factor this function out into a package to reduce duplication.
+func overlayDir(dstRoot, srcRoot string) error {
+	dstRoot = filepath.Clean(dstRoot)
+	if err := os.MkdirAll(dstRoot, 0777); err != nil {
+		return err
+	}
+
+	symBase, err := filepath.Rel(srcRoot, dstRoot)
+	if err != nil {
+		symBase, err = filepath.Abs(srcRoot)
+		if err != nil {
+			return err
+		}
+	}
+
+	return filepath.Walk(srcRoot, func(srcPath string, info os.FileInfo, err error) error {
+		if err != nil || srcPath == srcRoot {
+			return err
+		}
+
+		suffix := strings.TrimPrefix(srcPath, srcRoot)
+		for len(suffix) > 0 && suffix[0] == filepath.Separator {
+			suffix = suffix[1:]
+		}
+		dstPath := filepath.Join(dstRoot, suffix)
+
+		perm := info.Mode() & os.ModePerm
+		if info.Mode()&os.ModeSymlink != 0 {
+			info, err = os.Stat(srcPath)
+			if err != nil {
+				return err
+			}
+			perm = info.Mode() & os.ModePerm
+		}
+
+		// Always copy directories (don't symlink them).
+		// If we add a file in the overlay, we don't want to add it in the original.
+		if info.IsDir() {
+			return os.Mkdir(dstPath, perm)
+		}
+
+		// If the OS supports symlinks, use them instead of copying bytes.
+		if err := os.Symlink(filepath.Join(symBase, suffix), dstPath); err == nil {
+			return nil
+		}
+
+		// Otherwise, copy the bytes.
+		src, err := os.Open(srcPath)
+		if err != nil {
+			return err
+		}
+		defer src.Close()
+
+		dst, err := os.OpenFile(dstPath, os.O_WRONLY|os.O_CREATE|os.O_EXCL, perm)
+		if err != nil {
+			return err
+		}
+
+		_, err = io.Copy(dst, src)
+		if closeErr := dst.Close(); err == nil {
+			err = closeErr
+		}
+		return err
+	})
+}
diff --git a/misc/cgo/stdio/stdio_test.go b/misc/cgo/stdio/stdio_test.go
new file mode 100644
index 0000000000..cb32da8444
--- /dev/null
+++ b/misc/cgo/stdio/stdio_test.go
@@ -0,0 +1,60 @@
+// Copyright 2019 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package stdio_test
+
+import (
+	"bytes"
+	"io/ioutil"
+	"log"
+	"os"
+	"os/exec"
+	"path/filepath"
+	"strings"
+	"testing"
+)
+
+func TestMain(m *testing.M) {
+	log.SetFlags(log.Lshortfile)
+	os.Exit(testMain(m))
+}
+
+func testMain(m *testing.M) int {
+	GOPATH, err := ioutil.TempDir("", "cgostdio")
+	if err != nil {
+		log.Panic(err)
+	}
+	defer os.RemoveAll(GOPATH)
+	os.Setenv("GOPATH", GOPATH)
+
+	// Copy testdata into GOPATH/src/cgostdio, along with a go.mod file
+	// declaring the same path.
+	modRoot := filepath.Join(GOPATH, "src", "cgostdio")
+	if err := overlayDir(modRoot, "testdata"); err != nil {
+		log.Panic(err)
+	}
+	if err := os.Chdir(modRoot); err != nil {
+		log.Panic(err)
+	}
+	if err := ioutil.WriteFile("go.mod", []byte("module cgostdio\n"), 0666); err != nil {
+		log.Panic(err)
+	}
+
+	return m.Run()
+}
+
+func TestTestRun(t *testing.T) {
+	out, err := exec.Command("go", "env", "GOROOT").Output()
+	if err != nil {
+		t.Fatal(err)
+	}
+	GOROOT := string(bytes.TrimSpace(out))
+
+	cmd := exec.Command("go", "run", filepath.Join(GOROOT, "test", "run.go"), "-", ".")
+	out, err = cmd.CombinedOutput()
+	if err != nil {
+		t.Fatalf("%s: %s\n%s", strings.Join(cmd.Args, " "), err, out)
+	}
+	t.Logf("%s:\n%s", strings.Join(cmd.Args, " "), out)
+}
diff --git a/misc/cgo/stdio/chain.go b/misc/cgo/stdio/testdata/chain.go
similarity index 98%
rename from misc/cgo/stdio/chain.go
rename to misc/cgo/stdio/testdata/chain.go
index cdc385208c..6c3f406a0d 100644
--- a/misc/cgo/stdio/chain.go
+++ b/misc/cgo/stdio/testdata/chain.go
@@ -14,7 +14,7 @@ import (
 	"runtime"
 	"strconv"
 
-	"../stdio"
+	"cgostdio/stdio"
 )
 
 const N = 10
diff --git a/misc/cgo/stdio/chain.out b/misc/cgo/stdio/testdata/chain.out
similarity index 100%
rename from misc/cgo/stdio/chain.out
rename to misc/cgo/stdio/testdata/chain.out
diff --git a/misc/cgo/stdio/fib.go b/misc/cgo/stdio/testdata/fib.go
similarity index 98%
rename from misc/cgo/stdio/fib.go
rename to misc/cgo/stdio/testdata/fib.go
index 58f185c90f..49cb0ea06f 100644
--- a/misc/cgo/stdio/fib.go
+++ b/misc/cgo/stdio/testdata/fib.go
@@ -17,7 +17,7 @@ import (
 	"runtime"
 	"strconv"
 
-	"../stdio"
+	"cgostdio/stdio"
 )
 
 func fibber(c, out chan int64, i int64) {
diff --git a/misc/cgo/stdio/fib.out b/misc/cgo/stdio/testdata/fib.out
similarity index 100%
rename from misc/cgo/stdio/fib.out
rename to misc/cgo/stdio/testdata/fib.out
diff --git a/misc/cgo/stdio/hello.go b/misc/cgo/stdio/testdata/hello.go
similarity index 92%
rename from misc/cgo/stdio/hello.go
rename to misc/cgo/stdio/testdata/hello.go
index 56220d34be..046bfee7a7 100644
--- a/misc/cgo/stdio/hello.go
+++ b/misc/cgo/stdio/testdata/hello.go
@@ -8,7 +8,7 @@
 
 package main
 
-import "../stdio"
+import "cgostdio/stdio"
 
 func main() {
 	stdio.Stdout.WriteString(stdio.Greeting + "\n")
diff --git a/misc/cgo/stdio/hello.out b/misc/cgo/stdio/testdata/hello.out
similarity index 100%
rename from misc/cgo/stdio/hello.out
rename to misc/cgo/stdio/testdata/hello.out
diff --git a/misc/cgo/stdio/run.out b/misc/cgo/stdio/testdata/run.out
similarity index 100%
rename from misc/cgo/stdio/run.out
rename to misc/cgo/stdio/testdata/run.out
diff --git a/misc/cgo/stdio/file.go b/misc/cgo/stdio/testdata/stdio/file.go
similarity index 100%
rename from misc/cgo/stdio/file.go
rename to misc/cgo/stdio/testdata/stdio/file.go
diff --git a/misc/cgo/stdio/stdio.go b/misc/cgo/stdio/testdata/stdio/stdio.go
similarity index 100%
rename from misc/cgo/stdio/stdio.go
rename to misc/cgo/stdio/testdata/stdio/stdio.go
diff --git a/src/cmd/dist/test.go b/src/cmd/dist/test.go
index a03803b911..1eabb85639 100644
--- a/src/cmd/dist/test.go
+++ b/src/cmd/dist/test.go
@@ -611,7 +611,7 @@ func (t *tester) registerTests() {
 			name:    "cgo_stdio",
 			heading: "../misc/cgo/stdio",
 			fn: func(dt *distTest) error {
-				t.addCmd(dt, "misc/cgo/stdio", "go", "run", filepath.Join(os.Getenv("GOROOT"), "test/run.go"), "-", ".")
+				t.addCmd(dt, "misc/cgo/stdio", t.goTest(), t.timeout(120))
 				return nil
 			},
 		})
