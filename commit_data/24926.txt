commit f9357cdec1235168590283abe027e501633755a5
Author: Austin Clements <austin@google.com>
Date:   Mon Nov 16 14:37:59 2015 -0500

    runtime: check for updated arena_end overflow
    
    Currently, if an allocation is large enough that arena_end + size
    overflows (which is not hard to do on 32-bit), we go ahead and call
    sysReserve with the impossible base and length and depend on this to
    either directly fail because the kernel can't possibly fulfill the
    requested mapping (causing mheap.sysAlloc to return nil) or to succeed
    with a mapping at some other address which will then be rejected as
    outside the arena.
    
    In order to make this less subtle, less dependent on the kernel
    getting all of this right, and to eliminate the hopeless system call,
    add an explicit overflow check.
    
    Updates #13143. This real issue has been fixed by 0de59c2, but this is
    a belt-and-suspenders improvement on top of that. It was uncovered by
    my symbolic modeling of that bug.
    
    Change-Id: I85fa868a33286fdcc23cdd7cdf86b19abf1cb2d1
    Reviewed-on: https://go-review.googlesource.com/16961
    Run-TryBot: Austin Clements <austin@google.com>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Ian Lance Taylor <iant@golang.org>

 src/runtime/malloc.go | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)
