commit 3aecf2ed07f1d5c692fb8915a7a68c89d6c93415
Author: Rob Pike <r@golang.org>
Date:   Wed Aug 13 12:15:24 2008 -0700

    add test for constants
    add bug in constant evaluation (erroneously allowing assignment of float to int)
    update golden
    
    R=gri
    OCL=14153
    CL=14153
---
 test/bugs/bug090.go |  39 +++++++++++++++++
 test/const.go       | 118 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 test/golden.out     |   3 ++
 3 files changed, 160 insertions(+)

diff --git a/test/bugs/bug090.go b/test/bugs/bug090.go
new file mode 100644
index 0000000000..bcb9095ff2
--- /dev/null
+++ b/test/bugs/bug090.go
@@ -0,0 +1,39 @@
+// errchk $G $D/$F.go
+
+// Copyright 2009 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package main
+
+const (
+	c3div2 = 3/2;
+	f3div2 = 3./2.;
+)
+
+func assert(t bool, s string) {
+	if !t {
+		panic(s)
+	}
+}
+
+func main() {
+	var i int;
+	var f float64;
+
+	assert(c3div2 == 1, "3/2");
+	assert(f3div2 == 1.5, "3/2");
+
+	i = c3div2;
+	assert(i == c3div2, "i == c3div2");
+
+	f = c3div2;
+	assert(f == c3div2, "f == c3div2");
+
+	f = f3div2;
+	assert(f == f3div2, "f == f3div2");
+
+	i = f3div2;	// BUG: probably shouldn't compile
+	assert(i == c3div2, "i == c3div2 from f3div2");
+	assert(i != f3div2, "i != f3div2");	// BUG: certainly shouldn't fail
+}
diff --git a/test/const.go b/test/const.go
new file mode 100644
index 0000000000..ced52dc224
--- /dev/null
+++ b/test/const.go
@@ -0,0 +1,118 @@
+// $G $F.go && $L $F.$A && ./$A.out
+
+// Copyright 2009 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package main
+
+const (
+	c0 = 0;
+	cm1 = -1;
+	chuge = 1 << 100;
+	chuge_1 = chuge - 1;
+	c1 = chuge >> 100;
+	c3div2 = 3/2;
+	c1e3 = 1e3;
+)
+
+const (
+	f0 = 0.0;
+	fm1 = -1.;
+	fhuge float64 = 1 << 100;
+	fhuge_1 float64 = chuge - 1;
+	f1 float64 = chuge >> 100;
+	f3div2 = 3./2.;
+	f1e3 float64 = 1e3;
+)
+
+func assert(t bool, s string) {
+	if !t {
+		panic(s)
+	}
+}
+
+func ints() {
+	assert(c0 == 0, "c0");
+	assert(c1 == 1, "c1");
+	assert(chuge > chuge_1, "chuge");
+	assert(chuge_1 + 1 == chuge, "chuge 1");
+	assert(chuge + cm1 +1  == chuge, "cm1");
+	assert(c3div2 == 1, "3/2");
+	assert(c1e3 == 1000, "c1e3 int");
+	assert(c1e3 == 1e3, "c1e3 float");
+
+	// verify that all (in range) are assignable as ints
+	var i int;
+	i = c0;
+	assert(i == c0, "i == c0");
+	i = cm1;
+	assert(i == cm1, "i == cm1");
+	i = c1;
+	assert(i == c1, "i == c1");
+	i = c3div2;
+	assert(i == c3div2, "i == c3div2");
+	i = c1e3;
+	assert(i == c1e3, "i == c1e3");
+
+	// verify that all are assignable as floats
+	var f float64;
+	f = c0;
+	assert(f == c0, "f == c0");
+	f = cm1;
+	assert(f == cm1, "f == cm1");
+	f = chuge;
+	assert(f == chuge, "f == chuge");
+	f = chuge_1;
+	assert(f == chuge_1, "f == chuge_1");
+	f = c1;
+	assert(f == c1, "f == c1");
+	f = c3div2;
+	assert(f == c3div2, "f == c3div2");
+	f = c1e3;
+	assert(f == c1e3, "f == c1e3");
+}
+
+func floats() {
+	assert(f0 == c0, "f0");
+	assert(f1 == c1, "f1");
+	assert(fhuge > fhuge_1, "fhuge");
+	assert(fhuge_1 + 1 == fhuge, "fhuge 1");
+	assert(fhuge + fm1 +1  == fhuge, "fm1");
+	assert(f3div2 == 1.5, "3./2.");
+	assert(f1e3 == 1000, "f1e3 int");
+	assert(f1e3 == 1.e3, "f1e3 float");
+
+	// verify that all (in range) are assignable as ints
+	var i int;
+	i = f0;
+	assert(i == f0, "i == f0");
+	i = fm1;
+	assert(i == fm1, "i == fm1");
+	i = f1;
+	assert(i == f1, "i == f1");
+	i = f1e3;
+	assert(i == f1e3, "i == f1e3");
+
+	// verify that all are assignable as floats
+	var f float64;
+	f = f0;
+	assert(f == f0, "f == f0");
+	f = fm1;
+	assert(f == fm1, "f == fm1");
+	f = fhuge;
+	assert(f == fhuge, "f == fhuge");
+	f = fhuge_1;
+	assert(f == fhuge_1, "f == fhuge_1");
+	f = f1;
+	assert(f == f1, "f == f1");
+	f = f3div2;
+	assert(f == f3div2, "f == f3div2");
+	f = f1e3;
+	assert(f == f1e3, "f == f1e3");
+}
+
+func main() {
+	ints();
+	floats();
+}
diff --git a/test/golden.out b/test/golden.out
index 78a8ba01ce..7b3da3cdd9 100644
--- a/test/golden.out
+++ b/test/golden.out
@@ -182,6 +182,9 @@ bugs/bug088.dir/bug1.go:8: illegal types for operand: AS
 	(<(bug0)P.int32>INT32)
 BUG: fails incorrectly
 
+=========== bugs/bug090.go
+BUG: compilation succeeds incorrectly
+
 =========== fixedbugs/bug015.go
 fixedbugs/bug015.go:7: overflow converting constant to <int64>INT64
 
