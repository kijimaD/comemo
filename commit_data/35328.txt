commit caf96f7daead2c7e543a6249b7cd1656725658c3
Author: Robert Griesemer <gri@golang.org>
Date:   Thu Dec 21 14:35:21 2017 -0800

    go/types: use check.lookup consistently where possible (cleanup)
    
    This CL converts the last call to scope.LookupParent with no position
    information to a check.lookup call that respects position information
    provided by Eval (there's one more LookupParent call that cannot be
    converted, see the respective comment in the code).
    
    In this case, the lookup is needed to determine the variable on the
    LHS of an assignment, for adjustment of its `used` information.
    
    Outside a types.Eval call, i.e., during normal type-checking, there
    is no difference between this new code and the old code.
    
    While in a types.Eval call, it's important to use the correct position
    to look up the relevant variable. If token.NoPos were used, one might
    find another variable with the same name, declared later in the scope.
    
    Caveat: Types.Eval only accepts expressions, and it's currently not
    possible to evaluate assignments (except via function literals, but
    then the scope is different). That is, this change is a fix for a
    potential future bug, and for now a no-op.
    
    Change-Id: I28db1fe1202c07e3f7b3fadfd185728afb9b2ae7
    Reviewed-on: https://go-review.googlesource.com/85199
    Reviewed-by: Alan Donovan <adonovan@google.com>
---
 src/go/types/assignments.go | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/go/types/assignments.go b/src/go/types/assignments.go
index 98c9e121b0..f0030efedc 100644
--- a/src/go/types/assignments.go
+++ b/src/go/types/assignments.go
@@ -153,7 +153,7 @@ func (check *Checker) assignVar(lhs ast.Expr, x *operand) Type {
 	var v *Var
 	var v_used bool
 	if ident != nil {
-		if _, obj := check.scope.LookupParent(ident.Name, token.NoPos); obj != nil {
+		if obj := check.lookup(ident.Name); obj != nil {
 			// It's ok to mark non-local variables, but ignore variables
 			// from other packages to avoid potential race conditions with
 			// dot-imported variables.
