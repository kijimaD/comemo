commit 73d57642a4dbb34bae8619f5aacf3756c814d5d6
Author: Rob Pike <r@golang.org>
Date:   Wed Jun 1 13:06:04 2011 +1000

    filepath: remove string constants. They are unnecessary.
    
    R=golang-dev, rsc
    CC=golang-dev
    https://golang.org/cl/4527090
---
 src/cmd/goinstall/path.go     |  2 +-
 src/pkg/path/filepath/path.go | 18 ++++++++----------
 2 files changed, 9 insertions(+), 11 deletions(-)

diff --git a/src/cmd/goinstall/path.go b/src/cmd/goinstall/path.go
index 7b4bda0fb8..b8c3929316 100644
--- a/src/cmd/goinstall/path.go
+++ b/src/cmd/goinstall/path.go
@@ -119,7 +119,7 @@ func findPackageRoot(path string) (root *pkgroot, pkg string, err os.Error) {
 			return
 		}
 		for _, r := range gopath {
-			rpath := r.srcDir() + filepath.SeparatorString
+			rpath := r.srcDir() + string(filepath.Separator)
 			if !strings.HasPrefix(path, rpath) {
 				continue
 			}
diff --git a/src/pkg/path/filepath/path.go b/src/pkg/path/filepath/path.go
index 124de989a7..dcd8017add 100644
--- a/src/pkg/path/filepath/path.go
+++ b/src/pkg/path/filepath/path.go
@@ -15,10 +15,8 @@ import (
 )
 
 const (
-	Separator           = os.PathSeparator
-	ListSeparator       = os.PathListSeparator
-	SeparatorString     = string(Separator)
-	ListSeparatorString = string(ListSeparator)
+	Separator     = os.PathSeparator
+	ListSeparator = os.PathListSeparator
 )
 
 // Clean returns the shortest path name equivalent to path
@@ -121,7 +119,7 @@ func ToSlash(path string) string {
 	if Separator == '/' {
 		return path
 	}
-	return strings.Replace(path, SeparatorString, "/", -1)
+	return strings.Replace(path, string(Separator), "/", -1)
 }
 
 // FromSlash returns the result of replacing each slash ('/') character
@@ -130,7 +128,7 @@ func FromSlash(path string) string {
 	if Separator == '/' {
 		return path
 	}
-	return strings.Replace(path, "/", SeparatorString, -1)
+	return strings.Replace(path, "/", string(Separator), -1)
 }
 
 // SplitList splits a list of paths joined by the OS-specific ListSeparator.
@@ -138,7 +136,7 @@ func SplitList(path string) []string {
 	if path == "" {
 		return []string{}
 	}
-	return strings.Split(path, ListSeparatorString, -1)
+	return strings.Split(path, string(ListSeparator), -1)
 }
 
 // Split splits path immediately following the final Separator,
@@ -158,7 +156,7 @@ func Split(path string) (dir, file string) {
 func Join(elem ...string) string {
 	for i, e := range elem {
 		if e != "" {
-			return Clean(strings.Join(elem[i:], SeparatorString))
+			return Clean(strings.Join(elem[i:], string(Separator)))
 		}
 	}
 	return ""
@@ -236,7 +234,7 @@ func EvalSymlinks(path string) (string, os.Error) {
 		if IsAbs(dest) {
 			b.Reset()
 		}
-		path = dest + SeparatorString + path
+		path = dest + string(Separator) + path
 	}
 	return Clean(b.String()), nil
 }
@@ -354,7 +352,7 @@ func Base(path string) string {
 	}
 	// If empty now, it had only slashes.
 	if path == "" {
-		return SeparatorString
+		return string(Separator)
 	}
 	return path
 }
