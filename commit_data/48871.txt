commit 62095c66e042024fc631a3e9514b637ae4b5ae10
Author: Rob Findley <rfindley@google.com>
Date:   Tue Jun 22 10:13:54 2021 -0400

    [dev.typeparams] go/types: adjust logic for method expression arg naming
    
    CL 325369 improved this logic in types2. Port this improvement back to
    go/types.
    
    Change-Id: I5f859cbffd88bb3db09a81c2389269f7bd0869f9
    Reviewed-on: https://go-review.googlesource.com/c/go/+/330069
    Trust: Robert Findley <rfindley@google.com>
    Run-TryBot: Robert Findley <rfindley@google.com>
    TryBot-Result: Go Bot <gobot@golang.org>
    Reviewed-by: Robert Griesemer <gri@golang.org>
---
 src/go/types/call.go | 17 ++++++++---------
 1 file changed, 8 insertions(+), 9 deletions(-)

diff --git a/src/go/types/call.go b/src/go/types/call.go
index 3a04121e98..039c7bbaf5 100644
--- a/src/go/types/call.go
+++ b/src/go/types/call.go
@@ -587,16 +587,15 @@ func (check *Checker) selector(x *operand, e *ast.SelectorExpr) {
 		if sig.params != nil {
 			params = sig.params.vars
 		}
-		// Be consistent about named/unnamed parameters.
-		needName := true
-		for _, param := range params {
-			if param.Name() == "" {
-				needName = false
-				break
-			}
-		}
+		// Be consistent about named/unnamed parameters. This is not needed
+		// for type-checking, but the newly constructed signature may appear
+		// in an error message and then have mixed named/unnamed parameters.
+		// (An alternative would be to not print parameter names in errors,
+		// but it's useful to see them; this is cheap and method expressions
+		// are rare.)
 		name := ""
-		if needName {
+		if len(params) > 0 && params[0].name != "" {
+			// name needed
 			name = sig.recv.name
 			if name == "" {
 				name = "_"
