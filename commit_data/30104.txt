commit d8f7e4fadb785d90444245159f4c5a32653263d6
Author: Josh Bleecher Snyder <josharian@gmail.com>
Date:   Tue Oct 25 06:44:58 2016 -0700

    runtime, syscall: appease vet
    
    No functional changes.
    
    Change-Id: I0842b2560f4296abfc453410fdd79514132cab83
    Reviewed-on: https://go-review.googlesource.com/31935
    Run-TryBot: Josh Bleecher Snyder <josharian@gmail.com>
    Reviewed-by: Rob Pike <r@golang.org>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
---
 src/runtime/os_plan9.go      |  2 +-
 src/runtime/sys_plan9_arm.s  |  4 ++--
 src/syscall/asm_darwin_arm.s | 28 ++++++++++++++--------------
 3 files changed, 17 insertions(+), 17 deletions(-)

diff --git a/src/runtime/os_plan9.go b/src/runtime/os_plan9.go
index 4aa1a0d43d..032aec1a46 100644
--- a/src/runtime/os_plan9.go
+++ b/src/runtime/os_plan9.go
@@ -56,7 +56,7 @@ func noted(mode int32) int32
 func nsec(*int64) int64
 
 //go:noescape
-func sigtramp(ureg, msg unsafe.Pointer)
+func sigtramp(ureg, note unsafe.Pointer)
 
 func setfpmasks()
 
diff --git a/src/runtime/sys_plan9_arm.s b/src/runtime/sys_plan9_arm.s
index bc7a90b4d9..d54f56f132 100644
--- a/src/runtime/sys_plan9_arm.s
+++ b/src/runtime/sys_plan9_arm.s
@@ -230,7 +230,7 @@ TEXT runtime·tstart_plan9(SB),NOSPLIT,$0-4
 	MOVW	R0, 0(R0)		// not reached
 	RET
 
-//func sigtramp(ureg, msg unsafe.Pointer)
+//func sigtramp(ureg, note unsafe.Pointer)
 TEXT runtime·sigtramp(SB),NOSPLIT,$0-8
 	// check that g and m exist
 	CMP	$0, g
@@ -242,7 +242,7 @@ TEXT runtime·sigtramp(SB),NOSPLIT,$0-8
 
 	// save args
 	MOVW	ureg+0(FP), R1
-	MOVW	msg+4(FP), R2
+	MOVW	note+4(FP), R2
 
 	// change stack
 	MOVW	m_gsignal(R0), R3
diff --git a/src/syscall/asm_darwin_arm.s b/src/syscall/asm_darwin_arm.s
index cf3f9b712d..4eae005f5a 100644
--- a/src/syscall/asm_darwin_arm.s
+++ b/src/syscall/asm_darwin_arm.s
@@ -11,7 +11,7 @@
 // func Syscall(syscall uintptr, a1, a2, a3 uintptr) (r1, r2, err uintptr)
 TEXT	·Syscall(SB),NOSPLIT,$0-28
 	BL		runtime·entersyscall(SB)
-	MOVW	syscall+0(FP), R12
+	MOVW	trap+0(FP), R12
 	MOVW	a1+4(FP), R0
 	MOVW	a2+8(FP), R1
 	MOVW	a3+12(FP), R2
@@ -21,20 +21,20 @@ TEXT	·Syscall(SB),NOSPLIT,$0-28
 	MOVW	R1, r1+16(FP)	// r1
 	MOVW	$0, R2
 	MOVW	R2, r2+20(FP)	// r2
-	MOVW	R0, errno+24(FP)	// errno
+	MOVW	R0, err+24(FP)	// err
 	BL		runtime·exitsyscall(SB)
 	RET
 ok:
 	MOVW	R0, r1+16(FP) // r1
 	MOVW	R1, r2+20(FP)	// r2
 	MOVW	$0, R0
-	MOVW	R0, errno+24(FP)	// errno
+	MOVW	R0, err+24(FP)	// err
 	BL		runtime·exitsyscall(SB)
 	RET
 
 // func RawSyscall(trap uintptr, a1, a2, a3 uintptr) (r1, r2, err uintptr)
 TEXT ·RawSyscall(SB),NOSPLIT,$0-28
-	MOVW	syscall+0(FP), R12	// syscall entry
+	MOVW	trap+0(FP), R12	// syscall entry
 	MOVW	a1+4(FP), R0
 	MOVW	a2+8(FP), R1
 	MOVW	a3+12(FP), R2
@@ -44,19 +44,19 @@ TEXT ·RawSyscall(SB),NOSPLIT,$0-28
 	MOVW	R1, r1+16(FP)	// r1
 	MOVW	$0, R2
 	MOVW	R2, r2+20(FP)	// r2
-	MOVW	R0, errno+24(FP)	// errno
+	MOVW	R0, err+24(FP)	// err
 	RET
 ok1:
 	MOVW	R0, r1+16(FP) // r1
 	MOVW	R1, r2+20(FP)	// r2
 	MOVW	$0, R0
-	MOVW	R0, errno+24(FP)	// errno
+	MOVW	R0, err+24(FP)	// err
 	RET
 
 // func Syscall6(trap uintptr, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2, err uintptr)
 TEXT	·Syscall6(SB),NOSPLIT,$0-40
 	BL		runtime·entersyscall(SB)
-	MOVW	syscall+0(FP), R12	// syscall entry
+	MOVW	trap+0(FP), R12	// syscall entry
 	MOVW	a1+4(FP), R0
 	MOVW	a2+8(FP), R1
 	MOVW	a3+12(FP), R2
@@ -69,14 +69,14 @@ TEXT	·Syscall6(SB),NOSPLIT,$0-40
 	MOVW	R1, r1+28(FP)	// r1
 	MOVW	$0, R2
 	MOVW	R2, r2+32(FP)	// r2
-	MOVW	R0, errno+36(FP)	// errno
+	MOVW	R0, err+36(FP)	// err
 	BL		runtime·exitsyscall(SB)
 	RET
 ok6:
 	MOVW	R0, r1+28(FP) // r1
 	MOVW	R1, r2+32(FP)	// r2
 	MOVW	$0, R0
-	MOVW	R0, errno+36(FP)	// errno
+	MOVW	R0, err+36(FP)	// err
 	BL		runtime·exitsyscall(SB)
 	RET
 
@@ -95,19 +95,19 @@ TEXT	·RawSyscall6(SB),NOSPLIT,$0-40
 	MOVW	R1, r1+28(FP)	// r1
 	MOVW	$0, R2
 	MOVW	R2, r2+32(FP)	// r2
-	MOVW	R0, errno+36(FP)	// errno
+	MOVW	R0, err+36(FP)	// err
 	RET
 ok2:
 	MOVW	R0, r1+28(FP) // r1
 	MOVW	R1, r2+32(FP)	// r2
 	MOVW	$0, R0
-	MOVW	R0, errno+36(FP)	// errno
+	MOVW	R0, err+36(FP)	// err
 	RET
 
 // Actually Syscall7.
 TEXT	·Syscall9(SB),NOSPLIT,$0-52
 	BL runtime·entersyscall(SB)
-	MOVW	syscall+0(FP), R12	// syscall entry
+	MOVW	num+0(FP), R12	// syscall entry
 	MOVW	a1+4(FP), R0
 	MOVW	a2+8(FP), R1
 	MOVW	a3+12(FP), R2
@@ -121,13 +121,13 @@ TEXT	·Syscall9(SB),NOSPLIT,$0-52
 	MOVW	R1, r1+40(FP)	// r1
 	MOVW	$0, R2
 	MOVW	R2, r2+44(FP)	// r2
-	MOVW	R0, errno+48(FP)	// errno
+	MOVW	R0, err+48(FP)	// err
 	BL		runtime·exitsyscall(SB)
 	RET
 ok9:
 	MOVW	R0, r1+40(FP) // r1
 	MOVW	R1, r2+44(FP)	// r2
 	MOVW	$0, R0
-	MOVW	R0, errno+48(FP)	// errno
+	MOVW	R0, err+48(FP)	// err
 	BL	runtime·exitsyscall(SB)
 	RET
