commit 7f1c4b3afbc809afff6813eade571e3c3a4c0e15
Author: Cherry Zhang <cherryyz@google.com>
Date:   Tue Jan 2 15:20:19 2018 -0500

    cmd/compile: disable "redundant zeroextensions" optimization for Select on AMD64
    
    A Select Op could produce a value with upper 32 bits NOT zeroed,
    for example, Div32 is lowered to (Select0 (DIVL x y)).
    
    In theory, we could look into the argument of a Select to decide
    whether the upper bits are zeroed. As it is late in release cycle,
    just disable this optimization for Select for now.
    
    Fixes #23305.
    
    Change-Id: Icf665a2af9ccb0a7ba0ae00c683c9e349638bf85
    Reviewed-on: https://go-review.googlesource.com/85736
    Run-TryBot: Cherry Zhang <cherryyz@google.com>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Matthew Dempsky <mdempsky@google.com>
    Reviewed-by: Ilya Tocar <ilya.tocar@intel.com>
---
 src/cmd/compile/internal/ssa/rewrite.go |  6 +++++-
 test/fixedbugs/issue23305.go            | 28 ++++++++++++++++++++++++++++
 2 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/src/cmd/compile/internal/ssa/rewrite.go b/src/cmd/compile/internal/ssa/rewrite.go
index 4e8eb4d3b6..c617841ee8 100644
--- a/src/cmd/compile/internal/ssa/rewrite.go
+++ b/src/cmd/compile/internal/ssa/rewrite.go
@@ -646,8 +646,12 @@ func zeroUpper32Bits(x *Value, depth int) bool {
 		OpAMD64ANDL, OpAMD64ANDLconst, OpAMD64ORL, OpAMD64ORLconst,
 		OpAMD64XORL, OpAMD64XORLconst, OpAMD64NEGL, OpAMD64NOTL:
 		return true
-	case OpArg, OpSelect0, OpSelect1:
+	case OpArg:
 		return x.Type.Width == 4
+	case OpSelect0, OpSelect1:
+		// Disabled for now. See issue 23305.
+		// TODO: we could look into the arg of the Select to decide.
+		return false
 	case OpPhi:
 		// Phis can use each-other as an arguments, instead of tracking visited values,
 		// just limit recursion depth.
diff --git a/test/fixedbugs/issue23305.go b/test/fixedbugs/issue23305.go
new file mode 100644
index 0000000000..28f400c5e8
--- /dev/null
+++ b/test/fixedbugs/issue23305.go
@@ -0,0 +1,28 @@
+// run
+
+// Copyright 2018 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package main
+
+func mask1(a, b uint64) uint64 {
+	op1 := int32(a)
+	op2 := int32(b)
+	return uint64(uint32(op1 / op2))
+}
+
+var mask2 = mask1
+
+func main() {
+	res1 := mask1(0x1, 0xfffffffeffffffff)
+	res2 := mask2(0x1, 0xfffffffeffffffff)
+	if res1 != 0xffffffff {
+		println("got", res1, "want", 0xffffffff)
+		panic("FAIL")
+	}
+	if res2 != 0xffffffff {
+		println("got", res2, "want", 0xffffffff)
+		panic("FAIL")
+	}
+}
