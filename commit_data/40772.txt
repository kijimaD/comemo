commit f205ae3305d2b60076ee294113984595bae7c4da
Author: Robert Griesemer <gri@golang.org>
Date:   Thu Jun 27 13:17:48 2019 -0700

    go/importer: update documentation on ForCompiler lookup parameter
    
    Change-Id: I80dff181a79858b52ba77c3f38f77a744b423afa
    Reviewed-on: https://go-review.googlesource.com/c/go/+/184079
    Reviewed-by: Michael Matloob <matloob@golang.org>
---
 src/go/importer/importer.go | 18 ++++++++----------
 1 file changed, 8 insertions(+), 10 deletions(-)

diff --git a/src/go/importer/importer.go b/src/go/importer/importer.go
index fbbc3c9017..23118d366e 100644
--- a/src/go/importer/importer.go
+++ b/src/go/importer/importer.go
@@ -28,17 +28,15 @@ type Lookup func(path string) (io.ReadCloser, error)
 // (if the package API depends on cgo-defined entities, the type
 // checker won't have access to those).
 //
-// If lookup is nil, the default package lookup mechanism for the
-// given compiler is used, and the resulting importer attempts
-// to resolve relative and absolute import paths to canonical
-// import path IDs before finding the imported file.
+// The lookup function is called each time the resulting importer needs
+// to resolve an import path. In this mode the importer can only be
+// invoked with canonical import paths (not relative or absolute ones);
+// it is assumed that the translation to canonical import paths is being
+// done by the client of the importer.
 //
-// If lookup is non-nil, then the returned importer calls lookup
-// each time it needs to resolve an import path. In this mode
-// the importer can only be invoked with canonical import paths
-// (not relative or absolute ones); it is assumed that the translation
-// to canonical import paths is being done by the client of the
-// importer.
+// A lookup function must be provided for correct module-aware operation.
+// Deprecated: If lookup is nil, for backwards-compatibility, the importer
+// will attempt to resolve imports in the $GOPATH workspace.
 func ForCompiler(fset *token.FileSet, compiler string, lookup Lookup) types.Importer {
 	switch compiler {
 	case "gc":
