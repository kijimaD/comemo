commit 2968f5623c71d0e8e7be6e117939c5f585bb0620
Author: Ian Lance Taylor <iant@golang.org>
Date:   Thu Oct 19 16:45:00 2023 -0700

    test: add tests that gofrontend failed
    
    I will shortly be sending CLs to let the gofrontend code pass
    these tests.
    
    Change-Id: I53ccbdac3ac224a4fdc9577270f48136ca73a62c
    Reviewed-on: https://go-review.googlesource.com/c/go/+/536537
    Reviewed-by: Cherry Mui <cherryyz@google.com>
    Auto-Submit: Ian Lance Taylor <iant@google.com>
    LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>
    Reviewed-by: Ian Lance Taylor <iant@google.com>
---
 test/fixedbugs/bug517.go | 37 +++++++++++++++++++++++++++++++++++++
 test/fixedbugs/bug518.go | 15 +++++++++++++++
 2 files changed, 52 insertions(+)

diff --git a/test/fixedbugs/bug517.go b/test/fixedbugs/bug517.go
new file mode 100644
index 0000000000..00860dc4d3
--- /dev/null
+++ b/test/fixedbugs/bug517.go
@@ -0,0 +1,37 @@
+// run
+
+// Copyright 2023 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// The gofrontend used to mishandle this code due to a pass ordering issue.
+// It was inconsistent as to whether unsafe.Sizeof(byte(0)) was a constant,
+// and therefore as to whether it was a direct-iface type.
+
+package main
+
+import "unsafe"
+
+type A [unsafe.Sizeof(byte(0))]*byte
+
+func (r A) V() byte {
+	return *r[0]
+}
+
+func F() byte {
+	panic("F") // should never be called
+}
+
+type B [unsafe.Sizeof(F())]*byte
+
+func (r B) V() byte {
+	return *r[0]
+}
+
+func main() {
+	b := byte(1)
+	v := A{&b}.V() + B{&b}.V()
+	if v != 2 {
+		panic(v)
+	}
+}
diff --git a/test/fixedbugs/bug518.go b/test/fixedbugs/bug518.go
new file mode 100644
index 0000000000..c3ec1f4df4
--- /dev/null
+++ b/test/fixedbugs/bug518.go
@@ -0,0 +1,15 @@
+// errorcheck
+
+// Copyright 2023 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// The gofrontend used to accept this.
+
+package p
+
+func F2(a int32) bool {
+	return a == C	// ERROR "invalid|incompatible"
+}
+
+const C = uint32(34)
