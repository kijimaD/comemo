commit e8fb0b014ca37ffd34b99f2f83c477bca8ad13ff
Author: Russ Cox <rsc@golang.org>
Date:   Fri Mar 19 17:46:18 2010 -0700

    godoc: revert change 5089, per gri's instructions
    
    R=gri
    CC=golang-dev
    https://golang.org/cl/630043
---
 lib/godoc/search.txt   |  7 +++----
 src/cmd/godoc/godoc.go | 27 +++------------------------
 2 files changed, 6 insertions(+), 28 deletions(-)

diff --git a/lib/godoc/search.txt b/lib/godoc/search.txt
index 5724da404d..46f7ae478e 100644
--- a/lib/godoc/search.txt
+++ b/lib/godoc/search.txt
@@ -1,5 +1,4 @@
-QUERY
-{Query}
+QUERY = {Query}
 
 {.section Accurate}
 {.or}
@@ -22,7 +21,7 @@ package {Pak.Name}
 {.repeated section Files}
 {.repeated section Groups}
 {.repeated section Infos}
-	{File.Path}:{@|infoLine}
+	{File.Path|url-src}:{@|infoLine}
 {.end}
 {.end}
 {.end}
@@ -37,7 +36,7 @@ package {Pak.Name}
 {.repeated section Files}
 {.repeated section Groups}
 {.repeated section Infos}
-	{File.Path}:{@|infoLine}
+	{File.Path|url-src}:{@|infoLine}
 {.end}
 {.end}
 {.end}
diff --git a/src/cmd/godoc/godoc.go b/src/cmd/godoc/godoc.go
index 1baa6f2c65..7d40000d55 100644
--- a/src/cmd/godoc/godoc.go
+++ b/src/cmd/godoc/godoc.go
@@ -1375,6 +1375,9 @@ func indexer() {
 				nwords, nspots := index.Size()
 				log.Stderrf("index updated (%gs, %d unique words, %d spots)", secs, nwords, nspots)
 			}
+			log.Stderrf("bytes=%d footprint=%d\n", runtime.MemStats.HeapAlloc, runtime.MemStats.InusePages<<12)
+			runtime.GC()
+			log.Stderrf("bytes=%d footprint=%d\n", runtime.MemStats.HeapAlloc, runtime.MemStats.InusePages<<12)
 		}
 		time.Sleep(1 * 60e9) // try once a minute
 	}
@@ -1394,29 +1397,5 @@ type IndexServer struct{}
 
 func (s *IndexServer) Lookup(query *Query, result *SearchResult) os.Error {
 	*result = lookup(query.Query)
-	if hit := result.Hit; hit != nil {
-		// the hitlists contain absolute server file paths;
-		// convert them into relative paths on the server
-		// because the client usually has a different file
-		// mapping
-		mapHitList(hit.Decls)
-		mapHitList(hit.Others)
-	}
 	return nil
 }
-
-
-func mapHitList(list HitList) {
-	for _, prun := range list {
-		for _, frun := range prun.Files {
-			// convert absolute file paths to relative paths
-			f := frun.File
-			if f != nil && len(f.Path) > 0 && f.Path[0] == '/' {
-				f.Path = relativePath(f.Path)
-			}
-			// TODO(gri) convert SpotInfos containing snippets
-			//           so that the line number is available
-			//           on the client side
-		}
-	}
-}
