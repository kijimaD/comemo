commit cfb609bfb70027e60d71a5ac7e9202144246b98a
Author: Bryan C. Mills <bcmills@google.com>
Date:   Thu Feb 4 22:46:23 2021 -0500

    cmd/go: ensure that the test subprocess always times out in TestScript/test_write_profiles_on_timeout
    
    This test verifies the behavior of a test that fails due to timing
    out. However, the test to be timed out was only sleeping for 1s before
    returning successfully. That is empirically not always long enough for
    the test process itself to detect the timeout and terminate.
    
    We could replace the sleep with a select{}, but that would assume that
    the deadlock detector does not terminate a test that reaches that
    state (true today, but not necessarily so).
    
    We could replace the arbitrarily sleep with an arbitrarily longer
    sleep, but that's, well, arbitrary.
    
    Instead, have the test sleep in an unbounded loop to ensure that it
    always continues to run until the timeout is detected, and check the
    test output to ensure that it actually reached the timeout path.
    
    Fixes #32983
    
    Change-Id: Ie7f210b36ef0cc0a4db473f780e15a3d6def8bda
    Reviewed-on: https://go-review.googlesource.com/c/go/+/289889
    Trust: Bryan C. Mills <bcmills@google.com>
    Run-TryBot: Bryan C. Mills <bcmills@google.com>
    TryBot-Result: Go Bot <gobot@golang.org>
    Reviewed-by: Jay Conrod <jayconrod@google.com>
---
 .../go/testdata/script/test_write_profiles_on_timeout.txt | 15 ++++++++++++---
 1 file changed, 12 insertions(+), 3 deletions(-)

diff --git a/src/cmd/go/testdata/script/test_write_profiles_on_timeout.txt b/src/cmd/go/testdata/script/test_write_profiles_on_timeout.txt
index 08e67a429e..0db183f8f0 100644
--- a/src/cmd/go/testdata/script/test_write_profiles_on_timeout.txt
+++ b/src/cmd/go/testdata/script/test_write_profiles_on_timeout.txt
@@ -3,6 +3,7 @@
 [short] skip
 
 ! go test -cpuprofile cpu.pprof -memprofile mem.pprof -timeout 1ms
+stdout '^panic: test timed out'
 grep . cpu.pprof
 grep . mem.pprof
 
@@ -12,6 +13,14 @@ module profiling
 go 1.16
 -- timeout_test.go --
 package timeouttest_test
-import "testing"
-import "time"
-func TestSleep(t *testing.T) { time.Sleep(time.Second) }
+
+import (
+	"testing"
+	"time"
+)
+
+func TestSleep(t *testing.T) {
+	for {
+		time.Sleep(1 * time.Second)
+	}
+}
