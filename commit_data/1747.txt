commit 8ba287585a2486132c604981ed1c549d24b9feed
Author: Russ Cox <rsc@golang.org>
Date:   Wed Mar 4 21:30:07 2009 -0800

    sync: add documentation
    
    R=r
    DELTA=63  (57 added, 1 deleted, 5 changed)
    OCL=25727
    CL=25727
---
 src/lib/sync/mutex.go | 68 ++++++++++++++++++++++++++++++++++++++++++++++-----
 1 file changed, 62 insertions(+), 6 deletions(-)

diff --git a/src/lib/sync/mutex.go b/src/lib/sync/mutex.go
index 8e05cd819d..5a6311a837 100644
--- a/src/lib/sync/mutex.go
+++ b/src/lib/sync/mutex.go
@@ -2,12 +2,19 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
+// The sync package provides basic synchronization primitives
+// such as mutual exclusion locks.  These are intended for use
+// by low-level library routines.  Higher-level synchronization
+// is better done via channels and communication.
 package sync
 
 func cas(val *int32, old, new int32) bool
 func semacquire(*int32)
 func semrelease(*int32)
 
+// A Mutex is a mutual exclusion lock.
+// Mutexes can be created as part of other structures;
+// the zero value for a Mutex is an unlocked mutex.
 type Mutex struct {
 	key int32;
 	sema int32;
@@ -23,6 +30,9 @@ func xadd(val *int32, delta int32) (new int32) {
 	panic("unreached")
 }
 
+// Lock locks m.
+// If the lock is already in use, the calling goroutine
+// blocks until the mutex is available.
 func (m *Mutex) Lock() {
 	if xadd(&m.key, 1) == 1 {
 		// changed from 0 to 1; we hold lock
@@ -31,6 +41,12 @@ func (m *Mutex) Lock() {
 	semacquire(&m.sema);
 }
 
+// Unlock unlocks m.
+// It is a run-time error if m is not locked on entry to Unlock.
+//
+// A locked Mutex is not associated with a particular goroutine.
+// It is allowed for one goroutine to lock a Mutex and then
+// arrange for another goroutine to unlock it.
 func (m *Mutex) Unlock() {
 	if xadd(&m.key, -1) == 0 {
 		// changed from 1 to 0; no contention
@@ -42,17 +58,57 @@ func (m *Mutex) Unlock() {
 // Stub implementation of r/w locks.
 // This satisfies the semantics but
 // is not terribly efficient.
-// TODO(rsc): Real r/w locks.
 
+// The next comment goes in the BUGS section of the document,
+// in its own paragraph, without the (rsc) tag.
+
+// BUG(rsc): RWMutex does not (yet) allow multiple readers;
+// instead it behaves as if RLock and RUnlock were Lock and Unlock.
+
+// An RWMutex is a reader/writer mutual exclusion lock.
+// The lock can be held by an arbitrary number of readers
+// or a single writer.
+// RWMutexes can be created as part of other
+// structures; the zero value for a RWMutex is
+// an unlocked mutex.
 type RWMutex struct {
-	Mutex;
+	m Mutex;
+}
+
+// RLock locks rw for reading.
+// If the lock is already locked for writing or there is a writer already waiting
+// to acquire the lock, RLock blocks until the writer has released the lock.
+func (rw *RWMutex) RLock() {
+	rw.m.Lock();
+}
+
+// RUnlock undoes a single RLock call;
+// it does not affect other simultaneous readers.
+// It is a run-time error if rw is not locked for reading
+// on entry to RUnlock.
+func (rw *RWMutex) RUnlock() {
+	rw.m.Unlock();
 }
 
-func (m *RWMutex) RLock() {
-	m.Lock();
+// Lock locks rw for writing.
+// If the lock is already locked for reading or writing,
+// Lock blocks until the lock is available.
+// To ensure that the lock eventually becomes available,
+// a blocked Lock call excludes new readers from acquiring
+// the lock.
+func (rw *RWMutex) Lock() {
+	rw.m.Lock();
 }
 
-func (m *RWMutex) RUnlock() {
-	m.Unlock();
+// Unlock unlocks rw for writing.
+// It is a run-time error if rw is not locked for writing
+// on entry to Unlock.
+//
+// Like for Mutexes,
+// a locked RWMutex is not associated with a particular goroutine.
+// It is allowed for one goroutine to RLock (Lock) an RWMutex and then
+// arrange for another goroutine to RUnlock (Unlock) it.
+func (rw *RWMutex) Unlock() {
+	rw.m.Unlock();
 }
 
