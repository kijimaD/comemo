commit 54245cba1f5f3971c82be6d2b3e658f968f08e7b
Author: Russ Cox <rsc@golang.org>
Date:   Thu Sep 18 20:35:36 2014 -0400

    runtime: show frames for exported runtime functions
    
    The current Windows build failure happens because by
    default runtime frames are excluded from stack traces.
    Apparently the Windows breakpoint path dies with an
    ordinary panic, while the Unix path dies with a throw.
    Breakpoint is a strange function and I don't mind that it's
    a little different on the two operating systems.
    
    The panic squelches runtime frames but the throw shows them,
    because throw is considered something that shouldn't have
    happened at all, so as much detail as possible is wanted.
    
    The runtime exclusion is meant to prevents printing too much noise
    about internal runtime details. But exported functions are
    not internal details, so show exported functions.
    If the program dies because you called runtime.Breakpoint,
    it's okay to see that frame.
    This makes the Breakpoint test show Breakpoint in the
    stack trace no matter how it is handled.
    
    Should fix Windows build.
    Tested on Unix by changing Breakpoint to fault instead
    of doing a breakpoint.
    
    TBR=brainman
    CC=golang-codereviews
    https://golang.org/cl/143300043
---
 src/runtime/traceback.go | 9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)

diff --git a/src/runtime/traceback.go b/src/runtime/traceback.go
index 9e95fa33d5..a93c42186b 100644
--- a/src/runtime/traceback.go
+++ b/src/runtime/traceback.go
@@ -499,7 +499,14 @@ func showframe(f *_func, gp *g) bool {
 		return true
 	}
 
-	return traceback > 1 || f != nil && contains(name, ".") && !hasprefix(name, "runtime.")
+	return traceback > 1 || f != nil && contains(name, ".") && (!hasprefix(name, "runtime.") || isExportedRuntime(name))
+}
+
+// isExportedRuntime reports whether name is an exported runtime function.
+// It is only for runtime functions, so ASCII A-Z is fine.
+func isExportedRuntime(name string) bool {
+	const n = len("runtime.")
+	return len(name) > n && name[:n] == "runtime." && 'A' <= name[n] && name[n] <= 'Z'
 }
 
 var gStatusStrings = [...]string{
