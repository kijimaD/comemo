commit 3f0f24df7b0017739b415e75bc4375a1483bd1a1
Author: Austin Clements <austin@google.com>
Date:   Wed Nov 30 10:43:14 2016 -0500

    runtime: use standard comment style in cgocall
    
    Change-Id: I9f2c2da4aa512729ae40562b06601da95ba50d6f
    Reviewed-on: https://go-review.googlesource.com/33689
    Reviewed-by: Brad Fitzpatrick <bradfitz@golang.org>
    Reviewed-by: Keith Randall <khr@golang.org>
---
 src/runtime/cgocall.go | 26 +++++++++++---------------
 1 file changed, 11 insertions(+), 15 deletions(-)

diff --git a/src/runtime/cgocall.go b/src/runtime/cgocall.go
index 86091c7a4d..dc4a9a9820 100644
--- a/src/runtime/cgocall.go
+++ b/src/runtime/cgocall.go
@@ -104,10 +104,8 @@ func cgocall(fn, arg unsafe.Pointer) int32 {
 		racereleasemerge(unsafe.Pointer(&racecgosync))
 	}
 
-	/*
-	 * Lock g to m to ensure we stay on the same stack if we do a
-	 * cgo callback. In case of panic, unwindm calls endcgo.
-	 */
+	// Lock g to m to ensure we stay on the same stack if we do a
+	// cgo callback. In case of panic, unwindm calls endcgo.
 	lockOSThread()
 	mp := getg().m
 	mp.ncgocall++
@@ -116,17 +114,15 @@ func cgocall(fn, arg unsafe.Pointer) int32 {
 	// Reset traceback.
 	mp.cgoCallers[0] = 0
 
-	/*
-	 * Announce we are entering a system call
-	 * so that the scheduler knows to create another
-	 * M to run goroutines while we are in the
-	 * foreign code.
-	 *
-	 * The call to asmcgocall is guaranteed not to
-	 * split the stack and does not allocate memory,
-	 * so it is safe to call while "in a system call", outside
-	 * the $GOMAXPROCS accounting.
-	 */
+	// Announce we are entering a system call
+	// so that the scheduler knows to create another
+	// M to run goroutines while we are in the
+	// foreign code.
+	//
+	// The call to asmcgocall is guaranteed not to
+	// split the stack and does not allocate memory,
+	// so it is safe to call while "in a system call", outside
+	// the $GOMAXPROCS accounting.
 	entersyscall(0)
 	errno := asmcgocall(fn, arg)
 	exitsyscall(0)
