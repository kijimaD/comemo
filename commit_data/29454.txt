commit b265d51789ea7ccf68787ebb30a2cdf03cc9d4fe
Author: Keith Randall <khr@golang.org>
Date:   Thu Sep 15 13:29:17 2016 -0700

    test,cmd/compile: remove _ssa file suffix
    
    Everything is SSA now.
    
    Update #16357
    
    Change-Id: I436dbe367b863ee81a3695a7d653ba4bfc5b0f6c
    Reviewed-on: https://go-review.googlesource.com/29232
    Reviewed-by: Brad Fitzpatrick <bradfitz@golang.org>
    Run-TryBot: Brad Fitzpatrick <bradfitz@golang.org>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
---
 src/cmd/compile/internal/gc/ssa_test.go            | 46 +++++++++++-----------
 .../gc/testdata/{addressed_ssa.go => addressed.go} |  0
 .../gc/testdata/{append_ssa.go => append.go}       |  0
 .../gc/testdata/{arith_ssa.go => arith.go}         |  0
 .../{arithBoundary_ssa.go => arithBoundary.go}     |  0
 .../testdata/{arithConst_ssa.go => arithConst.go}  |  0
 .../gc/testdata/{array_ssa.go => array.go}         |  0
 .../gc/testdata/{assert_ssa.go => assert.go}       |  0
 .../gc/testdata/{break_ssa.go => break.go}         |  0
 .../internal/gc/testdata/{chan_ssa.go => chan.go}  |  0
 .../gc/testdata/{closure_ssa.go => closure.go}     |  0
 .../internal/gc/testdata/{cmp_ssa.go => cmp.go}    |  0
 .../gc/testdata/{compound_ssa.go => compound.go}   |  0
 .../internal/gc/testdata/{copy_ssa.go => copy.go}  |  0
 .../internal/gc/testdata/{ctl_ssa.go => ctl.go}    |  0
 .../{deferNoReturn_ssa.go => deferNoReturn.go}     |  0
 .../gc/testdata/{divbyzero_ssa.go => divbyzero.go} |  0
 .../internal/gc/testdata/{fp_ssa.go => fp.go}      |  0
 .../internal/gc/testdata/gen/arithBoundaryGen.go   |  4 +-
 .../internal/gc/testdata/gen/arithConstGen.go      |  4 +-
 .../compile/internal/gc/testdata/gen/copyGen.go    |  4 +-
 .../compile/internal/gc/testdata/gen/zeroGen.go    |  4 +-
 .../gc/testdata/{loadstore_ssa.go => loadstore.go} |  0
 .../internal/gc/testdata/{map_ssa.go => map.go}    |  0
 .../internal/gc/testdata/{phi_ssa.go => phi.go}    |  0
 .../gc/testdata/{regalloc_ssa.go => regalloc.go}   |  0
 .../gc/testdata/{short_ssa.go => short.go}         |  0
 .../gc/testdata/{string_ssa.go => string.go}       |  0
 .../gc/testdata/{unsafe_ssa.go => unsafe.go}       |  0
 .../internal/gc/testdata/{zero_ssa.go => zero.go}  |  0
 test/{live_ssa.go => live.go}                      |  0
 test/{nilptr3_ssa.go => nilptr3.go}                |  0
 32 files changed, 31 insertions(+), 31 deletions(-)

diff --git a/src/cmd/compile/internal/gc/ssa_test.go b/src/cmd/compile/internal/gc/ssa_test.go
index f45ca864c9..b54ada9544 100644
--- a/src/cmd/compile/internal/gc/ssa_test.go
+++ b/src/cmd/compile/internal/gc/ssa_test.go
@@ -40,63 +40,63 @@ func doTest(t *testing.T, filename string, kind string) {
 }
 
 // TestShortCircuit tests OANDAND and OOROR expressions and short circuiting.
-func TestShortCircuit(t *testing.T) { runTest(t, "short_ssa.go") }
+func TestShortCircuit(t *testing.T) { runTest(t, "short.go") }
 
 // TestBreakContinue tests that continue and break statements do what they say.
-func TestBreakContinue(t *testing.T) { runTest(t, "break_ssa.go") }
+func TestBreakContinue(t *testing.T) { runTest(t, "break.go") }
 
 // TestTypeAssertion tests type assertions.
-func TestTypeAssertion(t *testing.T) { runTest(t, "assert_ssa.go") }
+func TestTypeAssertion(t *testing.T) { runTest(t, "assert.go") }
 
 // TestArithmetic tests that both backends have the same result for arithmetic expressions.
 func TestArithmetic(t *testing.T) {
 	if runtime.GOARCH == "386" {
 		t.Skip("legacy 386 compiler can't handle this test")
 	}
-	runTest(t, "arith_ssa.go")
+	runTest(t, "arith.go")
 }
 
 // TestFP tests that both backends have the same result for floating point expressions.
-func TestFP(t *testing.T) { runTest(t, "fp_ssa.go") }
+func TestFP(t *testing.T) { runTest(t, "fp.go") }
 
 // TestArithmeticBoundary tests boundary results for arithmetic operations.
-func TestArithmeticBoundary(t *testing.T) { runTest(t, "arithBoundary_ssa.go") }
+func TestArithmeticBoundary(t *testing.T) { runTest(t, "arithBoundary.go") }
 
 // TestArithmeticConst tests results for arithmetic operations against constants.
-func TestArithmeticConst(t *testing.T) { runTest(t, "arithConst_ssa.go") }
+func TestArithmeticConst(t *testing.T) { runTest(t, "arithConst.go") }
 
-func TestChan(t *testing.T) { runTest(t, "chan_ssa.go") }
+func TestChan(t *testing.T) { runTest(t, "chan.go") }
 
-func TestCompound(t *testing.T) { runTest(t, "compound_ssa.go") }
+func TestCompound(t *testing.T) { runTest(t, "compound.go") }
 
-func TestCtl(t *testing.T) { runTest(t, "ctl_ssa.go") }
+func TestCtl(t *testing.T) { runTest(t, "ctl.go") }
 
-func TestLoadStore(t *testing.T) { runTest(t, "loadstore_ssa.go") }
+func TestLoadStore(t *testing.T) { runTest(t, "loadstore.go") }
 
-func TestMap(t *testing.T) { runTest(t, "map_ssa.go") }
+func TestMap(t *testing.T) { runTest(t, "map.go") }
 
-func TestRegalloc(t *testing.T) { runTest(t, "regalloc_ssa.go") }
+func TestRegalloc(t *testing.T) { runTest(t, "regalloc.go") }
 
-func TestString(t *testing.T) { runTest(t, "string_ssa.go") }
+func TestString(t *testing.T) { runTest(t, "string.go") }
 
-func TestDeferNoReturn(t *testing.T) { buildTest(t, "deferNoReturn_ssa.go") }
+func TestDeferNoReturn(t *testing.T) { buildTest(t, "deferNoReturn.go") }
 
 // TestClosure tests closure related behavior.
-func TestClosure(t *testing.T) { runTest(t, "closure_ssa.go") }
+func TestClosure(t *testing.T) { runTest(t, "closure.go") }
 
-func TestArray(t *testing.T) { runTest(t, "array_ssa.go") }
+func TestArray(t *testing.T) { runTest(t, "array.go") }
 
-func TestAppend(t *testing.T) { runTest(t, "append_ssa.go") }
+func TestAppend(t *testing.T) { runTest(t, "append.go") }
 
-func TestZero(t *testing.T) { runTest(t, "zero_ssa.go") }
+func TestZero(t *testing.T) { runTest(t, "zero.go") }
 
-func TestAddressed(t *testing.T) { runTest(t, "addressed_ssa.go") }
+func TestAddressed(t *testing.T) { runTest(t, "addressed.go") }
 
-func TestCopy(t *testing.T) { runTest(t, "copy_ssa.go") }
+func TestCopy(t *testing.T) { runTest(t, "copy.go") }
 
-func TestUnsafe(t *testing.T) { runTest(t, "unsafe_ssa.go") }
+func TestUnsafe(t *testing.T) { runTest(t, "unsafe.go") }
 
-func TestPhi(t *testing.T) { runTest(t, "phi_ssa.go") }
+func TestPhi(t *testing.T) { runTest(t, "phi.go") }
 
 func TestSlice(t *testing.T) { runTest(t, "slice.go") }
 
diff --git a/src/cmd/compile/internal/gc/testdata/addressed_ssa.go b/src/cmd/compile/internal/gc/testdata/addressed.go
similarity index 100%
rename from src/cmd/compile/internal/gc/testdata/addressed_ssa.go
rename to src/cmd/compile/internal/gc/testdata/addressed.go
diff --git a/src/cmd/compile/internal/gc/testdata/append_ssa.go b/src/cmd/compile/internal/gc/testdata/append.go
similarity index 100%
rename from src/cmd/compile/internal/gc/testdata/append_ssa.go
rename to src/cmd/compile/internal/gc/testdata/append.go
diff --git a/src/cmd/compile/internal/gc/testdata/arith_ssa.go b/src/cmd/compile/internal/gc/testdata/arith.go
similarity index 100%
rename from src/cmd/compile/internal/gc/testdata/arith_ssa.go
rename to src/cmd/compile/internal/gc/testdata/arith.go
diff --git a/src/cmd/compile/internal/gc/testdata/arithBoundary_ssa.go b/src/cmd/compile/internal/gc/testdata/arithBoundary.go
similarity index 100%
rename from src/cmd/compile/internal/gc/testdata/arithBoundary_ssa.go
rename to src/cmd/compile/internal/gc/testdata/arithBoundary.go
diff --git a/src/cmd/compile/internal/gc/testdata/arithConst_ssa.go b/src/cmd/compile/internal/gc/testdata/arithConst.go
similarity index 100%
rename from src/cmd/compile/internal/gc/testdata/arithConst_ssa.go
rename to src/cmd/compile/internal/gc/testdata/arithConst.go
diff --git a/src/cmd/compile/internal/gc/testdata/array_ssa.go b/src/cmd/compile/internal/gc/testdata/array.go
similarity index 100%
rename from src/cmd/compile/internal/gc/testdata/array_ssa.go
rename to src/cmd/compile/internal/gc/testdata/array.go
diff --git a/src/cmd/compile/internal/gc/testdata/assert_ssa.go b/src/cmd/compile/internal/gc/testdata/assert.go
similarity index 100%
rename from src/cmd/compile/internal/gc/testdata/assert_ssa.go
rename to src/cmd/compile/internal/gc/testdata/assert.go
diff --git a/src/cmd/compile/internal/gc/testdata/break_ssa.go b/src/cmd/compile/internal/gc/testdata/break.go
similarity index 100%
rename from src/cmd/compile/internal/gc/testdata/break_ssa.go
rename to src/cmd/compile/internal/gc/testdata/break.go
diff --git a/src/cmd/compile/internal/gc/testdata/chan_ssa.go b/src/cmd/compile/internal/gc/testdata/chan.go
similarity index 100%
rename from src/cmd/compile/internal/gc/testdata/chan_ssa.go
rename to src/cmd/compile/internal/gc/testdata/chan.go
diff --git a/src/cmd/compile/internal/gc/testdata/closure_ssa.go b/src/cmd/compile/internal/gc/testdata/closure.go
similarity index 100%
rename from src/cmd/compile/internal/gc/testdata/closure_ssa.go
rename to src/cmd/compile/internal/gc/testdata/closure.go
diff --git a/src/cmd/compile/internal/gc/testdata/cmp_ssa.go b/src/cmd/compile/internal/gc/testdata/cmp.go
similarity index 100%
rename from src/cmd/compile/internal/gc/testdata/cmp_ssa.go
rename to src/cmd/compile/internal/gc/testdata/cmp.go
diff --git a/src/cmd/compile/internal/gc/testdata/compound_ssa.go b/src/cmd/compile/internal/gc/testdata/compound.go
similarity index 100%
rename from src/cmd/compile/internal/gc/testdata/compound_ssa.go
rename to src/cmd/compile/internal/gc/testdata/compound.go
diff --git a/src/cmd/compile/internal/gc/testdata/copy_ssa.go b/src/cmd/compile/internal/gc/testdata/copy.go
similarity index 100%
rename from src/cmd/compile/internal/gc/testdata/copy_ssa.go
rename to src/cmd/compile/internal/gc/testdata/copy.go
diff --git a/src/cmd/compile/internal/gc/testdata/ctl_ssa.go b/src/cmd/compile/internal/gc/testdata/ctl.go
similarity index 100%
rename from src/cmd/compile/internal/gc/testdata/ctl_ssa.go
rename to src/cmd/compile/internal/gc/testdata/ctl.go
diff --git a/src/cmd/compile/internal/gc/testdata/deferNoReturn_ssa.go b/src/cmd/compile/internal/gc/testdata/deferNoReturn.go
similarity index 100%
rename from src/cmd/compile/internal/gc/testdata/deferNoReturn_ssa.go
rename to src/cmd/compile/internal/gc/testdata/deferNoReturn.go
diff --git a/src/cmd/compile/internal/gc/testdata/divbyzero_ssa.go b/src/cmd/compile/internal/gc/testdata/divbyzero.go
similarity index 100%
rename from src/cmd/compile/internal/gc/testdata/divbyzero_ssa.go
rename to src/cmd/compile/internal/gc/testdata/divbyzero.go
diff --git a/src/cmd/compile/internal/gc/testdata/fp_ssa.go b/src/cmd/compile/internal/gc/testdata/fp.go
similarity index 100%
rename from src/cmd/compile/internal/gc/testdata/fp_ssa.go
rename to src/cmd/compile/internal/gc/testdata/fp.go
diff --git a/src/cmd/compile/internal/gc/testdata/gen/arithBoundaryGen.go b/src/cmd/compile/internal/gc/testdata/gen/arithBoundaryGen.go
index be0aad5ff8..866431e1ae 100644
--- a/src/cmd/compile/internal/gc/testdata/gen/arithBoundaryGen.go
+++ b/src/cmd/compile/internal/gc/testdata/gen/arithBoundaryGen.go
@@ -5,7 +5,7 @@
 // This program generates a test to verify that the standard arithmetic
 // operators properly handle some special cases. The test file should be
 // generated with a known working version of go.
-// launch with `go run arithBoundaryGen.go` a file called arithBoundary_ssa.go
+// launch with `go run arithBoundaryGen.go` a file called arithBoundary.go
 // will be written into the parent directory containing the tests
 
 package main
@@ -207,7 +207,7 @@ func main() {
 	}
 
 	// write to file
-	err = ioutil.WriteFile("../arithBoundary_ssa.go", src, 0666)
+	err = ioutil.WriteFile("../arithBoundary.go", src, 0666)
 	if err != nil {
 		log.Fatalf("can't write output: %v\n", err)
 	}
diff --git a/src/cmd/compile/internal/gc/testdata/gen/arithConstGen.go b/src/cmd/compile/internal/gc/testdata/gen/arithConstGen.go
index 5559050143..97434ea34c 100644
--- a/src/cmd/compile/internal/gc/testdata/gen/arithConstGen.go
+++ b/src/cmd/compile/internal/gc/testdata/gen/arithConstGen.go
@@ -5,7 +5,7 @@
 // This program generates a test to verify that the standard arithmetic
 // operators properly handle const cases. The test file should be
 // generated with a known working version of go.
-// launch with `go run arithConstGen.go` a file called arithConst_ssa.go
+// launch with `go run arithConstGen.go` a file called arithConst.go
 // will be written into the parent directory containing the tests
 
 package main
@@ -295,7 +295,7 @@ func main() {
 	}
 
 	// write to file
-	err = ioutil.WriteFile("../arithConst_ssa.go", src, 0666)
+	err = ioutil.WriteFile("../arithConst.go", src, 0666)
 	if err != nil {
 		log.Fatalf("can't write output: %v\n", err)
 	}
diff --git a/src/cmd/compile/internal/gc/testdata/gen/copyGen.go b/src/cmd/compile/internal/gc/testdata/gen/copyGen.go
index a699fac6c0..2d2240c435 100644
--- a/src/cmd/compile/internal/gc/testdata/gen/copyGen.go
+++ b/src/cmd/compile/internal/gc/testdata/gen/copyGen.go
@@ -15,7 +15,7 @@ import (
 // This program generates tests to verify that copying operations
 // copy the data they are supposed to and clobber no adjacent values.
 
-// run as `go run copyGen.go`.  A file called copy_ssa.go
+// run as `go run copyGen.go`.  A file called copy.go
 // will be written into the parent directory containing the tests.
 
 var sizes = [...]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 16, 17, 23, 24, 25, 31, 32, 33, 63, 64, 65, 1023, 1024, 1025, 1024 + 7, 1024 + 8, 1024 + 9, 1024 + 15, 1024 + 16, 1024 + 17}
@@ -86,7 +86,7 @@ func main() {
 	}
 
 	// write to file
-	err = ioutil.WriteFile("../copy_ssa.go", src, 0666)
+	err = ioutil.WriteFile("../copy.go", src, 0666)
 	if err != nil {
 		log.Fatalf("can't write output: %v\n", err)
 	}
diff --git a/src/cmd/compile/internal/gc/testdata/gen/zeroGen.go b/src/cmd/compile/internal/gc/testdata/gen/zeroGen.go
index 90e8029f3f..6482f07fda 100644
--- a/src/cmd/compile/internal/gc/testdata/gen/zeroGen.go
+++ b/src/cmd/compile/internal/gc/testdata/gen/zeroGen.go
@@ -15,7 +15,7 @@ import (
 // This program generates tests to verify that zeroing operations
 // zero the data they are supposed to and clobber no adjacent values.
 
-// run as `go run zeroGen.go`.  A file called zero_ssa.go
+// run as `go run zeroGen.go`.  A file called zero.go
 // will be written into the parent directory containing the tests.
 
 var sizes = [...]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 16, 17, 23, 24, 25, 31, 32, 33, 63, 64, 65, 1023, 1024, 1025}
@@ -81,7 +81,7 @@ func main() {
 	}
 
 	// write to file
-	err = ioutil.WriteFile("../zero_ssa.go", src, 0666)
+	err = ioutil.WriteFile("../zero.go", src, 0666)
 	if err != nil {
 		log.Fatalf("can't write output: %v\n", err)
 	}
diff --git a/src/cmd/compile/internal/gc/testdata/loadstore_ssa.go b/src/cmd/compile/internal/gc/testdata/loadstore.go
similarity index 100%
rename from src/cmd/compile/internal/gc/testdata/loadstore_ssa.go
rename to src/cmd/compile/internal/gc/testdata/loadstore.go
diff --git a/src/cmd/compile/internal/gc/testdata/map_ssa.go b/src/cmd/compile/internal/gc/testdata/map.go
similarity index 100%
rename from src/cmd/compile/internal/gc/testdata/map_ssa.go
rename to src/cmd/compile/internal/gc/testdata/map.go
diff --git a/src/cmd/compile/internal/gc/testdata/phi_ssa.go b/src/cmd/compile/internal/gc/testdata/phi.go
similarity index 100%
rename from src/cmd/compile/internal/gc/testdata/phi_ssa.go
rename to src/cmd/compile/internal/gc/testdata/phi.go
diff --git a/src/cmd/compile/internal/gc/testdata/regalloc_ssa.go b/src/cmd/compile/internal/gc/testdata/regalloc.go
similarity index 100%
rename from src/cmd/compile/internal/gc/testdata/regalloc_ssa.go
rename to src/cmd/compile/internal/gc/testdata/regalloc.go
diff --git a/src/cmd/compile/internal/gc/testdata/short_ssa.go b/src/cmd/compile/internal/gc/testdata/short.go
similarity index 100%
rename from src/cmd/compile/internal/gc/testdata/short_ssa.go
rename to src/cmd/compile/internal/gc/testdata/short.go
diff --git a/src/cmd/compile/internal/gc/testdata/string_ssa.go b/src/cmd/compile/internal/gc/testdata/string.go
similarity index 100%
rename from src/cmd/compile/internal/gc/testdata/string_ssa.go
rename to src/cmd/compile/internal/gc/testdata/string.go
diff --git a/src/cmd/compile/internal/gc/testdata/unsafe_ssa.go b/src/cmd/compile/internal/gc/testdata/unsafe.go
similarity index 100%
rename from src/cmd/compile/internal/gc/testdata/unsafe_ssa.go
rename to src/cmd/compile/internal/gc/testdata/unsafe.go
diff --git a/src/cmd/compile/internal/gc/testdata/zero_ssa.go b/src/cmd/compile/internal/gc/testdata/zero.go
similarity index 100%
rename from src/cmd/compile/internal/gc/testdata/zero_ssa.go
rename to src/cmd/compile/internal/gc/testdata/zero.go
diff --git a/test/live_ssa.go b/test/live.go
similarity index 100%
rename from test/live_ssa.go
rename to test/live.go
diff --git a/test/nilptr3_ssa.go b/test/nilptr3.go
similarity index 100%
rename from test/nilptr3_ssa.go
rename to test/nilptr3.go
