commit d7d235c92f1329359194a8c042b2099ef60ec17c
Author: Ian Lance Taylor <iant@golang.org>
Date:   Thu Apr 6 16:38:47 2023 -0700

    runtime: permit core dumps in darwin-amd64
    
    Previously we did not permit them as Go programs generated enormous
    core dumps on macOS. However, according to an investigation in #59446,
    they are OK now.
    
    For #59446
    
    Change-Id: I1d7a3f500a6bc525aa6de8dfa8a1d8dbb15feadc
    Reviewed-on: https://go-review.googlesource.com/c/go/+/483015
    TryBot-Result: Gopher Robot <gobot@golang.org>
    Run-TryBot: Ian Lance Taylor <iant@golang.org>
    Reviewed-by: Michael Knyszek <mknyszek@google.com>
    Reviewed-by: Michael Pratt <mpratt@google.com>
---
 src/runtime/signal_unix.go | 10 ----------
 1 file changed, 10 deletions(-)

diff --git a/src/runtime/signal_unix.go b/src/runtime/signal_unix.go
index c7edbcd239..66c1ddaac3 100644
--- a/src/runtime/signal_unix.go
+++ b/src/runtime/signal_unix.go
@@ -973,16 +973,6 @@ func raisebadsignal(sig uint32, c *sigctxt) {
 
 //go:nosplit
 func crash() {
-	// OS X core dumps are linear dumps of the mapped memory,
-	// from the first virtual byte to the last, with zeros in the gaps.
-	// Because of the way we arrange the address space on 64-bit systems,
-	// this means the OS X core file will be >128 GB and even on a zippy
-	// workstation can take OS X well over an hour to write (uninterruptible).
-	// Save users from making that mistake.
-	if GOOS == "darwin" && GOARCH == "amd64" {
-		return
-	}
-
 	dieFromSignal(_SIGABRT)
 }
 
