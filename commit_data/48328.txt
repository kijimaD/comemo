commit 4c8f48ed4f3db0e3ba376e6b7a261d26b41d8dd0
Author: Alex Brainman <alex.brainman@gmail.com>
Date:   Thu Apr 29 15:38:56 2021 +1000

    syscall: do not change stdio handle inheritance
    
    Before the CL 288297 all Go process handles had to be made
    non-inheritable - otherwise they would escape into the child process.
    But now this is not necessary.
    
    This CL stops changing inheritance flag of stdint, stdout and stderr
    handles.
    
    Fixes #44876
    
    Change-Id: Ib8fcf8066c30282293d96c34486b01b4c04f7116
    Reviewed-on: https://go-review.googlesource.com/c/go/+/316269
    Trust: Alex Brainman <alex.brainman@gmail.com>
    Trust: Jason A. Donenfeld <Jason@zx2c4.com>
    Run-TryBot: Alex Brainman <alex.brainman@gmail.com>
    TryBot-Result: Go Bot <gobot@golang.org>
    Reviewed-by: Jason A. Donenfeld <Jason@zx2c4.com>
---
 src/syscall/syscall_windows.go      |  1 -
 src/syscall/syscall_windows_test.go | 65 +++++++++++++++++++++++++++++++++++++
 2 files changed, 65 insertions(+), 1 deletion(-)

diff --git a/src/syscall/syscall_windows.go b/src/syscall/syscall_windows.go
index f9f78bd2b3..fa0b5d959a 100644
--- a/src/syscall/syscall_windows.go
+++ b/src/syscall/syscall_windows.go
@@ -472,7 +472,6 @@ var (
 
 func getStdHandle(h int) (fd Handle) {
 	r, _ := GetStdHandle(h)
-	CloseOnExec(r)
 	return r
 }
 
diff --git a/src/syscall/syscall_windows_test.go b/src/syscall/syscall_windows_test.go
index b8ec6bee39..ea8fa191dc 100644
--- a/src/syscall/syscall_windows_test.go
+++ b/src/syscall/syscall_windows_test.go
@@ -5,8 +5,12 @@
 package syscall_test
 
 import (
+	"fmt"
+	"internal/testenv"
 	"os"
+	"os/exec"
 	"path/filepath"
+	"strings"
 	"syscall"
 	"testing"
 )
@@ -71,3 +75,64 @@ func TestTOKEN_ALL_ACCESS(t *testing.T) {
 		t.Errorf("TOKEN_ALL_ACCESS = %x, want 0xF01FF", syscall.TOKEN_ALL_ACCESS)
 	}
 }
+
+func TestStdioAreInheritable(t *testing.T) {
+	testenv.MustHaveGoBuild(t)
+	testenv.MustHaveExecPath(t, "gcc")
+
+	tmpdir := t.TempDir()
+
+	// build go dll
+	const dlltext = `
+package main
+
+import "C"
+import (
+	"fmt"
+)
+
+//export HelloWorld
+func HelloWorld() {
+	fmt.Println("Hello World")
+}
+
+func main() {}
+`
+	dllsrc := filepath.Join(tmpdir, "helloworld.go")
+	err := os.WriteFile(dllsrc, []byte(dlltext), 0644)
+	if err != nil {
+		t.Fatal(err)
+	}
+	dll := filepath.Join(tmpdir, "helloworld.dll")
+	cmd := exec.Command(testenv.GoToolPath(t), "build", "-o", dll, "-buildmode", "c-shared", dllsrc)
+	out, err := testenv.CleanCmdEnv(cmd).CombinedOutput()
+	if err != nil {
+		t.Fatalf("failed to build go library: %s\n%s", err, out)
+	}
+
+	// run powershell script
+	psscript := fmt.Sprintf(`
+hostname;
+$signature = " [DllImport("%q")] public static extern void HelloWorld(); ";
+Add-Type -MemberDefinition $signature -Name World -Namespace Hello;
+[Hello.World]::HelloWorld();
+hostname;
+`, dll)
+	psscript = strings.ReplaceAll(psscript, "\n", "")
+	out, err = exec.Command("powershell", "-Command", psscript).CombinedOutput()
+	if err != nil {
+		t.Fatalf("Powershell command failed: %v: %v", err, string(out))
+	}
+
+	hostname, err := os.Hostname()
+	if err != nil {
+		t.Fatal(err)
+	}
+
+	have := strings.ReplaceAll(string(out), "\n", "")
+	have = strings.ReplaceAll(have, "\r", "")
+	want := fmt.Sprintf("%sHello World%s", hostname, hostname)
+	if have != want {
+		t.Fatalf("Powershell command output is wrong: got %q, want %q", have, want)
+	}
+}
