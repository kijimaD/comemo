commit f260ae65232a88c9c6832bd954c6e0660d0773d4
Author: Matthew Dempsky <mdempsky@google.com>
Date:   Thu Sep 21 14:26:21 2017 -0700

    cmd/compile/internal/types: unexport Type.Copy
    
    It's only used/needed by SubstAny.
    
    CL prepared with gorename.
    
    Change-Id: I243138f9dcc4e6af9b81a7746414e6d7b3ba10a2
    Reviewed-on: https://go-review.googlesource.com/65311
    Reviewed-by: Daniel Martí <mvdan@mvdan.cc>
    Run-TryBot: Daniel Martí <mvdan@mvdan.cc>
---
 src/cmd/compile/internal/types/type.go | 18 +++++++++---------
 1 file changed, 9 insertions(+), 9 deletions(-)

diff --git a/src/cmd/compile/internal/types/type.go b/src/cmd/compile/internal/types/type.go
index da5b095618..7033dd2b9a 100644
--- a/src/cmd/compile/internal/types/type.go
+++ b/src/cmd/compile/internal/types/type.go
@@ -585,28 +585,28 @@ func SubstAny(t *Type, types *[]*Type) *Type {
 	case TPTR32, TPTR64:
 		elem := SubstAny(t.Elem(), types)
 		if elem != t.Elem() {
-			t = t.Copy()
+			t = t.copy()
 			t.Extra = Ptr{Elem: elem}
 		}
 
 	case TARRAY:
 		elem := SubstAny(t.Elem(), types)
 		if elem != t.Elem() {
-			t = t.Copy()
+			t = t.copy()
 			t.Extra.(*Array).Elem = elem
 		}
 
 	case TSLICE:
 		elem := SubstAny(t.Elem(), types)
 		if elem != t.Elem() {
-			t = t.Copy()
+			t = t.copy()
 			t.Extra = Slice{Elem: elem}
 		}
 
 	case TCHAN:
 		elem := SubstAny(t.Elem(), types)
 		if elem != t.Elem() {
-			t = t.Copy()
+			t = t.copy()
 			t.Extra.(*Chan).Elem = elem
 		}
 
@@ -614,7 +614,7 @@ func SubstAny(t *Type, types *[]*Type) *Type {
 		key := SubstAny(t.Key(), types)
 		val := SubstAny(t.Val(), types)
 		if key != t.Key() || val != t.Val() {
-			t = t.Copy()
+			t = t.copy()
 			t.Extra.(*Map).Key = key
 			t.Extra.(*Map).Val = val
 		}
@@ -624,7 +624,7 @@ func SubstAny(t *Type, types *[]*Type) *Type {
 		params := SubstAny(t.Params(), types)
 		results := SubstAny(t.Results(), types)
 		if recvs != t.Recvs() || params != t.Params() || results != t.Results() {
-			t = t.Copy()
+			t = t.copy()
 			t.FuncType().Receiver = recvs
 			t.FuncType().Results = results
 			t.FuncType().Params = params
@@ -645,7 +645,7 @@ func SubstAny(t *Type, types *[]*Type) *Type {
 			nfs[i].Type = nft
 		}
 		if nfs != nil {
-			t = t.Copy()
+			t = t.copy()
 			t.SetFields(nfs)
 		}
 	}
@@ -653,8 +653,8 @@ func SubstAny(t *Type, types *[]*Type) *Type {
 	return t
 }
 
-// Copy returns a shallow copy of the Type.
-func (t *Type) Copy() *Type {
+// copy returns a shallow copy of the Type.
+func (t *Type) copy() *Type {
 	if t == nil {
 		return nil
 	}
