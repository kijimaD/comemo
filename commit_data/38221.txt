commit e2d70b8b4b7a9450b66e3516f36e75f46b7fb80f
Author: Russ Cox <rsc@golang.org>
Date:   Wed Oct 3 20:28:47 2018 -0400

    regexp: simplify BenchmarkCompileOnepass
    
    One benchmark is fine.
    Having one per test case is overkill.
    
    Change-Id: Id4ce789484dab1e79026bdd23cbcd63b2eaceb3f
    Reviewed-on: https://go-review.googlesource.com/c/139777
    Run-TryBot: Russ Cox <rsc@golang.org>
    Reviewed-by: Brad Fitzpatrick <bradfitz@golang.org>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
---
 src/regexp/onepass_test.go | 20 +++++---------------
 1 file changed, 5 insertions(+), 15 deletions(-)

diff --git a/src/regexp/onepass_test.go b/src/regexp/onepass_test.go
index b1caa44515..6b622ac356 100644
--- a/src/regexp/onepass_test.go
+++ b/src/regexp/onepass_test.go
@@ -227,21 +227,11 @@ func TestRunOnePass(t *testing.T) {
 }
 
 func BenchmarkCompileOnepass(b *testing.B) {
-	for _, test := range onePassTests {
-		if test.onePass == notOnePass {
-			continue
-		}
-		name := test.re
-		if len(name) > 20 {
-			name = name[:20] + "..."
+	b.ReportAllocs()
+	const re = `^a.[l-nA-Cg-j]?e$`
+	for i := 0; i < b.N; i++ {
+		if _, err := Compile(re); err != nil {
+			b.Fatal(err)
 		}
-		b.Run(name, func(b *testing.B) {
-			b.ReportAllocs()
-			for i := 0; i < b.N; i++ {
-				if _, err := Compile(test.re); err != nil {
-					b.Fatal(err)
-				}
-			}
-		})
 	}
 }
