commit b20163e9e48fe300112de18f75cfa77c04968f2a
Author: David Symonds <dsymonds@golang.org>
Date:   Tue Apr 17 16:37:35 2012 +1000

    flag: update style.
    
    R=golang-dev, r, r
    CC=golang-dev
    https://golang.org/cl/6051044
---
 src/pkg/flag/flag.go | 10 ++++++----
 1 file changed, 6 insertions(+), 4 deletions(-)

diff --git a/src/pkg/flag/flag.go b/src/pkg/flag/flag.go
index c28d0e7207..f0842a18a2 100644
--- a/src/pkg/flag/flag.go
+++ b/src/pkg/flag/flag.go
@@ -7,9 +7,11 @@
 
 	Usage:
 
-	Define flags using flag.String(), Bool(), Int(), etc. Example:
+	Define flags using flag.String(), Bool(), Int(), etc.
+
+	This declares an integer flag, -flagname, stored in the pointer ip, with type *int.
 		import "flag"
-		var ip *int = flag.Int("flagname", 1234, "help message for flagname")
+		var ip = flag.Int("flagname", 1234, "help message for flagname")
 	If you like, you can bind the flag to a variable using the Var() functions.
 		var flagvar int
 		func init() {
@@ -26,8 +28,8 @@
 
 	Flags may then be used directly. If you're using the flags themselves,
 	they are all pointers; if you bind to variables, they're values.
-		fmt.Println("ip has value ", *ip);
-		fmt.Println("flagvar has value ", flagvar);
+		fmt.Println("ip has value ", *ip)
+		fmt.Println("flagvar has value ", flagvar)
 
 	After parsing, the arguments after the flag are available as the
 	slice flag.Args() or individually as flag.Arg(i).
