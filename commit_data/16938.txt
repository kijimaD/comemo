commit 02ad82fe153ee64cde7823a4ca2fb594624bb82e
Author: Rob Pike <r@golang.org>
Date:   Wed Jul 31 14:08:47 2013 +1000

    fmt: put a ! in all error output generated by Printf-like functions
    Fixes #5730.
    
    R=golang-dev, dsymonds
    CC=golang-dev
    https://golang.org/cl/12141043
---
 src/pkg/fmt/doc.go      |  4 ++--
 src/pkg/fmt/fmt_test.go | 30 +++++++++++++++---------------
 src/pkg/fmt/print.go    |  6 +++---
 3 files changed, 20 insertions(+), 20 deletions(-)

diff --git a/src/pkg/fmt/doc.go b/src/pkg/fmt/doc.go
index 2910198508..29fc6e5e3a 100644
--- a/src/pkg/fmt/doc.go
+++ b/src/pkg/fmt/doc.go
@@ -156,8 +156,8 @@
 			Printf("%*s", 4.5, "hi"):  %!(BADWIDTH)hi
 			Printf("%.*s", 4.5, "hi"): %!(BADPREC)hi
 		Invalid or invalid use of argument index: %!(BADINDEX)
-			Printf("%*[2]d", 7):       %d(BADINDEX)
-			Printf("%.[2]d", 7):       %d(BADINDEX)
+			Printf("%*[2]d", 7):       %d!(BADINDEX)
+			Printf("%.[2]d", 7):       %d!(BADINDEX)
 
 	All errors begin with the string "%!" followed sometimes
 	by a single character (the verb) and end with a parenthesized
diff --git a/src/pkg/fmt/fmt_test.go b/src/pkg/fmt/fmt_test.go
index 85173aa4bc..d3df109cde 100644
--- a/src/pkg/fmt/fmt_test.go
+++ b/src/pkg/fmt/fmt_test.go
@@ -563,17 +563,17 @@ var reorderTests = []struct {
 	{"%d %d %d %#[1]o %#o %#o", SE{11, 12, 13}, "11 12 13 013 014 015"},
 
 	// Erroneous cases.
-	{"%[d", SE{2, 1}, "%d(BADINDEX)"},
+	{"%[d", SE{2, 1}, "%d!(BADINDEX)"},
 	{"%]d", SE{2, 1}, "%!](int=2)d%!(EXTRA int=1)"},
-	{"%[]d", SE{2, 1}, "%d(BADINDEX)"},
-	{"%[-3]d", SE{2, 1}, "%d(BADINDEX)"},
-	{"%[99]d", SE{2, 1}, "%d(BADINDEX)"},
+	{"%[]d", SE{2, 1}, "%d!(BADINDEX)"},
+	{"%[-3]d", SE{2, 1}, "%d!(BADINDEX)"},
+	{"%[99]d", SE{2, 1}, "%d!(BADINDEX)"},
 	{"%[3]", SE{2, 1}, "%!(NOVERB)"},
-	{"%[1].2d", SE{5, 6}, "%d(BADINDEX)"},
-	{"%[1]2d", SE{2, 1}, "%d(BADINDEX)"},
-	{"%3.[2]d", SE{7}, "%d(BADINDEX)"},
-	{"%.[2]d", SE{7}, "%d(BADINDEX)"},
-	{"%d %d %d %#[1]o %#o %#o %#o", SE{11, 12, 13}, "11 12 13 013 014 015 %o(MISSING)"},
+	{"%[1].2d", SE{5, 6}, "%d!(BADINDEX)"},
+	{"%[1]2d", SE{2, 1}, "%d!(BADINDEX)"},
+	{"%3.[2]d", SE{7}, "%d!(BADINDEX)"},
+	{"%.[2]d", SE{7}, "%d!(BADINDEX)"},
+	{"%d %d %d %#[1]o %#o %#o %#o", SE{11, 12, 13}, "11 12 13 013 014 015 %o!(MISSING)"},
 }
 
 func TestReorder(t *testing.T) {
@@ -877,16 +877,16 @@ var panictests = []struct {
 }{
 	// String
 	{"%s", (*Panic)(nil), "<nil>"}, // nil pointer special case
-	{"%s", Panic{io.ErrUnexpectedEOF}, "%s(PANIC=unexpected EOF)"},
-	{"%s", Panic{3}, "%s(PANIC=3)"},
+	{"%s", Panic{io.ErrUnexpectedEOF}, "%s!(PANIC=unexpected EOF)"},
+	{"%s", Panic{3}, "%s!(PANIC=3)"},
 	// GoString
 	{"%#v", (*Panic)(nil), "<nil>"}, // nil pointer special case
-	{"%#v", Panic{io.ErrUnexpectedEOF}, "%v(PANIC=unexpected EOF)"},
-	{"%#v", Panic{3}, "%v(PANIC=3)"},
+	{"%#v", Panic{io.ErrUnexpectedEOF}, "%v!(PANIC=unexpected EOF)"},
+	{"%#v", Panic{3}, "%v!(PANIC=3)"},
 	// Format
 	{"%s", (*PanicF)(nil), "<nil>"}, // nil pointer special case
-	{"%s", PanicF{io.ErrUnexpectedEOF}, "%s(PANIC=unexpected EOF)"},
-	{"%s", PanicF{3}, "%s(PANIC=3)"},
+	{"%s", PanicF{io.ErrUnexpectedEOF}, "%s!(PANIC=unexpected EOF)"},
+	{"%s", PanicF{3}, "%s!(PANIC=3)"},
 }
 
 func TestPanics(t *testing.T) {
diff --git a/src/pkg/fmt/print.go b/src/pkg/fmt/print.go
index fd37b5ac64..bca2d35fb0 100644
--- a/src/pkg/fmt/print.go
+++ b/src/pkg/fmt/print.go
@@ -21,9 +21,9 @@ var (
 	nilParenBytes   = []byte("(nil)")
 	nilBytes        = []byte("nil")
 	mapBytes        = []byte("map[")
-	missingBytes    = []byte("(MISSING)")
-	badIndexBytes   = []byte("(BADINDEX)")
-	panicBytes      = []byte("(PANIC=")
+	missingBytes    = []byte("!(MISSING)")
+	badIndexBytes   = []byte("!(BADINDEX)")
+	panicBytes      = []byte("!(PANIC=")
 	extraBytes      = []byte("%!(EXTRA ")
 	irparenBytes    = []byte("i)")
 	bytesBytes      = []byte("[]byte{")
