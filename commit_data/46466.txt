commit bfa97ba48fa2924d9c2da1dca01fdb65b44cdb5f
Author: Matthew Dempsky <mdempsky@google.com>
Date:   Fri Jan 1 04:51:22 2021 -0800

    [dev.regabi] test: add another closure test case
    
    When deciding whether a captured variable can be passed by value, the
    compiler is sensitive to the order that the OCLOSURE node is
    typechecked relative to the order that the variable is passed to
    "checkassign". Today, for an assignment like:
    
        q, g = 2, func() int { return q }
    
    we get this right because we always typecheck the full RHS expression
    list before calling checkassign on any LHS expression.
    
    But I nearly made a change that would interleave this ordering,
    causing us to call checkassign on q before typechecking the function
    literal. And alarmingly, there weren't any tests that caught this.
    
    So this commit adds one.
    
    Change-Id: I66cacd61066c7a229070861a7d973bcc434904cc
    Reviewed-on: https://go-review.googlesource.com/c/go/+/280998
    Trust: Matthew Dempsky <mdempsky@google.com>
    Run-TryBot: Matthew Dempsky <mdempsky@google.com>
    TryBot-Result: Go Bot <gobot@golang.org>
    Reviewed-by: Cuong Manh Le <cuong.manhle.vn@gmail.com>

 test/closure2.go | 14 ++++++++++++++
 1 file changed, 14 insertions(+)
