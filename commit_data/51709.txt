commit d1820f748f8d63da8ef602e53d1db224f072be8f
Author: Matthew Dempsky <mdempsky@google.com>
Date:   Mon Mar 7 05:43:40 2022 -0800

    test: add test case for #51521
    
    The test case is already working with unified IR, so add it to make
    sure we don't regress while finishing unified IR's support for
    dictionaries.
    
    Updates #51521.
    
    Change-Id: Ib7c8bf9612d30cd552e8e631fd0d487dcb177f14
    Reviewed-on: https://go-review.googlesource.com/c/go/+/390356
    Trust: Matthew Dempsky <mdempsky@google.com>
    Run-TryBot: Matthew Dempsky <mdempsky@google.com>
    TryBot-Result: Gopher Robot <gobot@golang.org>
    Reviewed-by: Cuong Manh Le <cuong.manhle.vn@gmail.com>
---
 test/run.go                  |  3 ++-
 test/typeparam/issue51521.go | 30 ++++++++++++++++++++++++++++++
 2 files changed, 32 insertions(+), 1 deletion(-)

diff --git a/test/run.go b/test/run.go
index 6339095d95..869911a426 100644
--- a/test/run.go
+++ b/test/run.go
@@ -1999,7 +1999,8 @@ var types2Failures32Bit = setOf(
 )
 
 var g3Failures = setOf(
-	"typeparam/nested.go", // -G=3 doesn't support function-local types with generics
+	"typeparam/nested.go",     // -G=3 doesn't support function-local types with generics
+	"typeparam/issue51521.go", // -G=3 produces bad panic message and link error
 )
 
 // In all of these cases, -G=0 reports reasonable errors, but either -G=0 or types2
diff --git a/test/typeparam/issue51521.go b/test/typeparam/issue51521.go
new file mode 100644
index 0000000000..5eb4e35c18
--- /dev/null
+++ b/test/typeparam/issue51521.go
@@ -0,0 +1,30 @@
+// run
+
+// Copyright 2022 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package main
+
+import (
+	"fmt"
+	"strings"
+)
+
+type I interface{ M() }
+
+func F[P I](p P) { defer catch(); p.M() }
+func G[T any]()  { defer catch(); interface{ M() T }.M(nil) }
+
+func main() {
+	F[I](nil)
+	G[int]()
+}
+
+func catch() {
+	err := recover()
+	if err, ok := err.(error); ok && strings.Contains(err.Error(), "nil pointer dereference") {
+		return
+	}
+	fmt.Println("FAIL", err)
+}
