commit f4a525452e1442c08e2a973a5871445258ed0054
Author: Austin Clements <austin@google.com>
Date:   Wed Nov 19 14:56:49 2014 -0500

    [dev.cc] runtime: add explicit siginfo.si_addr field
    
    struct siginfo_t's si_addr field is part of a union.
    Previously, we represented this union in Go using an opaque
    byte array and accessed the si_addr field using unsafe (and
    wrong on 386 and arm!) pointer arithmetic.  Since si_addr is
    the only field we use from this union, this replaces the
    opaque byte array with an explicit declaration of the si_addr
    field and accesses it directly.
    
    LGTM=minux, rsc
    R=rsc, minux
    CC=golang-codereviews
    https://golang.org/cl/179970044
---
 src/runtime/defs_linux_386.go        |  9 +++++----
 src/runtime/defs_linux_amd64.go      | 10 +++++-----
 src/runtime/defs_linux_arm.go        |  9 +++++----
 src/runtime/defs_linux_power64.go    | 10 +++++-----
 src/runtime/defs_linux_power64le.go  | 10 +++++-----
 src/runtime/signal_linux_386.go      |  2 +-
 src/runtime/signal_linux_amd64.go    |  2 +-
 src/runtime/signal_linux_arm.go      |  2 +-
 src/runtime/signal_linux_power64x.go |  2 +-
 9 files changed, 29 insertions(+), 27 deletions(-)

diff --git a/src/runtime/defs_linux_386.go b/src/runtime/defs_linux_386.go
index ddf592c91b..f55924b61c 100644
--- a/src/runtime/defs_linux_386.go
+++ b/src/runtime/defs_linux_386.go
@@ -155,10 +155,11 @@ type sigactiont struct {
 }
 
 type siginfo struct {
-	si_signo  int32
-	si_errno  int32
-	si_code   int32
-	_sifields [116]byte
+	si_signo int32
+	si_errno int32
+	si_code  int32
+	// below here is a union; si_addr is the only field we use
+	si_addr uint32
 }
 
 type sigaltstackt struct {
diff --git a/src/runtime/defs_linux_amd64.go b/src/runtime/defs_linux_amd64.go
index 7f8f5816c6..a73f475148 100644
--- a/src/runtime/defs_linux_amd64.go
+++ b/src/runtime/defs_linux_amd64.go
@@ -117,11 +117,11 @@ type sigactiont struct {
 }
 
 type siginfo struct {
-	si_signo  int32
-	si_errno  int32
-	si_code   int32
-	pad_cgo_0 [4]byte
-	_sifields [112]byte
+	si_signo int32
+	si_errno int32
+	si_code  int32
+	// below here is a union; si_addr is the only field we use
+	si_addr uint64
 }
 
 type itimerval struct {
diff --git a/src/runtime/defs_linux_arm.go b/src/runtime/defs_linux_arm.go
index a874b15941..c3a6e2f019 100644
--- a/src/runtime/defs_linux_arm.go
+++ b/src/runtime/defs_linux_arm.go
@@ -147,10 +147,11 @@ type itimerval struct {
 }
 
 type siginfo struct {
-	si_signo  int32
-	si_errno  int32
-	si_code   int32
-	_sifields [4]uint8
+	si_signo int32
+	si_errno int32
+	si_code  int32
+	// below here is a union; si_addr is the only field we use
+	si_addr uint32
 }
 
 type sigactiont struct {
diff --git a/src/runtime/defs_linux_power64.go b/src/runtime/defs_linux_power64.go
index 0dfc09caa4..f90b84874b 100644
--- a/src/runtime/defs_linux_power64.go
+++ b/src/runtime/defs_linux_power64.go
@@ -121,11 +121,11 @@ type sigactiont struct {
 }
 
 type siginfo struct {
-	si_signo  int32
-	si_errno  int32
-	si_code   int32
-	pad_cgo_0 [4]byte
-	_sifields [112]byte
+	si_signo int32
+	si_errno int32
+	si_code  int32
+	// below here is a union; si_addr is the only field we use
+	si_addr uint64
 }
 
 type itimerval struct {
diff --git a/src/runtime/defs_linux_power64le.go b/src/runtime/defs_linux_power64le.go
index 0dfc09caa4..f90b84874b 100644
--- a/src/runtime/defs_linux_power64le.go
+++ b/src/runtime/defs_linux_power64le.go
@@ -121,11 +121,11 @@ type sigactiont struct {
 }
 
 type siginfo struct {
-	si_signo  int32
-	si_errno  int32
-	si_code   int32
-	pad_cgo_0 [4]byte
-	_sifields [112]byte
+	si_signo int32
+	si_errno int32
+	si_code  int32
+	// below here is a union; si_addr is the only field we use
+	si_addr uint64
 }
 
 type itimerval struct {
diff --git a/src/runtime/signal_linux_386.go b/src/runtime/signal_linux_386.go
index 41eae80ea2..085f66e898 100644
--- a/src/runtime/signal_linux_386.go
+++ b/src/runtime/signal_linux_386.go
@@ -26,7 +26,7 @@ func (c *sigctxt) cs() uint32        { return uint32(c.regs().cs) }
 func (c *sigctxt) fs() uint32        { return uint32(c.regs().fs) }
 func (c *sigctxt) gs() uint32        { return uint32(c.regs().gs) }
 func (c *sigctxt) sigcode() uint32   { return uint32(c.info.si_code) }
-func (c *sigctxt) sigaddr() uint32   { return uint32(*(*uintptr)(add(unsafe.Pointer(c.info), 2*ptrSize))) }
+func (c *sigctxt) sigaddr() uint32   { return c.info.si_addr }
 
 func (c *sigctxt) set_eip(x uint32)     { c.regs().eip = x }
 func (c *sigctxt) set_esp(x uint32)     { c.regs().esp = x }
diff --git a/src/runtime/signal_linux_amd64.go b/src/runtime/signal_linux_amd64.go
index d94b191024..5e339b8a46 100644
--- a/src/runtime/signal_linux_amd64.go
+++ b/src/runtime/signal_linux_amd64.go
@@ -36,7 +36,7 @@ func (c *sigctxt) cs() uint64      { return uint64(c.regs().cs) }
 func (c *sigctxt) fs() uint64      { return uint64(c.regs().fs) }
 func (c *sigctxt) gs() uint64      { return uint64(c.regs().gs) }
 func (c *sigctxt) sigcode() uint64 { return uint64(c.info.si_code) }
-func (c *sigctxt) sigaddr() uint64 { return uint64(*(*uintptr)(add(unsafe.Pointer(c.info), 2*ptrSize))) }
+func (c *sigctxt) sigaddr() uint64 { return c.info.si_addr }
 
 func (c *sigctxt) set_rip(x uint64)     { c.regs().rip = x }
 func (c *sigctxt) set_rsp(x uint64)     { c.regs().rsp = x }
diff --git a/src/runtime/signal_linux_arm.go b/src/runtime/signal_linux_arm.go
index 4a5670e740..bdb4314fa8 100644
--- a/src/runtime/signal_linux_arm.go
+++ b/src/runtime/signal_linux_arm.go
@@ -35,7 +35,7 @@ func (c *sigctxt) error() uint32     { return c.regs().error_code }
 func (c *sigctxt) oldmask() uint32   { return c.regs().oldmask }
 
 func (c *sigctxt) sigcode() uint32 { return uint32(c.info.si_code) }
-func (c *sigctxt) sigaddr() uint32 { return uint32(*(*uintptr)(add(unsafe.Pointer(c.info), 2*ptrSize))) }
+func (c *sigctxt) sigaddr() uint32 { return c.info.si_addr }
 
 func (c *sigctxt) set_pc(x uint32)  { c.regs().pc = x }
 func (c *sigctxt) set_sp(x uint32)  { c.regs().sp = x }
diff --git a/src/runtime/signal_linux_power64x.go b/src/runtime/signal_linux_power64x.go
index 8f357033bf..0a406b31fc 100644
--- a/src/runtime/signal_linux_power64x.go
+++ b/src/runtime/signal_linux_power64x.go
@@ -56,7 +56,7 @@ func (c *sigctxt) xer() uint64   { return c.regs().xer }
 func (c *sigctxt) ccr() uint64   { return c.regs().ccr }
 
 func (c *sigctxt) sigcode() uint32 { return uint32(c.info.si_code) }
-func (c *sigctxt) sigaddr() uint64 { return uint64(*(*uintptr)(add(unsafe.Pointer(c.info), 2*ptrSize))) }
+func (c *sigctxt) sigaddr() uint64 { return c.info.si_addr }
 func (c *sigctxt) fault() uint64   { return c.regs().dar }
 
 func (c *sigctxt) set_r0(x uint64)   { c.regs().gpr[0] = x }
