commit b8b3196375e6b5275ae05eba8ca04662f10ab047
Author: Robert Griesemer <gri@golang.org>
Date:   Thu Feb 24 15:45:11 2022 -0800

    doc/go1.18: document method set limitation for method selectors
    
    For #51183.
    For #47694.
    
    Change-Id: If47ae074c3cd9f73b2e7f6408749d9a7d56bd8d2
    Reviewed-on: https://go-review.googlesource.com/c/go/+/387924
    Trust: Robert Griesemer <gri@golang.org>
    Reviewed-by: Ian Lance Taylor <iant@golang.org>
---
 doc/go1.18.html | 10 ++++++++++
 1 file changed, 10 insertions(+)

diff --git a/doc/go1.18.html b/doc/go1.18.html
index bc29ed4afe..53e9d9b258 100644
--- a/doc/go1.18.html
+++ b/doc/go1.18.html
@@ -135,6 +135,16 @@ Do not send CLs removing the interior tags from such phrases.
       the predeclared functions <code>real</code>, <code>imag</code>, and <code>complex</code>.
       We hope to remove this restriction in Go 1.19.
     </li>
+    <li><!-- https://golang.org/issue/51183 -->
+      The Go compiler currently only supports calling a method <code>m</code> on a value
+      <code>x</code> of type parameter type <code>P</code> if <code>m</code> is explictly
+      declared by <code>P</code>'s constraint interface.
+      Similarly, method values <code>x.m</code> and method expressions
+      <code>P.m</code> also are only supported if <code>m</code> is explicitly
+      declared by <code>P</code>, even though <code>m</code> might be in the method set
+      of <code>P</code> by virtue of the fact that all types in <code>P</code> implement
+      <code>m</code>. We hope to remove this restriction in Go 1.19.
+    </li>
     <li><!-- https://golang.org/issue/49030 -->
       Embedding a type parameter, or a pointer to a type parameter, as
       an unnamed field in a struct type is not permitted. Similarly,
