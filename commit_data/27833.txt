commit 096c900f9edbe7138e1683c8740e5e94b97d6b83
Author: Josh Bleecher Snyder <josharian@gmail.com>
Date:   Thu Apr 14 12:41:54 2016 -0700

    crypto/aes: fix vet warnings in gcm_amd64.s
    
    Notably, this fixes two incorrect argument sizes.
    
    Update #11041
    
    Change-Id: Ie4a3b1a59cd6a6707f6d2f4d3be978fc70322b46
    Reviewed-on: https://go-review.googlesource.com/22091
    Run-TryBot: Josh Bleecher Snyder <josharian@gmail.com>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Brad Fitzpatrick <bradfitz@golang.org>
---
 src/crypto/aes/gcm_amd64.s | 32 ++++++++++++++++----------------
 1 file changed, 16 insertions(+), 16 deletions(-)

diff --git a/src/crypto/aes/gcm_amd64.s b/src/crypto/aes/gcm_amd64.s
index cabb028f75..c25badd558 100644
--- a/src/crypto/aes/gcm_amd64.s
+++ b/src/crypto/aes/gcm_amd64.s
@@ -89,8 +89,8 @@ TEXT ·hasGCMAsm(SB),NOSPLIT,$0
 TEXT ·aesEncBlock(SB),NOSPLIT,$0
 	MOVQ dst+0(FP), DI
 	MOVQ src+8(FP), SI
-	MOVQ ks+16(FP), DX
-	MOVQ ks+24(FP), CX
+	MOVQ ks_base+16(FP), DX
+	MOVQ ks_len+24(FP), CX
 
 	SHRQ $2, CX
 	DECQ CX
@@ -211,8 +211,8 @@ TEXT ·gcmAesInit(SB),NOSPLIT,$0
 #define NR DX
 
 	MOVQ productTable+0(FP), dst
-	MOVQ ks+8(FP), KS
-	MOVQ ks+16(FP), NR
+	MOVQ ks_base+8(FP), KS
+	MOVQ ks_len+16(FP), NR
 
 	SHRQ $2, NR
 	DECQ NR
@@ -325,8 +325,8 @@ TEXT ·gcmAesData(SB),NOSPLIT,$0
 #define autLen DX
 
 	MOVQ productTable+0(FP), pTbl
-	MOVQ data+8(FP), aut
-	MOVQ data+16(FP), autLen
+	MOVQ data_base+8(FP), aut
+	MOVQ data_len+16(FP), autLen
 	MOVQ T+32(FP), tPtr
 
 	PXOR ACC0, ACC0
@@ -421,7 +421,7 @@ dataBail:
 #undef autLen
 
 // func gcmAesEnc(productTable *[256]byte, dst, src []byte, ctr, T *[16]byte, ks []uint32)
-TEXT ·gcmAesEnc(SB),0,$256-144
+TEXT ·gcmAesEnc(SB),0,$256-96
 #define pTbl DI
 #define ctx DX
 #define ctrPtr CX
@@ -477,12 +477,12 @@ TEXT ·gcmAesEnc(SB),0,$256-144
 
 	MOVQ productTable+0(FP), pTbl
 	MOVQ dst+8(FP), ctx
-	MOVQ src+32(FP), ptx
-	MOVQ src+40(FP), ptxLen
+	MOVQ src_base+32(FP), ptx
+	MOVQ src_len+40(FP), ptxLen
 	MOVQ ctr+56(FP), ctrPtr
 	MOVQ T+64(FP), tPtr
-	MOVQ KS+72(FP), ks
-	MOVQ nr+80(FP), NR
+	MOVQ ks_base+72(FP), ks
+	MOVQ ks_len+80(FP), NR
 
 	SHRQ $2, NR
 	DECQ NR
@@ -932,7 +932,7 @@ gcmAesEncDone:
 #undef increment
 
 // func gcmAesDec(productTable *[256]byte, dst, src []byte, ctr, T *[16]byte, ks []uint32)
-TEXT ·gcmAesDec(SB),0,$128-144
+TEXT ·gcmAesDec(SB),0,$128-96
 #define increment(i) ADDL $1, aluCTR; MOVL aluCTR, aluTMP; XORL aluK, aluTMP; BSWAPL aluTMP; MOVL aluTMP, (3*4 + i*16)(SP)
 #define combinedDecRound(i) \
 	MOVOU (16*i)(ks), T0;\
@@ -960,12 +960,12 @@ TEXT ·gcmAesDec(SB),0,$128-144
 
 	MOVQ productTable+0(FP), pTbl
 	MOVQ dst+8(FP), ptx
-	MOVQ src+32(FP), ctx
-	MOVQ src+40(FP), ptxLen
+	MOVQ src_base+32(FP), ctx
+	MOVQ src_len+40(FP), ptxLen
 	MOVQ ctr+56(FP), ctrPtr
 	MOVQ T+64(FP), tPtr
-	MOVQ KS+72(FP), ks
-	MOVQ nr+80(FP), NR
+	MOVQ ks_base+72(FP), ks
+	MOVQ ks_len+80(FP), NR
 
 	SHRQ $2, NR
 	DECQ NR
