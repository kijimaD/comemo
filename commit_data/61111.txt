commit 5b0f8596b766afae9dd1f117a4a5dcfbbf1b80f1
Author: Nick Ripley <nick.ripley@datadoghq.com>
Date:   Tue Oct 1 13:51:09 2024 -0400

    runtime/pprof: make TestBlockMutexProfileInlineExpansion stricter
    
    While working on CL 611241 and CL 616375, I introduced a bug that wasn't
    caught by any test. CL 611241 added more inline expansion at sample time
    for block/mutex profile stacks collected via frame pointer unwinding.
    CL 616375 then changed how inline expansion for those stacks is done at
    reporting time. So some frames passed through multiple rounds of inline
    expansion, and this lead to duplicate stack frames in some cases. The
    stacks from TestBlockMutexProfileInlineExpansion looked like
    
            sync.(*Mutex).Unlock
            runtime/pprof.inlineF
            runtime/pprof.inlineE
            runtime/pprof.inlineD
            runtime/pprof.inlineD
            runtime.goexit
    
    after those two CLs, and in particular after CL 616375. Note the extra
    inlineD frame. The test didn't catch that since it was only looking for
    a few frames in the stacks rather than checking the entire stacks.
    
    This CL makes that test stricter by checking the entire expected stacks
    rather than just a portion of the stacks.
    
    Change-Id: I0acc739d826586e9a63a081bb98ef512d72cdc9a
    Reviewed-on: https://go-review.googlesource.com/c/go/+/617235
    LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>
    Reviewed-by: Michael Pratt <mpratt@google.com>
    Reviewed-by: Michael Knyszek <mknyszek@google.com>
---
 src/runtime/pprof/pprof_test.go | 24 ++++++++++++------------
 1 file changed, 12 insertions(+), 12 deletions(-)

diff --git a/src/runtime/pprof/pprof_test.go b/src/runtime/pprof/pprof_test.go
index e9f287df60..6c41495f03 100644
--- a/src/runtime/pprof/pprof_test.go
+++ b/src/runtime/pprof/pprof_test.go
@@ -2727,38 +2727,38 @@ func TestBlockMutexProfileInlineExpansion(t *testing.T) {
 	wg.Wait()
 
 	tcs := []struct {
-		Name     string
-		Collect  func([]runtime.BlockProfileRecord) (int, bool)
-		SubStack string
+		Name    string
+		Collect func([]runtime.BlockProfileRecord) (int, bool)
+		Stack   string
 	}{
 		{
 			Name:    "mutex",
 			Collect: runtime.MutexProfile,
-			SubStack: `sync.(*Mutex).Unlock
+			Stack: `sync.(*Mutex).Unlock
 runtime/pprof.inlineF
 runtime/pprof.inlineE
-runtime/pprof.inlineD`,
+runtime/pprof.inlineD
+runtime.goexit`,
 		},
 		{
 			Name:    "block",
 			Collect: runtime.BlockProfile,
-			SubStack: `sync.(*Mutex).Lock
+			Stack: `sync.(*Mutex).Lock
 runtime/pprof.inlineC
 runtime/pprof.inlineB
-runtime/pprof.inlineA`,
+runtime/pprof.inlineA
+runtime.goexit`,
 		},
 	}
 
 	for _, tc := range tcs {
 		t.Run(tc.Name, func(t *testing.T) {
 			stacks := getProfileStacks(tc.Collect, false)
-			for _, s := range stacks {
-				if strings.Contains(s, tc.SubStack) {
-					return
-				}
+			if slices.Contains(stacks, tc.Stack) {
+				return
 			}
 			t.Error("did not see expected stack")
-			t.Logf("wanted:\n%s", tc.SubStack)
+			t.Logf("wanted:\n%s", tc.Stack)
 			t.Logf("got: %s", stacks)
 		})
 	}
