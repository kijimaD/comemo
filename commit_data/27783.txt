commit b0cbe158da10aac1876680e825a902d58a9d1bac
Author: Shahar Kohanim <skohanim@gmail.com>
Date:   Mon Apr 11 22:19:34 2016 +0300

    cmd/link: move function only lsym fields to pcln struct
    
    name       old secs    new secs    delta
    LinkCmdGo   0.53 ± 9%   0.53 ±10%  -1.30%  (p=0.022 n=100+99)
    
    name       old MaxRSS  new MaxRSS  delta
    LinkCmdGo   151k ± 4%   142k ± 6%  -5.92%  (p=0.000 n=98+100)
    
    Change-Id: Ic30e63a948f8e626b3396f458a0163f7234810c1
    Reviewed-on: https://go-review.googlesource.com/21920
    Run-TryBot: Ian Lance Taylor <iant@golang.org>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Ian Lance Taylor <iant@golang.org>
---
 src/cmd/link/internal/ld/deadcode.go |  7 +++++--
 src/cmd/link/internal/ld/dwarf.go    |  2 +-
 src/cmd/link/internal/ld/lib.go      | 17 ++++++++++++++---
 src/cmd/link/internal/ld/link.go     |  6 +++---
 src/cmd/link/internal/ld/objfile.go  | 13 +++++++------
 src/cmd/link/internal/ld/pcln.go     |  6 +++++-
 6 files changed, 35 insertions(+), 16 deletions(-)

diff --git a/src/cmd/link/internal/ld/deadcode.go b/src/cmd/link/internal/ld/deadcode.go
index 8b2d0d447e..83e4cdc077 100644
--- a/src/cmd/link/internal/ld/deadcode.go
+++ b/src/cmd/link/internal/ld/deadcode.go
@@ -272,9 +272,12 @@ func (d *deadcodepass) flood() {
 			if Debug['v'] > 1 {
 				fmt.Fprintf(d.ctxt.Bso, "marktext %s\n", s.Name)
 			}
-			for _, a := range s.Autom {
-				d.mark(a.Gotype, s)
+			if s.Pcln != nil {
+				for _, a := range s.Pcln.Autom {
+					d.mark(a.Gotype, s)
+				}
 			}
+
 		}
 
 		if strings.HasPrefix(s.Name, "type.") && s.Name[5] != '.' {
diff --git a/src/cmd/link/internal/ld/dwarf.go b/src/cmd/link/internal/ld/dwarf.go
index a3a931f94c..82689988c5 100644
--- a/src/cmd/link/internal/ld/dwarf.go
+++ b/src/cmd/link/internal/ld/dwarf.go
@@ -1556,7 +1556,7 @@ func writelines(prev *LSym) *LSym {
 			dt, da int
 			offs   int64
 		)
-		for _, a := range s.Autom {
+		for _, a := range s.Pcln.Autom {
 			switch a.Name {
 			case obj.A_AUTO:
 				dt = DW_ABRV_AUTO
diff --git a/src/cmd/link/internal/ld/lib.go b/src/cmd/link/internal/ld/lib.go
index 1f2df8b9c5..db34e68404 100644
--- a/src/cmd/link/internal/ld/lib.go
+++ b/src/cmd/link/internal/ld/lib.go
@@ -1747,7 +1747,11 @@ func stkcheck(up *Chain, depth int) int {
 			return 0
 		}
 		// Raise limit to allow frame.
-		limit = int(obj.StackLimit+s.Locals) + int(Ctxt.FixedFrameSize())
+		locals := int32(0)
+		if s.Pcln != nil {
+			locals = s.Pcln.Locals
+		}
+		limit = int(obj.StackLimit+locals) + int(Ctxt.FixedFrameSize())
 	}
 
 	// Walk through sp adjustments in function, consuming relocs.
@@ -1978,10 +1982,17 @@ func genasmsym(put func(*LSym, string, int, int64, int64, int, *LSym)) {
 	for s := Ctxt.Textp; s != nil; s = s.Next {
 		put(s, s.Name, 'T', s.Value, s.Size, int(s.Version), s.Gotype)
 
+		locals := int32(0)
+		if s.Pcln != nil {
+			locals = s.Pcln.Locals
+		}
 		// NOTE(ality): acid can't produce a stack trace without .frame symbols
-		put(nil, ".frame", 'm', int64(s.Locals)+int64(SysArch.PtrSize), 0, 0, nil)
+		put(nil, ".frame", 'm', int64(locals)+int64(SysArch.PtrSize), 0, 0, nil)
 
-		for _, a := range s.Autom {
+		if s.Pcln == nil {
+			continue
+		}
+		for _, a := range s.Pcln.Autom {
 			// Emit a or p according to actual offset, even if label is wrong.
 			// This avoids negative offsets, which cannot be encoded.
 			if a.Name != obj.A_AUTO && a.Name != obj.A_PARAM {
diff --git a/src/cmd/link/internal/ld/link.go b/src/cmd/link/internal/ld/link.go
index 52b52f1cc0..93454fb4b2 100644
--- a/src/cmd/link/internal/ld/link.go
+++ b/src/cmd/link/internal/ld/link.go
@@ -50,8 +50,6 @@ type LSym struct {
 	Align       int32
 	Elfsym      int32
 	LocalElfsym int32
-	Args        int32
-	Locals      int32
 	Value       int64
 	Size        int64
 	// ElfType is set for symbols read from shared libraries by ldshlibsyms. It
@@ -67,7 +65,6 @@ type LSym struct {
 	Dynimplib   string
 	Dynimpvers  string
 	Sect        *Section
-	Autom       []Auto
 	Pcln        *Pcln
 	P           []byte
 	R           []Reloc
@@ -221,6 +218,9 @@ type Library struct {
 }
 
 type Pcln struct {
+	Args        int32
+	Locals      int32
+	Autom       []Auto
 	Pcsp        Pcdata
 	Pcfile      Pcdata
 	Pcline      Pcdata
diff --git a/src/cmd/link/internal/ld/objfile.go b/src/cmd/link/internal/ld/objfile.go
index 578afd4c74..eacccb59fb 100644
--- a/src/cmd/link/internal/ld/objfile.go
+++ b/src/cmd/link/internal/ld/objfile.go
@@ -331,8 +331,11 @@ overwrite:
 	}
 
 	if s.Type == obj.STEXT {
-		s.Args = r.readInt32()
-		s.Locals = r.readInt32()
+		s.Pcln = new(Pcln)
+		pc := s.Pcln
+
+		pc.Args = r.readInt32()
+		pc.Locals = r.readInt32()
 		if r.readUint8() != 0 {
 			s.Attr |= AttrNoSplit
 		}
@@ -341,13 +344,13 @@ overwrite:
 			s.Attr |= AttrReflectMethod
 		}
 		n := r.readInt()
-		s.Autom = r.autom[:n:n]
+		pc.Autom = r.autom[:n:n]
 		if !isdup {
 			r.autom = r.autom[n:]
 		}
 
 		for i := 0; i < n; i++ {
-			s.Autom[i] = Auto{
+			pc.Autom[i] = Auto{
 				Asym:    r.readSymIndex(),
 				Aoffset: r.readInt32(),
 				Name:    r.readInt16(),
@@ -355,8 +358,6 @@ overwrite:
 			}
 		}
 
-		s.Pcln = new(Pcln)
-		pc := s.Pcln
 		pc.Pcsp.P = r.readData()
 		pc.Pcfile.P = r.readData()
 		pc.Pcline.P = r.readData()
diff --git a/src/cmd/link/internal/ld/pcln.go b/src/cmd/link/internal/ld/pcln.go
index 9a947c7c07..3ef52444af 100644
--- a/src/cmd/link/internal/ld/pcln.go
+++ b/src/cmd/link/internal/ld/pcln.go
@@ -293,7 +293,11 @@ func pclntab() {
 
 		// args int32
 		// TODO: Move into funcinfo.
-		off = int32(setuint32(Ctxt, ftab, int64(off), uint32(Ctxt.Cursym.Args)))
+		args := uint32(0)
+		if Ctxt.Cursym.Pcln != nil {
+			args = uint32(Ctxt.Cursym.Pcln.Args)
+		}
+		off = int32(setuint32(Ctxt, ftab, int64(off), args))
 
 		// frame int32
 		// This has been removed (it was never set quite correctly anyway).
