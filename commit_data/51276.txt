commit 88cafe0f58cf7374722a2a98d8919c32bb8795e5
Author: Bryan C. Mills <bcmills@google.com>
Date:   Wed Jan 5 14:20:30 2022 -0500

    net/http: skip TestClientTimeout_h{1,2} on windows/arm and windows/arm64
    
    These tests are empirically flaky on the windows/arm and windows/arm64
    builders, with a consistent (but rare) failure mode.
    
    This change skips the test if that particular failure mode is
    encountered on those platforms; the skip can be removed if and when
    someone has the time to pin down the root cause.
    
    For #43120
    
    Change-Id: Ie3a9a06bf47e3a907c7b07441acc1494a4631135
    Reviewed-on: https://go-review.googlesource.com/c/go/+/375635
    Trust: Bryan Mills <bcmills@google.com>
    Run-TryBot: Bryan Mills <bcmills@google.com>
    Reviewed-by: Damien Neil <dneil@google.com>
    TryBot-Result: Gopher Robot <gobot@golang.org>
---
 src/net/http/client_test.go | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/src/net/http/client_test.go b/src/net/http/client_test.go
index c2ea6f4330..ea59f68f35 100644
--- a/src/net/http/client_test.go
+++ b/src/net/http/client_test.go
@@ -13,6 +13,7 @@ import (
 	"encoding/base64"
 	"errors"
 	"fmt"
+	"internal/testenv"
 	"io"
 	"log"
 	"net"
@@ -21,6 +22,7 @@ import (
 	"net/http/httptest"
 	"net/url"
 	"reflect"
+	"runtime"
 	"strconv"
 	"strings"
 	"sync"
@@ -1289,6 +1291,9 @@ func testClientTimeout(t *testing.T, h2 bool) {
 			t.Errorf("net.Error.Timeout = false; want true")
 		}
 		if got := ne.Error(); !strings.Contains(got, "(Client.Timeout") {
+			if runtime.GOOS == "windows" && strings.HasPrefix(runtime.GOARCH, "arm") {
+				testenv.SkipFlaky(t, 43120)
+			}
 			t.Errorf("error string = %q; missing timeout substring", got)
 		}
 
