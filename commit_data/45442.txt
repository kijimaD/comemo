commit 30c18878730434027dbefd343aad74963a1fdc48
Author: Austin Clements <austin@google.com>
Date:   Thu Oct 1 17:22:38 2020 -0400

    runtime,cmd/cgo: simplify C -> Go call path
    
    This redesigns the way calls work from C to exported Go functions. It
    removes several steps from the call path, makes cmd/cgo no longer
    sensitive to the Go calling convention, and eliminates the use of
    reflectcall from cgo.
    
    In order to avoid generating a large amount of FFI glue between the C
    and Go ABIs, the cgo tool has long depended on generating a C function
    that marshals the arguments into a struct, and then the actual ABI
    switch happens in functions with fixed signatures that simply take a
    pointer to this struct. In a way, this CL simply pushes this idea
    further.
    
    Currently, the cgo tool generates this argument struct in the exact
    layout of the Go stack frame and depends on reflectcall to unpack it
    into the appropriate Go call (even though it's actually
    reflectcall'ing a function generated by cgo).
    
    In this CL, we decouple this struct from the Go stack layout. Instead,
    cgo generates a Go function that takes the struct, unpacks it, and
    calls the exported function. Since this generated function has a
    generic signature (like the rest of the call path), we don't need
    reflectcall and can instead depend on the Go compiler itself to
    implement the call to the exported Go function.
    
    One complication is that syscall.NewCallback on Windows, which
    converts a Go function into a C function pointer, depends on
    cgocallback's current dynamic calling approach since the signatures of
    the callbacks aren't known statically. For this specific case, we
    continue to depend on reflectcall. Really, the current approach makes
    some overly simplistic assumptions about translating the C ABI to the
    Go ABI. Now we're at least in a much better position to do a proper
    ABI translation.
    
    For comparison, the current cgo call path looks like:
    
        GoF (generated C function) ->
        crosscall2 (in cgo/asm_*.s) ->
        _cgoexp_GoF (generated Go function) ->
        cgocallback (in asm_*.s) ->
        cgocallback_gofunc (in asm_*.s) ->
        cgocallbackg (in cgocall.go) ->
        cgocallbackg1 (in cgocall.go) ->
        reflectcall (in asm_*.s) ->
        _cgoexpwrap_GoF (generated Go function) ->
        p.GoF
    
    Now the call path looks like:
    
        GoF (generated C function) ->
        crosscall2 (in cgo/asm_*.s) ->
        cgocallback (in asm_*.s) ->
        cgocallbackg (in cgocall.go) ->
        cgocallbackg1 (in cgocall.go) ->
        _cgoexp_GoF (generated Go function) ->
        p.GoF
    
    Notably:
    
    1. We combine _cgoexp_GoF and _cgoexpwrap_GoF and move the combined
    operation to the end of the sequence. This combined function also
    handles reflectcall's previous role.
    
    2. We combined cgocallback and cgocallback_gofunc since the only
    purpose of having both was to convert a raw PC into a Go function
    value. We instead construct the Go function value in cgocallbackg1.
    
    3. cgocallbackg1 no longer reaches backwards through the stack to get
    the arguments to cgocallback_gofunc. Instead, we just pass the
    arguments down.
    
    4. Currently, we need an explicit msanwrite to mark the results struct
    as written because reflectcall doesn't do this. Now, the results are
    written by regular Go assignments, so the Go compiler generates the
    necessary MSAN annotations. This also means we no longer need to track
    the size of the arguments frame.
    
    Updates #40724, since now we don't need to teach cgo about the
    register ABI or change how it uses reflectcall.
    
    Change-Id: I7840489a2597962aeb670e0c1798a16a7359c94f
    Reviewed-on: https://go-review.googlesource.com/c/go/+/258938
    Trust: Austin Clements <austin@google.com>
    Run-TryBot: Austin Clements <austin@google.com>
    TryBot-Result: Go Bot <gobot@golang.org>
    Reviewed-by: Cherry Zhang <cherryyz@google.com>

 misc/cgo/test/callback.go         |   2 +-
 src/cmd/cgo/doc.go                |   2 +-
 src/cmd/cgo/out.go                | 162 +++++++++++++-------------------------
 src/cmd/internal/objabi/funcid.go |   6 +-
 src/runtime/asm_386.s             |  56 +++++--------
 src/runtime/asm_amd64.s           |  55 +++++--------
 src/runtime/asm_arm.s             |  58 +++++---------
 src/runtime/asm_arm64.s           |  48 ++++-------
 src/runtime/asm_mips64x.s         |  54 +++++--------
 src/runtime/asm_mipsx.s           |  54 +++++--------
 src/runtime/asm_ppc64x.s          |  55 +++++--------
 src/runtime/asm_riscv64.s         |   5 +-
 src/runtime/asm_s390x.s           |  54 +++++--------
 src/runtime/asm_wasm.s            |   5 +-
 src/runtime/cgo/asm_386.s         |  12 +--
 src/runtime/cgo/asm_amd64.s       |  20 +++--
 src/runtime/cgo/asm_arm.s         |  61 +++++++-------
 src/runtime/cgo/asm_arm64.s       |  19 ++---
 src/runtime/cgo/asm_mips64x.s     |  19 ++---
 src/runtime/cgo/asm_mipsx.s       |  19 ++---
 src/runtime/cgo/asm_ppc64x.s      |  20 ++---
 src/runtime/cgo/asm_s390x.s       |  14 ++--
 src/runtime/cgo/callbacks.go      |  29 +++----
 src/runtime/cgocall.go            | 140 +++++++++-----------------------
 src/runtime/proc.go               |   2 +-
 src/runtime/race/output_test.go   |   2 +-
 src/runtime/stubs.go              |  25 +++---
 src/runtime/symtab.go             |   2 +-
 src/runtime/sys_windows_386.s     |  67 ++++++----------
 src/runtime/sys_windows_amd64.s   |  53 ++++++-------
 src/runtime/sys_windows_arm.s     |   3 +
 src/runtime/syscall_windows.go    |  42 +++++++++-
 src/runtime/traceback.go          |   2 +-
 33 files changed, 471 insertions(+), 696 deletions(-)
