commit a411b104f0a32f7c859d63c4fbd46919c2036910
Author: Robert Griesemer <gri@golang.org>
Date:   Mon Feb 25 08:29:46 2013 -0800

    go/parser: more precise comment
    
    See also CL 7383051 for details.
    
    R=adonovan, bradfitz
    CC=golang-dev
    https://golang.org/cl/7378063
---
 src/pkg/go/parser/parser.go | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/src/pkg/go/parser/parser.go b/src/pkg/go/parser/parser.go
index 40fa10d772..a021a5abe5 100644
--- a/src/pkg/go/parser/parser.go
+++ b/src/pkg/go/parser/parser.go
@@ -1229,11 +1229,11 @@ func (p *parser) parseElement(keyOk bool) ast.Expr {
 	// In the former case we are done, and in the latter case we don't
 	// care because the type checker will do a separate field lookup.
 	//
-	// If the key does not resolve, it must a) be defined at the top-
-	// level in another file of the same package or be undeclared, or
-	// b) it is a struct field. In the former case, the type checker
-	// can do a top-level lookup, and in the latter case it will do a
-	// separate field lookup.
+	// If the key does not resolve, it a) must be defined at the top
+	// level in another file of the same package, the universe scope, or be
+	// undeclared; or b) it is a struct field. In the former case, the type
+	// checker can do a top-level lookup, and in the latter case it will do
+	// a separate field lookup.
 	x := p.checkExpr(p.parseExpr(keyOk))
 	if keyOk {
 		if p.tok == token.COLON {
