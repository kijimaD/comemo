commit 8ee2d5bc00c5cc2313d87e001961294907cee133
Author: Josh Bleecher Snyder <josharian@gmail.com>
Date:   Thu Mar 23 11:40:47 2017 -0700

    cmd/compile: strengthen SetFields/Width safety guarantee
    
    It is currently possible in the compiler to create a struct type,
    calculate the widths of types that depend on it,
    and then alter the struct type.
    
    transformclosure has local protection against this.
    Protect against it at a deeper level.
    
    This is preparation to call dowidth automatically,
    rather than explicitly.
    
    This is a re-roll of CL 38469.
    
    Change-Id: Ic5b4baa250618504611fc57cbf51ab01d1eddf80
    Reviewed-on: https://go-review.googlesource.com/38534
    Run-TryBot: Josh Bleecher Snyder <josharian@gmail.com>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Matthew Dempsky <mdempsky@google.com>
    Reviewed-by: Brad Fitzpatrick <bradfitz@golang.org>
---
 src/cmd/compile/internal/gc/closure.go | 4 ----
 src/cmd/compile/internal/gc/type.go    | 9 +++++++++
 2 files changed, 9 insertions(+), 4 deletions(-)

diff --git a/src/cmd/compile/internal/gc/closure.go b/src/cmd/compile/internal/gc/closure.go
index 42543312f9..bd2ab1dc45 100644
--- a/src/cmd/compile/internal/gc/closure.go
+++ b/src/cmd/compile/internal/gc/closure.go
@@ -364,10 +364,6 @@ func transformclosure(xfunc *Node) {
 			xfunc.Func.Dcl = append(decls, xfunc.Func.Dcl...)
 		}
 
-		// Recalculate param offsets.
-		if f.Type.Width > 0 {
-			Fatalf("transformclosure: width is already calculated")
-		}
 		dowidth(f.Type)
 		xfunc.Type = f.Type // update type of ODCLFUNC
 	} else {
diff --git a/src/cmd/compile/internal/gc/type.go b/src/cmd/compile/internal/gc/type.go
index 476a80b1b9..7f4796d60c 100644
--- a/src/cmd/compile/internal/gc/type.go
+++ b/src/cmd/compile/internal/gc/type.go
@@ -864,6 +864,15 @@ func (t *Type) FieldSlice() []*Field {
 
 // SetFields sets struct/interface type t's fields/methods to fields.
 func (t *Type) SetFields(fields []*Field) {
+	// If we've calculated the width of t before,
+	// then some other type such as a function signature
+	// might now have the wrong type.
+	// Rather than try to track and invalidate those,
+	// enforce that SetFields cannot be called once
+	// t's width has been calculated.
+	if t.WidthCalculated() {
+		Fatalf("SetFields of %v: width previously calculated", t)
+	}
 	t.wantEtype(TSTRUCT)
 	for _, f := range fields {
 		// If type T contains a field F with a go:notinheap
