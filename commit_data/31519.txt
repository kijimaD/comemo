commit bab191042b92b125f5fac83dc8f0201160b79ecd
Author: Austin Clements <austin@google.com>
Date:   Mon Feb 20 17:49:56 2017 -0500

    cmd/internal/obj, runtime: update funcdata comments
    
    The comments in cmd/internal/obj/funcdata.go are identical to the
    comments in runtime/funcdata.h, but the majority of the definitions
    they refer to don't apply to Go sources and have been stripped out of
    funcdata.go.
    
    Remove these stale comments from funcdata.go and clean up the
    references to other copies of the PCDATA and FUNCDATA indexes.
    
    Change-Id: I5d6e49a6e586cc9aecd7c3ce1567679f2a605884
    Reviewed-on: https://go-review.googlesource.com/37330
    Reviewed-by: Keith Randall <khr@golang.org>
---
 src/cmd/internal/obj/funcdata.go | 43 +++++++++-------------------------------
 src/runtime/funcdata.h           |  4 +---
 src/runtime/symtab.go            |  4 +++-
 3 files changed, 13 insertions(+), 38 deletions(-)

diff --git a/src/cmd/internal/obj/funcdata.go b/src/cmd/internal/obj/funcdata.go
index 62256a3e5f..d5f891096b 100644
--- a/src/cmd/internal/obj/funcdata.go
+++ b/src/cmd/internal/obj/funcdata.go
@@ -5,44 +5,19 @@
 package obj
 
 // This file defines the IDs for PCDATA and FUNCDATA instructions
-// in Go binaries. It is included by assembly sources, so it must
-// be written using #defines.
+// in Go binaries.
 //
-// The Go compiler also #includes this file, for now.
-//
-// symtab.go also contains a copy of these constants.
-
-// Pseudo-assembly statements.
-
-// GO_ARGS, GO_RESULTS_INITIALIZED, and NO_LOCAL_POINTERS are macros
-// that communicate to the runtime information about the location and liveness
-// of pointers in an assembly function's arguments, results, and stack frame.
-// This communication is only required in assembly functions that make calls
-// to other functions that might be preempted or grow the stack.
-// NOSPLIT functions that make no calls do not need to use these macros.
-
-// GO_ARGS indicates that the Go prototype for this assembly function
-// defines the pointer map for the function's arguments.
-// GO_ARGS should be the first instruction in a function that uses it.
-// It can be omitted if there are no arguments at all.
-// GO_ARGS is inserted implicitly by the linker for any function
-// that also has a Go prototype and therefore is usually not necessary
-// to write explicitly.
+// These must agree with ../../../runtime/funcdata.h and
+// ../../../runtime/symtab.go.
 
-// GO_RESULTS_INITIALIZED indicates that the assembly function
-// has initialized the stack space for its results and that those results
-// should be considered live for the remainder of the function.
-
-// NO_LOCAL_POINTERS indicates that the assembly function stores
-// no pointers to heap objects in its local stack variables.
-
-// ArgsSizeUnknown is set in Func.argsize to mark all functions
-// whose argument size is unknown (C vararg functions, and
-// assembly code without an explicit specification).
-// This value is generated by the compiler, assembler, or linker.
 const (
 	PCDATA_StackMapIndex       = 0
 	FUNCDATA_ArgsPointerMaps   = 0
 	FUNCDATA_LocalsPointerMaps = 1
-	ArgsSizeUnknown            = -0x80000000
+
+	// ArgsSizeUnknown is set in Func.argsize to mark all functions
+	// whose argument size is unknown (C vararg functions, and
+	// assembly code without an explicit specification).
+	// This value is generated by the compiler, assembler, or linker.
+	ArgsSizeUnknown = -0x80000000
 )
diff --git a/src/runtime/funcdata.h b/src/runtime/funcdata.h
index 82992e221b..c77e7b094f 100644
--- a/src/runtime/funcdata.h
+++ b/src/runtime/funcdata.h
@@ -6,9 +6,7 @@
 // in Go binaries. It is included by assembly sources, so it must
 // be written using #defines.
 //
-// The Go compiler also #includes this file, for now.
-//
-// symtab.go also contains a copy of these constants.
+// These must agree with symtab.go and ../cmd/internal/obj/funcdata.go.
 
 #define PCDATA_StackMapIndex 0
 
diff --git a/src/runtime/symtab.go b/src/runtime/symtab.go
index 377d970f09..ad8a8a1b8d 100644
--- a/src/runtime/symtab.go
+++ b/src/runtime/symtab.go
@@ -168,7 +168,9 @@ func (f *Func) raw() *_func {
 	return (*_func)(unsafe.Pointer(f))
 }
 
-// funcdata.h
+// PCDATA and FUNCDATA table indexes.
+//
+// See funcdata.h and ../cmd/internal/obj/funcdata.go.
 const (
 	_PCDATA_StackMapIndex       = 0
 	_FUNCDATA_ArgsPointerMaps   = 0
