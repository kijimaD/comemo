commit d2286ea2843569c7d277587f3d3ef06ae4092b78
Merge: 6a1153acb4 50edddb738
Author: Keith Randall <khr@golang.org>
Date:   Thu Aug 4 10:08:20 2016 -0700

    [dev.ssa] Merge remote-tracking branch 'origin/master' into mergebranch
    
    Semi-regular merge from tip into dev.ssa.
    
    Change-Id: Iadb60e594ef65a99c0e1404b14205fa67c32a9e9

 doc/asm.html                                       |  58 ++++
 doc/devel/release.html                             |   8 +
 doc/go1.7.html                                     |  41 ++-
 misc/trace/trace_viewer_lean.html                  |   2 +-
 src/cmd/api/goapi.go                               |   2 +-
 src/cmd/compile/internal/amd64/ssa.go              |  44 ++-
 .../internal/gc/sparselocatephifunctions.go        |   5 +-
 src/cmd/compile/internal/ssa/compile.go            |   1 +
 src/cmd/compile/internal/ssa/gen/AMD64.rules       |   4 +-
 src/cmd/compile/internal/ssa/gen/AMD64Ops.go       |   4 +-
 src/cmd/compile/internal/ssa/rewrite.go            |  45 ---
 src/cmd/compile/internal/ssa/rewriteAMD64.go       |  13 +-
 src/cmd/compile/internal/ssa/sparsetreemap.go      | 104 ++++---
 src/cmd/compile/internal/ssa/tighten.go            |  23 ++
 src/cmd/doc/doc_test.go                            |  16 +-
 src/cmd/doc/pkg.go                                 |  28 +-
 src/cmd/doc/testdata/pkg.go                        |   7 +
 src/compress/flate/deflate.go                      |  13 +-
 src/context/context_test.go                        |   6 +
 src/crypto/x509/root_cgo_darwin.go                 |  60 ++++
 src/fmt/scan.go                                    |   6 +-
 src/fmt/scan_test.go                               | 101 +++---
 src/go/build/build_test.go                         |   8 +-
 src/go/build/deps_test.go                          |   8 +-
 src/net/dial_test.go                               |   5 +
 src/net/dial_unix_test.go                          | 108 +++++++
 src/net/fd_unix.go                                 |  55 +++-
 src/net/hook_unix.go                               |   3 +-
 src/net/http/cgi/host.go                           |   4 +
 src/net/http/cgi/host_test.go                      |  37 ++-
 src/net/http/h2_bundle.go                          | 343 ++++++++++++++-------
 src/net/http/http.go                               |   2 +-
 src/net/http/serve_test.go                         |  11 +
 src/net/http/server.go                             |  40 ++-
 src/net/http/transfer.go                           |   2 +-
 src/net/http/transport.go                          |  57 +++-
 src/net/http/transport_internal_test.go            |   9 +-
 src/net/http/transport_test.go                     |  53 +++-
 src/net/interface_bsd.go                           |   2 +-
 src/net/interface_bsdvar.go                        |   2 +-
 src/net/interface_darwin.go                        |   2 +-
 src/net/interface_freebsd.go                       |   2 +-
 src/net/smtp/smtp.go                               |   5 +
 src/runtime/cgocall.go                             |   3 +-
 src/runtime/internal/atomic/asm_386.s              |   6 +-
 src/runtime/internal/atomic/asm_amd64.s            |   2 +-
 src/runtime/internal/atomic/asm_amd64p32.s         |   4 +-
 src/runtime/internal/atomic/asm_arm.s              |   6 +-
 src/runtime/internal/atomic/asm_arm64.s            |   4 +-
 src/runtime/internal/atomic/asm_ppc64x.s           |   2 +-
 src/runtime/mbarrier.go                            |   4 +-
 src/runtime/mem_linux.go                           |  22 +-
 src/runtime/mgc.go                                 |   9 +-
 src/runtime/mgcmark.go                             |  11 +-
 src/runtime/mheap.go                               |   5 +
 src/runtime/pprof/pprof.go                         |  68 +++-
 src/runtime/pprof/pprof_test.go                    |   4 +
 src/runtime/proc.go                                |  28 +-
 src/runtime/race/README                            |   2 +-
 src/runtime/race/race_darwin_amd64.syso            | Bin 341304 -> 326172 bytes
 src/runtime/race/race_freebsd_amd64.syso           | Bin 399904 -> 404216 bytes
 src/runtime/race/race_linux_amd64.syso             | Bin 371032 -> 376048 bytes
 src/runtime/race/race_test.go                      |  18 ++
 src/runtime/race/race_windows_amd64.syso           | Bin 363595 -> 367717 bytes
 src/runtime/sys_darwin_386.s                       |   7 +-
 src/runtime/sys_darwin_amd64.s                     |   2 +
 .../x/net/http2/hpack/encode.go                    |   0
 .../x/net/http2/hpack/encode_test.go               |   0
 .../x/net/http2/hpack/hpack.go                     |   0
 .../x/net/http2/hpack/hpack_test.go                |   0
 .../x/net/http2/hpack/huffman.go                   |   0
 .../x/net/http2/hpack/tables.go                    |   0
 .../x/net/lex/httplex/httplex.go                   |   0
 .../x/net/lex/httplex/httplex_test.go              |   0
 .../x/net/route/address.go                         |   0
 .../x/net/route/address_darwin_test.go             |   0
 .../x/net/route/address_test.go                    |   0
 .../x/net/route/binary.go                          |   0
 .../x/net/route/defs_darwin.go                     |   0
 .../x/net/route/defs_dragonfly.go                  |   0
 .../x/net/route/defs_freebsd.go                    |   0
 .../x/net/route/defs_netbsd.go                     |   0
 .../x/net/route/defs_openbsd.go                    |   0
 .../x/net/route/interface.go                       |   0
 .../x/net/route/interface_announce.go              |   0
 .../x/net/route/interface_classic.go               |   0
 .../x/net/route/interface_freebsd.go               |   0
 .../x/net/route/interface_multicast.go             |   0
 .../x/net/route/interface_openbsd.go               |   0
 .../x/net/route/message.go                         |   0
 .../x/net/route/message_darwin_test.go             |   0
 .../x/net/route/message_freebsd_test.go            |   0
 .../x/net/route/message_test.go                    |   0
 .../x/net/route/route.go                           |   0
 .../x/net/route/route_classic.go                   |   0
 .../x/net/route/route_openbsd.go                   |   0
 .../x/net/route/route_test.go                      |   0
 .../{golang.org => golang_org}/x/net/route/sys.go  |   0
 .../x/net/route/sys_darwin.go                      |   0
 .../x/net/route/sys_dragonfly.go                   |   0
 .../x/net/route/sys_freebsd.go                     |   0
 .../x/net/route/sys_netbsd.go                      |   0
 .../x/net/route/sys_openbsd.go                     |   0
 .../x/net/route/syscall.go                         |   0
 .../x/net/route/syscall.s                          |   0
 .../x/net/route/zsys_darwin.go                     |   0
 .../x/net/route/zsys_dragonfly.go                  |   0
 .../x/net/route/zsys_freebsd_386.go                |   0
 .../x/net/route/zsys_freebsd_amd64.go              |   0
 .../x/net/route/zsys_freebsd_arm.go                |   0
 .../x/net/route/zsys_netbsd.go                     |   0
 .../x/net/route/zsys_openbsd.go                    |   0
 test/fixedbugs/issue16515.go                       |  53 ++++
 113 files changed, 1225 insertions(+), 384 deletions(-)

diff --cc src/cmd/compile/internal/ssa/gen/AMD64.rules
index 811e810f15,d27eff0f6a..9b418661f0
--- a/src/cmd/compile/internal/ssa/gen/AMD64.rules
+++ b/src/cmd/compile/internal/ssa/gen/AMD64.rules
@@@ -394,21 -386,14 +394,19 @@@
  				(MOVQstoreconst [0] destptr mem))))
  
  // Medium zeroing uses a duff device.
 -(Zero [size] destptr mem) && size <= 1024 && size%8 == 0 && size%16 != 0 && !config.noDuffDevice ->
 -	(Zero [size-8] (ADDQconst [8] destptr) (MOVQstore destptr (MOVQconst [0]) mem))
 -(Zero [size] destptr mem) && size <= 1024 && size%16 == 0 && !config.noDuffDevice ->
 -	(DUFFZERO [size] destptr (MOVOconst [0]) mem)
 +(Zero [s] destptr mem)
 +	&& SizeAndAlign(s).Size() <= 1024 && SizeAndAlign(s).Size()%8 == 0 && SizeAndAlign(s).Size()%16 != 0
 +	&& !config.noDuffDevice ->
 +	(Zero [SizeAndAlign(s).Size()-8] (ADDQconst [8] destptr) (MOVQstore destptr (MOVQconst [0]) mem))
 +(Zero [s] destptr mem)
 +	&& SizeAndAlign(s).Size() <= 1024 && SizeAndAlign(s).Size()%16 == 0 && !config.noDuffDevice ->
- 	(DUFFZERO [duffStartAMD64(SizeAndAlign(s).Size())]
- 		(ADDQconst [duffAdjAMD64(SizeAndAlign(s).Size())] destptr) (MOVOconst [0])
- 		mem)
++	(DUFFZERO [SizeAndAlign(s).Size()] destptr (MOVOconst [0]) mem)
  
  // Large zeroing uses REP STOSQ.
 -(Zero [size] destptr mem) && (size > 1024 || (config.noDuffDevice && size > 32)) && size%8 == 0 ->
 -	(REPSTOSQ destptr (MOVQconst [size/8]) (MOVQconst [0]) mem)
 +(Zero [s] destptr mem)
 +	&& (SizeAndAlign(s).Size() > 1024 || (config.noDuffDevice && SizeAndAlign(s).Size() > 32))
 +	&& SizeAndAlign(s).Size()%8 == 0 ->
 +	(REPSTOSQ destptr (MOVQconst [SizeAndAlign(s).Size()/8]) (MOVQconst [0]) mem)
  
  // Lowering constants
  (Const8   [val]) -> (MOVLconst [val])
diff --cc src/cmd/compile/internal/ssa/rewrite.go
index 082aacd9c9,61d4234c65..1c4815dc81
--- a/src/cmd/compile/internal/ssa/rewrite.go
+++ b/src/cmd/compile/internal/ssa/rewrite.go
@@@ -259,64 -254,6 +259,19 @@@ func isSamePtr(p1, p2 *Value) bool 
  	return false
  }
  
- func duffStartAMD64(size int64) int64 {
- 	x, _ := duffAMD64(size)
- 	return x
- }
- func duffAdjAMD64(size int64) int64 {
- 	_, x := duffAMD64(size)
- 	return x
- }
- 
- // duff returns the offset (from duffzero, in bytes) and pointer adjust (in bytes)
- // required to use the duffzero mechanism for a block of the given size.
- func duffAMD64(size int64) (int64, int64) {
- 	// DUFFZERO consists of repeated blocks of 4 MOVUPSs + ADD,
- 	// See runtime/mkduff.go.
- 	const (
- 		dzBlocks    = 16 // number of MOV/ADD blocks
- 		dzBlockLen  = 4  // number of clears per block
- 		dzBlockSize = 19 // size of instructions in a single block
- 		dzMovSize   = 4  // size of single MOV instruction w/ offset
- 		dzAddSize   = 4  // size of single ADD instruction
- 		dzClearStep = 16 // number of bytes cleared by each MOV instruction
- 
- 		dzTailLen  = 4 // number of final STOSQ instructions
- 		dzTailSize = 2 // size of single STOSQ instruction
- 
- 		dzClearLen = dzClearStep * dzBlockLen // bytes cleared by one block
- 		dzSize     = dzBlocks * dzBlockSize
- 	)
- 
- 	if size < 32 || size > 1024 || size%dzClearStep != 0 {
- 		panic("bad duffzero size")
- 	}
- 	steps := size / dzClearStep
- 	blocks := steps / dzBlockLen
- 	steps %= dzBlockLen
- 	off := dzBlockSize * (dzBlocks - blocks)
- 	var adj int64
- 	if steps != 0 {
- 		off -= dzAddSize
- 		off -= dzMovSize * steps
- 		adj -= dzClearStep * (dzBlockLen - steps)
- 	}
- 	return off, adj
- }
- 
 +// moveSize returns the number of bytes an aligned MOV instruction moves
 +func moveSize(align int64, c *Config) int64 {
 +	switch {
 +	case align%8 == 0 && c.IntSize == 8:
 +		return 8
 +	case align%4 == 0:
 +		return 4
 +	case align%2 == 0:
 +		return 2
 +	}
 +	return 1
 +}
 +
  // mergePoint finds a block among a's blocks which dominates b and is itself
  // dominated by all of a's blocks. Returns nil if it can't find one.
  // Might return nil even if one does exist.
diff --cc src/cmd/compile/internal/ssa/rewriteAMD64.go
index 19f01a0148,a2b9e15a4f..3aa38f31ad
--- a/src/cmd/compile/internal/ssa/rewriteAMD64.go
+++ b/src/cmd/compile/internal/ssa/rewriteAMD64.go
@@@ -17413,25 -17173,22 +17413,22 @@@ func rewriteValueAMD64_OpZero(v *Value
  		v.AddArg(v1)
  		return true
  	}
 -	// match: (Zero [size] destptr mem)
 -	// cond: size <= 1024 && size%16 == 0 && !config.noDuffDevice
 -	// result: (DUFFZERO [size] destptr (MOVOconst [0]) mem)
 +	// match: (Zero [s] destptr mem)
 +	// cond: SizeAndAlign(s).Size() <= 1024 && SizeAndAlign(s).Size()%16 == 0 && !config.noDuffDevice
- 	// result: (DUFFZERO [duffStartAMD64(SizeAndAlign(s).Size())] 		(ADDQconst [duffAdjAMD64(SizeAndAlign(s).Size())] destptr) (MOVOconst [0]) 		mem)
++	// result: (DUFFZERO [SizeAndAlign(s).Size()] destptr (MOVOconst [0]) mem)
  	for {
 -		size := v.AuxInt
 +		s := v.AuxInt
  		destptr := v.Args[0]
  		mem := v.Args[1]
 -		if !(size <= 1024 && size%16 == 0 && !config.noDuffDevice) {
 +		if !(SizeAndAlign(s).Size() <= 1024 && SizeAndAlign(s).Size()%16 == 0 && !config.noDuffDevice) {
  			break
  		}
  		v.reset(OpAMD64DUFFZERO)
- 		v.AuxInt = duffStartAMD64(SizeAndAlign(s).Size())
- 		v0 := b.NewValue0(v.Line, OpAMD64ADDQconst, config.fe.TypeUInt64())
- 		v0.AuxInt = duffAdjAMD64(SizeAndAlign(s).Size())
- 		v0.AddArg(destptr)
 -		v.AuxInt = size
++		v.AuxInt = SizeAndAlign(s).Size()
+ 		v.AddArg(destptr)
+ 		v0 := b.NewValue0(v.Line, OpAMD64MOVOconst, TypeInt128)
+ 		v0.AuxInt = 0
  		v.AddArg(v0)
- 		v1 := b.NewValue0(v.Line, OpAMD64MOVOconst, TypeInt128)
- 		v1.AuxInt = 0
- 		v.AddArg(v1)
  		v.AddArg(mem)
  		return true
  	}
