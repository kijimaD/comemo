commit a5e10edc34ecfc8173509fabda0998b0cd518da7
Author: Brad Fitzpatrick <bradfitz@golang.org>
Date:   Mon Nov 26 13:05:18 2012 -0800

    doc/play: don't use println in examples
    
    R=golang-dev, rsc
    CC=golang-dev
    https://golang.org/cl/6849105
---
 doc/play/fib.go       |  4 +++-
 doc/play/sieve.go     |  4 +++-
 doc/play/solitaire.go | 14 +++++++-------
 doc/play/tree.go      |  4 ++--
 4 files changed, 15 insertions(+), 11 deletions(-)

diff --git a/doc/play/fib.go b/doc/play/fib.go
index 42da9ce82e..19e4721028 100644
--- a/doc/play/fib.go
+++ b/doc/play/fib.go
@@ -1,5 +1,7 @@
 package main
 
+import "fmt"
+
 // fib returns a function that returns
 // successive Fibonacci numbers.
 func fib() func() int {
@@ -13,5 +15,5 @@ func fib() func() int {
 func main() {
 	f := fib()
 	// Function calls are evaluated left-to-right.
-	println(f(), f(), f(), f(), f())
+	fmt.Println(f(), f(), f(), f(), f())
 }
diff --git a/doc/play/sieve.go b/doc/play/sieve.go
index 585507ac44..519093453f 100644
--- a/doc/play/sieve.go
+++ b/doc/play/sieve.go
@@ -2,6 +2,8 @@
 
 package main
 
+import "fmt"
+
 // Send the sequence 2, 3, 4, ... to channel 'ch'.
 func Generate(ch chan<- int) {
 	for i := 2; ; i++ {
@@ -26,7 +28,7 @@ func main() {
 	go Generate(ch)      // Launch Generate goroutine.
 	for i := 0; i < 10; i++ {
 		prime := <-ch
-		print(prime, "\n")
+		fmt.Println(prime)
 		ch1 := make(chan int)
 		go Filter(ch, ch1, prime)
 		ch = ch1
diff --git a/doc/play/solitaire.go b/doc/play/solitaire.go
index 759d542815..15022aa194 100644
--- a/doc/play/solitaire.go
+++ b/doc/play/solitaire.go
@@ -28,7 +28,7 @@ var board = []rune(
 ...........
 `)
 
-// center is the position of the center hole if 
+// center is the position of the center hole if
 // there is a single one; otherwise it is -1.
 var center int
 
@@ -47,7 +47,7 @@ func init() {
 
 var moves int // number of times move is called
 
-// move tests if there is a peg at position pos that 
+// move tests if there is a peg at position pos that
 // can jump over another peg in direction dir. If the
 // move is valid, it is executed and move returns true.
 // Otherwise, move returns false.
@@ -69,11 +69,11 @@ func unmove(pos, dir int) {
 	board[pos+2*dir] = 'â—‹'
 }
 
-// solve tries to find a sequence of moves such that 
-// there is only one peg left at the end; if center is 
+// solve tries to find a sequence of moves such that
+// there is only one peg left at the end; if center is
 // >= 0, that last peg must be in the center position.
 // If a solution is found, solve prints the board after
-// each move in a backward fashion (i.e., the last 
+// each move in a backward fashion (i.e., the last
 // board position is printed first, all the way back to
 // the starting board position).
 func solve() bool {
@@ -89,7 +89,7 @@ func solve() bool {
 					// see if this new board has a solution
 					if solve() {
 						unmove(pos, dir)
-						println(string(board))
+						fmt.Println(string(board))
 						return true
 					}
 					unmove(pos, dir)
@@ -102,7 +102,7 @@ func solve() bool {
 	// tried each possible move
 	if n == 1 && (center < 0 || last == center) {
 		// there's only one peg left
-		println(string(board))
+		fmt.Println(string(board))
 		return true
 	}
 	// no solution found for this board
diff --git a/doc/play/tree.go b/doc/play/tree.go
index 5bcbf05a88..3790e6cda5 100644
--- a/doc/play/tree.go
+++ b/doc/play/tree.go
@@ -2,7 +2,7 @@
 // express concurrent concepts, such as
 // this binary tree comparison.
 //
-// Trees may be of different shapes, 
+// Trees may be of different shapes,
 // but have the same contents. For example:
 //
 //        4               6
@@ -29,7 +29,7 @@ type Tree struct {
 	Right *Tree
 }
 
-// Walk traverses a tree depth-first, 
+// Walk traverses a tree depth-first,
 // sending each Value on a channel.
 func Walk(t *Tree, ch chan int) {
 	if t == nil {
