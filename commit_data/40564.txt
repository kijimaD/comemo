commit 200176edd11e39e90b19289ea0999e60fdd210f7
Author: Keith Randall <keithr@alum.mit.edu>
Date:   Tue May 28 17:17:40 2019 -0700

    cmd/compile: add GCNode to VarDef in tests
    
    Change-Id: I0f79d317ae7ac46c7e824bd382a4f51d53adaaa6
    Reviewed-on: https://go-review.googlesource.com/c/go/+/179257
    Run-TryBot: Keith Randall <khr@golang.org>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Josh Bleecher Snyder <josharian@gmail.com>
---
 src/cmd/compile/internal/ssa/cse_test.go  | 7 +++++--
 src/cmd/compile/internal/ssa/loop_test.go | 3 ++-
 2 files changed, 7 insertions(+), 3 deletions(-)

diff --git a/src/cmd/compile/internal/ssa/cse_test.go b/src/cmd/compile/internal/ssa/cse_test.go
index b139701990..9e76645f54 100644
--- a/src/cmd/compile/internal/ssa/cse_test.go
+++ b/src/cmd/compile/internal/ssa/cse_test.go
@@ -6,6 +6,7 @@ package ssa
 
 import (
 	"cmd/compile/internal/types"
+	"cmd/internal/src"
 	"testing"
 )
 
@@ -19,6 +20,7 @@ func TestCSEAuxPartitionBug(t *testing.T) {
 	arg1Aux := &tstAux{"arg1-aux"}
 	arg2Aux := &tstAux{"arg2-aux"}
 	arg3Aux := &tstAux{"arg3-aux"}
+	a := c.Frontend().Auto(src.NoXPos, c.config.Types.Int8)
 
 	// construct lots of values with args that have aux values and place
 	// them in an order that triggers the bug
@@ -36,7 +38,7 @@ func TestCSEAuxPartitionBug(t *testing.T) {
 			Valu("r8", OpAdd64, c.config.Types.Int64, 0, nil, "arg3", "arg2"),
 			Valu("r2", OpAdd64, c.config.Types.Int64, 0, nil, "arg1", "arg2"),
 			Valu("raddr", OpLocalAddr, c.config.Types.Int64.PtrTo(), 0, nil, "sp", "start"),
-			Valu("raddrdef", OpVarDef, types.TypeMem, 0, nil, "start"),
+			Valu("raddrdef", OpVarDef, types.TypeMem, 0, a, "start"),
 			Valu("r6", OpAdd64, c.config.Types.Int64, 0, nil, "r4", "r5"),
 			Valu("r3", OpAdd64, c.config.Types.Int64, 0, nil, "arg1", "arg2"),
 			Valu("r5", OpAdd64, c.config.Types.Int64, 0, nil, "r2", "r3"),
@@ -89,6 +91,7 @@ func TestCSEAuxPartitionBug(t *testing.T) {
 // TestZCSE tests the zero arg cse.
 func TestZCSE(t *testing.T) {
 	c := testConfig(t)
+	a := c.Frontend().Auto(src.NoXPos, c.config.Types.Int8)
 
 	fun := c.Fun("entry",
 		Bloc("entry",
@@ -106,7 +109,7 @@ func TestZCSE(t *testing.T) {
 			Valu("r2", OpAdd64, c.config.Types.Int64, 0, nil, "a2ld", "c2"),
 			Valu("r3", OpAdd64, c.config.Types.Int64, 0, nil, "r1", "r2"),
 			Valu("raddr", OpLocalAddr, c.config.Types.Int64.PtrTo(), 0, nil, "sp", "start"),
-			Valu("raddrdef", OpVarDef, types.TypeMem, 0, nil, "start"),
+			Valu("raddrdef", OpVarDef, types.TypeMem, 0, a, "start"),
 			Valu("rstore", OpStore, types.TypeMem, 0, c.config.Types.Int64, "raddr", "r3", "raddrdef"),
 			Goto("exit")),
 		Bloc("exit",
diff --git a/src/cmd/compile/internal/ssa/loop_test.go b/src/cmd/compile/internal/ssa/loop_test.go
index 8f72930bce..e64667b2ef 100644
--- a/src/cmd/compile/internal/ssa/loop_test.go
+++ b/src/cmd/compile/internal/ssa/loop_test.go
@@ -46,6 +46,7 @@ func TestLoopConditionS390X(t *testing.T) {
 	//   done:
 	//
 	c := testConfigS390X(t)
+	a := c.Frontend().Auto(src.NoXPos, c.config.Types.Int8)
 	fun := c.Fun("entry",
 		Bloc("entry",
 			Valu("mem", OpInitMem, types.TypeMem, 0, nil),
@@ -67,7 +68,7 @@ func TestLoopConditionS390X(t *testing.T) {
 			Valu("sum", OpAdd64, c.config.Types.Int64, 0, nil, "phisum", "c3"),
 			Goto("b1")),
 		Bloc("b3",
-			Valu("retdef", OpVarDef, types.TypeMem, 0, nil, "mem"),
+			Valu("retdef", OpVarDef, types.TypeMem, 0, a, "mem"),
 			Valu("store", OpStore, types.TypeMem, 0, c.config.Types.Int64, "ret", "phisum", "retdef"),
 			Exit("store")))
 	CheckFunc(fun.f)
