commit 59b0e147603e4a3a6170b56e30383a94e157e37a
Author: Russ Cox <rsc@golang.org>
Date:   Fri Oct 21 16:04:41 2016 -0400

    cmd/go: diagnose non-canonical import paths before compilation
    
    If we leave it for compilation sometimes the error appears first
    in derived vendor paths, without any indication where they came from.
    This is better.
    
    $ go1.7 build canonical/d
    cmd/go/testdata/src/canonical/a/a.go:3: non-canonical import path "canonical/a//vendor/c" (should be "canonical/a/vendor/c")
    cmd/go/testdata/src/canonical/a/a.go:3: can't find import: "canonical/a//vendor/c"
    
    $ go build canonical/d
    package canonical/d
            imports canonical/b
            imports canonical/a/: non-canonical import path: "canonical/a/" should be "canonical/a"
    $
    
    Fixes #16954.
    
    Change-Id: I315ccec92a00d98a08c139b3dc4e17dbc640edd0
    Reviewed-on: https://go-review.googlesource.com/31668
    Reviewed-by: Quentin Smith <quentin@golang.org>
---
 src/cmd/go/go_test.go                             | 10 ++++++++++
 src/cmd/go/pkg.go                                 | 17 +++++++++++++++++
 src/cmd/go/testdata/src/canonical/a/a.go          |  3 +++
 src/cmd/go/testdata/src/canonical/a/vendor/c/c.go |  1 +
 src/cmd/go/testdata/src/canonical/b/b.go          |  3 +++
 src/cmd/go/testdata/src/canonical/d/d.go          |  3 +++
 6 files changed, 37 insertions(+)

diff --git a/src/cmd/go/go_test.go b/src/cmd/go/go_test.go
index 40eb38f714..26b2dce0a6 100644
--- a/src/cmd/go/go_test.go
+++ b/src/cmd/go/go_test.go
@@ -1289,6 +1289,16 @@ func TestRelativeImportsInCommandLinePackage(t *testing.T) {
 	tg.run(append([]string{"test"}, files...)...)
 }
 
+func TestNonCanonicalImportPaths(t *testing.T) {
+	tg := testgo(t)
+	defer tg.cleanup()
+	tg.setenv("GOPATH", filepath.Join(tg.pwd(), "testdata"))
+	tg.runFail("build", "canonical/d")
+	tg.grepStderr("package canonical/d", "did not report canonical/d")
+	tg.grepStderr("imports canonical/b", "did not report canonical/b")
+	tg.grepStderr("imports canonical/a/: non-canonical", "did not report canonical/a/")
+}
+
 func TestVersionControlErrorMessageIncludesCorrectDirectory(t *testing.T) {
 	tg := testgo(t)
 	defer tg.cleanup()
diff --git a/src/cmd/go/pkg.go b/src/cmd/go/pkg.go
index 2f5e90faf4..a779f864ee 100644
--- a/src/cmd/go/pkg.go
+++ b/src/cmd/go/pkg.go
@@ -394,9 +394,26 @@ func loadImport(path, srcDir string, parent *Package, stk *importStack, importPo
 		}
 	}
 
+	if origPath != cleanImport(origPath) {
+		p.Error = &PackageError{
+			ImportStack: stk.copy(),
+			Err:         fmt.Sprintf("non-canonical import path: %q should be %q", origPath, pathpkg.Clean(origPath)),
+		}
+		p.Incomplete = true
+	}
+
 	return p
 }
 
+func cleanImport(path string) string {
+	orig := path
+	path = pathpkg.Clean(path)
+	if strings.HasPrefix(orig, "./") && path != ".." && path != "." && !strings.HasPrefix(path, "../") {
+		path = "./" + path
+	}
+	return path
+}
+
 var isDirCache = map[string]bool{}
 
 func isDir(path string) bool {
diff --git a/src/cmd/go/testdata/src/canonical/a/a.go b/src/cmd/go/testdata/src/canonical/a/a.go
new file mode 100644
index 0000000000..486cc4843f
--- /dev/null
+++ b/src/cmd/go/testdata/src/canonical/a/a.go
@@ -0,0 +1,3 @@
+package a
+
+import _ "c"
diff --git a/src/cmd/go/testdata/src/canonical/a/vendor/c/c.go b/src/cmd/go/testdata/src/canonical/a/vendor/c/c.go
new file mode 100644
index 0000000000..7f96c221c2
--- /dev/null
+++ b/src/cmd/go/testdata/src/canonical/a/vendor/c/c.go
@@ -0,0 +1 @@
+package c
diff --git a/src/cmd/go/testdata/src/canonical/b/b.go b/src/cmd/go/testdata/src/canonical/b/b.go
new file mode 100644
index 0000000000..ce0f4ce303
--- /dev/null
+++ b/src/cmd/go/testdata/src/canonical/b/b.go
@@ -0,0 +1,3 @@
+package b
+
+import _ "canonical/a/"
diff --git a/src/cmd/go/testdata/src/canonical/d/d.go b/src/cmd/go/testdata/src/canonical/d/d.go
new file mode 100644
index 0000000000..ef7dd7dd46
--- /dev/null
+++ b/src/cmd/go/testdata/src/canonical/d/d.go
@@ -0,0 +1,3 @@
+package d
+
+import _ "canonical/b"
