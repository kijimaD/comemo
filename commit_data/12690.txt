commit 2a5879d1e2f397d71097b27eda74c7867f48094a
Author: Andrew Gerrand <adg@golang.org>
Date:   Tue Mar 20 13:50:05 2012 +1100

    doc: replace mentions of 6g with gc or the go command
    
    R=golang-dev, r
    CC=golang-dev
    https://golang.org/cl/5846070
---
 doc/codewalk/markov.xml     | 13 ++++++-------
 doc/debugging_with_gdb.html |  6 +++---
 doc/go_faq.html             | 10 +++++-----
 3 files changed, 14 insertions(+), 15 deletions(-)

diff --git a/doc/codewalk/markov.xml b/doc/codewalk/markov.xml
index 977c95dadb..085ead7bcf 100644
--- a/doc/codewalk/markov.xml
+++ b/doc/codewalk/markov.xml
@@ -275,16 +275,15 @@ p[len(p)-1] = suffix
 </step>
 
 <step title="Using this program" src="doc/codewalk/markov.go">
-	To use this program, first compile and link it.
-	If you are using <code>6g</code> as your compiler, the command
-	would look something like this:
+	To use this program, first build it with the
+	<a href="/cmd/go/">go</a> command:
 	<pre>
-$ 6g markov.go &amp;&amp; 6l -o markov markov.6</pre>
+$ go build markov.go</pre>
 	And then execute it while piping in some input text:
 	<pre>
-$ echo "a man a plan a canal panama" | ./markov -prefix=1
-a plan a man a plan a canal panama
-	</pre>
+$ echo "a man a plan a canal panama" \
+	| ./markov -prefix=1
+a plan a man a plan a canal panama</pre>
 	Here's a transcript of generating some text using the Go distribution's
 	README file as source material:
 	<pre>
diff --git a/doc/debugging_with_gdb.html b/doc/debugging_with_gdb.html
index 51b650b18c..84cc488db8 100644
--- a/doc/debugging_with_gdb.html
+++ b/doc/debugging_with_gdb.html
@@ -4,15 +4,15 @@
 }-->
 
 <p><i>
-This applies to the 6g toolchain. Gccgo has native gdb support. Besides this
-overview you might want to consult the
+This applies to the <code>gc</code> toolchain. Gccgo has native gdb support.
+Besides this overview you might want to consult the
 <a href="http://sourceware.org/gdb/current/onlinedocs/gdb/">GDB manual</a>.
 </i></p>
 
 <h2 id="Introduction">Introduction</h2>
 
 <p>
-When you compile and link your Go programs with the 6g/6l or 8g/8l toolchains
+When you compile and link your Go programs with the <code>gc</code> toolchain
 on Linux, Mac OSX or FreeBSD, the resulting binaries contain DWARFv3
 debugging information that recent versions (>7.1) of the GDB debugger can
 use to inspect a live process or a core dump.
diff --git a/doc/go_faq.html b/doc/go_faq.html
index c4f81c7b94..b5b7cc656d 100644
--- a/doc/go_faq.html
+++ b/doc/go_faq.html
@@ -187,8 +187,8 @@ document server running in a production configuration on
 Do Go programs link with C/C++ programs?</h3>
 
 <p>
-There are two Go compiler implementations, <code>6g</code> and friends, 
-generically called <code>gc</code>, and <code>gccgo</code>.
+There are two Go compiler implementations, <code>gc</code>
+(the <code>6g</code> program and friends) and <code>gccgo</code>.
 <code>Gc</code> uses a different calling convention and linker and can
 therefore only be linked with C programs using the same convention.
 There is such a C compiler but no C++ compiler. 
@@ -994,7 +994,7 @@ Why is <code>int</code> 32 bits on 64 bit machines?</h3>
 <p>
 The sizes of <code>int</code> and <code>uint</code> are implementation-specific
 but the same as each other on a given platform.
-The 64 bit Go compilers (both 6g and gccgo) use a 32 bit representation for
+The 64 bit Go compilers (both gc and gccgo) use a 32 bit representation for
 <code>int</code>.  Code that relies on a particular
 size of value should use an explicitly sized type, like <code>int64</code>.
 On the other hand, floating-point scalars and complex
@@ -1321,7 +1321,7 @@ and uses a variant of the Plan 9 loader to generate ELF/Mach-O/PE binaries.
 </p>
 
 <p>
-We considered writing <code>6g</code>, the original Go compiler, in Go itself but
+We considered writing <code>gc</code>, the original Go compiler, in Go itself but
 elected not to do so because of the difficulties of bootstrapping and
 especially of open source distribution&mdash;you'd need a Go compiler to
 set up a Go environment. <code>Gccgo</code>, which came later, makes it possible to
@@ -1331,7 +1331,7 @@ parser are already available in the <a href="/pkg/go/"><code>go</code></a> packa
 </p>
 
 <p>
-We also considered using LLVM for <code>6g</code> but we felt it was too large and
+We also considered using LLVM for <code>gc</code> but we felt it was too large and
 slow to meet our performance goals.
 </p>
 
