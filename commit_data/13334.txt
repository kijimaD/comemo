commit 008c62b2cd728db744dcef53f1226cb1e43ba617
Author: Robert Griesemer <gri@golang.org>
Date:   Tue Jun 12 09:36:35 2012 -0700

    math/big: optimize common case of Int.Bit(0)
    
    R=golang-dev, dsymonds, rsc
    CC=golang-dev
    https://golang.org/cl/6306069
---
 src/pkg/math/big/int.go | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/src/pkg/math/big/int.go b/src/pkg/math/big/int.go
index ce308bd24f..276f56708a 100644
--- a/src/pkg/math/big/int.go
+++ b/src/pkg/math/big/int.go
@@ -697,6 +697,13 @@ func (z *Int) Rsh(x *Int, n uint) *Int {
 // Bit returns the value of the i'th bit of x. That is, it
 // returns (x>>i)&1. The bit index i must be >= 0.
 func (x *Int) Bit(i int) uint {
+	if i == 0 {
+		// optimization for common case: odd/even test of x
+		if len(x.abs) > 0 {
+			return uint(x.abs[0] & 1) // bit 0 is same for -x
+		}
+		return 0
+	}
 	if i < 0 {
 		panic("negative bit index")
 	}
