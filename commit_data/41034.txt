commit ffbc02761abb47106ce88e09290a31513b5f6c8a
Author: Cherry Zhang <cherryyz@google.com>
Date:   Fri Dec 27 12:02:00 2019 -0500

    runtime: ensure memmove write pointer atomically on ARM64
    
    If a pointer write is not atomic, if the GC is running
    concurrently, it may observe a partially updated pointer, which
    may point to unallocated or already dead memory. Most pointer
    writes, like the store instructions generated by the compiler,
    are already atomic. But we still need to be careful in places
    like memmove. In memmove, we don't know which bits are pointers
    (or too expensive to query), so we ensure that all aligned
    pointer-sized units are written atomically.
    
    Fixes #36101.
    
    Change-Id: I1b3ca24c6b1ac8a8aaf9ee470115e9a89ec1b00b
    Reviewed-on: https://go-review.googlesource.com/c/go/+/212626
    Reviewed-by: Austin Clements <austin@google.com>

 src/runtime/memmove_arm64.s | 42 +++++++++++++++++++++++++++++++++++++-----
 1 file changed, 37 insertions(+), 5 deletions(-)
