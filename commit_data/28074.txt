commit 06d639e07588ef290ed28ab384d5371e052240b1
Author: Brad Fitzpatrick <bradfitz@golang.org>
Date:   Wed Apr 27 16:56:13 2016 -0500

    runtime: fix SetCgoTraceback doc indentation
    
    It wasn't rendering as HTML nicely.
    
    Change-Id: I5408ec22932a05e85c210c0faa434bd19dce5650
    Reviewed-on: https://go-review.googlesource.com/22532
    Reviewed-by: Ian Lance Taylor <iant@golang.org>
---
 src/runtime/traceback.go | 68 ++++++++++++++++++++++++------------------------
 1 file changed, 34 insertions(+), 34 deletions(-)

diff --git a/src/runtime/traceback.go b/src/runtime/traceback.go
index 16b9278641..529aa1eddb 100644
--- a/src/runtime/traceback.go
+++ b/src/runtime/traceback.go
@@ -771,15 +771,15 @@ func isSystemGoroutine(gp *g) bool {
 // The context function will be called with a single argument, a
 // pointer to a struct:
 //
-// struct {
-//	Context uintptr
-// }
+//	struct {
+//		Context uintptr
+//	}
 //
 // In C syntax, this struct will be
 //
-// struct {
-//   uintptr_t Context;
-// };
+//	struct {
+//		uintptr_t Context;
+//	};
 //
 // If the Context field is 0, the context function is being called to
 // record the current traceback context. It should record whatever
@@ -803,19 +803,19 @@ func isSystemGoroutine(gp *g) bool {
 // The traceback function will be called with a single argument, a
 // pointer to a struct:
 //
-// struct {
-//	Context uintptr
-//	Buf     *uintptr
-//	Max     uintptr
-// }
+//	struct {
+//		Context uintptr
+//		Buf     *uintptr
+//		Max     uintptr
+//	}
 //
 // In C syntax, this struct will be
 //
-// struct {
-//   uintptr_t  Context;
-//   uintptr_t* Buf;
-//   uintptr_t  Max;
-// };
+//	struct {
+//		uintptr_t  Context;
+//		uintptr_t* Buf;
+//		uintptr_t  Max;
+//	};
 //
 // The Context field will be zero to gather a traceback from the
 // current program execution point. In this case, the traceback
@@ -847,27 +847,27 @@ func isSystemGoroutine(gp *g) bool {
 // The symbolizer function will be called with a single argument, a
 // pointer to a struct:
 //
-// struct {
-//	PC      uintptr // program counter to fetch information for
-//	File    *byte   // file name (NUL terminated)
-//	Lineno  uintptr // line number
-//	Func    *byte   // function name (NUL terminated)
-//	Entry   uintptr // function entry point
-//	More    uintptr // set non-zero if more info for this PC
-//	Data    uintptr // unused by runtime, available for function
-// }
+//	struct {
+//		PC      uintptr // program counter to fetch information for
+//		File    *byte   // file name (NUL terminated)
+//		Lineno  uintptr // line number
+//		Func    *byte   // function name (NUL terminated)
+//		Entry   uintptr // function entry point
+//		More    uintptr // set non-zero if more info for this PC
+//		Data    uintptr // unused by runtime, available for function
+//	}
 //
 // In C syntax, this struct will be
 //
-// struct {
-//   uintptr_t PC;
-//   char*     File;
-//   uintptr_t Lineno;
-//   char*     Func;
-//   uintptr_t Entry;
-//   uintptr_t More;
-//   uintptr_t Data;
-// };
+//	struct {
+//		uintptr_t PC;
+//		char*     File;
+//		uintptr_t Lineno;
+//		char*     Func;
+//		uintptr_t Entry;
+//		uintptr_t More;
+//		uintptr_t Data;
+//	};
 //
 // The PC field will be a value returned by a call to the traceback
 // function.
