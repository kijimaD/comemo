commit 5d481abc87643146a3a3ee9f005ca01c7715772a
Author: Jes Cok <xigua67damn@gmail.com>
Date:   Fri Jun 23 07:47:48 2023 +0000

    all: fix typos
    
    Change-Id: I510b0a4bf3472d937393800dd57472c30beef329
    GitHub-Last-Rev: 8d289b73a37bd86080936423d981d21e152aaa33
    GitHub-Pull-Request: golang/go#60960
    Reviewed-on: https://go-review.googlesource.com/c/go/+/505398
    Auto-Submit: Robert Findley <rfindley@google.com>
    Reviewed-by: Robert Findley <rfindley@google.com>
    TryBot-Result: Gopher Robot <gobot@golang.org>
    Run-TryBot: Robert Findley <rfindley@google.com>
    Reviewed-by: Ian Lance Taylor <iant@google.com>
---
 src/cmd/cgo/internal/test/issue9400_linux.go  | 2 +-
 src/cmd/compile/internal/types2/predicates.go | 4 ++--
 src/cmd/compile/internal/types2/unify.go      | 2 +-
 src/cmd/go/internal/modget/get.go             | 2 +-
 src/cmd/internal/obj/arm64/doc.go             | 2 +-
 src/cmd/internal/obj/objfile.go               | 2 +-
 src/cmd/internal/obj/x86/asm6.go              | 2 +-
 src/encoding/gob/encoder_test.go              | 2 +-
 src/go/types/predicates.go                    | 4 ++--
 src/go/types/unify.go                         | 2 +-
 src/regexp/testdata/nullsubexpr.dat           | 2 +-
 src/runtime/cgocall.go                        | 2 +-
 src/runtime/coverage/emit.go                  | 2 +-
 src/runtime/mgcmark.go                        | 2 +-
 src/runtime/race/testdata/chan_test.go        | 2 +-
 test/codegen/README                           | 2 +-
 16 files changed, 18 insertions(+), 18 deletions(-)

diff --git a/src/cmd/cgo/internal/test/issue9400_linux.go b/src/cmd/cgo/internal/test/issue9400_linux.go
index 1511e25876..41b9ab9dc7 100644
--- a/src/cmd/cgo/internal/test/issue9400_linux.go
+++ b/src/cmd/cgo/internal/test/issue9400_linux.go
@@ -48,7 +48,7 @@ func test9400(t *testing.T) {
 	}
 
 	// Disable GC for the duration of the test.
-	// This avoids a potential GC deadlock when spinning in uninterruptable ASM below #49695.
+	// This avoids a potential GC deadlock when spinning in uninterruptible ASM below #49695.
 	defer debug.SetGCPercent(debug.SetGCPercent(-1))
 	// SetGCPercent waits until the mark phase is over, but the runtime
 	// also preempts at the start of the sweep phase, so make sure that's
diff --git a/src/cmd/compile/internal/types2/predicates.go b/src/cmd/compile/internal/types2/predicates.go
index 13a3bf8af5..075bd97d0f 100644
--- a/src/cmd/compile/internal/types2/predicates.go
+++ b/src/cmd/compile/internal/types2/predicates.go
@@ -449,7 +449,7 @@ func (c *comparer) identical(x, y Type, p *ifacePair) bool {
 					return false
 				}
 			}
-			return indenticalOrigin(x, y)
+			return identicalOrigin(x, y)
 		}
 
 	case *TypeParam:
@@ -466,7 +466,7 @@ func (c *comparer) identical(x, y Type, p *ifacePair) bool {
 }
 
 // identicalOrigin reports whether x and y originated in the same declaration.
-func indenticalOrigin(x, y *Named) bool {
+func identicalOrigin(x, y *Named) bool {
 	// TODO(gri) is this correct?
 	return x.Origin().obj == y.Origin().obj
 }
diff --git a/src/cmd/compile/internal/types2/unify.go b/src/cmd/compile/internal/types2/unify.go
index 94830e94f7..dfb5512753 100644
--- a/src/cmd/compile/internal/types2/unify.go
+++ b/src/cmd/compile/internal/types2/unify.go
@@ -724,7 +724,7 @@ func (u *unifier) nify(x, y Type, mode unifyMode, p *ifacePair) (result bool) {
 					return false
 				}
 			}
-			return indenticalOrigin(x, y)
+			return identicalOrigin(x, y)
 		}
 
 	case *TypeParam:
diff --git a/src/cmd/go/internal/modget/get.go b/src/cmd/go/internal/modget/get.go
index 37befa39c9..3615130a99 100644
--- a/src/cmd/go/internal/modget/get.go
+++ b/src/cmd/go/internal/modget/get.go
@@ -344,7 +344,7 @@ func runGet(ctx context.Context, cmd *base.Command, args []string) {
 			// The result of any version query for a given module — even "upgrade" or
 			// "patch" — is always relative to the build list at the start of
 			// the 'go get' command, not an intermediate state, and is therefore
-			// deterministic and therefore cachable, and the constraints on the
+			// deterministic and therefore cacheable, and the constraints on the
 			// selected version of each module can only narrow as we iterate.
 			//
 			// "all" is functionally very similar to a wildcard pattern. The set of
diff --git a/src/cmd/internal/obj/arm64/doc.go b/src/cmd/internal/obj/arm64/doc.go
index 4606e98aa9..7c65ab76da 100644
--- a/src/cmd/internal/obj/arm64/doc.go
+++ b/src/cmd/internal/obj/arm64/doc.go
@@ -96,7 +96,7 @@ Examples:
 7. Move large constants to vector registers.
 
 Go asm uses VMOVQ/VMOVD/VMOVS to move 128-bit, 64-bit and 32-bit constants into vector registers, respectively.
-And for a 128-bit interger, it take two 64-bit operands, for the low and high parts separately.
+And for a 128-bit integer, it take two 64-bit operands, for the low and high parts separately.
 
 Examples:
 
diff --git a/src/cmd/internal/obj/objfile.go b/src/cmd/internal/obj/objfile.go
index aa99855565..0113eddbfd 100644
--- a/src/cmd/internal/obj/objfile.go
+++ b/src/cmd/internal/obj/objfile.go
@@ -423,7 +423,7 @@ func (w *writer) Hash(s *LSym) {
 // contentHashSection returns a mnemonic for s's section.
 // The goal is to prevent content-addressability from moving symbols between sections.
 // contentHashSection only distinguishes between sets of sections for which this matters.
-// Allowing flexibility increases the effectiveness of content-addressibility.
+// Allowing flexibility increases the effectiveness of content-addressability.
 // But in some cases, such as doing addressing based on a base symbol,
 // we need to ensure that a symbol is always in a particular section.
 // Some of these conditions are duplicated in cmd/link/internal/ld.(*Link).symtab.
diff --git a/src/cmd/internal/obj/x86/asm6.go b/src/cmd/internal/obj/x86/asm6.go
index 718da6a8a2..782b6d4aff 100644
--- a/src/cmd/internal/obj/x86/asm6.go
+++ b/src/cmd/internal/obj/x86/asm6.go
@@ -1978,7 +1978,7 @@ func fusedJump(p *obj.Prog) (bool, uint8) {
 type padJumpsCtx int32
 
 func makePjcCtx(ctxt *obj.Link) padJumpsCtx {
-	// Disable jump padding on 32 bit builds by settting
+	// Disable jump padding on 32 bit builds by setting
 	// padJumps to 0.
 	if ctxt.Arch.Family == sys.I386 {
 		return padJumpsCtx(0)
diff --git a/src/encoding/gob/encoder_test.go b/src/encoding/gob/encoder_test.go
index 484be43c47..d99b0715f9 100644
--- a/src/encoding/gob/encoder_test.go
+++ b/src/encoding/gob/encoder_test.go
@@ -1017,7 +1017,7 @@ type Bug4Secret struct {
 
 // Test that a failed compilation doesn't leave around an executable encoder.
 // Issue 3723.
-func TestMutipleEncodingsOfBadType(t *testing.T) {
+func TestMultipleEncodingsOfBadType(t *testing.T) {
 	x := Bug4Public{
 		Name:   "name",
 		Secret: Bug4Secret{1},
diff --git a/src/go/types/predicates.go b/src/go/types/predicates.go
index b821b584c1..752d1a76c2 100644
--- a/src/go/types/predicates.go
+++ b/src/go/types/predicates.go
@@ -451,7 +451,7 @@ func (c *comparer) identical(x, y Type, p *ifacePair) bool {
 					return false
 				}
 			}
-			return indenticalOrigin(x, y)
+			return identicalOrigin(x, y)
 		}
 
 	case *TypeParam:
@@ -468,7 +468,7 @@ func (c *comparer) identical(x, y Type, p *ifacePair) bool {
 }
 
 // identicalOrigin reports whether x and y originated in the same declaration.
-func indenticalOrigin(x, y *Named) bool {
+func identicalOrigin(x, y *Named) bool {
 	// TODO(gri) is this correct?
 	return x.Origin().obj == y.Origin().obj
 }
diff --git a/src/go/types/unify.go b/src/go/types/unify.go
index bef851f423..e4121413c5 100644
--- a/src/go/types/unify.go
+++ b/src/go/types/unify.go
@@ -726,7 +726,7 @@ func (u *unifier) nify(x, y Type, mode unifyMode, p *ifacePair) (result bool) {
 					return false
 				}
 			}
-			return indenticalOrigin(x, y)
+			return identicalOrigin(x, y)
 		}
 
 	case *TypeParam:
diff --git a/src/regexp/testdata/nullsubexpr.dat b/src/regexp/testdata/nullsubexpr.dat
index 68d9c99996..99ce0f552d 100644
--- a/src/regexp/testdata/nullsubexpr.dat
+++ b/src/regexp/testdata/nullsubexpr.dat
@@ -44,7 +44,7 @@ E	SAME		ababab		(0,0)(0,0)
 
 E	((z)+|a)*	zabcde		(0,2)(1,2)
 
-#{E	a+?		aaaaaa		(0,1)	no *? +? mimimal match ops
+#{E	a+?		aaaaaa		(0,1)	no *? +? minimal match ops
 #E	(a)		aaa		(0,1)(0,1)
 #E	(a*?)		aaa		(0,0)(0,0)
 #E	(a)*?		aaa		(0,0)
diff --git a/src/runtime/cgocall.go b/src/runtime/cgocall.go
index 1da7249abc..f6e2f63813 100644
--- a/src/runtime/cgocall.go
+++ b/src/runtime/cgocall.go
@@ -168,7 +168,7 @@ func cgocall(fn, arg unsafe.Pointer) int32 {
 	// any C on the call stack, which there will be after this point. If
 	// there isn't, we can use frame pointer unwinding to collect call
 	// stacks efficiently. This will be the case for the first Go-to-C call
-	// on a stack, so it's prefereable to update it here, after we emit a
+	// on a stack, so it's preferable to update it here, after we emit a
 	// trace event in entersyscall above.
 	mp.ncgo++
 
diff --git a/src/runtime/coverage/emit.go b/src/runtime/coverage/emit.go
index d18e69053d..6fe04daea8 100644
--- a/src/runtime/coverage/emit.go
+++ b/src/runtime/coverage/emit.go
@@ -575,7 +575,7 @@ func (s *emitState) emitCounterDataFile(finalHash [16]byte, w io.Writer) error {
 }
 
 // markProfileEmitted signals the runtime/coverage machinery that
-// coverate data output files have already been written out, and there
+// coverage data output files have already been written out, and there
 // is no need to take any additional action at exit time. This
 // function is called (via linknamed reference) from the
 // coverage-related boilerplate code in _testmain.go emitted for go
diff --git a/src/runtime/mgcmark.go b/src/runtime/mgcmark.go
index 2ed411ae61..c49eba0302 100644
--- a/src/runtime/mgcmark.go
+++ b/src/runtime/mgcmark.go
@@ -537,7 +537,7 @@ func gcAssistAlloc1(gp *g, scanWork int64) {
 		// The gcBlackenEnabled check in malloc races with the
 		// store that clears it but an atomic check in every malloc
 		// would be a performance hit.
-		// Instead we recheck it here on the non-preemptable system
+		// Instead we recheck it here on the non-preemptible system
 		// stack to determine if we should perform an assist.
 
 		// GC is done, so ignore any remaining debt.
diff --git a/src/runtime/race/testdata/chan_test.go b/src/runtime/race/testdata/chan_test.go
index e39ad4f99c..d592de9771 100644
--- a/src/runtime/race/testdata/chan_test.go
+++ b/src/runtime/race/testdata/chan_test.go
@@ -766,7 +766,7 @@ func TestNoRaceCloseHappensBeforeRead(t *testing.T) {
 
 // Test that we call the proper race detector function when c.elemsize==0.
 // See https://github.com/golang/go/issues/42598
-func TestNoRaceElemetSize0(t *testing.T) {
+func TestNoRaceElemSize0(t *testing.T) {
 	var x, y int
 	var c = make(chan struct{}, 2)
 	c <- struct{}{}
diff --git a/test/codegen/README b/test/codegen/README
index 5a4684284b..19a73d031c 100644
--- a/test/codegen/README
+++ b/test/codegen/README
@@ -29,7 +29,7 @@ The test harness compiles the tests with the same go toolchain that is
 used to run the test. After writing tests for a newly added codegen
 transformation, it can be useful to first run the test harness with a
 toolchain from a released Go version (and verify that the new tests
-fail), and then re-runnig the tests using the devel toolchain.
+fail), and then re-running the tests using the devel toolchain.
 
 
 - Regexps comments syntax
