commit 4843b130bbc67b5b33f20d612a992131735ec2b4
Author: Russ Cox <rsc@golang.org>
Date:   Wed May 19 21:33:31 2010 -0700

    runtime: avoid allocation for fixed strings
    
    R=r
    CC=golang-dev
    https://golang.org/cl/1083041
---
 src/pkg/runtime/darwin/386/signal.c    |  2 +-
 src/pkg/runtime/darwin/amd64/signal.c  |  2 +-
 src/pkg/runtime/freebsd/386/signal.c   |  2 +-
 src/pkg/runtime/freebsd/amd64/signal.c |  2 +-
 src/pkg/runtime/iface.c                |  4 ++--
 src/pkg/runtime/linux/386/signal.c     |  2 +-
 src/pkg/runtime/linux/amd64/signal.c   |  2 +-
 src/pkg/runtime/linux/arm/signal.c     |  2 +-
 src/pkg/runtime/runtime.c              |  8 ++++----
 src/pkg/runtime/runtime.h              |  1 +
 src/pkg/runtime/string.goc             | 10 ++++++++++
 src/pkg/runtime/symtab.c               |  2 +-
 12 files changed, 25 insertions(+), 14 deletions(-)

diff --git a/src/pkg/runtime/darwin/386/signal.c b/src/pkg/runtime/darwin/386/signal.c
index 5161796dc3..7c0c381d37 100644
--- a/src/pkg/runtime/darwin/386/signal.c
+++ b/src/pkg/runtime/darwin/386/signal.c
@@ -30,7 +30,7 @@ signame(int32 sig)
 {
 	if(sig < 0 || sig >= NSIG)
 		return emptystring;
-	return gostring((byte*)sigtab[sig].name);
+	return gostringnocopy((byte*)sigtab[sig].name);
 }
 
 void
diff --git a/src/pkg/runtime/darwin/amd64/signal.c b/src/pkg/runtime/darwin/amd64/signal.c
index 56f02e56dc..8145e8d8f4 100644
--- a/src/pkg/runtime/darwin/amd64/signal.c
+++ b/src/pkg/runtime/darwin/amd64/signal.c
@@ -38,7 +38,7 @@ signame(int32 sig)
 {
 	if(sig < 0 || sig >= NSIG)
 		return emptystring;
-	return gostring((byte*)sigtab[sig].name);
+	return gostringnocopy((byte*)sigtab[sig].name);
 }
 
 void
diff --git a/src/pkg/runtime/freebsd/386/signal.c b/src/pkg/runtime/freebsd/386/signal.c
index be2f4ce6ff..44a868e353 100644
--- a/src/pkg/runtime/freebsd/386/signal.c
+++ b/src/pkg/runtime/freebsd/386/signal.c
@@ -41,7 +41,7 @@ signame(int32 sig)
 {
 	if(sig < 0 || sig >= NSIG)
 		return emptystring;
-	return gostring((byte*)sigtab[sig].name);
+	return gostringnocopy((byte*)sigtab[sig].name);
 }
 
 void
diff --git a/src/pkg/runtime/freebsd/amd64/signal.c b/src/pkg/runtime/freebsd/amd64/signal.c
index b0ac650a3b..e153752db7 100644
--- a/src/pkg/runtime/freebsd/amd64/signal.c
+++ b/src/pkg/runtime/freebsd/amd64/signal.c
@@ -49,7 +49,7 @@ signame(int32 sig)
 {
 	if(sig < 0 || sig >= NSIG)
 		return emptystring;
-	return gostring((byte*)sigtab[sig].name);
+	return gostringnocopy((byte*)sigtab[sig].name);
 }
 
 void
diff --git a/src/pkg/runtime/iface.c b/src/pkg/runtime/iface.c
index 9c2c6b1b5e..55a1362c61 100644
--- a/src/pkg/runtime/iface.c
+++ b/src/pkg/runtime/iface.c
@@ -467,7 +467,7 @@ ifacehash1(void *data, Type *t)
 	if(algarray[alg].hash == nohash) {
 		// calling nohash will panic too,
 		// but we can print a better error.
-		·newErrorString(catstring(gostring((byte*)"hash of unhashable type "), *t->string), &err);
+		·newErrorString(catstring(gostringnocopy((byte*)"hash of unhashable type "), *t->string), &err);
 		·panic(err);
 	}
 	if(wid <= sizeof(data))
@@ -501,7 +501,7 @@ ifaceeq1(void *data1, void *data2, Type *t)
 	if(algarray[alg].equal == noequal) {
 		// calling noequal will panic too,
 		// but we can print a better error.
-		·newErrorString(catstring(gostring((byte*)"comparing uncomparable type "), *t->string), &err);
+		·newErrorString(catstring(gostringnocopy((byte*)"comparing uncomparable type "), *t->string), &err);
 		·panic(err);
 	}
 
diff --git a/src/pkg/runtime/linux/386/signal.c b/src/pkg/runtime/linux/386/signal.c
index 8c76ec366a..2d8ad57b2a 100644
--- a/src/pkg/runtime/linux/386/signal.c
+++ b/src/pkg/runtime/linux/386/signal.c
@@ -38,7 +38,7 @@ signame(int32 sig)
 {
 	if(sig < 0 || sig >= NSIG)
 		return emptystring;
-	return gostring((byte*)sigtab[sig].name);
+	return gostringnocopy((byte*)sigtab[sig].name);
 }
 
 void
diff --git a/src/pkg/runtime/linux/amd64/signal.c b/src/pkg/runtime/linux/amd64/signal.c
index fbe6599f6c..1dfeb5f051 100644
--- a/src/pkg/runtime/linux/amd64/signal.c
+++ b/src/pkg/runtime/linux/amd64/signal.c
@@ -46,7 +46,7 @@ signame(int32 sig)
 {
 	if(sig < 0 || sig >= NSIG)
 		return emptystring;
-	return gostring((byte*)sigtab[sig].name);
+	return gostringnocopy((byte*)sigtab[sig].name);
 }
 
 void
diff --git a/src/pkg/runtime/linux/arm/signal.c b/src/pkg/runtime/linux/arm/signal.c
index 4d315cc808..68d10ea65a 100644
--- a/src/pkg/runtime/linux/arm/signal.c
+++ b/src/pkg/runtime/linux/arm/signal.c
@@ -46,7 +46,7 @@ signame(int32 sig)
 {
 	if(sig < 0 || sig >= NSIG)
 		return emptystring;
-	return gostring((byte*)sigtab[sig].name);
+	return gostringnocopy((byte*)sigtab[sig].name);
 }
 
 void
diff --git a/src/pkg/runtime/runtime.c b/src/pkg/runtime/runtime.c
index 67b8b9725e..e83006c19d 100644
--- a/src/pkg/runtime/runtime.c
+++ b/src/pkg/runtime/runtime.c
@@ -79,7 +79,7 @@ panicstring(int8 *s)
 {
 	Eface err;
 	
-	·newErrorString(gostring((byte*)s), &err);
+	·newErrorString(gostringnocopy((byte*)s), &err);
 	·panic(err);
 }
 
@@ -161,13 +161,13 @@ goargs(void)
 	genvv = malloc(envc*sizeof genvv[0]);
 
 	for(i=0; i<argc; i++)
-		gargv[i] = gostring(argv[i]);
+		gargv[i] = gostringnocopy(argv[i]);
 	os·Args.array = (byte*)gargv;
 	os·Args.len = argc;
 	os·Args.cap = argc;
 
 	for(i=0; i<envc; i++)
-		genvv[i] = gostring(argv[argc+1+i]);
+		genvv[i] = gostringnocopy(argv[argc+1+i]);
 	os·Envs.array = (byte*)genvv;
 	os·Envs.len = envc;
 	os·Envs.cap = envc;
@@ -220,7 +220,7 @@ void
 	byte *p;
 
 	p = getenv("GOROOT");
-	out = gostring(p);
+	out = gostringnocopy(p);
 	FLUSH(&out);
 }
 
diff --git a/src/pkg/runtime/runtime.h b/src/pkg/runtime/runtime.h
index 9c08796ed3..1bce98e256 100644
--- a/src/pkg/runtime/runtime.h
+++ b/src/pkg/runtime/runtime.h
@@ -387,6 +387,7 @@ void*	mal(uintptr);
 uint32	cmpstring(String, String);
 String	catstring(String, String);
 String	gostring(byte*);
+String	gostringnocopy(byte*);
 String	gostringw(uint16*);
 void	initsig(void);
 int32	gotraceback(void);
diff --git a/src/pkg/runtime/string.goc b/src/pkg/runtime/string.goc
index 103ac329b4..1a48473221 100644
--- a/src/pkg/runtime/string.goc
+++ b/src/pkg/runtime/string.goc
@@ -60,6 +60,16 @@ gostring(byte *str)
 	return s;
 }
 
+String
+gostringnocopy(byte *str)
+{
+	String s;
+	
+	s.str = str;
+	s.len = findnull(str);
+	return s;
+}
+
 String
 gostringw(uint16 *str)
 {
diff --git a/src/pkg/runtime/symtab.c b/src/pkg/runtime/symtab.c
index 0284c9f019..5a35f635b7 100644
--- a/src/pkg/runtime/symtab.c
+++ b/src/pkg/runtime/symtab.c
@@ -106,7 +106,7 @@ dofunc(Sym *sym)
 			break;
 		}
 		f = &func[nfunc++];
-		f->name = gostring(sym->name);
+		f->name = gostringnocopy(sym->name);
 		f->entry = sym->value;
 		if(sym->symtype == 'L' || sym->symtype == 'l')
 			f->frame = -sizeof(uintptr);
