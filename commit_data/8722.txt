commit 0ce57a73c55c0729e003065dd6b656cb6b1cdca0
Author: Jeff Hodges <jeff@somethingsimilar.com>
Date:   Tue Jun 14 12:56:46 2011 -0400

    syscall: add ptrace on darwin
    
    The ptrace syscall remains gutted on darwin, but usable.  This
    also makes the syscall addition process reproducible on darwin
    instead of relying on a file path in rsc's home directory.
    I've also removed an override of $PATH in env.bash that made
    tooling harder.
    
    R=rsc, dave, r
    CC=golang-dev
    https://golang.org/cl/4517147
---
 src/pkg/syscall/mkall.sh                 |   5 +-
 src/pkg/syscall/mkerrors.sh              |   3 +-
 src/pkg/syscall/mksysnum_darwin.pl       |  18 +-
 src/pkg/syscall/syscall_darwin.go        |   4 +
 src/pkg/syscall/zerrors_darwin_386.go    |  18 +
 src/pkg/syscall/zerrors_darwin_amd64.go  |  22 +-
 src/pkg/syscall/zsyscall_darwin_386.go   |   8 +
 src/pkg/syscall/zsyscall_darwin_amd64.go |   8 +
 src/pkg/syscall/zsysnum_darwin_386.go    | 828 +++++++++++++------------------
 src/pkg/syscall/zsysnum_darwin_amd64.go  | 828 +++++++++++++------------------
 10 files changed, 765 insertions(+), 977 deletions(-)

diff --git a/src/pkg/syscall/mkall.sh b/src/pkg/syscall/mkall.sh
index 0a4ca0326b..f031a38ed0 100755
--- a/src/pkg/syscall/mkall.sh
+++ b/src/pkg/syscall/mkall.sh
@@ -120,14 +120,13 @@ freebsd_amd64)
 darwin_386)
 	mkerrors="$mkerrors -f -m32"
 	mksyscall="./mksyscall.pl -l32"
-	mksysnum="./mksysnum_darwin.pl /home/rsc/pub/xnu-1228/bsd/kern/syscalls.master"
+	mksysnum="./mksysnum_darwin.pl /usr/include/sys/syscall.h"
 	mktypes="godefs -gsyscall -f-m32"
 	;;
 darwin_amd64)
 	mkerrors="$mkerrors -f -m64"
-	mksysnum="./mksysnum_darwin.pl /home/rsc/pub/xnu-1228/bsd/kern/syscalls.master"
+	mksysnum="./mksysnum_darwin.pl /usr/include/sys/syscall.h"
 	mktypes="godefs -gsyscall -f-m64"
-	mkerrors="./mkerrors.sh"
 	;;
 linux_386)
 	mkerrors="$mkerrors -f -m32"
diff --git a/src/pkg/syscall/mkerrors.sh b/src/pkg/syscall/mkerrors.sh
index 1949ebfadd..20d261a79c 100755
--- a/src/pkg/syscall/mkerrors.sh
+++ b/src/pkg/syscall/mkerrors.sh
@@ -47,6 +47,7 @@ includes_Darwin='
 #define _DARWIN_USE_64_BIT_INODE
 #include <sys/types.h>
 #include <sys/event.h>
+#include <sys/ptrace.h>
 #include <sys/socket.h>
 #include <sys/sockio.h>
 #include <sys/sysctl.h>
@@ -136,7 +137,7 @@ done
 		$2 == "CTL_MAXNAME" ||
 		$2 ~ /^(MS|MNT)_/ ||
 		$2 ~ /^TUN(SET|GET|ATTACH|DETACH)/ ||
-		$2 ~ /^(O|F|FD|NAME|S|PTRACE)_/ ||
+		$2 ~ /^(O|F|FD|NAME|S|PTRACE|PT)_/ ||
 		$2 ~ /^LINUX_REBOOT_CMD_/ ||
 		$2 ~ /^LINUX_REBOOT_MAGIC[12]$/ ||
 		$2 !~ "NLA_TYPE_MASK" &&
diff --git a/src/pkg/syscall/mksysnum_darwin.pl b/src/pkg/syscall/mksysnum_darwin.pl
index d078a1836c..7469f2b960 100755
--- a/src/pkg/syscall/mksysnum_darwin.pl
+++ b/src/pkg/syscall/mksysnum_darwin.pl
@@ -3,8 +3,7 @@
 # Use of this source code is governed by a BSD-style
 # license that can be found in the LICENSE file.
 #
-# Generate system call table for Darwin from master list
-# (for example, xnu-1228/bsd/kern/syscalls.master).
+# Generate system call table for Darwin from sys/syscall.h
 
 my $command = "mksysnum_darwin.pl " . join(' ', @ARGV);
 
@@ -18,18 +17,11 @@ const (
 EOF
 
 while(<>){
-	if(/^([0-9]+)\s+ALL\s+({ \S+\s+(\w+).*})/){
-		my $num = $1;
-		my $proto = $2;
-		my $name = "SYS_$3";
+	if(/^#define\s+SYS_(\w+)\s+([0-9]+)/){
+		my $name = $1;
+		my $num = $2;
 		$name =~ y/a-z/A-Z/;
-
-		# There are multiple entries for enosys and nosys, so comment them out.
-		if($name =~ /^SYS_E?NOSYS$/){
-			$name = "// $name";
-		}
-
-		print "	$name = $num;  // $proto\n";
+		print "	SYS_$name = $num;"
 	}
 }
 
diff --git a/src/pkg/syscall/syscall_darwin.go b/src/pkg/syscall/syscall_darwin.go
index 9e153b73d6..fabd481783 100644
--- a/src/pkg/syscall/syscall_darwin.go
+++ b/src/pkg/syscall/syscall_darwin.go
@@ -56,6 +56,10 @@ func ParseDirent(buf []byte, max int, names []string) (consumed int, count int,
 	return origlen - len(buf), count, names
 }
 
+//sys   ptrace(request int, pid int, addr uintptr, data uintptr) (errno int)
+func PtraceAttach(pid int) (errno int) { return ptrace(PT_ATTACH, pid, 0, 0) }
+func PtraceDetach(pid int) (errno int) { return ptrace(PT_DETACH, pid, 0, 0) }
+
 // TODO
 func Sendfile(outfd int, infd int, offset *int64, count int) (written int, errno int) {
 	return -1, ENOSYS
diff --git a/src/pkg/syscall/zerrors_darwin_386.go b/src/pkg/syscall/zerrors_darwin_386.go
index 5ee64ee70b..964e588787 100644
--- a/src/pkg/syscall/zerrors_darwin_386.go
+++ b/src/pkg/syscall/zerrors_darwin_386.go
@@ -709,6 +709,24 @@ const (
 	PROT_NONE                   = 0
 	PROT_READ                   = 0x1
 	PROT_WRITE                  = 0x2
+	PT_ATTACH                   = 0xa
+	PT_ATTACHEXC                = 0xe
+	PT_CONTINUE                 = 0x7
+	PT_DENY_ATTACH              = 0x1f
+	PT_DETACH                   = 0xb
+	PT_FIRSTMACH                = 0x20
+	PT_FORCEQUOTA               = 0x1e
+	PT_KILL                     = 0x8
+	PT_READ_D                   = 0x2
+	PT_READ_I                   = 0x1
+	PT_READ_U                   = 0x3
+	PT_SIGEXC                   = 0xc
+	PT_STEP                     = 0x9
+	PT_THUPDATE                 = 0xd
+	PT_TRACE_ME                 = 0
+	PT_WRITE_D                  = 0x5
+	PT_WRITE_I                  = 0x4
+	PT_WRITE_U                  = 0x6
 	RTAX_AUTHOR                 = 0x6
 	RTAX_BRD                    = 0x7
 	RTAX_DST                    = 0
diff --git a/src/pkg/syscall/zerrors_darwin_amd64.go b/src/pkg/syscall/zerrors_darwin_amd64.go
index 65a48d6e7d..adf0399050 100644
--- a/src/pkg/syscall/zerrors_darwin_amd64.go
+++ b/src/pkg/syscall/zerrors_darwin_amd64.go
@@ -1,7 +1,7 @@
-// mkerrors.sh
+// mkerrors.sh -f -m64
 // MACHINE GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
 
-// godefs -c gcc -gsyscall _const.c
+// godefs -c gcc -f -m64 -gsyscall -f -m64 _const.c
 
 // MACHINE GENERATED - DO NOT EDIT.
 
@@ -709,6 +709,24 @@ const (
 	PROT_NONE                   = 0
 	PROT_READ                   = 0x1
 	PROT_WRITE                  = 0x2
+	PT_ATTACH                   = 0xa
+	PT_ATTACHEXC                = 0xe
+	PT_CONTINUE                 = 0x7
+	PT_DENY_ATTACH              = 0x1f
+	PT_DETACH                   = 0xb
+	PT_FIRSTMACH                = 0x20
+	PT_FORCEQUOTA               = 0x1e
+	PT_KILL                     = 0x8
+	PT_READ_D                   = 0x2
+	PT_READ_I                   = 0x1
+	PT_READ_U                   = 0x3
+	PT_SIGEXC                   = 0xc
+	PT_STEP                     = 0x9
+	PT_THUPDATE                 = 0xd
+	PT_TRACE_ME                 = 0
+	PT_WRITE_D                  = 0x5
+	PT_WRITE_I                  = 0x4
+	PT_WRITE_U                  = 0x6
 	RTAX_AUTHOR                 = 0x6
 	RTAX_BRD                    = 0x7
 	RTAX_DST                    = 0
diff --git a/src/pkg/syscall/zsyscall_darwin_386.go b/src/pkg/syscall/zsyscall_darwin_386.go
index 2f5b2703b7..13a8ed0f67 100644
--- a/src/pkg/syscall/zsyscall_darwin_386.go
+++ b/src/pkg/syscall/zsyscall_darwin_386.go
@@ -219,6 +219,14 @@ func munmap(addr uintptr, length uintptr) (errno int) {
 
 // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
 
+func ptrace(request int, pid int, addr uintptr, data uintptr) (errno int) {
+	_, _, e1 := Syscall6(SYS_PTRACE, uintptr(request), uintptr(pid), uintptr(addr), uintptr(data), 0, 0)
+	errno = int(e1)
+	return
+}
+
+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
+
 func kill(pid int, signum int, posix int) (errno int) {
 	_, _, e1 := Syscall(SYS_KILL, uintptr(pid), uintptr(signum), uintptr(posix))
 	errno = int(e1)
diff --git a/src/pkg/syscall/zsyscall_darwin_amd64.go b/src/pkg/syscall/zsyscall_darwin_amd64.go
index 995c710b46..c671d7150e 100644
--- a/src/pkg/syscall/zsyscall_darwin_amd64.go
+++ b/src/pkg/syscall/zsyscall_darwin_amd64.go
@@ -219,6 +219,14 @@ func munmap(addr uintptr, length uintptr) (errno int) {
 
 // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
 
+func ptrace(request int, pid int, addr uintptr, data uintptr) (errno int) {
+	_, _, e1 := Syscall6(SYS_PTRACE, uintptr(request), uintptr(pid), uintptr(addr), uintptr(data), 0, 0)
+	errno = int(e1)
+	return
+}
+
+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
+
 func kill(pid int, signum int, posix int) (errno int) {
 	_, _, e1 := Syscall(SYS_KILL, uintptr(pid), uintptr(signum), uintptr(posix))
 	errno = int(e1)
diff --git a/src/pkg/syscall/zsysnum_darwin_386.go b/src/pkg/syscall/zsysnum_darwin_386.go
index 8d5c93478b..50aec39f1e 100644
--- a/src/pkg/syscall/zsysnum_darwin_386.go
+++ b/src/pkg/syscall/zsysnum_darwin_386.go
@@ -1,485 +1,355 @@
-// mksysnum_darwin.sh /home/rsc/pub/xnu-1228/bsd/kern/syscalls.master
+// mksysnum_darwin.pl /usr/include/sys/syscall.h
 // MACHINE GENERATED BY THE ABOVE COMMAND; DO NOT EDIT
 
 package syscall
 
 const (
-	// SYS_NOSYS = 0;  // { int nosys(void); }   { indirect syscall }
-	SYS_EXIT  = 1 // { void exit(int rval); }
-	SYS_FORK  = 2 // { int fork(void); }
-	SYS_READ  = 3 // { user_ssize_t read(int fd, user_addr_t cbuf, user_size_t nbyte); }
-	SYS_WRITE = 4 // { user_ssize_t write(int fd, user_addr_t cbuf, user_size_t nbyte); }
-	SYS_OPEN  = 5 // { int open(user_addr_t path, int flags, int mode); }
-	SYS_CLOSE = 6 // { int close(int fd); }
-	SYS_WAIT4 = 7 // { int wait4(int pid, user_addr_t status, int options, user_addr_t rusage); }
-	// SYS_NOSYS = 8;  // { int nosys(void); }   { old creat }
-	SYS_LINK   = 9  // { int link(user_addr_t path, user_addr_t link); }
-	SYS_UNLINK = 10 // { int unlink(user_addr_t path); }
-	// SYS_NOSYS = 11;  // { int nosys(void); }   { old execv }
-	SYS_CHDIR      = 12 // { int chdir(user_addr_t path); }
-	SYS_FCHDIR     = 13 // { int fchdir(int fd); }
-	SYS_MKNOD      = 14 // { int mknod(user_addr_t path, int mode, int dev); }
-	SYS_CHMOD      = 15 // { int chmod(user_addr_t path, int mode); }
-	SYS_CHOWN      = 16 // { int chown(user_addr_t path, int uid, int gid); }
-	SYS_OGETFSSTAT = 18 // { int ogetfsstat(user_addr_t buf, int bufsize, int flags); }
-	SYS_GETFSSTAT  = 18 // { int getfsstat(user_addr_t buf, int bufsize, int flags); }
-	// SYS_NOSYS = 19;  // { int nosys(void); }   { old lseek }
-	SYS_GETPID = 20 // { int getpid(void); }
-	// SYS_NOSYS = 21;  // { int nosys(void); }   { old mount }
-	// SYS_NOSYS = 22;  // { int nosys(void); }   { old umount }
-	SYS_SETUID      = 23 // { int setuid(uid_t uid); }
-	SYS_GETUID      = 24 // { int getuid(void); }
-	SYS_GETEUID     = 25 // { int geteuid(void); }
-	SYS_PTRACE      = 26 // { int ptrace(int req, pid_t pid, caddr_t addr, int data); }
-	SYS_RECVMSG     = 27 // { int recvmsg(int s, struct msghdr *msg, int flags); }
-	SYS_SENDMSG     = 28 // { int sendmsg(int s, caddr_t msg, int flags); }
-	SYS_RECVFROM    = 29 // { int recvfrom(int s, void *buf, size_t len, int flags, struct sockaddr *from, int *fromlenaddr); }
-	SYS_ACCEPT      = 30 // { int accept(int s, caddr_t name, socklen_t	*anamelen); }
-	SYS_GETPEERNAME = 31 // { int getpeername(int fdes, caddr_t asa, socklen_t *alen); }
-	SYS_GETSOCKNAME = 32 // { int getsockname(int fdes, caddr_t asa, socklen_t *alen); }
-	// SYS_NOSYS = 27;  // { int nosys(void); }
-	// SYS_NOSYS = 28;  // { int nosys(void); }
-	// SYS_NOSYS = 29;  // { int nosys(void); }
-	// SYS_NOSYS = 30;  // { int nosys(void); }
-	// SYS_NOSYS = 31;  // { int nosys(void); }
-	// SYS_NOSYS = 32;  // { int nosys(void); }
-	SYS_ACCESS   = 33 // { int access(user_addr_t path, int flags); }
-	SYS_CHFLAGS  = 34 // { int chflags(char *path, int flags); }
-	SYS_FCHFLAGS = 35 // { int fchflags(int fd, int flags); }
-	SYS_SYNC     = 36 // { int sync(void); }
-	SYS_KILL     = 37 // { int kill(int pid, int signum, int posix); }
-	// SYS_NOSYS = 38;  // { int nosys(void); }   { old stat  }
-	SYS_GETPPID = 39 // { int getppid(void); }
-	// SYS_NOSYS = 40;  // { int nosys(void); }   { old lstat }
-	SYS_DUP     = 41 // { int dup(u_int fd); }
-	SYS_PIPE    = 42 // { int pipe(void); }
-	SYS_GETEGID = 43 // { int getegid(void); }
-	SYS_PROFIL  = 44 // { int profil(short *bufbase, size_t bufsize, u_long pcoffset, u_int pcscale); }
-	// SYS_NOSYS = 45;  // { int nosys(void); } { old ktrace }
-	SYS_SIGACTION   = 46 // { int sigaction(int signum, struct __sigaction *nsa, struct sigaction *osa); }
-	SYS_GETGID      = 47 // { int getgid(void); }
-	SYS_SIGPROCMASK = 48 // { int sigprocmask(int how, user_addr_t mask, user_addr_t omask); }
-	SYS_GETLOGIN    = 49 // { int getlogin(char *namebuf, u_int namelen); }
-	SYS_SETLOGIN    = 50 // { int setlogin(char *namebuf); }
-	SYS_ACCT        = 51 // { int acct(char *path); }
-	SYS_SIGPENDING  = 52 // { int sigpending(struct sigvec *osv); }
-	SYS_SIGALTSTACK = 53 // { int sigaltstack(struct sigaltstack *nss, struct sigaltstack *oss); }
-	SYS_IOCTL       = 54 // { int ioctl(int fd, u_long com, caddr_t data); }
-	SYS_REBOOT      = 55 // { int reboot(int opt, char *command); }
-	SYS_REVOKE      = 56 // { int revoke(char *path); }
-	SYS_SYMLINK     = 57 // { int symlink(char *path, char *link); }
-	SYS_READLINK    = 58 // { int readlink(char *path, char *buf, int count); }
-	SYS_EXECVE      = 59 // { int execve(char *fname, char **argp, char **envp); }
-	SYS_UMASK       = 60 // { int umask(int newmask); }
-	SYS_CHROOT      = 61 // { int chroot(user_addr_t path); }
-	// SYS_NOSYS = 62;  // { int nosys(void); }   { old fstat }
-	// SYS_NOSYS = 63;  // { int nosys(void); }   { used internally, reserved }
-	// SYS_NOSYS = 64;  // { int nosys(void); }   { old getpagesize }
-	SYS_MSYNC = 65 // { int msync(caddr_t addr, size_t len, int flags); }
-	SYS_VFORK = 66 // { int vfork(void); }
-	// SYS_NOSYS = 67;  // { int nosys(void); }   { old vread }
-	// SYS_NOSYS = 68;  // { int nosys(void); }   { old vwrite }
-	SYS_SBRK = 69 // { int sbrk(int incr) NO_SYSCALL_STUB; }
-	SYS_SSTK = 70 // { int sstk(int incr) NO_SYSCALL_STUB; }
-	// SYS_NOSYS = 71;  // { int nosys(void); }   { old mmap }
-	SYS_OVADVISE = 72 // { int ovadvise(void) NO_SYSCALL_STUB; }   { old vadvise }
-	SYS_MUNMAP   = 73 // { int munmap(caddr_t addr, size_t len); }
-	SYS_MPROTECT = 74 // { int mprotect(caddr_t addr, size_t len, int prot); }
-	SYS_MADVISE  = 75 // { int madvise(caddr_t addr, size_t len, int behav); }
-	// SYS_NOSYS = 76;  // { int nosys(void); }   { old vhangup }
-	// SYS_NOSYS = 77;  // { int nosys(void); }   { old vlimit }
-	SYS_MINCORE   = 78 // { int mincore(user_addr_t addr, user_size_t len, user_addr_t vec); }
-	SYS_GETGROUPS = 79 // { int getgroups(u_int gidsetsize, gid_t *gidset); }
-	SYS_SETGROUPS = 80 // { int setgroups(u_int gidsetsize, gid_t *gidset); }
-	SYS_GETPGRP   = 81 // { int getpgrp(void); }
-	SYS_SETPGID   = 82 // { int setpgid(int pid, int pgid); }
-	SYS_SETITIMER = 83 // { int setitimer(u_int which, struct itimerval *itv, struct itimerval *oitv); }
-	// SYS_NOSYS = 84;  // { int nosys(void); }   { old wait }
-	SYS_SWAPON    = 85 // { int swapon(void); }
-	SYS_GETITIMER = 86 // { int getitimer(u_int which, struct itimerval *itv); }
-	// SYS_NOSYS = 87;  // { int nosys(void); }   { old gethostname }
-	// SYS_NOSYS = 88;  // { int nosys(void); }   { old sethostname }
-	SYS_GETDTABLESIZE = 89 // { int getdtablesize(void); }
-	SYS_DUP2          = 90 // { int dup2(u_int from, u_int to); }
-	// SYS_NOSYS = 91;  // { int nosys(void); }   { old getdopt }
-	SYS_FCNTL  = 92 // { int fcntl(int fd, int cmd, long arg); }
-	SYS_SELECT = 93 // { int select(int nd, u_int32_t *in, u_int32_t *ou, u_int32_t *ex, struct timeval *tv); }
-	// SYS_NOSYS = 94;  // { int nosys(void); }   { old setdopt }
-	SYS_FSYNC       = 95 // { int fsync(int fd); }
-	SYS_SETPRIORITY = 96 // { int setpriority(int which, id_t who, int prio); }
-	SYS_SOCKET      = 97 // { int socket(int domain, int type, int protocol); }
-	SYS_CONNECT     = 98 // { int connect(int s, caddr_t name, socklen_t namelen); }
-	// SYS_NOSYS = 97;  // { int nosys(void); }
-	// SYS_NOSYS = 98;  // { int nosys(void); }
-	// SYS_NOSYS = 99;  // { int nosys(void); }   { old accept }
-	SYS_GETPRIORITY = 100 // { int getpriority(int which, id_t who); }
-	// SYS_NOSYS = 101;  // { int nosys(void); }   { old send }
-	// SYS_NOSYS = 102;  // { int nosys(void); }   { old recv }
-	// SYS_NOSYS = 103;  // { int nosys(void); }   { old sigreturn }
-	SYS_BIND       = 104 // { int bind(int s, caddr_t name, socklen_t namelen); }
-	SYS_SETSOCKOPT = 105 // { int setsockopt(int s, int level, int name, caddr_t val, socklen_t valsize); }
-	SYS_LISTEN     = 106 // { int listen(int s, int backlog); }
-	// SYS_NOSYS = 104;  // { int nosys(void); }
-	// SYS_NOSYS = 105;  // { int nosys(void); }
-	// SYS_NOSYS = 106;  // { int nosys(void); }
-	// SYS_NOSYS = 107;  // { int nosys(void); }   { old vtimes }
-	// SYS_NOSYS = 108;  // { int nosys(void); }   { old sigvec }
-	// SYS_NOSYS = 109;  // { int nosys(void); }   { old sigblock }
-	// SYS_NOSYS = 110;  // { int nosys(void); }   { old sigsetmask }
-	SYS_SIGSUSPEND = 111 // { int sigsuspend(sigset_t mask); }
-	// SYS_NOSYS = 112;  // { int nosys(void); }   { old sigstack }
-	// SYS_NOSYS = 113;  // { int nosys(void); }   { old recvmsg }
-	// SYS_NOSYS = 114;  // { int nosys(void); }   { old sendmsg }
-	// SYS_NOSYS = 113;  // { int nosys(void); }
-	// SYS_NOSYS = 114;  // { int nosys(void); }
-	// SYS_NOSYS = 115;  // { int nosys(void); }   { old vtrace }
-	SYS_GETTIMEOFDAY = 116 // { int gettimeofday(struct timeval *tp, struct timezone *tzp); }
-	SYS_GETRUSAGE    = 117 // { int getrusage(int who, struct rusage *rusage); }
-	SYS_GETSOCKOPT   = 118 // { int getsockopt(int s, int level, int name, caddr_t val, socklen_t *avalsize); }
-	// SYS_NOSYS = 118;  // { int nosys(void); }
-	// SYS_NOSYS = 119;  // { int nosys(void); }   { old resuba }
-	SYS_READV        = 120 // { user_ssize_t readv(int fd, struct iovec *iovp, u_int iovcnt); }
-	SYS_WRITEV       = 121 // { user_ssize_t writev(int fd, struct iovec *iovp, u_int iovcnt); }
-	SYS_SETTIMEOFDAY = 122 // { int settimeofday(struct timeval *tv, struct timezone *tzp); }
-	SYS_FCHOWN       = 123 // { int fchown(int fd, int uid, int gid); }
-	SYS_FCHMOD       = 124 // { int fchmod(int fd, int mode); }
-	// SYS_NOSYS = 125;  // { int nosys(void); }   { old recvfrom }
-	SYS_SETREUID = 126 // { int setreuid(uid_t ruid, uid_t euid); }
-	SYS_SETREGID = 127 // { int setregid(gid_t rgid, gid_t egid); }
-	SYS_RENAME   = 128 // { int rename(char *from, char *to); }
-	// SYS_NOSYS = 129;  // { int nosys(void); }   { old truncate }
-	// SYS_NOSYS = 130;  // { int nosys(void); }   { old ftruncate }
-	SYS_FLOCK      = 131 // { int flock(int fd, int how); }
-	SYS_MKFIFO     = 132 // { int mkfifo(user_addr_t path, int mode); }
-	SYS_SENDTO     = 133 // { int sendto(int s, caddr_t buf, size_t len, int flags, caddr_t to, socklen_t tolen); }
-	SYS_SHUTDOWN   = 134 // { int shutdown(int s, int how); }
-	SYS_SOCKETPAIR = 135 // { int socketpair(int domain, int type, int protocol, int *rsv); }
-	// SYS_NOSYS = 133;  // { int nosys(void); }
-	// SYS_NOSYS = 134;  // { int nosys(void); }
-	// SYS_NOSYS = 135;  // { int nosys(void); }
-	SYS_MKDIR   = 136 // { int mkdir(user_addr_t path, int mode); }
-	SYS_RMDIR   = 137 // { int rmdir(char *path); }
-	SYS_UTIMES  = 138 // { int utimes(char *path, struct timeval *tptr); }
-	SYS_FUTIMES = 139 // { int futimes(int fd, struct timeval *tptr); }
-	SYS_ADJTIME = 140 // { int adjtime(struct timeval *delta, struct timeval *olddelta); }
-	// SYS_NOSYS = 141;  // { int nosys(void); }   { old getpeername }
-	SYS_GETHOSTUUID = 142 // { int gethostuuid(unsigned char *uuid_buf, const struct timespec *timeoutp); }
-	// SYS_NOSYS = 143;  // { int nosys(void); }   { old sethostid 	}
-	// SYS_NOSYS = 144;  // { int nosys(void); }   { old getrlimit }
-	// SYS_NOSYS = 145;  // { int nosys(void); }   { old setrlimit }
-	// SYS_NOSYS = 146;  // { int nosys(void); }   { old killpg }
-	SYS_SETSID = 147 // { int setsid(void); }
-	// SYS_NOSYS = 148;  // { int nosys(void); }   { old setquota }
-	// SYS_NOSYS = 149;  // { int nosys(void); }   { old qquota }
-	// SYS_NOSYS = 150;  // { int nosys(void); }   { old getsockname }
-	SYS_GETPGID     = 151 // { int getpgid(pid_t pid); }
-	SYS_SETPRIVEXEC = 152 // { int setprivexec(int flag); }
-	SYS_PREAD       = 153 // { user_ssize_t pread(int fd, user_addr_t buf, user_size_t nbyte, off_t offset); }
-	SYS_PWRITE      = 154 // { user_ssize_t pwrite(int fd, user_addr_t buf, user_size_t nbyte, off_t offset); }
-	SYS_NFSSVC      = 155 // { int nfssvc(int flag, caddr_t argp); }
-	// SYS_NOSYS = 155;  // { int nosys(void); }
-	// SYS_NOSYS = 156;  // { int nosys(void); }   { old getdirentries }
-	SYS_STATFS  = 157 // { int statfs(char *path, struct statfs *buf); }
-	SYS_FSTATFS = 158 // { int fstatfs(int fd, struct statfs *buf); }
-	SYS_UNMOUNT = 159 // { int unmount(user_addr_t path, int flags); }
-	// SYS_NOSYS = 160;  // { int nosys(void); }   { old async_daemon }
-	SYS_GETFH = 161 // { int getfh(char *fname, fhandle_t *fhp); }
-	// SYS_NOSYS = 161;  // { int nosys(void); }
-	// SYS_NOSYS = 162;  // { int nosys(void); }   { old getdomainname }
-	// SYS_NOSYS = 163;  // { int nosys(void); }   { old setdomainname }
-	// SYS_NOSYS = 164;  // { int nosys(void); }
-	SYS_QUOTACTL = 165 // { int quotactl(const char *path, int cmd, int uid, caddr_t arg); }
-	// SYS_NOSYS = 166;  // { int nosys(void); }   { old exportfs }
-	SYS_MOUNT = 167 // { int mount(char *type, char *path, int flags, caddr_t data); }
-	// SYS_NOSYS = 168;  // { int nosys(void); }   { old ustat }
-	SYS_CSOPS = 169 // { int csops(pid_t pid, uint32_t ops, user_addr_t useraddr, user_size_t usersize); }
-	// SYS_NOSYS = 171;  // { int nosys(void); }   { old wait3 }
-	// SYS_NOSYS = 172;  // { int nosys(void); }   { old rpause	}
-	SYS_WAITID = 173 // { int waitid(idtype_t idtype, id_t id, siginfo_t *infop, int options); }
-	// SYS_NOSYS = 174;  // { int nosys(void); }   { old getdents }
-	// SYS_NOSYS = 175;  // { int nosys(void); }   { old gc_control }
-	SYS_ADD_PROFIL = 176 // { int add_profil(short *bufbase, size_t bufsize, u_long pcoffset, u_int pcscale); }
-	// SYS_NOSYS = 177;  // { int nosys(void); }
-	// SYS_NOSYS = 178;  // { int nosys(void); }
-	// SYS_NOSYS = 179;  // { int nosys(void); }
-	SYS_KDEBUG_TRACE = 180 // { int kdebug_trace(int code, int arg1, int arg2, int arg3, int arg4, int arg5) NO_SYSCALL_STUB; }
-	SYS_SETGID       = 181 // { int setgid(gid_t gid); }
-	SYS_SETEGID      = 182 // { int setegid(gid_t egid); }
-	SYS_SETEUID      = 183 // { int seteuid(uid_t euid); }
-	SYS_SIGRETURN    = 184 // { int sigreturn(struct ucontext *uctx, int infostyle); }
-	// SYS_NOSYS = 186;  // { int nosys(void); }
-	// SYS_NOSYS = 187;  // { int nosys(void); }
-	SYS_STAT      = 188 // { int stat(user_addr_t path, user_addr_t ub); }
-	SYS_FSTAT     = 189 // { int fstat(int fd, user_addr_t ub); }
-	SYS_LSTAT     = 190 // { int lstat(user_addr_t path, user_addr_t ub); }
-	SYS_PATHCONF  = 191 // { int pathconf(char *path, int name); }
-	SYS_FPATHCONF = 192 // { int fpathconf(int fd, int name); }
-	// SYS_NOSYS = 193;  // { int nosys(void); }
-	SYS_GETRLIMIT     = 194 // { int getrlimit(u_int which, struct rlimit *rlp); }
-	SYS_SETRLIMIT     = 195 // { int setrlimit(u_int which, struct rlimit *rlp); }
-	SYS_GETDIRENTRIES = 196 // { int getdirentries(int fd, char *buf, u_int count, long *basep); }
-	SYS_MMAP          = 197 // { user_addr_t mmap(caddr_t addr, size_t len, int prot, int flags, int fd, off_t pos); }
-	// SYS_NOSYS = 198;  // { int nosys(void); } 	{ __syscall }
-	SYS_LSEEK     = 199 // { off_t lseek(int fd, off_t offset, int whence); }
-	SYS_TRUNCATE  = 200 // { int truncate(char *path, off_t length); }
-	SYS_FTRUNCATE = 201 // { int ftruncate(int fd, off_t length); }
-	SYS___SYSCTL  = 202 // { int __sysctl(int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen); }
-	SYS_MLOCK     = 203 // { int mlock(caddr_t addr, size_t len); }
-	SYS_MUNLOCK   = 204 // { int munlock(caddr_t addr, size_t len); }
-	SYS_UNDELETE  = 205 // { int undelete(user_addr_t path); }
-	SYS_ATSOCKET  = 206 // { int ATsocket(int proto); }
-	// SYS_NOSYS = 213;  // { int nosys(void); } 	{ Reserved for AppleTalk }
-	// SYS_NOSYS = 206;  // { int nosys(void); }
-	// SYS_NOSYS = 207;  // { int nosys(void); }
-	// SYS_NOSYS = 208;  // { int nosys(void); }
-	// SYS_NOSYS = 209;  // { int nosys(void); }
-	// SYS_NOSYS = 210;  // { int nosys(void); }
-	// SYS_NOSYS = 211;  // { int nosys(void); }
-	// SYS_NOSYS = 212;  // { int nosys(void); }
-	// SYS_NOSYS = 213;  // { int nosys(void); } 	{ Reserved for AppleTalk }
-	SYS_KQUEUE_FROM_PORTSET_NP = 214 // { int kqueue_from_portset_np(int portset); }
-	SYS_KQUEUE_PORTSET_NP      = 215 // { int kqueue_portset_np(int fd); }
-	SYS_GETATTRLIST            = 220 // { int getattrlist(const char *path, struct attrlist *alist, void *attributeBuffer, size_t bufferSize, u_long options); }
-	SYS_SETATTRLIST            = 221 // { int setattrlist(const char *path, struct attrlist *alist, void *attributeBuffer, size_t bufferSize, u_long options); }
-	SYS_GETDIRENTRIESATTR      = 222 // { int getdirentriesattr(int fd, struct attrlist *alist, void *buffer, size_t buffersize, u_long *count, u_long *basep, u_long *newstate, u_long options); }
-	SYS_EXCHANGEDATA           = 223 // { int exchangedata(const char *path1, const char *path2, u_long options); }
-	// SYS_NOSYS = 224;  // { int nosys(void); } { was checkuseraccess }
-	SYS_SEARCHFS = 225 // { int searchfs(const char *path, struct fssearchblock *searchblock, u_long *nummatches, u_long scriptcode, u_long options, struct searchstate *state); }
-	SYS_DELETE   = 226 // { int delete(user_addr_t path) NO_SYSCALL_STUB; }       { private delete (Carbon semantics) }
-	SYS_COPYFILE = 227 // { int copyfile(char *from, char *to, int mode, int flags) NO_SYSCALL_STUB; }
-	// SYS_NOSYS = 228;  // { int nosys(void); }
-	// SYS_NOSYS = 229;  // { int nosys(void); }
-	SYS_POLL         = 230 // { int poll(struct pollfd *fds, u_int nfds, int timeout); }
-	SYS_WATCHEVENT   = 231 // { int watchevent(struct eventreq *u_req, int u_eventmask); }
-	SYS_WAITEVENT    = 232 // { int waitevent(struct eventreq *u_req, struct timeval *tv); }
-	SYS_MODWATCH     = 233 // { int modwatch(struct eventreq *u_req, int u_eventmask); }
-	SYS_GETXATTR     = 234 // { user_ssize_t getxattr(user_addr_t path, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }
-	SYS_FGETXATTR    = 235 // { user_ssize_t fgetxattr(int fd, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }
-	SYS_SETXATTR     = 236 // { int setxattr(user_addr_t path, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }
-	SYS_FSETXATTR    = 237 // { int fsetxattr(int fd, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }
-	SYS_REMOVEXATTR  = 238 // { int removexattr(user_addr_t path, user_addr_t attrname, int options); }
-	SYS_FREMOVEXATTR = 239 // { int fremovexattr(int fd, user_addr_t attrname, int options); }
-	SYS_LISTXATTR    = 240 // { user_ssize_t listxattr(user_addr_t path, user_addr_t namebuf, size_t bufsize, int options); }
-	SYS_FLISTXATTR   = 241 // { user_ssize_t flistxattr(int fd, user_addr_t namebuf, size_t bufsize, int options); }
-	SYS_FSCTL        = 242 // { int fsctl(const char *path, u_long cmd, caddr_t data, u_long options); }
-	SYS_INITGROUPS   = 243 // { int initgroups(u_int gidsetsize, gid_t *gidset, int gmuid); }
-	SYS_POSIX_SPAWN  = 244 // { int posix_spawn(pid_t *pid, const char *path, const struct _posix_spawn_args_desc *adesc, char **argv, char **envp); }
-	// SYS_NOSYS = 245;  // { int nosys(void); }
-	// SYS_NOSYS = 246;  // { int nosys(void); }
-	SYS_NFSCLNT = 247 // { int nfsclnt(int flag, caddr_t argp); }
-	// SYS_NOSYS = 247;  // { int nosys(void); }
-	SYS_FHOPEN = 248 // { int fhopen(const struct fhandle *u_fhp, int flags); }
-	// SYS_NOSYS = 248;  // { int nosys(void); }
-	// SYS_NOSYS = 249;  // { int nosys(void); }
-	SYS_MINHERIT = 250 // { int minherit(void *addr, size_t len, int inherit); }
-	SYS_SEMSYS   = 251 // { int semsys(u_int which, int a2, int a3, int a4, int a5); }
-	// SYS_NOSYS = 251;  // { int nosys(void); }
-	SYS_MSGSYS = 252 // { int msgsys(u_int which, int a2, int a3, int a4, int a5); }
-	// SYS_NOSYS = 252;  // { int nosys(void); }
-	SYS_SHMSYS = 253 // { int shmsys(u_int which, int a2, int a3, int a4); }
-	// SYS_NOSYS = 253;  // { int nosys(void); }
-	SYS_SEMCTL = 254 // { int semctl(int semid, int semnum, int cmd, semun_t arg); }
-	SYS_SEMGET = 255 // { int semget(key_t key, int	nsems, int semflg); }
-	SYS_SEMOP  = 256 // { int semop(int semid, struct sembuf *sops, int nsops); }
-	// SYS_NOSYS = 257;  // { int nosys(void); }
-	// SYS_NOSYS = 254;  // { int nosys(void); }
-	// SYS_NOSYS = 255;  // { int nosys(void); }
-	// SYS_NOSYS = 256;  // { int nosys(void); }
-	// SYS_NOSYS = 257;  // { int nosys(void); }
-	SYS_MSGCTL = 258 // { int msgctl(int msqid, int cmd, struct	msqid_ds *buf); }
-	SYS_MSGGET = 259 // { int msgget(key_t key, int msgflg); }
-	SYS_MSGSND = 260 // { int msgsnd(int msqid, void *msgp, size_t msgsz, int msgflg); }
-	SYS_MSGRCV = 261 // { user_ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg); }
-	// SYS_NOSYS = 258;  // { int nosys(void); }
-	// SYS_NOSYS = 259;  // { int nosys(void); }
-	// SYS_NOSYS = 260;  // { int nosys(void); }
-	// SYS_NOSYS = 261;  // { int nosys(void); }
-	SYS_SHMAT  = 262 // { user_addr_t shmat(int shmid, void *shmaddr, int shmflg); }
-	SYS_SHMCTL = 263 // { int shmctl(int shmid, int cmd, struct shmid_ds *buf); }
-	SYS_SHMDT  = 264 // { int shmdt(void *shmaddr); }
-	SYS_SHMGET = 265 // { int shmget(key_t key, size_t size, int shmflg); }
-	// SYS_NOSYS = 262;  // { int nosys(void); }
-	// SYS_NOSYS = 263;  // { int nosys(void); }
-	// SYS_NOSYS = 264;  // { int nosys(void); }
-	// SYS_NOSYS = 265;  // { int nosys(void); }
-	SYS_SHM_OPEN               = 266 // { int shm_open(const char *name, int oflag, int mode); }
-	SYS_SHM_UNLINK             = 267 // { int shm_unlink(const char *name); }
-	SYS_SEM_OPEN               = 268 // { user_addr_t sem_open(const char *name, int oflag, int mode, int value); }
-	SYS_SEM_CLOSE              = 269 // { int sem_close(sem_t *sem); }
-	SYS_SEM_UNLINK             = 270 // { int sem_unlink(const char *name); }
-	SYS_SEM_WAIT               = 271 // { int sem_wait(sem_t *sem); }
-	SYS_SEM_TRYWAIT            = 272 // { int sem_trywait(sem_t *sem); }
-	SYS_SEM_POST               = 273 // { int sem_post(sem_t *sem); }
-	SYS_SEM_GETVALUE           = 274 // { int sem_getvalue(sem_t *sem, int *sval); }
-	SYS_SEM_INIT               = 275 // { int sem_init(sem_t *sem, int phsared, u_int value); }
-	SYS_SEM_DESTROY            = 276 // { int sem_destroy(sem_t *sem); }
-	SYS_OPEN_EXTENDED          = 277 // { int open_extended(user_addr_t path, int flags, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
-	SYS_UMASK_EXTENDED         = 278 // { int umask_extended(int newmask, user_addr_t xsecurity) NO_SYSCALL_STUB; }
-	SYS_STAT_EXTENDED          = 279 // { int stat_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
-	SYS_LSTAT_EXTENDED         = 280 // { int lstat_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
-	SYS_FSTAT_EXTENDED         = 281 // { int fstat_extended(int fd, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
-	SYS_CHMOD_EXTENDED         = 282 // { int chmod_extended(user_addr_t path, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
-	SYS_FCHMOD_EXTENDED        = 283 // { int fchmod_extended(int fd, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
-	SYS_ACCESS_EXTENDED        = 284 // { int access_extended(user_addr_t entries, size_t size, user_addr_t results, uid_t uid) NO_SYSCALL_STUB; }
-	SYS_SETTID                 = 285 // { int settid(uid_t uid, gid_t gid) NO_SYSCALL_STUB; }
-	SYS_GETTID                 = 286 // { int gettid(uid_t *uidp, gid_t *gidp) NO_SYSCALL_STUB; }
-	SYS_SETSGROUPS             = 287 // { int setsgroups(int setlen, user_addr_t guidset) NO_SYSCALL_STUB; }
-	SYS_GETSGROUPS             = 288 // { int getsgroups(user_addr_t setlen, user_addr_t guidset) NO_SYSCALL_STUB; }
-	SYS_SETWGROUPS             = 289 // { int setwgroups(int setlen, user_addr_t guidset) NO_SYSCALL_STUB; }
-	SYS_GETWGROUPS             = 290 // { int getwgroups(user_addr_t setlen, user_addr_t guidset) NO_SYSCALL_STUB; }
-	SYS_MKFIFO_EXTENDED        = 291 // { int mkfifo_extended(user_addr_t path, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
-	SYS_MKDIR_EXTENDED         = 292 // { int mkdir_extended(user_addr_t path, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
-	SYS_IDENTITYSVC            = 293 // { int identitysvc(int opcode, user_addr_t message) NO_SYSCALL_STUB; }
-	SYS_SHARED_REGION_CHECK_NP = 294 // { int shared_region_check_np(uint64_t *start_address) NO_SYSCALL_STUB; }
-	SYS_SHARED_REGION_MAP_NP   = 295 // { int shared_region_map_np(int fd, uint32_t count, const struct shared_file_mapping_np *mappings) NO_SYSCALL_STUB; }
-	// SYS_NOSYS = 296;  // { int nosys(void); } { old load_shared_file }
-	// SYS_NOSYS = 297;  // { int nosys(void); } { old reset_shared_file }
-	// SYS_NOSYS = 298;  // { int nosys(void); } { old new_system_shared_regions }
-	// SYS_ENOSYS = 299;  // { int enosys(void); } { old shared_region_map_file_np }
-	// SYS_ENOSYS = 300;  // { int enosys(void); } { old shared_region_make_private_np }
-	SYS___PTHREAD_MUTEX_DESTROY  = 301 // { int __pthread_mutex_destroy(int mutexid); }
-	SYS___PTHREAD_MUTEX_INIT     = 302 // { int __pthread_mutex_init(user_addr_t  mutex, user_addr_t attr); }
-	SYS___PTHREAD_MUTEX_LOCK     = 303 // { int __pthread_mutex_lock(int mutexid); }
-	SYS___PTHREAD_MUTEX_TRYLOCK  = 304 // { int __pthread_mutex_trylock(int mutexid); }
-	SYS___PTHREAD_MUTEX_UNLOCK   = 305 // { int __pthread_mutex_unlock(int mutexid); }
-	SYS___PTHREAD_COND_INIT      = 306 // { int __pthread_cond_init(user_addr_t cond, user_addr_t attr); }
-	SYS___PTHREAD_COND_DESTROY   = 307 // { int __pthread_cond_destroy(int condid); }
-	SYS___PTHREAD_COND_BROADCAST = 308 // { int __pthread_cond_broadcast(int condid); }
-	SYS___PTHREAD_COND_SIGNAL    = 309 // { int __pthread_cond_signal(int condid); }
-	SYS_GETSID                   = 310 // { int getsid(pid_t pid); }
-	SYS_SETTID_WITH_PID          = 311 // { int settid_with_pid(pid_t pid, int assume) NO_SYSCALL_STUB; }
-	SYS___PTHREAD_COND_TIMEDWAIT = 312 // { int __pthread_cond_timedwait(int condid, int mutexid, user_addr_t abstime); }
-	SYS_AIO_FSYNC                = 313 // { int aio_fsync(int op, user_addr_t aiocbp); }
-	SYS_AIO_RETURN               = 314 // { user_ssize_t aio_return(user_addr_t aiocbp); }
-	SYS_AIO_SUSPEND              = 315 // { int aio_suspend(user_addr_t aiocblist, int nent, user_addr_t timeoutp); }
-	SYS_AIO_CANCEL               = 316 // { int aio_cancel(int fd, user_addr_t aiocbp); }
-	SYS_AIO_ERROR                = 317 // { int aio_error(user_addr_t aiocbp); }
-	SYS_AIO_READ                 = 318 // { int aio_read(user_addr_t aiocbp); }
-	SYS_AIO_WRITE                = 319 // { int aio_write(user_addr_t aiocbp); }
-	SYS_LIO_LISTIO               = 320 // { int lio_listio(int mode, user_addr_t aiocblist, int nent, user_addr_t sigp); }
-	SYS___PTHREAD_COND_WAIT      = 321 // { int __pthread_cond_wait(int condid, int mutexid); }
-	SYS_IOPOLICYSYS              = 322 // { int iopolicysys(int cmd, void *arg) NO_SYSCALL_STUB; }
-	// SYS_NOSYS = 323;  // { int nosys(void); }
-	SYS_MLOCKALL   = 324 // { int mlockall(int how); }
-	SYS_MUNLOCKALL = 325 // { int munlockall(int how); }
-	// SYS_NOSYS = 326;  // { int nosys(void); }
-	SYS_ISSETUGID              = 327 // { int issetugid(void); }
-	SYS___PTHREAD_KILL         = 328 // { int __pthread_kill(int thread_port, int sig); }
-	SYS___PTHREAD_SIGMASK      = 329 // { int __pthread_sigmask(int how, user_addr_t set, user_addr_t oset); }
-	SYS___SIGWAIT              = 330 // { int __sigwait(user_addr_t set, user_addr_t sig); }
-	SYS___DISABLE_THREADSIGNAL = 331 // { int __disable_threadsignal(int value); }
-	SYS___PTHREAD_MARKCANCEL   = 332 // { int __pthread_markcancel(int thread_port); }
-	SYS___PTHREAD_CANCELED     = 333 // { int __pthread_canceled(int  action); }
-	SYS___SEMWAIT_SIGNAL       = 334 // { int __semwait_signal(int cond_sem, int mutex_sem, int timeout, int relative, time_t tv_sec, int32_t tv_nsec); }
-	// SYS_NOSYS = 335;  // { int nosys(void); }   { old utrace }
-	SYS_PROC_INFO = 336 // { int proc_info(int32_t callnum,int32_t pid,uint32_t flavor, uint64_t arg,user_addr_t buffer,int32_t buffersize) NO_SYSCALL_STUB; }
-	SYS_SENDFILE  = 337 // { int sendfile(int fd, int s, off_t offset, off_t *nbytes, struct sf_hdtr *hdtr, int flags); }
-	// SYS_NOSYS = 337;  // { int nosys(void); }
-	SYS_STAT64           = 338 // { int stat64(user_addr_t path, user_addr_t ub); }
-	SYS_FSTAT64          = 339 // { int fstat64(int fd, user_addr_t ub); }
-	SYS_LSTAT64          = 340 // { int lstat64(user_addr_t path, user_addr_t ub); }
-	SYS_STAT64_EXTENDED  = 341 // { int stat64_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
-	SYS_LSTAT64_EXTENDED = 342 // { int lstat64_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
-	SYS_FSTAT64_EXTENDED = 343 // { int fstat64_extended(int fd, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
-	SYS_GETDIRENTRIES64  = 344 // { user_ssize_t getdirentries64(int fd, void *buf, user_size_t bufsize, off_t *position) NO_SYSCALL_STUB; }
-	SYS_STATFS64         = 345 // { int statfs64(char *path, struct statfs64 *buf); }
-	SYS_FSTATFS64        = 346 // { int fstatfs64(int fd, struct statfs64 *buf); }
-	SYS_GETFSSTAT64      = 347 // { int getfsstat64(user_addr_t buf, int bufsize, int flags); }
-	SYS___PTHREAD_CHDIR  = 348 // { int __pthread_chdir(user_addr_t path); }
-	SYS___PTHREAD_FCHDIR = 349 // { int __pthread_fchdir(int fd); }
-	SYS_AUDIT            = 350 // { int audit(void *record, int length); }
-	SYS_AUDITON          = 351 // { int auditon(int cmd, void *data, int length); }
-	// SYS_NOSYS = 352;  // { int nosys(void); }
-	SYS_GETAUID       = 353 // { int getauid(au_id_t *auid); }
-	SYS_SETAUID       = 354 // { int setauid(au_id_t *auid); }
-	SYS_GETAUDIT      = 355 // { int getaudit(struct auditinfo *auditinfo); }
-	SYS_SETAUDIT      = 356 // { int setaudit(struct auditinfo *auditinfo); }
-	SYS_GETAUDIT_ADDR = 357 // { int getaudit_addr(struct auditinfo_addr *auditinfo_addr, int length); }
-	SYS_SETAUDIT_ADDR = 358 // { int setaudit_addr(struct auditinfo_addr *auditinfo_addr, int length); }
-	SYS_AUDITCTL      = 359 // { int auditctl(char *path); }
-	// SYS_NOSYS = 350;  // { int nosys(void); }
-	// SYS_NOSYS = 351;  // { int nosys(void); }
-	// SYS_NOSYS = 352;  // { int nosys(void); }
-	// SYS_NOSYS = 353;  // { int nosys(void); }
-	// SYS_NOSYS = 354;  // { int nosys(void); }
-	// SYS_NOSYS = 355;  // { int nosys(void); }
-	// SYS_NOSYS = 356;  // { int nosys(void); }
-	// SYS_NOSYS = 357;  // { int nosys(void); }
-	// SYS_NOSYS = 358;  // { int nosys(void); }
-	// SYS_NOSYS = 359;  // { int nosys(void); }
-	SYS_BSDTHREAD_CREATE    = 360 // { user_addr_t bsdthread_create(user_addr_t func, user_addr_t func_arg, user_addr_t stack, user_addr_t pthread, uint32_t flags) NO_SYSCALL_STUB; }
-	SYS_BSDTHREAD_TERMINATE = 361 // { int bsdthread_terminate(user_addr_t stackaddr, size_t freesize, uint32_t port, uint32_t sem) NO_SYSCALL_STUB; }
-	SYS_KQUEUE              = 362 // { int kqueue(void); }
-	SYS_KEVENT              = 363 // { int kevent(int fd, const struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout); }
-	SYS_LCHOWN              = 364 // { int lchown(user_addr_t path, uid_t owner, gid_t group); }
-	SYS_STACK_SNAPSHOT      = 365 // { int stack_snapshot(pid_t pid, user_addr_t tracebuf, uint32_t tracebuf_size, uint32_t options) NO_SYSCALL_STUB; }
-	SYS_BSDTHREAD_REGISTER  = 366 // { int bsdthread_register(user_addr_t threadstart, user_addr_t wqthread, int pthsize) NO_SYSCALL_STUB; }
-	SYS_WORKQ_OPEN          = 367 // { int workq_open(void) NO_SYSCALL_STUB; }
-	SYS_WORKQ_OPS           = 368 // { int workq_ops(int options, user_addr_t item, int prio) NO_SYSCALL_STUB; }
-	// SYS_NOSYS = 369;  // { int nosys(void); }
-	// SYS_NOSYS = 370;  // { int nosys(void); }
-	// SYS_NOSYS = 371;  // { int nosys(void); }
-	// SYS_NOSYS = 372;  // { int nosys(void); }
-	// SYS_NOSYS = 373;  // { int nosys(void); }
-	// SYS_NOSYS = 374;  // { int nosys(void); }
-	// SYS_NOSYS = 375;  // { int nosys(void); }
-	// SYS_NOSYS = 376;  // { int nosys(void); }
-	// SYS_NOSYS = 377;  // { int nosys(void); }
-	// SYS_NOSYS = 378;  // { int nosys(void); }
-	// SYS_NOSYS = 379;  // { int nosys(void); }
-	SYS___MAC_EXECVE      = 380 // { int __mac_execve(char *fname, char **argp, char **envp, struct mac *mac_p); }
-	SYS___MAC_SYSCALL     = 381 // { int __mac_syscall(char *policy, int call, user_addr_t arg); }
-	SYS___MAC_GET_FILE    = 382 // { int __mac_get_file(char *path_p, struct mac *mac_p); }
-	SYS___MAC_SET_FILE    = 383 // { int __mac_set_file(char *path_p, struct mac *mac_p); }
-	SYS___MAC_GET_LINK    = 384 // { int __mac_get_link(char *path_p, struct mac *mac_p); }
-	SYS___MAC_SET_LINK    = 385 // { int __mac_set_link(char *path_p, struct mac *mac_p); }
-	SYS___MAC_GET_PROC    = 386 // { int __mac_get_proc(struct mac *mac_p); }
-	SYS___MAC_SET_PROC    = 387 // { int __mac_set_proc(struct mac *mac_p); }
-	SYS___MAC_GET_FD      = 388 // { int __mac_get_fd(int fd, struct mac *mac_p); }
-	SYS___MAC_SET_FD      = 389 // { int __mac_set_fd(int fd, struct mac *mac_p); }
-	SYS___MAC_GET_PID     = 390 // { int __mac_get_pid(pid_t pid, struct mac *mac_p); }
-	SYS___MAC_GET_LCID    = 391 // { int __mac_get_lcid(pid_t lcid, struct mac *mac_p); }
-	SYS___MAC_GET_LCTX    = 392 // { int __mac_get_lctx(struct mac *mac_p); }
-	SYS___MAC_SET_LCTX    = 393 // { int __mac_set_lctx(struct mac *mac_p); }
-	SYS_SETLCID           = 394 // { int setlcid(pid_t pid, pid_t lcid) NO_SYSCALL_STUB; }
-	SYS_GETLCID           = 395 // { int getlcid(pid_t pid) NO_SYSCALL_STUB; }
-	SYS_READ_NOCANCEL     = 396 // { user_ssize_t read_nocancel(int fd, user_addr_t cbuf, user_size_t nbyte) NO_SYSCALL_STUB; }
-	SYS_WRITE_NOCANCEL    = 397 // { user_ssize_t write_nocancel(int fd, user_addr_t cbuf, user_size_t nbyte) NO_SYSCALL_STUB; }
-	SYS_OPEN_NOCANCEL     = 398 // { int open_nocancel(user_addr_t path, int flags, int mode) NO_SYSCALL_STUB; }
-	SYS_CLOSE_NOCANCEL    = 399 // { int close_nocancel(int fd) NO_SYSCALL_STUB; }
-	SYS_WAIT4_NOCANCEL    = 400 // { int wait4_nocancel(int pid, user_addr_t status, int options, user_addr_t rusage) NO_SYSCALL_STUB; }
-	SYS_RECVMSG_NOCANCEL  = 401 // { int recvmsg_nocancel(int s, struct msghdr *msg, int flags) NO_SYSCALL_STUB; }
-	SYS_SENDMSG_NOCANCEL  = 402 // { int sendmsg_nocancel(int s, caddr_t msg, int flags) NO_SYSCALL_STUB; }
-	SYS_RECVFROM_NOCANCEL = 403 // { int recvfrom_nocancel(int s, void *buf, size_t len, int flags, struct sockaddr *from, int *fromlenaddr) NO_SYSCALL_STUB; }
-	SYS_ACCEPT_NOCANCEL   = 404 // { int accept_nocancel(int s, caddr_t name, socklen_t	*anamelen) NO_SYSCALL_STUB; }
-	// SYS_NOSYS = 401;  // { int nosys(void); }
-	// SYS_NOSYS = 402;  // { int nosys(void); }
-	// SYS_NOSYS = 403;  // { int nosys(void); }
-	// SYS_NOSYS = 404;  // { int nosys(void); }
-	SYS_MSYNC_NOCANCEL   = 405 // { int msync_nocancel(caddr_t addr, size_t len, int flags) NO_SYSCALL_STUB; }
-	SYS_FCNTL_NOCANCEL   = 406 // { int fcntl_nocancel(int fd, int cmd, long arg) NO_SYSCALL_STUB; }
-	SYS_SELECT_NOCANCEL  = 407 // { int select_nocancel(int nd, u_int32_t *in, u_int32_t *ou, u_int32_t *ex, struct timeval *tv) NO_SYSCALL_STUB; }
-	SYS_FSYNC_NOCANCEL   = 408 // { int fsync_nocancel(int fd) NO_SYSCALL_STUB; }
-	SYS_CONNECT_NOCANCEL = 409 // { int connect_nocancel(int s, caddr_t name, socklen_t namelen) NO_SYSCALL_STUB; }
-	// SYS_NOSYS = 409;  // { int nosys(void); }
-	SYS_SIGSUSPEND_NOCANCEL = 410 // { int sigsuspend_nocancel(sigset_t mask) NO_SYSCALL_STUB; }
-	SYS_READV_NOCANCEL      = 411 // { user_ssize_t readv_nocancel(int fd, struct iovec *iovp, u_int iovcnt) NO_SYSCALL_STUB; }
-	SYS_WRITEV_NOCANCEL     = 412 // { user_ssize_t writev_nocancel(int fd, struct iovec *iovp, u_int iovcnt) NO_SYSCALL_STUB; }
-	SYS_SENDTO_NOCANCEL     = 413 // { int sendto_nocancel(int s, caddr_t buf, size_t len, int flags, caddr_t to, socklen_t tolen) NO_SYSCALL_STUB; }
-	// SYS_NOSYS = 413;  // { int nosys(void); }
-	SYS_PREAD_NOCANCEL  = 414 // { user_ssize_t pread_nocancel(int fd, user_addr_t buf, user_size_t nbyte, off_t offset) NO_SYSCALL_STUB; }
-	SYS_PWRITE_NOCANCEL = 415 // { user_ssize_t pwrite_nocancel(int fd, user_addr_t buf, user_size_t nbyte, off_t offset) NO_SYSCALL_STUB; }
-	SYS_WAITID_NOCANCEL = 416 // { int waitid_nocancel(idtype_t idtype, id_t id, siginfo_t *infop, int options) NO_SYSCALL_STUB; }
-	SYS_POLL_NOCANCEL   = 417 // { int poll_nocancel(struct pollfd *fds, u_int nfds, int timeout) NO_SYSCALL_STUB; }
-	SYS_MSGSND_NOCANCEL = 418 // { int msgsnd_nocancel(int msqid, void *msgp, size_t msgsz, int msgflg) NO_SYSCALL_STUB; }
-	SYS_MSGRCV_NOCANCEL = 419 // { user_ssize_t msgrcv_nocancel(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg) NO_SYSCALL_STUB; }
-	// SYS_NOSYS = 418;  // { int nosys(void); }
-	// SYS_NOSYS = 419;  // { int nosys(void); }
-	SYS_SEM_WAIT_NOCANCEL         = 420 // { int sem_wait_nocancel(sem_t *sem) NO_SYSCALL_STUB; }
-	SYS_AIO_SUSPEND_NOCANCEL      = 421 // { int aio_suspend_nocancel(user_addr_t aiocblist, int nent, user_addr_t timeoutp) NO_SYSCALL_STUB; }
-	SYS___SIGWAIT_NOCANCEL        = 422 // { int __sigwait_nocancel(user_addr_t set, user_addr_t sig) NO_SYSCALL_STUB; }
-	SYS___SEMWAIT_SIGNAL_NOCANCEL = 423 // { int __semwait_signal_nocancel(int cond_sem, int mutex_sem, int timeout, int relative, time_t tv_sec, int32_t tv_nsec) NO_SYSCALL_STUB; }
-	SYS___MAC_MOUNT               = 424 // { int __mac_mount(char *type, char *path, int flags, caddr_t data, struct mac *mac_p); }
-	SYS___MAC_GET_MOUNT           = 425 // { int __mac_get_mount(char *path, struct mac *mac_p); }
-	SYS___MAC_GETFSSTAT           = 426 // { int __mac_getfsstat(user_addr_t buf, int bufsize, user_addr_t mac, int macsize, int flags); }
+	SYS_SYSCALL                       = 0
+	SYS_EXIT                          = 1
+	SYS_FORK                          = 2
+	SYS_READ                          = 3
+	SYS_WRITE                         = 4
+	SYS_OPEN                          = 5
+	SYS_CLOSE                         = 6
+	SYS_WAIT4                         = 7
+	SYS_LINK                          = 9
+	SYS_UNLINK                        = 10
+	SYS_CHDIR                         = 12
+	SYS_FCHDIR                        = 13
+	SYS_MKNOD                         = 14
+	SYS_CHMOD                         = 15
+	SYS_CHOWN                         = 16
+	SYS_GETFSSTAT                     = 18
+	SYS_GETPID                        = 20
+	SYS_SETUID                        = 23
+	SYS_GETUID                        = 24
+	SYS_GETEUID                       = 25
+	SYS_PTRACE                        = 26
+	SYS_RECVMSG                       = 27
+	SYS_SENDMSG                       = 28
+	SYS_RECVFROM                      = 29
+	SYS_ACCEPT                        = 30
+	SYS_GETPEERNAME                   = 31
+	SYS_GETSOCKNAME                   = 32
+	SYS_ACCESS                        = 33
+	SYS_CHFLAGS                       = 34
+	SYS_FCHFLAGS                      = 35
+	SYS_SYNC                          = 36
+	SYS_KILL                          = 37
+	SYS_GETPPID                       = 39
+	SYS_DUP                           = 41
+	SYS_PIPE                          = 42
+	SYS_GETEGID                       = 43
+	SYS_PROFIL                        = 44
+	SYS_SIGACTION                     = 46
+	SYS_GETGID                        = 47
+	SYS_SIGPROCMASK                   = 48
+	SYS_GETLOGIN                      = 49
+	SYS_SETLOGIN                      = 50
+	SYS_ACCT                          = 51
+	SYS_SIGPENDING                    = 52
+	SYS_SIGALTSTACK                   = 53
+	SYS_IOCTL                         = 54
+	SYS_REBOOT                        = 55
+	SYS_REVOKE                        = 56
+	SYS_SYMLINK                       = 57
+	SYS_READLINK                      = 58
+	SYS_EXECVE                        = 59
+	SYS_UMASK                         = 60
+	SYS_CHROOT                        = 61
+	SYS_MSYNC                         = 65
+	SYS_VFORK                         = 66
+	SYS_MUNMAP                        = 73
+	SYS_MPROTECT                      = 74
+	SYS_MADVISE                       = 75
+	SYS_MINCORE                       = 78
+	SYS_GETGROUPS                     = 79
+	SYS_SETGROUPS                     = 80
+	SYS_GETPGRP                       = 81
+	SYS_SETPGID                       = 82
+	SYS_SETITIMER                     = 83
+	SYS_SWAPON                        = 85
+	SYS_GETITIMER                     = 86
+	SYS_GETDTABLESIZE                 = 89
+	SYS_DUP2                          = 90
+	SYS_FCNTL                         = 92
+	SYS_SELECT                        = 93
+	SYS_FSYNC                         = 95
+	SYS_SETPRIORITY                   = 96
+	SYS_SOCKET                        = 97
+	SYS_CONNECT                       = 98
+	SYS_GETPRIORITY                   = 100
+	SYS_BIND                          = 104
+	SYS_SETSOCKOPT                    = 105
+	SYS_LISTEN                        = 106
+	SYS_SIGSUSPEND                    = 111
+	SYS_GETTIMEOFDAY                  = 116
+	SYS_GETRUSAGE                     = 117
+	SYS_GETSOCKOPT                    = 118
+	SYS_READV                         = 120
+	SYS_WRITEV                        = 121
+	SYS_SETTIMEOFDAY                  = 122
+	SYS_FCHOWN                        = 123
+	SYS_FCHMOD                        = 124
+	SYS_SETREUID                      = 126
+	SYS_SETREGID                      = 127
+	SYS_RENAME                        = 128
+	SYS_FLOCK                         = 131
+	SYS_MKFIFO                        = 132
+	SYS_SENDTO                        = 133
+	SYS_SHUTDOWN                      = 134
+	SYS_SOCKETPAIR                    = 135
+	SYS_MKDIR                         = 136
+	SYS_RMDIR                         = 137
+	SYS_UTIMES                        = 138
+	SYS_FUTIMES                       = 139
+	SYS_ADJTIME                       = 140
+	SYS_GETHOSTUUID                   = 142
+	SYS_SETSID                        = 147
+	SYS_GETPGID                       = 151
+	SYS_SETPRIVEXEC                   = 152
+	SYS_PREAD                         = 153
+	SYS_PWRITE                        = 154
+	SYS_NFSSVC                        = 155
+	SYS_STATFS                        = 157
+	SYS_FSTATFS                       = 158
+	SYS_UNMOUNT                       = 159
+	SYS_GETFH                         = 161
+	SYS_QUOTACTL                      = 165
+	SYS_MOUNT                         = 167
+	SYS_CSOPS                         = 169
+	SYS_WAITID                        = 173
+	SYS_ADD_PROFIL                    = 176
+	SYS_KDEBUG_TRACE                  = 180
+	SYS_SETGID                        = 181
+	SYS_SETEGID                       = 182
+	SYS_SETEUID                       = 183
+	SYS_SIGRETURN                     = 184
+	SYS_CHUD                          = 185
+	SYS_FDATASYNC                     = 187
+	SYS_STAT                          = 188
+	SYS_FSTAT                         = 189
+	SYS_LSTAT                         = 190
+	SYS_PATHCONF                      = 191
+	SYS_FPATHCONF                     = 192
+	SYS_GETRLIMIT                     = 194
+	SYS_SETRLIMIT                     = 195
+	SYS_GETDIRENTRIES                 = 196
+	SYS_MMAP                          = 197
+	SYS_LSEEK                         = 199
+	SYS_TRUNCATE                      = 200
+	SYS_FTRUNCATE                     = 201
+	SYS___SYSCTL                      = 202
+	SYS_MLOCK                         = 203
+	SYS_MUNLOCK                       = 204
+	SYS_UNDELETE                      = 205
+	SYS_ATSOCKET                      = 206
+	SYS_ATGETMSG                      = 207
+	SYS_ATPUTMSG                      = 208
+	SYS_ATPSNDREQ                     = 209
+	SYS_ATPSNDRSP                     = 210
+	SYS_ATPGETREQ                     = 211
+	SYS_ATPGETRSP                     = 212
+	SYS_MKCOMPLEX                     = 216
+	SYS_STATV                         = 217
+	SYS_LSTATV                        = 218
+	SYS_FSTATV                        = 219
+	SYS_GETATTRLIST                   = 220
+	SYS_SETATTRLIST                   = 221
+	SYS_GETDIRENTRIESATTR             = 222
+	SYS_EXCHANGEDATA                  = 223
+	SYS_SEARCHFS                      = 225
+	SYS_DELETE                        = 226
+	SYS_COPYFILE                      = 227
+	SYS_FGETATTRLIST                  = 228
+	SYS_FSETATTRLIST                  = 229
+	SYS_POLL                          = 230
+	SYS_WATCHEVENT                    = 231
+	SYS_WAITEVENT                     = 232
+	SYS_MODWATCH                      = 233
+	SYS_GETXATTR                      = 234
+	SYS_FGETXATTR                     = 235
+	SYS_SETXATTR                      = 236
+	SYS_FSETXATTR                     = 237
+	SYS_REMOVEXATTR                   = 238
+	SYS_FREMOVEXATTR                  = 239
+	SYS_LISTXATTR                     = 240
+	SYS_FLISTXATTR                    = 241
+	SYS_FSCTL                         = 242
+	SYS_INITGROUPS                    = 243
+	SYS_POSIX_SPAWN                   = 244
+	SYS_FFSCTL                        = 245
+	SYS_NFSCLNT                       = 247
+	SYS_FHOPEN                        = 248
+	SYS_MINHERIT                      = 250
+	SYS_SEMSYS                        = 251
+	SYS_MSGSYS                        = 252
+	SYS_SHMSYS                        = 253
+	SYS_SEMCTL                        = 254
+	SYS_SEMGET                        = 255
+	SYS_SEMOP                         = 256
+	SYS_MSGCTL                        = 258
+	SYS_MSGGET                        = 259
+	SYS_MSGSND                        = 260
+	SYS_MSGRCV                        = 261
+	SYS_SHMAT                         = 262
+	SYS_SHMCTL                        = 263
+	SYS_SHMDT                         = 264
+	SYS_SHMGET                        = 265
+	SYS_SHM_OPEN                      = 266
+	SYS_SHM_UNLINK                    = 267
+	SYS_SEM_OPEN                      = 268
+	SYS_SEM_CLOSE                     = 269
+	SYS_SEM_UNLINK                    = 270
+	SYS_SEM_WAIT                      = 271
+	SYS_SEM_TRYWAIT                   = 272
+	SYS_SEM_POST                      = 273
+	SYS_SEM_GETVALUE                  = 274
+	SYS_SEM_INIT                      = 275
+	SYS_SEM_DESTROY                   = 276
+	SYS_OPEN_EXTENDED                 = 277
+	SYS_UMASK_EXTENDED                = 278
+	SYS_STAT_EXTENDED                 = 279
+	SYS_LSTAT_EXTENDED                = 280
+	SYS_FSTAT_EXTENDED                = 281
+	SYS_CHMOD_EXTENDED                = 282
+	SYS_FCHMOD_EXTENDED               = 283
+	SYS_ACCESS_EXTENDED               = 284
+	SYS_SETTID                        = 285
+	SYS_GETTID                        = 286
+	SYS_SETSGROUPS                    = 287
+	SYS_GETSGROUPS                    = 288
+	SYS_SETWGROUPS                    = 289
+	SYS_GETWGROUPS                    = 290
+	SYS_MKFIFO_EXTENDED               = 291
+	SYS_MKDIR_EXTENDED                = 292
+	SYS_IDENTITYSVC                   = 293
+	SYS_SHARED_REGION_CHECK_NP        = 294
+	SYS_SHARED_REGION_MAP_NP          = 295
+	SYS_VM_PRESSURE_MONITOR           = 296
+	SYS_PSYNCH_RW_LONGRDLOCK          = 297
+	SYS_PSYNCH_RW_YIELDWRLOCK         = 298
+	SYS_PSYNCH_RW_DOWNGRADE           = 299
+	SYS_PSYNCH_RW_UPGRADE             = 300
+	SYS_PSYNCH_MUTEXWAIT              = 301
+	SYS_PSYNCH_MUTEXDROP              = 302
+	SYS_PSYNCH_CVBROAD                = 303
+	SYS_PSYNCH_CVSIGNAL               = 304
+	SYS_PSYNCH_CVWAIT                 = 305
+	SYS_PSYNCH_RW_RDLOCK              = 306
+	SYS_PSYNCH_RW_WRLOCK              = 307
+	SYS_PSYNCH_RW_UNLOCK              = 308
+	SYS_PSYNCH_RW_UNLOCK2             = 309
+	SYS_GETSID                        = 310
+	SYS_SETTID_WITH_PID               = 311
+	SYS_AIO_FSYNC                     = 313
+	SYS_AIO_RETURN                    = 314
+	SYS_AIO_SUSPEND                   = 315
+	SYS_AIO_CANCEL                    = 316
+	SYS_AIO_ERROR                     = 317
+	SYS_AIO_READ                      = 318
+	SYS_AIO_WRITE                     = 319
+	SYS_LIO_LISTIO                    = 320
+	SYS_IOPOLICYSYS                   = 322
+	SYS_MLOCKALL                      = 324
+	SYS_MUNLOCKALL                    = 325
+	SYS_ISSETUGID                     = 327
+	SYS___PTHREAD_KILL                = 328
+	SYS___PTHREAD_SIGMASK             = 329
+	SYS___SIGWAIT                     = 330
+	SYS___DISABLE_THREADSIGNAL        = 331
+	SYS___PTHREAD_MARKCANCEL          = 332
+	SYS___PTHREAD_CANCELED            = 333
+	SYS___SEMWAIT_SIGNAL              = 334
+	SYS_PROC_INFO                     = 336
+	SYS_SENDFILE                      = 337
+	SYS_STAT64                        = 338
+	SYS_FSTAT64                       = 339
+	SYS_LSTAT64                       = 340
+	SYS_STAT64_EXTENDED               = 341
+	SYS_LSTAT64_EXTENDED              = 342
+	SYS_FSTAT64_EXTENDED              = 343
+	SYS_GETDIRENTRIES64               = 344
+	SYS_STATFS64                      = 345
+	SYS_FSTATFS64                     = 346
+	SYS_GETFSSTAT64                   = 347
+	SYS___PTHREAD_CHDIR               = 348
+	SYS___PTHREAD_FCHDIR              = 349
+	SYS_AUDIT                         = 350
+	SYS_AUDITON                       = 351
+	SYS_GETAUID                       = 353
+	SYS_SETAUID                       = 354
+	SYS_GETAUDIT                      = 355
+	SYS_SETAUDIT                      = 356
+	SYS_GETAUDIT_ADDR                 = 357
+	SYS_SETAUDIT_ADDR                 = 358
+	SYS_AUDITCTL                      = 359
+	SYS_BSDTHREAD_CREATE              = 360
+	SYS_BSDTHREAD_TERMINATE           = 361
+	SYS_KQUEUE                        = 362
+	SYS_KEVENT                        = 363
+	SYS_LCHOWN                        = 364
+	SYS_STACK_SNAPSHOT                = 365
+	SYS_BSDTHREAD_REGISTER            = 366
+	SYS_WORKQ_OPEN                    = 367
+	SYS_WORKQ_KERNRETURN              = 368
+	SYS_KEVENT64                      = 369
+	SYS___OLD_SEMWAIT_SIGNAL          = 370
+	SYS___OLD_SEMWAIT_SIGNAL_NOCANCEL = 371
+	SYS_THREAD_SELFID                 = 372
+	SYS___MAC_EXECVE                  = 380
+	SYS___MAC_SYSCALL                 = 381
+	SYS___MAC_GET_FILE                = 382
+	SYS___MAC_SET_FILE                = 383
+	SYS___MAC_GET_LINK                = 384
+	SYS___MAC_SET_LINK                = 385
+	SYS___MAC_GET_PROC                = 386
+	SYS___MAC_SET_PROC                = 387
+	SYS___MAC_GET_FD                  = 388
+	SYS___MAC_SET_FD                  = 389
+	SYS___MAC_GET_PID                 = 390
+	SYS___MAC_GET_LCID                = 391
+	SYS___MAC_GET_LCTX                = 392
+	SYS___MAC_SET_LCTX                = 393
+	SYS_SETLCID                       = 394
+	SYS_GETLCID                       = 395
+	SYS_READ_NOCANCEL                 = 396
+	SYS_WRITE_NOCANCEL                = 397
+	SYS_OPEN_NOCANCEL                 = 398
+	SYS_CLOSE_NOCANCEL                = 399
+	SYS_WAIT4_NOCANCEL                = 400
+	SYS_RECVMSG_NOCANCEL              = 401
+	SYS_SENDMSG_NOCANCEL              = 402
+	SYS_RECVFROM_NOCANCEL             = 403
+	SYS_ACCEPT_NOCANCEL               = 404
+	SYS_MSYNC_NOCANCEL                = 405
+	SYS_FCNTL_NOCANCEL                = 406
+	SYS_SELECT_NOCANCEL               = 407
+	SYS_FSYNC_NOCANCEL                = 408
+	SYS_CONNECT_NOCANCEL              = 409
+	SYS_SIGSUSPEND_NOCANCEL           = 410
+	SYS_READV_NOCANCEL                = 411
+	SYS_WRITEV_NOCANCEL               = 412
+	SYS_SENDTO_NOCANCEL               = 413
+	SYS_PREAD_NOCANCEL                = 414
+	SYS_PWRITE_NOCANCEL               = 415
+	SYS_WAITID_NOCANCEL               = 416
+	SYS_POLL_NOCANCEL                 = 417
+	SYS_MSGSND_NOCANCEL               = 418
+	SYS_MSGRCV_NOCANCEL               = 419
+	SYS_SEM_WAIT_NOCANCEL             = 420
+	SYS_AIO_SUSPEND_NOCANCEL          = 421
+	SYS___SIGWAIT_NOCANCEL            = 422
+	SYS___SEMWAIT_SIGNAL_NOCANCEL     = 423
+	SYS___MAC_MOUNT                   = 424
+	SYS___MAC_GET_MOUNT               = 425
+	SYS___MAC_GETFSSTAT               = 426
+	SYS_FSGETPATH                     = 427
+	SYS_AUDIT_SESSION_SELF            = 428
+	SYS_AUDIT_SESSION_JOIN            = 429
+	SYS_PID_SUSPEND                   = 430
+	SYS_PID_RESUME                    = 431
+	SYS_FILEPORT_MAKEPORT             = 432
+	SYS_FILEPORT_MAKEFD               = 433
+	SYS_MAXSYSCALL                    = 434
 )
diff --git a/src/pkg/syscall/zsysnum_darwin_amd64.go b/src/pkg/syscall/zsysnum_darwin_amd64.go
index f9c6e077d5..50aec39f1e 100644
--- a/src/pkg/syscall/zsysnum_darwin_amd64.go
+++ b/src/pkg/syscall/zsysnum_darwin_amd64.go
@@ -1,485 +1,355 @@
-// mksysnum_darwin.pl /home/rsc/pub/xnu-1228/bsd/kern/syscalls.master
+// mksysnum_darwin.pl /usr/include/sys/syscall.h
 // MACHINE GENERATED BY THE ABOVE COMMAND; DO NOT EDIT
 
 package syscall
 
 const (
-	// SYS_NOSYS = 0;  // { int nosys(void); }   { indirect syscall }
-	SYS_EXIT  = 1 // { void exit(int rval); }
-	SYS_FORK  = 2 // { int fork(void); }
-	SYS_READ  = 3 // { user_ssize_t read(int fd, user_addr_t cbuf, user_size_t nbyte); }
-	SYS_WRITE = 4 // { user_ssize_t write(int fd, user_addr_t cbuf, user_size_t nbyte); }
-	SYS_OPEN  = 5 // { int open(user_addr_t path, int flags, int mode); }
-	SYS_CLOSE = 6 // { int close(int fd); }
-	SYS_WAIT4 = 7 // { int wait4(int pid, user_addr_t status, int options, user_addr_t rusage); }
-	// SYS_NOSYS = 8;  // { int nosys(void); }   { old creat }
-	SYS_LINK   = 9  // { int link(user_addr_t path, user_addr_t link); }
-	SYS_UNLINK = 10 // { int unlink(user_addr_t path); }
-	// SYS_NOSYS = 11;  // { int nosys(void); }   { old execv }
-	SYS_CHDIR      = 12 // { int chdir(user_addr_t path); }
-	SYS_FCHDIR     = 13 // { int fchdir(int fd); }
-	SYS_MKNOD      = 14 // { int mknod(user_addr_t path, int mode, int dev); }
-	SYS_CHMOD      = 15 // { int chmod(user_addr_t path, int mode); }
-	SYS_CHOWN      = 16 // { int chown(user_addr_t path, int uid, int gid); }
-	SYS_OGETFSSTAT = 18 // { int ogetfsstat(user_addr_t buf, int bufsize, int flags); }
-	SYS_GETFSSTAT  = 18 // { int getfsstat(user_addr_t buf, int bufsize, int flags); }
-	// SYS_NOSYS = 19;  // { int nosys(void); }   { old lseek }
-	SYS_GETPID = 20 // { int getpid(void); }
-	// SYS_NOSYS = 21;  // { int nosys(void); }   { old mount }
-	// SYS_NOSYS = 22;  // { int nosys(void); }   { old umount }
-	SYS_SETUID      = 23 // { int setuid(uid_t uid); }
-	SYS_GETUID      = 24 // { int getuid(void); }
-	SYS_GETEUID     = 25 // { int geteuid(void); }
-	SYS_PTRACE      = 26 // { int ptrace(int req, pid_t pid, caddr_t addr, int data); }
-	SYS_RECVMSG     = 27 // { int recvmsg(int s, struct msghdr *msg, int flags); }
-	SYS_SENDMSG     = 28 // { int sendmsg(int s, caddr_t msg, int flags); }
-	SYS_RECVFROM    = 29 // { int recvfrom(int s, void *buf, size_t len, int flags, struct sockaddr *from, int *fromlenaddr); }
-	SYS_ACCEPT      = 30 // { int accept(int s, caddr_t name, socklen_t	*anamelen); }
-	SYS_GETPEERNAME = 31 // { int getpeername(int fdes, caddr_t asa, socklen_t *alen); }
-	SYS_GETSOCKNAME = 32 // { int getsockname(int fdes, caddr_t asa, socklen_t *alen); }
-	// SYS_NOSYS = 27;  // { int nosys(void); }
-	// SYS_NOSYS = 28;  // { int nosys(void); }
-	// SYS_NOSYS = 29;  // { int nosys(void); }
-	// SYS_NOSYS = 30;  // { int nosys(void); }
-	// SYS_NOSYS = 31;  // { int nosys(void); }
-	// SYS_NOSYS = 32;  // { int nosys(void); }
-	SYS_ACCESS   = 33 // { int access(user_addr_t path, int flags); }
-	SYS_CHFLAGS  = 34 // { int chflags(char *path, int flags); }
-	SYS_FCHFLAGS = 35 // { int fchflags(int fd, int flags); }
-	SYS_SYNC     = 36 // { int sync(void); }
-	SYS_KILL     = 37 // { int kill(int pid, int signum, int posix); }
-	// SYS_NOSYS = 38;  // { int nosys(void); }   { old stat  }
-	SYS_GETPPID = 39 // { int getppid(void); }
-	// SYS_NOSYS = 40;  // { int nosys(void); }   { old lstat }
-	SYS_DUP     = 41 // { int dup(u_int fd); }
-	SYS_PIPE    = 42 // { int pipe(void); }
-	SYS_GETEGID = 43 // { int getegid(void); }
-	SYS_PROFIL  = 44 // { int profil(short *bufbase, size_t bufsize, u_long pcoffset, u_int pcscale); }
-	// SYS_NOSYS = 45;  // { int nosys(void); } { old ktrace }
-	SYS_SIGACTION   = 46 // { int sigaction(int signum, struct __sigaction *nsa, struct sigaction *osa); }
-	SYS_GETGID      = 47 // { int getgid(void); }
-	SYS_SIGPROCMASK = 48 // { int sigprocmask(int how, user_addr_t mask, user_addr_t omask); }
-	SYS_GETLOGIN    = 49 // { int getlogin(char *namebuf, u_int namelen); }
-	SYS_SETLOGIN    = 50 // { int setlogin(char *namebuf); }
-	SYS_ACCT        = 51 // { int acct(char *path); }
-	SYS_SIGPENDING  = 52 // { int sigpending(struct sigvec *osv); }
-	SYS_SIGALTSTACK = 53 // { int sigaltstack(struct sigaltstack *nss, struct sigaltstack *oss); }
-	SYS_IOCTL       = 54 // { int ioctl(int fd, u_long com, caddr_t data); }
-	SYS_REBOOT      = 55 // { int reboot(int opt, char *command); }
-	SYS_REVOKE      = 56 // { int revoke(char *path); }
-	SYS_SYMLINK     = 57 // { int symlink(char *path, char *link); }
-	SYS_READLINK    = 58 // { int readlink(char *path, char *buf, int count); }
-	SYS_EXECVE      = 59 // { int execve(char *fname, char **argp, char **envp); }
-	SYS_UMASK       = 60 // { int umask(int newmask); }
-	SYS_CHROOT      = 61 // { int chroot(user_addr_t path); }
-	// SYS_NOSYS = 62;  // { int nosys(void); }   { old fstat }
-	// SYS_NOSYS = 63;  // { int nosys(void); }   { used internally, reserved }
-	// SYS_NOSYS = 64;  // { int nosys(void); }   { old getpagesize }
-	SYS_MSYNC = 65 // { int msync(caddr_t addr, size_t len, int flags); }
-	SYS_VFORK = 66 // { int vfork(void); }
-	// SYS_NOSYS = 67;  // { int nosys(void); }   { old vread }
-	// SYS_NOSYS = 68;  // { int nosys(void); }   { old vwrite }
-	SYS_SBRK = 69 // { int sbrk(int incr) NO_SYSCALL_STUB; }
-	SYS_SSTK = 70 // { int sstk(int incr) NO_SYSCALL_STUB; }
-	// SYS_NOSYS = 71;  // { int nosys(void); }   { old mmap }
-	SYS_OVADVISE = 72 // { int ovadvise(void) NO_SYSCALL_STUB; }   { old vadvise }
-	SYS_MUNMAP   = 73 // { int munmap(caddr_t addr, size_t len); }
-	SYS_MPROTECT = 74 // { int mprotect(caddr_t addr, size_t len, int prot); }
-	SYS_MADVISE  = 75 // { int madvise(caddr_t addr, size_t len, int behav); }
-	// SYS_NOSYS = 76;  // { int nosys(void); }   { old vhangup }
-	// SYS_NOSYS = 77;  // { int nosys(void); }   { old vlimit }
-	SYS_MINCORE   = 78 // { int mincore(user_addr_t addr, user_size_t len, user_addr_t vec); }
-	SYS_GETGROUPS = 79 // { int getgroups(u_int gidsetsize, gid_t *gidset); }
-	SYS_SETGROUPS = 80 // { int setgroups(u_int gidsetsize, gid_t *gidset); }
-	SYS_GETPGRP   = 81 // { int getpgrp(void); }
-	SYS_SETPGID   = 82 // { int setpgid(int pid, int pgid); }
-	SYS_SETITIMER = 83 // { int setitimer(u_int which, struct itimerval *itv, struct itimerval *oitv); }
-	// SYS_NOSYS = 84;  // { int nosys(void); }   { old wait }
-	SYS_SWAPON    = 85 // { int swapon(void); }
-	SYS_GETITIMER = 86 // { int getitimer(u_int which, struct itimerval *itv); }
-	// SYS_NOSYS = 87;  // { int nosys(void); }   { old gethostname }
-	// SYS_NOSYS = 88;  // { int nosys(void); }   { old sethostname }
-	SYS_GETDTABLESIZE = 89 // { int getdtablesize(void); }
-	SYS_DUP2          = 90 // { int dup2(u_int from, u_int to); }
-	// SYS_NOSYS = 91;  // { int nosys(void); }   { old getdopt }
-	SYS_FCNTL  = 92 // { int fcntl(int fd, int cmd, long arg); }
-	SYS_SELECT = 93 // { int select(int nd, u_int32_t *in, u_int32_t *ou, u_int32_t *ex, struct timeval *tv); }
-	// SYS_NOSYS = 94;  // { int nosys(void); }   { old setdopt }
-	SYS_FSYNC       = 95 // { int fsync(int fd); }
-	SYS_SETPRIORITY = 96 // { int setpriority(int which, id_t who, int prio); }
-	SYS_SOCKET      = 97 // { int socket(int domain, int type, int protocol); }
-	SYS_CONNECT     = 98 // { int connect(int s, caddr_t name, socklen_t namelen); }
-	// SYS_NOSYS = 97;  // { int nosys(void); }
-	// SYS_NOSYS = 98;  // { int nosys(void); }
-	// SYS_NOSYS = 99;  // { int nosys(void); }   { old accept }
-	SYS_GETPRIORITY = 100 // { int getpriority(int which, id_t who); }
-	// SYS_NOSYS = 101;  // { int nosys(void); }   { old send }
-	// SYS_NOSYS = 102;  // { int nosys(void); }   { old recv }
-	// SYS_NOSYS = 103;  // { int nosys(void); }   { old sigreturn }
-	SYS_BIND       = 104 // { int bind(int s, caddr_t name, socklen_t namelen); }
-	SYS_SETSOCKOPT = 105 // { int setsockopt(int s, int level, int name, caddr_t val, socklen_t valsize); }
-	SYS_LISTEN     = 106 // { int listen(int s, int backlog); }
-	// SYS_NOSYS = 104;  // { int nosys(void); }
-	// SYS_NOSYS = 105;  // { int nosys(void); }
-	// SYS_NOSYS = 106;  // { int nosys(void); }
-	// SYS_NOSYS = 107;  // { int nosys(void); }   { old vtimes }
-	// SYS_NOSYS = 108;  // { int nosys(void); }   { old sigvec }
-	// SYS_NOSYS = 109;  // { int nosys(void); }   { old sigblock }
-	// SYS_NOSYS = 110;  // { int nosys(void); }   { old sigsetmask }
-	SYS_SIGSUSPEND = 111 // { int sigsuspend(sigset_t mask); }
-	// SYS_NOSYS = 112;  // { int nosys(void); }   { old sigstack }
-	// SYS_NOSYS = 113;  // { int nosys(void); }   { old recvmsg }
-	// SYS_NOSYS = 114;  // { int nosys(void); }   { old sendmsg }
-	// SYS_NOSYS = 113;  // { int nosys(void); }
-	// SYS_NOSYS = 114;  // { int nosys(void); }
-	// SYS_NOSYS = 115;  // { int nosys(void); }   { old vtrace }
-	SYS_GETTIMEOFDAY = 116 // { int gettimeofday(struct timeval *tp, struct timezone *tzp); }
-	SYS_GETRUSAGE    = 117 // { int getrusage(int who, struct rusage *rusage); }
-	SYS_GETSOCKOPT   = 118 // { int getsockopt(int s, int level, int name, caddr_t val, socklen_t *avalsize); }
-	// SYS_NOSYS = 118;  // { int nosys(void); }
-	// SYS_NOSYS = 119;  // { int nosys(void); }   { old resuba }
-	SYS_READV        = 120 // { user_ssize_t readv(int fd, struct iovec *iovp, u_int iovcnt); }
-	SYS_WRITEV       = 121 // { user_ssize_t writev(int fd, struct iovec *iovp, u_int iovcnt); }
-	SYS_SETTIMEOFDAY = 122 // { int settimeofday(struct timeval *tv, struct timezone *tzp); }
-	SYS_FCHOWN       = 123 // { int fchown(int fd, int uid, int gid); }
-	SYS_FCHMOD       = 124 // { int fchmod(int fd, int mode); }
-	// SYS_NOSYS = 125;  // { int nosys(void); }   { old recvfrom }
-	SYS_SETREUID = 126 // { int setreuid(uid_t ruid, uid_t euid); }
-	SYS_SETREGID = 127 // { int setregid(gid_t rgid, gid_t egid); }
-	SYS_RENAME   = 128 // { int rename(char *from, char *to); }
-	// SYS_NOSYS = 129;  // { int nosys(void); }   { old truncate }
-	// SYS_NOSYS = 130;  // { int nosys(void); }   { old ftruncate }
-	SYS_FLOCK      = 131 // { int flock(int fd, int how); }
-	SYS_MKFIFO     = 132 // { int mkfifo(user_addr_t path, int mode); }
-	SYS_SENDTO     = 133 // { int sendto(int s, caddr_t buf, size_t len, int flags, caddr_t to, socklen_t tolen); }
-	SYS_SHUTDOWN   = 134 // { int shutdown(int s, int how); }
-	SYS_SOCKETPAIR = 135 // { int socketpair(int domain, int type, int protocol, int *rsv); }
-	// SYS_NOSYS = 133;  // { int nosys(void); }
-	// SYS_NOSYS = 134;  // { int nosys(void); }
-	// SYS_NOSYS = 135;  // { int nosys(void); }
-	SYS_MKDIR   = 136 // { int mkdir(user_addr_t path, int mode); }
-	SYS_RMDIR   = 137 // { int rmdir(char *path); }
-	SYS_UTIMES  = 138 // { int utimes(char *path, struct timeval *tptr); }
-	SYS_FUTIMES = 139 // { int futimes(int fd, struct timeval *tptr); }
-	SYS_ADJTIME = 140 // { int adjtime(struct timeval *delta, struct timeval *olddelta); }
-	// SYS_NOSYS = 141;  // { int nosys(void); }   { old getpeername }
-	SYS_GETHOSTUUID = 142 // { int gethostuuid(unsigned char *uuid_buf, const struct timespec *timeoutp); }
-	// SYS_NOSYS = 143;  // { int nosys(void); }   { old sethostid 	}
-	// SYS_NOSYS = 144;  // { int nosys(void); }   { old getrlimit }
-	// SYS_NOSYS = 145;  // { int nosys(void); }   { old setrlimit }
-	// SYS_NOSYS = 146;  // { int nosys(void); }   { old killpg }
-	SYS_SETSID = 147 // { int setsid(void); }
-	// SYS_NOSYS = 148;  // { int nosys(void); }   { old setquota }
-	// SYS_NOSYS = 149;  // { int nosys(void); }   { old qquota }
-	// SYS_NOSYS = 150;  // { int nosys(void); }   { old getsockname }
-	SYS_GETPGID     = 151 // { int getpgid(pid_t pid); }
-	SYS_SETPRIVEXEC = 152 // { int setprivexec(int flag); }
-	SYS_PREAD       = 153 // { user_ssize_t pread(int fd, user_addr_t buf, user_size_t nbyte, off_t offset); }
-	SYS_PWRITE      = 154 // { user_ssize_t pwrite(int fd, user_addr_t buf, user_size_t nbyte, off_t offset); }
-	SYS_NFSSVC      = 155 // { int nfssvc(int flag, caddr_t argp); }
-	// SYS_NOSYS = 155;  // { int nosys(void); }
-	// SYS_NOSYS = 156;  // { int nosys(void); }   { old getdirentries }
-	SYS_STATFS  = 157 // { int statfs(char *path, struct statfs *buf); }
-	SYS_FSTATFS = 158 // { int fstatfs(int fd, struct statfs *buf); }
-	SYS_UNMOUNT = 159 // { int unmount(user_addr_t path, int flags); }
-	// SYS_NOSYS = 160;  // { int nosys(void); }   { old async_daemon }
-	SYS_GETFH = 161 // { int getfh(char *fname, fhandle_t *fhp); }
-	// SYS_NOSYS = 161;  // { int nosys(void); }
-	// SYS_NOSYS = 162;  // { int nosys(void); }   { old getdomainname }
-	// SYS_NOSYS = 163;  // { int nosys(void); }   { old setdomainname }
-	// SYS_NOSYS = 164;  // { int nosys(void); }
-	SYS_QUOTACTL = 165 // { int quotactl(const char *path, int cmd, int uid, caddr_t arg); }
-	// SYS_NOSYS = 166;  // { int nosys(void); }   { old exportfs }
-	SYS_MOUNT = 167 // { int mount(char *type, char *path, int flags, caddr_t data); }
-	// SYS_NOSYS = 168;  // { int nosys(void); }   { old ustat }
-	SYS_CSOPS = 169 // { int csops(pid_t pid, uint32_t ops, user_addr_t useraddr, user_size_t usersize); }
-	// SYS_NOSYS = 171;  // { int nosys(void); }   { old wait3 }
-	// SYS_NOSYS = 172;  // { int nosys(void); }   { old rpause	}
-	SYS_WAITID = 173 // { int waitid(idtype_t idtype, id_t id, siginfo_t *infop, int options); }
-	// SYS_NOSYS = 174;  // { int nosys(void); }   { old getdents }
-	// SYS_NOSYS = 175;  // { int nosys(void); }   { old gc_control }
-	SYS_ADD_PROFIL = 176 // { int add_profil(short *bufbase, size_t bufsize, u_long pcoffset, u_int pcscale); }
-	// SYS_NOSYS = 177;  // { int nosys(void); }
-	// SYS_NOSYS = 178;  // { int nosys(void); }
-	// SYS_NOSYS = 179;  // { int nosys(void); }
-	SYS_KDEBUG_TRACE = 180 // { int kdebug_trace(int code, int arg1, int arg2, int arg3, int arg4, int arg5) NO_SYSCALL_STUB; }
-	SYS_SETGID       = 181 // { int setgid(gid_t gid); }
-	SYS_SETEGID      = 182 // { int setegid(gid_t egid); }
-	SYS_SETEUID      = 183 // { int seteuid(uid_t euid); }
-	SYS_SIGRETURN    = 184 // { int sigreturn(struct ucontext *uctx, int infostyle); }
-	// SYS_NOSYS = 186;  // { int nosys(void); }
-	// SYS_NOSYS = 187;  // { int nosys(void); }
-	SYS_STAT      = 188 // { int stat(user_addr_t path, user_addr_t ub); }
-	SYS_FSTAT     = 189 // { int fstat(int fd, user_addr_t ub); }
-	SYS_LSTAT     = 190 // { int lstat(user_addr_t path, user_addr_t ub); }
-	SYS_PATHCONF  = 191 // { int pathconf(char *path, int name); }
-	SYS_FPATHCONF = 192 // { int fpathconf(int fd, int name); }
-	// SYS_NOSYS = 193;  // { int nosys(void); }
-	SYS_GETRLIMIT     = 194 // { int getrlimit(u_int which, struct rlimit *rlp); }
-	SYS_SETRLIMIT     = 195 // { int setrlimit(u_int which, struct rlimit *rlp); }
-	SYS_GETDIRENTRIES = 196 // { int getdirentries(int fd, char *buf, u_int count, long *basep); }
-	SYS_MMAP          = 197 // { user_addr_t mmap(caddr_t addr, size_t len, int prot, int flags, int fd, off_t pos); }
-	// SYS_NOSYS = 198;  // { int nosys(void); } 	{ __syscall }
-	SYS_LSEEK     = 199 // { off_t lseek(int fd, off_t offset, int whence); }
-	SYS_TRUNCATE  = 200 // { int truncate(char *path, off_t length); }
-	SYS_FTRUNCATE = 201 // { int ftruncate(int fd, off_t length); }
-	SYS___SYSCTL  = 202 // { int __sysctl(int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen); }
-	SYS_MLOCK     = 203 // { int mlock(caddr_t addr, size_t len); }
-	SYS_MUNLOCK   = 204 // { int munlock(caddr_t addr, size_t len); }
-	SYS_UNDELETE  = 205 // { int undelete(user_addr_t path); }
-	SYS_ATSOCKET  = 206 // { int ATsocket(int proto); }
-	// SYS_NOSYS = 213;  // { int nosys(void); } 	{ Reserved for AppleTalk }
-	// SYS_NOSYS = 206;  // { int nosys(void); }
-	// SYS_NOSYS = 207;  // { int nosys(void); }
-	// SYS_NOSYS = 208;  // { int nosys(void); }
-	// SYS_NOSYS = 209;  // { int nosys(void); }
-	// SYS_NOSYS = 210;  // { int nosys(void); }
-	// SYS_NOSYS = 211;  // { int nosys(void); }
-	// SYS_NOSYS = 212;  // { int nosys(void); }
-	// SYS_NOSYS = 213;  // { int nosys(void); } 	{ Reserved for AppleTalk }
-	SYS_KQUEUE_FROM_PORTSET_NP = 214 // { int kqueue_from_portset_np(int portset); }
-	SYS_KQUEUE_PORTSET_NP      = 215 // { int kqueue_portset_np(int fd); }
-	SYS_GETATTRLIST            = 220 // { int getattrlist(const char *path, struct attrlist *alist, void *attributeBuffer, size_t bufferSize, u_long options); }
-	SYS_SETATTRLIST            = 221 // { int setattrlist(const char *path, struct attrlist *alist, void *attributeBuffer, size_t bufferSize, u_long options); }
-	SYS_GETDIRENTRIESATTR      = 222 // { int getdirentriesattr(int fd, struct attrlist *alist, void *buffer, size_t buffersize, u_long *count, u_long *basep, u_long *newstate, u_long options); }
-	SYS_EXCHANGEDATA           = 223 // { int exchangedata(const char *path1, const char *path2, u_long options); }
-	// SYS_NOSYS = 224;  // { int nosys(void); } { was checkuseraccess }
-	SYS_SEARCHFS = 225 // { int searchfs(const char *path, struct fssearchblock *searchblock, u_long *nummatches, u_long scriptcode, u_long options, struct searchstate *state); }
-	SYS_DELETE   = 226 // { int delete(user_addr_t path) NO_SYSCALL_STUB; }       { private delete (Carbon semantics) }
-	SYS_COPYFILE = 227 // { int copyfile(char *from, char *to, int mode, int flags) NO_SYSCALL_STUB; }
-	// SYS_NOSYS = 228;  // { int nosys(void); }
-	// SYS_NOSYS = 229;  // { int nosys(void); }
-	SYS_POLL         = 230 // { int poll(struct pollfd *fds, u_int nfds, int timeout); }
-	SYS_WATCHEVENT   = 231 // { int watchevent(struct eventreq *u_req, int u_eventmask); }
-	SYS_WAITEVENT    = 232 // { int waitevent(struct eventreq *u_req, struct timeval *tv); }
-	SYS_MODWATCH     = 233 // { int modwatch(struct eventreq *u_req, int u_eventmask); }
-	SYS_GETXATTR     = 234 // { user_ssize_t getxattr(user_addr_t path, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }
-	SYS_FGETXATTR    = 235 // { user_ssize_t fgetxattr(int fd, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }
-	SYS_SETXATTR     = 236 // { int setxattr(user_addr_t path, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }
-	SYS_FSETXATTR    = 237 // { int fsetxattr(int fd, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }
-	SYS_REMOVEXATTR  = 238 // { int removexattr(user_addr_t path, user_addr_t attrname, int options); }
-	SYS_FREMOVEXATTR = 239 // { int fremovexattr(int fd, user_addr_t attrname, int options); }
-	SYS_LISTXATTR    = 240 // { user_ssize_t listxattr(user_addr_t path, user_addr_t namebuf, size_t bufsize, int options); }
-	SYS_FLISTXATTR   = 241 // { user_ssize_t flistxattr(int fd, user_addr_t namebuf, size_t bufsize, int options); }
-	SYS_FSCTL        = 242 // { int fsctl(const char *path, u_long cmd, caddr_t data, u_long options); }
-	SYS_INITGROUPS   = 243 // { int initgroups(u_int gidsetsize, gid_t *gidset, int gmuid); }
-	SYS_POSIX_SPAWN  = 244 // { int posix_spawn(pid_t *pid, const char *path, const struct _posix_spawn_args_desc *adesc, char **argv, char **envp); }
-	// SYS_NOSYS = 245;  // { int nosys(void); }
-	// SYS_NOSYS = 246;  // { int nosys(void); }
-	SYS_NFSCLNT = 247 // { int nfsclnt(int flag, caddr_t argp); }
-	// SYS_NOSYS = 247;  // { int nosys(void); }
-	SYS_FHOPEN = 248 // { int fhopen(const struct fhandle *u_fhp, int flags); }
-	// SYS_NOSYS = 248;  // { int nosys(void); }
-	// SYS_NOSYS = 249;  // { int nosys(void); }
-	SYS_MINHERIT = 250 // { int minherit(void *addr, size_t len, int inherit); }
-	SYS_SEMSYS   = 251 // { int semsys(u_int which, int a2, int a3, int a4, int a5); }
-	// SYS_NOSYS = 251;  // { int nosys(void); }
-	SYS_MSGSYS = 252 // { int msgsys(u_int which, int a2, int a3, int a4, int a5); }
-	// SYS_NOSYS = 252;  // { int nosys(void); }
-	SYS_SHMSYS = 253 // { int shmsys(u_int which, int a2, int a3, int a4); }
-	// SYS_NOSYS = 253;  // { int nosys(void); }
-	SYS_SEMCTL = 254 // { int semctl(int semid, int semnum, int cmd, semun_t arg); }
-	SYS_SEMGET = 255 // { int semget(key_t key, int	nsems, int semflg); }
-	SYS_SEMOP  = 256 // { int semop(int semid, struct sembuf *sops, int nsops); }
-	// SYS_NOSYS = 257;  // { int nosys(void); }
-	// SYS_NOSYS = 254;  // { int nosys(void); }
-	// SYS_NOSYS = 255;  // { int nosys(void); }
-	// SYS_NOSYS = 256;  // { int nosys(void); }
-	// SYS_NOSYS = 257;  // { int nosys(void); }
-	SYS_MSGCTL = 258 // { int msgctl(int msqid, int cmd, struct	msqid_ds *buf); }
-	SYS_MSGGET = 259 // { int msgget(key_t key, int msgflg); }
-	SYS_MSGSND = 260 // { int msgsnd(int msqid, void *msgp, size_t msgsz, int msgflg); }
-	SYS_MSGRCV = 261 // { user_ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg); }
-	// SYS_NOSYS = 258;  // { int nosys(void); }
-	// SYS_NOSYS = 259;  // { int nosys(void); }
-	// SYS_NOSYS = 260;  // { int nosys(void); }
-	// SYS_NOSYS = 261;  // { int nosys(void); }
-	SYS_SHMAT  = 262 // { user_addr_t shmat(int shmid, void *shmaddr, int shmflg); }
-	SYS_SHMCTL = 263 // { int shmctl(int shmid, int cmd, struct shmid_ds *buf); }
-	SYS_SHMDT  = 264 // { int shmdt(void *shmaddr); }
-	SYS_SHMGET = 265 // { int shmget(key_t key, size_t size, int shmflg); }
-	// SYS_NOSYS = 262;  // { int nosys(void); }
-	// SYS_NOSYS = 263;  // { int nosys(void); }
-	// SYS_NOSYS = 264;  // { int nosys(void); }
-	// SYS_NOSYS = 265;  // { int nosys(void); }
-	SYS_SHM_OPEN               = 266 // { int shm_open(const char *name, int oflag, int mode); }
-	SYS_SHM_UNLINK             = 267 // { int shm_unlink(const char *name); }
-	SYS_SEM_OPEN               = 268 // { user_addr_t sem_open(const char *name, int oflag, int mode, int value); }
-	SYS_SEM_CLOSE              = 269 // { int sem_close(sem_t *sem); }
-	SYS_SEM_UNLINK             = 270 // { int sem_unlink(const char *name); }
-	SYS_SEM_WAIT               = 271 // { int sem_wait(sem_t *sem); }
-	SYS_SEM_TRYWAIT            = 272 // { int sem_trywait(sem_t *sem); }
-	SYS_SEM_POST               = 273 // { int sem_post(sem_t *sem); }
-	SYS_SEM_GETVALUE           = 274 // { int sem_getvalue(sem_t *sem, int *sval); }
-	SYS_SEM_INIT               = 275 // { int sem_init(sem_t *sem, int phsared, u_int value); }
-	SYS_SEM_DESTROY            = 276 // { int sem_destroy(sem_t *sem); }
-	SYS_OPEN_EXTENDED          = 277 // { int open_extended(user_addr_t path, int flags, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
-	SYS_UMASK_EXTENDED         = 278 // { int umask_extended(int newmask, user_addr_t xsecurity) NO_SYSCALL_STUB; }
-	SYS_STAT_EXTENDED          = 279 // { int stat_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
-	SYS_LSTAT_EXTENDED         = 280 // { int lstat_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
-	SYS_FSTAT_EXTENDED         = 281 // { int fstat_extended(int fd, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
-	SYS_CHMOD_EXTENDED         = 282 // { int chmod_extended(user_addr_t path, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
-	SYS_FCHMOD_EXTENDED        = 283 // { int fchmod_extended(int fd, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
-	SYS_ACCESS_EXTENDED        = 284 // { int access_extended(user_addr_t entries, size_t size, user_addr_t results, uid_t uid) NO_SYSCALL_STUB; }
-	SYS_SETTID                 = 285 // { int settid(uid_t uid, gid_t gid) NO_SYSCALL_STUB; }
-	SYS_GETTID                 = 286 // { int gettid(uid_t *uidp, gid_t *gidp) NO_SYSCALL_STUB; }
-	SYS_SETSGROUPS             = 287 // { int setsgroups(int setlen, user_addr_t guidset) NO_SYSCALL_STUB; }
-	SYS_GETSGROUPS             = 288 // { int getsgroups(user_addr_t setlen, user_addr_t guidset) NO_SYSCALL_STUB; }
-	SYS_SETWGROUPS             = 289 // { int setwgroups(int setlen, user_addr_t guidset) NO_SYSCALL_STUB; }
-	SYS_GETWGROUPS             = 290 // { int getwgroups(user_addr_t setlen, user_addr_t guidset) NO_SYSCALL_STUB; }
-	SYS_MKFIFO_EXTENDED        = 291 // { int mkfifo_extended(user_addr_t path, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
-	SYS_MKDIR_EXTENDED         = 292 // { int mkdir_extended(user_addr_t path, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
-	SYS_IDENTITYSVC            = 293 // { int identitysvc(int opcode, user_addr_t message) NO_SYSCALL_STUB; }
-	SYS_SHARED_REGION_CHECK_NP = 294 // { int shared_region_check_np(uint64_t *start_address) NO_SYSCALL_STUB; }
-	SYS_SHARED_REGION_MAP_NP   = 295 // { int shared_region_map_np(int fd, uint32_t count, const struct shared_file_mapping_np *mappings) NO_SYSCALL_STUB; }
-	// SYS_NOSYS = 296;  // { int nosys(void); } { old load_shared_file }
-	// SYS_NOSYS = 297;  // { int nosys(void); } { old reset_shared_file }
-	// SYS_NOSYS = 298;  // { int nosys(void); } { old new_system_shared_regions }
-	// SYS_ENOSYS = 299;  // { int enosys(void); } { old shared_region_map_file_np }
-	// SYS_ENOSYS = 300;  // { int enosys(void); } { old shared_region_make_private_np }
-	SYS___PTHREAD_MUTEX_DESTROY  = 301 // { int __pthread_mutex_destroy(int mutexid); }
-	SYS___PTHREAD_MUTEX_INIT     = 302 // { int __pthread_mutex_init(user_addr_t  mutex, user_addr_t attr); }
-	SYS___PTHREAD_MUTEX_LOCK     = 303 // { int __pthread_mutex_lock(int mutexid); }
-	SYS___PTHREAD_MUTEX_TRYLOCK  = 304 // { int __pthread_mutex_trylock(int mutexid); }
-	SYS___PTHREAD_MUTEX_UNLOCK   = 305 // { int __pthread_mutex_unlock(int mutexid); }
-	SYS___PTHREAD_COND_INIT      = 306 // { int __pthread_cond_init(user_addr_t cond, user_addr_t attr); }
-	SYS___PTHREAD_COND_DESTROY   = 307 // { int __pthread_cond_destroy(int condid); }
-	SYS___PTHREAD_COND_BROADCAST = 308 // { int __pthread_cond_broadcast(int condid); }
-	SYS___PTHREAD_COND_SIGNAL    = 309 // { int __pthread_cond_signal(int condid); }
-	SYS_GETSID                   = 310 // { int getsid(pid_t pid); }
-	SYS_SETTID_WITH_PID          = 311 // { int settid_with_pid(pid_t pid, int assume) NO_SYSCALL_STUB; }
-	SYS___PTHREAD_COND_TIMEDWAIT = 312 // { int __pthread_cond_timedwait(int condid, int mutexid, user_addr_t abstime); }
-	SYS_AIO_FSYNC                = 313 // { int aio_fsync(int op, user_addr_t aiocbp); }
-	SYS_AIO_RETURN               = 314 // { user_ssize_t aio_return(user_addr_t aiocbp); }
-	SYS_AIO_SUSPEND              = 315 // { int aio_suspend(user_addr_t aiocblist, int nent, user_addr_t timeoutp); }
-	SYS_AIO_CANCEL               = 316 // { int aio_cancel(int fd, user_addr_t aiocbp); }
-	SYS_AIO_ERROR                = 317 // { int aio_error(user_addr_t aiocbp); }
-	SYS_AIO_READ                 = 318 // { int aio_read(user_addr_t aiocbp); }
-	SYS_AIO_WRITE                = 319 // { int aio_write(user_addr_t aiocbp); }
-	SYS_LIO_LISTIO               = 320 // { int lio_listio(int mode, user_addr_t aiocblist, int nent, user_addr_t sigp); }
-	SYS___PTHREAD_COND_WAIT      = 321 // { int __pthread_cond_wait(int condid, int mutexid); }
-	SYS_IOPOLICYSYS              = 322 // { int iopolicysys(int cmd, void *arg) NO_SYSCALL_STUB; }
-	// SYS_NOSYS = 323;  // { int nosys(void); }
-	SYS_MLOCKALL   = 324 // { int mlockall(int how); }
-	SYS_MUNLOCKALL = 325 // { int munlockall(int how); }
-	// SYS_NOSYS = 326;  // { int nosys(void); }
-	SYS_ISSETUGID              = 327 // { int issetugid(void); }
-	SYS___PTHREAD_KILL         = 328 // { int __pthread_kill(int thread_port, int sig); }
-	SYS___PTHREAD_SIGMASK      = 329 // { int __pthread_sigmask(int how, user_addr_t set, user_addr_t oset); }
-	SYS___SIGWAIT              = 330 // { int __sigwait(user_addr_t set, user_addr_t sig); }
-	SYS___DISABLE_THREADSIGNAL = 331 // { int __disable_threadsignal(int value); }
-	SYS___PTHREAD_MARKCANCEL   = 332 // { int __pthread_markcancel(int thread_port); }
-	SYS___PTHREAD_CANCELED     = 333 // { int __pthread_canceled(int  action); }
-	SYS___SEMWAIT_SIGNAL       = 334 // { int __semwait_signal(int cond_sem, int mutex_sem, int timeout, int relative, time_t tv_sec, int32_t tv_nsec); }
-	// SYS_NOSYS = 335;  // { int nosys(void); }   { old utrace }
-	SYS_PROC_INFO = 336 // { int proc_info(int32_t callnum,int32_t pid,uint32_t flavor, uint64_t arg,user_addr_t buffer,int32_t buffersize) NO_SYSCALL_STUB; }
-	SYS_SENDFILE  = 337 // { int sendfile(int fd, int s, off_t offset, off_t *nbytes, struct sf_hdtr *hdtr, int flags); }
-	// SYS_NOSYS = 337;  // { int nosys(void); }
-	SYS_STAT64           = 338 // { int stat64(user_addr_t path, user_addr_t ub); }
-	SYS_FSTAT64          = 339 // { int fstat64(int fd, user_addr_t ub); }
-	SYS_LSTAT64          = 340 // { int lstat64(user_addr_t path, user_addr_t ub); }
-	SYS_STAT64_EXTENDED  = 341 // { int stat64_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
-	SYS_LSTAT64_EXTENDED = 342 // { int lstat64_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
-	SYS_FSTAT64_EXTENDED = 343 // { int fstat64_extended(int fd, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
-	SYS_GETDIRENTRIES64  = 344 // { user_ssize_t getdirentries64(int fd, void *buf, user_size_t bufsize, off_t *position) NO_SYSCALL_STUB; }
-	SYS_STATFS64         = 345 // { int statfs64(char *path, struct statfs64 *buf); }
-	SYS_FSTATFS64        = 346 // { int fstatfs64(int fd, struct statfs64 *buf); }
-	SYS_GETFSSTAT64      = 347 // { int getfsstat64(user_addr_t buf, int bufsize, int flags); }
-	SYS___PTHREAD_CHDIR  = 348 // { int __pthread_chdir(user_addr_t path); }
-	SYS___PTHREAD_FCHDIR = 349 // { int __pthread_fchdir(int fd); }
-	SYS_AUDIT            = 350 // { int audit(void *record, int length); }
-	SYS_AUDITON          = 351 // { int auditon(int cmd, void *data, int length); }
-	// SYS_NOSYS = 352;  // { int nosys(void); }
-	SYS_GETAUID       = 353 // { int getauid(au_id_t *auid); }
-	SYS_SETAUID       = 354 // { int setauid(au_id_t *auid); }
-	SYS_GETAUDIT      = 355 // { int getaudit(struct auditinfo *auditinfo); }
-	SYS_SETAUDIT      = 356 // { int setaudit(struct auditinfo *auditinfo); }
-	SYS_GETAUDIT_ADDR = 357 // { int getaudit_addr(struct auditinfo_addr *auditinfo_addr, int length); }
-	SYS_SETAUDIT_ADDR = 358 // { int setaudit_addr(struct auditinfo_addr *auditinfo_addr, int length); }
-	SYS_AUDITCTL      = 359 // { int auditctl(char *path); }
-	// SYS_NOSYS = 350;  // { int nosys(void); }
-	// SYS_NOSYS = 351;  // { int nosys(void); }
-	// SYS_NOSYS = 352;  // { int nosys(void); }
-	// SYS_NOSYS = 353;  // { int nosys(void); }
-	// SYS_NOSYS = 354;  // { int nosys(void); }
-	// SYS_NOSYS = 355;  // { int nosys(void); }
-	// SYS_NOSYS = 356;  // { int nosys(void); }
-	// SYS_NOSYS = 357;  // { int nosys(void); }
-	// SYS_NOSYS = 358;  // { int nosys(void); }
-	// SYS_NOSYS = 359;  // { int nosys(void); }
-	SYS_BSDTHREAD_CREATE    = 360 // { user_addr_t bsdthread_create(user_addr_t func, user_addr_t func_arg, user_addr_t stack, user_addr_t pthread, uint32_t flags) NO_SYSCALL_STUB; }
-	SYS_BSDTHREAD_TERMINATE = 361 // { int bsdthread_terminate(user_addr_t stackaddr, size_t freesize, uint32_t port, uint32_t sem) NO_SYSCALL_STUB; }
-	SYS_KQUEUE              = 362 // { int kqueue(void); }
-	SYS_KEVENT              = 363 // { int kevent(int fd, const struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout); }
-	SYS_LCHOWN              = 364 // { int lchown(user_addr_t path, uid_t owner, gid_t group); }
-	SYS_STACK_SNAPSHOT      = 365 // { int stack_snapshot(pid_t pid, user_addr_t tracebuf, uint32_t tracebuf_size, uint32_t options) NO_SYSCALL_STUB; }
-	SYS_BSDTHREAD_REGISTER  = 366 // { int bsdthread_register(user_addr_t threadstart, user_addr_t wqthread, int pthsize) NO_SYSCALL_STUB; }
-	SYS_WORKQ_OPEN          = 367 // { int workq_open(void) NO_SYSCALL_STUB; }
-	SYS_WORKQ_OPS           = 368 // { int workq_ops(int options, user_addr_t item, int prio) NO_SYSCALL_STUB; }
-	// SYS_NOSYS = 369;  // { int nosys(void); }
-	// SYS_NOSYS = 370;  // { int nosys(void); }
-	// SYS_NOSYS = 371;  // { int nosys(void); }
-	// SYS_NOSYS = 372;  // { int nosys(void); }
-	// SYS_NOSYS = 373;  // { int nosys(void); }
-	// SYS_NOSYS = 374;  // { int nosys(void); }
-	// SYS_NOSYS = 375;  // { int nosys(void); }
-	// SYS_NOSYS = 376;  // { int nosys(void); }
-	// SYS_NOSYS = 377;  // { int nosys(void); }
-	// SYS_NOSYS = 378;  // { int nosys(void); }
-	// SYS_NOSYS = 379;  // { int nosys(void); }
-	SYS___MAC_EXECVE      = 380 // { int __mac_execve(char *fname, char **argp, char **envp, struct mac *mac_p); }
-	SYS___MAC_SYSCALL     = 381 // { int __mac_syscall(char *policy, int call, user_addr_t arg); }
-	SYS___MAC_GET_FILE    = 382 // { int __mac_get_file(char *path_p, struct mac *mac_p); }
-	SYS___MAC_SET_FILE    = 383 // { int __mac_set_file(char *path_p, struct mac *mac_p); }
-	SYS___MAC_GET_LINK    = 384 // { int __mac_get_link(char *path_p, struct mac *mac_p); }
-	SYS___MAC_SET_LINK    = 385 // { int __mac_set_link(char *path_p, struct mac *mac_p); }
-	SYS___MAC_GET_PROC    = 386 // { int __mac_get_proc(struct mac *mac_p); }
-	SYS___MAC_SET_PROC    = 387 // { int __mac_set_proc(struct mac *mac_p); }
-	SYS___MAC_GET_FD      = 388 // { int __mac_get_fd(int fd, struct mac *mac_p); }
-	SYS___MAC_SET_FD      = 389 // { int __mac_set_fd(int fd, struct mac *mac_p); }
-	SYS___MAC_GET_PID     = 390 // { int __mac_get_pid(pid_t pid, struct mac *mac_p); }
-	SYS___MAC_GET_LCID    = 391 // { int __mac_get_lcid(pid_t lcid, struct mac *mac_p); }
-	SYS___MAC_GET_LCTX    = 392 // { int __mac_get_lctx(struct mac *mac_p); }
-	SYS___MAC_SET_LCTX    = 393 // { int __mac_set_lctx(struct mac *mac_p); }
-	SYS_SETLCID           = 394 // { int setlcid(pid_t pid, pid_t lcid) NO_SYSCALL_STUB; }
-	SYS_GETLCID           = 395 // { int getlcid(pid_t pid) NO_SYSCALL_STUB; }
-	SYS_READ_NOCANCEL     = 396 // { user_ssize_t read_nocancel(int fd, user_addr_t cbuf, user_size_t nbyte) NO_SYSCALL_STUB; }
-	SYS_WRITE_NOCANCEL    = 397 // { user_ssize_t write_nocancel(int fd, user_addr_t cbuf, user_size_t nbyte) NO_SYSCALL_STUB; }
-	SYS_OPEN_NOCANCEL     = 398 // { int open_nocancel(user_addr_t path, int flags, int mode) NO_SYSCALL_STUB; }
-	SYS_CLOSE_NOCANCEL    = 399 // { int close_nocancel(int fd) NO_SYSCALL_STUB; }
-	SYS_WAIT4_NOCANCEL    = 400 // { int wait4_nocancel(int pid, user_addr_t status, int options, user_addr_t rusage) NO_SYSCALL_STUB; }
-	SYS_RECVMSG_NOCANCEL  = 401 // { int recvmsg_nocancel(int s, struct msghdr *msg, int flags) NO_SYSCALL_STUB; }
-	SYS_SENDMSG_NOCANCEL  = 402 // { int sendmsg_nocancel(int s, caddr_t msg, int flags) NO_SYSCALL_STUB; }
-	SYS_RECVFROM_NOCANCEL = 403 // { int recvfrom_nocancel(int s, void *buf, size_t len, int flags, struct sockaddr *from, int *fromlenaddr) NO_SYSCALL_STUB; }
-	SYS_ACCEPT_NOCANCEL   = 404 // { int accept_nocancel(int s, caddr_t name, socklen_t	*anamelen) NO_SYSCALL_STUB; }
-	// SYS_NOSYS = 401;  // { int nosys(void); }
-	// SYS_NOSYS = 402;  // { int nosys(void); }
-	// SYS_NOSYS = 403;  // { int nosys(void); }
-	// SYS_NOSYS = 404;  // { int nosys(void); }
-	SYS_MSYNC_NOCANCEL   = 405 // { int msync_nocancel(caddr_t addr, size_t len, int flags) NO_SYSCALL_STUB; }
-	SYS_FCNTL_NOCANCEL   = 406 // { int fcntl_nocancel(int fd, int cmd, long arg) NO_SYSCALL_STUB; }
-	SYS_SELECT_NOCANCEL  = 407 // { int select_nocancel(int nd, u_int32_t *in, u_int32_t *ou, u_int32_t *ex, struct timeval *tv) NO_SYSCALL_STUB; }
-	SYS_FSYNC_NOCANCEL   = 408 // { int fsync_nocancel(int fd) NO_SYSCALL_STUB; }
-	SYS_CONNECT_NOCANCEL = 409 // { int connect_nocancel(int s, caddr_t name, socklen_t namelen) NO_SYSCALL_STUB; }
-	// SYS_NOSYS = 409;  // { int nosys(void); }
-	SYS_SIGSUSPEND_NOCANCEL = 410 // { int sigsuspend_nocancel(sigset_t mask) NO_SYSCALL_STUB; }
-	SYS_READV_NOCANCEL      = 411 // { user_ssize_t readv_nocancel(int fd, struct iovec *iovp, u_int iovcnt) NO_SYSCALL_STUB; }
-	SYS_WRITEV_NOCANCEL     = 412 // { user_ssize_t writev_nocancel(int fd, struct iovec *iovp, u_int iovcnt) NO_SYSCALL_STUB; }
-	SYS_SENDTO_NOCANCEL     = 413 // { int sendto_nocancel(int s, caddr_t buf, size_t len, int flags, caddr_t to, socklen_t tolen) NO_SYSCALL_STUB; }
-	// SYS_NOSYS = 413;  // { int nosys(void); }
-	SYS_PREAD_NOCANCEL  = 414 // { user_ssize_t pread_nocancel(int fd, user_addr_t buf, user_size_t nbyte, off_t offset) NO_SYSCALL_STUB; }
-	SYS_PWRITE_NOCANCEL = 415 // { user_ssize_t pwrite_nocancel(int fd, user_addr_t buf, user_size_t nbyte, off_t offset) NO_SYSCALL_STUB; }
-	SYS_WAITID_NOCANCEL = 416 // { int waitid_nocancel(idtype_t idtype, id_t id, siginfo_t *infop, int options) NO_SYSCALL_STUB; }
-	SYS_POLL_NOCANCEL   = 417 // { int poll_nocancel(struct pollfd *fds, u_int nfds, int timeout) NO_SYSCALL_STUB; }
-	SYS_MSGSND_NOCANCEL = 418 // { int msgsnd_nocancel(int msqid, void *msgp, size_t msgsz, int msgflg) NO_SYSCALL_STUB; }
-	SYS_MSGRCV_NOCANCEL = 419 // { user_ssize_t msgrcv_nocancel(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg) NO_SYSCALL_STUB; }
-	// SYS_NOSYS = 418;  // { int nosys(void); }
-	// SYS_NOSYS = 419;  // { int nosys(void); }
-	SYS_SEM_WAIT_NOCANCEL         = 420 // { int sem_wait_nocancel(sem_t *sem) NO_SYSCALL_STUB; }
-	SYS_AIO_SUSPEND_NOCANCEL      = 421 // { int aio_suspend_nocancel(user_addr_t aiocblist, int nent, user_addr_t timeoutp) NO_SYSCALL_STUB; }
-	SYS___SIGWAIT_NOCANCEL        = 422 // { int __sigwait_nocancel(user_addr_t set, user_addr_t sig) NO_SYSCALL_STUB; }
-	SYS___SEMWAIT_SIGNAL_NOCANCEL = 423 // { int __semwait_signal_nocancel(int cond_sem, int mutex_sem, int timeout, int relative, time_t tv_sec, int32_t tv_nsec) NO_SYSCALL_STUB; }
-	SYS___MAC_MOUNT               = 424 // { int __mac_mount(char *type, char *path, int flags, caddr_t data, struct mac *mac_p); }
-	SYS___MAC_GET_MOUNT           = 425 // { int __mac_get_mount(char *path, struct mac *mac_p); }
-	SYS___MAC_GETFSSTAT           = 426 // { int __mac_getfsstat(user_addr_t buf, int bufsize, user_addr_t mac, int macsize, int flags); }
+	SYS_SYSCALL                       = 0
+	SYS_EXIT                          = 1
+	SYS_FORK                          = 2
+	SYS_READ                          = 3
+	SYS_WRITE                         = 4
+	SYS_OPEN                          = 5
+	SYS_CLOSE                         = 6
+	SYS_WAIT4                         = 7
+	SYS_LINK                          = 9
+	SYS_UNLINK                        = 10
+	SYS_CHDIR                         = 12
+	SYS_FCHDIR                        = 13
+	SYS_MKNOD                         = 14
+	SYS_CHMOD                         = 15
+	SYS_CHOWN                         = 16
+	SYS_GETFSSTAT                     = 18
+	SYS_GETPID                        = 20
+	SYS_SETUID                        = 23
+	SYS_GETUID                        = 24
+	SYS_GETEUID                       = 25
+	SYS_PTRACE                        = 26
+	SYS_RECVMSG                       = 27
+	SYS_SENDMSG                       = 28
+	SYS_RECVFROM                      = 29
+	SYS_ACCEPT                        = 30
+	SYS_GETPEERNAME                   = 31
+	SYS_GETSOCKNAME                   = 32
+	SYS_ACCESS                        = 33
+	SYS_CHFLAGS                       = 34
+	SYS_FCHFLAGS                      = 35
+	SYS_SYNC                          = 36
+	SYS_KILL                          = 37
+	SYS_GETPPID                       = 39
+	SYS_DUP                           = 41
+	SYS_PIPE                          = 42
+	SYS_GETEGID                       = 43
+	SYS_PROFIL                        = 44
+	SYS_SIGACTION                     = 46
+	SYS_GETGID                        = 47
+	SYS_SIGPROCMASK                   = 48
+	SYS_GETLOGIN                      = 49
+	SYS_SETLOGIN                      = 50
+	SYS_ACCT                          = 51
+	SYS_SIGPENDING                    = 52
+	SYS_SIGALTSTACK                   = 53
+	SYS_IOCTL                         = 54
+	SYS_REBOOT                        = 55
+	SYS_REVOKE                        = 56
+	SYS_SYMLINK                       = 57
+	SYS_READLINK                      = 58
+	SYS_EXECVE                        = 59
+	SYS_UMASK                         = 60
+	SYS_CHROOT                        = 61
+	SYS_MSYNC                         = 65
+	SYS_VFORK                         = 66
+	SYS_MUNMAP                        = 73
+	SYS_MPROTECT                      = 74
+	SYS_MADVISE                       = 75
+	SYS_MINCORE                       = 78
+	SYS_GETGROUPS                     = 79
+	SYS_SETGROUPS                     = 80
+	SYS_GETPGRP                       = 81
+	SYS_SETPGID                       = 82
+	SYS_SETITIMER                     = 83
+	SYS_SWAPON                        = 85
+	SYS_GETITIMER                     = 86
+	SYS_GETDTABLESIZE                 = 89
+	SYS_DUP2                          = 90
+	SYS_FCNTL                         = 92
+	SYS_SELECT                        = 93
+	SYS_FSYNC                         = 95
+	SYS_SETPRIORITY                   = 96
+	SYS_SOCKET                        = 97
+	SYS_CONNECT                       = 98
+	SYS_GETPRIORITY                   = 100
+	SYS_BIND                          = 104
+	SYS_SETSOCKOPT                    = 105
+	SYS_LISTEN                        = 106
+	SYS_SIGSUSPEND                    = 111
+	SYS_GETTIMEOFDAY                  = 116
+	SYS_GETRUSAGE                     = 117
+	SYS_GETSOCKOPT                    = 118
+	SYS_READV                         = 120
+	SYS_WRITEV                        = 121
+	SYS_SETTIMEOFDAY                  = 122
+	SYS_FCHOWN                        = 123
+	SYS_FCHMOD                        = 124
+	SYS_SETREUID                      = 126
+	SYS_SETREGID                      = 127
+	SYS_RENAME                        = 128
+	SYS_FLOCK                         = 131
+	SYS_MKFIFO                        = 132
+	SYS_SENDTO                        = 133
+	SYS_SHUTDOWN                      = 134
+	SYS_SOCKETPAIR                    = 135
+	SYS_MKDIR                         = 136
+	SYS_RMDIR                         = 137
+	SYS_UTIMES                        = 138
+	SYS_FUTIMES                       = 139
+	SYS_ADJTIME                       = 140
+	SYS_GETHOSTUUID                   = 142
+	SYS_SETSID                        = 147
+	SYS_GETPGID                       = 151
+	SYS_SETPRIVEXEC                   = 152
+	SYS_PREAD                         = 153
+	SYS_PWRITE                        = 154
+	SYS_NFSSVC                        = 155
+	SYS_STATFS                        = 157
+	SYS_FSTATFS                       = 158
+	SYS_UNMOUNT                       = 159
+	SYS_GETFH                         = 161
+	SYS_QUOTACTL                      = 165
+	SYS_MOUNT                         = 167
+	SYS_CSOPS                         = 169
+	SYS_WAITID                        = 173
+	SYS_ADD_PROFIL                    = 176
+	SYS_KDEBUG_TRACE                  = 180
+	SYS_SETGID                        = 181
+	SYS_SETEGID                       = 182
+	SYS_SETEUID                       = 183
+	SYS_SIGRETURN                     = 184
+	SYS_CHUD                          = 185
+	SYS_FDATASYNC                     = 187
+	SYS_STAT                          = 188
+	SYS_FSTAT                         = 189
+	SYS_LSTAT                         = 190
+	SYS_PATHCONF                      = 191
+	SYS_FPATHCONF                     = 192
+	SYS_GETRLIMIT                     = 194
+	SYS_SETRLIMIT                     = 195
+	SYS_GETDIRENTRIES                 = 196
+	SYS_MMAP                          = 197
+	SYS_LSEEK                         = 199
+	SYS_TRUNCATE                      = 200
+	SYS_FTRUNCATE                     = 201
+	SYS___SYSCTL                      = 202
+	SYS_MLOCK                         = 203
+	SYS_MUNLOCK                       = 204
+	SYS_UNDELETE                      = 205
+	SYS_ATSOCKET                      = 206
+	SYS_ATGETMSG                      = 207
+	SYS_ATPUTMSG                      = 208
+	SYS_ATPSNDREQ                     = 209
+	SYS_ATPSNDRSP                     = 210
+	SYS_ATPGETREQ                     = 211
+	SYS_ATPGETRSP                     = 212
+	SYS_MKCOMPLEX                     = 216
+	SYS_STATV                         = 217
+	SYS_LSTATV                        = 218
+	SYS_FSTATV                        = 219
+	SYS_GETATTRLIST                   = 220
+	SYS_SETATTRLIST                   = 221
+	SYS_GETDIRENTRIESATTR             = 222
+	SYS_EXCHANGEDATA                  = 223
+	SYS_SEARCHFS                      = 225
+	SYS_DELETE                        = 226
+	SYS_COPYFILE                      = 227
+	SYS_FGETATTRLIST                  = 228
+	SYS_FSETATTRLIST                  = 229
+	SYS_POLL                          = 230
+	SYS_WATCHEVENT                    = 231
+	SYS_WAITEVENT                     = 232
+	SYS_MODWATCH                      = 233
+	SYS_GETXATTR                      = 234
+	SYS_FGETXATTR                     = 235
+	SYS_SETXATTR                      = 236
+	SYS_FSETXATTR                     = 237
+	SYS_REMOVEXATTR                   = 238
+	SYS_FREMOVEXATTR                  = 239
+	SYS_LISTXATTR                     = 240
+	SYS_FLISTXATTR                    = 241
+	SYS_FSCTL                         = 242
+	SYS_INITGROUPS                    = 243
+	SYS_POSIX_SPAWN                   = 244
+	SYS_FFSCTL                        = 245
+	SYS_NFSCLNT                       = 247
+	SYS_FHOPEN                        = 248
+	SYS_MINHERIT                      = 250
+	SYS_SEMSYS                        = 251
+	SYS_MSGSYS                        = 252
+	SYS_SHMSYS                        = 253
+	SYS_SEMCTL                        = 254
+	SYS_SEMGET                        = 255
+	SYS_SEMOP                         = 256
+	SYS_MSGCTL                        = 258
+	SYS_MSGGET                        = 259
+	SYS_MSGSND                        = 260
+	SYS_MSGRCV                        = 261
+	SYS_SHMAT                         = 262
+	SYS_SHMCTL                        = 263
+	SYS_SHMDT                         = 264
+	SYS_SHMGET                        = 265
+	SYS_SHM_OPEN                      = 266
+	SYS_SHM_UNLINK                    = 267
+	SYS_SEM_OPEN                      = 268
+	SYS_SEM_CLOSE                     = 269
+	SYS_SEM_UNLINK                    = 270
+	SYS_SEM_WAIT                      = 271
+	SYS_SEM_TRYWAIT                   = 272
+	SYS_SEM_POST                      = 273
+	SYS_SEM_GETVALUE                  = 274
+	SYS_SEM_INIT                      = 275
+	SYS_SEM_DESTROY                   = 276
+	SYS_OPEN_EXTENDED                 = 277
+	SYS_UMASK_EXTENDED                = 278
+	SYS_STAT_EXTENDED                 = 279
+	SYS_LSTAT_EXTENDED                = 280
+	SYS_FSTAT_EXTENDED                = 281
+	SYS_CHMOD_EXTENDED                = 282
+	SYS_FCHMOD_EXTENDED               = 283
+	SYS_ACCESS_EXTENDED               = 284
+	SYS_SETTID                        = 285
+	SYS_GETTID                        = 286
+	SYS_SETSGROUPS                    = 287
+	SYS_GETSGROUPS                    = 288
+	SYS_SETWGROUPS                    = 289
+	SYS_GETWGROUPS                    = 290
+	SYS_MKFIFO_EXTENDED               = 291
+	SYS_MKDIR_EXTENDED                = 292
+	SYS_IDENTITYSVC                   = 293
+	SYS_SHARED_REGION_CHECK_NP        = 294
+	SYS_SHARED_REGION_MAP_NP          = 295
+	SYS_VM_PRESSURE_MONITOR           = 296
+	SYS_PSYNCH_RW_LONGRDLOCK          = 297
+	SYS_PSYNCH_RW_YIELDWRLOCK         = 298
+	SYS_PSYNCH_RW_DOWNGRADE           = 299
+	SYS_PSYNCH_RW_UPGRADE             = 300
+	SYS_PSYNCH_MUTEXWAIT              = 301
+	SYS_PSYNCH_MUTEXDROP              = 302
+	SYS_PSYNCH_CVBROAD                = 303
+	SYS_PSYNCH_CVSIGNAL               = 304
+	SYS_PSYNCH_CVWAIT                 = 305
+	SYS_PSYNCH_RW_RDLOCK              = 306
+	SYS_PSYNCH_RW_WRLOCK              = 307
+	SYS_PSYNCH_RW_UNLOCK              = 308
+	SYS_PSYNCH_RW_UNLOCK2             = 309
+	SYS_GETSID                        = 310
+	SYS_SETTID_WITH_PID               = 311
+	SYS_AIO_FSYNC                     = 313
+	SYS_AIO_RETURN                    = 314
+	SYS_AIO_SUSPEND                   = 315
+	SYS_AIO_CANCEL                    = 316
+	SYS_AIO_ERROR                     = 317
+	SYS_AIO_READ                      = 318
+	SYS_AIO_WRITE                     = 319
+	SYS_LIO_LISTIO                    = 320
+	SYS_IOPOLICYSYS                   = 322
+	SYS_MLOCKALL                      = 324
+	SYS_MUNLOCKALL                    = 325
+	SYS_ISSETUGID                     = 327
+	SYS___PTHREAD_KILL                = 328
+	SYS___PTHREAD_SIGMASK             = 329
+	SYS___SIGWAIT                     = 330
+	SYS___DISABLE_THREADSIGNAL        = 331
+	SYS___PTHREAD_MARKCANCEL          = 332
+	SYS___PTHREAD_CANCELED            = 333
+	SYS___SEMWAIT_SIGNAL              = 334
+	SYS_PROC_INFO                     = 336
+	SYS_SENDFILE                      = 337
+	SYS_STAT64                        = 338
+	SYS_FSTAT64                       = 339
+	SYS_LSTAT64                       = 340
+	SYS_STAT64_EXTENDED               = 341
+	SYS_LSTAT64_EXTENDED              = 342
+	SYS_FSTAT64_EXTENDED              = 343
+	SYS_GETDIRENTRIES64               = 344
+	SYS_STATFS64                      = 345
+	SYS_FSTATFS64                     = 346
+	SYS_GETFSSTAT64                   = 347
+	SYS___PTHREAD_CHDIR               = 348
+	SYS___PTHREAD_FCHDIR              = 349
+	SYS_AUDIT                         = 350
+	SYS_AUDITON                       = 351
+	SYS_GETAUID                       = 353
+	SYS_SETAUID                       = 354
+	SYS_GETAUDIT                      = 355
+	SYS_SETAUDIT                      = 356
+	SYS_GETAUDIT_ADDR                 = 357
+	SYS_SETAUDIT_ADDR                 = 358
+	SYS_AUDITCTL                      = 359
+	SYS_BSDTHREAD_CREATE              = 360
+	SYS_BSDTHREAD_TERMINATE           = 361
+	SYS_KQUEUE                        = 362
+	SYS_KEVENT                        = 363
+	SYS_LCHOWN                        = 364
+	SYS_STACK_SNAPSHOT                = 365
+	SYS_BSDTHREAD_REGISTER            = 366
+	SYS_WORKQ_OPEN                    = 367
+	SYS_WORKQ_KERNRETURN              = 368
+	SYS_KEVENT64                      = 369
+	SYS___OLD_SEMWAIT_SIGNAL          = 370
+	SYS___OLD_SEMWAIT_SIGNAL_NOCANCEL = 371
+	SYS_THREAD_SELFID                 = 372
+	SYS___MAC_EXECVE                  = 380
+	SYS___MAC_SYSCALL                 = 381
+	SYS___MAC_GET_FILE                = 382
+	SYS___MAC_SET_FILE                = 383
+	SYS___MAC_GET_LINK                = 384
+	SYS___MAC_SET_LINK                = 385
+	SYS___MAC_GET_PROC                = 386
+	SYS___MAC_SET_PROC                = 387
+	SYS___MAC_GET_FD                  = 388
+	SYS___MAC_SET_FD                  = 389
+	SYS___MAC_GET_PID                 = 390
+	SYS___MAC_GET_LCID                = 391
+	SYS___MAC_GET_LCTX                = 392
+	SYS___MAC_SET_LCTX                = 393
+	SYS_SETLCID                       = 394
+	SYS_GETLCID                       = 395
+	SYS_READ_NOCANCEL                 = 396
+	SYS_WRITE_NOCANCEL                = 397
+	SYS_OPEN_NOCANCEL                 = 398
+	SYS_CLOSE_NOCANCEL                = 399
+	SYS_WAIT4_NOCANCEL                = 400
+	SYS_RECVMSG_NOCANCEL              = 401
+	SYS_SENDMSG_NOCANCEL              = 402
+	SYS_RECVFROM_NOCANCEL             = 403
+	SYS_ACCEPT_NOCANCEL               = 404
+	SYS_MSYNC_NOCANCEL                = 405
+	SYS_FCNTL_NOCANCEL                = 406
+	SYS_SELECT_NOCANCEL               = 407
+	SYS_FSYNC_NOCANCEL                = 408
+	SYS_CONNECT_NOCANCEL              = 409
+	SYS_SIGSUSPEND_NOCANCEL           = 410
+	SYS_READV_NOCANCEL                = 411
+	SYS_WRITEV_NOCANCEL               = 412
+	SYS_SENDTO_NOCANCEL               = 413
+	SYS_PREAD_NOCANCEL                = 414
+	SYS_PWRITE_NOCANCEL               = 415
+	SYS_WAITID_NOCANCEL               = 416
+	SYS_POLL_NOCANCEL                 = 417
+	SYS_MSGSND_NOCANCEL               = 418
+	SYS_MSGRCV_NOCANCEL               = 419
+	SYS_SEM_WAIT_NOCANCEL             = 420
+	SYS_AIO_SUSPEND_NOCANCEL          = 421
+	SYS___SIGWAIT_NOCANCEL            = 422
+	SYS___SEMWAIT_SIGNAL_NOCANCEL     = 423
+	SYS___MAC_MOUNT                   = 424
+	SYS___MAC_GET_MOUNT               = 425
+	SYS___MAC_GETFSSTAT               = 426
+	SYS_FSGETPATH                     = 427
+	SYS_AUDIT_SESSION_SELF            = 428
+	SYS_AUDIT_SESSION_JOIN            = 429
+	SYS_PID_SUSPEND                   = 430
+	SYS_PID_RESUME                    = 431
+	SYS_FILEPORT_MAKEPORT             = 432
+	SYS_FILEPORT_MAKEFD               = 433
+	SYS_MAXSYSCALL                    = 434
 )
