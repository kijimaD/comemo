commit a840bf871e005d948ba6442948997eb3ef2e3c7f
Author: Russ Cox <rsc@golang.org>
Date:   Wed Apr 27 09:02:53 2022 -0400

    [dev.boringcrypto] crypto/internal/boring: add GC-aware cache
    
    In the original BoringCrypto port, ecdsa and rsa's public and private
    keys added a 'boring unsafe.Pointer' field to cache the BoringCrypto
    form of the key. This led to problems with code that “knew” the layout
    of those structs and in particular that they had no unexported fields.
    
    In response, as an awful kludge, I changed the compiler to pretend
    that field did not exist when laying out reflect data. Because we want
    to merge BoringCrypto in the main tree, we need a different solution.
    
    The different solution is this CL's boring.Cache, which is a
    concurrent, GC-aware map from unsafe.Pointer to unsafe.Pointer (if
    generics were farther along we could use them nicely here, but I am
    afraid of breaking tools that aren't ready to see generics in the
    standard library yet).
    
    More complex approaches are possible, but a simple, fixed-size hash
    table is easy to make concurrent and should be fine.
    
    For #51940.
    
    Change-Id: I44062a8defbd87b705a787cffc64c6a9d0132785
    Reviewed-on: https://go-review.googlesource.com/c/go/+/395882
    Run-TryBot: Russ Cox <rsc@golang.org>
    TryBot-Result: Gopher Robot <gobot@golang.org>
    Reviewed-by: Cherry Mui <cherryyz@google.com>

 src/crypto/internal/boring/cache.go      | 138 +++++++++++++++++++++++++++++++
 src/crypto/internal/boring/cache_test.go |  85 +++++++++++++++++++
 src/runtime/mgc.go                       |   6 ++
 src/runtime/mgc_boring.go                |  14 ++++
 4 files changed, 243 insertions(+)
