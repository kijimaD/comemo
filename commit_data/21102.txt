commit 3dcc62e1dad3c62a1c8df1b6f613f93521124764
Merge: 18ed947ee1 c99616fc67
Author: Russ Cox <rsc@golang.org>
Date:   Fri Nov 14 11:37:54 2014 -0500

    [dev.garbage] all: merge default (f38460037b72) into dev.garbage
    
    This is the revision that dev.cc is branched from.
    
    LGTM=austin
    R=austin
    CC=golang-codereviews
    https://golang.org/cl/169590043

 .hgtags                              |    1 +
 AUTHORS                              |    4 +
 CONTRIBUTORS                         |    4 +
 doc/articles/go_command.html         |   13 +-
 doc/cmd.html                         |    6 +-
 doc/code.html                        |  183 +-
 doc/contribute.html                  |    2 +-
 doc/go1.4.html                       |  343 ++-
 doc/go1compat.html                   |    6 +-
 doc/go_faq.html                      |    4 +-
 doc/install-source.html              |    6 +-
 lib/codereview/codereview.py         |    3 +-
 misc/benchcmp                        |    2 +-
 misc/cgo/test/cgo_test.go            |    1 +
 misc/cgo/test/issue6997_linux.go     |    2 +-
 misc/cgo/test/issue9026.go           |    9 +
 misc/cgo/test/issue9026/issue9026.go |   36 +
 misc/makerelease/makerelease.go      |   10 +-
 misc/pprof                           | 5100 ----------------------------------
 src/bufio/scan.go                    |   13 +
 src/bufio/scan_test.go               |   67 +
 src/cmd/5g/reg.c                     |    2 +-
 src/cmd/cgo/gcc.go                   |   24 +-
 src/cmd/dist/build.c                 |    9 -
 src/cmd/gc/lex.c                     |    4 +-
 src/cmd/go/build.go                  |   10 +-
 src/cmd/go/doc.go                    |    6 +-
 src/cmd/go/generate.go               |    2 +-
 src/cmd/go/pkg.go                    |   24 +-
 src/cmd/go/test.bash                 |   18 +-
 src/cmd/go/tool.go                   |    2 +-
 src/cmd/go/vet.go                    |    2 +-
 src/cmd/internal/objfile/disasm.go   |  248 ++
 src/cmd/internal/objfile/elf.go      |   25 +
 src/cmd/internal/objfile/goobj.go    |   12 +
 src/cmd/internal/objfile/macho.go    |   24 +
 src/cmd/internal/objfile/objfile.go  |   24 +-
 src/cmd/internal/objfile/pe.go       |   31 +
 src/cmd/internal/objfile/plan9obj.go |   22 +
 src/cmd/objdump/Makefile             |   10 -
 src/cmd/objdump/elf.go               |   65 -
 src/cmd/objdump/macho.go             |   77 -
 src/cmd/objdump/main.go              |  467 +---
 src/cmd/objdump/objdump_test.go      |  100 +-
 src/cmd/objdump/pe.go                |   99 -
 src/cmd/objdump/plan9obj.go          |   70 -
 src/cmd/pprof/README                 |    8 +
 src/cmd/pprof/doc.go                 |   12 +
 src/cmd/pprof/pprof.go               |   41 +-
 src/compress/lzw/reader.go           |    2 +-
 src/crypto/crypto.go                 |   12 +-
 src/database/sql/fakedb_test.go      |    2 +
 src/database/sql/sql.go              |    5 +
 src/debug/goobj/read_test.go         |    2 +-
 src/net/http/cookiejar/jar.go        |    2 +-
 src/net/http/main_test.go            |    2 +-
 src/net/http/serve_test.go           |    1 +
 src/os/exec/exec_test.go             |    2 +-
 src/os/file_plan9.go                 |    3 +-
 src/os/file_unix.go                  |    1 +
 src/os/file_windows.go               |    1 +
 src/runtime/asm_386.s                |    6 +
 src/runtime/asm_amd64.s              |    6 +
 src/runtime/asm_amd64p32.s           |    6 +
 src/runtime/asm_arm.s                |    6 +
 src/runtime/cgo/dragonfly.c          |    2 +
 src/runtime/cgo/freebsd.c            |    2 +
 src/runtime/cgo/netbsd.c             |    2 +
 src/runtime/cgo/openbsd.c            |    2 +
 src/runtime/crash_cgo_test.go        |   29 +-
 src/runtime/extern.go                |   11 +-
 src/runtime/heapdump.c               |    6 +-
 src/runtime/malloc.go                |    6 +-
 src/runtime/mgc0.c                   |    4 +-
 src/runtime/mprof.go                 |   45 +-
 src/runtime/os_android.c             |    2 +-
 src/runtime/os_plan9_386.c           |    2 +-
 src/runtime/os_plan9_amd64.c         |    2 +-
 src/runtime/os_windows_386.c         |    2 +-
 src/runtime/os_windows_amd64.c       |    2 +-
 src/runtime/proc.c                   |   23 +-
 src/runtime/runtime.h                |    8 +-
 src/runtime/sema.go                  |    1 +
 src/runtime/signal_386.c             |    2 +-
 src/runtime/signal_amd64x.c          |    2 +-
 src/runtime/signal_arm.c             |    2 +-
 src/runtime/stack.c                  |    2 +-
 src/runtime/stubs.go                 |   28 +
 src/runtime/traceback.go             |   53 +-
 src/sync/atomic/value.go             |    2 +-
 test/fixedbugs/issue7690.go          |   49 +
 test/linkx.go                        |   14 +-
 test/linkx_run.go                    |   33 +
 test/run.go                          |    2 -
 test/sinit.go                        |   77 +-
 test/sinit_run.go                    |   40 +
 96 files changed, 1478 insertions(+), 6291 deletions(-)

diff --cc src/runtime/malloc.go
index a18e77421e,8cf1c3d342..fab8cf2695
--- a/src/runtime/malloc.go
+++ b/src/runtime/malloc.go
@@@ -358,40 -344,9 +358,40 @@@ marked
  	return x
  }
  
 +func loadPtrMask(typ *_type) []uint8 {
 +	var ptrmask *uint8
 +	nptr := (uintptr(typ.size) + ptrSize - 1) / ptrSize
 +	if typ.kind&kindGCProg != 0 {
 +		masksize := nptr
 +		if masksize%2 != 0 {
 +			masksize *= 2 // repeated
 +		}
 +		masksize = masksize * pointersPerByte / 8 // 4 bits per word
 +		masksize++                                // unroll flag in the beginning
 +		if masksize > maxGCMask && typ.gc[1] != 0 {
 +			// write barriers have not been updated to deal with this case yet.
 +			gothrow("maxGCMask too small for now")
 +		}
 +		ptrmask = (*uint8)(unsafe.Pointer(uintptr(typ.gc[0])))
 +		// Check whether the program is already unrolled
 +		// by checking if the unroll flag byte is set
 +		maskword := uintptr(atomicloadp(unsafe.Pointer(ptrmask)))
 +		if *(*uint8)(unsafe.Pointer(&maskword)) == 0 {
 +			mp := acquirem()
 +			mp.ptrarg[0] = unsafe.Pointer(typ)
 +			onM(unrollgcprog_m)
 +			releasem(mp)
 +		}
 +		ptrmask = (*uint8)(add(unsafe.Pointer(ptrmask), 1)) // skip the unroll flag byte
 +	} else {
 +		ptrmask = (*uint8)(unsafe.Pointer(typ.gc[0])) // pointer to unrolled mask
 +	}
 +	return (*[1 << 30]byte)(unsafe.Pointer(ptrmask))[:(nptr+1)/2]
 +}
 +
  // implementation of new builtin
  func newobject(typ *_type) unsafe.Pointer {
- 	flags := 0
+ 	flags := uint32(0)
  	if typ.kind&kindNoPointers != 0 {
  		flags |= flagNoScan
  	}
