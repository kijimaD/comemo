commit af9ab6b2e852c4177db06cf91edc7a869b4cb93e
Author: Cherry Zhang <cherryyz@google.com>
Date:   Sat Apr 18 23:08:36 2020 -0400

    cmd/link: check for reflect.Value.MethodByName explicitly
    
    Currently we only check for reflect.Value.Method. And
    reflect.Value.MethodByName is covered since it calls
    reflect.Value.Method internally. But it is brittle to rely on
    implementation detail of the reflect package. Check for
    MethodByName explicitly.
    
    Change-Id: Ifa8920e997524003dade03abc4fb3c4e64723643
    Reviewed-on: https://go-review.googlesource.com/c/go/+/228881
    Run-TryBot: Cherry Zhang <cherryyz@google.com>
    Reviewed-by: Brad Fitzpatrick <bradfitz@golang.org>
    Reviewed-by: Matthew Dempsky <mdempsky@google.com>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
---
 src/cmd/link/internal/ld/deadcode.go  | 5 +++--
 src/cmd/link/internal/ld/deadcode2.go | 3 ++-
 2 files changed, 5 insertions(+), 3 deletions(-)

diff --git a/src/cmd/link/internal/ld/deadcode.go b/src/cmd/link/internal/ld/deadcode.go
index b5bc508356..ae676935fc 100644
--- a/src/cmd/link/internal/ld/deadcode.go
+++ b/src/cmd/link/internal/ld/deadcode.go
@@ -22,7 +22,8 @@ import (
 //
 //	1. direct call
 //	2. through a reachable interface type
-//	3. reflect.Value.Method, or reflect.Type.Method
+//	3. reflect.Value.Method (or MethodByName), or reflect.Type.Method
+//	   (or MethodByName)
 //
 // The first case is handled by the flood fill, a directly called method
 // is marked as reachable.
@@ -33,7 +34,7 @@ import (
 // as reachable. This is extremely conservative, but easy and correct.
 //
 // The third case is handled by looking to see if any of:
-//	- reflect.Value.Method is reachable
+//	- reflect.Value.Method or MethodByName is reachable
 // 	- reflect.Type.Method or MethodByName is called (through the
 // 	  REFLECTMETHOD attribute marked by the compiler).
 // If any of these happen, all bets are off and all exported methods
diff --git a/src/cmd/link/internal/ld/deadcode2.go b/src/cmd/link/internal/ld/deadcode2.go
index 1aa65aee78..93df626c21 100644
--- a/src/cmd/link/internal/ld/deadcode2.go
+++ b/src/cmd/link/internal/ld/deadcode2.go
@@ -220,6 +220,7 @@ func deadcode2(ctxt *Link) {
 	d.flood()
 
 	methSym := ldr.Lookup("reflect.Value.Method", sym.SymVerABIInternal)
+	methByNameSym := ldr.Lookup("reflect.Value.MethodByName", sym.SymVerABIInternal)
 	if ctxt.DynlinkingGo() {
 		// Exported methods may satisfy interfaces we don't know
 		// about yet when dynamically linking.
@@ -230,7 +231,7 @@ func deadcode2(ctxt *Link) {
 		// Methods might be called via reflection. Give up on
 		// static analysis, mark all exported methods of
 		// all reachable types as reachable.
-		d.reflectSeen = d.reflectSeen || (methSym != 0 && ldr.AttrReachable(methSym))
+		d.reflectSeen = d.reflectSeen || (methSym != 0 && ldr.AttrReachable(methSym)) || (methByNameSym != 0 && ldr.AttrReachable(methByNameSym))
 
 		// Mark all methods that could satisfy a discovered
 		// interface as reachable. We recheck old marked interfaces
