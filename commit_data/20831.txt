commit aae5c57e38c7c09f2009308803d4bdf1f39a3fd6
Merge: 0226351d27 343d113610
Author: Russ Cox <rsc@golang.org>
Date:   Thu Oct 16 15:00:08 2014 -0400

    all: merge default branch into dev.garbage
    
    hg was unable to create a CL on the code review server for this,
    so I am submitting the merge by hand.
    The only manual edits are in mgc0.c, to reapply the
    removal of cached/ncached to the new code.

 AUTHORS                                       |   1 +
 CONTRIBUTORS                                  |   2 +
 doc/go1.4.txt                                 |   4 +-
 doc/go1compat.html                            |  10 +-
 include/link.h                                |   2 +
 misc/cgo/test/callback_c_gc.c                 |  10 +
 misc/cgo/test/callback_c_gccgo.c              |   7 +
 misc/cgo/test/cgo_test.go                     |   2 +
 misc/cgo/test/issue8517.go                    |  13 +
 misc/cgo/test/issue8517_windows.c             |  24 ++
 misc/cgo/test/issue8517_windows.go            |  45 ++++
 misc/cgo/test/issue8811.c                     |   8 +
 misc/cgo/test/issue8811.go                    |  22 ++
 misc/cgo/test/issue8828.go                    |  16 ++
 misc/cgo/test/issue8828/issue8828.c           |   7 +
 misc/cgo/test/issue8828/trivial.go            |   8 +
 src/cmd/5a/lex.c                              |   1 +
 src/cmd/5c/reg.c                              |   9 +-
 src/cmd/6a/lex.c                              |   1 +
 src/cmd/6c/reg.c                              |  14 +-
 src/cmd/8a/lex.c                              |   1 +
 src/cmd/8c/reg.c                              |   9 +-
 src/cmd/cc/godefs.c                           |   6 +-
 src/cmd/gc/builtin.c                          |   5 +-
 src/cmd/gc/dcl.c                              |  14 +
 src/cmd/gc/order.c                            |   6 +-
 src/cmd/gc/pgen.c                             |   2 +
 src/cmd/gc/racewalk.c                         |   7 +-
 src/cmd/gc/reflect.c                          |  25 +-
 src/cmd/gc/runtime.go                         |   7 +
 src/cmd/gc/sinit.c                            |   2 +-
 src/cmd/gc/walk.c                             |  32 ++-
 src/cmd/go/build.go                           |   2 +-
 src/cmd/go/doc.go                             |  39 +--
 src/cmd/go/list.go                            |  39 +--
 src/cmd/go/pkg.go                             |  22 +-
 src/cmd/go/test.bash                          |  14 +
 src/cmd/go/testdata/src/vetpkg/a_test.go      |   1 +
 src/cmd/go/testdata/src/vetpkg/b.go           |   7 +
 src/cmd/go/vet.go                             |  23 +-
 src/cmd/ld/decodesym.c                        |   5 +-
 src/cmd/ld/dwarf.c                            |  14 +-
 src/cmd/ld/ldelf.c                            |   2 +
 src/cmd/ld/ldpe.c                             |  26 +-
 src/cmd/ld/macho.c                            |   3 +-
 src/crypto/x509/x509.go                       |  17 +-
 src/crypto/x509/x509_test.go                  |  63 +++++
 src/database/sql/fakedb_test.go               |  22 ++
 src/database/sql/sql.go                       |  11 +
 src/debug/elf/file.go                         |   8 +
 src/encoding/asn1/asn1.go                     |   4 +-
 src/encoding/asn1/asn1_test.go                |  48 ++++
 src/encoding/gob/encode.go                    |  10 +-
 src/encoding/json/decode.go                   |  40 ++-
 src/encoding/json/decode_test.go              |  21 +-
 src/encoding/json/encode.go                   |   2 +
 src/go/build/build.go                         |  27 +-
 src/go/build/build_test.go                    |  18 ++
 src/go/build/doc.go                           |  10 +-
 src/go/build/testdata/empty/dummy             |   0
 src/go/build/testdata/multi/file.go           |   5 +
 src/go/build/testdata/multi/file_appengine.go |   5 +
 src/liblink/data.c                            |   2 +
 src/math/big/int.go                           |  19 +-
 src/math/big/int_test.go                      |  36 ++-
 src/math/big/rat.go                           |   7 +-
 src/math/big/rat_test.go                      |   1 +
 src/net/fd_windows.go                         |  12 +
 src/net/http/client.go                        |  28 +-
 src/net/http/client_test.go                   |  37 +++
 src/net/http/export_test.go                   |   5 +
 src/net/http/response_test.go                 |  28 ++
 src/net/http/serve_test.go                    |  97 +++++++
 src/net/http/server.go                        |  32 ++-
 src/net/http/transport.go                     |  11 +-
 src/net/http/transport_test.go                |  33 +++
 src/net/rpc/client.go                         |  12 +-
 src/net/rpc/client_test.go                    |  55 ++++
 src/net/udp_test.go                           |  41 +++
 src/net/url/url.go                            |  18 ++
 src/os/error_plan9.go                         |   3 +-
 src/os/exec/exec.go                           |  11 +-
 src/os/exec_unix.go                           |  14 +-
 src/os/exec_windows.go                        |   3 +
 src/os/os_test.go                             |  47 +++-
 src/os/path.go                                |   6 +-
 src/reflect/all_test.go                       |  83 +++++-
 src/reflect/makefunc.go                       |   6 +-
 src/reflect/type.go                           |  62 +++--
 src/reflect/value.go                          | 368 ++++++--------------------
 src/regexp/syntax/doc.go                      |  48 ++--
 src/runtime/asm_386.s                         |  75 +++---
 src/runtime/asm_amd64.s                       |  75 +++---
 src/runtime/asm_amd64p32.s                    |  80 +++---
 src/runtime/asm_arm.s                         |  73 +++--
 src/runtime/cgocallback.go                    |   3 +
 src/runtime/chan.go                           |  11 +-
 src/runtime/defs_windows.go                   |   4 +
 src/runtime/defs_windows_386.h                |   4 +
 src/runtime/defs_windows_amd64.h              |   4 +
 src/runtime/heapdump.c                        |  44 ++-
 src/runtime/malloc.go                         |   2 +-
 src/runtime/mgc0.c                            |  40 ++-
 src/runtime/mgc0.go                           |  21 ++
 src/runtime/mgc0.h                            |   2 +
 src/runtime/os_windows.c                      |  52 +++-
 src/runtime/os_windows_386.c                  |  84 +++---
 src/runtime/os_windows_amd64.c                |  97 ++++---
 src/runtime/panic.c                           |   4 +
 src/runtime/panic.go                          |  27 ++
 src/runtime/runtime.h                         |   5 +-
 src/runtime/stack.c                           |  39 ++-
 src/runtime/stubs.go                          |  30 +++
 src/runtime/sys_windows_386.s                 |  18 +-
 src/runtime/sys_windows_amd64.s               |  18 +-
 src/runtime/syscall_windows_test.go           |  39 +++
 src/runtime/type.h                            |   2 +-
 src/strings/strings.go                        |   9 +-
 src/syscall/syscall_windows.go                |   4 +-
 src/syscall/ztypes_windows.go                 |   1 +
 test/assign.go                                |  12 +
 test/fixedbugs/issue6703a.go                  |  16 ++
 test/fixedbugs/issue6703b.go                  |  16 ++
 test/fixedbugs/issue6703c.go                  |  18 ++
 test/fixedbugs/issue6703d.go                  |  18 ++
 test/fixedbugs/issue6703e.go                  |  18 ++
 test/fixedbugs/issue6703f.go                  |  18 ++
 test/fixedbugs/issue6703g.go                  |  20 ++
 test/fixedbugs/issue6703h.go                  |  20 ++
 test/fixedbugs/issue6703i.go                  |  20 ++
 test/fixedbugs/issue6703j.go                  |  20 ++
 test/fixedbugs/issue6703k.go                  |  21 ++
 test/fixedbugs/issue6703l.go                  |  21 ++
 test/fixedbugs/issue6703m.go                  |  25 ++
 test/fixedbugs/issue6703n.go                  |  25 ++
 test/fixedbugs/issue6703o.go                  |  23 ++
 test/fixedbugs/issue6703p.go                  |  23 ++
 test/fixedbugs/issue6703q.go                  |  28 ++
 test/fixedbugs/issue6703r.go                  |  28 ++
 test/fixedbugs/issue6703s.go                  |  18 ++
 test/fixedbugs/issue6703t.go                  |  18 ++
 test/fixedbugs/issue6703u.go                  |  18 ++
 test/fixedbugs/issue6703v.go                  |  18 ++
 test/fixedbugs/issue6703w.go                  |  21 ++
 test/fixedbugs/issue6703x.go                  |  21 ++
 test/fixedbugs/issue6703y.go                  |  23 ++
 test/fixedbugs/issue6703z.go                  |  23 ++
 test/fixedbugs/issue8079.go                   |  11 +
 test/interface/explicit.go                    |   4 +-
 test/interface/fail.go                        |  14 -
 150 files changed, 2548 insertions(+), 853 deletions(-)

diff --cc src/reflect/type.go
index f099546d27,b92d524c3b..26328e74b9
--- a/src/reflect/type.go
+++ b/src/reflect/type.go
@@@ -1514,20 -1514,36 +1514,32 @@@ func (gc *gcProg) appendProg(t *rtype) 
  		gc.size += t.size
  		return
  	}
- 	nptr := t.size / unsafe.Sizeof(uintptr(0))
- 	var prog []byte
- 	if t.kind&kindGCProg != 0 {
- 		// Ensure that the runtime has unrolled GC program.
- 		// TODO(rsc): Do not allocate.
- 		unsafe_New(t)
- 		// The program is stored in t.gc[0], skip unroll flag.
- 		prog = (*[1 << 30]byte)(unsafe.Pointer(t.gc[0]))[1:]
- 	} else {
- 		// The mask is embed directly in t.gc.
- 		prog = (*[1 << 30]byte)(unsafe.Pointer(&t.gc[0]))[:]
- 	}
- 	for i := uintptr(0); i < nptr; i++ {
- 		gc.appendWord(extractGCWord(prog, i))
+ 	switch t.Kind() {
+ 	default:
+ 		panic("reflect: non-pointer type marked as having pointers")
+ 	case Ptr, UnsafePointer, Chan, Func, Map:
+ 		gc.appendWord(bitsPointer)
+ 	case Slice:
+ 		gc.appendWord(bitsPointer)
+ 		gc.appendWord(bitsScalar)
+ 		gc.appendWord(bitsScalar)
+ 	case String:
+ 		gc.appendWord(bitsPointer)
+ 		gc.appendWord(bitsScalar)
+ 	case Array:
+ 		c := t.Len()
+ 		e := t.Elem().common()
+ 		for i := 0; i < c; i++ {
+ 			gc.appendProg(e)
+ 		}
+ 	case Interface:
 -		gc.appendWord(bitsMultiWord)
 -		if t.NumMethod() == 0 {
 -			gc.appendWord(bitsEface)
 -		} else {
 -			gc.appendWord(bitsIface)
 -		}
++		gc.appendWord(bitsPointer)
++		gc.appendWord(bitsPointer)
+ 	case Struct:
+ 		c := t.NumField()
+ 		for i := 0; i < c; i++ {
+ 			gc.appendProg(t.Field(i).Type.common())
+ 		}
  	}
  }
  
diff --cc src/runtime/mgc0.c
index dabd38a608,05cabe7085..8620f47af0
--- a/src/runtime/mgc0.c
+++ b/src/runtime/mgc0.c
@@@ -225,251 -162,47 +225,247 @@@ struct WorkData 
  };
  WorkData runtime·work;
  
 -// Is _cgo_allocate linked into the binary?
 +// Is address b in the known heap. If it doesn't have a valid gcmap
 +// returns false. For example pointers into stacks will return false.
  static bool
 -have_cgo_allocate(void)
 +inheap(byte *b)
  {
 -	extern	byte	go·weak·runtime·_cgo_allocate_internal[1];
 -	return go·weak·runtime·_cgo_allocate_internal != nil;
 +	MSpan *s;
 +	pageID k;
 +	uintptr x;
 +
 +	if(b == nil || b < runtime·mheap.arena_start || b >= runtime·mheap.arena_used)
 +		return false;
 +	// Not a beginning of a block, consult span table to find the block beginning.
 +	k = (uintptr)b>>PageShift;
 +	x = k;
 +	x -= (uintptr)runtime·mheap.arena_start>>PageShift;
 +	s = runtime·mheap.spans[x];
 +	if(s == nil || k < s->start || b >= s->limit || s->state != MSpanInUse)
 +		return false;
 +	return true;
  }
  
 -// scanblock scans a block of n bytes starting at pointer b for references
 -// to other objects, scanning any it finds recursively until there are no
 -// unscanned objects left.  Instead of using an explicit recursion, it keeps
 -// a work list in the Workbuf* structures and loops in the main function
 -// body.  Keeping an explicit work list is easier on the stack allocator and
 -// more efficient.
 +// Given an address in the heap return the relevant byte from the gcmap. This routine
 +// can be used on addresses to the start of an object or to the interior of the an object.
  static void
 -scanblock(byte *b, uintptr n, byte *ptrmask)
 +slottombits(byte *obj, Markbits *mbits)
  {
 -	byte *obj, *obj0, *p, *arena_start, *arena_used, **wp, *scanbuf[8], *ptrbitp, *bitp;
 -	uintptr i, j, nobj, size, idx, x, off, scanbufpos, bits, xbits, shift;
 -	Workbuf *wbuf;
 -	Iface *iface;
 -	Eface *eface;
 -	Type *typ;
 +	uintptr off;
 +
 +	off = (uintptr*)((uintptr)obj&~(PtrSize-1)) - (uintptr*)runtime·mheap.arena_start;
 +	mbits->bitp = runtime·mheap.arena_start - off/wordsPerBitmapByte - 1;
 +	mbits->shift = (off % wordsPerBitmapByte) * gcBits;
 +	mbits->xbits = *mbits->bitp;
 +	mbits->bits = (mbits->xbits >> mbits->shift) & bitMask;
 +}
 +
 +// b is a pointer into the heap.
 +// Find the start of the object refered to by b.
 +// Set mbits to the associated bits from the bit map.
 +static byte*
 +objectstart(byte *b, Markbits *mbits)
 +{
 +	byte *obj, *p;
  	MSpan *s;
  	pageID k;
 -	bool keepworking;
 +	uintptr x, size, idx;
  
 -	// Cache memory arena parameters in local vars.
 -	arena_start = runtime·mheap.arena_start;
 -	arena_used = runtime·mheap.arena_used;
 +	obj = (byte*)((uintptr)b&~(PtrSize-1));
 +	for(;;) {
 +		slottombits(obj, mbits);
 +		if(mbits->bits&bitBoundary == bitBoundary)
 +			break;
 +		
 +		// Not a beginning of a block, consult span table to find the block beginning.
 +		k = (uintptr)obj>>PageShift;
 +		x = k;
 +		x -= (uintptr)runtime·mheap.arena_start>>PageShift;
 +		s = runtime·mheap.spans[x];
 +		if(s == nil || k < s->start || obj >= s->limit || s->state != MSpanInUse){
 +			if(s->state == MSpanStack)
 +				break; // This is legit.
 +
 +			// The following is catching some bugs left over from
 +			// us not being rigerous about what data structures are
 +			// hold valid pointers and different parts of the system
 +			// considering different structures as roots. For example
 +			// if there is a pointer into a stack that is left in 
 +			// a global data structure but that part of the runtime knows that 
 +			// those structures will be reinitialized before they are 
 +			// reused. Unfortunately the GC believes these roots are valid.
 +			// Typically a stack gets moved and only the structures that part of
 +			// the system knows are alive are updated. The span is freed
 +			// after the stack copy and the pointer is still alive. This 
 +			// check is catching that bug but for now we will not throw, 
 +			// instead we will simply break out of this routine and depend
 +			// on the caller to recognize that this pointer is not a valid 
 +			// heap pointer. I leave the code that catches the bug so that once
 +			// resolved we can turn this check back on and throw.
 +
 +			//runtime·printf("Runtime: Span weird: obj=%p, k=%p", obj, k);
 +			//if (s == nil)
 +			//	runtime·printf(" s=nil\n");
 +			//else
 +			//	runtime·printf(" s->start=%p s->limit=%p, s->state=%d\n", s->start*PageSize, s->limit, s->state);
 +			//runtime·throw("Blowup on weird span");
 +			break; // We are not in a real block throw??
 +		}
 +		p = (byte*)((uintptr)s->start<<PageShift);
 +		if(s->sizeclass != 0) {
 +			size = s->elemsize;
 +			idx = ((byte*)obj - p)/size;
 +			p = p+idx*size;
 +		}
 +		if(p == obj) {
 +			runtime·printf("runtime: failed to find block beginning for %p s=%p s->limit=%p\n",
 +				       p, s->start*PageSize, s->limit);
 +			runtime·throw("failed to find block beginning");
 +		}
 +		obj = p;
 +	}
 +	// if size(obj.firstfield) < PtrSize, the &obj.secondfield could map to the boundary bit
 +	// Clear any low bits to get to the start of the object.
 +	// greyobject depends on this.
 +	return obj;
 +}
  
 -	wbuf = getempty(nil);
 -	nobj = wbuf->nobj;
 -	wp = &wbuf->obj[nobj];
 -	keepworking = b == nil;
 -	scanbufpos = 0;
 -	for(i = 0; i < nelem(scanbuf); i++)
 -		scanbuf[i] = nil;
 +// obj is the start of an object with mark mbits.
 +// If it isn't already marked, mark it and enqueue into workbuf.
 +// Return possibly new workbuf to use.
 +static Workbuf*
 +greyobject(byte *obj, Markbits *mbits, Workbuf *wbuf) 
 +{
 +	// obj should be start of allocation, and so must be at least pointer-aligned.
 +	if(((uintptr)obj & (PtrSize-1)) != 0)
 +		runtime·throw("greyobject: obj not pointer-aligned");
 +
 +	// If marked we have nothing to do.
 +	if((mbits->bits&bitMarked) != 0)
 +		return wbuf;
 +
 +	// Each byte of GC bitmap holds info for two words.
 +	// If the current object is larger than two words, or if the object is one word
 +	// but the object it shares the byte with is already marked,
 +	// then all the possible concurrent updates are trying to set the same bit,
 +	// so we can use a non-atomic update.
 +	if((mbits->xbits&(bitMask|(bitMask<<gcBits))) != (bitBoundary|(bitBoundary<<gcBits)) || runtime·work.nproc == 1)
 +		*mbits->bitp = mbits->xbits | (bitMarked<<mbits->shift);
 +	else
 +		runtime·atomicor8(mbits->bitp, bitMarked<<mbits->shift);
 +	
 +	if(((mbits->xbits>>(mbits->shift+2))&BitsMask) == BitsDead)
 +		return wbuf;  // noscan object
 +
 +	// Queue the obj for scanning. The PREFETCH(obj) logic has been removed but
 +	// seems like a nice optimization that can be added back in.
 +	// There needs to be time between the PREFETCH and the use.
 +	// Previously we put the obj in an 8 element buffer that is drained at a rate
 +	// to give the PREFETCH time to do its work.
 +	// Use of PREFETCHNTA might be more appropriate than PREFETCH
 +
 +	// If workbuf is full, obtain an empty one.
 +	if(wbuf->nobj >= nelem(wbuf->obj)) {
 +		wbuf = getempty(wbuf);
 +	}
 +
 +	wbuf->obj[wbuf->nobj] = obj;
 +	wbuf->nobj++;
 +	return wbuf;                    
 +}
  
 +// Scan the object b of size n, adding pointers to wbuf.
 +// Return possibly new wbuf to use.
 +// If ptrmask != nil, it specifies where pointers are in b.
 +// If ptrmask == nil, the GC bitmap should be consulted.
 +// In this case, n may be an overestimate of the size; the GC bitmap
 +// must also be used to make sure the scan stops at the end of b.
 +static Workbuf*
 +scanobject(byte *b, uintptr n, byte *ptrmask, Workbuf *wbuf)
 +{
- 	byte *obj, *arena_start, *arena_used, *ptrbitp, bits, cshift, cached;
- 	uintptr i;
- 	intptr ncached;
++	byte *obj, *arena_start, *arena_used, *ptrbitp;
++	uintptr i, j;
++	int32 bits;
 +	Markbits mbits;
 +
 +	arena_start = (byte*)runtime·mheap.arena_start;
 +	arena_used = runtime·mheap.arena_used;
  	ptrbitp = nil;
- 	cached = 0;
- 	ncached = 0;
  
 +	// Find bits of the beginning of the object.
 +	if(ptrmask == nil) {
 +		b = objectstart(b, &mbits);
 +		ptrbitp = mbits.bitp; //arena_start - off/wordsPerBitmapByte - 1;
- 		cshift = mbits.shift; //(off % wordsPerBitmapByte) * gcBits;
- 		cached = *ptrbitp >> cshift;
- 		cached &= ~bitBoundary;
- 		ncached = (8 - cshift)/gcBits;
 +	}
 +	for(i = 0; i < n; i += PtrSize) {
 +		// Find bits for this word.
 +		if(ptrmask != nil) {
 +			// dense mask (stack or data)
 +			bits = (ptrmask[(i/PtrSize)/4]>>(((i/PtrSize)%4)*BitsPerPointer))&BitsMask;
 +		} else {
 +			// Check if we have reached end of span.
 +			if((((uintptr)b+i)%PageSize) == 0 &&
 +				runtime·mheap.spans[(b-arena_start)>>PageShift] != runtime·mheap.spans[(b+i-arena_start)>>PageShift])
 +				break;
 +			// Consult GC bitmap.
- 			if(ncached <= 0) {
- 				// Refill cache.
- 				cached = *--ptrbitp;
- 				ncached = 2;
- 			}
- 			bits = cached;
- 			cached >>= gcBits;
- 			ncached--;
- 			
- 			if((bits&bitBoundary) != 0)
++			bits = *ptrbitp;
++			if(wordsPerBitmapByte != 2)
++				runtime·throw("alg doesn't work for wordsPerBitmapByte != 2");
++			j = ((uintptr)b+i)/PtrSize & 1;
++			bits >>= gcBits*j;
++			if(i == 0)
++				bits &= ~bitBoundary;
++			ptrbitp -= j;
++		
++			if((bits&bitBoundary) != 0 && i != 0)
 +				break; // reached beginning of the next object
 +			bits = (bits>>2)&BitsMask;
 +			if(bits == BitsDead)
 +				break; // reached no-scan part of the object
 +		} 
 +
- 		if(bits == BitsScalar || bits == BitsDead)
++		if(bits <= BitsScalar) // Bits Scalar || BitsDead
 +			continue;
- 		if(bits != BitsPointer)
++		if(bits != BitsPointer) {
++			runtime·printf("gc bits=%x\n", bits);
 +			runtime·throw("unexpected garbage collection bits");
++		}
 +
 +		obj = *(byte**)(b+i);
 +		// At this point we have extracted the next potential pointer.
 +		// Check if it points into heap.
 +		if(obj == nil || obj < arena_start || obj >= arena_used)
 +			continue;
 +		// Mark the object. return some important bits.
 +		// We we combine the following two rotines we don't have to pass mbits or obj around.
 +		obj = objectstart(obj, &mbits);
 +		wbuf = greyobject(obj, &mbits, wbuf);
 +	}
 +	return wbuf;
 +}
 +
 +// scanblock starts by scanning b as scanobject would.
 +// If the gcphase is GCscan, that's all scanblock does.
 +// Otherwise it traverses some fraction of the pointers it found in b, recursively.
 +// As a special case, scanblock(nil, 0, nil) means to scan previously queued work,
 +// stopping only when no work is left in the system.
 +static void
 +scanblock(byte *b, uintptr n, byte *ptrmask)
 +{
 +	Workbuf *wbuf;
 +	bool keepworking;
 +
 +	wbuf = getpartial();
 +	if(b != nil) {
 +		wbuf = scanobject(b, n, ptrmask, wbuf);
 +		if(runtime·gcphase == GCscan) {
 +			putpartial(wbuf);
 +			return;
 +		}
 +	}
 +
 +	keepworking = b == nil;
 +
  	// ptrmask can have 2 possible values:
  	// 1. nil - obtain pointer mask from GC bitmap.
  	// 2. pointer to a compact mask (for stacks and data).
