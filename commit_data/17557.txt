commit ab38e2a498f432fc33dc1f91815756cf2c56af72
Author: Russ Cox <rsc@golang.org>
Date:   Wed Sep 11 12:00:37 2013 -0400

    runtime: show m stack during crash on m stack
    
    The various throwing > 0 finish a change started
    in a previous CL, which sets throwing = -1 to mean
    "don't show the internals". That gets set during the
    "all goroutines are asleep - deadlock!" crash, and it
    should also be set during any other expected crash
    that does not indicate a problem within the runtime.
    
    Most runtime.throw do indicate a problem within the
    runtime, however, so we should be able to enumerate
    the ones that should be silent. The goroutine sleeping
    deadlock is the only one I can think of.
    
    Update #5139
    
    R=golang-dev, iant
    CC=golang-dev
    https://golang.org/cl/13662043
---
 src/pkg/runtime/panic.c         | 2 +-
 src/pkg/runtime/traceback_arm.c | 2 +-
 src/pkg/runtime/traceback_x86.c | 2 +-
 3 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/pkg/runtime/panic.c b/src/pkg/runtime/panic.c
index 4fbbed1071..c14d52016c 100644
--- a/src/pkg/runtime/panic.c
+++ b/src/pkg/runtime/panic.c
@@ -443,7 +443,7 @@ runtime·dopanic(int32 unused)
 			runtime·printf("\n");
 			runtime·goroutineheader(g);
 			runtime·traceback((uintptr)runtime·getcallerpc(&unused), (uintptr)runtime·getcallersp(&unused), 0, g);
-		} else if(t >= 2) {
+		} else if(t >= 2 || m->throwing > 0) {
 			runtime·printf("\nruntime stack:\n");
 			runtime·traceback((uintptr)runtime·getcallerpc(&unused), (uintptr)runtime·getcallersp(&unused), 0, g);
 		}
diff --git a/src/pkg/runtime/traceback_arm.c b/src/pkg/runtime/traceback_arm.c
index 74725ba4ca..02586f036b 100644
--- a/src/pkg/runtime/traceback_arm.c
+++ b/src/pkg/runtime/traceback_arm.c
@@ -153,7 +153,7 @@ runtime·gentraceback(uintptr pc0, uintptr sp0, uintptr lr0, G *gp, int32 skip,
 				runtime·printf("\t%S:%d", file, line);
 				if(frame.pc > f->entry)
 					runtime·printf(" +%p", (uintptr)(frame.pc - f->entry));
-				if(m->throwing && gp == m->curg)
+				if(m->throwing > 0 && gp == m->curg)
 					runtime·printf(" fp=%p", frame.fp);
 				runtime·printf("\n");
 				nprint++;
diff --git a/src/pkg/runtime/traceback_x86.c b/src/pkg/runtime/traceback_x86.c
index 78f8bd5aad..a18bb9a6a2 100644
--- a/src/pkg/runtime/traceback_x86.c
+++ b/src/pkg/runtime/traceback_x86.c
@@ -170,7 +170,7 @@ runtime·gentraceback(uintptr pc0, uintptr sp0, uintptr lr0, G *gp, int32 skip,
 				runtime·printf("\t%S:%d", file, line);
 				if(frame.pc > f->entry)
 					runtime·printf(" +%p", (uintptr)(frame.pc - f->entry));
-				if(m->throwing && gp == m->curg)
+				if(m->throwing > 0 && gp == m->curg)
 					runtime·printf(" fp=%p", frame.fp);
 				runtime·printf("\n");
 				nprint++;
