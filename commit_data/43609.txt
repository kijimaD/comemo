commit c144a94b267121a41da3fc0b5ce381641f41253e
Author: Than McIntosh <thanm@google.com>
Date:   Wed Apr 15 13:46:25 2020 -0400

    [dev.link] cmd/link/internal/loader: remove some unused types
    
    The types funcAllocInfo and funcInfoSym are no longer referenced.
    
    Fixes #38456.
    
    Change-Id: Icd32445f6027429f4a2781554d2086790ebe5daf
    Reviewed-on: https://go-review.googlesource.com/c/go/+/228318
    Run-TryBot: Than McIntosh <thanm@google.com>
    Reviewed-by: Jeremy Faller <jeremy@golang.org>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
---
 src/cmd/link/internal/loader/loader.go | 19 -------------------
 1 file changed, 19 deletions(-)

diff --git a/src/cmd/link/internal/loader/loader.go b/src/cmd/link/internal/loader/loader.go
index 3b77aa70e1..e996fc720d 100644
--- a/src/cmd/link/internal/loader/loader.go
+++ b/src/cmd/link/internal/loader/loader.go
@@ -2234,25 +2234,6 @@ func loadObjSyms(l *Loader, syms *sym.Symbols, r *oReader) int {
 	return nr
 }
 
-// funcInfoSym records the sym.Symbol for a function, along with a copy
-// of the corresponding goobj2.Sym and the index of its FuncInfo aux sym.
-// We use this to delay populating FuncInfo until we can batch-allocate
-// slices for their sub-objects.
-type funcInfoSym struct {
-	s    *sym.Symbol // sym.Symbol for a live function
-	osym *goobj2.Sym // object file symbol data for that function
-	isym int         // global symbol index of FuncInfo aux sym for func
-}
-
-// funcAllocInfo records totals/counts for all functions in an objfile;
-// used to help with bulk allocation of sym.Symbol sub-objects.
-type funcAllocInfo struct {
-	symPtr  uint32 // number of *sym.Symbol's needed in file slices
-	inlCall uint32 // number of sym.InlinedCall's needed in inltree slices
-	pcData  uint32 // number of sym.Pcdata's needed in pdata slices
-	fdOff   uint32 // number of int64's needed in all Funcdataoff slices
-}
-
 // cloneToExternal takes the existing object file symbol (symIdx)
 // and creates a new external symbol payload that is a clone with
 // respect to name, version, type, relocations, etc. The idea here
