commit cf9558c8ab9a09cffeea1020e62411338c790b2f
Author: Dave Cheney <dave@cheney.net>
Date:   Mon Oct 20 23:28:39 2014 +0000

    cmd/cgo: disable clang's integrated assembler
    
    Fixes #8348.
    
    Clang's internal assembler (introduced by default in clang 3.4) understands the .arch directive, but doesn't change the default value of -march. This causes the build to fail when we use BLX (armv5 and above) when clang is compiled for the default armv4t architecture (which appears to be the default on all the distros I've used).
    
    This is probably a clang bug, so work around it for the time being by disabling the integrated assembler when compiling the cgo assembly shim.
    
    This CL also includes a small change to ldelf.c which was required as clang 3.4 and above generate more weird symtab entries.
    
    LGTM=iant
    R=golang-codereviews, iant
    CC=golang-codereviews
    https://golang.org/cl/156430044
---
 src/cmd/cgo/gcc.go | 8 +++++++-
 src/cmd/ld/ldelf.c | 2 +-
 2 files changed, 8 insertions(+), 2 deletions(-)

diff --git a/src/cmd/cgo/gcc.go b/src/cmd/cgo/gcc.go
index d77d56c22a..e45839e8a4 100644
--- a/src/cmd/cgo/gcc.go
+++ b/src/cmd/cgo/gcc.go
@@ -745,7 +745,13 @@ func (p *Package) gccMachine() []string {
 	case "386":
 		return []string{"-m32"}
 	case "arm":
-		return []string{"-marm"} // not thumb
+		args := []string{"-marm"} // not thumb
+		if strings.Contains(p.gccBaseCmd()[0], "clang") {
+			// The clang integrated assembler understands the .arch directive
+			// but does not appear to honor it, so disable it. Issue 8348.
+			args = append(args, "-no-integrated-as")
+		}
+		return args
 	}
 	return nil
 }
diff --git a/src/cmd/ld/ldelf.c b/src/cmd/ld/ldelf.c
index 35f8b49856..b5d0819493 100644
--- a/src/cmd/ld/ldelf.c
+++ b/src/cmd/ld/ldelf.c
@@ -819,7 +819,7 @@ readsym(ElfObj *obj, int i, ElfSym *sym, int needSym)
 			}
 			break;
 		case ElfSymBindLocal:
-			if(!(thechar == '5' && (strcmp(sym->name, "$a") == 0 || strcmp(sym->name, "$d") == 0))) // binutils for arm generate these mapping symbols, ignore these
+			if(!(thechar == '5' && (strncmp(sym->name, "$a", 2) == 0 || strncmp(sym->name, "$d", 2) == 0))) // binutils for arm generate these mapping symbols, ignore these
 				if(needSym) {
 					// local names and hidden visiblity global names are unique
 					// and should only reference by its index, not name, so we
