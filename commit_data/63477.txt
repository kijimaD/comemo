commit c51f6c62576ab3088a981b9cef90e413ac99e333
Author: Robert Griesemer <gri@golang.org>
Date:   Mon Mar 18 15:14:54 2024 -0700

    go/types, types2: track gotypesalias non-default behavior
    
    Fixes #66216.
    
    Change-Id: I2750a744d0dcf636a00d388299e1f2f993e5ac26
    Reviewed-on: https://go-review.googlesource.com/c/go/+/572575
    LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>
    Reviewed-by: Robert Griesemer <gri@google.com>
    Reviewed-by: Alan Donovan <adonovan@google.com>
    Auto-Submit: Robert Griesemer <gri@google.com>
---
 src/cmd/compile/internal/types2/check.go      |  6 ++++++
 src/cmd/compile/internal/types2/check_test.go |  2 +-
 src/cmd/compile/internal/types2/decl.go       | 16 ++++++++++++++++
 src/go/types/check.go                         |  8 +++++++-
 src/go/types/check_test.go                    |  2 +-
 src/go/types/decl.go                          |  4 ++++
 src/internal/godebugs/table.go                |  2 +-
 src/runtime/metrics/doc.go                    |  4 ++++
 8 files changed, 40 insertions(+), 4 deletions(-)

diff --git a/src/cmd/compile/internal/types2/check.go b/src/cmd/compile/internal/types2/check.go
index cc723f2012..17d1577ee1 100644
--- a/src/cmd/compile/internal/types2/check.go
+++ b/src/cmd/compile/internal/types2/check.go
@@ -102,6 +102,12 @@ type Checker struct {
 	// If enableAlias is set, alias declarations produce an Alias type.
 	// Otherwise the alias information is only in the type name, which
 	// points directly to the actual (aliased) type.
+	// Starting with Go 1.23, enableAlias is set by default.
+	// Non-default behavior is tracked with gotypesalias.IncNonDefault()
+	// for each declaration of an alias type where enableAlias is not set.
+	//
+	// TODO(gri) Testing runs tests in both modes. Do we need to exclude
+	//           tracking of non-default behavior for tests?
 	enableAlias bool
 
 	conf *Config
diff --git a/src/cmd/compile/internal/types2/check_test.go b/src/cmd/compile/internal/types2/check_test.go
index 066218772e..f1b520d33c 100644
--- a/src/cmd/compile/internal/types2/check_test.go
+++ b/src/cmd/compile/internal/types2/check_test.go
@@ -122,7 +122,7 @@ func parseFlags(src []byte, flags *flag.FlagSet) error {
 //
 // If provided, opts may be used to mutate the Config before type-checking.
 func testFiles(t *testing.T, filenames []string, srcs [][]byte, colDelta uint, manual bool, opts ...func(*Config)) {
-	// Alias types are enabled by default
+	// Alias types are enabled by default.
 	testFilesImpl(t, filenames, srcs, colDelta, manual, opts...)
 	if !manual {
 		t.Setenv("GODEBUG", "gotypesalias=0")
diff --git a/src/cmd/compile/internal/types2/decl.go b/src/cmd/compile/internal/types2/decl.go
index 26ce49d87a..fff2da4953 100644
--- a/src/cmd/compile/internal/types2/decl.go
+++ b/src/cmd/compile/internal/types2/decl.go
@@ -532,6 +532,22 @@ func (check *Checker) typeDecl(obj *TypeName, tdecl *syntax.TypeDecl, def *TypeN
 			alias.fromRHS = rhs
 			Unalias(alias) // resolve alias.actual
 		} else {
+			// With Go1.23, the default behavior is to use Alias nodes,
+			// reflected by check.enableAlias. Signal non-default behavior
+			// by calling gotypesalias.IncNonDefault().
+			//
+			// Note: As of Go 1.23, Settings.IncNonDefault is not present
+			// in internal/godebug/godebug.go used during bootstrapping,
+			// only after the tool chain is built and recompiles itself.
+			// Check dynamically for the presence of IncNonDefault.
+			// (This is not an issue for go/types because it is not used
+			// during bootstrap.)
+			//
+			// TODO(gri) replace with direct call when we bootstrap with Go 1.20
+			if s, ok := any(gotypesalias).(interface{ IncNonDefault() }); ok {
+				s.IncNonDefault()
+			}
+
 			if !versionErr && tparam0 != nil {
 				check.error(tdecl, UnsupportedFeature, "generic type alias requires GODEBUG=gotypesalias=1 or unset")
 				versionErr = true
diff --git a/src/go/types/check.go b/src/go/types/check.go
index be990eabfe..c651e57fa9 100644
--- a/src/go/types/check.go
+++ b/src/go/types/check.go
@@ -102,9 +102,15 @@ type Checker struct {
 	// package information
 	// (initialized by NewChecker, valid for the life-time of checker)
 
-	// If EnableAlias is set, alias declarations produce an Alias type.
+	// If enableAlias is set, alias declarations produce an Alias type.
 	// Otherwise the alias information is only in the type name, which
 	// points directly to the actual (aliased) type.
+	// Starting with Go 1.23, enableAlias is set by default.
+	// Non-default behavior is tracked with gotypesalias.IncNonDefault()
+	// for each declaration of an alias type where enableAlias is not set.
+	//
+	// TODO(gri) Testing runs tests in both modes. Do we need to exclude
+	//           tracking of non-default behavior for tests?
 	enableAlias bool
 
 	conf *Config
diff --git a/src/go/types/check_test.go b/src/go/types/check_test.go
index 6ad7ef3a27..068507dade 100644
--- a/src/go/types/check_test.go
+++ b/src/go/types/check_test.go
@@ -134,7 +134,7 @@ func parseFlags(src []byte, flags *flag.FlagSet) error {
 //
 // If provided, opts may be used to mutate the Config before type-checking.
 func testFiles(t *testing.T, filenames []string, srcs [][]byte, manual bool, opts ...func(*Config)) {
-	// Alias types are enabled by default
+	// Alias types are enabled by default.
 	testFilesImpl(t, filenames, srcs, manual, opts...)
 	if !manual {
 		t.Setenv("GODEBUG", "gotypesalias=0")
diff --git a/src/go/types/decl.go b/src/go/types/decl.go
index 937163fc75..3dab94aa0f 100644
--- a/src/go/types/decl.go
+++ b/src/go/types/decl.go
@@ -607,6 +607,10 @@ func (check *Checker) typeDecl(obj *TypeName, tdecl *ast.TypeSpec, def *TypeName
 			alias.fromRHS = rhs
 			Unalias(alias) // resolve alias.actual
 		} else {
+			// With Go1.23, the default behavior is to use Alias nodes,
+			// reflected by check.enableAlias. Signal non-default behavior.
+			gotypesalias.IncNonDefault()
+
 			if !versionErr && tparam0 != nil {
 				check.error(tdecl, UnsupportedFeature, "generic type alias requires GODEBUG=gotypesalias=1 or unset")
 				versionErr = true
diff --git a/src/internal/godebugs/table.go b/src/internal/godebugs/table.go
index e9e043df4c..a95c8f2f94 100644
--- a/src/internal/godebugs/table.go
+++ b/src/internal/godebugs/table.go
@@ -30,7 +30,7 @@ var All = []Info{
 	{Name: "gocachehash", Package: "cmd/go"},
 	{Name: "gocachetest", Package: "cmd/go"},
 	{Name: "gocacheverify", Package: "cmd/go"},
-	{Name: "gotypesalias", Package: "go/types", Changed: 23, Old: "0", Opaque: true}, // bug #66216: remove Opaque
+	{Name: "gotypesalias", Package: "go/types", Changed: 23, Old: "0"},
 	{Name: "http2client", Package: "net/http"},
 	{Name: "http2debug", Package: "net/http", Opaque: true},
 	{Name: "http2server", Package: "net/http"},
diff --git a/src/runtime/metrics/doc.go b/src/runtime/metrics/doc.go
index deb993241d..fbbeb1a475 100644
--- a/src/runtime/metrics/doc.go
+++ b/src/runtime/metrics/doc.go
@@ -246,6 +246,10 @@ Below is the full list of supported metrics, ordered lexicographically.
 		The number of non-default behaviors executed by the cmd/go
 		package due to a non-default GODEBUG=gocacheverify=... setting.
 
+	/godebug/non-default-behavior/gotypesalias:events
+		The number of non-default behaviors executed by the go/types
+		package due to a non-default GODEBUG=gotypesalias=... setting.
+
 	/godebug/non-default-behavior/http2client:events
 		The number of non-default behaviors executed by the net/http
 		package due to a non-default GODEBUG=http2client=... setting.
