commit d26c607fe647efce17c061ab7f86506dd95eb314
Author: Rob Pike <r@golang.org>
Date:   Sun Feb 12 09:10:47 2012 +1100

    unsafe: Alignof and Offsetof now use the same style
    
    The easy part of issue 2968.
    
    R=golang-dev, gri
    CC=golang-dev
    https://golang.org/cl/5655059
---
 src/pkg/unsafe/unsafe.go | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/pkg/unsafe/unsafe.go b/src/pkg/unsafe/unsafe.go
index 4955c2f224..b743d9d39d 100644
--- a/src/pkg/unsafe/unsafe.go
+++ b/src/pkg/unsafe/unsafe.go
@@ -27,13 +27,13 @@ type Pointer *ArbitraryType
 func Sizeof(v ArbitraryType) uintptr
 
 // Offsetof returns the offset within the struct of the field represented by v,
-// which must be of the form struct_value.field.  In other words, it returns the
+// which must be of the form structValue.field.  In other words, it returns the
 // number of bytes between the start of the struct and the start of the field.
 func Offsetof(v ArbitraryType) uintptr
 
 // Alignof returns the alignment of the value v.  It is the maximum value m such
 // that the address of a variable with the type of v will always always be zero mod m.
-// If v is of the form obj.f, it returns the alignment of field f within struct object obj.
+// If v is of the form structValue.field, it returns the alignment of field f within struct object obj.
 func Alignof(v ArbitraryType) uintptr
 
 // Typeof returns the type of an interface value, a runtime.Type.
