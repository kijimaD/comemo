commit 8db19a496640db4c7c318007c82eaa5d65c85b93
Author: Leigh McCulloch <leighmcc@gmail.com>
Date:   Fri Nov 3 05:48:43 2017 +0000

    all: change github.com issue links to golang.org
    
    The go repository contains a mix of github.com/golang/go/issues/xxxxx
    and golang.org/issues/xxxxx URLs for references to issues in the issue
    tracker. We should use one for consistency, and golang.org is preferred
    in case the project moves the issue tracker in the future.
    
    This reasoning is taken from a comment Sam Whited left on a CL I
    recently opened: https://go-review.googlesource.com/c/go/+/73890.
    
    In that CL I referenced an issue using its github.com URL, because other
    tests in the file I was changing contained references to issues using
    their github.com URL. Sam Whited left a comment on the CL stating I
    should change it to the golang.org URL.
    
    If new code is intended to reference issues via golang.org and not
    github.com, existing code should be updated so that precedence exists
    for contributors who are looking at the existing code as a guide for the
    code they should write.
    
    Change-Id: I3b9053fe38a1c56fc101a8b7fd7b8f310ba29724
    Reviewed-on: https://go-review.googlesource.com/75673
    Reviewed-by: Brad Fitzpatrick <bradfitz@golang.org>
---
 misc/cgo/testshared/src/depBase/dep.go | 2 +-
 misc/cgo/testshared/src/exe/exe.go     | 2 +-
 src/crypto/elliptic/elliptic_test.go   | 2 +-
 src/crypto/x509/sec1_test.go           | 2 +-
 src/database/sql/convert_test.go       | 2 +-
 src/encoding/json/encode_test.go       | 2 +-
 src/encoding/xml/read_test.go          | 2 +-
 src/image/png/reader_test.go           | 4 ++--
 src/net/hosts_test.go                  | 2 +-
 src/net/port.go                        | 2 +-
 src/os/stat_windows.go                 | 2 +-
 src/sync/atomic/value.go               | 2 +-
 src/sync/cond.go                       | 2 +-
 13 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/misc/cgo/testshared/src/depBase/dep.go b/misc/cgo/testshared/src/depBase/dep.go
index 9f86710db0..569c210aa1 100644
--- a/misc/cgo/testshared/src/depBase/dep.go
+++ b/misc/cgo/testshared/src/depBase/dep.go
@@ -22,7 +22,7 @@ type Dep struct {
 func (d *Dep) Method() int {
 	// This code below causes various go.itab.* symbols to be generated in
 	// the shared library. Similar code in ../exe/exe.go results in
-	// exercising https://github.com/golang/go/issues/17594
+	// exercising https://golang.org/issues/17594
 	reflect.TypeOf(os.Stdout).Elem()
 	return 10
 }
diff --git a/misc/cgo/testshared/src/exe/exe.go b/misc/cgo/testshared/src/exe/exe.go
index 84302a811f..bd864d88ad 100644
--- a/misc/cgo/testshared/src/exe/exe.go
+++ b/misc/cgo/testshared/src/exe/exe.go
@@ -25,7 +25,7 @@ func main() {
 	defer depBase.ImplementedInAsm()
 	// This code below causes various go.itab.* symbols to be generated in
 	// the executable. Similar code in ../depBase/dep.go results in
-	// exercising https://github.com/golang/go/issues/17594
+	// exercising https://golang.org/issues/17594
 	reflect.TypeOf(os.Stdout).Elem()
 	runtime.GC()
 	depBase.V = depBase.F() + 1
diff --git a/src/crypto/elliptic/elliptic_test.go b/src/crypto/elliptic/elliptic_test.go
index 2c0f2440f7..55c6e894b0 100644
--- a/src/crypto/elliptic/elliptic_test.go
+++ b/src/crypto/elliptic/elliptic_test.go
@@ -581,7 +581,7 @@ func TestP224Overflow(t *testing.T) {
 	}
 }
 
-// See https://github.com/golang/go/issues/20482
+// See https://golang.org/issues/20482
 func TestUnmarshalToLargeCoordinates(t *testing.T) {
 	curve := P256()
 	p := curve.Params().P
diff --git a/src/crypto/x509/sec1_test.go b/src/crypto/x509/sec1_test.go
index 55b76d6c38..573c937caf 100644
--- a/src/crypto/x509/sec1_test.go
+++ b/src/crypto/x509/sec1_test.go
@@ -18,7 +18,7 @@ var ecKeyTests = []struct {
 	//   openssl ecparam -genkey -name secp384r1 -outform PEM
 	{"3081a40201010430bdb9839c08ee793d1157886a7a758a3c8b2a17a4df48f17ace57c72c56b4723cf21dcda21d4e1ad57ff034f19fcfd98ea00706052b81040022a16403620004feea808b5ee2429cfcce13c32160e1c960990bd050bb0fdf7222f3decd0a55008e32a6aa3c9062051c4cba92a7a3b178b24567412d43cdd2f882fa5addddd726fe3e208d2c26d733a773a597abb749714df7256ead5105fa6e7b3650de236b50", true},
 	// This key was generated by GnuTLS and has illegal zero-padding of the
-	// private key. See https://github.com/golang/go/issues/13699.
+	// private key. See https://golang.org/issues/13699.
 	{"3078020101042100f9f43a04b9bdc3ab01f53be6df80e7a7bc3eaf7b87fc24e630a4a0aa97633645a00a06082a8648ce3d030107a1440342000441a51bc318461b4c39a45048a16d4fc2a935b1ea7fe86e8c1fa219d6f2438f7c7fd62957d3442efb94b6a23eb0ea66dda663dc42f379cda6630b21b7888a5d3d", false},
 	// This was generated using an old version of OpenSSL and is missing a
 	// leading zero byte in the private key that should be present.
diff --git a/src/database/sql/convert_test.go b/src/database/sql/convert_test.go
index c198177760..47098c81ec 100644
--- a/src/database/sql/convert_test.go
+++ b/src/database/sql/convert_test.go
@@ -398,7 +398,7 @@ func TestRawBytesAllocs(t *testing.T) {
 	}
 }
 
-// https://github.com/golang/go/issues/13905
+// https://golang.org/issues/13905
 func TestUserDefinedBytes(t *testing.T) {
 	type userDefinedBytes []byte
 	var u userDefinedBytes
diff --git a/src/encoding/json/encode_test.go b/src/encoding/json/encode_test.go
index 3fda6a0c71..db89d113da 100644
--- a/src/encoding/json/encode_test.go
+++ b/src/encoding/json/encode_test.go
@@ -943,7 +943,7 @@ func TestMarshalRawMessageValue(t *testing.T) {
 		//
 		// The tests below marked with Issue6458 used to generate "ImZvbyI=" instead "foo".
 		// This behavior was intentionally changed in Go 1.8.
-		// See https://github.com/golang/go/issues/14493#issuecomment-255857318
+		// See https://golang.org/issues/14493#issuecomment-255857318
 		{rawText, `"foo"`, true}, // Issue6458
 		{&rawText, `"foo"`, true},
 		{[]interface{}{rawText}, `["foo"]`, true},  // Issue6458
diff --git a/src/encoding/xml/read_test.go b/src/encoding/xml/read_test.go
index ba203cd98b..8c2e70fa22 100644
--- a/src/encoding/xml/read_test.go
+++ b/src/encoding/xml/read_test.go
@@ -819,7 +819,7 @@ const (
 `
 )
 
-// github.com/golang/go/issues/13417
+// golang.org/issues/13417
 func TestUnmarshalEmptyValues(t *testing.T) {
 	// Test first with a zero-valued dst.
 	v := new(Parent)
diff --git a/src/image/png/reader_test.go b/src/image/png/reader_test.go
index eb792ea806..66bcfcb437 100644
--- a/src/image/png/reader_test.go
+++ b/src/image/png/reader_test.go
@@ -589,7 +589,7 @@ func TestUnknownChunkLengthUnderflow(t *testing.T) {
 }
 
 func TestGray8Transparent(t *testing.T) {
-	// These bytes come from https://github.com/golang/go/issues/19553
+	// These bytes come from https://golang.org/issues/19553
 	m, err := Decode(bytes.NewReader([]byte{
 		0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52,
 		0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x0b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x85, 0x2c, 0x88,
@@ -650,7 +650,7 @@ func TestGray8Transparent(t *testing.T) {
 }
 
 func TestDimensionOverflow(t *testing.T) {
-	// These bytes come from https://github.com/golang/go/issues/22304
+	// These bytes come from https://golang.org/issues/22304
 	//
 	// It encodes a 2147483646 × 2147483646 (i.e. 0x7ffffffe × 0x7ffffffe)
 	// NRGBA image. The (width × height) per se doesn't overflow an int64, but
diff --git a/src/net/hosts_test.go b/src/net/hosts_test.go
index 5d6c9cfe19..f850e2fccf 100644
--- a/src/net/hosts_test.go
+++ b/src/net/hosts_test.go
@@ -150,7 +150,7 @@ func testStaticAddr(t *testing.T, hostsPath string, ent staticHostEntry) {
 
 func TestHostCacheModification(t *testing.T) {
 	// Ensure that programs can't modify the internals of the host cache.
-	// See https://github.com/golang/go/issues/14212.
+	// See https://golang.org/issues/14212.
 	defer func(orig string) { testHookHostsPath = orig }(testHookHostsPath)
 
 	testHookHostsPath = "testdata/ipv4-hosts"
diff --git a/src/net/port.go b/src/net/port.go
index 8e1321afa4..9016a19831 100644
--- a/src/net/port.go
+++ b/src/net/port.go
@@ -9,7 +9,7 @@ package net
 // parse service as a non-decimal integer when needsLookup is true.
 //
 // Some system resolvers will return a valid port number when given a number
-// over 65536 (see https://github.com/golang/go/issues/11715). Alas, the parser
+// over 65536 (see https://golang.org/issues/11715). Alas, the parser
 // can't bail early on numbers > 65536. Therefore reasonably large/small
 // numbers are parsed in full and rejected if invalid.
 func parsePort(service string) (port int, needsLookup bool) {
diff --git a/src/os/stat_windows.go b/src/os/stat_windows.go
index e7a4e0d54a..71dea3d48f 100644
--- a/src/os/stat_windows.go
+++ b/src/os/stat_windows.go
@@ -69,7 +69,7 @@ func Stat(name string) (FileInfo, error) {
 	if err != nil {
 		return nil, &PathError{"Stat", name, err}
 	}
-	// Apparently (see https://github.com/golang/go/issues/19922#issuecomment-300031421)
+	// Apparently (see https://golang.org/issues/19922#issuecomment-300031421)
 	// GetFileAttributesEx is fastest approach to get file info.
 	// It does not work for symlinks. But symlinks are rare,
 	// so try GetFileAttributesEx first.
diff --git a/src/sync/atomic/value.go b/src/sync/atomic/value.go
index 1fc1f681f2..ac5a9a5e72 100644
--- a/src/sync/atomic/value.go
+++ b/src/sync/atomic/value.go
@@ -90,7 +90,7 @@ func runtime_procUnpin()
 // noCopy may be embedded into structs which must not be copied
 // after the first use.
 //
-// See https://github.com/golang/go/issues/8005#issuecomment-190753527
+// See https://golang.org/issues/8005#issuecomment-190753527
 // for details.
 type noCopy struct{}
 
diff --git a/src/sync/cond.go b/src/sync/cond.go
index 14e2f6b24d..3dcbf1c351 100644
--- a/src/sync/cond.go
+++ b/src/sync/cond.go
@@ -89,7 +89,7 @@ func (c *copyChecker) check() {
 // noCopy may be embedded into structs which must not be copied
 // after the first use.
 //
-// See https://github.com/golang/go/issues/8005#issuecomment-190753527
+// See https://golang.org/issues/8005#issuecomment-190753527
 // for details.
 type noCopy struct{}
 
