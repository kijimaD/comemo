commit 6faacd2244ca3bc11686f76e95f528b8b3806e85
Author: Russ Cox <rsc@golang.org>
Date:   Tue Oct 6 19:38:30 2009 -0700

    apply gofmt to auto-generated syscall files
    
    R=gri
    DELTA=4023  (104 added, 27 deleted, 3892 changed)
    OCL=35416
    CL=35418
---
 src/pkg/syscall/PORT.sh                  |   8 +-
 src/pkg/syscall/zerrors_darwin_386.go    | 277 +++++++------
 src/pkg/syscall/zerrors_darwin_amd64.go  | 277 +++++++------
 src/pkg/syscall/zerrors_linux_386.go     | 337 ++++++++--------
 src/pkg/syscall/zerrors_linux_amd64.go   | 337 ++++++++--------
 src/pkg/syscall/zerrors_linux_arm.go     | 337 ++++++++--------
 src/pkg/syscall/zerrors_nacl_386.go      | 242 ++++++------
 src/pkg/syscall/zsyscall_darwin_386.go   |  47 ++-
 src/pkg/syscall/zsyscall_darwin_amd64.go |  37 +-
 src/pkg/syscall/zsyscall_linux_386.go    |  63 +--
 src/pkg/syscall/zsyscall_linux_amd64.go  |  51 ++-
 src/pkg/syscall/zsyscall_linux_arm.go    |  63 +--
 src/pkg/syscall/zsyscall_nacl_386.go     |  17 +-
 src/pkg/syscall/zsysnum_darwin_386.go    | 646 +++++++++++++++---------------
 src/pkg/syscall/zsysnum_darwin_amd64.go  | 646 +++++++++++++++---------------
 src/pkg/syscall/zsysnum_linux_386.go     | 623 +++++++++++++++--------------
 src/pkg/syscall/zsysnum_linux_amd64.go   | 577 ++++++++++++++-------------
 src/pkg/syscall/zsysnum_linux_arm.go     | 659 +++++++++++++++----------------
 src/pkg/syscall/zsysnum_nacl_386.go      | 111 +++---
 src/pkg/syscall/ztypes_darwin_386.go     | 372 ++++++++---------
 src/pkg/syscall/ztypes_darwin_amd64.go   | 376 +++++++++---------
 src/pkg/syscall/ztypes_linux_386.go      | 552 +++++++++++++-------------
 src/pkg/syscall/ztypes_linux_amd64.go    | 568 +++++++++++++-------------
 src/pkg/syscall/ztypes_linux_arm.go      | 552 +++++++++++++-------------
 src/pkg/syscall/ztypes_nacl_386.go       | 134 +++----
 25 files changed, 3993 insertions(+), 3916 deletions(-)

diff --git a/src/pkg/syscall/PORT.sh b/src/pkg/syscall/PORT.sh
index ef37c013cf..72356b358f 100755
--- a/src/pkg/syscall/PORT.sh
+++ b/src/pkg/syscall/PORT.sh
@@ -126,7 +126,7 @@ linux_arm)
 	;;
 esac
 
-echo "$mkerrors >zerrors_$GOOSARCH.go"
-echo "$mksyscall syscall_$GOOS.go syscall_$GOOSARCH.go >zsyscall_$GOOSARCH.go"
-echo "$mksysnum >zsysnum_$GOOSARCH.go"
-echo "$mktypes types_$GOOS.c >ztypes_$GOOSARCH.go"
+echo "$mkerrors |gofmt >zerrors_$GOOSARCH.go"
+echo "$mksyscall syscall_$GOOS.go syscall_$GOOSARCH.go |gofmt >zsyscall_$GOOSARCH.go"
+echo "$mksysnum |gofmt >zsysnum_$GOOSARCH.go"
+echo "$mktypes types_$GOOS.c |gofmt >ztypes_$GOOSARCH.go"
diff --git a/src/pkg/syscall/zerrors_darwin_386.go b/src/pkg/syscall/zerrors_darwin_386.go
index a19c99dfc9..862a466418 100644
--- a/src/pkg/syscall/zerrors_darwin_386.go
+++ b/src/pkg/syscall/zerrors_darwin_386.go
@@ -9,150 +9,150 @@ package syscall
 
 // Constants
 const (
-	EMULTIHOP = 0x5f;
-	EAFNOSUPPORT = 0x2f;
-	EACCES = 0xd;
-	EDESTADDRREQ = 0x27;
-	EILSEQ = 0x5c;
-	ESPIPE = 0x1d;
-	EMLINK = 0x1f;
-	EPROGUNAVAIL = 0x4a;
-	ENOTTY = 0x19;
-	EBADF = 0x9;
-	ERANGE = 0x22;
-	ECANCELED = 0x59;
-	ETXTBSY = 0x1a;
-	ENOMEM = 0xc;
-	EINPROGRESS = 0x24;
-	ENOTEMPTY = 0x42;
-	ENOTBLK = 0xf;
-	EPROTOTYPE = 0x29;
-	ENOMSG = 0x5b;
-	ERPCMISMATCH = 0x49;
-	ENOTDIR = 0x14;
-	EALREADY = 0x25;
-	ETIMEDOUT = 0x3c;
-	ENEEDAUTH = 0x51;
-	ENODATA = 0x60;
-	EINTR = 0x4;
-	ENOLINK = 0x61;
-	EPERM = 0x1;
-	ENETDOWN = 0x32;
-	ESTALE = 0x46;
-	ENOTSOCK = 0x26;
-	ENOSR = 0x62;
-	EAUTH = 0x50;
-	ECHILD = 0xa;
-	EPIPE = 0x20;
-	ENOATTR = 0x5d;
-	EBADMSG = 0x5e;
-	EREMOTE = 0x47;
-	ETOOMANYREFS = 0x3b;
-	EPFNOSUPPORT = 0x2e;
-	EPROCUNAVAIL = 0x4c;
-	EADDRINUSE = 0x30;
-	ENETRESET = 0x34;
-	EISDIR = 0x15;
-	EIDRM = 0x5a;
-	EDEVERR = 0x53;
-	EINVAL = 0x16;
-	ESHUTDOWN = 0x3a;
-	EPWROFF = 0x52;
-	EOVERFLOW = 0x54;
-	EBUSY = 0x10;
-	EPROCLIM = 0x43;
-	EPROTO = 0x64;
-	ENODEV = 0x13;
-	EROFS = 0x1e;
-	E2BIG = 0x7;
-	EDEADLK = 0xb;
-	ECONNRESET = 0x36;
-	EBADMACHO = 0x58;
-	ENXIO = 0x6;
-	EBADRPC = 0x48;
-	ENAMETOOLONG = 0x3f;
-	ELAST = 0x67;
-	ESOCKTNOSUPPORT = 0x2c;
-	EADDRNOTAVAIL = 0x31;
-	ETIME = 0x65;
-	EPROTONOSUPPORT = 0x2b;
-	EIO = 0x5;
-	ENETUNREACH = 0x33;
-	EXDEV = 0x12;
-	EDQUOT = 0x45;
-	ENOSPC = 0x1c;
-	ENOEXEC = 0x8;
-	EMSGSIZE = 0x28;
-	EFTYPE = 0x4f;
-	EDOM = 0x21;
-	ENOSTR = 0x63;
-	EFBIG = 0x1b;
-	ESRCH = 0x3;
-	EHOSTDOWN = 0x40;
-	ENOLCK = 0x4d;
-	ENFILE = 0x17;
-	ENOSYS = 0x4e;
-	EBADARCH = 0x56;
-	ENOTCONN = 0x39;
-	ENOTSUP = 0x2d;
-	ECONNABORTED = 0x35;
-	EISCONN = 0x38;
-	ESHLIBVERS = 0x57;
-	EUSERS = 0x44;
-	ENOPROTOOPT = 0x2a;
-	EMFILE = 0x18;
-	ELOOP = 0x3e;
-	ENOBUFS = 0x37;
-	EFAULT = 0xe;
-	EWOULDBLOCK = 0x23;
-	EBADEXEC = 0x55;
-	ENOPOLICY = 0x67;
-	ECONNREFUSED = 0x3d;
-	EAGAIN = 0x23;
-	EEXIST = 0x11;
-	EPROGMISMATCH = 0x4b;
-	ENOENT = 0x2;
-	EHOSTUNREACH = 0x41;
-	EOPNOTSUPP = 0x66;
-	SIGBUS = 0xa;
-	SIGTTIN = 0x15;
-	SIGPROF = 0x1b;
-	SIGFPE = 0x8;
-	SIGHUP = 0x1;
-	SIGTTOU = 0x16;
-	SIGUSR1 = 0x1e;
-	SIGURG = 0x10;
-	SIGQUIT = 0x3;
-	SIGIO = 0x17;
-	SIGABRT = 0x6;
-	SIGINFO = 0x1d;
-	SIGUSR2 = 0x1f;
-	SIGTRAP = 0x5;
-	SIGVTALRM = 0x1a;
-	SIGSEGV = 0xb;
-	SIGCONT = 0x13;
-	SIGPIPE = 0xd;
-	SIGXFSZ = 0x19;
-	SIGCHLD = 0x14;
-	SIGSYS = 0xc;
-	SIGSTOP = 0x11;
-	SIGALRM = 0xe;
-	SIGTSTP = 0x12;
-	SIGEMT = 0x7;
-	SIGKILL = 0x9;
-	SIGXCPU = 0x18;
-	SIGILL = 0x4;
-	SIGINT = 0x2;
-	SIGIOT = 0x6;
-	SIGTERM = 0xf;
-	SIGWINCH = 0x1c;
+	EMULTIHOP	= 0x5f;
+	EAFNOSUPPORT	= 0x2f;
+	EACCES		= 0xd;
+	EDESTADDRREQ	= 0x27;
+	EILSEQ		= 0x5c;
+	ESPIPE		= 0x1d;
+	EMLINK		= 0x1f;
+	EPROGUNAVAIL	= 0x4a;
+	ENOTTY		= 0x19;
+	EBADF		= 0x9;
+	ERANGE		= 0x22;
+	ECANCELED	= 0x59;
+	ETXTBSY		= 0x1a;
+	ENOMEM		= 0xc;
+	EINPROGRESS	= 0x24;
+	ENOTEMPTY	= 0x42;
+	ENOTBLK		= 0xf;
+	EPROTOTYPE	= 0x29;
+	ENOMSG		= 0x5b;
+	ERPCMISMATCH	= 0x49;
+	ENOTDIR		= 0x14;
+	EALREADY	= 0x25;
+	ETIMEDOUT	= 0x3c;
+	ENEEDAUTH	= 0x51;
+	ENODATA		= 0x60;
+	EINTR		= 0x4;
+	ENOLINK		= 0x61;
+	EPERM		= 0x1;
+	ENETDOWN	= 0x32;
+	ESTALE		= 0x46;
+	ENOTSOCK	= 0x26;
+	ENOSR		= 0x62;
+	EAUTH		= 0x50;
+	ECHILD		= 0xa;
+	EPIPE		= 0x20;
+	ENOATTR		= 0x5d;
+	EBADMSG		= 0x5e;
+	EREMOTE		= 0x47;
+	ETOOMANYREFS	= 0x3b;
+	EPFNOSUPPORT	= 0x2e;
+	EPROCUNAVAIL	= 0x4c;
+	EADDRINUSE	= 0x30;
+	ENETRESET	= 0x34;
+	EISDIR		= 0x15;
+	EIDRM		= 0x5a;
+	EDEVERR		= 0x53;
+	EINVAL		= 0x16;
+	ESHUTDOWN	= 0x3a;
+	EPWROFF		= 0x52;
+	EOVERFLOW	= 0x54;
+	EBUSY		= 0x10;
+	EPROCLIM	= 0x43;
+	EPROTO		= 0x64;
+	ENODEV		= 0x13;
+	EROFS		= 0x1e;
+	E2BIG		= 0x7;
+	EDEADLK		= 0xb;
+	ECONNRESET	= 0x36;
+	EBADMACHO	= 0x58;
+	ENXIO		= 0x6;
+	EBADRPC		= 0x48;
+	ENAMETOOLONG	= 0x3f;
+	ELAST		= 0x67;
+	ESOCKTNOSUPPORT	= 0x2c;
+	EADDRNOTAVAIL	= 0x31;
+	ETIME		= 0x65;
+	EPROTONOSUPPORT	= 0x2b;
+	EIO		= 0x5;
+	ENETUNREACH	= 0x33;
+	EXDEV		= 0x12;
+	EDQUOT		= 0x45;
+	ENOSPC		= 0x1c;
+	ENOEXEC		= 0x8;
+	EMSGSIZE	= 0x28;
+	EFTYPE		= 0x4f;
+	EDOM		= 0x21;
+	ENOSTR		= 0x63;
+	EFBIG		= 0x1b;
+	ESRCH		= 0x3;
+	EHOSTDOWN	= 0x40;
+	ENOLCK		= 0x4d;
+	ENFILE		= 0x17;
+	ENOSYS		= 0x4e;
+	EBADARCH	= 0x56;
+	ENOTCONN	= 0x39;
+	ENOTSUP		= 0x2d;
+	ECONNABORTED	= 0x35;
+	EISCONN		= 0x38;
+	ESHLIBVERS	= 0x57;
+	EUSERS		= 0x44;
+	ENOPROTOOPT	= 0x2a;
+	EMFILE		= 0x18;
+	ELOOP		= 0x3e;
+	ENOBUFS		= 0x37;
+	EFAULT		= 0xe;
+	EWOULDBLOCK	= 0x23;
+	EBADEXEC	= 0x55;
+	ENOPOLICY	= 0x67;
+	ECONNREFUSED	= 0x3d;
+	EAGAIN		= 0x23;
+	EEXIST		= 0x11;
+	EPROGMISMATCH	= 0x4b;
+	ENOENT		= 0x2;
+	EHOSTUNREACH	= 0x41;
+	EOPNOTSUPP	= 0x66;
+	SIGBUS		= 0xa;
+	SIGTTIN		= 0x15;
+	SIGPROF		= 0x1b;
+	SIGFPE		= 0x8;
+	SIGHUP		= 0x1;
+	SIGTTOU		= 0x16;
+	SIGUSR1		= 0x1e;
+	SIGURG		= 0x10;
+	SIGQUIT		= 0x3;
+	SIGIO		= 0x17;
+	SIGABRT		= 0x6;
+	SIGINFO		= 0x1d;
+	SIGUSR2		= 0x1f;
+	SIGTRAP		= 0x5;
+	SIGVTALRM	= 0x1a;
+	SIGSEGV		= 0xb;
+	SIGCONT		= 0x13;
+	SIGPIPE		= 0xd;
+	SIGXFSZ		= 0x19;
+	SIGCHLD		= 0x14;
+	SIGSYS		= 0xc;
+	SIGSTOP		= 0x11;
+	SIGALRM		= 0xe;
+	SIGTSTP		= 0x12;
+	SIGEMT		= 0x7;
+	SIGKILL		= 0x9;
+	SIGXCPU		= 0x18;
+	SIGILL		= 0x4;
+	SIGINT		= 0x2;
+	SIGIOT		= 0x6;
+	SIGTERM		= 0xf;
+	SIGWINCH	= 0x1c;
 )
 
 // Types
 
 
 // Error table
-var errors = [...]string {
+var errors = [...]string{
 	95: "EMULTIHOP (Reserved)",
 	47: "address family not supported by protocol family",
 	13: "permission denied",
@@ -257,4 +257,3 @@ var errors = [...]string {
 	65: "no route to host",
 	102: "operation not supported on socket",
 }
-
diff --git a/src/pkg/syscall/zerrors_darwin_amd64.go b/src/pkg/syscall/zerrors_darwin_amd64.go
index a19c99dfc9..862a466418 100644
--- a/src/pkg/syscall/zerrors_darwin_amd64.go
+++ b/src/pkg/syscall/zerrors_darwin_amd64.go
@@ -9,150 +9,150 @@ package syscall
 
 // Constants
 const (
-	EMULTIHOP = 0x5f;
-	EAFNOSUPPORT = 0x2f;
-	EACCES = 0xd;
-	EDESTADDRREQ = 0x27;
-	EILSEQ = 0x5c;
-	ESPIPE = 0x1d;
-	EMLINK = 0x1f;
-	EPROGUNAVAIL = 0x4a;
-	ENOTTY = 0x19;
-	EBADF = 0x9;
-	ERANGE = 0x22;
-	ECANCELED = 0x59;
-	ETXTBSY = 0x1a;
-	ENOMEM = 0xc;
-	EINPROGRESS = 0x24;
-	ENOTEMPTY = 0x42;
-	ENOTBLK = 0xf;
-	EPROTOTYPE = 0x29;
-	ENOMSG = 0x5b;
-	ERPCMISMATCH = 0x49;
-	ENOTDIR = 0x14;
-	EALREADY = 0x25;
-	ETIMEDOUT = 0x3c;
-	ENEEDAUTH = 0x51;
-	ENODATA = 0x60;
-	EINTR = 0x4;
-	ENOLINK = 0x61;
-	EPERM = 0x1;
-	ENETDOWN = 0x32;
-	ESTALE = 0x46;
-	ENOTSOCK = 0x26;
-	ENOSR = 0x62;
-	EAUTH = 0x50;
-	ECHILD = 0xa;
-	EPIPE = 0x20;
-	ENOATTR = 0x5d;
-	EBADMSG = 0x5e;
-	EREMOTE = 0x47;
-	ETOOMANYREFS = 0x3b;
-	EPFNOSUPPORT = 0x2e;
-	EPROCUNAVAIL = 0x4c;
-	EADDRINUSE = 0x30;
-	ENETRESET = 0x34;
-	EISDIR = 0x15;
-	EIDRM = 0x5a;
-	EDEVERR = 0x53;
-	EINVAL = 0x16;
-	ESHUTDOWN = 0x3a;
-	EPWROFF = 0x52;
-	EOVERFLOW = 0x54;
-	EBUSY = 0x10;
-	EPROCLIM = 0x43;
-	EPROTO = 0x64;
-	ENODEV = 0x13;
-	EROFS = 0x1e;
-	E2BIG = 0x7;
-	EDEADLK = 0xb;
-	ECONNRESET = 0x36;
-	EBADMACHO = 0x58;
-	ENXIO = 0x6;
-	EBADRPC = 0x48;
-	ENAMETOOLONG = 0x3f;
-	ELAST = 0x67;
-	ESOCKTNOSUPPORT = 0x2c;
-	EADDRNOTAVAIL = 0x31;
-	ETIME = 0x65;
-	EPROTONOSUPPORT = 0x2b;
-	EIO = 0x5;
-	ENETUNREACH = 0x33;
-	EXDEV = 0x12;
-	EDQUOT = 0x45;
-	ENOSPC = 0x1c;
-	ENOEXEC = 0x8;
-	EMSGSIZE = 0x28;
-	EFTYPE = 0x4f;
-	EDOM = 0x21;
-	ENOSTR = 0x63;
-	EFBIG = 0x1b;
-	ESRCH = 0x3;
-	EHOSTDOWN = 0x40;
-	ENOLCK = 0x4d;
-	ENFILE = 0x17;
-	ENOSYS = 0x4e;
-	EBADARCH = 0x56;
-	ENOTCONN = 0x39;
-	ENOTSUP = 0x2d;
-	ECONNABORTED = 0x35;
-	EISCONN = 0x38;
-	ESHLIBVERS = 0x57;
-	EUSERS = 0x44;
-	ENOPROTOOPT = 0x2a;
-	EMFILE = 0x18;
-	ELOOP = 0x3e;
-	ENOBUFS = 0x37;
-	EFAULT = 0xe;
-	EWOULDBLOCK = 0x23;
-	EBADEXEC = 0x55;
-	ENOPOLICY = 0x67;
-	ECONNREFUSED = 0x3d;
-	EAGAIN = 0x23;
-	EEXIST = 0x11;
-	EPROGMISMATCH = 0x4b;
-	ENOENT = 0x2;
-	EHOSTUNREACH = 0x41;
-	EOPNOTSUPP = 0x66;
-	SIGBUS = 0xa;
-	SIGTTIN = 0x15;
-	SIGPROF = 0x1b;
-	SIGFPE = 0x8;
-	SIGHUP = 0x1;
-	SIGTTOU = 0x16;
-	SIGUSR1 = 0x1e;
-	SIGURG = 0x10;
-	SIGQUIT = 0x3;
-	SIGIO = 0x17;
-	SIGABRT = 0x6;
-	SIGINFO = 0x1d;
-	SIGUSR2 = 0x1f;
-	SIGTRAP = 0x5;
-	SIGVTALRM = 0x1a;
-	SIGSEGV = 0xb;
-	SIGCONT = 0x13;
-	SIGPIPE = 0xd;
-	SIGXFSZ = 0x19;
-	SIGCHLD = 0x14;
-	SIGSYS = 0xc;
-	SIGSTOP = 0x11;
-	SIGALRM = 0xe;
-	SIGTSTP = 0x12;
-	SIGEMT = 0x7;
-	SIGKILL = 0x9;
-	SIGXCPU = 0x18;
-	SIGILL = 0x4;
-	SIGINT = 0x2;
-	SIGIOT = 0x6;
-	SIGTERM = 0xf;
-	SIGWINCH = 0x1c;
+	EMULTIHOP	= 0x5f;
+	EAFNOSUPPORT	= 0x2f;
+	EACCES		= 0xd;
+	EDESTADDRREQ	= 0x27;
+	EILSEQ		= 0x5c;
+	ESPIPE		= 0x1d;
+	EMLINK		= 0x1f;
+	EPROGUNAVAIL	= 0x4a;
+	ENOTTY		= 0x19;
+	EBADF		= 0x9;
+	ERANGE		= 0x22;
+	ECANCELED	= 0x59;
+	ETXTBSY		= 0x1a;
+	ENOMEM		= 0xc;
+	EINPROGRESS	= 0x24;
+	ENOTEMPTY	= 0x42;
+	ENOTBLK		= 0xf;
+	EPROTOTYPE	= 0x29;
+	ENOMSG		= 0x5b;
+	ERPCMISMATCH	= 0x49;
+	ENOTDIR		= 0x14;
+	EALREADY	= 0x25;
+	ETIMEDOUT	= 0x3c;
+	ENEEDAUTH	= 0x51;
+	ENODATA		= 0x60;
+	EINTR		= 0x4;
+	ENOLINK		= 0x61;
+	EPERM		= 0x1;
+	ENETDOWN	= 0x32;
+	ESTALE		= 0x46;
+	ENOTSOCK	= 0x26;
+	ENOSR		= 0x62;
+	EAUTH		= 0x50;
+	ECHILD		= 0xa;
+	EPIPE		= 0x20;
+	ENOATTR		= 0x5d;
+	EBADMSG		= 0x5e;
+	EREMOTE		= 0x47;
+	ETOOMANYREFS	= 0x3b;
+	EPFNOSUPPORT	= 0x2e;
+	EPROCUNAVAIL	= 0x4c;
+	EADDRINUSE	= 0x30;
+	ENETRESET	= 0x34;
+	EISDIR		= 0x15;
+	EIDRM		= 0x5a;
+	EDEVERR		= 0x53;
+	EINVAL		= 0x16;
+	ESHUTDOWN	= 0x3a;
+	EPWROFF		= 0x52;
+	EOVERFLOW	= 0x54;
+	EBUSY		= 0x10;
+	EPROCLIM	= 0x43;
+	EPROTO		= 0x64;
+	ENODEV		= 0x13;
+	EROFS		= 0x1e;
+	E2BIG		= 0x7;
+	EDEADLK		= 0xb;
+	ECONNRESET	= 0x36;
+	EBADMACHO	= 0x58;
+	ENXIO		= 0x6;
+	EBADRPC		= 0x48;
+	ENAMETOOLONG	= 0x3f;
+	ELAST		= 0x67;
+	ESOCKTNOSUPPORT	= 0x2c;
+	EADDRNOTAVAIL	= 0x31;
+	ETIME		= 0x65;
+	EPROTONOSUPPORT	= 0x2b;
+	EIO		= 0x5;
+	ENETUNREACH	= 0x33;
+	EXDEV		= 0x12;
+	EDQUOT		= 0x45;
+	ENOSPC		= 0x1c;
+	ENOEXEC		= 0x8;
+	EMSGSIZE	= 0x28;
+	EFTYPE		= 0x4f;
+	EDOM		= 0x21;
+	ENOSTR		= 0x63;
+	EFBIG		= 0x1b;
+	ESRCH		= 0x3;
+	EHOSTDOWN	= 0x40;
+	ENOLCK		= 0x4d;
+	ENFILE		= 0x17;
+	ENOSYS		= 0x4e;
+	EBADARCH	= 0x56;
+	ENOTCONN	= 0x39;
+	ENOTSUP		= 0x2d;
+	ECONNABORTED	= 0x35;
+	EISCONN		= 0x38;
+	ESHLIBVERS	= 0x57;
+	EUSERS		= 0x44;
+	ENOPROTOOPT	= 0x2a;
+	EMFILE		= 0x18;
+	ELOOP		= 0x3e;
+	ENOBUFS		= 0x37;
+	EFAULT		= 0xe;
+	EWOULDBLOCK	= 0x23;
+	EBADEXEC	= 0x55;
+	ENOPOLICY	= 0x67;
+	ECONNREFUSED	= 0x3d;
+	EAGAIN		= 0x23;
+	EEXIST		= 0x11;
+	EPROGMISMATCH	= 0x4b;
+	ENOENT		= 0x2;
+	EHOSTUNREACH	= 0x41;
+	EOPNOTSUPP	= 0x66;
+	SIGBUS		= 0xa;
+	SIGTTIN		= 0x15;
+	SIGPROF		= 0x1b;
+	SIGFPE		= 0x8;
+	SIGHUP		= 0x1;
+	SIGTTOU		= 0x16;
+	SIGUSR1		= 0x1e;
+	SIGURG		= 0x10;
+	SIGQUIT		= 0x3;
+	SIGIO		= 0x17;
+	SIGABRT		= 0x6;
+	SIGINFO		= 0x1d;
+	SIGUSR2		= 0x1f;
+	SIGTRAP		= 0x5;
+	SIGVTALRM	= 0x1a;
+	SIGSEGV		= 0xb;
+	SIGCONT		= 0x13;
+	SIGPIPE		= 0xd;
+	SIGXFSZ		= 0x19;
+	SIGCHLD		= 0x14;
+	SIGSYS		= 0xc;
+	SIGSTOP		= 0x11;
+	SIGALRM		= 0xe;
+	SIGTSTP		= 0x12;
+	SIGEMT		= 0x7;
+	SIGKILL		= 0x9;
+	SIGXCPU		= 0x18;
+	SIGILL		= 0x4;
+	SIGINT		= 0x2;
+	SIGIOT		= 0x6;
+	SIGTERM		= 0xf;
+	SIGWINCH	= 0x1c;
 )
 
 // Types
 
 
 // Error table
-var errors = [...]string {
+var errors = [...]string{
 	95: "EMULTIHOP (Reserved)",
 	47: "address family not supported by protocol family",
 	13: "permission denied",
@@ -257,4 +257,3 @@ var errors = [...]string {
 	65: "no route to host",
 	102: "operation not supported on socket",
 }
-
diff --git a/src/pkg/syscall/zerrors_linux_386.go b/src/pkg/syscall/zerrors_linux_386.go
index 95d51e93fc..b876df3c5f 100644
--- a/src/pkg/syscall/zerrors_linux_386.go
+++ b/src/pkg/syscall/zerrors_linux_386.go
@@ -9,180 +9,180 @@ package syscall
 
 // Constants
 const (
-	EMULTIHOP = 0x48;
-	EUNATCH = 0x31;
-	EAFNOSUPPORT = 0x61;
-	EREMCHG = 0x4e;
-	EACCES = 0xd;
-	EL3RST = 0x2f;
-	EDESTADDRREQ = 0x59;
-	EILSEQ = 0x54;
-	ESPIPE = 0x1d;
-	EMLINK = 0x1f;
-	EOWNERDEAD = 0x82;
-	ENOTTY = 0x19;
-	EBADE = 0x34;
-	EBADF = 0x9;
-	EBADR = 0x35;
-	EADV = 0x44;
-	ERANGE = 0x22;
-	ECANCELED = 0x7d;
-	ETXTBSY = 0x1a;
-	ENOMEM = 0xc;
-	EINPROGRESS = 0x73;
-	ENOTBLK = 0xf;
-	EPROTOTYPE = 0x5b;
-	ERESTART = 0x55;
-	EISNAM = 0x78;
-	ENOMSG = 0x2a;
-	EALREADY = 0x72;
-	ETIMEDOUT = 0x6e;
-	ENODATA = 0x3d;
-	EINTR = 0x4;
-	ENOLINK = 0x43;
-	EPERM = 0x1;
-	ELOOP = 0x28;
-	ENETDOWN = 0x64;
-	ESTALE = 0x74;
-	ENOTSOCK = 0x58;
-	ENOSR = 0x3f;
-	ECHILD = 0xa;
-	ELNRNG = 0x30;
-	EPIPE = 0x20;
-	EBADMSG = 0x4a;
-	EBFONT = 0x3b;
-	EREMOTE = 0x42;
-	ETOOMANYREFS = 0x6d;
-	EPFNOSUPPORT = 0x60;
-	ENONET = 0x40;
-	EXFULL = 0x36;
-	EBADSLT = 0x39;
-	ENOTNAM = 0x76;
-	ELIBEXEC = 0x53;
-	ENOCSI = 0x32;
-	ENOTEMPTY = 0x27;
-	EADDRINUSE = 0x62;
-	ENETRESET = 0x66;
-	EISDIR = 0x15;
-	EIDRM = 0x2b;
-	ECOMM = 0x46;
-	EBADFD = 0x4d;
-	EL2HLT = 0x33;
-	ENOKEY = 0x7e;
-	EINVAL = 0x16;
-	ESHUTDOWN = 0x6c;
-	EKEYREJECTED = 0x81;
-	ELIBSCN = 0x51;
-	ENAVAIL = 0x77;
-	ENOSTR = 0x3c;
-	EOVERFLOW = 0x4b;
-	EUCLEAN = 0x75;
-	ENOMEDIUM = 0x7b;
-	EBUSY = 0x10;
-	EPROTO = 0x47;
-	ENODEV = 0x13;
-	EKEYEXPIRED = 0x7f;
-	EROFS = 0x1e;
-	ELIBACC = 0x4f;
-	E2BIG = 0x7;
-	EDEADLK = 0x23;
-	ECONNRESET = 0x68;
-	ENXIO = 0x6;
-	EBADRQC = 0x38;
-	ENAMETOOLONG = 0x24;
-	ESOCKTNOSUPPORT = 0x5e;
-	EDOTDOT = 0x49;
-	EADDRNOTAVAIL = 0x63;
-	ETIME = 0x3e;
-	EPROTONOSUPPORT = 0x5d;
-	ENOTRECOVERABLE = 0x83;
-	EIO = 0x5;
-	ENETUNREACH = 0x65;
-	EXDEV = 0x12;
-	EDQUOT = 0x7a;
-	EREMOTEIO = 0x79;
-	ENOSPC = 0x1c;
-	ENOEXEC = 0x8;
-	EMSGSIZE = 0x5a;
-	EDOM = 0x21;
-	EFBIG = 0x1b;
-	ESRCH = 0x3;
-	ECHRNG = 0x2c;
-	EHOSTDOWN = 0x70;
-	ENOLCK = 0x25;
-	ENFILE = 0x17;
-	ENOSYS = 0x26;
-	ENOTCONN = 0x6b;
-	ENOTSUP = 0x5f;
-	ESRMNT = 0x45;
-	EDEADLOCK = 0x23;
-	ECONNABORTED = 0x67;
-	ENOANO = 0x37;
-	EISCONN = 0x6a;
-	EUSERS = 0x57;
-	ENOPROTOOPT = 0x5c;
-	EMFILE = 0x18;
-	ENOBUFS = 0x69;
-	EL3HLT = 0x2e;
-	EFAULT = 0xe;
-	EWOULDBLOCK = 0xb;
-	ELIBBAD = 0x50;
-	ESTRPIPE = 0x56;
-	ECONNREFUSED = 0x6f;
-	EAGAIN = 0xb;
-	ELIBMAX = 0x52;
-	EEXIST = 0x11;
-	EL2NSYNC = 0x2d;
-	ENOENT = 0x2;
-	ENOPKG = 0x41;
-	EKEYREVOKED = 0x80;
-	EHOSTUNREACH = 0x71;
-	ENOTUNIQ = 0x4c;
-	EOPNOTSUPP = 0x5f;
-	ENOTDIR = 0x14;
-	EMEDIUMTYPE = 0x7c;
-	SIGBUS = 0x7;
-	SIGTTIN = 0x15;
-	SIGPROF = 0x1b;
-	SIGFPE = 0x8;
-	SIGHUP = 0x1;
-	SIGTTOU = 0x16;
-	SIGSTKFLT = 0x10;
-	SIGUSR1 = 0xa;
-	SIGURG = 0x17;
-	SIGQUIT = 0x3;
-	SIGCLD = 0x11;
-	SIGIO = 0x1d;
-	SIGABRT = 0x6;
-	SIGUSR2 = 0xc;
-	SIGTRAP = 0x5;
-	SIGVTALRM = 0x1a;
-	SIGPOLL = 0x1d;
-	SIGSEGV = 0xb;
-	SIGCONT = 0x12;
-	SIGPIPE = 0xd;
-	SIGWINCH = 0x1c;
-	SIGXFSZ = 0x19;
-	SIGCHLD = 0x11;
-	SIGSYS = 0x1f;
-	SIGSTOP = 0x13;
-	SIGALRM = 0xe;
-	SIGTSTP = 0x14;
-	SIGKILL = 0x9;
-	SIGXCPU = 0x18;
-	SIGUNUSED = 0x1f;
-	SIGPWR = 0x1e;
-	SIGILL = 0x4;
-	SIGINT = 0x2;
-	SIGIOT = 0x6;
-	SIGTERM = 0xf;
+	EMULTIHOP	= 0x48;
+	EUNATCH		= 0x31;
+	EAFNOSUPPORT	= 0x61;
+	EREMCHG		= 0x4e;
+	EACCES		= 0xd;
+	EL3RST		= 0x2f;
+	EDESTADDRREQ	= 0x59;
+	EILSEQ		= 0x54;
+	ESPIPE		= 0x1d;
+	EMLINK		= 0x1f;
+	EOWNERDEAD	= 0x82;
+	ENOTTY		= 0x19;
+	EBADE		= 0x34;
+	EBADF		= 0x9;
+	EBADR		= 0x35;
+	EADV		= 0x44;
+	ERANGE		= 0x22;
+	ECANCELED	= 0x7d;
+	ETXTBSY		= 0x1a;
+	ENOMEM		= 0xc;
+	EINPROGRESS	= 0x73;
+	ENOTBLK		= 0xf;
+	EPROTOTYPE	= 0x5b;
+	ERESTART	= 0x55;
+	EISNAM		= 0x78;
+	ENOMSG		= 0x2a;
+	EALREADY	= 0x72;
+	ETIMEDOUT	= 0x6e;
+	ENODATA		= 0x3d;
+	EINTR		= 0x4;
+	ENOLINK		= 0x43;
+	EPERM		= 0x1;
+	ELOOP		= 0x28;
+	ENETDOWN	= 0x64;
+	ESTALE		= 0x74;
+	ENOTSOCK	= 0x58;
+	ENOSR		= 0x3f;
+	ECHILD		= 0xa;
+	ELNRNG		= 0x30;
+	EPIPE		= 0x20;
+	EBADMSG		= 0x4a;
+	EBFONT		= 0x3b;
+	EREMOTE		= 0x42;
+	ETOOMANYREFS	= 0x6d;
+	EPFNOSUPPORT	= 0x60;
+	ENONET		= 0x40;
+	EXFULL		= 0x36;
+	EBADSLT		= 0x39;
+	ENOTNAM		= 0x76;
+	ELIBEXEC	= 0x53;
+	ENOCSI		= 0x32;
+	ENOTEMPTY	= 0x27;
+	EADDRINUSE	= 0x62;
+	ENETRESET	= 0x66;
+	EISDIR		= 0x15;
+	EIDRM		= 0x2b;
+	ECOMM		= 0x46;
+	EBADFD		= 0x4d;
+	EL2HLT		= 0x33;
+	ENOKEY		= 0x7e;
+	EINVAL		= 0x16;
+	ESHUTDOWN	= 0x6c;
+	EKEYREJECTED	= 0x81;
+	ELIBSCN		= 0x51;
+	ENAVAIL		= 0x77;
+	ENOSTR		= 0x3c;
+	EOVERFLOW	= 0x4b;
+	EUCLEAN		= 0x75;
+	ENOMEDIUM	= 0x7b;
+	EBUSY		= 0x10;
+	EPROTO		= 0x47;
+	ENODEV		= 0x13;
+	EKEYEXPIRED	= 0x7f;
+	EROFS		= 0x1e;
+	ELIBACC		= 0x4f;
+	E2BIG		= 0x7;
+	EDEADLK		= 0x23;
+	ECONNRESET	= 0x68;
+	ENXIO		= 0x6;
+	EBADRQC		= 0x38;
+	ENAMETOOLONG	= 0x24;
+	ESOCKTNOSUPPORT	= 0x5e;
+	EDOTDOT		= 0x49;
+	EADDRNOTAVAIL	= 0x63;
+	ETIME		= 0x3e;
+	EPROTONOSUPPORT	= 0x5d;
+	ENOTRECOVERABLE	= 0x83;
+	EIO		= 0x5;
+	ENETUNREACH	= 0x65;
+	EXDEV		= 0x12;
+	EDQUOT		= 0x7a;
+	EREMOTEIO	= 0x79;
+	ENOSPC		= 0x1c;
+	ENOEXEC		= 0x8;
+	EMSGSIZE	= 0x5a;
+	EDOM		= 0x21;
+	EFBIG		= 0x1b;
+	ESRCH		= 0x3;
+	ECHRNG		= 0x2c;
+	EHOSTDOWN	= 0x70;
+	ENOLCK		= 0x25;
+	ENFILE		= 0x17;
+	ENOSYS		= 0x26;
+	ENOTCONN	= 0x6b;
+	ENOTSUP		= 0x5f;
+	ESRMNT		= 0x45;
+	EDEADLOCK	= 0x23;
+	ECONNABORTED	= 0x67;
+	ENOANO		= 0x37;
+	EISCONN		= 0x6a;
+	EUSERS		= 0x57;
+	ENOPROTOOPT	= 0x5c;
+	EMFILE		= 0x18;
+	ENOBUFS		= 0x69;
+	EL3HLT		= 0x2e;
+	EFAULT		= 0xe;
+	EWOULDBLOCK	= 0xb;
+	ELIBBAD		= 0x50;
+	ESTRPIPE	= 0x56;
+	ECONNREFUSED	= 0x6f;
+	EAGAIN		= 0xb;
+	ELIBMAX		= 0x52;
+	EEXIST		= 0x11;
+	EL2NSYNC	= 0x2d;
+	ENOENT		= 0x2;
+	ENOPKG		= 0x41;
+	EKEYREVOKED	= 0x80;
+	EHOSTUNREACH	= 0x71;
+	ENOTUNIQ	= 0x4c;
+	EOPNOTSUPP	= 0x5f;
+	ENOTDIR		= 0x14;
+	EMEDIUMTYPE	= 0x7c;
+	SIGBUS		= 0x7;
+	SIGTTIN		= 0x15;
+	SIGPROF		= 0x1b;
+	SIGFPE		= 0x8;
+	SIGHUP		= 0x1;
+	SIGTTOU		= 0x16;
+	SIGSTKFLT	= 0x10;
+	SIGUSR1		= 0xa;
+	SIGURG		= 0x17;
+	SIGQUIT		= 0x3;
+	SIGCLD		= 0x11;
+	SIGIO		= 0x1d;
+	SIGABRT		= 0x6;
+	SIGUSR2		= 0xc;
+	SIGTRAP		= 0x5;
+	SIGVTALRM	= 0x1a;
+	SIGPOLL		= 0x1d;
+	SIGSEGV		= 0xb;
+	SIGCONT		= 0x12;
+	SIGPIPE		= 0xd;
+	SIGWINCH	= 0x1c;
+	SIGXFSZ		= 0x19;
+	SIGCHLD		= 0x11;
+	SIGSYS		= 0x1f;
+	SIGSTOP		= 0x13;
+	SIGALRM		= 0xe;
+	SIGTSTP		= 0x14;
+	SIGKILL		= 0x9;
+	SIGXCPU		= 0x18;
+	SIGUNUSED	= 0x1f;
+	SIGPWR		= 0x1e;
+	SIGILL		= 0x4;
+	SIGINT		= 0x2;
+	SIGIOT		= 0x6;
+	SIGTERM		= 0xf;
 )
 
 // Types
 
 
 // Error table
-var errors = [...]string {
+var errors = [...]string{
 	72: "multihop attempted",
 	49: "protocol driver not attached",
 	97: "address family not supported by protocol",
@@ -313,4 +313,3 @@ var errors = [...]string {
 	20: "not a directory",
 	124: "wrong medium type",
 }
-
diff --git a/src/pkg/syscall/zerrors_linux_amd64.go b/src/pkg/syscall/zerrors_linux_amd64.go
index 95d51e93fc..b876df3c5f 100644
--- a/src/pkg/syscall/zerrors_linux_amd64.go
+++ b/src/pkg/syscall/zerrors_linux_amd64.go
@@ -9,180 +9,180 @@ package syscall
 
 // Constants
 const (
-	EMULTIHOP = 0x48;
-	EUNATCH = 0x31;
-	EAFNOSUPPORT = 0x61;
-	EREMCHG = 0x4e;
-	EACCES = 0xd;
-	EL3RST = 0x2f;
-	EDESTADDRREQ = 0x59;
-	EILSEQ = 0x54;
-	ESPIPE = 0x1d;
-	EMLINK = 0x1f;
-	EOWNERDEAD = 0x82;
-	ENOTTY = 0x19;
-	EBADE = 0x34;
-	EBADF = 0x9;
-	EBADR = 0x35;
-	EADV = 0x44;
-	ERANGE = 0x22;
-	ECANCELED = 0x7d;
-	ETXTBSY = 0x1a;
-	ENOMEM = 0xc;
-	EINPROGRESS = 0x73;
-	ENOTBLK = 0xf;
-	EPROTOTYPE = 0x5b;
-	ERESTART = 0x55;
-	EISNAM = 0x78;
-	ENOMSG = 0x2a;
-	EALREADY = 0x72;
-	ETIMEDOUT = 0x6e;
-	ENODATA = 0x3d;
-	EINTR = 0x4;
-	ENOLINK = 0x43;
-	EPERM = 0x1;
-	ELOOP = 0x28;
-	ENETDOWN = 0x64;
-	ESTALE = 0x74;
-	ENOTSOCK = 0x58;
-	ENOSR = 0x3f;
-	ECHILD = 0xa;
-	ELNRNG = 0x30;
-	EPIPE = 0x20;
-	EBADMSG = 0x4a;
-	EBFONT = 0x3b;
-	EREMOTE = 0x42;
-	ETOOMANYREFS = 0x6d;
-	EPFNOSUPPORT = 0x60;
-	ENONET = 0x40;
-	EXFULL = 0x36;
-	EBADSLT = 0x39;
-	ENOTNAM = 0x76;
-	ELIBEXEC = 0x53;
-	ENOCSI = 0x32;
-	ENOTEMPTY = 0x27;
-	EADDRINUSE = 0x62;
-	ENETRESET = 0x66;
-	EISDIR = 0x15;
-	EIDRM = 0x2b;
-	ECOMM = 0x46;
-	EBADFD = 0x4d;
-	EL2HLT = 0x33;
-	ENOKEY = 0x7e;
-	EINVAL = 0x16;
-	ESHUTDOWN = 0x6c;
-	EKEYREJECTED = 0x81;
-	ELIBSCN = 0x51;
-	ENAVAIL = 0x77;
-	ENOSTR = 0x3c;
-	EOVERFLOW = 0x4b;
-	EUCLEAN = 0x75;
-	ENOMEDIUM = 0x7b;
-	EBUSY = 0x10;
-	EPROTO = 0x47;
-	ENODEV = 0x13;
-	EKEYEXPIRED = 0x7f;
-	EROFS = 0x1e;
-	ELIBACC = 0x4f;
-	E2BIG = 0x7;
-	EDEADLK = 0x23;
-	ECONNRESET = 0x68;
-	ENXIO = 0x6;
-	EBADRQC = 0x38;
-	ENAMETOOLONG = 0x24;
-	ESOCKTNOSUPPORT = 0x5e;
-	EDOTDOT = 0x49;
-	EADDRNOTAVAIL = 0x63;
-	ETIME = 0x3e;
-	EPROTONOSUPPORT = 0x5d;
-	ENOTRECOVERABLE = 0x83;
-	EIO = 0x5;
-	ENETUNREACH = 0x65;
-	EXDEV = 0x12;
-	EDQUOT = 0x7a;
-	EREMOTEIO = 0x79;
-	ENOSPC = 0x1c;
-	ENOEXEC = 0x8;
-	EMSGSIZE = 0x5a;
-	EDOM = 0x21;
-	EFBIG = 0x1b;
-	ESRCH = 0x3;
-	ECHRNG = 0x2c;
-	EHOSTDOWN = 0x70;
-	ENOLCK = 0x25;
-	ENFILE = 0x17;
-	ENOSYS = 0x26;
-	ENOTCONN = 0x6b;
-	ENOTSUP = 0x5f;
-	ESRMNT = 0x45;
-	EDEADLOCK = 0x23;
-	ECONNABORTED = 0x67;
-	ENOANO = 0x37;
-	EISCONN = 0x6a;
-	EUSERS = 0x57;
-	ENOPROTOOPT = 0x5c;
-	EMFILE = 0x18;
-	ENOBUFS = 0x69;
-	EL3HLT = 0x2e;
-	EFAULT = 0xe;
-	EWOULDBLOCK = 0xb;
-	ELIBBAD = 0x50;
-	ESTRPIPE = 0x56;
-	ECONNREFUSED = 0x6f;
-	EAGAIN = 0xb;
-	ELIBMAX = 0x52;
-	EEXIST = 0x11;
-	EL2NSYNC = 0x2d;
-	ENOENT = 0x2;
-	ENOPKG = 0x41;
-	EKEYREVOKED = 0x80;
-	EHOSTUNREACH = 0x71;
-	ENOTUNIQ = 0x4c;
-	EOPNOTSUPP = 0x5f;
-	ENOTDIR = 0x14;
-	EMEDIUMTYPE = 0x7c;
-	SIGBUS = 0x7;
-	SIGTTIN = 0x15;
-	SIGPROF = 0x1b;
-	SIGFPE = 0x8;
-	SIGHUP = 0x1;
-	SIGTTOU = 0x16;
-	SIGSTKFLT = 0x10;
-	SIGUSR1 = 0xa;
-	SIGURG = 0x17;
-	SIGQUIT = 0x3;
-	SIGCLD = 0x11;
-	SIGIO = 0x1d;
-	SIGABRT = 0x6;
-	SIGUSR2 = 0xc;
-	SIGTRAP = 0x5;
-	SIGVTALRM = 0x1a;
-	SIGPOLL = 0x1d;
-	SIGSEGV = 0xb;
-	SIGCONT = 0x12;
-	SIGPIPE = 0xd;
-	SIGWINCH = 0x1c;
-	SIGXFSZ = 0x19;
-	SIGCHLD = 0x11;
-	SIGSYS = 0x1f;
-	SIGSTOP = 0x13;
-	SIGALRM = 0xe;
-	SIGTSTP = 0x14;
-	SIGKILL = 0x9;
-	SIGXCPU = 0x18;
-	SIGUNUSED = 0x1f;
-	SIGPWR = 0x1e;
-	SIGILL = 0x4;
-	SIGINT = 0x2;
-	SIGIOT = 0x6;
-	SIGTERM = 0xf;
+	EMULTIHOP	= 0x48;
+	EUNATCH		= 0x31;
+	EAFNOSUPPORT	= 0x61;
+	EREMCHG		= 0x4e;
+	EACCES		= 0xd;
+	EL3RST		= 0x2f;
+	EDESTADDRREQ	= 0x59;
+	EILSEQ		= 0x54;
+	ESPIPE		= 0x1d;
+	EMLINK		= 0x1f;
+	EOWNERDEAD	= 0x82;
+	ENOTTY		= 0x19;
+	EBADE		= 0x34;
+	EBADF		= 0x9;
+	EBADR		= 0x35;
+	EADV		= 0x44;
+	ERANGE		= 0x22;
+	ECANCELED	= 0x7d;
+	ETXTBSY		= 0x1a;
+	ENOMEM		= 0xc;
+	EINPROGRESS	= 0x73;
+	ENOTBLK		= 0xf;
+	EPROTOTYPE	= 0x5b;
+	ERESTART	= 0x55;
+	EISNAM		= 0x78;
+	ENOMSG		= 0x2a;
+	EALREADY	= 0x72;
+	ETIMEDOUT	= 0x6e;
+	ENODATA		= 0x3d;
+	EINTR		= 0x4;
+	ENOLINK		= 0x43;
+	EPERM		= 0x1;
+	ELOOP		= 0x28;
+	ENETDOWN	= 0x64;
+	ESTALE		= 0x74;
+	ENOTSOCK	= 0x58;
+	ENOSR		= 0x3f;
+	ECHILD		= 0xa;
+	ELNRNG		= 0x30;
+	EPIPE		= 0x20;
+	EBADMSG		= 0x4a;
+	EBFONT		= 0x3b;
+	EREMOTE		= 0x42;
+	ETOOMANYREFS	= 0x6d;
+	EPFNOSUPPORT	= 0x60;
+	ENONET		= 0x40;
+	EXFULL		= 0x36;
+	EBADSLT		= 0x39;
+	ENOTNAM		= 0x76;
+	ELIBEXEC	= 0x53;
+	ENOCSI		= 0x32;
+	ENOTEMPTY	= 0x27;
+	EADDRINUSE	= 0x62;
+	ENETRESET	= 0x66;
+	EISDIR		= 0x15;
+	EIDRM		= 0x2b;
+	ECOMM		= 0x46;
+	EBADFD		= 0x4d;
+	EL2HLT		= 0x33;
+	ENOKEY		= 0x7e;
+	EINVAL		= 0x16;
+	ESHUTDOWN	= 0x6c;
+	EKEYREJECTED	= 0x81;
+	ELIBSCN		= 0x51;
+	ENAVAIL		= 0x77;
+	ENOSTR		= 0x3c;
+	EOVERFLOW	= 0x4b;
+	EUCLEAN		= 0x75;
+	ENOMEDIUM	= 0x7b;
+	EBUSY		= 0x10;
+	EPROTO		= 0x47;
+	ENODEV		= 0x13;
+	EKEYEXPIRED	= 0x7f;
+	EROFS		= 0x1e;
+	ELIBACC		= 0x4f;
+	E2BIG		= 0x7;
+	EDEADLK		= 0x23;
+	ECONNRESET	= 0x68;
+	ENXIO		= 0x6;
+	EBADRQC		= 0x38;
+	ENAMETOOLONG	= 0x24;
+	ESOCKTNOSUPPORT	= 0x5e;
+	EDOTDOT		= 0x49;
+	EADDRNOTAVAIL	= 0x63;
+	ETIME		= 0x3e;
+	EPROTONOSUPPORT	= 0x5d;
+	ENOTRECOVERABLE	= 0x83;
+	EIO		= 0x5;
+	ENETUNREACH	= 0x65;
+	EXDEV		= 0x12;
+	EDQUOT		= 0x7a;
+	EREMOTEIO	= 0x79;
+	ENOSPC		= 0x1c;
+	ENOEXEC		= 0x8;
+	EMSGSIZE	= 0x5a;
+	EDOM		= 0x21;
+	EFBIG		= 0x1b;
+	ESRCH		= 0x3;
+	ECHRNG		= 0x2c;
+	EHOSTDOWN	= 0x70;
+	ENOLCK		= 0x25;
+	ENFILE		= 0x17;
+	ENOSYS		= 0x26;
+	ENOTCONN	= 0x6b;
+	ENOTSUP		= 0x5f;
+	ESRMNT		= 0x45;
+	EDEADLOCK	= 0x23;
+	ECONNABORTED	= 0x67;
+	ENOANO		= 0x37;
+	EISCONN		= 0x6a;
+	EUSERS		= 0x57;
+	ENOPROTOOPT	= 0x5c;
+	EMFILE		= 0x18;
+	ENOBUFS		= 0x69;
+	EL3HLT		= 0x2e;
+	EFAULT		= 0xe;
+	EWOULDBLOCK	= 0xb;
+	ELIBBAD		= 0x50;
+	ESTRPIPE	= 0x56;
+	ECONNREFUSED	= 0x6f;
+	EAGAIN		= 0xb;
+	ELIBMAX		= 0x52;
+	EEXIST		= 0x11;
+	EL2NSYNC	= 0x2d;
+	ENOENT		= 0x2;
+	ENOPKG		= 0x41;
+	EKEYREVOKED	= 0x80;
+	EHOSTUNREACH	= 0x71;
+	ENOTUNIQ	= 0x4c;
+	EOPNOTSUPP	= 0x5f;
+	ENOTDIR		= 0x14;
+	EMEDIUMTYPE	= 0x7c;
+	SIGBUS		= 0x7;
+	SIGTTIN		= 0x15;
+	SIGPROF		= 0x1b;
+	SIGFPE		= 0x8;
+	SIGHUP		= 0x1;
+	SIGTTOU		= 0x16;
+	SIGSTKFLT	= 0x10;
+	SIGUSR1		= 0xa;
+	SIGURG		= 0x17;
+	SIGQUIT		= 0x3;
+	SIGCLD		= 0x11;
+	SIGIO		= 0x1d;
+	SIGABRT		= 0x6;
+	SIGUSR2		= 0xc;
+	SIGTRAP		= 0x5;
+	SIGVTALRM	= 0x1a;
+	SIGPOLL		= 0x1d;
+	SIGSEGV		= 0xb;
+	SIGCONT		= 0x12;
+	SIGPIPE		= 0xd;
+	SIGWINCH	= 0x1c;
+	SIGXFSZ		= 0x19;
+	SIGCHLD		= 0x11;
+	SIGSYS		= 0x1f;
+	SIGSTOP		= 0x13;
+	SIGALRM		= 0xe;
+	SIGTSTP		= 0x14;
+	SIGKILL		= 0x9;
+	SIGXCPU		= 0x18;
+	SIGUNUSED	= 0x1f;
+	SIGPWR		= 0x1e;
+	SIGILL		= 0x4;
+	SIGINT		= 0x2;
+	SIGIOT		= 0x6;
+	SIGTERM		= 0xf;
 )
 
 // Types
 
 
 // Error table
-var errors = [...]string {
+var errors = [...]string{
 	72: "multihop attempted",
 	49: "protocol driver not attached",
 	97: "address family not supported by protocol",
@@ -313,4 +313,3 @@ var errors = [...]string {
 	20: "not a directory",
 	124: "wrong medium type",
 }
-
diff --git a/src/pkg/syscall/zerrors_linux_arm.go b/src/pkg/syscall/zerrors_linux_arm.go
index 4c88829899..8ba2a33bfa 100644
--- a/src/pkg/syscall/zerrors_linux_arm.go
+++ b/src/pkg/syscall/zerrors_linux_arm.go
@@ -9,180 +9,180 @@ package syscall
 
 // Constants
 const (
-	EMULTIHOP = 0x48;
-	EUNATCH = 0x31;
-	EAFNOSUPPORT = 0x61;
-	EREMCHG = 0x4e;
-	EACCES = 0xd;
-	EL3RST = 0x2f;
-	EDESTADDRREQ = 0x59;
-	EILSEQ = 0x54;
-	ESPIPE = 0x1d;
-	EMLINK = 0x1f;
-	EOWNERDEAD = 0x82;
-	ENOTTY = 0x19;
-	EBADE = 0x34;
-	EBADF = 0x9;
-	EBADR = 0x35;
-	EADV = 0x44;
-	ERANGE = 0x22;
-	ECANCELED = 0x7d;
-	ETXTBSY = 0x1a;
-	ENOMEM = 0xc;
-	EINPROGRESS = 0x73;
-	ENOTEMPTY = 0x27;
-	ENOTBLK = 0xf;
-	EPROTOTYPE = 0x5b;
-	ERESTART = 0x55;
-	EISNAM = 0x78;
-	ENOMSG = 0x2a;
-	EALREADY = 0x72;
-	ETIMEDOUT = 0x6e;
-	ENODATA = 0x3d;
-	EINTR = 0x4;
-	ENOLINK = 0x43;
-	EPERM = 0x1;
-	ELOOP = 0x28;
-	ENETDOWN = 0x64;
-	ESTALE = 0x74;
-	ENOTSOCK = 0x58;
-	ENOSR = 0x3f;
-	ECHILD = 0xa;
-	ELNRNG = 0x30;
-	EPIPE = 0x20;
-	EBADMSG = 0x4a;
-	EBFONT = 0x3b;
-	EREMOTE = 0x42;
-	ETOOMANYREFS = 0x6d;
-	EPFNOSUPPORT = 0x60;
-	ENONET = 0x40;
-	EXFULL = 0x36;
-	EBADSLT = 0x39;
-	ENOTNAM = 0x76;
-	ENOCSI = 0x32;
-	EADDRINUSE = 0x62;
-	ENETRESET = 0x66;
-	EISDIR = 0x15;
-	EIDRM = 0x2b;
-	ECOMM = 0x46;
-	EBADFD = 0x4d;
-	EL2HLT = 0x33;
-	ENOKEY = 0x7e;
-	EINVAL = 0x16;
-	ESHUTDOWN = 0x6c;
-	EKEYREJECTED = 0x81;
-	ELIBSCN = 0x51;
-	ENAVAIL = 0x77;
-	EOVERFLOW = 0x4b;
-	EUCLEAN = 0x75;
-	ENOMEDIUM = 0x7b;
-	EBUSY = 0x10;
-	EPROTO = 0x47;
-	ENODEV = 0x13;
-	EKEYEXPIRED = 0x7f;
-	EROFS = 0x1e;
-	ELIBACC = 0x4f;
-	E2BIG = 0x7;
-	EDEADLK = 0x23;
-	ENOTDIR = 0x14;
-	ECONNRESET = 0x68;
-	ENXIO = 0x6;
-	EBADRQC = 0x38;
-	ENAMETOOLONG = 0x24;
-	ESOCKTNOSUPPORT = 0x5e;
-	ELIBEXEC = 0x53;
-	EDOTDOT = 0x49;
-	EADDRNOTAVAIL = 0x63;
-	ETIME = 0x3e;
-	EPROTONOSUPPORT = 0x5d;
-	ENOTRECOVERABLE = 0x83;
-	EIO = 0x5;
-	ENETUNREACH = 0x65;
-	EXDEV = 0x12;
-	EDQUOT = 0x7a;
-	EREMOTEIO = 0x79;
-	ENOSPC = 0x1c;
-	ENOEXEC = 0x8;
-	EMSGSIZE = 0x5a;
-	EDOM = 0x21;
-	ENOSTR = 0x3c;
-	EFBIG = 0x1b;
-	ESRCH = 0x3;
-	ECHRNG = 0x2c;
-	EHOSTDOWN = 0x70;
-	ENOLCK = 0x25;
-	ENFILE = 0x17;
-	ENOSYS = 0x26;
-	ENOTCONN = 0x6b;
-	ENOTSUP = 0x5f;
-	ESRMNT = 0x45;
-	EDEADLOCK = 0x23;
-	ECONNABORTED = 0x67;
-	ENOANO = 0x37;
-	EISCONN = 0x6a;
-	EUSERS = 0x57;
-	ENOPROTOOPT = 0x5c;
-	EMFILE = 0x18;
-	ENOBUFS = 0x69;
-	EL3HLT = 0x2e;
-	EFAULT = 0xe;
-	EWOULDBLOCK = 0xb;
-	ELIBBAD = 0x50;
-	ESTRPIPE = 0x56;
-	ECONNREFUSED = 0x6f;
-	EAGAIN = 0xb;
-	ELIBMAX = 0x52;
-	EEXIST = 0x11;
-	EL2NSYNC = 0x2d;
-	ENOENT = 0x2;
-	ENOPKG = 0x41;
-	EKEYREVOKED = 0x80;
-	EHOSTUNREACH = 0x71;
-	ENOTUNIQ = 0x4c;
-	EOPNOTSUPP = 0x5f;
-	EMEDIUMTYPE = 0x7c;
-	SIGBUS = 0x7;
-	SIGTTIN = 0x15;
-	SIGPROF = 0x1b;
-	SIGFPE = 0x8;
-	SIGHUP = 0x1;
-	SIGTTOU = 0x16;
-	SIGSTKFLT = 0x10;
-	SIGUSR1 = 0xa;
-	SIGURG = 0x17;
-	SIGIO = 0x1d;
-	SIGQUIT = 0x3;
-	SIGCLD = 0x11;
-	SIGABRT = 0x6;
-	SIGTRAP = 0x5;
-	SIGVTALRM = 0x1a;
-	SIGPOLL = 0x1d;
-	SIGSEGV = 0xb;
-	SIGCONT = 0x12;
-	SIGPIPE = 0xd;
-	SIGWINCH = 0x1c;
-	SIGXFSZ = 0x19;
-	SIGCHLD = 0x11;
-	SIGSYS = 0x1f;
-	SIGSTOP = 0x13;
-	SIGALRM = 0xe;
-	SIGUSR2 = 0xc;
-	SIGTSTP = 0x14;
-	SIGKILL = 0x9;
-	SIGXCPU = 0x18;
-	SIGUNUSED = 0x1f;
-	SIGPWR = 0x1e;
-	SIGILL = 0x4;
-	SIGINT = 0x2;
-	SIGIOT = 0x6;
-	SIGTERM = 0xf;
+	EMULTIHOP	= 0x48;
+	EUNATCH		= 0x31;
+	EAFNOSUPPORT	= 0x61;
+	EREMCHG		= 0x4e;
+	EACCES		= 0xd;
+	EL3RST		= 0x2f;
+	EDESTADDRREQ	= 0x59;
+	EILSEQ		= 0x54;
+	ESPIPE		= 0x1d;
+	EMLINK		= 0x1f;
+	EOWNERDEAD	= 0x82;
+	ENOTTY		= 0x19;
+	EBADE		= 0x34;
+	EBADF		= 0x9;
+	EBADR		= 0x35;
+	EADV		= 0x44;
+	ERANGE		= 0x22;
+	ECANCELED	= 0x7d;
+	ETXTBSY		= 0x1a;
+	ENOMEM		= 0xc;
+	EINPROGRESS	= 0x73;
+	ENOTEMPTY	= 0x27;
+	ENOTBLK		= 0xf;
+	EPROTOTYPE	= 0x5b;
+	ERESTART	= 0x55;
+	EISNAM		= 0x78;
+	ENOMSG		= 0x2a;
+	EALREADY	= 0x72;
+	ETIMEDOUT	= 0x6e;
+	ENODATA		= 0x3d;
+	EINTR		= 0x4;
+	ENOLINK		= 0x43;
+	EPERM		= 0x1;
+	ELOOP		= 0x28;
+	ENETDOWN	= 0x64;
+	ESTALE		= 0x74;
+	ENOTSOCK	= 0x58;
+	ENOSR		= 0x3f;
+	ECHILD		= 0xa;
+	ELNRNG		= 0x30;
+	EPIPE		= 0x20;
+	EBADMSG		= 0x4a;
+	EBFONT		= 0x3b;
+	EREMOTE		= 0x42;
+	ETOOMANYREFS	= 0x6d;
+	EPFNOSUPPORT	= 0x60;
+	ENONET		= 0x40;
+	EXFULL		= 0x36;
+	EBADSLT		= 0x39;
+	ENOTNAM		= 0x76;
+	ENOCSI		= 0x32;
+	EADDRINUSE	= 0x62;
+	ENETRESET	= 0x66;
+	EISDIR		= 0x15;
+	EIDRM		= 0x2b;
+	ECOMM		= 0x46;
+	EBADFD		= 0x4d;
+	EL2HLT		= 0x33;
+	ENOKEY		= 0x7e;
+	EINVAL		= 0x16;
+	ESHUTDOWN	= 0x6c;
+	EKEYREJECTED	= 0x81;
+	ELIBSCN		= 0x51;
+	ENAVAIL		= 0x77;
+	EOVERFLOW	= 0x4b;
+	EUCLEAN		= 0x75;
+	ENOMEDIUM	= 0x7b;
+	EBUSY		= 0x10;
+	EPROTO		= 0x47;
+	ENODEV		= 0x13;
+	EKEYEXPIRED	= 0x7f;
+	EROFS		= 0x1e;
+	ELIBACC		= 0x4f;
+	E2BIG		= 0x7;
+	EDEADLK		= 0x23;
+	ENOTDIR		= 0x14;
+	ECONNRESET	= 0x68;
+	ENXIO		= 0x6;
+	EBADRQC		= 0x38;
+	ENAMETOOLONG	= 0x24;
+	ESOCKTNOSUPPORT	= 0x5e;
+	ELIBEXEC	= 0x53;
+	EDOTDOT		= 0x49;
+	EADDRNOTAVAIL	= 0x63;
+	ETIME		= 0x3e;
+	EPROTONOSUPPORT	= 0x5d;
+	ENOTRECOVERABLE	= 0x83;
+	EIO		= 0x5;
+	ENETUNREACH	= 0x65;
+	EXDEV		= 0x12;
+	EDQUOT		= 0x7a;
+	EREMOTEIO	= 0x79;
+	ENOSPC		= 0x1c;
+	ENOEXEC		= 0x8;
+	EMSGSIZE	= 0x5a;
+	EDOM		= 0x21;
+	ENOSTR		= 0x3c;
+	EFBIG		= 0x1b;
+	ESRCH		= 0x3;
+	ECHRNG		= 0x2c;
+	EHOSTDOWN	= 0x70;
+	ENOLCK		= 0x25;
+	ENFILE		= 0x17;
+	ENOSYS		= 0x26;
+	ENOTCONN	= 0x6b;
+	ENOTSUP		= 0x5f;
+	ESRMNT		= 0x45;
+	EDEADLOCK	= 0x23;
+	ECONNABORTED	= 0x67;
+	ENOANO		= 0x37;
+	EISCONN		= 0x6a;
+	EUSERS		= 0x57;
+	ENOPROTOOPT	= 0x5c;
+	EMFILE		= 0x18;
+	ENOBUFS		= 0x69;
+	EL3HLT		= 0x2e;
+	EFAULT		= 0xe;
+	EWOULDBLOCK	= 0xb;
+	ELIBBAD		= 0x50;
+	ESTRPIPE	= 0x56;
+	ECONNREFUSED	= 0x6f;
+	EAGAIN		= 0xb;
+	ELIBMAX		= 0x52;
+	EEXIST		= 0x11;
+	EL2NSYNC	= 0x2d;
+	ENOENT		= 0x2;
+	ENOPKG		= 0x41;
+	EKEYREVOKED	= 0x80;
+	EHOSTUNREACH	= 0x71;
+	ENOTUNIQ	= 0x4c;
+	EOPNOTSUPP	= 0x5f;
+	EMEDIUMTYPE	= 0x7c;
+	SIGBUS		= 0x7;
+	SIGTTIN		= 0x15;
+	SIGPROF		= 0x1b;
+	SIGFPE		= 0x8;
+	SIGHUP		= 0x1;
+	SIGTTOU		= 0x16;
+	SIGSTKFLT	= 0x10;
+	SIGUSR1		= 0xa;
+	SIGURG		= 0x17;
+	SIGIO		= 0x1d;
+	SIGQUIT		= 0x3;
+	SIGCLD		= 0x11;
+	SIGABRT		= 0x6;
+	SIGTRAP		= 0x5;
+	SIGVTALRM	= 0x1a;
+	SIGPOLL		= 0x1d;
+	SIGSEGV		= 0xb;
+	SIGCONT		= 0x12;
+	SIGPIPE		= 0xd;
+	SIGWINCH	= 0x1c;
+	SIGXFSZ		= 0x19;
+	SIGCHLD		= 0x11;
+	SIGSYS		= 0x1f;
+	SIGSTOP		= 0x13;
+	SIGALRM		= 0xe;
+	SIGUSR2		= 0xc;
+	SIGTSTP		= 0x14;
+	SIGKILL		= 0x9;
+	SIGXCPU		= 0x18;
+	SIGUNUSED	= 0x1f;
+	SIGPWR		= 0x1e;
+	SIGILL		= 0x4;
+	SIGINT		= 0x2;
+	SIGIOT		= 0x6;
+	SIGTERM		= 0xf;
 )
 
 // Types
 
 
 // Error table
-var errors = [...]string {
+var errors = [...]string{
 	72: "multihop attempted",
 	49: "protocol driver not attached",
 	97: "address family not supported by protocol",
@@ -313,4 +313,3 @@ var errors = [...]string {
 	76: "name not unique on network",
 	124: "wrong medium type",
 }
-
diff --git a/src/pkg/syscall/zerrors_nacl_386.go b/src/pkg/syscall/zerrors_nacl_386.go
index e231133b85..c80557e49f 100644
--- a/src/pkg/syscall/zerrors_nacl_386.go
+++ b/src/pkg/syscall/zerrors_nacl_386.go
@@ -4,131 +4,131 @@
 package syscall
 
 const (
-	EPERM = 1;
-	ENOENT = 2;
-	ESRCH = 3;
-	EINTR = 4;
-	EIO = 5;
-	ENXIO = 6;
-	E2BIG = 7;
-	ENOEXEC = 8;
-	EBADF = 9;
-	ECHILD = 10;
-	EAGAIN = 11;
-	ENOMEM = 12;
-	EACCES = 13;
-	EFAULT = 14;
-	EBUSY = 16;
-	EEXIST = 17;
-	EXDEV = 18;
-	ENODEV = 19;
-	ENOTDIR = 20;
-	EISDIR = 21;
-	EINVAL = 22;
-	ENFILE = 23;
-	EMFILE = 24;
-	ENOTTY = 25;
-	EFBIG = 27;
-	ENOSPC = 28;
-	ESPIPE = 29;
-	EROFS = 30;
-	EMLINK = 31;
-	EPIPE = 32;
-	ENAMETOOLONG = 36;
-	ENOSYS = 38;
-	EDQUOT = 122;
-	EDOM = 33;
-	ERANGE = 34;
-	ENOMSG = 35;
-	ECHRNG = 37;
-	EL3HLT = 39;
-	EL3RST = 40;
-	ELNRNG = 41;
-	EUNATCH = 42;
-	ENOCSI = 43;
-	EL2HLT = 44;
-	EDEADLK = 45;
-	ENOLCK = 46;
-	EBADE = 50;
-	EBADR = 51;
-	EXFULL = 52;
-	ENOANO = 53;
-	EBADRQC = 54;
-	EBADSLT = 55;
-	EBFONT = 57;
-	ENOSTR = 60;
-	ENODATA = 61;
-	ETIME = 62;
-	ENOSR = 63;
-	ENONET = 64;
-	ENOPKG = 65;
-	EREMOTE = 66;
-	ENOLINK = 67;
-	EADV = 68;
-	ESRMNT = 69;
-	ECOMM = 70;
-	EPROTO = 71;
-	EMULTIHOP = 74;
-	ELBIN = 75;
-	EDOTDOT = 76;
-	EBADMSG = 77;
-	EFTYPE = 79;
-	ENOTUNIQ = 80;
-	EBADFD = 81;
-	EREMCHG = 82;
-	ELIBACC = 83;
-	ELIBBAD = 84;
-	ELIBSCN = 85;
-	ELIBMAX = 86;
-	ELIBEXEC = 87;
-	ENMFILE = 89;
-	ENOTEMPTY = 90;
-	ELOOP = 92;
-	EOPNOTSUPP = 95;
-	EPFNOSUPPORT = 96;
-	ECONNRESET = 104;
-	ENOBUFS = 105;
-	EAFNOSUPPORT = 106;
-	EPROTOTYPE = 107;
-	ENOTSOCK = 108;
-	ENOPROTOOPT = 109;
-	ESHUTDOWN = 110;
-	ECONNREFUSED = 111;
-	EADDRINUSE = 112;
-	ECONNABORTED = 113;
-	ENETUNREACH = 114;
-	ENETDOWN = 115;
-	ETIMEDOUT = 116;
-	EHOSTDOWN = 117;
-	EHOSTUNREACH = 118;
-	EINPROGRESS = 119;
-	EALREADY = 120;
-	EDESTADDRREQ = 121;
-	EPROTONOSUPPORT = 123;
-	ESOCKTNOSUPPORT = 124;
-	EADDRNOTAVAIL = 125;
-	ENETRESET = 126;
-	EISCONN = 127;
-	ENOTCONN = 128;
-	ETOOMANYREFS = 129;
-	EPROCLIM = 130;
-	EUSERS = 131;
-	ESTALE = 133;
-	ENOMEDIUM = 135;
-	ENOSHARE = 136;
-	ECASECLASH = 137;
-	EILSEQ = 138;
-	EOVERFLOW = 139;
-	ECANCELED = 140;
-	EL2NSYNC = 88;
-	EIDRM = 91;
-	EMSGSIZE = 132;
-	ENACL = 99;	/* otherwise unused */
+	EPERM		= 1;
+	ENOENT		= 2;
+	ESRCH		= 3;
+	EINTR		= 4;
+	EIO		= 5;
+	ENXIO		= 6;
+	E2BIG		= 7;
+	ENOEXEC		= 8;
+	EBADF		= 9;
+	ECHILD		= 10;
+	EAGAIN		= 11;
+	ENOMEM		= 12;
+	EACCES		= 13;
+	EFAULT		= 14;
+	EBUSY		= 16;
+	EEXIST		= 17;
+	EXDEV		= 18;
+	ENODEV		= 19;
+	ENOTDIR		= 20;
+	EISDIR		= 21;
+	EINVAL		= 22;
+	ENFILE		= 23;
+	EMFILE		= 24;
+	ENOTTY		= 25;
+	EFBIG		= 27;
+	ENOSPC		= 28;
+	ESPIPE		= 29;
+	EROFS		= 30;
+	EMLINK		= 31;
+	EPIPE		= 32;
+	ENAMETOOLONG	= 36;
+	ENOSYS		= 38;
+	EDQUOT		= 122;
+	EDOM		= 33;
+	ERANGE		= 34;
+	ENOMSG		= 35;
+	ECHRNG		= 37;
+	EL3HLT		= 39;
+	EL3RST		= 40;
+	ELNRNG		= 41;
+	EUNATCH		= 42;
+	ENOCSI		= 43;
+	EL2HLT		= 44;
+	EDEADLK		= 45;
+	ENOLCK		= 46;
+	EBADE		= 50;
+	EBADR		= 51;
+	EXFULL		= 52;
+	ENOANO		= 53;
+	EBADRQC		= 54;
+	EBADSLT		= 55;
+	EBFONT		= 57;
+	ENOSTR		= 60;
+	ENODATA		= 61;
+	ETIME		= 62;
+	ENOSR		= 63;
+	ENONET		= 64;
+	ENOPKG		= 65;
+	EREMOTE		= 66;
+	ENOLINK		= 67;
+	EADV		= 68;
+	ESRMNT		= 69;
+	ECOMM		= 70;
+	EPROTO		= 71;
+	EMULTIHOP	= 74;
+	ELBIN		= 75;
+	EDOTDOT		= 76;
+	EBADMSG		= 77;
+	EFTYPE		= 79;
+	ENOTUNIQ	= 80;
+	EBADFD		= 81;
+	EREMCHG		= 82;
+	ELIBACC		= 83;
+	ELIBBAD		= 84;
+	ELIBSCN		= 85;
+	ELIBMAX		= 86;
+	ELIBEXEC	= 87;
+	ENMFILE		= 89;
+	ENOTEMPTY	= 90;
+	ELOOP		= 92;
+	EOPNOTSUPP	= 95;
+	EPFNOSUPPORT	= 96;
+	ECONNRESET	= 104;
+	ENOBUFS		= 105;
+	EAFNOSUPPORT	= 106;
+	EPROTOTYPE	= 107;
+	ENOTSOCK	= 108;
+	ENOPROTOOPT	= 109;
+	ESHUTDOWN	= 110;
+	ECONNREFUSED	= 111;
+	EADDRINUSE	= 112;
+	ECONNABORTED	= 113;
+	ENETUNREACH	= 114;
+	ENETDOWN	= 115;
+	ETIMEDOUT	= 116;
+	EHOSTDOWN	= 117;
+	EHOSTUNREACH	= 118;
+	EINPROGRESS	= 119;
+	EALREADY	= 120;
+	EDESTADDRREQ	= 121;
+	EPROTONOSUPPORT	= 123;
+	ESOCKTNOSUPPORT	= 124;
+	EADDRNOTAVAIL	= 125;
+	ENETRESET	= 126;
+	EISCONN		= 127;
+	ENOTCONN	= 128;
+	ETOOMANYREFS	= 129;
+	EPROCLIM	= 130;
+	EUSERS		= 131;
+	ESTALE		= 133;
+	ENOMEDIUM	= 135;
+	ENOSHARE	= 136;
+	ECASECLASH	= 137;
+	EILSEQ		= 138;
+	EOVERFLOW	= 139;
+	ECANCELED	= 140;
+	EL2NSYNC	= 88;
+	EIDRM		= 91;
+	EMSGSIZE	= 132;
+	ENACL		= 99;	/* otherwise unused */
 )
 
 
 // Error table
-var errors = [...]string {
+var errors = [...]string{
 	EPERM: "operation not permitted",
 	ENOENT: "no such file or directory",
 	ESRCH: "no such process",
diff --git a/src/pkg/syscall/zsyscall_darwin_386.go b/src/pkg/syscall/zsyscall_darwin_386.go
index b58d1dfe7a..29c11f6a7e 100644
--- a/src/pkg/syscall/zsyscall_darwin_386.go
+++ b/src/pkg/syscall/zsyscall_darwin_386.go
@@ -86,7 +86,9 @@ func kevent(kq int, change uintptr, nchange int, event uintptr, nevent int, time
 
 func sysctl(mib []_C_int, old *byte, oldlen *uintptr, new *byte, newlen uintptr) (errno int) {
 	var _p0 *_C_int;
-	if len(mib) > 0 { _p0 = &mib[0]; }
+	if len(mib) > 0 {
+		_p0 = &mib[0];
+	}
 	_, _, e1 := Syscall6(SYS___SYSCTL, uintptr(unsafe.Pointer(_p0)), uintptr(len(mib)), uintptr(unsafe.Pointer(old)), uintptr(unsafe.Pointer(oldlen)), uintptr(unsafe.Pointer(new)), uintptr(newlen));
 	errno = int(e1);
 	return;
@@ -166,7 +168,7 @@ func Exchangedata(path1 string, path2 string, options int) (errno int) {
 	return;
 }
 
-func Exit(code int) () {
+func Exit(code int) {
 	Syscall(SYS_EXIT, uintptr(code), 0, 0);
 	return;
 }
@@ -227,14 +229,16 @@ func Fsync(fd int) (errno int) {
 }
 
 func Ftruncate(fd int, length int64) (errno int) {
-	_, _, e1 := Syscall(SYS_FTRUNCATE, uintptr(fd), uintptr(length), uintptr(length >> 32));
+	_, _, e1 := Syscall(SYS_FTRUNCATE, uintptr(fd), uintptr(length), uintptr(length>>32));
 	errno = int(e1);
 	return;
 }
 
 func Getdirentries(fd int, buf []byte, basep *uintptr) (n int, errno int) {
 	var _p0 *byte;
-	if len(buf) > 0 { _p0 = &buf[0]; }
+	if len(buf) > 0 {
+		_p0 = &buf[0];
+	}
 	r0, _, e1 := Syscall6(SYS_GETDIRENTRIES64, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)), uintptr(unsafe.Pointer(basep)), 0, 0);
 	n = int(r0);
 	errno = int(e1);
@@ -261,7 +265,9 @@ func Geteuid() (uid int) {
 
 func Getfsstat(buf []Statfs_t, flags int) (n int, errno int) {
 	var _p0 *Statfs_t;
-	if len(buf) > 0 { _p0 = &buf[0]; }
+	if len(buf) > 0 {
+		_p0 = &buf[0];
+	}
 	r0, _, e1 := Syscall(SYS_GETFSSTAT64, uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)), uintptr(flags));
 	n = int(r0);
 	errno = int(e1);
@@ -408,8 +414,10 @@ func Pathconf(path string, name int) (val int, errno int) {
 
 func Pread(fd int, p []byte, offset int64) (n int, errno int) {
 	var _p0 *byte;
-	if len(p) > 0 { _p0 = &p[0]; }
-	r0, _, e1 := Syscall6(SYS_PREAD, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), uintptr(offset), uintptr(offset >> 32), 0);
+	if len(p) > 0 {
+		_p0 = &p[0];
+	}
+	r0, _, e1 := Syscall6(SYS_PREAD, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), uintptr(offset), uintptr(offset>>32), 0);
 	n = int(r0);
 	errno = int(e1);
 	return;
@@ -417,8 +425,10 @@ func Pread(fd int, p []byte, offset int64) (n int, errno int) {
 
 func Pwrite(fd int, p []byte, offset int64) (n int, errno int) {
 	var _p0 *byte;
-	if len(p) > 0 { _p0 = &p[0]; }
-	r0, _, e1 := Syscall6(SYS_PWRITE, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), uintptr(offset), uintptr(offset >> 32), 0);
+	if len(p) > 0 {
+		_p0 = &p[0];
+	}
+	r0, _, e1 := Syscall6(SYS_PWRITE, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), uintptr(offset), uintptr(offset>>32), 0);
 	n = int(r0);
 	errno = int(e1);
 	return;
@@ -426,7 +436,9 @@ func Pwrite(fd int, p []byte, offset int64) (n int, errno int) {
 
 func Read(fd int, p []byte) (n int, errno int) {
 	var _p0 *byte;
-	if len(p) > 0 { _p0 = &p[0]; }
+	if len(p) > 0 {
+		_p0 = &p[0];
+	}
 	r0, _, e1 := Syscall(SYS_READ, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)));
 	n = int(r0);
 	errno = int(e1);
@@ -435,7 +447,9 @@ func Read(fd int, p []byte) (n int, errno int) {
 
 func Readlink(path string, buf []byte) (n int, errno int) {
 	var _p0 *byte;
-	if len(buf) > 0 { _p0 = &buf[0]; }
+	if len(buf) > 0 {
+		_p0 = &buf[0];
+	}
 	r0, _, e1 := Syscall(SYS_READLINK, uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)));
 	n = int(r0);
 	errno = int(e1);
@@ -461,7 +475,7 @@ func Rmdir(path string) (errno int) {
 }
 
 func Seek(fd int, offset int64, whence int) (newoffset int64, errno int) {
-	r0, r1, _ := Syscall6(SYS_LSEEK, uintptr(fd), uintptr(offset), uintptr(offset >> 32), uintptr(whence), 0, 0);
+	r0, r1, _ := Syscall6(SYS_LSEEK, uintptr(fd), uintptr(offset), uintptr(offset>>32), uintptr(whence), 0, 0);
 	newoffset = int64(int64(r1)<<32 | int64(r0));
 	return;
 }
@@ -576,7 +590,7 @@ func Sync() (errno int) {
 }
 
 func Truncate(path string, length int64) (errno int) {
-	_, _, e1 := Syscall(SYS_TRUNCATE, uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(length), uintptr(length >> 32));
+	_, _, e1 := Syscall(SYS_TRUNCATE, uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(length), uintptr(length>>32));
 	errno = int(e1);
 	return;
 }
@@ -607,7 +621,9 @@ func Unmount(path string, flags int) (errno int) {
 
 func Write(fd int, p []byte) (n int, errno int) {
 	var _p0 *byte;
-	if len(p) > 0 { _p0 = &p[0]; }
+	if len(p) > 0 {
+		_p0 = &p[0];
+	}
 	r0, _, e1 := Syscall(SYS_WRITE, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)));
 	n = int(r0);
 	errno = int(e1);
@@ -635,6 +651,3 @@ func gettimeofday(tp *Timeval) (sec int32, usec int32, errno int) {
 	errno = int(e1);
 	return;
 }
-
-
-
diff --git a/src/pkg/syscall/zsyscall_darwin_amd64.go b/src/pkg/syscall/zsyscall_darwin_amd64.go
index 3c3c9120d7..40aae8e121 100644
--- a/src/pkg/syscall/zsyscall_darwin_amd64.go
+++ b/src/pkg/syscall/zsyscall_darwin_amd64.go
@@ -86,7 +86,9 @@ func kevent(kq int, change uintptr, nchange int, event uintptr, nevent int, time
 
 func sysctl(mib []_C_int, old *byte, oldlen *uintptr, new *byte, newlen uintptr) (errno int) {
 	var _p0 *_C_int;
-	if len(mib) > 0 { _p0 = &mib[0]; }
+	if len(mib) > 0 {
+		_p0 = &mib[0];
+	}
 	_, _, e1 := Syscall6(SYS___SYSCTL, uintptr(unsafe.Pointer(_p0)), uintptr(len(mib)), uintptr(unsafe.Pointer(old)), uintptr(unsafe.Pointer(oldlen)), uintptr(unsafe.Pointer(new)), uintptr(newlen));
 	errno = int(e1);
 	return;
@@ -166,7 +168,7 @@ func Exchangedata(path1 string, path2 string, options int) (errno int) {
 	return;
 }
 
-func Exit(code int) () {
+func Exit(code int) {
 	Syscall(SYS_EXIT, uintptr(code), 0, 0);
 	return;
 }
@@ -234,7 +236,9 @@ func Ftruncate(fd int, length int64) (errno int) {
 
 func Getdirentries(fd int, buf []byte, basep *uintptr) (n int, errno int) {
 	var _p0 *byte;
-	if len(buf) > 0 { _p0 = &buf[0]; }
+	if len(buf) > 0 {
+		_p0 = &buf[0];
+	}
 	r0, _, e1 := Syscall6(SYS_GETDIRENTRIES64, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)), uintptr(unsafe.Pointer(basep)), 0, 0);
 	n = int(r0);
 	errno = int(e1);
@@ -261,7 +265,9 @@ func Geteuid() (uid int) {
 
 func Getfsstat(buf []Statfs_t, flags int) (n int, errno int) {
 	var _p0 *Statfs_t;
-	if len(buf) > 0 { _p0 = &buf[0]; }
+	if len(buf) > 0 {
+		_p0 = &buf[0];
+	}
 	r0, _, e1 := Syscall(SYS_GETFSSTAT64, uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)), uintptr(flags));
 	n = int(r0);
 	errno = int(e1);
@@ -408,7 +414,9 @@ func Pathconf(path string, name int) (val int, errno int) {
 
 func Pread(fd int, p []byte, offset int64) (n int, errno int) {
 	var _p0 *byte;
-	if len(p) > 0 { _p0 = &p[0]; }
+	if len(p) > 0 {
+		_p0 = &p[0];
+	}
 	r0, _, e1 := Syscall6(SYS_PREAD, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), uintptr(offset), 0, 0);
 	n = int(r0);
 	errno = int(e1);
@@ -417,7 +425,9 @@ func Pread(fd int, p []byte, offset int64) (n int, errno int) {
 
 func Pwrite(fd int, p []byte, offset int64) (n int, errno int) {
 	var _p0 *byte;
-	if len(p) > 0 { _p0 = &p[0]; }
+	if len(p) > 0 {
+		_p0 = &p[0];
+	}
 	r0, _, e1 := Syscall6(SYS_PWRITE, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), uintptr(offset), 0, 0);
 	n = int(r0);
 	errno = int(e1);
@@ -426,7 +436,9 @@ func Pwrite(fd int, p []byte, offset int64) (n int, errno int) {
 
 func Read(fd int, p []byte) (n int, errno int) {
 	var _p0 *byte;
-	if len(p) > 0 { _p0 = &p[0]; }
+	if len(p) > 0 {
+		_p0 = &p[0];
+	}
 	r0, _, e1 := Syscall(SYS_READ, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)));
 	n = int(r0);
 	errno = int(e1);
@@ -435,7 +447,9 @@ func Read(fd int, p []byte) (n int, errno int) {
 
 func Readlink(path string, buf []byte) (n int, errno int) {
 	var _p0 *byte;
-	if len(buf) > 0 { _p0 = &buf[0]; }
+	if len(buf) > 0 {
+		_p0 = &buf[0];
+	}
 	r0, _, e1 := Syscall(SYS_READLINK, uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)));
 	n = int(r0);
 	errno = int(e1);
@@ -608,7 +622,9 @@ func Unmount(path string, flags int) (errno int) {
 
 func Write(fd int, p []byte) (n int, errno int) {
 	var _p0 *byte;
-	if len(p) > 0 { _p0 = &p[0]; }
+	if len(p) > 0 {
+		_p0 = &p[0];
+	}
 	r0, _, e1 := Syscall(SYS_WRITE, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)));
 	n = int(r0);
 	errno = int(e1);
@@ -636,6 +652,3 @@ func gettimeofday(tp *Timeval) (sec int64, usec int32, errno int) {
 	errno = int(e1);
 	return;
 }
-
-
-
diff --git a/src/pkg/syscall/zsyscall_linux_386.go b/src/pkg/syscall/zsyscall_linux_386.go
index 766d928c6f..226e9d6c06 100644
--- a/src/pkg/syscall/zsyscall_linux_386.go
+++ b/src/pkg/syscall/zsyscall_linux_386.go
@@ -25,7 +25,9 @@ func futimesat(dirfd int, path string, times *[2]Timeval) (errno int) {
 
 func Getcwd(buf []byte) (n int, errno int) {
 	var _p0 *byte;
-	if len(buf) > 0 { _p0 = &buf[0]; }
+	if len(buf) > 0 {
+		_p0 = &buf[0];
+	}
 	r0, _, e1 := Syscall(SYS_GETCWD, uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)), 0);
 	n = int(r0);
 	errno = int(e1);
@@ -124,14 +126,16 @@ func EpollCtl(epfd int, op int, fd int, event *EpollEvent) (errno int) {
 
 func EpollWait(epfd int, events []EpollEvent, msec int) (n int, errno int) {
 	var _p0 *EpollEvent;
-	if len(events) > 0 { _p0 = &events[0]; }
+	if len(events) > 0 {
+		_p0 = &events[0];
+	}
 	r0, _, e1 := Syscall6(SYS_EPOLL_WAIT, uintptr(epfd), uintptr(unsafe.Pointer(_p0)), uintptr(len(events)), uintptr(msec), 0, 0);
 	n = int(r0);
 	errno = int(e1);
 	return;
 }
 
-func Exit(code int) () {
+func Exit(code int) {
 	Syscall(SYS_EXIT_GROUP, uintptr(code), 0, 0);
 	return;
 }
@@ -143,7 +147,7 @@ func Faccessat(dirfd int, path string, mode int, flags int) (errno int) {
 }
 
 func Fallocate(fd int, mode int, off int64, len int64) (errno int) {
-	_, _, e1 := Syscall6(SYS_FALLOCATE, uintptr(fd), uintptr(mode), uintptr(off), uintptr(off >> 32), uintptr(len), uintptr(len >> 32));
+	_, _, e1 := Syscall6(SYS_FALLOCATE, uintptr(fd), uintptr(mode), uintptr(off), uintptr(off>>32), uintptr(len), uintptr(len>>32));
 	errno = int(e1);
 	return;
 }
@@ -192,14 +196,16 @@ func Fsync(fd int) (errno int) {
 }
 
 func Ftruncate(fd int, length int64) (errno int) {
-	_, _, e1 := Syscall(SYS_FTRUNCATE, uintptr(fd), uintptr(length), uintptr(length >> 32));
+	_, _, e1 := Syscall(SYS_FTRUNCATE, uintptr(fd), uintptr(length), uintptr(length>>32));
 	errno = int(e1);
 	return;
 }
 
 func Getdents(fd int, buf []byte) (n int, errno int) {
 	var _p0 *byte;
-	if len(buf) > 0 { _p0 = &buf[0]; }
+	if len(buf) > 0 {
+		_p0 = &buf[0];
+	}
 	r0, _, e1 := Syscall(SYS_GETDENTS64, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)));
 	n = int(r0);
 	errno = int(e1);
@@ -275,7 +281,9 @@ func Kill(pid int, sig int) (errno int) {
 
 func Klogctl(typ int, buf []byte) (n int, errno int) {
 	var _p0 *byte;
-	if len(buf) > 0 { _p0 = &buf[0]; }
+	if len(buf) > 0 {
+		_p0 = &buf[0];
+	}
 	r0, _, e1 := Syscall(SYS_SYSLOG, uintptr(typ), uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)));
 	n = int(r0);
 	errno = int(e1);
@@ -346,8 +354,10 @@ func PivotRoot(newroot string, putold string) (errno int) {
 
 func Pread(fd int, p []byte, offset int64) (n int, errno int) {
 	var _p0 *byte;
-	if len(p) > 0 { _p0 = &p[0]; }
-	r0, _, e1 := Syscall6(SYS_PREAD64, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), uintptr(offset), uintptr(offset >> 32), 0);
+	if len(p) > 0 {
+		_p0 = &p[0];
+	}
+	r0, _, e1 := Syscall6(SYS_PREAD64, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), uintptr(offset), uintptr(offset>>32), 0);
 	n = int(r0);
 	errno = int(e1);
 	return;
@@ -355,8 +365,10 @@ func Pread(fd int, p []byte, offset int64) (n int, errno int) {
 
 func Pwrite(fd int, p []byte, offset int64) (n int, errno int) {
 	var _p0 *byte;
-	if len(p) > 0 { _p0 = &p[0]; }
-	r0, _, e1 := Syscall6(SYS_PWRITE64, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), uintptr(offset), uintptr(offset >> 32), 0);
+	if len(p) > 0 {
+		_p0 = &p[0];
+	}
+	r0, _, e1 := Syscall6(SYS_PWRITE64, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), uintptr(offset), uintptr(offset>>32), 0);
 	n = int(r0);
 	errno = int(e1);
 	return;
@@ -364,7 +376,9 @@ func Pwrite(fd int, p []byte, offset int64) (n int, errno int) {
 
 func Read(fd int, p []byte) (n int, errno int) {
 	var _p0 *byte;
-	if len(p) > 0 { _p0 = &p[0]; }
+	if len(p) > 0 {
+		_p0 = &p[0];
+	}
 	r0, _, e1 := Syscall(SYS_READ, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)));
 	n = int(r0);
 	errno = int(e1);
@@ -373,7 +387,9 @@ func Read(fd int, p []byte) (n int, errno int) {
 
 func Readlink(path string, buf []byte) (n int, errno int) {
 	var _p0 *byte;
-	if len(buf) > 0 { _p0 = &buf[0]; }
+	if len(buf) > 0 {
+		_p0 = &buf[0];
+	}
 	r0, _, e1 := Syscall(SYS_READLINK, uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)));
 	n = int(r0);
 	errno = int(e1);
@@ -400,7 +416,9 @@ func Rmdir(path string) (errno int) {
 
 func Setdomainname(p []byte) (errno int) {
 	var _p0 *byte;
-	if len(p) > 0 { _p0 = &p[0]; }
+	if len(p) > 0 {
+		_p0 = &p[0];
+	}
 	_, _, e1 := Syscall(SYS_SETDOMAINNAME, uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), 0);
 	errno = int(e1);
 	return;
@@ -408,7 +426,9 @@ func Setdomainname(p []byte) (errno int) {
 
 func Sethostname(p []byte) (errno int) {
 	var _p0 *byte;
-	if len(p) > 0 { _p0 = &p[0]; }
+	if len(p) > 0 {
+		_p0 = &p[0];
+	}
 	_, _, e1 := Syscall(SYS_SETHOSTNAME, uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), 0);
 	errno = int(e1);
 	return;
@@ -456,13 +476,13 @@ func Symlink(oldpath string, newpath string) (errno int) {
 	return;
 }
 
-func Sync() () {
+func Sync() {
 	Syscall(SYS_SYNC, 0, 0, 0);
 	return;
 }
 
 func SyncFileRange(fd int, off int64, n int64, flags int) (errno int) {
-	_, _, e1 := Syscall6(SYS_SYNC_FILE_RANGE, uintptr(fd), uintptr(off), uintptr(off >> 32), uintptr(n), uintptr(n >> 32), uintptr(flags));
+	_, _, e1 := Syscall6(SYS_SYNC_FILE_RANGE, uintptr(fd), uintptr(off), uintptr(off>>32), uintptr(n), uintptr(n>>32), uintptr(flags));
 	errno = int(e1);
 	return;
 }
@@ -500,7 +520,7 @@ func Times(tms *Tms) (ticks uintptr, errno int) {
 }
 
 func Truncate(path string, length int64) (errno int) {
-	_, _, e1 := Syscall(SYS_TRUNCATE, uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(length), uintptr(length >> 32));
+	_, _, e1 := Syscall(SYS_TRUNCATE, uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(length), uintptr(length>>32));
 	errno = int(e1);
 	return;
 }
@@ -549,7 +569,9 @@ func Utime(path string, buf *Utimbuf) (errno int) {
 
 func Write(fd int, p []byte) (n int, errno int) {
 	var _p0 *byte;
-	if len(p) > 0 { _p0 = &p[0]; }
+	if len(p) > 0 {
+		_p0 = &p[0];
+	}
 	r0, _, e1 := Syscall(SYS_WRITE, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)));
 	n = int(r0);
 	errno = int(e1);
@@ -709,6 +731,3 @@ func Select(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timeval) (n int, err
 	errno = int(e1);
 	return;
 }
-
-
-
diff --git a/src/pkg/syscall/zsyscall_linux_amd64.go b/src/pkg/syscall/zsyscall_linux_amd64.go
index 59ceb74c38..597ba05589 100644
--- a/src/pkg/syscall/zsyscall_linux_amd64.go
+++ b/src/pkg/syscall/zsyscall_linux_amd64.go
@@ -25,7 +25,9 @@ func futimesat(dirfd int, path string, times *[2]Timeval) (errno int) {
 
 func Getcwd(buf []byte) (n int, errno int) {
 	var _p0 *byte;
-	if len(buf) > 0 { _p0 = &buf[0]; }
+	if len(buf) > 0 {
+		_p0 = &buf[0];
+	}
 	r0, _, e1 := Syscall(SYS_GETCWD, uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)), 0);
 	n = int(r0);
 	errno = int(e1);
@@ -124,14 +126,16 @@ func EpollCtl(epfd int, op int, fd int, event *EpollEvent) (errno int) {
 
 func EpollWait(epfd int, events []EpollEvent, msec int) (n int, errno int) {
 	var _p0 *EpollEvent;
-	if len(events) > 0 { _p0 = &events[0]; }
+	if len(events) > 0 {
+		_p0 = &events[0];
+	}
 	r0, _, e1 := Syscall6(SYS_EPOLL_WAIT, uintptr(epfd), uintptr(unsafe.Pointer(_p0)), uintptr(len(events)), uintptr(msec), 0, 0);
 	n = int(r0);
 	errno = int(e1);
 	return;
 }
 
-func Exit(code int) () {
+func Exit(code int) {
 	Syscall(SYS_EXIT_GROUP, uintptr(code), 0, 0);
 	return;
 }
@@ -199,7 +203,9 @@ func Ftruncate(fd int, length int64) (errno int) {
 
 func Getdents(fd int, buf []byte) (n int, errno int) {
 	var _p0 *byte;
-	if len(buf) > 0 { _p0 = &buf[0]; }
+	if len(buf) > 0 {
+		_p0 = &buf[0];
+	}
 	r0, _, e1 := Syscall(SYS_GETDENTS64, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)));
 	n = int(r0);
 	errno = int(e1);
@@ -275,7 +281,9 @@ func Kill(pid int, sig int) (errno int) {
 
 func Klogctl(typ int, buf []byte) (n int, errno int) {
 	var _p0 *byte;
-	if len(buf) > 0 { _p0 = &buf[0]; }
+	if len(buf) > 0 {
+		_p0 = &buf[0];
+	}
 	r0, _, e1 := Syscall(SYS_SYSLOG, uintptr(typ), uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)));
 	n = int(r0);
 	errno = int(e1);
@@ -346,7 +354,9 @@ func PivotRoot(newroot string, putold string) (errno int) {
 
 func Pread(fd int, p []byte, offset int64) (n int, errno int) {
 	var _p0 *byte;
-	if len(p) > 0 { _p0 = &p[0]; }
+	if len(p) > 0 {
+		_p0 = &p[0];
+	}
 	r0, _, e1 := Syscall6(SYS_PREAD64, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), uintptr(offset), 0, 0);
 	n = int(r0);
 	errno = int(e1);
@@ -355,7 +365,9 @@ func Pread(fd int, p []byte, offset int64) (n int, errno int) {
 
 func Pwrite(fd int, p []byte, offset int64) (n int, errno int) {
 	var _p0 *byte;
-	if len(p) > 0 { _p0 = &p[0]; }
+	if len(p) > 0 {
+		_p0 = &p[0];
+	}
 	r0, _, e1 := Syscall6(SYS_PWRITE64, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), uintptr(offset), 0, 0);
 	n = int(r0);
 	errno = int(e1);
@@ -364,7 +376,9 @@ func Pwrite(fd int, p []byte, offset int64) (n int, errno int) {
 
 func Read(fd int, p []byte) (n int, errno int) {
 	var _p0 *byte;
-	if len(p) > 0 { _p0 = &p[0]; }
+	if len(p) > 0 {
+		_p0 = &p[0];
+	}
 	r0, _, e1 := Syscall(SYS_READ, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)));
 	n = int(r0);
 	errno = int(e1);
@@ -373,7 +387,9 @@ func Read(fd int, p []byte) (n int, errno int) {
 
 func Readlink(path string, buf []byte) (n int, errno int) {
 	var _p0 *byte;
-	if len(buf) > 0 { _p0 = &buf[0]; }
+	if len(buf) > 0 {
+		_p0 = &buf[0];
+	}
 	r0, _, e1 := Syscall(SYS_READLINK, uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)));
 	n = int(r0);
 	errno = int(e1);
@@ -400,7 +416,9 @@ func Rmdir(path string) (errno int) {
 
 func Setdomainname(p []byte) (errno int) {
 	var _p0 *byte;
-	if len(p) > 0 { _p0 = &p[0]; }
+	if len(p) > 0 {
+		_p0 = &p[0];
+	}
 	_, _, e1 := Syscall(SYS_SETDOMAINNAME, uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), 0);
 	errno = int(e1);
 	return;
@@ -408,7 +426,9 @@ func Setdomainname(p []byte) (errno int) {
 
 func Sethostname(p []byte) (errno int) {
 	var _p0 *byte;
-	if len(p) > 0 { _p0 = &p[0]; }
+	if len(p) > 0 {
+		_p0 = &p[0];
+	}
 	_, _, e1 := Syscall(SYS_SETHOSTNAME, uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), 0);
 	errno = int(e1);
 	return;
@@ -457,7 +477,7 @@ func Symlink(oldpath string, newpath string) (errno int) {
 	return;
 }
 
-func Sync() () {
+func Sync() {
 	Syscall(SYS_SYNC, 0, 0, 0);
 	return;
 }
@@ -551,7 +571,9 @@ func Utime(path string, buf *Utimbuf) (errno int) {
 
 func Write(fd int, p []byte) (n int, errno int) {
 	var _p0 *byte;
-	if len(p) > 0 { _p0 = &p[0]; }
+	if len(p) > 0 {
+		_p0 = &p[0];
+	}
 	r0, _, e1 := Syscall(SYS_WRITE, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)));
 	n = int(r0);
 	errno = int(e1);
@@ -774,6 +796,3 @@ func getsockname(fd int, rsa *RawSockaddrAny, addrlen *_Socklen) (errno int) {
 	errno = int(e1);
 	return;
 }
-
-
-
diff --git a/src/pkg/syscall/zsyscall_linux_arm.go b/src/pkg/syscall/zsyscall_linux_arm.go
index f687af5b2c..182bde1e34 100644
--- a/src/pkg/syscall/zsyscall_linux_arm.go
+++ b/src/pkg/syscall/zsyscall_linux_arm.go
@@ -25,7 +25,9 @@ func futimesat(dirfd int, path string, times *[2]Timeval) (errno int) {
 
 func Getcwd(buf []byte) (n int, errno int) {
 	var _p0 *byte;
-	if len(buf) > 0 { _p0 = &buf[0]; }
+	if len(buf) > 0 {
+		_p0 = &buf[0];
+	}
 	r0, _, e1 := Syscall(SYS_GETCWD, uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)), 0);
 	n = int(r0);
 	errno = int(e1);
@@ -124,14 +126,16 @@ func EpollCtl(epfd int, op int, fd int, event *EpollEvent) (errno int) {
 
 func EpollWait(epfd int, events []EpollEvent, msec int) (n int, errno int) {
 	var _p0 *EpollEvent;
-	if len(events) > 0 { _p0 = &events[0]; }
+	if len(events) > 0 {
+		_p0 = &events[0];
+	}
 	r0, _, e1 := Syscall6(SYS_EPOLL_WAIT, uintptr(epfd), uintptr(unsafe.Pointer(_p0)), uintptr(len(events)), uintptr(msec), 0, 0);
 	n = int(r0);
 	errno = int(e1);
 	return;
 }
 
-func Exit(code int) () {
+func Exit(code int) {
 	Syscall(SYS_EXIT_GROUP, uintptr(code), 0, 0);
 	return;
 }
@@ -143,7 +147,7 @@ func Faccessat(dirfd int, path string, mode int, flags int) (errno int) {
 }
 
 func Fallocate(fd int, mode int, off int64, len int64) (errno int) {
-	_, _, e1 := Syscall6(SYS_FALLOCATE, uintptr(fd), uintptr(mode), uintptr(off), uintptr(off >> 32), uintptr(len), uintptr(len >> 32));
+	_, _, e1 := Syscall6(SYS_FALLOCATE, uintptr(fd), uintptr(mode), uintptr(off), uintptr(off>>32), uintptr(len), uintptr(len>>32));
 	errno = int(e1);
 	return;
 }
@@ -192,14 +196,16 @@ func Fsync(fd int) (errno int) {
 }
 
 func Ftruncate(fd int, length int64) (errno int) {
-	_, _, e1 := Syscall(SYS_FTRUNCATE, uintptr(fd), uintptr(length), uintptr(length >> 32));
+	_, _, e1 := Syscall(SYS_FTRUNCATE, uintptr(fd), uintptr(length), uintptr(length>>32));
 	errno = int(e1);
 	return;
 }
 
 func Getdents(fd int, buf []byte) (n int, errno int) {
 	var _p0 *byte;
-	if len(buf) > 0 { _p0 = &buf[0]; }
+	if len(buf) > 0 {
+		_p0 = &buf[0];
+	}
 	r0, _, e1 := Syscall(SYS_GETDENTS64, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)));
 	n = int(r0);
 	errno = int(e1);
@@ -263,7 +269,9 @@ func Kill(pid int, sig int) (errno int) {
 
 func Klogctl(typ int, buf []byte) (n int, errno int) {
 	var _p0 *byte;
-	if len(buf) > 0 { _p0 = &buf[0]; }
+	if len(buf) > 0 {
+		_p0 = &buf[0];
+	}
 	r0, _, e1 := Syscall(SYS_SYSLOG, uintptr(typ), uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)));
 	n = int(r0);
 	errno = int(e1);
@@ -334,8 +342,10 @@ func PivotRoot(newroot string, putold string) (errno int) {
 
 func Pread(fd int, p []byte, offset int64) (n int, errno int) {
 	var _p0 *byte;
-	if len(p) > 0 { _p0 = &p[0]; }
-	r0, _, e1 := Syscall6(SYS_PREAD64, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), uintptr(offset), uintptr(offset >> 32), 0);
+	if len(p) > 0 {
+		_p0 = &p[0];
+	}
+	r0, _, e1 := Syscall6(SYS_PREAD64, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), uintptr(offset), uintptr(offset>>32), 0);
 	n = int(r0);
 	errno = int(e1);
 	return;
@@ -343,8 +353,10 @@ func Pread(fd int, p []byte, offset int64) (n int, errno int) {
 
 func Pwrite(fd int, p []byte, offset int64) (n int, errno int) {
 	var _p0 *byte;
-	if len(p) > 0 { _p0 = &p[0]; }
-	r0, _, e1 := Syscall6(SYS_PWRITE64, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), uintptr(offset), uintptr(offset >> 32), 0);
+	if len(p) > 0 {
+		_p0 = &p[0];
+	}
+	r0, _, e1 := Syscall6(SYS_PWRITE64, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), uintptr(offset), uintptr(offset>>32), 0);
 	n = int(r0);
 	errno = int(e1);
 	return;
@@ -352,7 +364,9 @@ func Pwrite(fd int, p []byte, offset int64) (n int, errno int) {
 
 func Read(fd int, p []byte) (n int, errno int) {
 	var _p0 *byte;
-	if len(p) > 0 { _p0 = &p[0]; }
+	if len(p) > 0 {
+		_p0 = &p[0];
+	}
 	r0, _, e1 := Syscall(SYS_READ, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)));
 	n = int(r0);
 	errno = int(e1);
@@ -361,7 +375,9 @@ func Read(fd int, p []byte) (n int, errno int) {
 
 func Readlink(path string, buf []byte) (n int, errno int) {
 	var _p0 *byte;
-	if len(buf) > 0 { _p0 = &buf[0]; }
+	if len(buf) > 0 {
+		_p0 = &buf[0];
+	}
 	r0, _, e1 := Syscall(SYS_READLINK, uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)));
 	n = int(r0);
 	errno = int(e1);
@@ -388,7 +404,9 @@ func Rmdir(path string) (errno int) {
 
 func Setdomainname(p []byte) (errno int) {
 	var _p0 *byte;
-	if len(p) > 0 { _p0 = &p[0]; }
+	if len(p) > 0 {
+		_p0 = &p[0];
+	}
 	_, _, e1 := Syscall(SYS_SETDOMAINNAME, uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), 0);
 	errno = int(e1);
 	return;
@@ -396,7 +414,9 @@ func Setdomainname(p []byte) (errno int) {
 
 func Sethostname(p []byte) (errno int) {
 	var _p0 *byte;
-	if len(p) > 0 { _p0 = &p[0]; }
+	if len(p) > 0 {
+		_p0 = &p[0];
+	}
 	_, _, e1 := Syscall(SYS_SETHOSTNAME, uintptr(unsafe.Pointer(_p0)), uintptr(len(p)), 0);
 	errno = int(e1);
 	return;
@@ -444,7 +464,7 @@ func Symlink(oldpath string, newpath string) (errno int) {
 	return;
 }
 
-func Sync() () {
+func Sync() {
 	Syscall(SYS_SYNC, 0, 0, 0);
 	return;
 }
@@ -482,7 +502,7 @@ func Times(tms *Tms) (ticks uintptr, errno int) {
 }
 
 func Truncate(path string, length int64) (errno int) {
-	_, _, e1 := Syscall(SYS_TRUNCATE, uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(length), uintptr(length >> 32));
+	_, _, e1 := Syscall(SYS_TRUNCATE, uintptr(unsafe.Pointer(StringBytePtr(path))), uintptr(length), uintptr(length>>32));
 	errno = int(e1);
 	return;
 }
@@ -531,7 +551,9 @@ func Utime(path string, buf *Utimbuf) (errno int) {
 
 func Write(fd int, p []byte) (n int, errno int) {
 	var _p0 *byte;
-	if len(p) > 0 { _p0 = &p[0]; }
+	if len(p) > 0 {
+		_p0 = &p[0];
+	}
 	r0, _, e1 := Syscall(SYS_WRITE, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)));
 	n = int(r0);
 	errno = int(e1);
@@ -682,7 +704,7 @@ func Lstat(path string, stat *Stat_t) (errno int) {
 }
 
 func Seek(fd int, offset int64, whence int) (off int64, errno int) {
-	r0, r1, _ := Syscall6(SYS_LSEEK, uintptr(fd), uintptr(offset), uintptr(offset >> 32), uintptr(whence), 0, 0);
+	r0, r1, _ := Syscall6(SYS_LSEEK, uintptr(fd), uintptr(offset), uintptr(offset>>32), uintptr(whence), 0, 0);
 	off = int64(int64(r1)<<32 | int64(r0));
 	return;
 }
@@ -753,6 +775,3 @@ func Statfs(path string, buf *Statfs_t) (errno int) {
 	errno = int(e1);
 	return;
 }
-
-
-
diff --git a/src/pkg/syscall/zsyscall_nacl_386.go b/src/pkg/syscall/zsyscall_nacl_386.go
index dc5af44a4b..3fad83e477 100644
--- a/src/pkg/syscall/zsyscall_nacl_386.go
+++ b/src/pkg/syscall/zsyscall_nacl_386.go
@@ -23,7 +23,7 @@ func Close(fd int) (errno int) {
 	return;
 }
 
-func Exit(code int) () {
+func Exit(code int) {
 	Syscall(SYS_EXIT, uintptr(code), 0, 0);
 	return;
 }
@@ -36,7 +36,9 @@ func Fstat(fd int, stat *Stat_t) (errno int) {
 
 func Getdents(fd int, buf []byte) (n int, errno int) {
 	var _p0 *byte;
-	if len(buf) > 0 { _p0 = &buf[0]; }
+	if len(buf) > 0 {
+		_p0 = &buf[0];
+	}
 	r0, _, e1 := Syscall(SYS_GETDENTS, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(buf)));
 	n = int(r0);
 	errno = int(e1);
@@ -64,7 +66,9 @@ func Open(path string, mode int, perm int) (fd int, errno int) {
 
 func Read(fd int, p []byte) (n int, errno int) {
 	var _p0 *byte;
-	if len(p) > 0 { _p0 = &p[0]; }
+	if len(p) > 0 {
+		_p0 = &p[0];
+	}
 	r0, _, e1 := Syscall(SYS_READ, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)));
 	n = int(r0);
 	errno = int(e1);
@@ -86,7 +90,9 @@ func Stat(path string, stat *Stat_t) (errno int) {
 
 func Write(fd int, p []byte) (n int, errno int) {
 	var _p0 *byte;
-	if len(p) > 0 { _p0 = &p[0]; }
+	if len(p) > 0 {
+		_p0 = &p[0];
+	}
 	r0, _, e1 := Syscall(SYS_WRITE, uintptr(fd), uintptr(unsafe.Pointer(_p0)), uintptr(len(p)));
 	n = int(r0);
 	errno = int(e1);
@@ -221,6 +227,3 @@ func AudioStream(data *uint16, size *uintptr) (errno int) {
 	errno = int(e1);
 	return;
 }
-
-
-
diff --git a/src/pkg/syscall/zsysnum_darwin_386.go b/src/pkg/syscall/zsysnum_darwin_386.go
index 3a39407f37..78ae194141 100644
--- a/src/pkg/syscall/zsysnum_darwin_386.go
+++ b/src/pkg/syscall/zsysnum_darwin_386.go
@@ -5,120 +5,120 @@ package syscall
 
 const (
 	// SYS_NOSYS = 0;  // { int nosys(void); }   { indirect syscall }
-	SYS_EXIT = 1;  // { void exit(int rval); }
-	SYS_FORK = 2;  // { int fork(void); }
-	SYS_READ = 3;  // { user_ssize_t read(int fd, user_addr_t cbuf, user_size_t nbyte); }
-	SYS_WRITE = 4;  // { user_ssize_t write(int fd, user_addr_t cbuf, user_size_t nbyte); }
-	SYS_OPEN = 5;  // { int open(user_addr_t path, int flags, int mode); }
-	SYS_CLOSE = 6;  // { int close(int fd); }
-	SYS_WAIT4 = 7;  // { int wait4(int pid, user_addr_t status, int options, user_addr_t rusage); }
+	SYS_EXIT	= 1;	// { void exit(int rval); }
+	SYS_FORK	= 2;	// { int fork(void); }
+	SYS_READ	= 3;	// { user_ssize_t read(int fd, user_addr_t cbuf, user_size_t nbyte); }
+	SYS_WRITE	= 4;	// { user_ssize_t write(int fd, user_addr_t cbuf, user_size_t nbyte); }
+	SYS_OPEN	= 5;	// { int open(user_addr_t path, int flags, int mode); }
+	SYS_CLOSE	= 6;	// { int close(int fd); }
+	SYS_WAIT4	= 7;	// { int wait4(int pid, user_addr_t status, int options, user_addr_t rusage); }
 	// SYS_NOSYS = 8;  // { int nosys(void); }   { old creat }
-	SYS_LINK = 9;  // { int link(user_addr_t path, user_addr_t link); }
-	SYS_UNLINK = 10;  // { int unlink(user_addr_t path); }
+	SYS_LINK	= 9;	// { int link(user_addr_t path, user_addr_t link); }
+	SYS_UNLINK	= 10;	// { int unlink(user_addr_t path); }
 	// SYS_NOSYS = 11;  // { int nosys(void); }   { old execv }
-	SYS_CHDIR = 12;  // { int chdir(user_addr_t path); }
-	SYS_FCHDIR = 13;  // { int fchdir(int fd); }
-	SYS_MKNOD = 14;  // { int mknod(user_addr_t path, int mode, int dev); }
-	SYS_CHMOD = 15;  // { int chmod(user_addr_t path, int mode); }
-	SYS_CHOWN = 16;  // { int chown(user_addr_t path, int uid, int gid); }
-	SYS_OGETFSSTAT = 18;  // { int ogetfsstat(user_addr_t buf, int bufsize, int flags); }
-	SYS_GETFSSTAT = 18;  // { int getfsstat(user_addr_t buf, int bufsize, int flags); }
+	SYS_CHDIR	= 12;	// { int chdir(user_addr_t path); }
+	SYS_FCHDIR	= 13;	// { int fchdir(int fd); }
+	SYS_MKNOD	= 14;	// { int mknod(user_addr_t path, int mode, int dev); }
+	SYS_CHMOD	= 15;	// { int chmod(user_addr_t path, int mode); }
+	SYS_CHOWN	= 16;	// { int chown(user_addr_t path, int uid, int gid); }
+	SYS_OGETFSSTAT	= 18;	// { int ogetfsstat(user_addr_t buf, int bufsize, int flags); }
+	SYS_GETFSSTAT	= 18;	// { int getfsstat(user_addr_t buf, int bufsize, int flags); }
 	// SYS_NOSYS = 19;  // { int nosys(void); }   { old lseek }
-	SYS_GETPID = 20;  // { int getpid(void); }
+	SYS_GETPID	= 20;	// { int getpid(void); }
 	// SYS_NOSYS = 21;  // { int nosys(void); }   { old mount }
 	// SYS_NOSYS = 22;  // { int nosys(void); }   { old umount }
-	SYS_SETUID = 23;  // { int setuid(uid_t uid); }
-	SYS_GETUID = 24;  // { int getuid(void); }
-	SYS_GETEUID = 25;  // { int geteuid(void); }
-	SYS_PTRACE = 26;  // { int ptrace(int req, pid_t pid, caddr_t addr, int data); }
-	SYS_RECVMSG = 27;  // { int recvmsg(int s, struct msghdr *msg, int flags); }
-	SYS_SENDMSG = 28;  // { int sendmsg(int s, caddr_t msg, int flags); }
-	SYS_RECVFROM = 29;  // { int recvfrom(int s, void *buf, size_t len, int flags, struct sockaddr *from, int *fromlenaddr); }
-	SYS_ACCEPT = 30;  // { int accept(int s, caddr_t name, socklen_t	*anamelen); }
-	SYS_GETPEERNAME = 31;  // { int getpeername(int fdes, caddr_t asa, socklen_t *alen); }
-	SYS_GETSOCKNAME = 32;  // { int getsockname(int fdes, caddr_t asa, socklen_t *alen); }
+	SYS_SETUID	= 23;	// { int setuid(uid_t uid); }
+	SYS_GETUID	= 24;	// { int getuid(void); }
+	SYS_GETEUID	= 25;	// { int geteuid(void); }
+	SYS_PTRACE	= 26;	// { int ptrace(int req, pid_t pid, caddr_t addr, int data); }
+	SYS_RECVMSG	= 27;	// { int recvmsg(int s, struct msghdr *msg, int flags); }
+	SYS_SENDMSG	= 28;	// { int sendmsg(int s, caddr_t msg, int flags); }
+	SYS_RECVFROM	= 29;	// { int recvfrom(int s, void *buf, size_t len, int flags, struct sockaddr *from, int *fromlenaddr); }
+	SYS_ACCEPT	= 30;	// { int accept(int s, caddr_t name, socklen_t	*anamelen); }
+	SYS_GETPEERNAME	= 31;	// { int getpeername(int fdes, caddr_t asa, socklen_t *alen); }
+	SYS_GETSOCKNAME	= 32;	// { int getsockname(int fdes, caddr_t asa, socklen_t *alen); }
 	// SYS_NOSYS = 27;  // { int nosys(void); }
 	// SYS_NOSYS = 28;  // { int nosys(void); }
 	// SYS_NOSYS = 29;  // { int nosys(void); }
 	// SYS_NOSYS = 30;  // { int nosys(void); }
 	// SYS_NOSYS = 31;  // { int nosys(void); }
 	// SYS_NOSYS = 32;  // { int nosys(void); }
-	SYS_ACCESS = 33;  // { int access(user_addr_t path, int flags); }
-	SYS_CHFLAGS = 34;  // { int chflags(char *path, int flags); }
-	SYS_FCHFLAGS = 35;  // { int fchflags(int fd, int flags); }
-	SYS_SYNC = 36;  // { int sync(void); }
-	SYS_KILL = 37;  // { int kill(int pid, int signum, int posix); }
+	SYS_ACCESS	= 33;	// { int access(user_addr_t path, int flags); }
+	SYS_CHFLAGS	= 34;	// { int chflags(char *path, int flags); }
+	SYS_FCHFLAGS	= 35;	// { int fchflags(int fd, int flags); }
+	SYS_SYNC	= 36;	// { int sync(void); }
+	SYS_KILL	= 37;	// { int kill(int pid, int signum, int posix); }
 	// SYS_NOSYS = 38;  // { int nosys(void); }   { old stat  }
-	SYS_GETPPID = 39;  // { int getppid(void); }
+	SYS_GETPPID	= 39;	// { int getppid(void); }
 	// SYS_NOSYS = 40;  // { int nosys(void); }   { old lstat }
-	SYS_DUP = 41;  // { int dup(u_int fd); }
-	SYS_PIPE = 42;  // { int pipe(void); }
-	SYS_GETEGID = 43;  // { int getegid(void); }
-	SYS_PROFIL = 44;  // { int profil(short *bufbase, size_t bufsize, u_long pcoffset, u_int pcscale); }
+	SYS_DUP		= 41;	// { int dup(u_int fd); }
+	SYS_PIPE	= 42;	// { int pipe(void); }
+	SYS_GETEGID	= 43;	// { int getegid(void); }
+	SYS_PROFIL	= 44;	// { int profil(short *bufbase, size_t bufsize, u_long pcoffset, u_int pcscale); }
 	// SYS_NOSYS = 45;  // { int nosys(void); } { old ktrace }
-	SYS_SIGACTION = 46;  // { int sigaction(int signum, struct __sigaction *nsa, struct sigaction *osa); }
-	SYS_GETGID = 47;  // { int getgid(void); }
-	SYS_SIGPROCMASK = 48;  // { int sigprocmask(int how, user_addr_t mask, user_addr_t omask); }
-	SYS_GETLOGIN = 49;  // { int getlogin(char *namebuf, u_int namelen); }
-	SYS_SETLOGIN = 50;  // { int setlogin(char *namebuf); }
-	SYS_ACCT = 51;  // { int acct(char *path); }
-	SYS_SIGPENDING = 52;  // { int sigpending(struct sigvec *osv); }
-	SYS_SIGALTSTACK = 53;  // { int sigaltstack(struct sigaltstack *nss, struct sigaltstack *oss); }
-	SYS_IOCTL = 54;  // { int ioctl(int fd, u_long com, caddr_t data); }
-	SYS_REBOOT = 55;  // { int reboot(int opt, char *command); }
-	SYS_REVOKE = 56;  // { int revoke(char *path); }
-	SYS_SYMLINK = 57;  // { int symlink(char *path, char *link); }
-	SYS_READLINK = 58;  // { int readlink(char *path, char *buf, int count); }
-	SYS_EXECVE = 59;  // { int execve(char *fname, char **argp, char **envp); }
-	SYS_UMASK = 60;  // { int umask(int newmask); }
-	SYS_CHROOT = 61;  // { int chroot(user_addr_t path); }
+	SYS_SIGACTION	= 46;	// { int sigaction(int signum, struct __sigaction *nsa, struct sigaction *osa); }
+	SYS_GETGID	= 47;	// { int getgid(void); }
+	SYS_SIGPROCMASK	= 48;	// { int sigprocmask(int how, user_addr_t mask, user_addr_t omask); }
+	SYS_GETLOGIN	= 49;	// { int getlogin(char *namebuf, u_int namelen); }
+	SYS_SETLOGIN	= 50;	// { int setlogin(char *namebuf); }
+	SYS_ACCT	= 51;	// { int acct(char *path); }
+	SYS_SIGPENDING	= 52;	// { int sigpending(struct sigvec *osv); }
+	SYS_SIGALTSTACK	= 53;	// { int sigaltstack(struct sigaltstack *nss, struct sigaltstack *oss); }
+	SYS_IOCTL	= 54;	// { int ioctl(int fd, u_long com, caddr_t data); }
+	SYS_REBOOT	= 55;	// { int reboot(int opt, char *command); }
+	SYS_REVOKE	= 56;	// { int revoke(char *path); }
+	SYS_SYMLINK	= 57;	// { int symlink(char *path, char *link); }
+	SYS_READLINK	= 58;	// { int readlink(char *path, char *buf, int count); }
+	SYS_EXECVE	= 59;	// { int execve(char *fname, char **argp, char **envp); }
+	SYS_UMASK	= 60;	// { int umask(int newmask); }
+	SYS_CHROOT	= 61;	// { int chroot(user_addr_t path); }
 	// SYS_NOSYS = 62;  // { int nosys(void); }   { old fstat }
 	// SYS_NOSYS = 63;  // { int nosys(void); }   { used internally, reserved }
 	// SYS_NOSYS = 64;  // { int nosys(void); }   { old getpagesize }
-	SYS_MSYNC = 65;  // { int msync(caddr_t addr, size_t len, int flags); }
-	SYS_VFORK = 66;  // { int vfork(void); }
+	SYS_MSYNC	= 65;	// { int msync(caddr_t addr, size_t len, int flags); }
+	SYS_VFORK	= 66;	// { int vfork(void); }
 	// SYS_NOSYS = 67;  // { int nosys(void); }   { old vread }
 	// SYS_NOSYS = 68;  // { int nosys(void); }   { old vwrite }
-	SYS_SBRK = 69;  // { int sbrk(int incr) NO_SYSCALL_STUB; }
-	SYS_SSTK = 70;  // { int sstk(int incr) NO_SYSCALL_STUB; }
+	SYS_SBRK	= 69;	// { int sbrk(int incr) NO_SYSCALL_STUB; }
+	SYS_SSTK	= 70;	// { int sstk(int incr) NO_SYSCALL_STUB; }
 	// SYS_NOSYS = 71;  // { int nosys(void); }   { old mmap }
-	SYS_OVADVISE = 72;  // { int ovadvise(void) NO_SYSCALL_STUB; }   { old vadvise }
-	SYS_MUNMAP = 73;  // { int munmap(caddr_t addr, size_t len); }
-	SYS_MPROTECT = 74;  // { int mprotect(caddr_t addr, size_t len, int prot); }
-	SYS_MADVISE = 75;  // { int madvise(caddr_t addr, size_t len, int behav); }
+	SYS_OVADVISE	= 72;	// { int ovadvise(void) NO_SYSCALL_STUB; }   { old vadvise }
+	SYS_MUNMAP	= 73;	// { int munmap(caddr_t addr, size_t len); }
+	SYS_MPROTECT	= 74;	// { int mprotect(caddr_t addr, size_t len, int prot); }
+	SYS_MADVISE	= 75;	// { int madvise(caddr_t addr, size_t len, int behav); }
 	// SYS_NOSYS = 76;  // { int nosys(void); }   { old vhangup }
 	// SYS_NOSYS = 77;  // { int nosys(void); }   { old vlimit }
-	SYS_MINCORE = 78;  // { int mincore(user_addr_t addr, user_size_t len, user_addr_t vec); }
-	SYS_GETGROUPS = 79;  // { int getgroups(u_int gidsetsize, gid_t *gidset); }
-	SYS_SETGROUPS = 80;  // { int setgroups(u_int gidsetsize, gid_t *gidset); }
-	SYS_GETPGRP = 81;  // { int getpgrp(void); }
-	SYS_SETPGID = 82;  // { int setpgid(int pid, int pgid); }
-	SYS_SETITIMER = 83;  // { int setitimer(u_int which, struct itimerval *itv, struct itimerval *oitv); }
+	SYS_MINCORE	= 78;	// { int mincore(user_addr_t addr, user_size_t len, user_addr_t vec); }
+	SYS_GETGROUPS	= 79;	// { int getgroups(u_int gidsetsize, gid_t *gidset); }
+	SYS_SETGROUPS	= 80;	// { int setgroups(u_int gidsetsize, gid_t *gidset); }
+	SYS_GETPGRP	= 81;	// { int getpgrp(void); }
+	SYS_SETPGID	= 82;	// { int setpgid(int pid, int pgid); }
+	SYS_SETITIMER	= 83;	// { int setitimer(u_int which, struct itimerval *itv, struct itimerval *oitv); }
 	// SYS_NOSYS = 84;  // { int nosys(void); }   { old wait }
-	SYS_SWAPON = 85;  // { int swapon(void); }
-	SYS_GETITIMER = 86;  // { int getitimer(u_int which, struct itimerval *itv); }
+	SYS_SWAPON	= 85;	// { int swapon(void); }
+	SYS_GETITIMER	= 86;	// { int getitimer(u_int which, struct itimerval *itv); }
 	// SYS_NOSYS = 87;  // { int nosys(void); }   { old gethostname }
 	// SYS_NOSYS = 88;  // { int nosys(void); }   { old sethostname }
-	SYS_GETDTABLESIZE = 89;  // { int getdtablesize(void); }
-	SYS_DUP2 = 90;  // { int dup2(u_int from, u_int to); }
+	SYS_GETDTABLESIZE	= 89;	// { int getdtablesize(void); }
+	SYS_DUP2		= 90;	// { int dup2(u_int from, u_int to); }
 	// SYS_NOSYS = 91;  // { int nosys(void); }   { old getdopt }
-	SYS_FCNTL = 92;  // { int fcntl(int fd, int cmd, long arg); }
-	SYS_SELECT = 93;  // { int select(int nd, u_int32_t *in, u_int32_t *ou, u_int32_t *ex, struct timeval *tv); }
+	SYS_FCNTL	= 92;	// { int fcntl(int fd, int cmd, long arg); }
+	SYS_SELECT	= 93;	// { int select(int nd, u_int32_t *in, u_int32_t *ou, u_int32_t *ex, struct timeval *tv); }
 	// SYS_NOSYS = 94;  // { int nosys(void); }   { old setdopt }
-	SYS_FSYNC = 95;  // { int fsync(int fd); }
-	SYS_SETPRIORITY = 96;  // { int setpriority(int which, id_t who, int prio); }
-	SYS_SOCKET = 97;  // { int socket(int domain, int type, int protocol); }
-	SYS_CONNECT = 98;  // { int connect(int s, caddr_t name, socklen_t namelen); }
+	SYS_FSYNC	= 95;	// { int fsync(int fd); }
+	SYS_SETPRIORITY	= 96;	// { int setpriority(int which, id_t who, int prio); }
+	SYS_SOCKET	= 97;	// { int socket(int domain, int type, int protocol); }
+	SYS_CONNECT	= 98;	// { int connect(int s, caddr_t name, socklen_t namelen); }
 	// SYS_NOSYS = 97;  // { int nosys(void); }
 	// SYS_NOSYS = 98;  // { int nosys(void); }
 	// SYS_NOSYS = 99;  // { int nosys(void); }   { old accept }
-	SYS_GETPRIORITY = 100;  // { int getpriority(int which, id_t who); }
+	SYS_GETPRIORITY	= 100;	// { int getpriority(int which, id_t who); }
 	// SYS_NOSYS = 101;  // { int nosys(void); }   { old send }
 	// SYS_NOSYS = 102;  // { int nosys(void); }   { old recv }
 	// SYS_NOSYS = 103;  // { int nosys(void); }   { old sigreturn }
-	SYS_BIND = 104;  // { int bind(int s, caddr_t name, socklen_t namelen); }
-	SYS_SETSOCKOPT = 105;  // { int setsockopt(int s, int level, int name, caddr_t val, socklen_t valsize); }
-	SYS_LISTEN = 106;  // { int listen(int s, int backlog); }
+	SYS_BIND	= 104;	// { int bind(int s, caddr_t name, socklen_t namelen); }
+	SYS_SETSOCKOPT	= 105;	// { int setsockopt(int s, int level, int name, caddr_t val, socklen_t valsize); }
+	SYS_LISTEN	= 106;	// { int listen(int s, int backlog); }
 	// SYS_NOSYS = 104;  // { int nosys(void); }
 	// SYS_NOSYS = 105;  // { int nosys(void); }
 	// SYS_NOSYS = 106;  // { int nosys(void); }
@@ -126,108 +126,108 @@ const (
 	// SYS_NOSYS = 108;  // { int nosys(void); }   { old sigvec }
 	// SYS_NOSYS = 109;  // { int nosys(void); }   { old sigblock }
 	// SYS_NOSYS = 110;  // { int nosys(void); }   { old sigsetmask }
-	SYS_SIGSUSPEND = 111;  // { int sigsuspend(sigset_t mask); }
+	SYS_SIGSUSPEND	= 111;	// { int sigsuspend(sigset_t mask); }
 	// SYS_NOSYS = 112;  // { int nosys(void); }   { old sigstack }
 	// SYS_NOSYS = 113;  // { int nosys(void); }   { old recvmsg }
 	// SYS_NOSYS = 114;  // { int nosys(void); }   { old sendmsg }
 	// SYS_NOSYS = 113;  // { int nosys(void); }
 	// SYS_NOSYS = 114;  // { int nosys(void); }
 	// SYS_NOSYS = 115;  // { int nosys(void); }   { old vtrace }
-	SYS_GETTIMEOFDAY = 116;  // { int gettimeofday(struct timeval *tp, struct timezone *tzp); }
-	SYS_GETRUSAGE = 117;  // { int getrusage(int who, struct rusage *rusage); }
-	SYS_GETSOCKOPT = 118;  // { int getsockopt(int s, int level, int name, caddr_t val, socklen_t *avalsize); }
+	SYS_GETTIMEOFDAY	= 116;	// { int gettimeofday(struct timeval *tp, struct timezone *tzp); }
+	SYS_GETRUSAGE		= 117;	// { int getrusage(int who, struct rusage *rusage); }
+	SYS_GETSOCKOPT		= 118;	// { int getsockopt(int s, int level, int name, caddr_t val, socklen_t *avalsize); }
 	// SYS_NOSYS = 118;  // { int nosys(void); }
 	// SYS_NOSYS = 119;  // { int nosys(void); }   { old resuba }
-	SYS_READV = 120;  // { user_ssize_t readv(int fd, struct iovec *iovp, u_int iovcnt); }
-	SYS_WRITEV = 121;  // { user_ssize_t writev(int fd, struct iovec *iovp, u_int iovcnt); }
-	SYS_SETTIMEOFDAY = 122;  // { int settimeofday(struct timeval *tv, struct timezone *tzp); }
-	SYS_FCHOWN = 123;  // { int fchown(int fd, int uid, int gid); }
-	SYS_FCHMOD = 124;  // { int fchmod(int fd, int mode); }
+	SYS_READV		= 120;	// { user_ssize_t readv(int fd, struct iovec *iovp, u_int iovcnt); }
+	SYS_WRITEV		= 121;	// { user_ssize_t writev(int fd, struct iovec *iovp, u_int iovcnt); }
+	SYS_SETTIMEOFDAY	= 122;	// { int settimeofday(struct timeval *tv, struct timezone *tzp); }
+	SYS_FCHOWN		= 123;	// { int fchown(int fd, int uid, int gid); }
+	SYS_FCHMOD		= 124;	// { int fchmod(int fd, int mode); }
 	// SYS_NOSYS = 125;  // { int nosys(void); }   { old recvfrom }
-	SYS_SETREUID = 126;  // { int setreuid(uid_t ruid, uid_t euid); }
-	SYS_SETREGID = 127;  // { int setregid(gid_t rgid, gid_t egid); }
-	SYS_RENAME = 128;  // { int rename(char *from, char *to); }
+	SYS_SETREUID	= 126;	// { int setreuid(uid_t ruid, uid_t euid); }
+	SYS_SETREGID	= 127;	// { int setregid(gid_t rgid, gid_t egid); }
+	SYS_RENAME	= 128;	// { int rename(char *from, char *to); }
 	// SYS_NOSYS = 129;  // { int nosys(void); }   { old truncate }
 	// SYS_NOSYS = 130;  // { int nosys(void); }   { old ftruncate }
-	SYS_FLOCK = 131;  // { int flock(int fd, int how); }
-	SYS_MKFIFO = 132;  // { int mkfifo(user_addr_t path, int mode); }
-	SYS_SENDTO = 133;  // { int sendto(int s, caddr_t buf, size_t len, int flags, caddr_t to, socklen_t tolen); }
-	SYS_SHUTDOWN = 134;  // { int shutdown(int s, int how); }
-	SYS_SOCKETPAIR = 135;  // { int socketpair(int domain, int type, int protocol, int *rsv); }
+	SYS_FLOCK	= 131;	// { int flock(int fd, int how); }
+	SYS_MKFIFO	= 132;	// { int mkfifo(user_addr_t path, int mode); }
+	SYS_SENDTO	= 133;	// { int sendto(int s, caddr_t buf, size_t len, int flags, caddr_t to, socklen_t tolen); }
+	SYS_SHUTDOWN	= 134;	// { int shutdown(int s, int how); }
+	SYS_SOCKETPAIR	= 135;	// { int socketpair(int domain, int type, int protocol, int *rsv); }
 	// SYS_NOSYS = 133;  // { int nosys(void); }
 	// SYS_NOSYS = 134;  // { int nosys(void); }
 	// SYS_NOSYS = 135;  // { int nosys(void); }
-	SYS_MKDIR = 136;  // { int mkdir(user_addr_t path, int mode); }
-	SYS_RMDIR = 137;  // { int rmdir(char *path); }
-	SYS_UTIMES = 138;  // { int utimes(char *path, struct timeval *tptr); }
-	SYS_FUTIMES = 139;  // { int futimes(int fd, struct timeval *tptr); }
-	SYS_ADJTIME = 140;  // { int adjtime(struct timeval *delta, struct timeval *olddelta); }
+	SYS_MKDIR	= 136;	// { int mkdir(user_addr_t path, int mode); }
+	SYS_RMDIR	= 137;	// { int rmdir(char *path); }
+	SYS_UTIMES	= 138;	// { int utimes(char *path, struct timeval *tptr); }
+	SYS_FUTIMES	= 139;	// { int futimes(int fd, struct timeval *tptr); }
+	SYS_ADJTIME	= 140;	// { int adjtime(struct timeval *delta, struct timeval *olddelta); }
 	// SYS_NOSYS = 141;  // { int nosys(void); }   { old getpeername }
-	SYS_GETHOSTUUID = 142;  // { int gethostuuid(unsigned char *uuid_buf, const struct timespec *timeoutp); }
+	SYS_GETHOSTUUID							= 142;	// { int gethostuuid(unsigned char *uuid_buf, const struct timespec *timeoutp); }
 	// SYS_NOSYS = 143;  // { int nosys(void); }   { old sethostid 	}
 	// SYS_NOSYS = 144;  // { int nosys(void); }   { old getrlimit }
 	// SYS_NOSYS = 145;  // { int nosys(void); }   { old setrlimit }
 	// SYS_NOSYS = 146;  // { int nosys(void); }   { old killpg }
-	SYS_SETSID = 147;  // { int setsid(void); }
+	SYS_SETSID	= 147;	// { int setsid(void); }
 	// SYS_NOSYS = 148;  // { int nosys(void); }   { old setquota }
 	// SYS_NOSYS = 149;  // { int nosys(void); }   { old qquota }
 	// SYS_NOSYS = 150;  // { int nosys(void); }   { old getsockname }
-	SYS_GETPGID = 151;  // { int getpgid(pid_t pid); }
-	SYS_SETPRIVEXEC = 152;  // { int setprivexec(int flag); }
-	SYS_PREAD = 153;  // { user_ssize_t pread(int fd, user_addr_t buf, user_size_t nbyte, off_t offset); }
-	SYS_PWRITE = 154;  // { user_ssize_t pwrite(int fd, user_addr_t buf, user_size_t nbyte, off_t offset); }
-	SYS_NFSSVC = 155;  // { int nfssvc(int flag, caddr_t argp); }
+	SYS_GETPGID	= 151;	// { int getpgid(pid_t pid); }
+	SYS_SETPRIVEXEC	= 152;	// { int setprivexec(int flag); }
+	SYS_PREAD	= 153;	// { user_ssize_t pread(int fd, user_addr_t buf, user_size_t nbyte, off_t offset); }
+	SYS_PWRITE	= 154;	// { user_ssize_t pwrite(int fd, user_addr_t buf, user_size_t nbyte, off_t offset); }
+	SYS_NFSSVC	= 155;	// { int nfssvc(int flag, caddr_t argp); }
 	// SYS_NOSYS = 155;  // { int nosys(void); }
 	// SYS_NOSYS = 156;  // { int nosys(void); }   { old getdirentries }
-	SYS_STATFS = 157;  // { int statfs(char *path, struct statfs *buf); }
-	SYS_FSTATFS = 158;  // { int fstatfs(int fd, struct statfs *buf); }
-	SYS_UNMOUNT = 159;  // { int unmount(user_addr_t path, int flags); }
+	SYS_STATFS	= 157;	// { int statfs(char *path, struct statfs *buf); }
+	SYS_FSTATFS	= 158;	// { int fstatfs(int fd, struct statfs *buf); }
+	SYS_UNMOUNT	= 159;	// { int unmount(user_addr_t path, int flags); }
 	// SYS_NOSYS = 160;  // { int nosys(void); }   { old async_daemon }
-	SYS_GETFH = 161;  // { int getfh(char *fname, fhandle_t *fhp); }
+	SYS_GETFH	= 161;	// { int getfh(char *fname, fhandle_t *fhp); }
 	// SYS_NOSYS = 161;  // { int nosys(void); }
 	// SYS_NOSYS = 162;  // { int nosys(void); }   { old getdomainname }
 	// SYS_NOSYS = 163;  // { int nosys(void); }   { old setdomainname }
 	// SYS_NOSYS = 164;  // { int nosys(void); }
-	SYS_QUOTACTL = 165;  // { int quotactl(const char *path, int cmd, int uid, caddr_t arg); }
+	SYS_QUOTACTL	= 165;	// { int quotactl(const char *path, int cmd, int uid, caddr_t arg); }
 	// SYS_NOSYS = 166;  // { int nosys(void); }   { old exportfs }
-	SYS_MOUNT = 167;  // { int mount(char *type, char *path, int flags, caddr_t data); }
+	SYS_MOUNT	= 167;	// { int mount(char *type, char *path, int flags, caddr_t data); }
 	// SYS_NOSYS = 168;  // { int nosys(void); }   { old ustat }
-	SYS_CSOPS = 169;  // { int csops(pid_t pid, uint32_t ops, user_addr_t useraddr, user_size_t usersize); }
+	SYS_CSOPS	= 169;	// { int csops(pid_t pid, uint32_t ops, user_addr_t useraddr, user_size_t usersize); }
 	// SYS_NOSYS = 171;  // { int nosys(void); }   { old wait3 }
 	// SYS_NOSYS = 172;  // { int nosys(void); }   { old rpause	}
-	SYS_WAITID = 173;  // { int waitid(idtype_t idtype, id_t id, siginfo_t *infop, int options); }
+	SYS_WAITID	= 173;	// { int waitid(idtype_t idtype, id_t id, siginfo_t *infop, int options); }
 	// SYS_NOSYS = 174;  // { int nosys(void); }   { old getdents }
 	// SYS_NOSYS = 175;  // { int nosys(void); }   { old gc_control }
-	SYS_ADD_PROFIL = 176;  // { int add_profil(short *bufbase, size_t bufsize, u_long pcoffset, u_int pcscale); }
+	SYS_ADD_PROFIL	= 176;	// { int add_profil(short *bufbase, size_t bufsize, u_long pcoffset, u_int pcscale); }
 	// SYS_NOSYS = 177;  // { int nosys(void); }
 	// SYS_NOSYS = 178;  // { int nosys(void); }
 	// SYS_NOSYS = 179;  // { int nosys(void); }
-	SYS_KDEBUG_TRACE = 180;  // { int kdebug_trace(int code, int arg1, int arg2, int arg3, int arg4, int arg5) NO_SYSCALL_STUB; }
-	SYS_SETGID = 181;  // { int setgid(gid_t gid); }
-	SYS_SETEGID = 182;  // { int setegid(gid_t egid); }
-	SYS_SETEUID = 183;  // { int seteuid(uid_t euid); }
-	SYS_SIGRETURN = 184;  // { int sigreturn(struct ucontext *uctx, int infostyle); }
+	SYS_KDEBUG_TRACE	= 180;	// { int kdebug_trace(int code, int arg1, int arg2, int arg3, int arg4, int arg5) NO_SYSCALL_STUB; }
+	SYS_SETGID		= 181;	// { int setgid(gid_t gid); }
+	SYS_SETEGID		= 182;	// { int setegid(gid_t egid); }
+	SYS_SETEUID		= 183;	// { int seteuid(uid_t euid); }
+	SYS_SIGRETURN		= 184;	// { int sigreturn(struct ucontext *uctx, int infostyle); }
 	// SYS_NOSYS = 186;  // { int nosys(void); }
 	// SYS_NOSYS = 187;  // { int nosys(void); }
-	SYS_STAT = 188;  // { int stat(user_addr_t path, user_addr_t ub); }
-	SYS_FSTAT = 189;  // { int fstat(int fd, user_addr_t ub); }
-	SYS_LSTAT = 190;  // { int lstat(user_addr_t path, user_addr_t ub); }
-	SYS_PATHCONF = 191;  // { int pathconf(char *path, int name); }
-	SYS_FPATHCONF = 192;  // { int fpathconf(int fd, int name); }
+	SYS_STAT	= 188;	// { int stat(user_addr_t path, user_addr_t ub); }
+	SYS_FSTAT	= 189;	// { int fstat(int fd, user_addr_t ub); }
+	SYS_LSTAT	= 190;	// { int lstat(user_addr_t path, user_addr_t ub); }
+	SYS_PATHCONF	= 191;	// { int pathconf(char *path, int name); }
+	SYS_FPATHCONF	= 192;	// { int fpathconf(int fd, int name); }
 	// SYS_NOSYS = 193;  // { int nosys(void); }
-	SYS_GETRLIMIT = 194;  // { int getrlimit(u_int which, struct rlimit *rlp); }
-	SYS_SETRLIMIT = 195;  // { int setrlimit(u_int which, struct rlimit *rlp); }
-	SYS_GETDIRENTRIES = 196;  // { int getdirentries(int fd, char *buf, u_int count, long *basep); }
-	SYS_MMAP = 197;  // { user_addr_t mmap(caddr_t addr, size_t len, int prot, int flags, int fd, off_t pos); }
+	SYS_GETRLIMIT					= 194;	// { int getrlimit(u_int which, struct rlimit *rlp); }
+	SYS_SETRLIMIT					= 195;	// { int setrlimit(u_int which, struct rlimit *rlp); }
+	SYS_GETDIRENTRIES				= 196;	// { int getdirentries(int fd, char *buf, u_int count, long *basep); }
+	SYS_MMAP					= 197;	// { user_addr_t mmap(caddr_t addr, size_t len, int prot, int flags, int fd, off_t pos); }
 	// SYS_NOSYS = 198;  // { int nosys(void); } 	{ __syscall }
-	SYS_LSEEK = 199;  // { off_t lseek(int fd, off_t offset, int whence); }
-	SYS_TRUNCATE = 200;  // { int truncate(char *path, off_t length); }
-	SYS_FTRUNCATE = 201;  // { int ftruncate(int fd, off_t length); }
-	SYS___SYSCTL = 202;  // { int __sysctl(int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen); }
-	SYS_MLOCK = 203;  // { int mlock(caddr_t addr, size_t len); }
-	SYS_MUNLOCK = 204;  // { int munlock(caddr_t addr, size_t len); }
-	SYS_UNDELETE = 205;  // { int undelete(user_addr_t path); }
-	SYS_ATSOCKET = 206;  // { int ATsocket(int proto); }
+	SYS_LSEEK					= 199;	// { off_t lseek(int fd, off_t offset, int whence); }
+	SYS_TRUNCATE					= 200;	// { int truncate(char *path, off_t length); }
+	SYS_FTRUNCATE					= 201;	// { int ftruncate(int fd, off_t length); }
+	SYS___SYSCTL					= 202;	// { int __sysctl(int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen); }
+	SYS_MLOCK					= 203;	// { int mlock(caddr_t addr, size_t len); }
+	SYS_MUNLOCK					= 204;	// { int munlock(caddr_t addr, size_t len); }
+	SYS_UNDELETE					= 205;	// { int undelete(user_addr_t path); }
+	SYS_ATSOCKET					= 206;	// { int ATsocket(int proto); }
 	// SYS_NOSYS = 213;  // { int nosys(void); } 	{ Reserved for AppleTalk }
 	// SYS_NOSYS = 206;  // { int nosys(void); }
 	// SYS_NOSYS = 207;  // { int nosys(void); }
@@ -237,166 +237,166 @@ const (
 	// SYS_NOSYS = 211;  // { int nosys(void); }
 	// SYS_NOSYS = 212;  // { int nosys(void); }
 	// SYS_NOSYS = 213;  // { int nosys(void); } 	{ Reserved for AppleTalk }
-	SYS_KQUEUE_FROM_PORTSET_NP = 214;  // { int kqueue_from_portset_np(int portset); }
-	SYS_KQUEUE_PORTSET_NP = 215;  // { int kqueue_portset_np(int fd); }
-	SYS_GETATTRLIST = 220;  // { int getattrlist(const char *path, struct attrlist *alist, void *attributeBuffer, size_t bufferSize, u_long options); }
-	SYS_SETATTRLIST = 221;  // { int setattrlist(const char *path, struct attrlist *alist, void *attributeBuffer, size_t bufferSize, u_long options); }
-	SYS_GETDIRENTRIESATTR = 222;  // { int getdirentriesattr(int fd, struct attrlist *alist, void *buffer, size_t buffersize, u_long *count, u_long *basep, u_long *newstate, u_long options); }
-	SYS_EXCHANGEDATA = 223;  // { int exchangedata(const char *path1, const char *path2, u_long options); }
+	SYS_KQUEUE_FROM_PORTSET_NP	= 214;	// { int kqueue_from_portset_np(int portset); }
+	SYS_KQUEUE_PORTSET_NP		= 215;	// { int kqueue_portset_np(int fd); }
+	SYS_GETATTRLIST			= 220;	// { int getattrlist(const char *path, struct attrlist *alist, void *attributeBuffer, size_t bufferSize, u_long options); }
+	SYS_SETATTRLIST			= 221;	// { int setattrlist(const char *path, struct attrlist *alist, void *attributeBuffer, size_t bufferSize, u_long options); }
+	SYS_GETDIRENTRIESATTR		= 222;	// { int getdirentriesattr(int fd, struct attrlist *alist, void *buffer, size_t buffersize, u_long *count, u_long *basep, u_long *newstate, u_long options); }
+	SYS_EXCHANGEDATA		= 223;	// { int exchangedata(const char *path1, const char *path2, u_long options); }
 	// SYS_NOSYS = 224;  // { int nosys(void); } { was checkuseraccess }
-	SYS_SEARCHFS = 225;  // { int searchfs(const char *path, struct fssearchblock *searchblock, u_long *nummatches, u_long scriptcode, u_long options, struct searchstate *state); }
-	SYS_DELETE = 226;  // { int delete(user_addr_t path) NO_SYSCALL_STUB; }       { private delete (Carbon semantics) }
-	SYS_COPYFILE = 227;  // { int copyfile(char *from, char *to, int mode, int flags) NO_SYSCALL_STUB; }
+	SYS_SEARCHFS	= 225;	// { int searchfs(const char *path, struct fssearchblock *searchblock, u_long *nummatches, u_long scriptcode, u_long options, struct searchstate *state); }
+	SYS_DELETE	= 226;	// { int delete(user_addr_t path) NO_SYSCALL_STUB; }       { private delete (Carbon semantics) }
+	SYS_COPYFILE	= 227;	// { int copyfile(char *from, char *to, int mode, int flags) NO_SYSCALL_STUB; }
 	// SYS_NOSYS = 228;  // { int nosys(void); }
 	// SYS_NOSYS = 229;  // { int nosys(void); }
-	SYS_POLL = 230;  // { int poll(struct pollfd *fds, u_int nfds, int timeout); }
-	SYS_WATCHEVENT = 231;  // { int watchevent(struct eventreq *u_req, int u_eventmask); }
-	SYS_WAITEVENT = 232;  // { int waitevent(struct eventreq *u_req, struct timeval *tv); }
-	SYS_MODWATCH = 233;  // { int modwatch(struct eventreq *u_req, int u_eventmask); }
-	SYS_GETXATTR = 234;  // { user_ssize_t getxattr(user_addr_t path, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }
-	SYS_FGETXATTR = 235;  // { user_ssize_t fgetxattr(int fd, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }
-	SYS_SETXATTR = 236;  // { int setxattr(user_addr_t path, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }
-	SYS_FSETXATTR = 237;  // { int fsetxattr(int fd, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }
-	SYS_REMOVEXATTR = 238;  // { int removexattr(user_addr_t path, user_addr_t attrname, int options); }
-	SYS_FREMOVEXATTR = 239;  // { int fremovexattr(int fd, user_addr_t attrname, int options); }
-	SYS_LISTXATTR = 240;  // { user_ssize_t listxattr(user_addr_t path, user_addr_t namebuf, size_t bufsize, int options); }
-	SYS_FLISTXATTR = 241;  // { user_ssize_t flistxattr(int fd, user_addr_t namebuf, size_t bufsize, int options); }
-	SYS_FSCTL = 242;  // { int fsctl(const char *path, u_long cmd, caddr_t data, u_long options); }
-	SYS_INITGROUPS = 243;  // { int initgroups(u_int gidsetsize, gid_t *gidset, int gmuid); }
-	SYS_POSIX_SPAWN = 244;  // { int posix_spawn(pid_t *pid, const char *path, const struct _posix_spawn_args_desc *adesc, char **argv, char **envp); }
+	SYS_POLL		= 230;	// { int poll(struct pollfd *fds, u_int nfds, int timeout); }
+	SYS_WATCHEVENT		= 231;	// { int watchevent(struct eventreq *u_req, int u_eventmask); }
+	SYS_WAITEVENT		= 232;	// { int waitevent(struct eventreq *u_req, struct timeval *tv); }
+	SYS_MODWATCH		= 233;	// { int modwatch(struct eventreq *u_req, int u_eventmask); }
+	SYS_GETXATTR		= 234;	// { user_ssize_t getxattr(user_addr_t path, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }
+	SYS_FGETXATTR		= 235;	// { user_ssize_t fgetxattr(int fd, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }
+	SYS_SETXATTR		= 236;	// { int setxattr(user_addr_t path, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }
+	SYS_FSETXATTR		= 237;	// { int fsetxattr(int fd, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }
+	SYS_REMOVEXATTR		= 238;	// { int removexattr(user_addr_t path, user_addr_t attrname, int options); }
+	SYS_FREMOVEXATTR	= 239;	// { int fremovexattr(int fd, user_addr_t attrname, int options); }
+	SYS_LISTXATTR		= 240;	// { user_ssize_t listxattr(user_addr_t path, user_addr_t namebuf, size_t bufsize, int options); }
+	SYS_FLISTXATTR		= 241;	// { user_ssize_t flistxattr(int fd, user_addr_t namebuf, size_t bufsize, int options); }
+	SYS_FSCTL		= 242;	// { int fsctl(const char *path, u_long cmd, caddr_t data, u_long options); }
+	SYS_INITGROUPS		= 243;	// { int initgroups(u_int gidsetsize, gid_t *gidset, int gmuid); }
+	SYS_POSIX_SPAWN		= 244;	// { int posix_spawn(pid_t *pid, const char *path, const struct _posix_spawn_args_desc *adesc, char **argv, char **envp); }
 	// SYS_NOSYS = 245;  // { int nosys(void); }
 	// SYS_NOSYS = 246;  // { int nosys(void); }
-	SYS_NFSCLNT = 247;  // { int nfsclnt(int flag, caddr_t argp); }
+	SYS_NFSCLNT	= 247;	// { int nfsclnt(int flag, caddr_t argp); }
 	// SYS_NOSYS = 247;  // { int nosys(void); }
-	SYS_FHOPEN = 248;  // { int fhopen(const struct fhandle *u_fhp, int flags); }
+	SYS_FHOPEN	= 248;	// { int fhopen(const struct fhandle *u_fhp, int flags); }
 	// SYS_NOSYS = 248;  // { int nosys(void); }
 	// SYS_NOSYS = 249;  // { int nosys(void); }
-	SYS_MINHERIT = 250;  // { int minherit(void *addr, size_t len, int inherit); }
-	SYS_SEMSYS = 251;  // { int semsys(u_int which, int a2, int a3, int a4, int a5); }
+	SYS_MINHERIT	= 250;	// { int minherit(void *addr, size_t len, int inherit); }
+	SYS_SEMSYS	= 251;	// { int semsys(u_int which, int a2, int a3, int a4, int a5); }
 	// SYS_NOSYS = 251;  // { int nosys(void); }
-	SYS_MSGSYS = 252;  // { int msgsys(u_int which, int a2, int a3, int a4, int a5); }
+	SYS_MSGSYS	= 252;	// { int msgsys(u_int which, int a2, int a3, int a4, int a5); }
 	// SYS_NOSYS = 252;  // { int nosys(void); }
-	SYS_SHMSYS = 253;  // { int shmsys(u_int which, int a2, int a3, int a4); }
+	SYS_SHMSYS	= 253;	// { int shmsys(u_int which, int a2, int a3, int a4); }
 	// SYS_NOSYS = 253;  // { int nosys(void); }
-	SYS_SEMCTL = 254;  // { int semctl(int semid, int semnum, int cmd, semun_t arg); }
-	SYS_SEMGET = 255;  // { int semget(key_t key, int	nsems, int semflg); }
-	SYS_SEMOP = 256;  // { int semop(int semid, struct sembuf *sops, int nsops); }
+	SYS_SEMCTL	= 254;	// { int semctl(int semid, int semnum, int cmd, semun_t arg); }
+	SYS_SEMGET	= 255;	// { int semget(key_t key, int	nsems, int semflg); }
+	SYS_SEMOP	= 256;	// { int semop(int semid, struct sembuf *sops, int nsops); }
 	// SYS_NOSYS = 257;  // { int nosys(void); }
 	// SYS_NOSYS = 254;  // { int nosys(void); }
 	// SYS_NOSYS = 255;  // { int nosys(void); }
 	// SYS_NOSYS = 256;  // { int nosys(void); }
 	// SYS_NOSYS = 257;  // { int nosys(void); }
-	SYS_MSGCTL = 258;  // { int msgctl(int msqid, int cmd, struct	msqid_ds *buf); }
-	SYS_MSGGET = 259;  // { int msgget(key_t key, int msgflg); }
-	SYS_MSGSND = 260;  // { int msgsnd(int msqid, void *msgp, size_t msgsz, int msgflg); }
-	SYS_MSGRCV = 261;  // { user_ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg); }
+	SYS_MSGCTL	= 258;	// { int msgctl(int msqid, int cmd, struct	msqid_ds *buf); }
+	SYS_MSGGET	= 259;	// { int msgget(key_t key, int msgflg); }
+	SYS_MSGSND	= 260;	// { int msgsnd(int msqid, void *msgp, size_t msgsz, int msgflg); }
+	SYS_MSGRCV	= 261;	// { user_ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg); }
 	// SYS_NOSYS = 258;  // { int nosys(void); }
 	// SYS_NOSYS = 259;  // { int nosys(void); }
 	// SYS_NOSYS = 260;  // { int nosys(void); }
 	// SYS_NOSYS = 261;  // { int nosys(void); }
-	SYS_SHMAT = 262;  // { user_addr_t shmat(int shmid, void *shmaddr, int shmflg); }
-	SYS_SHMCTL = 263;  // { int shmctl(int shmid, int cmd, struct shmid_ds *buf); }
-	SYS_SHMDT = 264;  // { int shmdt(void *shmaddr); }
-	SYS_SHMGET = 265;  // { int shmget(key_t key, size_t size, int shmflg); }
+	SYS_SHMAT	= 262;	// { user_addr_t shmat(int shmid, void *shmaddr, int shmflg); }
+	SYS_SHMCTL	= 263;	// { int shmctl(int shmid, int cmd, struct shmid_ds *buf); }
+	SYS_SHMDT	= 264;	// { int shmdt(void *shmaddr); }
+	SYS_SHMGET	= 265;	// { int shmget(key_t key, size_t size, int shmflg); }
 	// SYS_NOSYS = 262;  // { int nosys(void); }
 	// SYS_NOSYS = 263;  // { int nosys(void); }
 	// SYS_NOSYS = 264;  // { int nosys(void); }
 	// SYS_NOSYS = 265;  // { int nosys(void); }
-	SYS_SHM_OPEN = 266;  // { int shm_open(const char *name, int oflag, int mode); }
-	SYS_SHM_UNLINK = 267;  // { int shm_unlink(const char *name); }
-	SYS_SEM_OPEN = 268;  // { user_addr_t sem_open(const char *name, int oflag, int mode, int value); }
-	SYS_SEM_CLOSE = 269;  // { int sem_close(sem_t *sem); }
-	SYS_SEM_UNLINK = 270;  // { int sem_unlink(const char *name); }
-	SYS_SEM_WAIT = 271;  // { int sem_wait(sem_t *sem); }
-	SYS_SEM_TRYWAIT = 272;  // { int sem_trywait(sem_t *sem); }
-	SYS_SEM_POST = 273;  // { int sem_post(sem_t *sem); }
-	SYS_SEM_GETVALUE = 274;  // { int sem_getvalue(sem_t *sem, int *sval); }
-	SYS_SEM_INIT = 275;  // { int sem_init(sem_t *sem, int phsared, u_int value); }
-	SYS_SEM_DESTROY = 276;  // { int sem_destroy(sem_t *sem); }
-	SYS_OPEN_EXTENDED = 277;  // { int open_extended(user_addr_t path, int flags, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
-	SYS_UMASK_EXTENDED = 278;  // { int umask_extended(int newmask, user_addr_t xsecurity) NO_SYSCALL_STUB; }
-	SYS_STAT_EXTENDED = 279;  // { int stat_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
-	SYS_LSTAT_EXTENDED = 280;  // { int lstat_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
-	SYS_FSTAT_EXTENDED = 281;  // { int fstat_extended(int fd, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
-	SYS_CHMOD_EXTENDED = 282;  // { int chmod_extended(user_addr_t path, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
-	SYS_FCHMOD_EXTENDED = 283;  // { int fchmod_extended(int fd, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
-	SYS_ACCESS_EXTENDED = 284;  // { int access_extended(user_addr_t entries, size_t size, user_addr_t results, uid_t uid) NO_SYSCALL_STUB; }
-	SYS_SETTID = 285;  // { int settid(uid_t uid, gid_t gid) NO_SYSCALL_STUB; }
-	SYS_GETTID = 286;  // { int gettid(uid_t *uidp, gid_t *gidp) NO_SYSCALL_STUB; }
-	SYS_SETSGROUPS = 287;  // { int setsgroups(int setlen, user_addr_t guidset) NO_SYSCALL_STUB; }
-	SYS_GETSGROUPS = 288;  // { int getsgroups(user_addr_t setlen, user_addr_t guidset) NO_SYSCALL_STUB; }
-	SYS_SETWGROUPS = 289;  // { int setwgroups(int setlen, user_addr_t guidset) NO_SYSCALL_STUB; }
-	SYS_GETWGROUPS = 290;  // { int getwgroups(user_addr_t setlen, user_addr_t guidset) NO_SYSCALL_STUB; }
-	SYS_MKFIFO_EXTENDED = 291;  // { int mkfifo_extended(user_addr_t path, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
-	SYS_MKDIR_EXTENDED = 292;  // { int mkdir_extended(user_addr_t path, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
-	SYS_IDENTITYSVC = 293;  // { int identitysvc(int opcode, user_addr_t message) NO_SYSCALL_STUB; }
-	SYS_SHARED_REGION_CHECK_NP = 294;  // { int shared_region_check_np(uint64_t *start_address) NO_SYSCALL_STUB; }
-	SYS_SHARED_REGION_MAP_NP = 295;  // { int shared_region_map_np(int fd, uint32_t count, const struct shared_file_mapping_np *mappings) NO_SYSCALL_STUB; }
+	SYS_SHM_OPEN			= 266;	// { int shm_open(const char *name, int oflag, int mode); }
+	SYS_SHM_UNLINK			= 267;	// { int shm_unlink(const char *name); }
+	SYS_SEM_OPEN			= 268;	// { user_addr_t sem_open(const char *name, int oflag, int mode, int value); }
+	SYS_SEM_CLOSE			= 269;	// { int sem_close(sem_t *sem); }
+	SYS_SEM_UNLINK			= 270;	// { int sem_unlink(const char *name); }
+	SYS_SEM_WAIT			= 271;	// { int sem_wait(sem_t *sem); }
+	SYS_SEM_TRYWAIT			= 272;	// { int sem_trywait(sem_t *sem); }
+	SYS_SEM_POST			= 273;	// { int sem_post(sem_t *sem); }
+	SYS_SEM_GETVALUE		= 274;	// { int sem_getvalue(sem_t *sem, int *sval); }
+	SYS_SEM_INIT			= 275;	// { int sem_init(sem_t *sem, int phsared, u_int value); }
+	SYS_SEM_DESTROY			= 276;	// { int sem_destroy(sem_t *sem); }
+	SYS_OPEN_EXTENDED		= 277;	// { int open_extended(user_addr_t path, int flags, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
+	SYS_UMASK_EXTENDED		= 278;	// { int umask_extended(int newmask, user_addr_t xsecurity) NO_SYSCALL_STUB; }
+	SYS_STAT_EXTENDED		= 279;	// { int stat_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
+	SYS_LSTAT_EXTENDED		= 280;	// { int lstat_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
+	SYS_FSTAT_EXTENDED		= 281;	// { int fstat_extended(int fd, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
+	SYS_CHMOD_EXTENDED		= 282;	// { int chmod_extended(user_addr_t path, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
+	SYS_FCHMOD_EXTENDED		= 283;	// { int fchmod_extended(int fd, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
+	SYS_ACCESS_EXTENDED		= 284;	// { int access_extended(user_addr_t entries, size_t size, user_addr_t results, uid_t uid) NO_SYSCALL_STUB; }
+	SYS_SETTID			= 285;	// { int settid(uid_t uid, gid_t gid) NO_SYSCALL_STUB; }
+	SYS_GETTID			= 286;	// { int gettid(uid_t *uidp, gid_t *gidp) NO_SYSCALL_STUB; }
+	SYS_SETSGROUPS			= 287;	// { int setsgroups(int setlen, user_addr_t guidset) NO_SYSCALL_STUB; }
+	SYS_GETSGROUPS			= 288;	// { int getsgroups(user_addr_t setlen, user_addr_t guidset) NO_SYSCALL_STUB; }
+	SYS_SETWGROUPS			= 289;	// { int setwgroups(int setlen, user_addr_t guidset) NO_SYSCALL_STUB; }
+	SYS_GETWGROUPS			= 290;	// { int getwgroups(user_addr_t setlen, user_addr_t guidset) NO_SYSCALL_STUB; }
+	SYS_MKFIFO_EXTENDED		= 291;	// { int mkfifo_extended(user_addr_t path, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
+	SYS_MKDIR_EXTENDED		= 292;	// { int mkdir_extended(user_addr_t path, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
+	SYS_IDENTITYSVC			= 293;	// { int identitysvc(int opcode, user_addr_t message) NO_SYSCALL_STUB; }
+	SYS_SHARED_REGION_CHECK_NP	= 294;	// { int shared_region_check_np(uint64_t *start_address) NO_SYSCALL_STUB; }
+	SYS_SHARED_REGION_MAP_NP	= 295;	// { int shared_region_map_np(int fd, uint32_t count, const struct shared_file_mapping_np *mappings) NO_SYSCALL_STUB; }
 	// SYS_NOSYS = 296;  // { int nosys(void); } { old load_shared_file }
 	// SYS_NOSYS = 297;  // { int nosys(void); } { old reset_shared_file }
 	// SYS_NOSYS = 298;  // { int nosys(void); } { old new_system_shared_regions }
 	// SYS_ENOSYS = 299;  // { int enosys(void); } { old shared_region_map_file_np }
 	// SYS_ENOSYS = 300;  // { int enosys(void); } { old shared_region_make_private_np }
-	SYS___PTHREAD_MUTEX_DESTROY = 301;  // { int __pthread_mutex_destroy(int mutexid); }
-	SYS___PTHREAD_MUTEX_INIT = 302;  // { int __pthread_mutex_init(user_addr_t  mutex, user_addr_t attr); }
-	SYS___PTHREAD_MUTEX_LOCK = 303;  // { int __pthread_mutex_lock(int mutexid); }
-	SYS___PTHREAD_MUTEX_TRYLOCK = 304;  // { int __pthread_mutex_trylock(int mutexid); }
-	SYS___PTHREAD_MUTEX_UNLOCK = 305;  // { int __pthread_mutex_unlock(int mutexid); }
-	SYS___PTHREAD_COND_INIT = 306;  // { int __pthread_cond_init(user_addr_t cond, user_addr_t attr); }
-	SYS___PTHREAD_COND_DESTROY = 307;  // { int __pthread_cond_destroy(int condid); }
-	SYS___PTHREAD_COND_BROADCAST = 308;  // { int __pthread_cond_broadcast(int condid); }
-	SYS___PTHREAD_COND_SIGNAL = 309;  // { int __pthread_cond_signal(int condid); }
-	SYS_GETSID = 310;  // { int getsid(pid_t pid); }
-	SYS_SETTID_WITH_PID = 311;  // { int settid_with_pid(pid_t pid, int assume) NO_SYSCALL_STUB; }
-	SYS___PTHREAD_COND_TIMEDWAIT = 312;  // { int __pthread_cond_timedwait(int condid, int mutexid, user_addr_t abstime); }
-	SYS_AIO_FSYNC = 313;  // { int aio_fsync(int op, user_addr_t aiocbp); }
-	SYS_AIO_RETURN = 314;  // { user_ssize_t aio_return(user_addr_t aiocbp); }
-	SYS_AIO_SUSPEND = 315;  // { int aio_suspend(user_addr_t aiocblist, int nent, user_addr_t timeoutp); }
-	SYS_AIO_CANCEL = 316;  // { int aio_cancel(int fd, user_addr_t aiocbp); }
-	SYS_AIO_ERROR = 317;  // { int aio_error(user_addr_t aiocbp); }
-	SYS_AIO_READ = 318;  // { int aio_read(user_addr_t aiocbp); }
-	SYS_AIO_WRITE = 319;  // { int aio_write(user_addr_t aiocbp); }
-	SYS_LIO_LISTIO = 320;  // { int lio_listio(int mode, user_addr_t aiocblist, int nent, user_addr_t sigp); }
-	SYS___PTHREAD_COND_WAIT = 321;  // { int __pthread_cond_wait(int condid, int mutexid); }
-	SYS_IOPOLICYSYS = 322;  // { int iopolicysys(int cmd, void *arg) NO_SYSCALL_STUB; }
+	SYS___PTHREAD_MUTEX_DESTROY	= 301;	// { int __pthread_mutex_destroy(int mutexid); }
+	SYS___PTHREAD_MUTEX_INIT	= 302;	// { int __pthread_mutex_init(user_addr_t  mutex, user_addr_t attr); }
+	SYS___PTHREAD_MUTEX_LOCK	= 303;	// { int __pthread_mutex_lock(int mutexid); }
+	SYS___PTHREAD_MUTEX_TRYLOCK	= 304;	// { int __pthread_mutex_trylock(int mutexid); }
+	SYS___PTHREAD_MUTEX_UNLOCK	= 305;	// { int __pthread_mutex_unlock(int mutexid); }
+	SYS___PTHREAD_COND_INIT		= 306;	// { int __pthread_cond_init(user_addr_t cond, user_addr_t attr); }
+	SYS___PTHREAD_COND_DESTROY	= 307;	// { int __pthread_cond_destroy(int condid); }
+	SYS___PTHREAD_COND_BROADCAST	= 308;	// { int __pthread_cond_broadcast(int condid); }
+	SYS___PTHREAD_COND_SIGNAL	= 309;	// { int __pthread_cond_signal(int condid); }
+	SYS_GETSID			= 310;	// { int getsid(pid_t pid); }
+	SYS_SETTID_WITH_PID		= 311;	// { int settid_with_pid(pid_t pid, int assume) NO_SYSCALL_STUB; }
+	SYS___PTHREAD_COND_TIMEDWAIT	= 312;	// { int __pthread_cond_timedwait(int condid, int mutexid, user_addr_t abstime); }
+	SYS_AIO_FSYNC			= 313;	// { int aio_fsync(int op, user_addr_t aiocbp); }
+	SYS_AIO_RETURN			= 314;	// { user_ssize_t aio_return(user_addr_t aiocbp); }
+	SYS_AIO_SUSPEND			= 315;	// { int aio_suspend(user_addr_t aiocblist, int nent, user_addr_t timeoutp); }
+	SYS_AIO_CANCEL			= 316;	// { int aio_cancel(int fd, user_addr_t aiocbp); }
+	SYS_AIO_ERROR			= 317;	// { int aio_error(user_addr_t aiocbp); }
+	SYS_AIO_READ			= 318;	// { int aio_read(user_addr_t aiocbp); }
+	SYS_AIO_WRITE			= 319;	// { int aio_write(user_addr_t aiocbp); }
+	SYS_LIO_LISTIO			= 320;	// { int lio_listio(int mode, user_addr_t aiocblist, int nent, user_addr_t sigp); }
+	SYS___PTHREAD_COND_WAIT		= 321;	// { int __pthread_cond_wait(int condid, int mutexid); }
+	SYS_IOPOLICYSYS			= 322;	// { int iopolicysys(int cmd, void *arg) NO_SYSCALL_STUB; }
 	// SYS_NOSYS = 323;  // { int nosys(void); }
-	SYS_MLOCKALL = 324;  // { int mlockall(int how); }
-	SYS_MUNLOCKALL = 325;  // { int munlockall(int how); }
+	SYS_MLOCKALL	= 324;	// { int mlockall(int how); }
+	SYS_MUNLOCKALL	= 325;	// { int munlockall(int how); }
 	// SYS_NOSYS = 326;  // { int nosys(void); }
-	SYS_ISSETUGID = 327;  // { int issetugid(void); }
-	SYS___PTHREAD_KILL = 328;  // { int __pthread_kill(int thread_port, int sig); }
-	SYS___PTHREAD_SIGMASK = 329;  // { int __pthread_sigmask(int how, user_addr_t set, user_addr_t oset); }
-	SYS___SIGWAIT = 330;  // { int __sigwait(user_addr_t set, user_addr_t sig); }
-	SYS___DISABLE_THREADSIGNAL = 331;  // { int __disable_threadsignal(int value); }
-	SYS___PTHREAD_MARKCANCEL = 332;  // { int __pthread_markcancel(int thread_port); }
-	SYS___PTHREAD_CANCELED = 333;  // { int __pthread_canceled(int  action); }
-	SYS___SEMWAIT_SIGNAL = 334;  // { int __semwait_signal(int cond_sem, int mutex_sem, int timeout, int relative, time_t tv_sec, int32_t tv_nsec); }
+	SYS_ISSETUGID			= 327;	// { int issetugid(void); }
+	SYS___PTHREAD_KILL		= 328;	// { int __pthread_kill(int thread_port, int sig); }
+	SYS___PTHREAD_SIGMASK		= 329;	// { int __pthread_sigmask(int how, user_addr_t set, user_addr_t oset); }
+	SYS___SIGWAIT			= 330;	// { int __sigwait(user_addr_t set, user_addr_t sig); }
+	SYS___DISABLE_THREADSIGNAL	= 331;	// { int __disable_threadsignal(int value); }
+	SYS___PTHREAD_MARKCANCEL	= 332;	// { int __pthread_markcancel(int thread_port); }
+	SYS___PTHREAD_CANCELED		= 333;	// { int __pthread_canceled(int  action); }
+	SYS___SEMWAIT_SIGNAL		= 334;	// { int __semwait_signal(int cond_sem, int mutex_sem, int timeout, int relative, time_t tv_sec, int32_t tv_nsec); }
 	// SYS_NOSYS = 335;  // { int nosys(void); }   { old utrace }
-	SYS_PROC_INFO = 336;  // { int proc_info(int32_t callnum,int32_t pid,uint32_t flavor, uint64_t arg,user_addr_t buffer,int32_t buffersize) NO_SYSCALL_STUB; }
-	SYS_SENDFILE = 337;  // { int sendfile(int fd, int s, off_t offset, off_t *nbytes, struct sf_hdtr *hdtr, int flags); }
+	SYS_PROC_INFO	= 336;	// { int proc_info(int32_t callnum,int32_t pid,uint32_t flavor, uint64_t arg,user_addr_t buffer,int32_t buffersize) NO_SYSCALL_STUB; }
+	SYS_SENDFILE	= 337;	// { int sendfile(int fd, int s, off_t offset, off_t *nbytes, struct sf_hdtr *hdtr, int flags); }
 	// SYS_NOSYS = 337;  // { int nosys(void); }
-	SYS_STAT64 = 338;  // { int stat64(user_addr_t path, user_addr_t ub); }
-	SYS_FSTAT64 = 339;  // { int fstat64(int fd, user_addr_t ub); }
-	SYS_LSTAT64 = 340;  // { int lstat64(user_addr_t path, user_addr_t ub); }
-	SYS_STAT64_EXTENDED = 341;  // { int stat64_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
-	SYS_LSTAT64_EXTENDED = 342;  // { int lstat64_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
-	SYS_FSTAT64_EXTENDED = 343;  // { int fstat64_extended(int fd, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
-	SYS_GETDIRENTRIES64 = 344;  // { user_ssize_t getdirentries64(int fd, void *buf, user_size_t bufsize, off_t *position) NO_SYSCALL_STUB; }
-	SYS_STATFS64 = 345;  // { int statfs64(char *path, struct statfs64 *buf); }
-	SYS_FSTATFS64 = 346;  // { int fstatfs64(int fd, struct statfs64 *buf); }
-	SYS_GETFSSTAT64 = 347;  // { int getfsstat64(user_addr_t buf, int bufsize, int flags); }
-	SYS___PTHREAD_CHDIR = 348;  // { int __pthread_chdir(user_addr_t path); }
-	SYS___PTHREAD_FCHDIR = 349;  // { int __pthread_fchdir(int fd); }
-	SYS_AUDIT = 350;  // { int audit(void *record, int length); }
-	SYS_AUDITON = 351;  // { int auditon(int cmd, void *data, int length); }
+	SYS_STAT64		= 338;	// { int stat64(user_addr_t path, user_addr_t ub); }
+	SYS_FSTAT64		= 339;	// { int fstat64(int fd, user_addr_t ub); }
+	SYS_LSTAT64		= 340;	// { int lstat64(user_addr_t path, user_addr_t ub); }
+	SYS_STAT64_EXTENDED	= 341;	// { int stat64_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
+	SYS_LSTAT64_EXTENDED	= 342;	// { int lstat64_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
+	SYS_FSTAT64_EXTENDED	= 343;	// { int fstat64_extended(int fd, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
+	SYS_GETDIRENTRIES64	= 344;	// { user_ssize_t getdirentries64(int fd, void *buf, user_size_t bufsize, off_t *position) NO_SYSCALL_STUB; }
+	SYS_STATFS64		= 345;	// { int statfs64(char *path, struct statfs64 *buf); }
+	SYS_FSTATFS64		= 346;	// { int fstatfs64(int fd, struct statfs64 *buf); }
+	SYS_GETFSSTAT64		= 347;	// { int getfsstat64(user_addr_t buf, int bufsize, int flags); }
+	SYS___PTHREAD_CHDIR	= 348;	// { int __pthread_chdir(user_addr_t path); }
+	SYS___PTHREAD_FCHDIR	= 349;	// { int __pthread_fchdir(int fd); }
+	SYS_AUDIT		= 350;	// { int audit(void *record, int length); }
+	SYS_AUDITON		= 351;	// { int auditon(int cmd, void *data, int length); }
 	// SYS_NOSYS = 352;  // { int nosys(void); }
-	SYS_GETAUID = 353;  // { int getauid(au_id_t *auid); }
-	SYS_SETAUID = 354;  // { int setauid(au_id_t *auid); }
-	SYS_GETAUDIT = 355;  // { int getaudit(struct auditinfo *auditinfo); }
-	SYS_SETAUDIT = 356;  // { int setaudit(struct auditinfo *auditinfo); }
-	SYS_GETAUDIT_ADDR = 357;  // { int getaudit_addr(struct auditinfo_addr *auditinfo_addr, int length); }
-	SYS_SETAUDIT_ADDR = 358;  // { int setaudit_addr(struct auditinfo_addr *auditinfo_addr, int length); }
-	SYS_AUDITCTL = 359;  // { int auditctl(char *path); }
+	SYS_GETAUID		= 353;	// { int getauid(au_id_t *auid); }
+	SYS_SETAUID		= 354;	// { int setauid(au_id_t *auid); }
+	SYS_GETAUDIT		= 355;	// { int getaudit(struct auditinfo *auditinfo); }
+	SYS_SETAUDIT		= 356;	// { int setaudit(struct auditinfo *auditinfo); }
+	SYS_GETAUDIT_ADDR	= 357;	// { int getaudit_addr(struct auditinfo_addr *auditinfo_addr, int length); }
+	SYS_SETAUDIT_ADDR	= 358;	// { int setaudit_addr(struct auditinfo_addr *auditinfo_addr, int length); }
+	SYS_AUDITCTL		= 359;	// { int auditctl(char *path); }
 	// SYS_NOSYS = 350;  // { int nosys(void); }
 	// SYS_NOSYS = 351;  // { int nosys(void); }
 	// SYS_NOSYS = 352;  // { int nosys(void); }
@@ -407,15 +407,15 @@ const (
 	// SYS_NOSYS = 357;  // { int nosys(void); }
 	// SYS_NOSYS = 358;  // { int nosys(void); }
 	// SYS_NOSYS = 359;  // { int nosys(void); }
-	SYS_BSDTHREAD_CREATE = 360;  // { user_addr_t bsdthread_create(user_addr_t func, user_addr_t func_arg, user_addr_t stack, user_addr_t pthread, uint32_t flags) NO_SYSCALL_STUB; }
-	SYS_BSDTHREAD_TERMINATE = 361;  // { int bsdthread_terminate(user_addr_t stackaddr, size_t freesize, uint32_t port, uint32_t sem) NO_SYSCALL_STUB; }
-	SYS_KQUEUE = 362;  // { int kqueue(void); }
-	SYS_KEVENT = 363;  // { int kevent(int fd, const struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout); }
-	SYS_LCHOWN = 364;  // { int lchown(user_addr_t path, uid_t owner, gid_t group); }
-	SYS_STACK_SNAPSHOT = 365;  // { int stack_snapshot(pid_t pid, user_addr_t tracebuf, uint32_t tracebuf_size, uint32_t options) NO_SYSCALL_STUB; }
-	SYS_BSDTHREAD_REGISTER = 366;  // { int bsdthread_register(user_addr_t threadstart, user_addr_t wqthread, int pthsize) NO_SYSCALL_STUB; }
-	SYS_WORKQ_OPEN = 367;  // { int workq_open(void) NO_SYSCALL_STUB; }
-	SYS_WORKQ_OPS = 368;  // { int workq_ops(int options, user_addr_t item, int prio) NO_SYSCALL_STUB; }
+	SYS_BSDTHREAD_CREATE	= 360;	// { user_addr_t bsdthread_create(user_addr_t func, user_addr_t func_arg, user_addr_t stack, user_addr_t pthread, uint32_t flags) NO_SYSCALL_STUB; }
+	SYS_BSDTHREAD_TERMINATE	= 361;	// { int bsdthread_terminate(user_addr_t stackaddr, size_t freesize, uint32_t port, uint32_t sem) NO_SYSCALL_STUB; }
+	SYS_KQUEUE		= 362;	// { int kqueue(void); }
+	SYS_KEVENT		= 363;	// { int kevent(int fd, const struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout); }
+	SYS_LCHOWN		= 364;	// { int lchown(user_addr_t path, uid_t owner, gid_t group); }
+	SYS_STACK_SNAPSHOT	= 365;	// { int stack_snapshot(pid_t pid, user_addr_t tracebuf, uint32_t tracebuf_size, uint32_t options) NO_SYSCALL_STUB; }
+	SYS_BSDTHREAD_REGISTER	= 366;	// { int bsdthread_register(user_addr_t threadstart, user_addr_t wqthread, int pthsize) NO_SYSCALL_STUB; }
+	SYS_WORKQ_OPEN		= 367;	// { int workq_open(void) NO_SYSCALL_STUB; }
+	SYS_WORKQ_OPS		= 368;	// { int workq_ops(int options, user_addr_t item, int prio) NO_SYSCALL_STUB; }
 	// SYS_NOSYS = 369;  // { int nosys(void); }
 	// SYS_NOSYS = 370;  // { int nosys(void); }
 	// SYS_NOSYS = 371;  // { int nosys(void); }
@@ -427,59 +427,59 @@ const (
 	// SYS_NOSYS = 377;  // { int nosys(void); }
 	// SYS_NOSYS = 378;  // { int nosys(void); }
 	// SYS_NOSYS = 379;  // { int nosys(void); }
-	SYS___MAC_EXECVE = 380;  // { int __mac_execve(char *fname, char **argp, char **envp, struct mac *mac_p); }
-	SYS___MAC_SYSCALL = 381;  // { int __mac_syscall(char *policy, int call, user_addr_t arg); }
-	SYS___MAC_GET_FILE = 382;  // { int __mac_get_file(char *path_p, struct mac *mac_p); }
-	SYS___MAC_SET_FILE = 383;  // { int __mac_set_file(char *path_p, struct mac *mac_p); }
-	SYS___MAC_GET_LINK = 384;  // { int __mac_get_link(char *path_p, struct mac *mac_p); }
-	SYS___MAC_SET_LINK = 385;  // { int __mac_set_link(char *path_p, struct mac *mac_p); }
-	SYS___MAC_GET_PROC = 386;  // { int __mac_get_proc(struct mac *mac_p); }
-	SYS___MAC_SET_PROC = 387;  // { int __mac_set_proc(struct mac *mac_p); }
-	SYS___MAC_GET_FD = 388;  // { int __mac_get_fd(int fd, struct mac *mac_p); }
-	SYS___MAC_SET_FD = 389;  // { int __mac_set_fd(int fd, struct mac *mac_p); }
-	SYS___MAC_GET_PID = 390;  // { int __mac_get_pid(pid_t pid, struct mac *mac_p); }
-	SYS___MAC_GET_LCID = 391;  // { int __mac_get_lcid(pid_t lcid, struct mac *mac_p); }
-	SYS___MAC_GET_LCTX = 392;  // { int __mac_get_lctx(struct mac *mac_p); }
-	SYS___MAC_SET_LCTX = 393;  // { int __mac_set_lctx(struct mac *mac_p); }
-	SYS_SETLCID = 394;  // { int setlcid(pid_t pid, pid_t lcid) NO_SYSCALL_STUB; }
-	SYS_GETLCID = 395;  // { int getlcid(pid_t pid) NO_SYSCALL_STUB; }
-	SYS_READ_NOCANCEL = 396;  // { user_ssize_t read_nocancel(int fd, user_addr_t cbuf, user_size_t nbyte) NO_SYSCALL_STUB; }
-	SYS_WRITE_NOCANCEL = 397;  // { user_ssize_t write_nocancel(int fd, user_addr_t cbuf, user_size_t nbyte) NO_SYSCALL_STUB; }
-	SYS_OPEN_NOCANCEL = 398;  // { int open_nocancel(user_addr_t path, int flags, int mode) NO_SYSCALL_STUB; }
-	SYS_CLOSE_NOCANCEL = 399;  // { int close_nocancel(int fd) NO_SYSCALL_STUB; }
-	SYS_WAIT4_NOCANCEL = 400;  // { int wait4_nocancel(int pid, user_addr_t status, int options, user_addr_t rusage) NO_SYSCALL_STUB; }
-	SYS_RECVMSG_NOCANCEL = 401;  // { int recvmsg_nocancel(int s, struct msghdr *msg, int flags) NO_SYSCALL_STUB; }
-	SYS_SENDMSG_NOCANCEL = 402;  // { int sendmsg_nocancel(int s, caddr_t msg, int flags) NO_SYSCALL_STUB; }
-	SYS_RECVFROM_NOCANCEL = 403;  // { int recvfrom_nocancel(int s, void *buf, size_t len, int flags, struct sockaddr *from, int *fromlenaddr) NO_SYSCALL_STUB; }
-	SYS_ACCEPT_NOCANCEL = 404;  // { int accept_nocancel(int s, caddr_t name, socklen_t	*anamelen) NO_SYSCALL_STUB; }
+	SYS___MAC_EXECVE	= 380;	// { int __mac_execve(char *fname, char **argp, char **envp, struct mac *mac_p); }
+	SYS___MAC_SYSCALL	= 381;	// { int __mac_syscall(char *policy, int call, user_addr_t arg); }
+	SYS___MAC_GET_FILE	= 382;	// { int __mac_get_file(char *path_p, struct mac *mac_p); }
+	SYS___MAC_SET_FILE	= 383;	// { int __mac_set_file(char *path_p, struct mac *mac_p); }
+	SYS___MAC_GET_LINK	= 384;	// { int __mac_get_link(char *path_p, struct mac *mac_p); }
+	SYS___MAC_SET_LINK	= 385;	// { int __mac_set_link(char *path_p, struct mac *mac_p); }
+	SYS___MAC_GET_PROC	= 386;	// { int __mac_get_proc(struct mac *mac_p); }
+	SYS___MAC_SET_PROC	= 387;	// { int __mac_set_proc(struct mac *mac_p); }
+	SYS___MAC_GET_FD	= 388;	// { int __mac_get_fd(int fd, struct mac *mac_p); }
+	SYS___MAC_SET_FD	= 389;	// { int __mac_set_fd(int fd, struct mac *mac_p); }
+	SYS___MAC_GET_PID	= 390;	// { int __mac_get_pid(pid_t pid, struct mac *mac_p); }
+	SYS___MAC_GET_LCID	= 391;	// { int __mac_get_lcid(pid_t lcid, struct mac *mac_p); }
+	SYS___MAC_GET_LCTX	= 392;	// { int __mac_get_lctx(struct mac *mac_p); }
+	SYS___MAC_SET_LCTX	= 393;	// { int __mac_set_lctx(struct mac *mac_p); }
+	SYS_SETLCID		= 394;	// { int setlcid(pid_t pid, pid_t lcid) NO_SYSCALL_STUB; }
+	SYS_GETLCID		= 395;	// { int getlcid(pid_t pid) NO_SYSCALL_STUB; }
+	SYS_READ_NOCANCEL	= 396;	// { user_ssize_t read_nocancel(int fd, user_addr_t cbuf, user_size_t nbyte) NO_SYSCALL_STUB; }
+	SYS_WRITE_NOCANCEL	= 397;	// { user_ssize_t write_nocancel(int fd, user_addr_t cbuf, user_size_t nbyte) NO_SYSCALL_STUB; }
+	SYS_OPEN_NOCANCEL	= 398;	// { int open_nocancel(user_addr_t path, int flags, int mode) NO_SYSCALL_STUB; }
+	SYS_CLOSE_NOCANCEL	= 399;	// { int close_nocancel(int fd) NO_SYSCALL_STUB; }
+	SYS_WAIT4_NOCANCEL	= 400;	// { int wait4_nocancel(int pid, user_addr_t status, int options, user_addr_t rusage) NO_SYSCALL_STUB; }
+	SYS_RECVMSG_NOCANCEL	= 401;	// { int recvmsg_nocancel(int s, struct msghdr *msg, int flags) NO_SYSCALL_STUB; }
+	SYS_SENDMSG_NOCANCEL	= 402;	// { int sendmsg_nocancel(int s, caddr_t msg, int flags) NO_SYSCALL_STUB; }
+	SYS_RECVFROM_NOCANCEL	= 403;	// { int recvfrom_nocancel(int s, void *buf, size_t len, int flags, struct sockaddr *from, int *fromlenaddr) NO_SYSCALL_STUB; }
+	SYS_ACCEPT_NOCANCEL	= 404;	// { int accept_nocancel(int s, caddr_t name, socklen_t	*anamelen) NO_SYSCALL_STUB; }
 	// SYS_NOSYS = 401;  // { int nosys(void); }
 	// SYS_NOSYS = 402;  // { int nosys(void); }
 	// SYS_NOSYS = 403;  // { int nosys(void); }
 	// SYS_NOSYS = 404;  // { int nosys(void); }
-	SYS_MSYNC_NOCANCEL = 405;  // { int msync_nocancel(caddr_t addr, size_t len, int flags) NO_SYSCALL_STUB; }
-	SYS_FCNTL_NOCANCEL = 406;  // { int fcntl_nocancel(int fd, int cmd, long arg) NO_SYSCALL_STUB; }
-	SYS_SELECT_NOCANCEL = 407;  // { int select_nocancel(int nd, u_int32_t *in, u_int32_t *ou, u_int32_t *ex, struct timeval *tv) NO_SYSCALL_STUB; }
-	SYS_FSYNC_NOCANCEL = 408;  // { int fsync_nocancel(int fd) NO_SYSCALL_STUB; }
-	SYS_CONNECT_NOCANCEL = 409;  // { int connect_nocancel(int s, caddr_t name, socklen_t namelen) NO_SYSCALL_STUB; }
+	SYS_MSYNC_NOCANCEL	= 405;	// { int msync_nocancel(caddr_t addr, size_t len, int flags) NO_SYSCALL_STUB; }
+	SYS_FCNTL_NOCANCEL	= 406;	// { int fcntl_nocancel(int fd, int cmd, long arg) NO_SYSCALL_STUB; }
+	SYS_SELECT_NOCANCEL	= 407;	// { int select_nocancel(int nd, u_int32_t *in, u_int32_t *ou, u_int32_t *ex, struct timeval *tv) NO_SYSCALL_STUB; }
+	SYS_FSYNC_NOCANCEL	= 408;	// { int fsync_nocancel(int fd) NO_SYSCALL_STUB; }
+	SYS_CONNECT_NOCANCEL	= 409;	// { int connect_nocancel(int s, caddr_t name, socklen_t namelen) NO_SYSCALL_STUB; }
 	// SYS_NOSYS = 409;  // { int nosys(void); }
-	SYS_SIGSUSPEND_NOCANCEL = 410;  // { int sigsuspend_nocancel(sigset_t mask) NO_SYSCALL_STUB; }
-	SYS_READV_NOCANCEL = 411;  // { user_ssize_t readv_nocancel(int fd, struct iovec *iovp, u_int iovcnt) NO_SYSCALL_STUB; }
-	SYS_WRITEV_NOCANCEL = 412;  // { user_ssize_t writev_nocancel(int fd, struct iovec *iovp, u_int iovcnt) NO_SYSCALL_STUB; }
-	SYS_SENDTO_NOCANCEL = 413;  // { int sendto_nocancel(int s, caddr_t buf, size_t len, int flags, caddr_t to, socklen_t tolen) NO_SYSCALL_STUB; }
+	SYS_SIGSUSPEND_NOCANCEL	= 410;	// { int sigsuspend_nocancel(sigset_t mask) NO_SYSCALL_STUB; }
+	SYS_READV_NOCANCEL	= 411;	// { user_ssize_t readv_nocancel(int fd, struct iovec *iovp, u_int iovcnt) NO_SYSCALL_STUB; }
+	SYS_WRITEV_NOCANCEL	= 412;	// { user_ssize_t writev_nocancel(int fd, struct iovec *iovp, u_int iovcnt) NO_SYSCALL_STUB; }
+	SYS_SENDTO_NOCANCEL	= 413;	// { int sendto_nocancel(int s, caddr_t buf, size_t len, int flags, caddr_t to, socklen_t tolen) NO_SYSCALL_STUB; }
 	// SYS_NOSYS = 413;  // { int nosys(void); }
-	SYS_PREAD_NOCANCEL = 414;  // { user_ssize_t pread_nocancel(int fd, user_addr_t buf, user_size_t nbyte, off_t offset) NO_SYSCALL_STUB; }
-	SYS_PWRITE_NOCANCEL = 415;  // { user_ssize_t pwrite_nocancel(int fd, user_addr_t buf, user_size_t nbyte, off_t offset) NO_SYSCALL_STUB; }
-	SYS_WAITID_NOCANCEL = 416;  // { int waitid_nocancel(idtype_t idtype, id_t id, siginfo_t *infop, int options) NO_SYSCALL_STUB; }
-	SYS_POLL_NOCANCEL = 417;  // { int poll_nocancel(struct pollfd *fds, u_int nfds, int timeout) NO_SYSCALL_STUB; }
-	SYS_MSGSND_NOCANCEL = 418;  // { int msgsnd_nocancel(int msqid, void *msgp, size_t msgsz, int msgflg) NO_SYSCALL_STUB; }
-	SYS_MSGRCV_NOCANCEL = 419;  // { user_ssize_t msgrcv_nocancel(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg) NO_SYSCALL_STUB; }
+	SYS_PREAD_NOCANCEL	= 414;	// { user_ssize_t pread_nocancel(int fd, user_addr_t buf, user_size_t nbyte, off_t offset) NO_SYSCALL_STUB; }
+	SYS_PWRITE_NOCANCEL	= 415;	// { user_ssize_t pwrite_nocancel(int fd, user_addr_t buf, user_size_t nbyte, off_t offset) NO_SYSCALL_STUB; }
+	SYS_WAITID_NOCANCEL	= 416;	// { int waitid_nocancel(idtype_t idtype, id_t id, siginfo_t *infop, int options) NO_SYSCALL_STUB; }
+	SYS_POLL_NOCANCEL	= 417;	// { int poll_nocancel(struct pollfd *fds, u_int nfds, int timeout) NO_SYSCALL_STUB; }
+	SYS_MSGSND_NOCANCEL	= 418;	// { int msgsnd_nocancel(int msqid, void *msgp, size_t msgsz, int msgflg) NO_SYSCALL_STUB; }
+	SYS_MSGRCV_NOCANCEL	= 419;	// { user_ssize_t msgrcv_nocancel(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg) NO_SYSCALL_STUB; }
 	// SYS_NOSYS = 418;  // { int nosys(void); }
 	// SYS_NOSYS = 419;  // { int nosys(void); }
-	SYS_SEM_WAIT_NOCANCEL = 420;  // { int sem_wait_nocancel(sem_t *sem) NO_SYSCALL_STUB; }
-	SYS_AIO_SUSPEND_NOCANCEL = 421;  // { int aio_suspend_nocancel(user_addr_t aiocblist, int nent, user_addr_t timeoutp) NO_SYSCALL_STUB; }
-	SYS___SIGWAIT_NOCANCEL = 422;  // { int __sigwait_nocancel(user_addr_t set, user_addr_t sig) NO_SYSCALL_STUB; }
-	SYS___SEMWAIT_SIGNAL_NOCANCEL = 423;  // { int __semwait_signal_nocancel(int cond_sem, int mutex_sem, int timeout, int relative, time_t tv_sec, int32_t tv_nsec) NO_SYSCALL_STUB; }
-	SYS___MAC_MOUNT = 424;  // { int __mac_mount(char *type, char *path, int flags, caddr_t data, struct mac *mac_p); }
-	SYS___MAC_GET_MOUNT = 425;  // { int __mac_get_mount(char *path, struct mac *mac_p); }
-	SYS___MAC_GETFSSTAT = 426;  // { int __mac_getfsstat(user_addr_t buf, int bufsize, user_addr_t mac, int macsize, int flags); }
+	SYS_SEM_WAIT_NOCANCEL		= 420;	// { int sem_wait_nocancel(sem_t *sem) NO_SYSCALL_STUB; }
+	SYS_AIO_SUSPEND_NOCANCEL	= 421;	// { int aio_suspend_nocancel(user_addr_t aiocblist, int nent, user_addr_t timeoutp) NO_SYSCALL_STUB; }
+	SYS___SIGWAIT_NOCANCEL		= 422;	// { int __sigwait_nocancel(user_addr_t set, user_addr_t sig) NO_SYSCALL_STUB; }
+	SYS___SEMWAIT_SIGNAL_NOCANCEL	= 423;	// { int __semwait_signal_nocancel(int cond_sem, int mutex_sem, int timeout, int relative, time_t tv_sec, int32_t tv_nsec) NO_SYSCALL_STUB; }
+	SYS___MAC_MOUNT			= 424;	// { int __mac_mount(char *type, char *path, int flags, caddr_t data, struct mac *mac_p); }
+	SYS___MAC_GET_MOUNT		= 425;	// { int __mac_get_mount(char *path, struct mac *mac_p); }
+	SYS___MAC_GETFSSTAT		= 426;	// { int __mac_getfsstat(user_addr_t buf, int bufsize, user_addr_t mac, int macsize, int flags); }
 )
diff --git a/src/pkg/syscall/zsysnum_darwin_amd64.go b/src/pkg/syscall/zsysnum_darwin_amd64.go
index 3a39407f37..78ae194141 100644
--- a/src/pkg/syscall/zsysnum_darwin_amd64.go
+++ b/src/pkg/syscall/zsysnum_darwin_amd64.go
@@ -5,120 +5,120 @@ package syscall
 
 const (
 	// SYS_NOSYS = 0;  // { int nosys(void); }   { indirect syscall }
-	SYS_EXIT = 1;  // { void exit(int rval); }
-	SYS_FORK = 2;  // { int fork(void); }
-	SYS_READ = 3;  // { user_ssize_t read(int fd, user_addr_t cbuf, user_size_t nbyte); }
-	SYS_WRITE = 4;  // { user_ssize_t write(int fd, user_addr_t cbuf, user_size_t nbyte); }
-	SYS_OPEN = 5;  // { int open(user_addr_t path, int flags, int mode); }
-	SYS_CLOSE = 6;  // { int close(int fd); }
-	SYS_WAIT4 = 7;  // { int wait4(int pid, user_addr_t status, int options, user_addr_t rusage); }
+	SYS_EXIT	= 1;	// { void exit(int rval); }
+	SYS_FORK	= 2;	// { int fork(void); }
+	SYS_READ	= 3;	// { user_ssize_t read(int fd, user_addr_t cbuf, user_size_t nbyte); }
+	SYS_WRITE	= 4;	// { user_ssize_t write(int fd, user_addr_t cbuf, user_size_t nbyte); }
+	SYS_OPEN	= 5;	// { int open(user_addr_t path, int flags, int mode); }
+	SYS_CLOSE	= 6;	// { int close(int fd); }
+	SYS_WAIT4	= 7;	// { int wait4(int pid, user_addr_t status, int options, user_addr_t rusage); }
 	// SYS_NOSYS = 8;  // { int nosys(void); }   { old creat }
-	SYS_LINK = 9;  // { int link(user_addr_t path, user_addr_t link); }
-	SYS_UNLINK = 10;  // { int unlink(user_addr_t path); }
+	SYS_LINK	= 9;	// { int link(user_addr_t path, user_addr_t link); }
+	SYS_UNLINK	= 10;	// { int unlink(user_addr_t path); }
 	// SYS_NOSYS = 11;  // { int nosys(void); }   { old execv }
-	SYS_CHDIR = 12;  // { int chdir(user_addr_t path); }
-	SYS_FCHDIR = 13;  // { int fchdir(int fd); }
-	SYS_MKNOD = 14;  // { int mknod(user_addr_t path, int mode, int dev); }
-	SYS_CHMOD = 15;  // { int chmod(user_addr_t path, int mode); }
-	SYS_CHOWN = 16;  // { int chown(user_addr_t path, int uid, int gid); }
-	SYS_OGETFSSTAT = 18;  // { int ogetfsstat(user_addr_t buf, int bufsize, int flags); }
-	SYS_GETFSSTAT = 18;  // { int getfsstat(user_addr_t buf, int bufsize, int flags); }
+	SYS_CHDIR	= 12;	// { int chdir(user_addr_t path); }
+	SYS_FCHDIR	= 13;	// { int fchdir(int fd); }
+	SYS_MKNOD	= 14;	// { int mknod(user_addr_t path, int mode, int dev); }
+	SYS_CHMOD	= 15;	// { int chmod(user_addr_t path, int mode); }
+	SYS_CHOWN	= 16;	// { int chown(user_addr_t path, int uid, int gid); }
+	SYS_OGETFSSTAT	= 18;	// { int ogetfsstat(user_addr_t buf, int bufsize, int flags); }
+	SYS_GETFSSTAT	= 18;	// { int getfsstat(user_addr_t buf, int bufsize, int flags); }
 	// SYS_NOSYS = 19;  // { int nosys(void); }   { old lseek }
-	SYS_GETPID = 20;  // { int getpid(void); }
+	SYS_GETPID	= 20;	// { int getpid(void); }
 	// SYS_NOSYS = 21;  // { int nosys(void); }   { old mount }
 	// SYS_NOSYS = 22;  // { int nosys(void); }   { old umount }
-	SYS_SETUID = 23;  // { int setuid(uid_t uid); }
-	SYS_GETUID = 24;  // { int getuid(void); }
-	SYS_GETEUID = 25;  // { int geteuid(void); }
-	SYS_PTRACE = 26;  // { int ptrace(int req, pid_t pid, caddr_t addr, int data); }
-	SYS_RECVMSG = 27;  // { int recvmsg(int s, struct msghdr *msg, int flags); }
-	SYS_SENDMSG = 28;  // { int sendmsg(int s, caddr_t msg, int flags); }
-	SYS_RECVFROM = 29;  // { int recvfrom(int s, void *buf, size_t len, int flags, struct sockaddr *from, int *fromlenaddr); }
-	SYS_ACCEPT = 30;  // { int accept(int s, caddr_t name, socklen_t	*anamelen); }
-	SYS_GETPEERNAME = 31;  // { int getpeername(int fdes, caddr_t asa, socklen_t *alen); }
-	SYS_GETSOCKNAME = 32;  // { int getsockname(int fdes, caddr_t asa, socklen_t *alen); }
+	SYS_SETUID	= 23;	// { int setuid(uid_t uid); }
+	SYS_GETUID	= 24;	// { int getuid(void); }
+	SYS_GETEUID	= 25;	// { int geteuid(void); }
+	SYS_PTRACE	= 26;	// { int ptrace(int req, pid_t pid, caddr_t addr, int data); }
+	SYS_RECVMSG	= 27;	// { int recvmsg(int s, struct msghdr *msg, int flags); }
+	SYS_SENDMSG	= 28;	// { int sendmsg(int s, caddr_t msg, int flags); }
+	SYS_RECVFROM	= 29;	// { int recvfrom(int s, void *buf, size_t len, int flags, struct sockaddr *from, int *fromlenaddr); }
+	SYS_ACCEPT	= 30;	// { int accept(int s, caddr_t name, socklen_t	*anamelen); }
+	SYS_GETPEERNAME	= 31;	// { int getpeername(int fdes, caddr_t asa, socklen_t *alen); }
+	SYS_GETSOCKNAME	= 32;	// { int getsockname(int fdes, caddr_t asa, socklen_t *alen); }
 	// SYS_NOSYS = 27;  // { int nosys(void); }
 	// SYS_NOSYS = 28;  // { int nosys(void); }
 	// SYS_NOSYS = 29;  // { int nosys(void); }
 	// SYS_NOSYS = 30;  // { int nosys(void); }
 	// SYS_NOSYS = 31;  // { int nosys(void); }
 	// SYS_NOSYS = 32;  // { int nosys(void); }
-	SYS_ACCESS = 33;  // { int access(user_addr_t path, int flags); }
-	SYS_CHFLAGS = 34;  // { int chflags(char *path, int flags); }
-	SYS_FCHFLAGS = 35;  // { int fchflags(int fd, int flags); }
-	SYS_SYNC = 36;  // { int sync(void); }
-	SYS_KILL = 37;  // { int kill(int pid, int signum, int posix); }
+	SYS_ACCESS	= 33;	// { int access(user_addr_t path, int flags); }
+	SYS_CHFLAGS	= 34;	// { int chflags(char *path, int flags); }
+	SYS_FCHFLAGS	= 35;	// { int fchflags(int fd, int flags); }
+	SYS_SYNC	= 36;	// { int sync(void); }
+	SYS_KILL	= 37;	// { int kill(int pid, int signum, int posix); }
 	// SYS_NOSYS = 38;  // { int nosys(void); }   { old stat  }
-	SYS_GETPPID = 39;  // { int getppid(void); }
+	SYS_GETPPID	= 39;	// { int getppid(void); }
 	// SYS_NOSYS = 40;  // { int nosys(void); }   { old lstat }
-	SYS_DUP = 41;  // { int dup(u_int fd); }
-	SYS_PIPE = 42;  // { int pipe(void); }
-	SYS_GETEGID = 43;  // { int getegid(void); }
-	SYS_PROFIL = 44;  // { int profil(short *bufbase, size_t bufsize, u_long pcoffset, u_int pcscale); }
+	SYS_DUP		= 41;	// { int dup(u_int fd); }
+	SYS_PIPE	= 42;	// { int pipe(void); }
+	SYS_GETEGID	= 43;	// { int getegid(void); }
+	SYS_PROFIL	= 44;	// { int profil(short *bufbase, size_t bufsize, u_long pcoffset, u_int pcscale); }
 	// SYS_NOSYS = 45;  // { int nosys(void); } { old ktrace }
-	SYS_SIGACTION = 46;  // { int sigaction(int signum, struct __sigaction *nsa, struct sigaction *osa); }
-	SYS_GETGID = 47;  // { int getgid(void); }
-	SYS_SIGPROCMASK = 48;  // { int sigprocmask(int how, user_addr_t mask, user_addr_t omask); }
-	SYS_GETLOGIN = 49;  // { int getlogin(char *namebuf, u_int namelen); }
-	SYS_SETLOGIN = 50;  // { int setlogin(char *namebuf); }
-	SYS_ACCT = 51;  // { int acct(char *path); }
-	SYS_SIGPENDING = 52;  // { int sigpending(struct sigvec *osv); }
-	SYS_SIGALTSTACK = 53;  // { int sigaltstack(struct sigaltstack *nss, struct sigaltstack *oss); }
-	SYS_IOCTL = 54;  // { int ioctl(int fd, u_long com, caddr_t data); }
-	SYS_REBOOT = 55;  // { int reboot(int opt, char *command); }
-	SYS_REVOKE = 56;  // { int revoke(char *path); }
-	SYS_SYMLINK = 57;  // { int symlink(char *path, char *link); }
-	SYS_READLINK = 58;  // { int readlink(char *path, char *buf, int count); }
-	SYS_EXECVE = 59;  // { int execve(char *fname, char **argp, char **envp); }
-	SYS_UMASK = 60;  // { int umask(int newmask); }
-	SYS_CHROOT = 61;  // { int chroot(user_addr_t path); }
+	SYS_SIGACTION	= 46;	// { int sigaction(int signum, struct __sigaction *nsa, struct sigaction *osa); }
+	SYS_GETGID	= 47;	// { int getgid(void); }
+	SYS_SIGPROCMASK	= 48;	// { int sigprocmask(int how, user_addr_t mask, user_addr_t omask); }
+	SYS_GETLOGIN	= 49;	// { int getlogin(char *namebuf, u_int namelen); }
+	SYS_SETLOGIN	= 50;	// { int setlogin(char *namebuf); }
+	SYS_ACCT	= 51;	// { int acct(char *path); }
+	SYS_SIGPENDING	= 52;	// { int sigpending(struct sigvec *osv); }
+	SYS_SIGALTSTACK	= 53;	// { int sigaltstack(struct sigaltstack *nss, struct sigaltstack *oss); }
+	SYS_IOCTL	= 54;	// { int ioctl(int fd, u_long com, caddr_t data); }
+	SYS_REBOOT	= 55;	// { int reboot(int opt, char *command); }
+	SYS_REVOKE	= 56;	// { int revoke(char *path); }
+	SYS_SYMLINK	= 57;	// { int symlink(char *path, char *link); }
+	SYS_READLINK	= 58;	// { int readlink(char *path, char *buf, int count); }
+	SYS_EXECVE	= 59;	// { int execve(char *fname, char **argp, char **envp); }
+	SYS_UMASK	= 60;	// { int umask(int newmask); }
+	SYS_CHROOT	= 61;	// { int chroot(user_addr_t path); }
 	// SYS_NOSYS = 62;  // { int nosys(void); }   { old fstat }
 	// SYS_NOSYS = 63;  // { int nosys(void); }   { used internally, reserved }
 	// SYS_NOSYS = 64;  // { int nosys(void); }   { old getpagesize }
-	SYS_MSYNC = 65;  // { int msync(caddr_t addr, size_t len, int flags); }
-	SYS_VFORK = 66;  // { int vfork(void); }
+	SYS_MSYNC	= 65;	// { int msync(caddr_t addr, size_t len, int flags); }
+	SYS_VFORK	= 66;	// { int vfork(void); }
 	// SYS_NOSYS = 67;  // { int nosys(void); }   { old vread }
 	// SYS_NOSYS = 68;  // { int nosys(void); }   { old vwrite }
-	SYS_SBRK = 69;  // { int sbrk(int incr) NO_SYSCALL_STUB; }
-	SYS_SSTK = 70;  // { int sstk(int incr) NO_SYSCALL_STUB; }
+	SYS_SBRK	= 69;	// { int sbrk(int incr) NO_SYSCALL_STUB; }
+	SYS_SSTK	= 70;	// { int sstk(int incr) NO_SYSCALL_STUB; }
 	// SYS_NOSYS = 71;  // { int nosys(void); }   { old mmap }
-	SYS_OVADVISE = 72;  // { int ovadvise(void) NO_SYSCALL_STUB; }   { old vadvise }
-	SYS_MUNMAP = 73;  // { int munmap(caddr_t addr, size_t len); }
-	SYS_MPROTECT = 74;  // { int mprotect(caddr_t addr, size_t len, int prot); }
-	SYS_MADVISE = 75;  // { int madvise(caddr_t addr, size_t len, int behav); }
+	SYS_OVADVISE	= 72;	// { int ovadvise(void) NO_SYSCALL_STUB; }   { old vadvise }
+	SYS_MUNMAP	= 73;	// { int munmap(caddr_t addr, size_t len); }
+	SYS_MPROTECT	= 74;	// { int mprotect(caddr_t addr, size_t len, int prot); }
+	SYS_MADVISE	= 75;	// { int madvise(caddr_t addr, size_t len, int behav); }
 	// SYS_NOSYS = 76;  // { int nosys(void); }   { old vhangup }
 	// SYS_NOSYS = 77;  // { int nosys(void); }   { old vlimit }
-	SYS_MINCORE = 78;  // { int mincore(user_addr_t addr, user_size_t len, user_addr_t vec); }
-	SYS_GETGROUPS = 79;  // { int getgroups(u_int gidsetsize, gid_t *gidset); }
-	SYS_SETGROUPS = 80;  // { int setgroups(u_int gidsetsize, gid_t *gidset); }
-	SYS_GETPGRP = 81;  // { int getpgrp(void); }
-	SYS_SETPGID = 82;  // { int setpgid(int pid, int pgid); }
-	SYS_SETITIMER = 83;  // { int setitimer(u_int which, struct itimerval *itv, struct itimerval *oitv); }
+	SYS_MINCORE	= 78;	// { int mincore(user_addr_t addr, user_size_t len, user_addr_t vec); }
+	SYS_GETGROUPS	= 79;	// { int getgroups(u_int gidsetsize, gid_t *gidset); }
+	SYS_SETGROUPS	= 80;	// { int setgroups(u_int gidsetsize, gid_t *gidset); }
+	SYS_GETPGRP	= 81;	// { int getpgrp(void); }
+	SYS_SETPGID	= 82;	// { int setpgid(int pid, int pgid); }
+	SYS_SETITIMER	= 83;	// { int setitimer(u_int which, struct itimerval *itv, struct itimerval *oitv); }
 	// SYS_NOSYS = 84;  // { int nosys(void); }   { old wait }
-	SYS_SWAPON = 85;  // { int swapon(void); }
-	SYS_GETITIMER = 86;  // { int getitimer(u_int which, struct itimerval *itv); }
+	SYS_SWAPON	= 85;	// { int swapon(void); }
+	SYS_GETITIMER	= 86;	// { int getitimer(u_int which, struct itimerval *itv); }
 	// SYS_NOSYS = 87;  // { int nosys(void); }   { old gethostname }
 	// SYS_NOSYS = 88;  // { int nosys(void); }   { old sethostname }
-	SYS_GETDTABLESIZE = 89;  // { int getdtablesize(void); }
-	SYS_DUP2 = 90;  // { int dup2(u_int from, u_int to); }
+	SYS_GETDTABLESIZE	= 89;	// { int getdtablesize(void); }
+	SYS_DUP2		= 90;	// { int dup2(u_int from, u_int to); }
 	// SYS_NOSYS = 91;  // { int nosys(void); }   { old getdopt }
-	SYS_FCNTL = 92;  // { int fcntl(int fd, int cmd, long arg); }
-	SYS_SELECT = 93;  // { int select(int nd, u_int32_t *in, u_int32_t *ou, u_int32_t *ex, struct timeval *tv); }
+	SYS_FCNTL	= 92;	// { int fcntl(int fd, int cmd, long arg); }
+	SYS_SELECT	= 93;	// { int select(int nd, u_int32_t *in, u_int32_t *ou, u_int32_t *ex, struct timeval *tv); }
 	// SYS_NOSYS = 94;  // { int nosys(void); }   { old setdopt }
-	SYS_FSYNC = 95;  // { int fsync(int fd); }
-	SYS_SETPRIORITY = 96;  // { int setpriority(int which, id_t who, int prio); }
-	SYS_SOCKET = 97;  // { int socket(int domain, int type, int protocol); }
-	SYS_CONNECT = 98;  // { int connect(int s, caddr_t name, socklen_t namelen); }
+	SYS_FSYNC	= 95;	// { int fsync(int fd); }
+	SYS_SETPRIORITY	= 96;	// { int setpriority(int which, id_t who, int prio); }
+	SYS_SOCKET	= 97;	// { int socket(int domain, int type, int protocol); }
+	SYS_CONNECT	= 98;	// { int connect(int s, caddr_t name, socklen_t namelen); }
 	// SYS_NOSYS = 97;  // { int nosys(void); }
 	// SYS_NOSYS = 98;  // { int nosys(void); }
 	// SYS_NOSYS = 99;  // { int nosys(void); }   { old accept }
-	SYS_GETPRIORITY = 100;  // { int getpriority(int which, id_t who); }
+	SYS_GETPRIORITY	= 100;	// { int getpriority(int which, id_t who); }
 	// SYS_NOSYS = 101;  // { int nosys(void); }   { old send }
 	// SYS_NOSYS = 102;  // { int nosys(void); }   { old recv }
 	// SYS_NOSYS = 103;  // { int nosys(void); }   { old sigreturn }
-	SYS_BIND = 104;  // { int bind(int s, caddr_t name, socklen_t namelen); }
-	SYS_SETSOCKOPT = 105;  // { int setsockopt(int s, int level, int name, caddr_t val, socklen_t valsize); }
-	SYS_LISTEN = 106;  // { int listen(int s, int backlog); }
+	SYS_BIND	= 104;	// { int bind(int s, caddr_t name, socklen_t namelen); }
+	SYS_SETSOCKOPT	= 105;	// { int setsockopt(int s, int level, int name, caddr_t val, socklen_t valsize); }
+	SYS_LISTEN	= 106;	// { int listen(int s, int backlog); }
 	// SYS_NOSYS = 104;  // { int nosys(void); }
 	// SYS_NOSYS = 105;  // { int nosys(void); }
 	// SYS_NOSYS = 106;  // { int nosys(void); }
@@ -126,108 +126,108 @@ const (
 	// SYS_NOSYS = 108;  // { int nosys(void); }   { old sigvec }
 	// SYS_NOSYS = 109;  // { int nosys(void); }   { old sigblock }
 	// SYS_NOSYS = 110;  // { int nosys(void); }   { old sigsetmask }
-	SYS_SIGSUSPEND = 111;  // { int sigsuspend(sigset_t mask); }
+	SYS_SIGSUSPEND	= 111;	// { int sigsuspend(sigset_t mask); }
 	// SYS_NOSYS = 112;  // { int nosys(void); }   { old sigstack }
 	// SYS_NOSYS = 113;  // { int nosys(void); }   { old recvmsg }
 	// SYS_NOSYS = 114;  // { int nosys(void); }   { old sendmsg }
 	// SYS_NOSYS = 113;  // { int nosys(void); }
 	// SYS_NOSYS = 114;  // { int nosys(void); }
 	// SYS_NOSYS = 115;  // { int nosys(void); }   { old vtrace }
-	SYS_GETTIMEOFDAY = 116;  // { int gettimeofday(struct timeval *tp, struct timezone *tzp); }
-	SYS_GETRUSAGE = 117;  // { int getrusage(int who, struct rusage *rusage); }
-	SYS_GETSOCKOPT = 118;  // { int getsockopt(int s, int level, int name, caddr_t val, socklen_t *avalsize); }
+	SYS_GETTIMEOFDAY	= 116;	// { int gettimeofday(struct timeval *tp, struct timezone *tzp); }
+	SYS_GETRUSAGE		= 117;	// { int getrusage(int who, struct rusage *rusage); }
+	SYS_GETSOCKOPT		= 118;	// { int getsockopt(int s, int level, int name, caddr_t val, socklen_t *avalsize); }
 	// SYS_NOSYS = 118;  // { int nosys(void); }
 	// SYS_NOSYS = 119;  // { int nosys(void); }   { old resuba }
-	SYS_READV = 120;  // { user_ssize_t readv(int fd, struct iovec *iovp, u_int iovcnt); }
-	SYS_WRITEV = 121;  // { user_ssize_t writev(int fd, struct iovec *iovp, u_int iovcnt); }
-	SYS_SETTIMEOFDAY = 122;  // { int settimeofday(struct timeval *tv, struct timezone *tzp); }
-	SYS_FCHOWN = 123;  // { int fchown(int fd, int uid, int gid); }
-	SYS_FCHMOD = 124;  // { int fchmod(int fd, int mode); }
+	SYS_READV		= 120;	// { user_ssize_t readv(int fd, struct iovec *iovp, u_int iovcnt); }
+	SYS_WRITEV		= 121;	// { user_ssize_t writev(int fd, struct iovec *iovp, u_int iovcnt); }
+	SYS_SETTIMEOFDAY	= 122;	// { int settimeofday(struct timeval *tv, struct timezone *tzp); }
+	SYS_FCHOWN		= 123;	// { int fchown(int fd, int uid, int gid); }
+	SYS_FCHMOD		= 124;	// { int fchmod(int fd, int mode); }
 	// SYS_NOSYS = 125;  // { int nosys(void); }   { old recvfrom }
-	SYS_SETREUID = 126;  // { int setreuid(uid_t ruid, uid_t euid); }
-	SYS_SETREGID = 127;  // { int setregid(gid_t rgid, gid_t egid); }
-	SYS_RENAME = 128;  // { int rename(char *from, char *to); }
+	SYS_SETREUID	= 126;	// { int setreuid(uid_t ruid, uid_t euid); }
+	SYS_SETREGID	= 127;	// { int setregid(gid_t rgid, gid_t egid); }
+	SYS_RENAME	= 128;	// { int rename(char *from, char *to); }
 	// SYS_NOSYS = 129;  // { int nosys(void); }   { old truncate }
 	// SYS_NOSYS = 130;  // { int nosys(void); }   { old ftruncate }
-	SYS_FLOCK = 131;  // { int flock(int fd, int how); }
-	SYS_MKFIFO = 132;  // { int mkfifo(user_addr_t path, int mode); }
-	SYS_SENDTO = 133;  // { int sendto(int s, caddr_t buf, size_t len, int flags, caddr_t to, socklen_t tolen); }
-	SYS_SHUTDOWN = 134;  // { int shutdown(int s, int how); }
-	SYS_SOCKETPAIR = 135;  // { int socketpair(int domain, int type, int protocol, int *rsv); }
+	SYS_FLOCK	= 131;	// { int flock(int fd, int how); }
+	SYS_MKFIFO	= 132;	// { int mkfifo(user_addr_t path, int mode); }
+	SYS_SENDTO	= 133;	// { int sendto(int s, caddr_t buf, size_t len, int flags, caddr_t to, socklen_t tolen); }
+	SYS_SHUTDOWN	= 134;	// { int shutdown(int s, int how); }
+	SYS_SOCKETPAIR	= 135;	// { int socketpair(int domain, int type, int protocol, int *rsv); }
 	// SYS_NOSYS = 133;  // { int nosys(void); }
 	// SYS_NOSYS = 134;  // { int nosys(void); }
 	// SYS_NOSYS = 135;  // { int nosys(void); }
-	SYS_MKDIR = 136;  // { int mkdir(user_addr_t path, int mode); }
-	SYS_RMDIR = 137;  // { int rmdir(char *path); }
-	SYS_UTIMES = 138;  // { int utimes(char *path, struct timeval *tptr); }
-	SYS_FUTIMES = 139;  // { int futimes(int fd, struct timeval *tptr); }
-	SYS_ADJTIME = 140;  // { int adjtime(struct timeval *delta, struct timeval *olddelta); }
+	SYS_MKDIR	= 136;	// { int mkdir(user_addr_t path, int mode); }
+	SYS_RMDIR	= 137;	// { int rmdir(char *path); }
+	SYS_UTIMES	= 138;	// { int utimes(char *path, struct timeval *tptr); }
+	SYS_FUTIMES	= 139;	// { int futimes(int fd, struct timeval *tptr); }
+	SYS_ADJTIME	= 140;	// { int adjtime(struct timeval *delta, struct timeval *olddelta); }
 	// SYS_NOSYS = 141;  // { int nosys(void); }   { old getpeername }
-	SYS_GETHOSTUUID = 142;  // { int gethostuuid(unsigned char *uuid_buf, const struct timespec *timeoutp); }
+	SYS_GETHOSTUUID							= 142;	// { int gethostuuid(unsigned char *uuid_buf, const struct timespec *timeoutp); }
 	// SYS_NOSYS = 143;  // { int nosys(void); }   { old sethostid 	}
 	// SYS_NOSYS = 144;  // { int nosys(void); }   { old getrlimit }
 	// SYS_NOSYS = 145;  // { int nosys(void); }   { old setrlimit }
 	// SYS_NOSYS = 146;  // { int nosys(void); }   { old killpg }
-	SYS_SETSID = 147;  // { int setsid(void); }
+	SYS_SETSID	= 147;	// { int setsid(void); }
 	// SYS_NOSYS = 148;  // { int nosys(void); }   { old setquota }
 	// SYS_NOSYS = 149;  // { int nosys(void); }   { old qquota }
 	// SYS_NOSYS = 150;  // { int nosys(void); }   { old getsockname }
-	SYS_GETPGID = 151;  // { int getpgid(pid_t pid); }
-	SYS_SETPRIVEXEC = 152;  // { int setprivexec(int flag); }
-	SYS_PREAD = 153;  // { user_ssize_t pread(int fd, user_addr_t buf, user_size_t nbyte, off_t offset); }
-	SYS_PWRITE = 154;  // { user_ssize_t pwrite(int fd, user_addr_t buf, user_size_t nbyte, off_t offset); }
-	SYS_NFSSVC = 155;  // { int nfssvc(int flag, caddr_t argp); }
+	SYS_GETPGID	= 151;	// { int getpgid(pid_t pid); }
+	SYS_SETPRIVEXEC	= 152;	// { int setprivexec(int flag); }
+	SYS_PREAD	= 153;	// { user_ssize_t pread(int fd, user_addr_t buf, user_size_t nbyte, off_t offset); }
+	SYS_PWRITE	= 154;	// { user_ssize_t pwrite(int fd, user_addr_t buf, user_size_t nbyte, off_t offset); }
+	SYS_NFSSVC	= 155;	// { int nfssvc(int flag, caddr_t argp); }
 	// SYS_NOSYS = 155;  // { int nosys(void); }
 	// SYS_NOSYS = 156;  // { int nosys(void); }   { old getdirentries }
-	SYS_STATFS = 157;  // { int statfs(char *path, struct statfs *buf); }
-	SYS_FSTATFS = 158;  // { int fstatfs(int fd, struct statfs *buf); }
-	SYS_UNMOUNT = 159;  // { int unmount(user_addr_t path, int flags); }
+	SYS_STATFS	= 157;	// { int statfs(char *path, struct statfs *buf); }
+	SYS_FSTATFS	= 158;	// { int fstatfs(int fd, struct statfs *buf); }
+	SYS_UNMOUNT	= 159;	// { int unmount(user_addr_t path, int flags); }
 	// SYS_NOSYS = 160;  // { int nosys(void); }   { old async_daemon }
-	SYS_GETFH = 161;  // { int getfh(char *fname, fhandle_t *fhp); }
+	SYS_GETFH	= 161;	// { int getfh(char *fname, fhandle_t *fhp); }
 	// SYS_NOSYS = 161;  // { int nosys(void); }
 	// SYS_NOSYS = 162;  // { int nosys(void); }   { old getdomainname }
 	// SYS_NOSYS = 163;  // { int nosys(void); }   { old setdomainname }
 	// SYS_NOSYS = 164;  // { int nosys(void); }
-	SYS_QUOTACTL = 165;  // { int quotactl(const char *path, int cmd, int uid, caddr_t arg); }
+	SYS_QUOTACTL	= 165;	// { int quotactl(const char *path, int cmd, int uid, caddr_t arg); }
 	// SYS_NOSYS = 166;  // { int nosys(void); }   { old exportfs }
-	SYS_MOUNT = 167;  // { int mount(char *type, char *path, int flags, caddr_t data); }
+	SYS_MOUNT	= 167;	// { int mount(char *type, char *path, int flags, caddr_t data); }
 	// SYS_NOSYS = 168;  // { int nosys(void); }   { old ustat }
-	SYS_CSOPS = 169;  // { int csops(pid_t pid, uint32_t ops, user_addr_t useraddr, user_size_t usersize); }
+	SYS_CSOPS	= 169;	// { int csops(pid_t pid, uint32_t ops, user_addr_t useraddr, user_size_t usersize); }
 	// SYS_NOSYS = 171;  // { int nosys(void); }   { old wait3 }
 	// SYS_NOSYS = 172;  // { int nosys(void); }   { old rpause	}
-	SYS_WAITID = 173;  // { int waitid(idtype_t idtype, id_t id, siginfo_t *infop, int options); }
+	SYS_WAITID	= 173;	// { int waitid(idtype_t idtype, id_t id, siginfo_t *infop, int options); }
 	// SYS_NOSYS = 174;  // { int nosys(void); }   { old getdents }
 	// SYS_NOSYS = 175;  // { int nosys(void); }   { old gc_control }
-	SYS_ADD_PROFIL = 176;  // { int add_profil(short *bufbase, size_t bufsize, u_long pcoffset, u_int pcscale); }
+	SYS_ADD_PROFIL	= 176;	// { int add_profil(short *bufbase, size_t bufsize, u_long pcoffset, u_int pcscale); }
 	// SYS_NOSYS = 177;  // { int nosys(void); }
 	// SYS_NOSYS = 178;  // { int nosys(void); }
 	// SYS_NOSYS = 179;  // { int nosys(void); }
-	SYS_KDEBUG_TRACE = 180;  // { int kdebug_trace(int code, int arg1, int arg2, int arg3, int arg4, int arg5) NO_SYSCALL_STUB; }
-	SYS_SETGID = 181;  // { int setgid(gid_t gid); }
-	SYS_SETEGID = 182;  // { int setegid(gid_t egid); }
-	SYS_SETEUID = 183;  // { int seteuid(uid_t euid); }
-	SYS_SIGRETURN = 184;  // { int sigreturn(struct ucontext *uctx, int infostyle); }
+	SYS_KDEBUG_TRACE	= 180;	// { int kdebug_trace(int code, int arg1, int arg2, int arg3, int arg4, int arg5) NO_SYSCALL_STUB; }
+	SYS_SETGID		= 181;	// { int setgid(gid_t gid); }
+	SYS_SETEGID		= 182;	// { int setegid(gid_t egid); }
+	SYS_SETEUID		= 183;	// { int seteuid(uid_t euid); }
+	SYS_SIGRETURN		= 184;	// { int sigreturn(struct ucontext *uctx, int infostyle); }
 	// SYS_NOSYS = 186;  // { int nosys(void); }
 	// SYS_NOSYS = 187;  // { int nosys(void); }
-	SYS_STAT = 188;  // { int stat(user_addr_t path, user_addr_t ub); }
-	SYS_FSTAT = 189;  // { int fstat(int fd, user_addr_t ub); }
-	SYS_LSTAT = 190;  // { int lstat(user_addr_t path, user_addr_t ub); }
-	SYS_PATHCONF = 191;  // { int pathconf(char *path, int name); }
-	SYS_FPATHCONF = 192;  // { int fpathconf(int fd, int name); }
+	SYS_STAT	= 188;	// { int stat(user_addr_t path, user_addr_t ub); }
+	SYS_FSTAT	= 189;	// { int fstat(int fd, user_addr_t ub); }
+	SYS_LSTAT	= 190;	// { int lstat(user_addr_t path, user_addr_t ub); }
+	SYS_PATHCONF	= 191;	// { int pathconf(char *path, int name); }
+	SYS_FPATHCONF	= 192;	// { int fpathconf(int fd, int name); }
 	// SYS_NOSYS = 193;  // { int nosys(void); }
-	SYS_GETRLIMIT = 194;  // { int getrlimit(u_int which, struct rlimit *rlp); }
-	SYS_SETRLIMIT = 195;  // { int setrlimit(u_int which, struct rlimit *rlp); }
-	SYS_GETDIRENTRIES = 196;  // { int getdirentries(int fd, char *buf, u_int count, long *basep); }
-	SYS_MMAP = 197;  // { user_addr_t mmap(caddr_t addr, size_t len, int prot, int flags, int fd, off_t pos); }
+	SYS_GETRLIMIT					= 194;	// { int getrlimit(u_int which, struct rlimit *rlp); }
+	SYS_SETRLIMIT					= 195;	// { int setrlimit(u_int which, struct rlimit *rlp); }
+	SYS_GETDIRENTRIES				= 196;	// { int getdirentries(int fd, char *buf, u_int count, long *basep); }
+	SYS_MMAP					= 197;	// { user_addr_t mmap(caddr_t addr, size_t len, int prot, int flags, int fd, off_t pos); }
 	// SYS_NOSYS = 198;  // { int nosys(void); } 	{ __syscall }
-	SYS_LSEEK = 199;  // { off_t lseek(int fd, off_t offset, int whence); }
-	SYS_TRUNCATE = 200;  // { int truncate(char *path, off_t length); }
-	SYS_FTRUNCATE = 201;  // { int ftruncate(int fd, off_t length); }
-	SYS___SYSCTL = 202;  // { int __sysctl(int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen); }
-	SYS_MLOCK = 203;  // { int mlock(caddr_t addr, size_t len); }
-	SYS_MUNLOCK = 204;  // { int munlock(caddr_t addr, size_t len); }
-	SYS_UNDELETE = 205;  // { int undelete(user_addr_t path); }
-	SYS_ATSOCKET = 206;  // { int ATsocket(int proto); }
+	SYS_LSEEK					= 199;	// { off_t lseek(int fd, off_t offset, int whence); }
+	SYS_TRUNCATE					= 200;	// { int truncate(char *path, off_t length); }
+	SYS_FTRUNCATE					= 201;	// { int ftruncate(int fd, off_t length); }
+	SYS___SYSCTL					= 202;	// { int __sysctl(int *name, u_int namelen, void *old, size_t *oldlenp, void *new, size_t newlen); }
+	SYS_MLOCK					= 203;	// { int mlock(caddr_t addr, size_t len); }
+	SYS_MUNLOCK					= 204;	// { int munlock(caddr_t addr, size_t len); }
+	SYS_UNDELETE					= 205;	// { int undelete(user_addr_t path); }
+	SYS_ATSOCKET					= 206;	// { int ATsocket(int proto); }
 	// SYS_NOSYS = 213;  // { int nosys(void); } 	{ Reserved for AppleTalk }
 	// SYS_NOSYS = 206;  // { int nosys(void); }
 	// SYS_NOSYS = 207;  // { int nosys(void); }
@@ -237,166 +237,166 @@ const (
 	// SYS_NOSYS = 211;  // { int nosys(void); }
 	// SYS_NOSYS = 212;  // { int nosys(void); }
 	// SYS_NOSYS = 213;  // { int nosys(void); } 	{ Reserved for AppleTalk }
-	SYS_KQUEUE_FROM_PORTSET_NP = 214;  // { int kqueue_from_portset_np(int portset); }
-	SYS_KQUEUE_PORTSET_NP = 215;  // { int kqueue_portset_np(int fd); }
-	SYS_GETATTRLIST = 220;  // { int getattrlist(const char *path, struct attrlist *alist, void *attributeBuffer, size_t bufferSize, u_long options); }
-	SYS_SETATTRLIST = 221;  // { int setattrlist(const char *path, struct attrlist *alist, void *attributeBuffer, size_t bufferSize, u_long options); }
-	SYS_GETDIRENTRIESATTR = 222;  // { int getdirentriesattr(int fd, struct attrlist *alist, void *buffer, size_t buffersize, u_long *count, u_long *basep, u_long *newstate, u_long options); }
-	SYS_EXCHANGEDATA = 223;  // { int exchangedata(const char *path1, const char *path2, u_long options); }
+	SYS_KQUEUE_FROM_PORTSET_NP	= 214;	// { int kqueue_from_portset_np(int portset); }
+	SYS_KQUEUE_PORTSET_NP		= 215;	// { int kqueue_portset_np(int fd); }
+	SYS_GETATTRLIST			= 220;	// { int getattrlist(const char *path, struct attrlist *alist, void *attributeBuffer, size_t bufferSize, u_long options); }
+	SYS_SETATTRLIST			= 221;	// { int setattrlist(const char *path, struct attrlist *alist, void *attributeBuffer, size_t bufferSize, u_long options); }
+	SYS_GETDIRENTRIESATTR		= 222;	// { int getdirentriesattr(int fd, struct attrlist *alist, void *buffer, size_t buffersize, u_long *count, u_long *basep, u_long *newstate, u_long options); }
+	SYS_EXCHANGEDATA		= 223;	// { int exchangedata(const char *path1, const char *path2, u_long options); }
 	// SYS_NOSYS = 224;  // { int nosys(void); } { was checkuseraccess }
-	SYS_SEARCHFS = 225;  // { int searchfs(const char *path, struct fssearchblock *searchblock, u_long *nummatches, u_long scriptcode, u_long options, struct searchstate *state); }
-	SYS_DELETE = 226;  // { int delete(user_addr_t path) NO_SYSCALL_STUB; }       { private delete (Carbon semantics) }
-	SYS_COPYFILE = 227;  // { int copyfile(char *from, char *to, int mode, int flags) NO_SYSCALL_STUB; }
+	SYS_SEARCHFS	= 225;	// { int searchfs(const char *path, struct fssearchblock *searchblock, u_long *nummatches, u_long scriptcode, u_long options, struct searchstate *state); }
+	SYS_DELETE	= 226;	// { int delete(user_addr_t path) NO_SYSCALL_STUB; }       { private delete (Carbon semantics) }
+	SYS_COPYFILE	= 227;	// { int copyfile(char *from, char *to, int mode, int flags) NO_SYSCALL_STUB; }
 	// SYS_NOSYS = 228;  // { int nosys(void); }
 	// SYS_NOSYS = 229;  // { int nosys(void); }
-	SYS_POLL = 230;  // { int poll(struct pollfd *fds, u_int nfds, int timeout); }
-	SYS_WATCHEVENT = 231;  // { int watchevent(struct eventreq *u_req, int u_eventmask); }
-	SYS_WAITEVENT = 232;  // { int waitevent(struct eventreq *u_req, struct timeval *tv); }
-	SYS_MODWATCH = 233;  // { int modwatch(struct eventreq *u_req, int u_eventmask); }
-	SYS_GETXATTR = 234;  // { user_ssize_t getxattr(user_addr_t path, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }
-	SYS_FGETXATTR = 235;  // { user_ssize_t fgetxattr(int fd, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }
-	SYS_SETXATTR = 236;  // { int setxattr(user_addr_t path, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }
-	SYS_FSETXATTR = 237;  // { int fsetxattr(int fd, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }
-	SYS_REMOVEXATTR = 238;  // { int removexattr(user_addr_t path, user_addr_t attrname, int options); }
-	SYS_FREMOVEXATTR = 239;  // { int fremovexattr(int fd, user_addr_t attrname, int options); }
-	SYS_LISTXATTR = 240;  // { user_ssize_t listxattr(user_addr_t path, user_addr_t namebuf, size_t bufsize, int options); }
-	SYS_FLISTXATTR = 241;  // { user_ssize_t flistxattr(int fd, user_addr_t namebuf, size_t bufsize, int options); }
-	SYS_FSCTL = 242;  // { int fsctl(const char *path, u_long cmd, caddr_t data, u_long options); }
-	SYS_INITGROUPS = 243;  // { int initgroups(u_int gidsetsize, gid_t *gidset, int gmuid); }
-	SYS_POSIX_SPAWN = 244;  // { int posix_spawn(pid_t *pid, const char *path, const struct _posix_spawn_args_desc *adesc, char **argv, char **envp); }
+	SYS_POLL		= 230;	// { int poll(struct pollfd *fds, u_int nfds, int timeout); }
+	SYS_WATCHEVENT		= 231;	// { int watchevent(struct eventreq *u_req, int u_eventmask); }
+	SYS_WAITEVENT		= 232;	// { int waitevent(struct eventreq *u_req, struct timeval *tv); }
+	SYS_MODWATCH		= 233;	// { int modwatch(struct eventreq *u_req, int u_eventmask); }
+	SYS_GETXATTR		= 234;	// { user_ssize_t getxattr(user_addr_t path, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }
+	SYS_FGETXATTR		= 235;	// { user_ssize_t fgetxattr(int fd, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }
+	SYS_SETXATTR		= 236;	// { int setxattr(user_addr_t path, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }
+	SYS_FSETXATTR		= 237;	// { int fsetxattr(int fd, user_addr_t attrname, user_addr_t value, size_t size, uint32_t position, int options); }
+	SYS_REMOVEXATTR		= 238;	// { int removexattr(user_addr_t path, user_addr_t attrname, int options); }
+	SYS_FREMOVEXATTR	= 239;	// { int fremovexattr(int fd, user_addr_t attrname, int options); }
+	SYS_LISTXATTR		= 240;	// { user_ssize_t listxattr(user_addr_t path, user_addr_t namebuf, size_t bufsize, int options); }
+	SYS_FLISTXATTR		= 241;	// { user_ssize_t flistxattr(int fd, user_addr_t namebuf, size_t bufsize, int options); }
+	SYS_FSCTL		= 242;	// { int fsctl(const char *path, u_long cmd, caddr_t data, u_long options); }
+	SYS_INITGROUPS		= 243;	// { int initgroups(u_int gidsetsize, gid_t *gidset, int gmuid); }
+	SYS_POSIX_SPAWN		= 244;	// { int posix_spawn(pid_t *pid, const char *path, const struct _posix_spawn_args_desc *adesc, char **argv, char **envp); }
 	// SYS_NOSYS = 245;  // { int nosys(void); }
 	// SYS_NOSYS = 246;  // { int nosys(void); }
-	SYS_NFSCLNT = 247;  // { int nfsclnt(int flag, caddr_t argp); }
+	SYS_NFSCLNT	= 247;	// { int nfsclnt(int flag, caddr_t argp); }
 	// SYS_NOSYS = 247;  // { int nosys(void); }
-	SYS_FHOPEN = 248;  // { int fhopen(const struct fhandle *u_fhp, int flags); }
+	SYS_FHOPEN	= 248;	// { int fhopen(const struct fhandle *u_fhp, int flags); }
 	// SYS_NOSYS = 248;  // { int nosys(void); }
 	// SYS_NOSYS = 249;  // { int nosys(void); }
-	SYS_MINHERIT = 250;  // { int minherit(void *addr, size_t len, int inherit); }
-	SYS_SEMSYS = 251;  // { int semsys(u_int which, int a2, int a3, int a4, int a5); }
+	SYS_MINHERIT	= 250;	// { int minherit(void *addr, size_t len, int inherit); }
+	SYS_SEMSYS	= 251;	// { int semsys(u_int which, int a2, int a3, int a4, int a5); }
 	// SYS_NOSYS = 251;  // { int nosys(void); }
-	SYS_MSGSYS = 252;  // { int msgsys(u_int which, int a2, int a3, int a4, int a5); }
+	SYS_MSGSYS	= 252;	// { int msgsys(u_int which, int a2, int a3, int a4, int a5); }
 	// SYS_NOSYS = 252;  // { int nosys(void); }
-	SYS_SHMSYS = 253;  // { int shmsys(u_int which, int a2, int a3, int a4); }
+	SYS_SHMSYS	= 253;	// { int shmsys(u_int which, int a2, int a3, int a4); }
 	// SYS_NOSYS = 253;  // { int nosys(void); }
-	SYS_SEMCTL = 254;  // { int semctl(int semid, int semnum, int cmd, semun_t arg); }
-	SYS_SEMGET = 255;  // { int semget(key_t key, int	nsems, int semflg); }
-	SYS_SEMOP = 256;  // { int semop(int semid, struct sembuf *sops, int nsops); }
+	SYS_SEMCTL	= 254;	// { int semctl(int semid, int semnum, int cmd, semun_t arg); }
+	SYS_SEMGET	= 255;	// { int semget(key_t key, int	nsems, int semflg); }
+	SYS_SEMOP	= 256;	// { int semop(int semid, struct sembuf *sops, int nsops); }
 	// SYS_NOSYS = 257;  // { int nosys(void); }
 	// SYS_NOSYS = 254;  // { int nosys(void); }
 	// SYS_NOSYS = 255;  // { int nosys(void); }
 	// SYS_NOSYS = 256;  // { int nosys(void); }
 	// SYS_NOSYS = 257;  // { int nosys(void); }
-	SYS_MSGCTL = 258;  // { int msgctl(int msqid, int cmd, struct	msqid_ds *buf); }
-	SYS_MSGGET = 259;  // { int msgget(key_t key, int msgflg); }
-	SYS_MSGSND = 260;  // { int msgsnd(int msqid, void *msgp, size_t msgsz, int msgflg); }
-	SYS_MSGRCV = 261;  // { user_ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg); }
+	SYS_MSGCTL	= 258;	// { int msgctl(int msqid, int cmd, struct	msqid_ds *buf); }
+	SYS_MSGGET	= 259;	// { int msgget(key_t key, int msgflg); }
+	SYS_MSGSND	= 260;	// { int msgsnd(int msqid, void *msgp, size_t msgsz, int msgflg); }
+	SYS_MSGRCV	= 261;	// { user_ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg); }
 	// SYS_NOSYS = 258;  // { int nosys(void); }
 	// SYS_NOSYS = 259;  // { int nosys(void); }
 	// SYS_NOSYS = 260;  // { int nosys(void); }
 	// SYS_NOSYS = 261;  // { int nosys(void); }
-	SYS_SHMAT = 262;  // { user_addr_t shmat(int shmid, void *shmaddr, int shmflg); }
-	SYS_SHMCTL = 263;  // { int shmctl(int shmid, int cmd, struct shmid_ds *buf); }
-	SYS_SHMDT = 264;  // { int shmdt(void *shmaddr); }
-	SYS_SHMGET = 265;  // { int shmget(key_t key, size_t size, int shmflg); }
+	SYS_SHMAT	= 262;	// { user_addr_t shmat(int shmid, void *shmaddr, int shmflg); }
+	SYS_SHMCTL	= 263;	// { int shmctl(int shmid, int cmd, struct shmid_ds *buf); }
+	SYS_SHMDT	= 264;	// { int shmdt(void *shmaddr); }
+	SYS_SHMGET	= 265;	// { int shmget(key_t key, size_t size, int shmflg); }
 	// SYS_NOSYS = 262;  // { int nosys(void); }
 	// SYS_NOSYS = 263;  // { int nosys(void); }
 	// SYS_NOSYS = 264;  // { int nosys(void); }
 	// SYS_NOSYS = 265;  // { int nosys(void); }
-	SYS_SHM_OPEN = 266;  // { int shm_open(const char *name, int oflag, int mode); }
-	SYS_SHM_UNLINK = 267;  // { int shm_unlink(const char *name); }
-	SYS_SEM_OPEN = 268;  // { user_addr_t sem_open(const char *name, int oflag, int mode, int value); }
-	SYS_SEM_CLOSE = 269;  // { int sem_close(sem_t *sem); }
-	SYS_SEM_UNLINK = 270;  // { int sem_unlink(const char *name); }
-	SYS_SEM_WAIT = 271;  // { int sem_wait(sem_t *sem); }
-	SYS_SEM_TRYWAIT = 272;  // { int sem_trywait(sem_t *sem); }
-	SYS_SEM_POST = 273;  // { int sem_post(sem_t *sem); }
-	SYS_SEM_GETVALUE = 274;  // { int sem_getvalue(sem_t *sem, int *sval); }
-	SYS_SEM_INIT = 275;  // { int sem_init(sem_t *sem, int phsared, u_int value); }
-	SYS_SEM_DESTROY = 276;  // { int sem_destroy(sem_t *sem); }
-	SYS_OPEN_EXTENDED = 277;  // { int open_extended(user_addr_t path, int flags, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
-	SYS_UMASK_EXTENDED = 278;  // { int umask_extended(int newmask, user_addr_t xsecurity) NO_SYSCALL_STUB; }
-	SYS_STAT_EXTENDED = 279;  // { int stat_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
-	SYS_LSTAT_EXTENDED = 280;  // { int lstat_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
-	SYS_FSTAT_EXTENDED = 281;  // { int fstat_extended(int fd, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
-	SYS_CHMOD_EXTENDED = 282;  // { int chmod_extended(user_addr_t path, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
-	SYS_FCHMOD_EXTENDED = 283;  // { int fchmod_extended(int fd, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
-	SYS_ACCESS_EXTENDED = 284;  // { int access_extended(user_addr_t entries, size_t size, user_addr_t results, uid_t uid) NO_SYSCALL_STUB; }
-	SYS_SETTID = 285;  // { int settid(uid_t uid, gid_t gid) NO_SYSCALL_STUB; }
-	SYS_GETTID = 286;  // { int gettid(uid_t *uidp, gid_t *gidp) NO_SYSCALL_STUB; }
-	SYS_SETSGROUPS = 287;  // { int setsgroups(int setlen, user_addr_t guidset) NO_SYSCALL_STUB; }
-	SYS_GETSGROUPS = 288;  // { int getsgroups(user_addr_t setlen, user_addr_t guidset) NO_SYSCALL_STUB; }
-	SYS_SETWGROUPS = 289;  // { int setwgroups(int setlen, user_addr_t guidset) NO_SYSCALL_STUB; }
-	SYS_GETWGROUPS = 290;  // { int getwgroups(user_addr_t setlen, user_addr_t guidset) NO_SYSCALL_STUB; }
-	SYS_MKFIFO_EXTENDED = 291;  // { int mkfifo_extended(user_addr_t path, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
-	SYS_MKDIR_EXTENDED = 292;  // { int mkdir_extended(user_addr_t path, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
-	SYS_IDENTITYSVC = 293;  // { int identitysvc(int opcode, user_addr_t message) NO_SYSCALL_STUB; }
-	SYS_SHARED_REGION_CHECK_NP = 294;  // { int shared_region_check_np(uint64_t *start_address) NO_SYSCALL_STUB; }
-	SYS_SHARED_REGION_MAP_NP = 295;  // { int shared_region_map_np(int fd, uint32_t count, const struct shared_file_mapping_np *mappings) NO_SYSCALL_STUB; }
+	SYS_SHM_OPEN			= 266;	// { int shm_open(const char *name, int oflag, int mode); }
+	SYS_SHM_UNLINK			= 267;	// { int shm_unlink(const char *name); }
+	SYS_SEM_OPEN			= 268;	// { user_addr_t sem_open(const char *name, int oflag, int mode, int value); }
+	SYS_SEM_CLOSE			= 269;	// { int sem_close(sem_t *sem); }
+	SYS_SEM_UNLINK			= 270;	// { int sem_unlink(const char *name); }
+	SYS_SEM_WAIT			= 271;	// { int sem_wait(sem_t *sem); }
+	SYS_SEM_TRYWAIT			= 272;	// { int sem_trywait(sem_t *sem); }
+	SYS_SEM_POST			= 273;	// { int sem_post(sem_t *sem); }
+	SYS_SEM_GETVALUE		= 274;	// { int sem_getvalue(sem_t *sem, int *sval); }
+	SYS_SEM_INIT			= 275;	// { int sem_init(sem_t *sem, int phsared, u_int value); }
+	SYS_SEM_DESTROY			= 276;	// { int sem_destroy(sem_t *sem); }
+	SYS_OPEN_EXTENDED		= 277;	// { int open_extended(user_addr_t path, int flags, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
+	SYS_UMASK_EXTENDED		= 278;	// { int umask_extended(int newmask, user_addr_t xsecurity) NO_SYSCALL_STUB; }
+	SYS_STAT_EXTENDED		= 279;	// { int stat_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
+	SYS_LSTAT_EXTENDED		= 280;	// { int lstat_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
+	SYS_FSTAT_EXTENDED		= 281;	// { int fstat_extended(int fd, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
+	SYS_CHMOD_EXTENDED		= 282;	// { int chmod_extended(user_addr_t path, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
+	SYS_FCHMOD_EXTENDED		= 283;	// { int fchmod_extended(int fd, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
+	SYS_ACCESS_EXTENDED		= 284;	// { int access_extended(user_addr_t entries, size_t size, user_addr_t results, uid_t uid) NO_SYSCALL_STUB; }
+	SYS_SETTID			= 285;	// { int settid(uid_t uid, gid_t gid) NO_SYSCALL_STUB; }
+	SYS_GETTID			= 286;	// { int gettid(uid_t *uidp, gid_t *gidp) NO_SYSCALL_STUB; }
+	SYS_SETSGROUPS			= 287;	// { int setsgroups(int setlen, user_addr_t guidset) NO_SYSCALL_STUB; }
+	SYS_GETSGROUPS			= 288;	// { int getsgroups(user_addr_t setlen, user_addr_t guidset) NO_SYSCALL_STUB; }
+	SYS_SETWGROUPS			= 289;	// { int setwgroups(int setlen, user_addr_t guidset) NO_SYSCALL_STUB; }
+	SYS_GETWGROUPS			= 290;	// { int getwgroups(user_addr_t setlen, user_addr_t guidset) NO_SYSCALL_STUB; }
+	SYS_MKFIFO_EXTENDED		= 291;	// { int mkfifo_extended(user_addr_t path, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
+	SYS_MKDIR_EXTENDED		= 292;	// { int mkdir_extended(user_addr_t path, uid_t uid, gid_t gid, int mode, user_addr_t xsecurity) NO_SYSCALL_STUB; }
+	SYS_IDENTITYSVC			= 293;	// { int identitysvc(int opcode, user_addr_t message) NO_SYSCALL_STUB; }
+	SYS_SHARED_REGION_CHECK_NP	= 294;	// { int shared_region_check_np(uint64_t *start_address) NO_SYSCALL_STUB; }
+	SYS_SHARED_REGION_MAP_NP	= 295;	// { int shared_region_map_np(int fd, uint32_t count, const struct shared_file_mapping_np *mappings) NO_SYSCALL_STUB; }
 	// SYS_NOSYS = 296;  // { int nosys(void); } { old load_shared_file }
 	// SYS_NOSYS = 297;  // { int nosys(void); } { old reset_shared_file }
 	// SYS_NOSYS = 298;  // { int nosys(void); } { old new_system_shared_regions }
 	// SYS_ENOSYS = 299;  // { int enosys(void); } { old shared_region_map_file_np }
 	// SYS_ENOSYS = 300;  // { int enosys(void); } { old shared_region_make_private_np }
-	SYS___PTHREAD_MUTEX_DESTROY = 301;  // { int __pthread_mutex_destroy(int mutexid); }
-	SYS___PTHREAD_MUTEX_INIT = 302;  // { int __pthread_mutex_init(user_addr_t  mutex, user_addr_t attr); }
-	SYS___PTHREAD_MUTEX_LOCK = 303;  // { int __pthread_mutex_lock(int mutexid); }
-	SYS___PTHREAD_MUTEX_TRYLOCK = 304;  // { int __pthread_mutex_trylock(int mutexid); }
-	SYS___PTHREAD_MUTEX_UNLOCK = 305;  // { int __pthread_mutex_unlock(int mutexid); }
-	SYS___PTHREAD_COND_INIT = 306;  // { int __pthread_cond_init(user_addr_t cond, user_addr_t attr); }
-	SYS___PTHREAD_COND_DESTROY = 307;  // { int __pthread_cond_destroy(int condid); }
-	SYS___PTHREAD_COND_BROADCAST = 308;  // { int __pthread_cond_broadcast(int condid); }
-	SYS___PTHREAD_COND_SIGNAL = 309;  // { int __pthread_cond_signal(int condid); }
-	SYS_GETSID = 310;  // { int getsid(pid_t pid); }
-	SYS_SETTID_WITH_PID = 311;  // { int settid_with_pid(pid_t pid, int assume) NO_SYSCALL_STUB; }
-	SYS___PTHREAD_COND_TIMEDWAIT = 312;  // { int __pthread_cond_timedwait(int condid, int mutexid, user_addr_t abstime); }
-	SYS_AIO_FSYNC = 313;  // { int aio_fsync(int op, user_addr_t aiocbp); }
-	SYS_AIO_RETURN = 314;  // { user_ssize_t aio_return(user_addr_t aiocbp); }
-	SYS_AIO_SUSPEND = 315;  // { int aio_suspend(user_addr_t aiocblist, int nent, user_addr_t timeoutp); }
-	SYS_AIO_CANCEL = 316;  // { int aio_cancel(int fd, user_addr_t aiocbp); }
-	SYS_AIO_ERROR = 317;  // { int aio_error(user_addr_t aiocbp); }
-	SYS_AIO_READ = 318;  // { int aio_read(user_addr_t aiocbp); }
-	SYS_AIO_WRITE = 319;  // { int aio_write(user_addr_t aiocbp); }
-	SYS_LIO_LISTIO = 320;  // { int lio_listio(int mode, user_addr_t aiocblist, int nent, user_addr_t sigp); }
-	SYS___PTHREAD_COND_WAIT = 321;  // { int __pthread_cond_wait(int condid, int mutexid); }
-	SYS_IOPOLICYSYS = 322;  // { int iopolicysys(int cmd, void *arg) NO_SYSCALL_STUB; }
+	SYS___PTHREAD_MUTEX_DESTROY	= 301;	// { int __pthread_mutex_destroy(int mutexid); }
+	SYS___PTHREAD_MUTEX_INIT	= 302;	// { int __pthread_mutex_init(user_addr_t  mutex, user_addr_t attr); }
+	SYS___PTHREAD_MUTEX_LOCK	= 303;	// { int __pthread_mutex_lock(int mutexid); }
+	SYS___PTHREAD_MUTEX_TRYLOCK	= 304;	// { int __pthread_mutex_trylock(int mutexid); }
+	SYS___PTHREAD_MUTEX_UNLOCK	= 305;	// { int __pthread_mutex_unlock(int mutexid); }
+	SYS___PTHREAD_COND_INIT		= 306;	// { int __pthread_cond_init(user_addr_t cond, user_addr_t attr); }
+	SYS___PTHREAD_COND_DESTROY	= 307;	// { int __pthread_cond_destroy(int condid); }
+	SYS___PTHREAD_COND_BROADCAST	= 308;	// { int __pthread_cond_broadcast(int condid); }
+	SYS___PTHREAD_COND_SIGNAL	= 309;	// { int __pthread_cond_signal(int condid); }
+	SYS_GETSID			= 310;	// { int getsid(pid_t pid); }
+	SYS_SETTID_WITH_PID		= 311;	// { int settid_with_pid(pid_t pid, int assume) NO_SYSCALL_STUB; }
+	SYS___PTHREAD_COND_TIMEDWAIT	= 312;	// { int __pthread_cond_timedwait(int condid, int mutexid, user_addr_t abstime); }
+	SYS_AIO_FSYNC			= 313;	// { int aio_fsync(int op, user_addr_t aiocbp); }
+	SYS_AIO_RETURN			= 314;	// { user_ssize_t aio_return(user_addr_t aiocbp); }
+	SYS_AIO_SUSPEND			= 315;	// { int aio_suspend(user_addr_t aiocblist, int nent, user_addr_t timeoutp); }
+	SYS_AIO_CANCEL			= 316;	// { int aio_cancel(int fd, user_addr_t aiocbp); }
+	SYS_AIO_ERROR			= 317;	// { int aio_error(user_addr_t aiocbp); }
+	SYS_AIO_READ			= 318;	// { int aio_read(user_addr_t aiocbp); }
+	SYS_AIO_WRITE			= 319;	// { int aio_write(user_addr_t aiocbp); }
+	SYS_LIO_LISTIO			= 320;	// { int lio_listio(int mode, user_addr_t aiocblist, int nent, user_addr_t sigp); }
+	SYS___PTHREAD_COND_WAIT		= 321;	// { int __pthread_cond_wait(int condid, int mutexid); }
+	SYS_IOPOLICYSYS			= 322;	// { int iopolicysys(int cmd, void *arg) NO_SYSCALL_STUB; }
 	// SYS_NOSYS = 323;  // { int nosys(void); }
-	SYS_MLOCKALL = 324;  // { int mlockall(int how); }
-	SYS_MUNLOCKALL = 325;  // { int munlockall(int how); }
+	SYS_MLOCKALL	= 324;	// { int mlockall(int how); }
+	SYS_MUNLOCKALL	= 325;	// { int munlockall(int how); }
 	// SYS_NOSYS = 326;  // { int nosys(void); }
-	SYS_ISSETUGID = 327;  // { int issetugid(void); }
-	SYS___PTHREAD_KILL = 328;  // { int __pthread_kill(int thread_port, int sig); }
-	SYS___PTHREAD_SIGMASK = 329;  // { int __pthread_sigmask(int how, user_addr_t set, user_addr_t oset); }
-	SYS___SIGWAIT = 330;  // { int __sigwait(user_addr_t set, user_addr_t sig); }
-	SYS___DISABLE_THREADSIGNAL = 331;  // { int __disable_threadsignal(int value); }
-	SYS___PTHREAD_MARKCANCEL = 332;  // { int __pthread_markcancel(int thread_port); }
-	SYS___PTHREAD_CANCELED = 333;  // { int __pthread_canceled(int  action); }
-	SYS___SEMWAIT_SIGNAL = 334;  // { int __semwait_signal(int cond_sem, int mutex_sem, int timeout, int relative, time_t tv_sec, int32_t tv_nsec); }
+	SYS_ISSETUGID			= 327;	// { int issetugid(void); }
+	SYS___PTHREAD_KILL		= 328;	// { int __pthread_kill(int thread_port, int sig); }
+	SYS___PTHREAD_SIGMASK		= 329;	// { int __pthread_sigmask(int how, user_addr_t set, user_addr_t oset); }
+	SYS___SIGWAIT			= 330;	// { int __sigwait(user_addr_t set, user_addr_t sig); }
+	SYS___DISABLE_THREADSIGNAL	= 331;	// { int __disable_threadsignal(int value); }
+	SYS___PTHREAD_MARKCANCEL	= 332;	// { int __pthread_markcancel(int thread_port); }
+	SYS___PTHREAD_CANCELED		= 333;	// { int __pthread_canceled(int  action); }
+	SYS___SEMWAIT_SIGNAL		= 334;	// { int __semwait_signal(int cond_sem, int mutex_sem, int timeout, int relative, time_t tv_sec, int32_t tv_nsec); }
 	// SYS_NOSYS = 335;  // { int nosys(void); }   { old utrace }
-	SYS_PROC_INFO = 336;  // { int proc_info(int32_t callnum,int32_t pid,uint32_t flavor, uint64_t arg,user_addr_t buffer,int32_t buffersize) NO_SYSCALL_STUB; }
-	SYS_SENDFILE = 337;  // { int sendfile(int fd, int s, off_t offset, off_t *nbytes, struct sf_hdtr *hdtr, int flags); }
+	SYS_PROC_INFO	= 336;	// { int proc_info(int32_t callnum,int32_t pid,uint32_t flavor, uint64_t arg,user_addr_t buffer,int32_t buffersize) NO_SYSCALL_STUB; }
+	SYS_SENDFILE	= 337;	// { int sendfile(int fd, int s, off_t offset, off_t *nbytes, struct sf_hdtr *hdtr, int flags); }
 	// SYS_NOSYS = 337;  // { int nosys(void); }
-	SYS_STAT64 = 338;  // { int stat64(user_addr_t path, user_addr_t ub); }
-	SYS_FSTAT64 = 339;  // { int fstat64(int fd, user_addr_t ub); }
-	SYS_LSTAT64 = 340;  // { int lstat64(user_addr_t path, user_addr_t ub); }
-	SYS_STAT64_EXTENDED = 341;  // { int stat64_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
-	SYS_LSTAT64_EXTENDED = 342;  // { int lstat64_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
-	SYS_FSTAT64_EXTENDED = 343;  // { int fstat64_extended(int fd, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
-	SYS_GETDIRENTRIES64 = 344;  // { user_ssize_t getdirentries64(int fd, void *buf, user_size_t bufsize, off_t *position) NO_SYSCALL_STUB; }
-	SYS_STATFS64 = 345;  // { int statfs64(char *path, struct statfs64 *buf); }
-	SYS_FSTATFS64 = 346;  // { int fstatfs64(int fd, struct statfs64 *buf); }
-	SYS_GETFSSTAT64 = 347;  // { int getfsstat64(user_addr_t buf, int bufsize, int flags); }
-	SYS___PTHREAD_CHDIR = 348;  // { int __pthread_chdir(user_addr_t path); }
-	SYS___PTHREAD_FCHDIR = 349;  // { int __pthread_fchdir(int fd); }
-	SYS_AUDIT = 350;  // { int audit(void *record, int length); }
-	SYS_AUDITON = 351;  // { int auditon(int cmd, void *data, int length); }
+	SYS_STAT64		= 338;	// { int stat64(user_addr_t path, user_addr_t ub); }
+	SYS_FSTAT64		= 339;	// { int fstat64(int fd, user_addr_t ub); }
+	SYS_LSTAT64		= 340;	// { int lstat64(user_addr_t path, user_addr_t ub); }
+	SYS_STAT64_EXTENDED	= 341;	// { int stat64_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
+	SYS_LSTAT64_EXTENDED	= 342;	// { int lstat64_extended(user_addr_t path, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
+	SYS_FSTAT64_EXTENDED	= 343;	// { int fstat64_extended(int fd, user_addr_t ub, user_addr_t xsecurity, user_addr_t xsecurity_size) NO_SYSCALL_STUB; }
+	SYS_GETDIRENTRIES64	= 344;	// { user_ssize_t getdirentries64(int fd, void *buf, user_size_t bufsize, off_t *position) NO_SYSCALL_STUB; }
+	SYS_STATFS64		= 345;	// { int statfs64(char *path, struct statfs64 *buf); }
+	SYS_FSTATFS64		= 346;	// { int fstatfs64(int fd, struct statfs64 *buf); }
+	SYS_GETFSSTAT64		= 347;	// { int getfsstat64(user_addr_t buf, int bufsize, int flags); }
+	SYS___PTHREAD_CHDIR	= 348;	// { int __pthread_chdir(user_addr_t path); }
+	SYS___PTHREAD_FCHDIR	= 349;	// { int __pthread_fchdir(int fd); }
+	SYS_AUDIT		= 350;	// { int audit(void *record, int length); }
+	SYS_AUDITON		= 351;	// { int auditon(int cmd, void *data, int length); }
 	// SYS_NOSYS = 352;  // { int nosys(void); }
-	SYS_GETAUID = 353;  // { int getauid(au_id_t *auid); }
-	SYS_SETAUID = 354;  // { int setauid(au_id_t *auid); }
-	SYS_GETAUDIT = 355;  // { int getaudit(struct auditinfo *auditinfo); }
-	SYS_SETAUDIT = 356;  // { int setaudit(struct auditinfo *auditinfo); }
-	SYS_GETAUDIT_ADDR = 357;  // { int getaudit_addr(struct auditinfo_addr *auditinfo_addr, int length); }
-	SYS_SETAUDIT_ADDR = 358;  // { int setaudit_addr(struct auditinfo_addr *auditinfo_addr, int length); }
-	SYS_AUDITCTL = 359;  // { int auditctl(char *path); }
+	SYS_GETAUID		= 353;	// { int getauid(au_id_t *auid); }
+	SYS_SETAUID		= 354;	// { int setauid(au_id_t *auid); }
+	SYS_GETAUDIT		= 355;	// { int getaudit(struct auditinfo *auditinfo); }
+	SYS_SETAUDIT		= 356;	// { int setaudit(struct auditinfo *auditinfo); }
+	SYS_GETAUDIT_ADDR	= 357;	// { int getaudit_addr(struct auditinfo_addr *auditinfo_addr, int length); }
+	SYS_SETAUDIT_ADDR	= 358;	// { int setaudit_addr(struct auditinfo_addr *auditinfo_addr, int length); }
+	SYS_AUDITCTL		= 359;	// { int auditctl(char *path); }
 	// SYS_NOSYS = 350;  // { int nosys(void); }
 	// SYS_NOSYS = 351;  // { int nosys(void); }
 	// SYS_NOSYS = 352;  // { int nosys(void); }
@@ -407,15 +407,15 @@ const (
 	// SYS_NOSYS = 357;  // { int nosys(void); }
 	// SYS_NOSYS = 358;  // { int nosys(void); }
 	// SYS_NOSYS = 359;  // { int nosys(void); }
-	SYS_BSDTHREAD_CREATE = 360;  // { user_addr_t bsdthread_create(user_addr_t func, user_addr_t func_arg, user_addr_t stack, user_addr_t pthread, uint32_t flags) NO_SYSCALL_STUB; }
-	SYS_BSDTHREAD_TERMINATE = 361;  // { int bsdthread_terminate(user_addr_t stackaddr, size_t freesize, uint32_t port, uint32_t sem) NO_SYSCALL_STUB; }
-	SYS_KQUEUE = 362;  // { int kqueue(void); }
-	SYS_KEVENT = 363;  // { int kevent(int fd, const struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout); }
-	SYS_LCHOWN = 364;  // { int lchown(user_addr_t path, uid_t owner, gid_t group); }
-	SYS_STACK_SNAPSHOT = 365;  // { int stack_snapshot(pid_t pid, user_addr_t tracebuf, uint32_t tracebuf_size, uint32_t options) NO_SYSCALL_STUB; }
-	SYS_BSDTHREAD_REGISTER = 366;  // { int bsdthread_register(user_addr_t threadstart, user_addr_t wqthread, int pthsize) NO_SYSCALL_STUB; }
-	SYS_WORKQ_OPEN = 367;  // { int workq_open(void) NO_SYSCALL_STUB; }
-	SYS_WORKQ_OPS = 368;  // { int workq_ops(int options, user_addr_t item, int prio) NO_SYSCALL_STUB; }
+	SYS_BSDTHREAD_CREATE	= 360;	// { user_addr_t bsdthread_create(user_addr_t func, user_addr_t func_arg, user_addr_t stack, user_addr_t pthread, uint32_t flags) NO_SYSCALL_STUB; }
+	SYS_BSDTHREAD_TERMINATE	= 361;	// { int bsdthread_terminate(user_addr_t stackaddr, size_t freesize, uint32_t port, uint32_t sem) NO_SYSCALL_STUB; }
+	SYS_KQUEUE		= 362;	// { int kqueue(void); }
+	SYS_KEVENT		= 363;	// { int kevent(int fd, const struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout); }
+	SYS_LCHOWN		= 364;	// { int lchown(user_addr_t path, uid_t owner, gid_t group); }
+	SYS_STACK_SNAPSHOT	= 365;	// { int stack_snapshot(pid_t pid, user_addr_t tracebuf, uint32_t tracebuf_size, uint32_t options) NO_SYSCALL_STUB; }
+	SYS_BSDTHREAD_REGISTER	= 366;	// { int bsdthread_register(user_addr_t threadstart, user_addr_t wqthread, int pthsize) NO_SYSCALL_STUB; }
+	SYS_WORKQ_OPEN		= 367;	// { int workq_open(void) NO_SYSCALL_STUB; }
+	SYS_WORKQ_OPS		= 368;	// { int workq_ops(int options, user_addr_t item, int prio) NO_SYSCALL_STUB; }
 	// SYS_NOSYS = 369;  // { int nosys(void); }
 	// SYS_NOSYS = 370;  // { int nosys(void); }
 	// SYS_NOSYS = 371;  // { int nosys(void); }
@@ -427,59 +427,59 @@ const (
 	// SYS_NOSYS = 377;  // { int nosys(void); }
 	// SYS_NOSYS = 378;  // { int nosys(void); }
 	// SYS_NOSYS = 379;  // { int nosys(void); }
-	SYS___MAC_EXECVE = 380;  // { int __mac_execve(char *fname, char **argp, char **envp, struct mac *mac_p); }
-	SYS___MAC_SYSCALL = 381;  // { int __mac_syscall(char *policy, int call, user_addr_t arg); }
-	SYS___MAC_GET_FILE = 382;  // { int __mac_get_file(char *path_p, struct mac *mac_p); }
-	SYS___MAC_SET_FILE = 383;  // { int __mac_set_file(char *path_p, struct mac *mac_p); }
-	SYS___MAC_GET_LINK = 384;  // { int __mac_get_link(char *path_p, struct mac *mac_p); }
-	SYS___MAC_SET_LINK = 385;  // { int __mac_set_link(char *path_p, struct mac *mac_p); }
-	SYS___MAC_GET_PROC = 386;  // { int __mac_get_proc(struct mac *mac_p); }
-	SYS___MAC_SET_PROC = 387;  // { int __mac_set_proc(struct mac *mac_p); }
-	SYS___MAC_GET_FD = 388;  // { int __mac_get_fd(int fd, struct mac *mac_p); }
-	SYS___MAC_SET_FD = 389;  // { int __mac_set_fd(int fd, struct mac *mac_p); }
-	SYS___MAC_GET_PID = 390;  // { int __mac_get_pid(pid_t pid, struct mac *mac_p); }
-	SYS___MAC_GET_LCID = 391;  // { int __mac_get_lcid(pid_t lcid, struct mac *mac_p); }
-	SYS___MAC_GET_LCTX = 392;  // { int __mac_get_lctx(struct mac *mac_p); }
-	SYS___MAC_SET_LCTX = 393;  // { int __mac_set_lctx(struct mac *mac_p); }
-	SYS_SETLCID = 394;  // { int setlcid(pid_t pid, pid_t lcid) NO_SYSCALL_STUB; }
-	SYS_GETLCID = 395;  // { int getlcid(pid_t pid) NO_SYSCALL_STUB; }
-	SYS_READ_NOCANCEL = 396;  // { user_ssize_t read_nocancel(int fd, user_addr_t cbuf, user_size_t nbyte) NO_SYSCALL_STUB; }
-	SYS_WRITE_NOCANCEL = 397;  // { user_ssize_t write_nocancel(int fd, user_addr_t cbuf, user_size_t nbyte) NO_SYSCALL_STUB; }
-	SYS_OPEN_NOCANCEL = 398;  // { int open_nocancel(user_addr_t path, int flags, int mode) NO_SYSCALL_STUB; }
-	SYS_CLOSE_NOCANCEL = 399;  // { int close_nocancel(int fd) NO_SYSCALL_STUB; }
-	SYS_WAIT4_NOCANCEL = 400;  // { int wait4_nocancel(int pid, user_addr_t status, int options, user_addr_t rusage) NO_SYSCALL_STUB; }
-	SYS_RECVMSG_NOCANCEL = 401;  // { int recvmsg_nocancel(int s, struct msghdr *msg, int flags) NO_SYSCALL_STUB; }
-	SYS_SENDMSG_NOCANCEL = 402;  // { int sendmsg_nocancel(int s, caddr_t msg, int flags) NO_SYSCALL_STUB; }
-	SYS_RECVFROM_NOCANCEL = 403;  // { int recvfrom_nocancel(int s, void *buf, size_t len, int flags, struct sockaddr *from, int *fromlenaddr) NO_SYSCALL_STUB; }
-	SYS_ACCEPT_NOCANCEL = 404;  // { int accept_nocancel(int s, caddr_t name, socklen_t	*anamelen) NO_SYSCALL_STUB; }
+	SYS___MAC_EXECVE	= 380;	// { int __mac_execve(char *fname, char **argp, char **envp, struct mac *mac_p); }
+	SYS___MAC_SYSCALL	= 381;	// { int __mac_syscall(char *policy, int call, user_addr_t arg); }
+	SYS___MAC_GET_FILE	= 382;	// { int __mac_get_file(char *path_p, struct mac *mac_p); }
+	SYS___MAC_SET_FILE	= 383;	// { int __mac_set_file(char *path_p, struct mac *mac_p); }
+	SYS___MAC_GET_LINK	= 384;	// { int __mac_get_link(char *path_p, struct mac *mac_p); }
+	SYS___MAC_SET_LINK	= 385;	// { int __mac_set_link(char *path_p, struct mac *mac_p); }
+	SYS___MAC_GET_PROC	= 386;	// { int __mac_get_proc(struct mac *mac_p); }
+	SYS___MAC_SET_PROC	= 387;	// { int __mac_set_proc(struct mac *mac_p); }
+	SYS___MAC_GET_FD	= 388;	// { int __mac_get_fd(int fd, struct mac *mac_p); }
+	SYS___MAC_SET_FD	= 389;	// { int __mac_set_fd(int fd, struct mac *mac_p); }
+	SYS___MAC_GET_PID	= 390;	// { int __mac_get_pid(pid_t pid, struct mac *mac_p); }
+	SYS___MAC_GET_LCID	= 391;	// { int __mac_get_lcid(pid_t lcid, struct mac *mac_p); }
+	SYS___MAC_GET_LCTX	= 392;	// { int __mac_get_lctx(struct mac *mac_p); }
+	SYS___MAC_SET_LCTX	= 393;	// { int __mac_set_lctx(struct mac *mac_p); }
+	SYS_SETLCID		= 394;	// { int setlcid(pid_t pid, pid_t lcid) NO_SYSCALL_STUB; }
+	SYS_GETLCID		= 395;	// { int getlcid(pid_t pid) NO_SYSCALL_STUB; }
+	SYS_READ_NOCANCEL	= 396;	// { user_ssize_t read_nocancel(int fd, user_addr_t cbuf, user_size_t nbyte) NO_SYSCALL_STUB; }
+	SYS_WRITE_NOCANCEL	= 397;	// { user_ssize_t write_nocancel(int fd, user_addr_t cbuf, user_size_t nbyte) NO_SYSCALL_STUB; }
+	SYS_OPEN_NOCANCEL	= 398;	// { int open_nocancel(user_addr_t path, int flags, int mode) NO_SYSCALL_STUB; }
+	SYS_CLOSE_NOCANCEL	= 399;	// { int close_nocancel(int fd) NO_SYSCALL_STUB; }
+	SYS_WAIT4_NOCANCEL	= 400;	// { int wait4_nocancel(int pid, user_addr_t status, int options, user_addr_t rusage) NO_SYSCALL_STUB; }
+	SYS_RECVMSG_NOCANCEL	= 401;	// { int recvmsg_nocancel(int s, struct msghdr *msg, int flags) NO_SYSCALL_STUB; }
+	SYS_SENDMSG_NOCANCEL	= 402;	// { int sendmsg_nocancel(int s, caddr_t msg, int flags) NO_SYSCALL_STUB; }
+	SYS_RECVFROM_NOCANCEL	= 403;	// { int recvfrom_nocancel(int s, void *buf, size_t len, int flags, struct sockaddr *from, int *fromlenaddr) NO_SYSCALL_STUB; }
+	SYS_ACCEPT_NOCANCEL	= 404;	// { int accept_nocancel(int s, caddr_t name, socklen_t	*anamelen) NO_SYSCALL_STUB; }
 	// SYS_NOSYS = 401;  // { int nosys(void); }
 	// SYS_NOSYS = 402;  // { int nosys(void); }
 	// SYS_NOSYS = 403;  // { int nosys(void); }
 	// SYS_NOSYS = 404;  // { int nosys(void); }
-	SYS_MSYNC_NOCANCEL = 405;  // { int msync_nocancel(caddr_t addr, size_t len, int flags) NO_SYSCALL_STUB; }
-	SYS_FCNTL_NOCANCEL = 406;  // { int fcntl_nocancel(int fd, int cmd, long arg) NO_SYSCALL_STUB; }
-	SYS_SELECT_NOCANCEL = 407;  // { int select_nocancel(int nd, u_int32_t *in, u_int32_t *ou, u_int32_t *ex, struct timeval *tv) NO_SYSCALL_STUB; }
-	SYS_FSYNC_NOCANCEL = 408;  // { int fsync_nocancel(int fd) NO_SYSCALL_STUB; }
-	SYS_CONNECT_NOCANCEL = 409;  // { int connect_nocancel(int s, caddr_t name, socklen_t namelen) NO_SYSCALL_STUB; }
+	SYS_MSYNC_NOCANCEL	= 405;	// { int msync_nocancel(caddr_t addr, size_t len, int flags) NO_SYSCALL_STUB; }
+	SYS_FCNTL_NOCANCEL	= 406;	// { int fcntl_nocancel(int fd, int cmd, long arg) NO_SYSCALL_STUB; }
+	SYS_SELECT_NOCANCEL	= 407;	// { int select_nocancel(int nd, u_int32_t *in, u_int32_t *ou, u_int32_t *ex, struct timeval *tv) NO_SYSCALL_STUB; }
+	SYS_FSYNC_NOCANCEL	= 408;	// { int fsync_nocancel(int fd) NO_SYSCALL_STUB; }
+	SYS_CONNECT_NOCANCEL	= 409;	// { int connect_nocancel(int s, caddr_t name, socklen_t namelen) NO_SYSCALL_STUB; }
 	// SYS_NOSYS = 409;  // { int nosys(void); }
-	SYS_SIGSUSPEND_NOCANCEL = 410;  // { int sigsuspend_nocancel(sigset_t mask) NO_SYSCALL_STUB; }
-	SYS_READV_NOCANCEL = 411;  // { user_ssize_t readv_nocancel(int fd, struct iovec *iovp, u_int iovcnt) NO_SYSCALL_STUB; }
-	SYS_WRITEV_NOCANCEL = 412;  // { user_ssize_t writev_nocancel(int fd, struct iovec *iovp, u_int iovcnt) NO_SYSCALL_STUB; }
-	SYS_SENDTO_NOCANCEL = 413;  // { int sendto_nocancel(int s, caddr_t buf, size_t len, int flags, caddr_t to, socklen_t tolen) NO_SYSCALL_STUB; }
+	SYS_SIGSUSPEND_NOCANCEL	= 410;	// { int sigsuspend_nocancel(sigset_t mask) NO_SYSCALL_STUB; }
+	SYS_READV_NOCANCEL	= 411;	// { user_ssize_t readv_nocancel(int fd, struct iovec *iovp, u_int iovcnt) NO_SYSCALL_STUB; }
+	SYS_WRITEV_NOCANCEL	= 412;	// { user_ssize_t writev_nocancel(int fd, struct iovec *iovp, u_int iovcnt) NO_SYSCALL_STUB; }
+	SYS_SENDTO_NOCANCEL	= 413;	// { int sendto_nocancel(int s, caddr_t buf, size_t len, int flags, caddr_t to, socklen_t tolen) NO_SYSCALL_STUB; }
 	// SYS_NOSYS = 413;  // { int nosys(void); }
-	SYS_PREAD_NOCANCEL = 414;  // { user_ssize_t pread_nocancel(int fd, user_addr_t buf, user_size_t nbyte, off_t offset) NO_SYSCALL_STUB; }
-	SYS_PWRITE_NOCANCEL = 415;  // { user_ssize_t pwrite_nocancel(int fd, user_addr_t buf, user_size_t nbyte, off_t offset) NO_SYSCALL_STUB; }
-	SYS_WAITID_NOCANCEL = 416;  // { int waitid_nocancel(idtype_t idtype, id_t id, siginfo_t *infop, int options) NO_SYSCALL_STUB; }
-	SYS_POLL_NOCANCEL = 417;  // { int poll_nocancel(struct pollfd *fds, u_int nfds, int timeout) NO_SYSCALL_STUB; }
-	SYS_MSGSND_NOCANCEL = 418;  // { int msgsnd_nocancel(int msqid, void *msgp, size_t msgsz, int msgflg) NO_SYSCALL_STUB; }
-	SYS_MSGRCV_NOCANCEL = 419;  // { user_ssize_t msgrcv_nocancel(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg) NO_SYSCALL_STUB; }
+	SYS_PREAD_NOCANCEL	= 414;	// { user_ssize_t pread_nocancel(int fd, user_addr_t buf, user_size_t nbyte, off_t offset) NO_SYSCALL_STUB; }
+	SYS_PWRITE_NOCANCEL	= 415;	// { user_ssize_t pwrite_nocancel(int fd, user_addr_t buf, user_size_t nbyte, off_t offset) NO_SYSCALL_STUB; }
+	SYS_WAITID_NOCANCEL	= 416;	// { int waitid_nocancel(idtype_t idtype, id_t id, siginfo_t *infop, int options) NO_SYSCALL_STUB; }
+	SYS_POLL_NOCANCEL	= 417;	// { int poll_nocancel(struct pollfd *fds, u_int nfds, int timeout) NO_SYSCALL_STUB; }
+	SYS_MSGSND_NOCANCEL	= 418;	// { int msgsnd_nocancel(int msqid, void *msgp, size_t msgsz, int msgflg) NO_SYSCALL_STUB; }
+	SYS_MSGRCV_NOCANCEL	= 419;	// { user_ssize_t msgrcv_nocancel(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg) NO_SYSCALL_STUB; }
 	// SYS_NOSYS = 418;  // { int nosys(void); }
 	// SYS_NOSYS = 419;  // { int nosys(void); }
-	SYS_SEM_WAIT_NOCANCEL = 420;  // { int sem_wait_nocancel(sem_t *sem) NO_SYSCALL_STUB; }
-	SYS_AIO_SUSPEND_NOCANCEL = 421;  // { int aio_suspend_nocancel(user_addr_t aiocblist, int nent, user_addr_t timeoutp) NO_SYSCALL_STUB; }
-	SYS___SIGWAIT_NOCANCEL = 422;  // { int __sigwait_nocancel(user_addr_t set, user_addr_t sig) NO_SYSCALL_STUB; }
-	SYS___SEMWAIT_SIGNAL_NOCANCEL = 423;  // { int __semwait_signal_nocancel(int cond_sem, int mutex_sem, int timeout, int relative, time_t tv_sec, int32_t tv_nsec) NO_SYSCALL_STUB; }
-	SYS___MAC_MOUNT = 424;  // { int __mac_mount(char *type, char *path, int flags, caddr_t data, struct mac *mac_p); }
-	SYS___MAC_GET_MOUNT = 425;  // { int __mac_get_mount(char *path, struct mac *mac_p); }
-	SYS___MAC_GETFSSTAT = 426;  // { int __mac_getfsstat(user_addr_t buf, int bufsize, user_addr_t mac, int macsize, int flags); }
+	SYS_SEM_WAIT_NOCANCEL		= 420;	// { int sem_wait_nocancel(sem_t *sem) NO_SYSCALL_STUB; }
+	SYS_AIO_SUSPEND_NOCANCEL	= 421;	// { int aio_suspend_nocancel(user_addr_t aiocblist, int nent, user_addr_t timeoutp) NO_SYSCALL_STUB; }
+	SYS___SIGWAIT_NOCANCEL		= 422;	// { int __sigwait_nocancel(user_addr_t set, user_addr_t sig) NO_SYSCALL_STUB; }
+	SYS___SEMWAIT_SIGNAL_NOCANCEL	= 423;	// { int __semwait_signal_nocancel(int cond_sem, int mutex_sem, int timeout, int relative, time_t tv_sec, int32_t tv_nsec) NO_SYSCALL_STUB; }
+	SYS___MAC_MOUNT			= 424;	// { int __mac_mount(char *type, char *path, int flags, caddr_t data, struct mac *mac_p); }
+	SYS___MAC_GET_MOUNT		= 425;	// { int __mac_get_mount(char *path, struct mac *mac_p); }
+	SYS___MAC_GETFSSTAT		= 426;	// { int __mac_getfsstat(user_addr_t buf, int bufsize, user_addr_t mac, int macsize, int flags); }
 )
diff --git a/src/pkg/syscall/zsysnum_linux_386.go b/src/pkg/syscall/zsysnum_linux_386.go
index 4ff1102816..7cd1991473 100644
--- a/src/pkg/syscall/zsysnum_linux_386.go
+++ b/src/pkg/syscall/zsysnum_linux_386.go
@@ -3,317 +3,316 @@
 
 package syscall
 
-const(
-	SYS_RESTART_SYSCALL = 0;
-	SYS_EXIT = 1;
-	SYS_FORK = 2;
-	SYS_READ = 3;
-	SYS_WRITE = 4;
-	SYS_OPEN = 5;
-	SYS_CLOSE = 6;
-	SYS_WAITPID = 7;
-	SYS_CREAT = 8;
-	SYS_LINK = 9;
-	SYS_UNLINK = 10;
-	SYS_EXECVE = 11;
-	SYS_CHDIR = 12;
-	SYS_TIME = 13;
-	SYS_MKNOD = 14;
-	SYS_CHMOD = 15;
-	SYS_LCHOWN = 16;
-	SYS_BREAK = 17;
-	SYS_OLDSTAT = 18;
-	SYS_LSEEK = 19;
-	SYS_GETPID = 20;
-	SYS_MOUNT = 21;
-	SYS_UMOUNT = 22;
-	SYS_SETUID = 23;
-	SYS_GETUID = 24;
-	SYS_STIME = 25;
-	SYS_PTRACE = 26;
-	SYS_ALARM = 27;
-	SYS_OLDFSTAT = 28;
-	SYS_PAUSE = 29;
-	SYS_UTIME = 30;
-	SYS_STTY = 31;
-	SYS_GTTY = 32;
-	SYS_ACCESS = 33;
-	SYS_NICE = 34;
-	SYS_FTIME = 35;
-	SYS_SYNC = 36;
-	SYS_KILL = 37;
-	SYS_RENAME = 38;
-	SYS_MKDIR = 39;
-	SYS_RMDIR = 40;
-	SYS_DUP = 41;
-	SYS_PIPE = 42;
-	SYS_TIMES = 43;
-	SYS_PROF = 44;
-	SYS_BRK = 45;
-	SYS_SETGID = 46;
-	SYS_GETGID = 47;
-	SYS_SIGNAL = 48;
-	SYS_GETEUID = 49;
-	SYS_GETEGID = 50;
-	SYS_ACCT = 51;
-	SYS_UMOUNT2 = 52;
-	SYS_LOCK = 53;
-	SYS_IOCTL = 54;
-	SYS_FCNTL = 55;
-	SYS_MPX = 56;
-	SYS_SETPGID = 57;
-	SYS_ULIMIT = 58;
-	SYS_OLDOLDUNAME = 59;
-	SYS_UMASK = 60;
-	SYS_CHROOT = 61;
-	SYS_USTAT = 62;
-	SYS_DUP2 = 63;
-	SYS_GETPPID = 64;
-	SYS_GETPGRP = 65;
-	SYS_SETSID = 66;
-	SYS_SIGACTION = 67;
-	SYS_SGETMASK = 68;
-	SYS_SSETMASK = 69;
-	SYS_SETREUID = 70;
-	SYS_SETREGID = 71;
-	SYS_SIGSUSPEND = 72;
-	SYS_SIGPENDING = 73;
-	SYS_SETHOSTNAME = 74;
-	SYS_SETRLIMIT = 75;
-	SYS_GETRLIMIT = 76;
-	SYS_GETRUSAGE = 77;
-	SYS_GETTIMEOFDAY = 78;
-	SYS_SETTIMEOFDAY = 79;
-	SYS_GETGROUPS = 80;
-	SYS_SETGROUPS = 81;
-	SYS_SELECT = 82;
-	SYS_SYMLINK = 83;
-	SYS_OLDLSTAT = 84;
-	SYS_READLINK = 85;
-	SYS_USELIB = 86;
-	SYS_SWAPON = 87;
-	SYS_REBOOT = 88;
-	SYS_READDIR = 89;
-	SYS_MMAP = 90;
-	SYS_MUNMAP = 91;
-	SYS_TRUNCATE = 92;
-	SYS_FTRUNCATE = 93;
-	SYS_FCHMOD = 94;
-	SYS_FCHOWN = 95;
-	SYS_GETPRIORITY = 96;
-	SYS_SETPRIORITY = 97;
-	SYS_PROFIL = 98;
-	SYS_STATFS = 99;
-	SYS_FSTATFS = 100;
-	SYS_IOPERM = 101;
-	SYS_SOCKETCALL = 102;
-	SYS_SYSLOG = 103;
-	SYS_SETITIMER = 104;
-	SYS_GETITIMER = 105;
-	SYS_STAT = 106;
-	SYS_LSTAT = 107;
-	SYS_FSTAT = 108;
-	SYS_OLDUNAME = 109;
-	SYS_IOPL = 110;
-	SYS_VHANGUP = 111;
-	SYS_IDLE = 112;
-	SYS_VM86OLD = 113;
-	SYS_WAIT4 = 114;
-	SYS_SWAPOFF = 115;
-	SYS_SYSINFO = 116;
-	SYS_IPC = 117;
-	SYS_FSYNC = 118;
-	SYS_SIGRETURN = 119;
-	SYS_CLONE = 120;
-	SYS_SETDOMAINNAME = 121;
-	SYS_UNAME = 122;
-	SYS_MODIFY_LDT = 123;
-	SYS_ADJTIMEX = 124;
-	SYS_MPROTECT = 125;
-	SYS_SIGPROCMASK = 126;
-	SYS_CREATE_MODULE = 127;
-	SYS_INIT_MODULE = 128;
-	SYS_DELETE_MODULE = 129;
-	SYS_GET_KERNEL_SYMS = 130;
-	SYS_QUOTACTL = 131;
-	SYS_GETPGID = 132;
-	SYS_FCHDIR = 133;
-	SYS_BDFLUSH = 134;
-	SYS_SYSFS = 135;
-	SYS_PERSONALITY = 136;
-	SYS_AFS_SYSCALL = 137;
-	SYS_SETFSUID = 138;
-	SYS_SETFSGID = 139;
-	SYS__LLSEEK = 140;
-	SYS_GETDENTS = 141;
-	SYS__NEWSELECT = 142;
-	SYS_FLOCK = 143;
-	SYS_MSYNC = 144;
-	SYS_READV = 145;
-	SYS_WRITEV = 146;
-	SYS_GETSID = 147;
-	SYS_FDATASYNC = 148;
-	SYS__SYSCTL = 149;
-	SYS_MLOCK = 150;
-	SYS_MUNLOCK = 151;
-	SYS_MLOCKALL = 152;
-	SYS_MUNLOCKALL = 153;
-	SYS_SCHED_SETPARAM = 154;
-	SYS_SCHED_GETPARAM = 155;
-	SYS_SCHED_SETSCHEDULER = 156;
-	SYS_SCHED_GETSCHEDULER = 157;
-	SYS_SCHED_YIELD = 158;
-	SYS_SCHED_GET_PRIORITY_MAX = 159;
-	SYS_SCHED_GET_PRIORITY_MIN = 160;
-	SYS_SCHED_RR_GET_INTERVAL = 161;
-	SYS_NANOSLEEP = 162;
-	SYS_MREMAP = 163;
-	SYS_SETRESUID = 164;
-	SYS_GETRESUID = 165;
-	SYS_VM86 = 166;
-	SYS_QUERY_MODULE = 167;
-	SYS_POLL = 168;
-	SYS_NFSSERVCTL = 169;
-	SYS_SETRESGID = 170;
-	SYS_GETRESGID = 171;
-	SYS_PRCTL = 172;
-	SYS_RT_SIGRETURN = 173;
-	SYS_RT_SIGACTION = 174;
-	SYS_RT_SIGPROCMASK = 175;
-	SYS_RT_SIGPENDING = 176;
-	SYS_RT_SIGTIMEDWAIT = 177;
-	SYS_RT_SIGQUEUEINFO = 178;
-	SYS_RT_SIGSUSPEND = 179;
-	SYS_PREAD64 = 180;
-	SYS_PWRITE64 = 181;
-	SYS_CHOWN = 182;
-	SYS_GETCWD = 183;
-	SYS_CAPGET = 184;
-	SYS_CAPSET = 185;
-	SYS_SIGALTSTACK = 186;
-	SYS_SENDFILE = 187;
-	SYS_GETPMSG = 188;
-	SYS_PUTPMSG = 189;
-	SYS_VFORK = 190;
-	SYS_UGETRLIMIT = 191;
-	SYS_MMAP2 = 192;
-	SYS_TRUNCATE64 = 193;
-	SYS_FTRUNCATE64 = 194;
-	SYS_STAT64 = 195;
-	SYS_LSTAT64 = 196;
-	SYS_FSTAT64 = 197;
-	SYS_LCHOWN32 = 198;
-	SYS_GETUID32 = 199;
-	SYS_GETGID32 = 200;
-	SYS_GETEUID32 = 201;
-	SYS_GETEGID32 = 202;
-	SYS_SETREUID32 = 203;
-	SYS_SETREGID32 = 204;
-	SYS_GETGROUPS32 = 205;
-	SYS_SETGROUPS32 = 206;
-	SYS_FCHOWN32 = 207;
-	SYS_SETRESUID32 = 208;
-	SYS_GETRESUID32 = 209;
-	SYS_SETRESGID32 = 210;
-	SYS_GETRESGID32 = 211;
-	SYS_CHOWN32 = 212;
-	SYS_SETUID32 = 213;
-	SYS_SETGID32 = 214;
-	SYS_SETFSUID32 = 215;
-	SYS_SETFSGID32 = 216;
-	SYS_PIVOT_ROOT = 217;
-	SYS_MINCORE = 218;
-	SYS_MADVISE = 219;
-	SYS_MADVISE1 = 219;
-	SYS_GETDENTS64 = 220;
-	SYS_FCNTL64 = 221;
-	SYS_GETTID = 224;
-	SYS_READAHEAD = 225;
-	SYS_SETXATTR = 226;
-	SYS_LSETXATTR = 227;
-	SYS_FSETXATTR = 228;
-	SYS_GETXATTR = 229;
-	SYS_LGETXATTR = 230;
-	SYS_FGETXATTR = 231;
-	SYS_LISTXATTR = 232;
-	SYS_LLISTXATTR = 233;
-	SYS_FLISTXATTR = 234;
-	SYS_REMOVEXATTR = 235;
-	SYS_LREMOVEXATTR = 236;
-	SYS_FREMOVEXATTR = 237;
-	SYS_TKILL = 238;
-	SYS_SENDFILE64 = 239;
-	SYS_FUTEX = 240;
-	SYS_SCHED_SETAFFINITY = 241;
-	SYS_SCHED_GETAFFINITY = 242;
-	SYS_SET_THREAD_AREA = 243;
-	SYS_GET_THREAD_AREA = 244;
-	SYS_IO_SETUP = 245;
-	SYS_IO_DESTROY = 246;
-	SYS_IO_GETEVENTS = 247;
-	SYS_IO_SUBMIT = 248;
-	SYS_IO_CANCEL = 249;
-	SYS_FADVISE64 = 250;
-	SYS_EXIT_GROUP = 252;
-	SYS_LOOKUP_DCOOKIE = 253;
-	SYS_EPOLL_CREATE = 254;
-	SYS_EPOLL_CTL = 255;
-	SYS_EPOLL_WAIT = 256;
-	SYS_REMAP_FILE_PAGES = 257;
-	SYS_SET_TID_ADDRESS = 258;
-	SYS_TIMER_CREATE = 259;
-	SYS_STATFS64 = 268;
-	SYS_FSTATFS64 = 269;
-	SYS_TGKILL = 270;
-	SYS_UTIMES = 271;
-	SYS_FADVISE64_64 = 272;
-	SYS_VSERVER = 273;
-	SYS_MBIND = 274;
-	SYS_GET_MEMPOLICY = 275;
-	SYS_SET_MEMPOLICY = 276;
-	SYS_MQ_OPEN = 277;
-	SYS_KEXEC_LOAD = 283;
-	SYS_WAITID = 284;
-	SYS_ADD_KEY = 286;
-	SYS_REQUEST_KEY = 287;
-	SYS_KEYCTL = 288;
-	SYS_IOPRIO_SET = 289;
-	SYS_IOPRIO_GET = 290;
-	SYS_INOTIFY_INIT = 291;
-	SYS_INOTIFY_ADD_WATCH = 292;
-	SYS_INOTIFY_RM_WATCH = 293;
-	SYS_MIGRATE_PAGES = 294;
-	SYS_OPENAT = 295;
-	SYS_MKDIRAT = 296;
-	SYS_MKNODAT = 297;
-	SYS_FCHOWNAT = 298;
-	SYS_FUTIMESAT = 299;
-	SYS_FSTATAT64 = 300;
-	SYS_UNLINKAT = 301;
-	SYS_RENAMEAT = 302;
-	SYS_LINKAT = 303;
-	SYS_SYMLINKAT = 304;
-	SYS_READLINKAT = 305;
-	SYS_FCHMODAT = 306;
-	SYS_FACCESSAT = 307;
-	SYS_PSELECT6 = 308;
-	SYS_PPOLL = 309;
-	SYS_UNSHARE = 310;
-	SYS_SET_ROBUST_LIST = 311;
-	SYS_GET_ROBUST_LIST = 312;
-	SYS_SPLICE = 313;
-	SYS_SYNC_FILE_RANGE = 314;
-	SYS_TEE = 315;
-	SYS_VMSPLICE = 316;
-	SYS_MOVE_PAGES = 317;
-	SYS_GETCPU = 318;
-	SYS_EPOLL_PWAIT = 319;
-	SYS_UTIMENSAT = 320;
-	SYS_SIGNALFD = 321;
-	SYS_TIMERFD = 322;
-	SYS_EVENTFD = 323;
-	SYS_FALLOCATE = 324;
+const (
+	SYS_RESTART_SYSCALL		= 0;
+	SYS_EXIT			= 1;
+	SYS_FORK			= 2;
+	SYS_READ			= 3;
+	SYS_WRITE			= 4;
+	SYS_OPEN			= 5;
+	SYS_CLOSE			= 6;
+	SYS_WAITPID			= 7;
+	SYS_CREAT			= 8;
+	SYS_LINK			= 9;
+	SYS_UNLINK			= 10;
+	SYS_EXECVE			= 11;
+	SYS_CHDIR			= 12;
+	SYS_TIME			= 13;
+	SYS_MKNOD			= 14;
+	SYS_CHMOD			= 15;
+	SYS_LCHOWN			= 16;
+	SYS_BREAK			= 17;
+	SYS_OLDSTAT			= 18;
+	SYS_LSEEK			= 19;
+	SYS_GETPID			= 20;
+	SYS_MOUNT			= 21;
+	SYS_UMOUNT			= 22;
+	SYS_SETUID			= 23;
+	SYS_GETUID			= 24;
+	SYS_STIME			= 25;
+	SYS_PTRACE			= 26;
+	SYS_ALARM			= 27;
+	SYS_OLDFSTAT			= 28;
+	SYS_PAUSE			= 29;
+	SYS_UTIME			= 30;
+	SYS_STTY			= 31;
+	SYS_GTTY			= 32;
+	SYS_ACCESS			= 33;
+	SYS_NICE			= 34;
+	SYS_FTIME			= 35;
+	SYS_SYNC			= 36;
+	SYS_KILL			= 37;
+	SYS_RENAME			= 38;
+	SYS_MKDIR			= 39;
+	SYS_RMDIR			= 40;
+	SYS_DUP				= 41;
+	SYS_PIPE			= 42;
+	SYS_TIMES			= 43;
+	SYS_PROF			= 44;
+	SYS_BRK				= 45;
+	SYS_SETGID			= 46;
+	SYS_GETGID			= 47;
+	SYS_SIGNAL			= 48;
+	SYS_GETEUID			= 49;
+	SYS_GETEGID			= 50;
+	SYS_ACCT			= 51;
+	SYS_UMOUNT2			= 52;
+	SYS_LOCK			= 53;
+	SYS_IOCTL			= 54;
+	SYS_FCNTL			= 55;
+	SYS_MPX				= 56;
+	SYS_SETPGID			= 57;
+	SYS_ULIMIT			= 58;
+	SYS_OLDOLDUNAME			= 59;
+	SYS_UMASK			= 60;
+	SYS_CHROOT			= 61;
+	SYS_USTAT			= 62;
+	SYS_DUP2			= 63;
+	SYS_GETPPID			= 64;
+	SYS_GETPGRP			= 65;
+	SYS_SETSID			= 66;
+	SYS_SIGACTION			= 67;
+	SYS_SGETMASK			= 68;
+	SYS_SSETMASK			= 69;
+	SYS_SETREUID			= 70;
+	SYS_SETREGID			= 71;
+	SYS_SIGSUSPEND			= 72;
+	SYS_SIGPENDING			= 73;
+	SYS_SETHOSTNAME			= 74;
+	SYS_SETRLIMIT			= 75;
+	SYS_GETRLIMIT			= 76;
+	SYS_GETRUSAGE			= 77;
+	SYS_GETTIMEOFDAY		= 78;
+	SYS_SETTIMEOFDAY		= 79;
+	SYS_GETGROUPS			= 80;
+	SYS_SETGROUPS			= 81;
+	SYS_SELECT			= 82;
+	SYS_SYMLINK			= 83;
+	SYS_OLDLSTAT			= 84;
+	SYS_READLINK			= 85;
+	SYS_USELIB			= 86;
+	SYS_SWAPON			= 87;
+	SYS_REBOOT			= 88;
+	SYS_READDIR			= 89;
+	SYS_MMAP			= 90;
+	SYS_MUNMAP			= 91;
+	SYS_TRUNCATE			= 92;
+	SYS_FTRUNCATE			= 93;
+	SYS_FCHMOD			= 94;
+	SYS_FCHOWN			= 95;
+	SYS_GETPRIORITY			= 96;
+	SYS_SETPRIORITY			= 97;
+	SYS_PROFIL			= 98;
+	SYS_STATFS			= 99;
+	SYS_FSTATFS			= 100;
+	SYS_IOPERM			= 101;
+	SYS_SOCKETCALL			= 102;
+	SYS_SYSLOG			= 103;
+	SYS_SETITIMER			= 104;
+	SYS_GETITIMER			= 105;
+	SYS_STAT			= 106;
+	SYS_LSTAT			= 107;
+	SYS_FSTAT			= 108;
+	SYS_OLDUNAME			= 109;
+	SYS_IOPL			= 110;
+	SYS_VHANGUP			= 111;
+	SYS_IDLE			= 112;
+	SYS_VM86OLD			= 113;
+	SYS_WAIT4			= 114;
+	SYS_SWAPOFF			= 115;
+	SYS_SYSINFO			= 116;
+	SYS_IPC				= 117;
+	SYS_FSYNC			= 118;
+	SYS_SIGRETURN			= 119;
+	SYS_CLONE			= 120;
+	SYS_SETDOMAINNAME		= 121;
+	SYS_UNAME			= 122;
+	SYS_MODIFY_LDT			= 123;
+	SYS_ADJTIMEX			= 124;
+	SYS_MPROTECT			= 125;
+	SYS_SIGPROCMASK			= 126;
+	SYS_CREATE_MODULE		= 127;
+	SYS_INIT_MODULE			= 128;
+	SYS_DELETE_MODULE		= 129;
+	SYS_GET_KERNEL_SYMS		= 130;
+	SYS_QUOTACTL			= 131;
+	SYS_GETPGID			= 132;
+	SYS_FCHDIR			= 133;
+	SYS_BDFLUSH			= 134;
+	SYS_SYSFS			= 135;
+	SYS_PERSONALITY			= 136;
+	SYS_AFS_SYSCALL			= 137;
+	SYS_SETFSUID			= 138;
+	SYS_SETFSGID			= 139;
+	SYS__LLSEEK			= 140;
+	SYS_GETDENTS			= 141;
+	SYS__NEWSELECT			= 142;
+	SYS_FLOCK			= 143;
+	SYS_MSYNC			= 144;
+	SYS_READV			= 145;
+	SYS_WRITEV			= 146;
+	SYS_GETSID			= 147;
+	SYS_FDATASYNC			= 148;
+	SYS__SYSCTL			= 149;
+	SYS_MLOCK			= 150;
+	SYS_MUNLOCK			= 151;
+	SYS_MLOCKALL			= 152;
+	SYS_MUNLOCKALL			= 153;
+	SYS_SCHED_SETPARAM		= 154;
+	SYS_SCHED_GETPARAM		= 155;
+	SYS_SCHED_SETSCHEDULER		= 156;
+	SYS_SCHED_GETSCHEDULER		= 157;
+	SYS_SCHED_YIELD			= 158;
+	SYS_SCHED_GET_PRIORITY_MAX	= 159;
+	SYS_SCHED_GET_PRIORITY_MIN	= 160;
+	SYS_SCHED_RR_GET_INTERVAL	= 161;
+	SYS_NANOSLEEP			= 162;
+	SYS_MREMAP			= 163;
+	SYS_SETRESUID			= 164;
+	SYS_GETRESUID			= 165;
+	SYS_VM86			= 166;
+	SYS_QUERY_MODULE		= 167;
+	SYS_POLL			= 168;
+	SYS_NFSSERVCTL			= 169;
+	SYS_SETRESGID			= 170;
+	SYS_GETRESGID			= 171;
+	SYS_PRCTL			= 172;
+	SYS_RT_SIGRETURN		= 173;
+	SYS_RT_SIGACTION		= 174;
+	SYS_RT_SIGPROCMASK		= 175;
+	SYS_RT_SIGPENDING		= 176;
+	SYS_RT_SIGTIMEDWAIT		= 177;
+	SYS_RT_SIGQUEUEINFO		= 178;
+	SYS_RT_SIGSUSPEND		= 179;
+	SYS_PREAD64			= 180;
+	SYS_PWRITE64			= 181;
+	SYS_CHOWN			= 182;
+	SYS_GETCWD			= 183;
+	SYS_CAPGET			= 184;
+	SYS_CAPSET			= 185;
+	SYS_SIGALTSTACK			= 186;
+	SYS_SENDFILE			= 187;
+	SYS_GETPMSG			= 188;
+	SYS_PUTPMSG			= 189;
+	SYS_VFORK			= 190;
+	SYS_UGETRLIMIT			= 191;
+	SYS_MMAP2			= 192;
+	SYS_TRUNCATE64			= 193;
+	SYS_FTRUNCATE64			= 194;
+	SYS_STAT64			= 195;
+	SYS_LSTAT64			= 196;
+	SYS_FSTAT64			= 197;
+	SYS_LCHOWN32			= 198;
+	SYS_GETUID32			= 199;
+	SYS_GETGID32			= 200;
+	SYS_GETEUID32			= 201;
+	SYS_GETEGID32			= 202;
+	SYS_SETREUID32			= 203;
+	SYS_SETREGID32			= 204;
+	SYS_GETGROUPS32			= 205;
+	SYS_SETGROUPS32			= 206;
+	SYS_FCHOWN32			= 207;
+	SYS_SETRESUID32			= 208;
+	SYS_GETRESUID32			= 209;
+	SYS_SETRESGID32			= 210;
+	SYS_GETRESGID32			= 211;
+	SYS_CHOWN32			= 212;
+	SYS_SETUID32			= 213;
+	SYS_SETGID32			= 214;
+	SYS_SETFSUID32			= 215;
+	SYS_SETFSGID32			= 216;
+	SYS_PIVOT_ROOT			= 217;
+	SYS_MINCORE			= 218;
+	SYS_MADVISE			= 219;
+	SYS_MADVISE1			= 219;
+	SYS_GETDENTS64			= 220;
+	SYS_FCNTL64			= 221;
+	SYS_GETTID			= 224;
+	SYS_READAHEAD			= 225;
+	SYS_SETXATTR			= 226;
+	SYS_LSETXATTR			= 227;
+	SYS_FSETXATTR			= 228;
+	SYS_GETXATTR			= 229;
+	SYS_LGETXATTR			= 230;
+	SYS_FGETXATTR			= 231;
+	SYS_LISTXATTR			= 232;
+	SYS_LLISTXATTR			= 233;
+	SYS_FLISTXATTR			= 234;
+	SYS_REMOVEXATTR			= 235;
+	SYS_LREMOVEXATTR		= 236;
+	SYS_FREMOVEXATTR		= 237;
+	SYS_TKILL			= 238;
+	SYS_SENDFILE64			= 239;
+	SYS_FUTEX			= 240;
+	SYS_SCHED_SETAFFINITY		= 241;
+	SYS_SCHED_GETAFFINITY		= 242;
+	SYS_SET_THREAD_AREA		= 243;
+	SYS_GET_THREAD_AREA		= 244;
+	SYS_IO_SETUP			= 245;
+	SYS_IO_DESTROY			= 246;
+	SYS_IO_GETEVENTS		= 247;
+	SYS_IO_SUBMIT			= 248;
+	SYS_IO_CANCEL			= 249;
+	SYS_FADVISE64			= 250;
+	SYS_EXIT_GROUP			= 252;
+	SYS_LOOKUP_DCOOKIE		= 253;
+	SYS_EPOLL_CREATE		= 254;
+	SYS_EPOLL_CTL			= 255;
+	SYS_EPOLL_WAIT			= 256;
+	SYS_REMAP_FILE_PAGES		= 257;
+	SYS_SET_TID_ADDRESS		= 258;
+	SYS_TIMER_CREATE		= 259;
+	SYS_STATFS64			= 268;
+	SYS_FSTATFS64			= 269;
+	SYS_TGKILL			= 270;
+	SYS_UTIMES			= 271;
+	SYS_FADVISE64_64		= 272;
+	SYS_VSERVER			= 273;
+	SYS_MBIND			= 274;
+	SYS_GET_MEMPOLICY		= 275;
+	SYS_SET_MEMPOLICY		= 276;
+	SYS_MQ_OPEN			= 277;
+	SYS_KEXEC_LOAD			= 283;
+	SYS_WAITID			= 284;
+	SYS_ADD_KEY			= 286;
+	SYS_REQUEST_KEY			= 287;
+	SYS_KEYCTL			= 288;
+	SYS_IOPRIO_SET			= 289;
+	SYS_IOPRIO_GET			= 290;
+	SYS_INOTIFY_INIT		= 291;
+	SYS_INOTIFY_ADD_WATCH		= 292;
+	SYS_INOTIFY_RM_WATCH		= 293;
+	SYS_MIGRATE_PAGES		= 294;
+	SYS_OPENAT			= 295;
+	SYS_MKDIRAT			= 296;
+	SYS_MKNODAT			= 297;
+	SYS_FCHOWNAT			= 298;
+	SYS_FUTIMESAT			= 299;
+	SYS_FSTATAT64			= 300;
+	SYS_UNLINKAT			= 301;
+	SYS_RENAMEAT			= 302;
+	SYS_LINKAT			= 303;
+	SYS_SYMLINKAT			= 304;
+	SYS_READLINKAT			= 305;
+	SYS_FCHMODAT			= 306;
+	SYS_FACCESSAT			= 307;
+	SYS_PSELECT6			= 308;
+	SYS_PPOLL			= 309;
+	SYS_UNSHARE			= 310;
+	SYS_SET_ROBUST_LIST		= 311;
+	SYS_GET_ROBUST_LIST		= 312;
+	SYS_SPLICE			= 313;
+	SYS_SYNC_FILE_RANGE		= 314;
+	SYS_TEE				= 315;
+	SYS_VMSPLICE			= 316;
+	SYS_MOVE_PAGES			= 317;
+	SYS_GETCPU			= 318;
+	SYS_EPOLL_PWAIT			= 319;
+	SYS_UTIMENSAT			= 320;
+	SYS_SIGNALFD			= 321;
+	SYS_TIMERFD			= 322;
+	SYS_EVENTFD			= 323;
+	SYS_FALLOCATE			= 324;
 )
 
-func _darwin_system_call_conflict() {
-}
+func _darwin_system_call_conflict() {}
diff --git a/src/pkg/syscall/zsysnum_linux_amd64.go b/src/pkg/syscall/zsysnum_linux_amd64.go
index 2fc6d3f488..ee7912f06e 100644
--- a/src/pkg/syscall/zsysnum_linux_amd64.go
+++ b/src/pkg/syscall/zsysnum_linux_amd64.go
@@ -3,294 +3,293 @@
 
 package syscall
 
-const(
-	SYS_READ = 0;
-	SYS_WRITE = 1;
-	SYS_OPEN = 2;
-	SYS_CLOSE = 3;
-	SYS_STAT = 4;
-	SYS_FSTAT = 5;
-	SYS_LSTAT = 6;
-	SYS_POLL = 7;
-	SYS_LSEEK = 8;
-	SYS_MMAP = 9;
-	SYS_MPROTECT = 10;
-	SYS_MUNMAP = 11;
-	SYS_BRK = 12;
-	SYS_RT_SIGACTION = 13;
-	SYS_RT_SIGPROCMASK = 14;
-	SYS_RT_SIGRETURN = 15;
-	SYS_IOCTL = 16;
-	SYS_PREAD64 = 17;
-	SYS_PWRITE64 = 18;
-	SYS_READV = 19;
-	SYS_WRITEV = 20;
-	SYS_ACCESS = 21;
-	SYS_PIPE = 22;
-	SYS_SELECT = 23;
-	SYS_SCHED_YIELD = 24;
-	SYS_MREMAP = 25;
-	SYS_MSYNC = 26;
-	SYS_MINCORE = 27;
-	SYS_MADVISE = 28;
-	SYS_SHMGET = 29;
-	SYS_SHMAT = 30;
-	SYS_SHMCTL = 31;
-	SYS_DUP = 32;
-	SYS_DUP2 = 33;
-	SYS_PAUSE = 34;
-	SYS_NANOSLEEP = 35;
-	SYS_GETITIMER = 36;
-	SYS_ALARM = 37;
-	SYS_SETITIMER = 38;
-	SYS_GETPID = 39;
-	SYS_SENDFILE = 40;
-	SYS_SOCKET = 41;
-	SYS_CONNECT = 42;
-	SYS_ACCEPT = 43;
-	SYS_SENDTO = 44;
-	SYS_RECVFROM = 45;
-	SYS_SENDMSG = 46;
-	SYS_RECVMSG = 47;
-	SYS_SHUTDOWN = 48;
-	SYS_BIND = 49;
-	SYS_LISTEN = 50;
-	SYS_GETSOCKNAME = 51;
-	SYS_GETPEERNAME = 52;
-	SYS_SOCKETPAIR = 53;
-	SYS_SETSOCKOPT = 54;
-	SYS_GETSOCKOPT = 55;
-	SYS_CLONE = 56;
-	SYS_FORK = 57;
-	SYS_VFORK = 58;
-	SYS_EXECVE = 59;
-	SYS_EXIT = 60;
-	SYS_WAIT4 = 61;
-	SYS_KILL = 62;
-	SYS_UNAME = 63;
-	SYS_SEMGET = 64;
-	SYS_SEMOP = 65;
-	SYS_SEMCTL = 66;
-	SYS_SHMDT = 67;
-	SYS_MSGGET = 68;
-	SYS_MSGSND = 69;
-	SYS_MSGRCV = 70;
-	SYS_MSGCTL = 71;
-	SYS_FCNTL = 72;
-	SYS_FLOCK = 73;
-	SYS_FSYNC = 74;
-	SYS_FDATASYNC = 75;
-	SYS_TRUNCATE = 76;
-	SYS_FTRUNCATE = 77;
-	SYS_GETDENTS = 78;
-	SYS_GETCWD = 79;
-	SYS_CHDIR = 80;
-	SYS_FCHDIR = 81;
-	SYS_RENAME = 82;
-	SYS_MKDIR = 83;
-	SYS_RMDIR = 84;
-	SYS_CREAT = 85;
-	SYS_LINK = 86;
-	SYS_UNLINK = 87;
-	SYS_SYMLINK = 88;
-	SYS_READLINK = 89;
-	SYS_CHMOD = 90;
-	SYS_FCHMOD = 91;
-	SYS_CHOWN = 92;
-	SYS_FCHOWN = 93;
-	SYS_LCHOWN = 94;
-	SYS_UMASK = 95;
-	SYS_GETTIMEOFDAY = 96;
-	SYS_GETRLIMIT = 97;
-	SYS_GETRUSAGE = 98;
-	SYS_SYSINFO = 99;
-	SYS_TIMES = 100;
-	SYS_PTRACE = 101;
-	SYS_GETUID = 102;
-	SYS_SYSLOG = 103;
-	SYS_GETGID = 104;
-	SYS_SETUID = 105;
-	SYS_SETGID = 106;
-	SYS_GETEUID = 107;
-	SYS_GETEGID = 108;
-	SYS_SETPGID = 109;
-	SYS_GETPPID = 110;
-	SYS_GETPGRP = 111;
-	SYS_SETSID = 112;
-	SYS_SETREUID = 113;
-	SYS_SETREGID = 114;
-	SYS_GETGROUPS = 115;
-	SYS_SETGROUPS = 116;
-	SYS_SETRESUID = 117;
-	SYS_GETRESUID = 118;
-	SYS_SETRESGID = 119;
-	SYS_GETRESGID = 120;
-	SYS_GETPGID = 121;
-	SYS_SETFSUID = 122;
-	SYS_SETFSGID = 123;
-	SYS_GETSID = 124;
-	SYS_CAPGET = 125;
-	SYS_CAPSET = 126;
-	SYS_RT_SIGPENDING = 127;
-	SYS_RT_SIGTIMEDWAIT = 128;
-	SYS_RT_SIGQUEUEINFO = 129;
-	SYS_RT_SIGSUSPEND = 130;
-	SYS_SIGALTSTACK = 131;
-	SYS_UTIME = 132;
-	SYS_MKNOD = 133;
-	SYS_USELIB = 134;
-	SYS_PERSONALITY = 135;
-	SYS_USTAT = 136;
-	SYS_STATFS = 137;
-	SYS_FSTATFS = 138;
-	SYS_SYSFS = 139;
-	SYS_GETPRIORITY = 140;
-	SYS_SETPRIORITY = 141;
-	SYS_SCHED_SETPARAM = 142;
-	SYS_SCHED_GETPARAM = 143;
-	SYS_SCHED_SETSCHEDULER = 144;
-	SYS_SCHED_GETSCHEDULER = 145;
-	SYS_SCHED_GET_PRIORITY_MAX = 146;
-	SYS_SCHED_GET_PRIORITY_MIN = 147;
-	SYS_SCHED_RR_GET_INTERVAL = 148;
-	SYS_MLOCK = 149;
-	SYS_MUNLOCK = 150;
-	SYS_MLOCKALL = 151;
-	SYS_MUNLOCKALL = 152;
-	SYS_VHANGUP = 153;
-	SYS_MODIFY_LDT = 154;
-	SYS_PIVOT_ROOT = 155;
-	SYS__SYSCTL = 156;
-	SYS_PRCTL = 157;
-	SYS_ARCH_PRCTL = 158;
-	SYS_ADJTIMEX = 159;
-	SYS_SETRLIMIT = 160;
-	SYS_CHROOT = 161;
-	SYS_SYNC = 162;
-	SYS_ACCT = 163;
-	SYS_SETTIMEOFDAY = 164;
-	SYS_MOUNT = 165;
-	SYS_UMOUNT2 = 166;
-	SYS_SWAPON = 167;
-	SYS_SWAPOFF = 168;
-	SYS_REBOOT = 169;
-	SYS_SETHOSTNAME = 170;
-	SYS_SETDOMAINNAME = 171;
-	SYS_IOPL = 172;
-	SYS_IOPERM = 173;
-	SYS_CREATE_MODULE = 174;
-	SYS_INIT_MODULE = 175;
-	SYS_DELETE_MODULE = 176;
-	SYS_GET_KERNEL_SYMS = 177;
-	SYS_QUERY_MODULE = 178;
-	SYS_QUOTACTL = 179;
-	SYS_NFSSERVCTL = 180;
-	SYS_GETPMSG = 181;
-	SYS_PUTPMSG = 182;
-	SYS_AFS_SYSCALL = 183;
-	SYS_TUXCALL = 184;
-	SYS_SECURITY = 185;
-	SYS_GETTID = 186;
-	SYS_READAHEAD = 187;
-	SYS_SETXATTR = 188;
-	SYS_LSETXATTR = 189;
-	SYS_FSETXATTR = 190;
-	SYS_GETXATTR = 191;
-	SYS_LGETXATTR = 192;
-	SYS_FGETXATTR = 193;
-	SYS_LISTXATTR = 194;
-	SYS_LLISTXATTR = 195;
-	SYS_FLISTXATTR = 196;
-	SYS_REMOVEXATTR = 197;
-	SYS_LREMOVEXATTR = 198;
-	SYS_FREMOVEXATTR = 199;
-	SYS_TKILL = 200;
-	SYS_TIME = 201;
-	SYS_FUTEX = 202;
-	SYS_SCHED_SETAFFINITY = 203;
-	SYS_SCHED_GETAFFINITY = 204;
-	SYS_SET_THREAD_AREA = 205;
-	SYS_IO_SETUP = 206;
-	SYS_IO_DESTROY = 207;
-	SYS_IO_GETEVENTS = 208;
-	SYS_IO_SUBMIT = 209;
-	SYS_IO_CANCEL = 210;
-	SYS_GET_THREAD_AREA = 211;
-	SYS_LOOKUP_DCOOKIE = 212;
-	SYS_EPOLL_CREATE = 213;
-	SYS_EPOLL_CTL_OLD = 214;
-	SYS_EPOLL_WAIT_OLD = 215;
-	SYS_REMAP_FILE_PAGES = 216;
-	SYS_GETDENTS64 = 217;
-	SYS_SET_TID_ADDRESS = 218;
-	SYS_RESTART_SYSCALL = 219;
-	SYS_SEMTIMEDOP = 220;
-	SYS_FADVISE64 = 221;
-	SYS_TIMER_CREATE = 222;
-	SYS_TIMER_SETTIME = 223;
-	SYS_TIMER_GETTIME = 224;
-	SYS_TIMER_GETOVERRUN = 225;
-	SYS_TIMER_DELETE = 226;
-	SYS_CLOCK_SETTIME = 227;
-	SYS_CLOCK_GETTIME = 228;
-	SYS_CLOCK_GETRES = 229;
-	SYS_CLOCK_NANOSLEEP = 230;
-	SYS_EXIT_GROUP = 231;
-	SYS_EPOLL_WAIT = 232;
-	SYS_EPOLL_CTL = 233;
-	SYS_TGKILL = 234;
-	SYS_UTIMES = 235;
-	SYS_VSERVER = 236;
-	SYS_MBIND = 237;
-	SYS_SET_MEMPOLICY = 238;
-	SYS_GET_MEMPOLICY = 239;
-	SYS_MQ_OPEN = 240;
-	SYS_MQ_UNLINK = 241;
-	SYS_MQ_TIMEDSEND = 242;
-	SYS_MQ_TIMEDRECEIVE = 243;
-	SYS_MQ_NOTIFY = 244;
-	SYS_MQ_GETSETATTR = 245;
-	SYS_KEXEC_LOAD = 246;
-	SYS_WAITID = 247;
-	SYS_ADD_KEY = 248;
-	SYS_REQUEST_KEY = 249;
-	SYS_KEYCTL = 250;
-	SYS_IOPRIO_SET = 251;
-	SYS_IOPRIO_GET = 252;
-	SYS_INOTIFY_INIT = 253;
-	SYS_INOTIFY_ADD_WATCH = 254;
-	SYS_INOTIFY_RM_WATCH = 255;
-	SYS_MIGRATE_PAGES = 256;
-	SYS_OPENAT = 257;
-	SYS_MKDIRAT = 258;
-	SYS_MKNODAT = 259;
-	SYS_FCHOWNAT = 260;
-	SYS_FUTIMESAT = 261;
-	SYS_NEWFSTATAT = 262;
-	SYS_UNLINKAT = 263;
-	SYS_RENAMEAT = 264;
-	SYS_LINKAT = 265;
-	SYS_SYMLINKAT = 266;
-	SYS_READLINKAT = 267;
-	SYS_FCHMODAT = 268;
-	SYS_FACCESSAT = 269;
-	SYS_PSELECT6 = 270;
-	SYS_PPOLL = 271;
-	SYS_UNSHARE = 272;
-	SYS_SET_ROBUST_LIST = 273;
-	SYS_GET_ROBUST_LIST = 274;
-	SYS_SPLICE = 275;
-	SYS_TEE = 276;
-	SYS_SYNC_FILE_RANGE = 277;
-	SYS_VMSPLICE = 278;
-	SYS_MOVE_PAGES = 279;
-	SYS_UTIMENSAT = 280;
-	SYS_EPOLL_PWAIT = 281;
-	SYS_SIGNALFD = 282;
-	SYS_TIMERFD = 283;
-	SYS_EVENTFD = 284;
-	SYS_FALLOCATE = 285;
+const (
+	SYS_READ			= 0;
+	SYS_WRITE			= 1;
+	SYS_OPEN			= 2;
+	SYS_CLOSE			= 3;
+	SYS_STAT			= 4;
+	SYS_FSTAT			= 5;
+	SYS_LSTAT			= 6;
+	SYS_POLL			= 7;
+	SYS_LSEEK			= 8;
+	SYS_MMAP			= 9;
+	SYS_MPROTECT			= 10;
+	SYS_MUNMAP			= 11;
+	SYS_BRK				= 12;
+	SYS_RT_SIGACTION		= 13;
+	SYS_RT_SIGPROCMASK		= 14;
+	SYS_RT_SIGRETURN		= 15;
+	SYS_IOCTL			= 16;
+	SYS_PREAD64			= 17;
+	SYS_PWRITE64			= 18;
+	SYS_READV			= 19;
+	SYS_WRITEV			= 20;
+	SYS_ACCESS			= 21;
+	SYS_PIPE			= 22;
+	SYS_SELECT			= 23;
+	SYS_SCHED_YIELD			= 24;
+	SYS_MREMAP			= 25;
+	SYS_MSYNC			= 26;
+	SYS_MINCORE			= 27;
+	SYS_MADVISE			= 28;
+	SYS_SHMGET			= 29;
+	SYS_SHMAT			= 30;
+	SYS_SHMCTL			= 31;
+	SYS_DUP				= 32;
+	SYS_DUP2			= 33;
+	SYS_PAUSE			= 34;
+	SYS_NANOSLEEP			= 35;
+	SYS_GETITIMER			= 36;
+	SYS_ALARM			= 37;
+	SYS_SETITIMER			= 38;
+	SYS_GETPID			= 39;
+	SYS_SENDFILE			= 40;
+	SYS_SOCKET			= 41;
+	SYS_CONNECT			= 42;
+	SYS_ACCEPT			= 43;
+	SYS_SENDTO			= 44;
+	SYS_RECVFROM			= 45;
+	SYS_SENDMSG			= 46;
+	SYS_RECVMSG			= 47;
+	SYS_SHUTDOWN			= 48;
+	SYS_BIND			= 49;
+	SYS_LISTEN			= 50;
+	SYS_GETSOCKNAME			= 51;
+	SYS_GETPEERNAME			= 52;
+	SYS_SOCKETPAIR			= 53;
+	SYS_SETSOCKOPT			= 54;
+	SYS_GETSOCKOPT			= 55;
+	SYS_CLONE			= 56;
+	SYS_FORK			= 57;
+	SYS_VFORK			= 58;
+	SYS_EXECVE			= 59;
+	SYS_EXIT			= 60;
+	SYS_WAIT4			= 61;
+	SYS_KILL			= 62;
+	SYS_UNAME			= 63;
+	SYS_SEMGET			= 64;
+	SYS_SEMOP			= 65;
+	SYS_SEMCTL			= 66;
+	SYS_SHMDT			= 67;
+	SYS_MSGGET			= 68;
+	SYS_MSGSND			= 69;
+	SYS_MSGRCV			= 70;
+	SYS_MSGCTL			= 71;
+	SYS_FCNTL			= 72;
+	SYS_FLOCK			= 73;
+	SYS_FSYNC			= 74;
+	SYS_FDATASYNC			= 75;
+	SYS_TRUNCATE			= 76;
+	SYS_FTRUNCATE			= 77;
+	SYS_GETDENTS			= 78;
+	SYS_GETCWD			= 79;
+	SYS_CHDIR			= 80;
+	SYS_FCHDIR			= 81;
+	SYS_RENAME			= 82;
+	SYS_MKDIR			= 83;
+	SYS_RMDIR			= 84;
+	SYS_CREAT			= 85;
+	SYS_LINK			= 86;
+	SYS_UNLINK			= 87;
+	SYS_SYMLINK			= 88;
+	SYS_READLINK			= 89;
+	SYS_CHMOD			= 90;
+	SYS_FCHMOD			= 91;
+	SYS_CHOWN			= 92;
+	SYS_FCHOWN			= 93;
+	SYS_LCHOWN			= 94;
+	SYS_UMASK			= 95;
+	SYS_GETTIMEOFDAY		= 96;
+	SYS_GETRLIMIT			= 97;
+	SYS_GETRUSAGE			= 98;
+	SYS_SYSINFO			= 99;
+	SYS_TIMES			= 100;
+	SYS_PTRACE			= 101;
+	SYS_GETUID			= 102;
+	SYS_SYSLOG			= 103;
+	SYS_GETGID			= 104;
+	SYS_SETUID			= 105;
+	SYS_SETGID			= 106;
+	SYS_GETEUID			= 107;
+	SYS_GETEGID			= 108;
+	SYS_SETPGID			= 109;
+	SYS_GETPPID			= 110;
+	SYS_GETPGRP			= 111;
+	SYS_SETSID			= 112;
+	SYS_SETREUID			= 113;
+	SYS_SETREGID			= 114;
+	SYS_GETGROUPS			= 115;
+	SYS_SETGROUPS			= 116;
+	SYS_SETRESUID			= 117;
+	SYS_GETRESUID			= 118;
+	SYS_SETRESGID			= 119;
+	SYS_GETRESGID			= 120;
+	SYS_GETPGID			= 121;
+	SYS_SETFSUID			= 122;
+	SYS_SETFSGID			= 123;
+	SYS_GETSID			= 124;
+	SYS_CAPGET			= 125;
+	SYS_CAPSET			= 126;
+	SYS_RT_SIGPENDING		= 127;
+	SYS_RT_SIGTIMEDWAIT		= 128;
+	SYS_RT_SIGQUEUEINFO		= 129;
+	SYS_RT_SIGSUSPEND		= 130;
+	SYS_SIGALTSTACK			= 131;
+	SYS_UTIME			= 132;
+	SYS_MKNOD			= 133;
+	SYS_USELIB			= 134;
+	SYS_PERSONALITY			= 135;
+	SYS_USTAT			= 136;
+	SYS_STATFS			= 137;
+	SYS_FSTATFS			= 138;
+	SYS_SYSFS			= 139;
+	SYS_GETPRIORITY			= 140;
+	SYS_SETPRIORITY			= 141;
+	SYS_SCHED_SETPARAM		= 142;
+	SYS_SCHED_GETPARAM		= 143;
+	SYS_SCHED_SETSCHEDULER		= 144;
+	SYS_SCHED_GETSCHEDULER		= 145;
+	SYS_SCHED_GET_PRIORITY_MAX	= 146;
+	SYS_SCHED_GET_PRIORITY_MIN	= 147;
+	SYS_SCHED_RR_GET_INTERVAL	= 148;
+	SYS_MLOCK			= 149;
+	SYS_MUNLOCK			= 150;
+	SYS_MLOCKALL			= 151;
+	SYS_MUNLOCKALL			= 152;
+	SYS_VHANGUP			= 153;
+	SYS_MODIFY_LDT			= 154;
+	SYS_PIVOT_ROOT			= 155;
+	SYS__SYSCTL			= 156;
+	SYS_PRCTL			= 157;
+	SYS_ARCH_PRCTL			= 158;
+	SYS_ADJTIMEX			= 159;
+	SYS_SETRLIMIT			= 160;
+	SYS_CHROOT			= 161;
+	SYS_SYNC			= 162;
+	SYS_ACCT			= 163;
+	SYS_SETTIMEOFDAY		= 164;
+	SYS_MOUNT			= 165;
+	SYS_UMOUNT2			= 166;
+	SYS_SWAPON			= 167;
+	SYS_SWAPOFF			= 168;
+	SYS_REBOOT			= 169;
+	SYS_SETHOSTNAME			= 170;
+	SYS_SETDOMAINNAME		= 171;
+	SYS_IOPL			= 172;
+	SYS_IOPERM			= 173;
+	SYS_CREATE_MODULE		= 174;
+	SYS_INIT_MODULE			= 175;
+	SYS_DELETE_MODULE		= 176;
+	SYS_GET_KERNEL_SYMS		= 177;
+	SYS_QUERY_MODULE		= 178;
+	SYS_QUOTACTL			= 179;
+	SYS_NFSSERVCTL			= 180;
+	SYS_GETPMSG			= 181;
+	SYS_PUTPMSG			= 182;
+	SYS_AFS_SYSCALL			= 183;
+	SYS_TUXCALL			= 184;
+	SYS_SECURITY			= 185;
+	SYS_GETTID			= 186;
+	SYS_READAHEAD			= 187;
+	SYS_SETXATTR			= 188;
+	SYS_LSETXATTR			= 189;
+	SYS_FSETXATTR			= 190;
+	SYS_GETXATTR			= 191;
+	SYS_LGETXATTR			= 192;
+	SYS_FGETXATTR			= 193;
+	SYS_LISTXATTR			= 194;
+	SYS_LLISTXATTR			= 195;
+	SYS_FLISTXATTR			= 196;
+	SYS_REMOVEXATTR			= 197;
+	SYS_LREMOVEXATTR		= 198;
+	SYS_FREMOVEXATTR		= 199;
+	SYS_TKILL			= 200;
+	SYS_TIME			= 201;
+	SYS_FUTEX			= 202;
+	SYS_SCHED_SETAFFINITY		= 203;
+	SYS_SCHED_GETAFFINITY		= 204;
+	SYS_SET_THREAD_AREA		= 205;
+	SYS_IO_SETUP			= 206;
+	SYS_IO_DESTROY			= 207;
+	SYS_IO_GETEVENTS		= 208;
+	SYS_IO_SUBMIT			= 209;
+	SYS_IO_CANCEL			= 210;
+	SYS_GET_THREAD_AREA		= 211;
+	SYS_LOOKUP_DCOOKIE		= 212;
+	SYS_EPOLL_CREATE		= 213;
+	SYS_EPOLL_CTL_OLD		= 214;
+	SYS_EPOLL_WAIT_OLD		= 215;
+	SYS_REMAP_FILE_PAGES		= 216;
+	SYS_GETDENTS64			= 217;
+	SYS_SET_TID_ADDRESS		= 218;
+	SYS_RESTART_SYSCALL		= 219;
+	SYS_SEMTIMEDOP			= 220;
+	SYS_FADVISE64			= 221;
+	SYS_TIMER_CREATE		= 222;
+	SYS_TIMER_SETTIME		= 223;
+	SYS_TIMER_GETTIME		= 224;
+	SYS_TIMER_GETOVERRUN		= 225;
+	SYS_TIMER_DELETE		= 226;
+	SYS_CLOCK_SETTIME		= 227;
+	SYS_CLOCK_GETTIME		= 228;
+	SYS_CLOCK_GETRES		= 229;
+	SYS_CLOCK_NANOSLEEP		= 230;
+	SYS_EXIT_GROUP			= 231;
+	SYS_EPOLL_WAIT			= 232;
+	SYS_EPOLL_CTL			= 233;
+	SYS_TGKILL			= 234;
+	SYS_UTIMES			= 235;
+	SYS_VSERVER			= 236;
+	SYS_MBIND			= 237;
+	SYS_SET_MEMPOLICY		= 238;
+	SYS_GET_MEMPOLICY		= 239;
+	SYS_MQ_OPEN			= 240;
+	SYS_MQ_UNLINK			= 241;
+	SYS_MQ_TIMEDSEND		= 242;
+	SYS_MQ_TIMEDRECEIVE		= 243;
+	SYS_MQ_NOTIFY			= 244;
+	SYS_MQ_GETSETATTR		= 245;
+	SYS_KEXEC_LOAD			= 246;
+	SYS_WAITID			= 247;
+	SYS_ADD_KEY			= 248;
+	SYS_REQUEST_KEY			= 249;
+	SYS_KEYCTL			= 250;
+	SYS_IOPRIO_SET			= 251;
+	SYS_IOPRIO_GET			= 252;
+	SYS_INOTIFY_INIT		= 253;
+	SYS_INOTIFY_ADD_WATCH		= 254;
+	SYS_INOTIFY_RM_WATCH		= 255;
+	SYS_MIGRATE_PAGES		= 256;
+	SYS_OPENAT			= 257;
+	SYS_MKDIRAT			= 258;
+	SYS_MKNODAT			= 259;
+	SYS_FCHOWNAT			= 260;
+	SYS_FUTIMESAT			= 261;
+	SYS_NEWFSTATAT			= 262;
+	SYS_UNLINKAT			= 263;
+	SYS_RENAMEAT			= 264;
+	SYS_LINKAT			= 265;
+	SYS_SYMLINKAT			= 266;
+	SYS_READLINKAT			= 267;
+	SYS_FCHMODAT			= 268;
+	SYS_FACCESSAT			= 269;
+	SYS_PSELECT6			= 270;
+	SYS_PPOLL			= 271;
+	SYS_UNSHARE			= 272;
+	SYS_SET_ROBUST_LIST		= 273;
+	SYS_GET_ROBUST_LIST		= 274;
+	SYS_SPLICE			= 275;
+	SYS_TEE				= 276;
+	SYS_SYNC_FILE_RANGE		= 277;
+	SYS_VMSPLICE			= 278;
+	SYS_MOVE_PAGES			= 279;
+	SYS_UTIMENSAT			= 280;
+	SYS_EPOLL_PWAIT			= 281;
+	SYS_SIGNALFD			= 282;
+	SYS_TIMERFD			= 283;
+	SYS_EVENTFD			= 284;
+	SYS_FALLOCATE			= 285;
 )
 
-func _darwin_system_call_conflict() {
-}
+func _darwin_system_call_conflict() {}
diff --git a/src/pkg/syscall/zsysnum_linux_arm.go b/src/pkg/syscall/zsysnum_linux_arm.go
index aa1c816090..48dc56ed16 100644
--- a/src/pkg/syscall/zsysnum_linux_arm.go
+++ b/src/pkg/syscall/zsysnum_linux_arm.go
@@ -2,338 +2,337 @@
 
 package syscall
 
-const(
-	SYS_SYSCALL_BASE = 0x900000;
+const (
+	SYS_SYSCALL_BASE	= 0x900000;
 	// for thumb and eabi
 	//SYS_SYSCALL_BASE = 0;
 
-	SYS_RESTART_SYSCALL = (SYS_SYSCALL_BASE+  0);
-	SYS_EXIT = (SYS_SYSCALL_BASE+  1);
-	SYS_FORK = (SYS_SYSCALL_BASE+  2);
-	SYS_READ = (SYS_SYSCALL_BASE+  3);
-	SYS_WRITE = (SYS_SYSCALL_BASE+  4);
-	SYS_OPEN = (SYS_SYSCALL_BASE+  5);
-	SYS_CLOSE = (SYS_SYSCALL_BASE+  6);
-	SYS_CREAT = (SYS_SYSCALL_BASE+  8);
-	SYS_LINK = (SYS_SYSCALL_BASE+  9);
-	SYS_UNLINK = (SYS_SYSCALL_BASE+ 10);
-	SYS_EXECVE = (SYS_SYSCALL_BASE+ 11);
-	SYS_CHDIR = (SYS_SYSCALL_BASE+ 12);
-	SYS_TIME = (SYS_SYSCALL_BASE+ 13);
-	SYS_MKNOD = (SYS_SYSCALL_BASE+ 14);
-	SYS_CHMOD = (SYS_SYSCALL_BASE+ 15);
-	SYS_LCHOWN = (SYS_SYSCALL_BASE+ 16);
-	SYS_LSEEK = (SYS_SYSCALL_BASE+ 19);
-	SYS_GETPID = (SYS_SYSCALL_BASE+ 20);
-	SYS_MOUNT = (SYS_SYSCALL_BASE+ 21);
-	SYS_UMOUNT = (SYS_SYSCALL_BASE+ 22);
-	SYS_SETUID = (SYS_SYSCALL_BASE+ 23);
-	SYS_GETUID = (SYS_SYSCALL_BASE+ 24);
-	SYS_STIME = (SYS_SYSCALL_BASE+ 25);
-	SYS_PTRACE = (SYS_SYSCALL_BASE+ 26);
-	SYS_ALARM = (SYS_SYSCALL_BASE+ 27);
-	SYS_PAUSE = (SYS_SYSCALL_BASE+ 29);
-	SYS_UTIME = (SYS_SYSCALL_BASE+ 30);
-	SYS_ACCESS = (SYS_SYSCALL_BASE+ 33);
-	SYS_NICE = (SYS_SYSCALL_BASE+ 34);
-	SYS_SYNC = (SYS_SYSCALL_BASE+ 36);
-	SYS_KILL = (SYS_SYSCALL_BASE+ 37);
-	SYS_RENAME = (SYS_SYSCALL_BASE+ 38);
-	SYS_MKDIR = (SYS_SYSCALL_BASE+ 39);
-	SYS_RMDIR = (SYS_SYSCALL_BASE+ 40);
-	SYS_DUP = (SYS_SYSCALL_BASE+ 41);
-	SYS_PIPE = (SYS_SYSCALL_BASE+ 42);
-	SYS_TIMES = (SYS_SYSCALL_BASE+ 43);
-	SYS_BRK = (SYS_SYSCALL_BASE+ 45);
-	SYS_SETGID = (SYS_SYSCALL_BASE+ 46);
-	SYS_GETGID = (SYS_SYSCALL_BASE+ 47);
-	SYS_GETEUID = (SYS_SYSCALL_BASE+ 49);
-	SYS_GETEGID = (SYS_SYSCALL_BASE+ 50);
-	SYS_ACCT = (SYS_SYSCALL_BASE+ 51);
-	SYS_UMOUNT2 = (SYS_SYSCALL_BASE+ 52);
-	SYS_IOCTL = (SYS_SYSCALL_BASE+ 54);
-	SYS_FCNTL = (SYS_SYSCALL_BASE+ 55);
-	SYS_SETPGID = (SYS_SYSCALL_BASE+ 57);
-	SYS_UMASK = (SYS_SYSCALL_BASE+ 60);
-	SYS_CHROOT = (SYS_SYSCALL_BASE+ 61);
-	SYS_USTAT = (SYS_SYSCALL_BASE+ 62);
-	SYS_DUP2 = (SYS_SYSCALL_BASE+ 63);
-	SYS_GETPPID = (SYS_SYSCALL_BASE+ 64);
-	SYS_GETPGRP = (SYS_SYSCALL_BASE+ 65);
-	SYS_SETSID = (SYS_SYSCALL_BASE+ 66);
-	SYS_SIGACTION = (SYS_SYSCALL_BASE+ 67);
-	SYS_SETREUID = (SYS_SYSCALL_BASE+ 70);
-	SYS_SETREGID = (SYS_SYSCALL_BASE+ 71);
-	SYS_SIGSUSPEND = (SYS_SYSCALL_BASE+ 72);
-	SYS_SIGPENDING = (SYS_SYSCALL_BASE+ 73);
-	SYS_SETHOSTNAME = (SYS_SYSCALL_BASE+ 74);
-	SYS_SETRLIMIT = (SYS_SYSCALL_BASE+ 75);
-	SYS_GETRLIMIT = (SYS_SYSCALL_BASE+ 76);
-	SYS_GETRUSAGE = (SYS_SYSCALL_BASE+ 77);
-	SYS_GETTIMEOFDAY = (SYS_SYSCALL_BASE+ 78);
-	SYS_SETTIMEOFDAY = (SYS_SYSCALL_BASE+ 79);
-	SYS_GETGROUPS = (SYS_SYSCALL_BASE+ 80);
-	SYS_SETGROUPS = (SYS_SYSCALL_BASE+ 81);
-	SYS_SELECT = (SYS_SYSCALL_BASE+ 82);
-	SYS_SYMLINK = (SYS_SYSCALL_BASE+ 83);
-	SYS_READLINK = (SYS_SYSCALL_BASE+ 85);
-	SYS_USELIB = (SYS_SYSCALL_BASE+ 86);
-	SYS_SWAPON = (SYS_SYSCALL_BASE+ 87);
-	SYS_REBOOT = (SYS_SYSCALL_BASE+ 88);
-	SYS_READDIR = (SYS_SYSCALL_BASE+ 89);
-	SYS_MMAP = (SYS_SYSCALL_BASE+ 90);
-	SYS_MUNMAP = (SYS_SYSCALL_BASE+ 91);
-	SYS_TRUNCATE = (SYS_SYSCALL_BASE+ 92);
-	SYS_FTRUNCATE = (SYS_SYSCALL_BASE+ 93);
-	SYS_FCHMOD = (SYS_SYSCALL_BASE+ 94);
-	SYS_FCHOWN = (SYS_SYSCALL_BASE+ 95);
-	SYS_GETPRIORITY = (SYS_SYSCALL_BASE+ 96);
-	SYS_SETPRIORITY = (SYS_SYSCALL_BASE+ 97);
-	SYS_STATFS = (SYS_SYSCALL_BASE+ 99);
-	SYS_FSTATFS = (SYS_SYSCALL_BASE+100);
-	SYS_SOCKETCALL = (SYS_SYSCALL_BASE+102);
-	SYS_SYSLOG = (SYS_SYSCALL_BASE+103);
-	SYS_SETITIMER = (SYS_SYSCALL_BASE+104);
-	SYS_GETITIMER = (SYS_SYSCALL_BASE+105);
-	SYS_STAT = (SYS_SYSCALL_BASE+106);
-	SYS_LSTAT = (SYS_SYSCALL_BASE+107);
-	SYS_FSTAT = (SYS_SYSCALL_BASE+108);
-	SYS_VHANGUP = (SYS_SYSCALL_BASE+111);
-	SYS_SYSCALL = (SYS_SYSCALL_BASE+113);
-	SYS_WAIT4 = (SYS_SYSCALL_BASE+114);
-	SYS_SWAPOFF = (SYS_SYSCALL_BASE+115);
-	SYS_SYSINFO = (SYS_SYSCALL_BASE+116);
-	SYS_IPC = (SYS_SYSCALL_BASE+117);
-	SYS_FSYNC = (SYS_SYSCALL_BASE+118);
-	SYS_SIGRETURN = (SYS_SYSCALL_BASE+119);
-	SYS_CLONE = (SYS_SYSCALL_BASE+120);
-	SYS_SETDOMAINNAME = (SYS_SYSCALL_BASE+121);
-	SYS_UNAME = (SYS_SYSCALL_BASE+122);
-	SYS_ADJTIMEX = (SYS_SYSCALL_BASE+124);
-	SYS_MPROTECT = (SYS_SYSCALL_BASE+125);
-	SYS_SIGPROCMASK = (SYS_SYSCALL_BASE+126);
-	SYS_INIT_MODULE = (SYS_SYSCALL_BASE+128);
-	SYS_DELETE_MODULE = (SYS_SYSCALL_BASE+129);
-	SYS_QUOTACTL = (SYS_SYSCALL_BASE+131);
-	SYS_GETPGID = (SYS_SYSCALL_BASE+132);
-	SYS_FCHDIR = (SYS_SYSCALL_BASE+133);
-	SYS_BDFLUSH = (SYS_SYSCALL_BASE+134);
-	SYS_SYSFS = (SYS_SYSCALL_BASE+135);
-	SYS_PERSONALITY = (SYS_SYSCALL_BASE+136);
-	SYS_SETFSUID = (SYS_SYSCALL_BASE+138);
-	SYS_SETFSGID = (SYS_SYSCALL_BASE+139);
-	SYS__LLSEEK = (SYS_SYSCALL_BASE+140);
-	SYS_GETDENTS = (SYS_SYSCALL_BASE+141);
-	SYS__NEWSELECT = (SYS_SYSCALL_BASE+142);
-	SYS_FLOCK = (SYS_SYSCALL_BASE+143);
-	SYS_MSYNC = (SYS_SYSCALL_BASE+144);
-	SYS_READV = (SYS_SYSCALL_BASE+145);
-	SYS_WRITEV = (SYS_SYSCALL_BASE+146);
-	SYS_GETSID = (SYS_SYSCALL_BASE+147);
-	SYS_FDATASYNC = (SYS_SYSCALL_BASE+148);
-	SYS__SYSCTL = (SYS_SYSCALL_BASE+149);
-	SYS_MLOCK = (SYS_SYSCALL_BASE+150);
-	SYS_MUNLOCK = (SYS_SYSCALL_BASE+151);
-	SYS_MLOCKALL = (SYS_SYSCALL_BASE+152);
-	SYS_MUNLOCKALL = (SYS_SYSCALL_BASE+153);
-	SYS_SCHED_SETPARAM = (SYS_SYSCALL_BASE+154);
-	SYS_SCHED_GETPARAM = (SYS_SYSCALL_BASE+155);
-	SYS_SCHED_SETSCHEDULER = (SYS_SYSCALL_BASE+156);
-	SYS_SCHED_GETSCHEDULER = (SYS_SYSCALL_BASE+157);
-	SYS_SCHED_YIELD = (SYS_SYSCALL_BASE+158);
-	SYS_SCHED_GET_PRIORITY_MAX = (SYS_SYSCALL_BASE+159);
-	SYS_SCHED_GET_PRIORITY_MIN = (SYS_SYSCALL_BASE+160);
-	SYS_SCHED_RR_GET_INTERVAL = (SYS_SYSCALL_BASE+161);
-	SYS_NANOSLEEP = (SYS_SYSCALL_BASE+162);
-	SYS_MREMAP = (SYS_SYSCALL_BASE+163);
-	SYS_SETRESUID = (SYS_SYSCALL_BASE+164);
-	SYS_GETRESUID = (SYS_SYSCALL_BASE+165);
-	SYS_POLL = (SYS_SYSCALL_BASE+168);
-	SYS_NFSSERVCTL = (SYS_SYSCALL_BASE+169);
-	SYS_SETRESGID = (SYS_SYSCALL_BASE+170);
-	SYS_GETRESGID = (SYS_SYSCALL_BASE+171);
-	SYS_PRCTL = (SYS_SYSCALL_BASE+172);
-	SYS_RT_SIGRETURN = (SYS_SYSCALL_BASE+173);
-	SYS_RT_SIGACTION = (SYS_SYSCALL_BASE+174);
-	SYS_RT_SIGPROCMASK = (SYS_SYSCALL_BASE+175);
-	SYS_RT_SIGPENDING = (SYS_SYSCALL_BASE+176);
-	SYS_RT_SIGTIMEDWAIT = (SYS_SYSCALL_BASE+177);
-	SYS_RT_SIGQUEUEINFO = (SYS_SYSCALL_BASE+178);
-	SYS_RT_SIGSUSPEND = (SYS_SYSCALL_BASE+179);
-	SYS_PREAD64 = (SYS_SYSCALL_BASE+180);
-	SYS_PWRITE64 = (SYS_SYSCALL_BASE+181);
-	SYS_CHOWN = (SYS_SYSCALL_BASE+182);
-	SYS_GETCWD = (SYS_SYSCALL_BASE+183);
-	SYS_CAPGET = (SYS_SYSCALL_BASE+184);
-	SYS_CAPSET = (SYS_SYSCALL_BASE+185);
-	SYS_SIGALTSTACK = (SYS_SYSCALL_BASE+186);
-	SYS_SENDFILE = (SYS_SYSCALL_BASE+187);
-	SYS_VFORK = (SYS_SYSCALL_BASE+190);
-	SYS_UGETRLIMIT = (SYS_SYSCALL_BASE+191);
-	SYS_MMAP2 = (SYS_SYSCALL_BASE+192);
-	SYS_TRUNCATE64 = (SYS_SYSCALL_BASE+193);
-	SYS_FTRUNCATE64 = (SYS_SYSCALL_BASE+194);
-	SYS_STAT64 = (SYS_SYSCALL_BASE+195);
-	SYS_LSTAT64 = (SYS_SYSCALL_BASE+196);
-	SYS_FSTAT64 = (SYS_SYSCALL_BASE+197);
-	SYS_LCHOWN32 = (SYS_SYSCALL_BASE+198);
-	SYS_GETUID32 = (SYS_SYSCALL_BASE+199);
-	SYS_GETGID32 = (SYS_SYSCALL_BASE+200);
-	SYS_GETEUID32 = (SYS_SYSCALL_BASE+201);
-	SYS_GETEGID32 = (SYS_SYSCALL_BASE+202);
-	SYS_SETREUID32 = (SYS_SYSCALL_BASE+203);
-	SYS_SETREGID32 = (SYS_SYSCALL_BASE+204);
-	SYS_GETGROUPS32 = (SYS_SYSCALL_BASE+205);
-	SYS_SETGROUPS32 = (SYS_SYSCALL_BASE+206);
-	SYS_FCHOWN32 = (SYS_SYSCALL_BASE+207);
-	SYS_SETRESUID32 = (SYS_SYSCALL_BASE+208);
-	SYS_GETRESUID32 = (SYS_SYSCALL_BASE+209);
-	SYS_SETRESGID32 = (SYS_SYSCALL_BASE+210);
-	SYS_GETRESGID32 = (SYS_SYSCALL_BASE+211);
-	SYS_CHOWN32 = (SYS_SYSCALL_BASE+212);
-	SYS_SETUID32 = (SYS_SYSCALL_BASE+213);
-	SYS_SETGID32 = (SYS_SYSCALL_BASE+214);
-	SYS_SETFSUID32 = (SYS_SYSCALL_BASE+215);
-	SYS_SETFSGID32 = (SYS_SYSCALL_BASE+216);
-	SYS_GETDENTS64 = (SYS_SYSCALL_BASE+217);
-	SYS_PIVOT_ROOT = (SYS_SYSCALL_BASE+218);
-	SYS_MINCORE = (SYS_SYSCALL_BASE+219);
-	SYS_MADVISE = (SYS_SYSCALL_BASE+220);
-	SYS_FCNTL64 = (SYS_SYSCALL_BASE+221);
-	SYS_GETTID = (SYS_SYSCALL_BASE+224);
-	SYS_READAHEAD = (SYS_SYSCALL_BASE+225);
-	SYS_SETXATTR = (SYS_SYSCALL_BASE+226);
-	SYS_LSETXATTR = (SYS_SYSCALL_BASE+227);
-	SYS_FSETXATTR = (SYS_SYSCALL_BASE+228);
-	SYS_GETXATTR = (SYS_SYSCALL_BASE+229);
-	SYS_LGETXATTR = (SYS_SYSCALL_BASE+230);
-	SYS_FGETXATTR = (SYS_SYSCALL_BASE+231);
-	SYS_LISTXATTR = (SYS_SYSCALL_BASE+232);
-	SYS_LLISTXATTR = (SYS_SYSCALL_BASE+233);
-	SYS_FLISTXATTR = (SYS_SYSCALL_BASE+234);
-	SYS_REMOVEXATTR = (SYS_SYSCALL_BASE+235);
-	SYS_LREMOVEXATTR = (SYS_SYSCALL_BASE+236);
-	SYS_FREMOVEXATTR = (SYS_SYSCALL_BASE+237);
-	SYS_TKILL = (SYS_SYSCALL_BASE+238);
-	SYS_SENDFILE64 = (SYS_SYSCALL_BASE+239);
-	SYS_FUTEX = (SYS_SYSCALL_BASE+240);
-	SYS_SCHED_SETAFFINITY = (SYS_SYSCALL_BASE+241);
-	SYS_SCHED_GETAFFINITY = (SYS_SYSCALL_BASE+242);
-	SYS_IO_SETUP = (SYS_SYSCALL_BASE+243);
-	SYS_IO_DESTROY = (SYS_SYSCALL_BASE+244);
-	SYS_IO_GETEVENTS = (SYS_SYSCALL_BASE+245);
-	SYS_IO_SUBMIT = (SYS_SYSCALL_BASE+246);
-	SYS_IO_CANCEL = (SYS_SYSCALL_BASE+247);
-	SYS_EXIT_GROUP = (SYS_SYSCALL_BASE+248);
-	SYS_LOOKUP_DCOOKIE = (SYS_SYSCALL_BASE+249);
-	SYS_EPOLL_CREATE = (SYS_SYSCALL_BASE+250);
-	SYS_EPOLL_CTL = (SYS_SYSCALL_BASE+251);
-	SYS_EPOLL_WAIT = (SYS_SYSCALL_BASE+252);
-	SYS_REMAP_FILE_PAGES = (SYS_SYSCALL_BASE+253);
-	SYS_SET_TID_ADDRESS = (SYS_SYSCALL_BASE+256);
-	SYS_TIMER_CREATE = (SYS_SYSCALL_BASE+257);
-	SYS_TIMER_SETTIME = (SYS_SYSCALL_BASE+258);
-	SYS_TIMER_GETTIME = (SYS_SYSCALL_BASE+259);
-	SYS_TIMER_GETOVERRUN = (SYS_SYSCALL_BASE+260);
-	SYS_TIMER_DELETE = (SYS_SYSCALL_BASE+261);
-	SYS_CLOCK_SETTIME = (SYS_SYSCALL_BASE+262);
-	SYS_CLOCK_GETTIME = (SYS_SYSCALL_BASE+263);
-	SYS_CLOCK_GETRES = (SYS_SYSCALL_BASE+264);
-	SYS_CLOCK_NANOSLEEP = (SYS_SYSCALL_BASE+265);
-	SYS_STATFS64 = (SYS_SYSCALL_BASE+266);
-	SYS_FSTATFS64 = (SYS_SYSCALL_BASE+267);
-	SYS_TGKILL = (SYS_SYSCALL_BASE+268);
-	SYS_UTIMES = (SYS_SYSCALL_BASE+269);
-	SYS_ARM_FADVISE64_64 = (SYS_SYSCALL_BASE+270);
-	SYS_PCICONFIG_IOBASE = (SYS_SYSCALL_BASE+271);
-	SYS_PCICONFIG_READ = (SYS_SYSCALL_BASE+272);
-	SYS_PCICONFIG_WRITE = (SYS_SYSCALL_BASE+273);
-	SYS_MQ_OPEN = (SYS_SYSCALL_BASE+274);
-	SYS_MQ_UNLINK = (SYS_SYSCALL_BASE+275);
-	SYS_MQ_TIMEDSEND = (SYS_SYSCALL_BASE+276);
-	SYS_MQ_TIMEDRECEIVE = (SYS_SYSCALL_BASE+277);
-	SYS_MQ_NOTIFY = (SYS_SYSCALL_BASE+278);
-	SYS_MQ_GETSETATTR = (SYS_SYSCALL_BASE+279);
-	SYS_WAITID = (SYS_SYSCALL_BASE+280);
-	SYS_SOCKET = (SYS_SYSCALL_BASE+281);
-	SYS_BIND = (SYS_SYSCALL_BASE+282);
-	SYS_CONNECT = (SYS_SYSCALL_BASE+283);
-	SYS_LISTEN = (SYS_SYSCALL_BASE+284);
-	SYS_ACCEPT = (SYS_SYSCALL_BASE+285);
-	SYS_GETSOCKNAME = (SYS_SYSCALL_BASE+286);
-	SYS_GETPEERNAME = (SYS_SYSCALL_BASE+287);
-	SYS_SOCKETPAIR = (SYS_SYSCALL_BASE+288);
-	SYS_SEND = (SYS_SYSCALL_BASE+289);
-	SYS_SENDTO = (SYS_SYSCALL_BASE+290);
-	SYS_RECV = (SYS_SYSCALL_BASE+291);
-	SYS_RECVFROM = (SYS_SYSCALL_BASE+292);
-	SYS_SHUTDOWN = (SYS_SYSCALL_BASE+293);
-	SYS_SETSOCKOPT = (SYS_SYSCALL_BASE+294);
-	SYS_GETSOCKOPT = (SYS_SYSCALL_BASE+295);
-	SYS_SENDMSG = (SYS_SYSCALL_BASE+296);
-	SYS_RECVMSG = (SYS_SYSCALL_BASE+297);
-	SYS_SEMOP = (SYS_SYSCALL_BASE+298);
-	SYS_SEMGET = (SYS_SYSCALL_BASE+299);
-	SYS_SEMCTL = (SYS_SYSCALL_BASE+300);
-	SYS_MSGSND = (SYS_SYSCALL_BASE+301);
-	SYS_MSGRCV = (SYS_SYSCALL_BASE+302);
-	SYS_MSGGET = (SYS_SYSCALL_BASE+303);
-	SYS_MSGCTL = (SYS_SYSCALL_BASE+304);
-	SYS_SHMAT = (SYS_SYSCALL_BASE+305);
-	SYS_SHMDT = (SYS_SYSCALL_BASE+306);
-	SYS_SHMGET = (SYS_SYSCALL_BASE+307);
-	SYS_SHMCTL = (SYS_SYSCALL_BASE+308);
-	SYS_ADD_KEY = (SYS_SYSCALL_BASE+309);
-	SYS_REQUEST_KEY = (SYS_SYSCALL_BASE+310);
-	SYS_KEYCTL = (SYS_SYSCALL_BASE+311);
-	SYS_SEMTIMEDOP = (SYS_SYSCALL_BASE+312);
-	SYS_VSERVER = (SYS_SYSCALL_BASE+313);
-	SYS_IOPRIO_SET = (SYS_SYSCALL_BASE+314);
-	SYS_IOPRIO_GET = (SYS_SYSCALL_BASE+315);
-	SYS_INOTIFY_INIT = (SYS_SYSCALL_BASE+316);
-	SYS_INOTIFY_ADD_WATCH = (SYS_SYSCALL_BASE+317);
-	SYS_INOTIFY_RM_WATCH = (SYS_SYSCALL_BASE+318);
-	SYS_MBIND = (SYS_SYSCALL_BASE+319);
-	SYS_GET_MEMPOLICY = (SYS_SYSCALL_BASE+320);
-	SYS_SET_MEMPOLICY = (SYS_SYSCALL_BASE+321);
-	SYS_OPENAT = (SYS_SYSCALL_BASE+322);
-	SYS_MKDIRAT = (SYS_SYSCALL_BASE+323);
-	SYS_MKNODAT = (SYS_SYSCALL_BASE+324);
-	SYS_FCHOWNAT = (SYS_SYSCALL_BASE+325);
-	SYS_FUTIMESAT = (SYS_SYSCALL_BASE+326);
-	SYS_FSTATAT64 = (SYS_SYSCALL_BASE+327);
-	SYS_UNLINKAT = (SYS_SYSCALL_BASE+328);
-	SYS_RENAMEAT = (SYS_SYSCALL_BASE+329);
-	SYS_LINKAT = (SYS_SYSCALL_BASE+330);
-	SYS_SYMLINKAT = (SYS_SYSCALL_BASE+331);
-	SYS_READLINKAT = (SYS_SYSCALL_BASE+332);
-	SYS_FCHMODAT = (SYS_SYSCALL_BASE+333);
-	SYS_FACCESSAT = (SYS_SYSCALL_BASE+334);
-	SYS_UNSHARE = (SYS_SYSCALL_BASE+337);
-	SYS_SET_ROBUST_LIST = (SYS_SYSCALL_BASE+338);
-	SYS_GET_ROBUST_LIST = (SYS_SYSCALL_BASE+339);
-	SYS_SPLICE = (SYS_SYSCALL_BASE+340);
-	SYS_ARM_SYNC_FILE_RANGE = (SYS_SYSCALL_BASE+341);
-	SYS_SYNC_FILE_RANGE2 = SYS_ARM_SYNC_FILE_RANGE;
-	SYS_TEE = (SYS_SYSCALL_BASE+342);
-	SYS_VMSPLICE = (SYS_SYSCALL_BASE+343);
-	SYS_MOVE_PAGES = (SYS_SYSCALL_BASE+344);
-	SYS_GETCPU = (SYS_SYSCALL_BASE+345);
-	SYS_KEXEC_LOAD = (SYS_SYSCALL_BASE+347);
-	SYS_UTIMENSAT = (SYS_SYSCALL_BASE+348);
-	SYS_SIGNALFD = (SYS_SYSCALL_BASE+349);
-	SYS_TIMERFD_CREATE = (SYS_SYSCALL_BASE+350);
-	SYS_EVENTFD = (SYS_SYSCALL_BASE+351);
-	SYS_FALLOCATE = (SYS_SYSCALL_BASE+352);
-	SYS_TIMERFD_SETTIME = (SYS_SYSCALL_BASE+353);
-	SYS_TIMERFD_GETTIME = (SYS_SYSCALL_BASE+354);
-	SYS_SIGNALFD4 = (SYS_SYSCALL_BASE+355);
-	SYS_EVENTFD2 = (SYS_SYSCALL_BASE+356);
-	SYS_EPOLL_CREATE1 = (SYS_SYSCALL_BASE+357);
-	SYS_DUP3 = (SYS_SYSCALL_BASE+358);
-	SYS_PIPE2 = (SYS_SYSCALL_BASE+359);
-	SYS_INOTIFY_INIT1 = (SYS_SYSCALL_BASE+360);
+	SYS_RESTART_SYSCALL		= (SYS_SYSCALL_BASE + 0);
+	SYS_EXIT			= (SYS_SYSCALL_BASE + 1);
+	SYS_FORK			= (SYS_SYSCALL_BASE + 2);
+	SYS_READ			= (SYS_SYSCALL_BASE + 3);
+	SYS_WRITE			= (SYS_SYSCALL_BASE + 4);
+	SYS_OPEN			= (SYS_SYSCALL_BASE + 5);
+	SYS_CLOSE			= (SYS_SYSCALL_BASE + 6);
+	SYS_CREAT			= (SYS_SYSCALL_BASE + 8);
+	SYS_LINK			= (SYS_SYSCALL_BASE + 9);
+	SYS_UNLINK			= (SYS_SYSCALL_BASE + 10);
+	SYS_EXECVE			= (SYS_SYSCALL_BASE + 11);
+	SYS_CHDIR			= (SYS_SYSCALL_BASE + 12);
+	SYS_TIME			= (SYS_SYSCALL_BASE + 13);
+	SYS_MKNOD			= (SYS_SYSCALL_BASE + 14);
+	SYS_CHMOD			= (SYS_SYSCALL_BASE + 15);
+	SYS_LCHOWN			= (SYS_SYSCALL_BASE + 16);
+	SYS_LSEEK			= (SYS_SYSCALL_BASE + 19);
+	SYS_GETPID			= (SYS_SYSCALL_BASE + 20);
+	SYS_MOUNT			= (SYS_SYSCALL_BASE + 21);
+	SYS_UMOUNT			= (SYS_SYSCALL_BASE + 22);
+	SYS_SETUID			= (SYS_SYSCALL_BASE + 23);
+	SYS_GETUID			= (SYS_SYSCALL_BASE + 24);
+	SYS_STIME			= (SYS_SYSCALL_BASE + 25);
+	SYS_PTRACE			= (SYS_SYSCALL_BASE + 26);
+	SYS_ALARM			= (SYS_SYSCALL_BASE + 27);
+	SYS_PAUSE			= (SYS_SYSCALL_BASE + 29);
+	SYS_UTIME			= (SYS_SYSCALL_BASE + 30);
+	SYS_ACCESS			= (SYS_SYSCALL_BASE + 33);
+	SYS_NICE			= (SYS_SYSCALL_BASE + 34);
+	SYS_SYNC			= (SYS_SYSCALL_BASE + 36);
+	SYS_KILL			= (SYS_SYSCALL_BASE + 37);
+	SYS_RENAME			= (SYS_SYSCALL_BASE + 38);
+	SYS_MKDIR			= (SYS_SYSCALL_BASE + 39);
+	SYS_RMDIR			= (SYS_SYSCALL_BASE + 40);
+	SYS_DUP				= (SYS_SYSCALL_BASE + 41);
+	SYS_PIPE			= (SYS_SYSCALL_BASE + 42);
+	SYS_TIMES			= (SYS_SYSCALL_BASE + 43);
+	SYS_BRK				= (SYS_SYSCALL_BASE + 45);
+	SYS_SETGID			= (SYS_SYSCALL_BASE + 46);
+	SYS_GETGID			= (SYS_SYSCALL_BASE + 47);
+	SYS_GETEUID			= (SYS_SYSCALL_BASE + 49);
+	SYS_GETEGID			= (SYS_SYSCALL_BASE + 50);
+	SYS_ACCT			= (SYS_SYSCALL_BASE + 51);
+	SYS_UMOUNT2			= (SYS_SYSCALL_BASE + 52);
+	SYS_IOCTL			= (SYS_SYSCALL_BASE + 54);
+	SYS_FCNTL			= (SYS_SYSCALL_BASE + 55);
+	SYS_SETPGID			= (SYS_SYSCALL_BASE + 57);
+	SYS_UMASK			= (SYS_SYSCALL_BASE + 60);
+	SYS_CHROOT			= (SYS_SYSCALL_BASE + 61);
+	SYS_USTAT			= (SYS_SYSCALL_BASE + 62);
+	SYS_DUP2			= (SYS_SYSCALL_BASE + 63);
+	SYS_GETPPID			= (SYS_SYSCALL_BASE + 64);
+	SYS_GETPGRP			= (SYS_SYSCALL_BASE + 65);
+	SYS_SETSID			= (SYS_SYSCALL_BASE + 66);
+	SYS_SIGACTION			= (SYS_SYSCALL_BASE + 67);
+	SYS_SETREUID			= (SYS_SYSCALL_BASE + 70);
+	SYS_SETREGID			= (SYS_SYSCALL_BASE + 71);
+	SYS_SIGSUSPEND			= (SYS_SYSCALL_BASE + 72);
+	SYS_SIGPENDING			= (SYS_SYSCALL_BASE + 73);
+	SYS_SETHOSTNAME			= (SYS_SYSCALL_BASE + 74);
+	SYS_SETRLIMIT			= (SYS_SYSCALL_BASE + 75);
+	SYS_GETRLIMIT			= (SYS_SYSCALL_BASE + 76);
+	SYS_GETRUSAGE			= (SYS_SYSCALL_BASE + 77);
+	SYS_GETTIMEOFDAY		= (SYS_SYSCALL_BASE + 78);
+	SYS_SETTIMEOFDAY		= (SYS_SYSCALL_BASE + 79);
+	SYS_GETGROUPS			= (SYS_SYSCALL_BASE + 80);
+	SYS_SETGROUPS			= (SYS_SYSCALL_BASE + 81);
+	SYS_SELECT			= (SYS_SYSCALL_BASE + 82);
+	SYS_SYMLINK			= (SYS_SYSCALL_BASE + 83);
+	SYS_READLINK			= (SYS_SYSCALL_BASE + 85);
+	SYS_USELIB			= (SYS_SYSCALL_BASE + 86);
+	SYS_SWAPON			= (SYS_SYSCALL_BASE + 87);
+	SYS_REBOOT			= (SYS_SYSCALL_BASE + 88);
+	SYS_READDIR			= (SYS_SYSCALL_BASE + 89);
+	SYS_MMAP			= (SYS_SYSCALL_BASE + 90);
+	SYS_MUNMAP			= (SYS_SYSCALL_BASE + 91);
+	SYS_TRUNCATE			= (SYS_SYSCALL_BASE + 92);
+	SYS_FTRUNCATE			= (SYS_SYSCALL_BASE + 93);
+	SYS_FCHMOD			= (SYS_SYSCALL_BASE + 94);
+	SYS_FCHOWN			= (SYS_SYSCALL_BASE + 95);
+	SYS_GETPRIORITY			= (SYS_SYSCALL_BASE + 96);
+	SYS_SETPRIORITY			= (SYS_SYSCALL_BASE + 97);
+	SYS_STATFS			= (SYS_SYSCALL_BASE + 99);
+	SYS_FSTATFS			= (SYS_SYSCALL_BASE + 100);
+	SYS_SOCKETCALL			= (SYS_SYSCALL_BASE + 102);
+	SYS_SYSLOG			= (SYS_SYSCALL_BASE + 103);
+	SYS_SETITIMER			= (SYS_SYSCALL_BASE + 104);
+	SYS_GETITIMER			= (SYS_SYSCALL_BASE + 105);
+	SYS_STAT			= (SYS_SYSCALL_BASE + 106);
+	SYS_LSTAT			= (SYS_SYSCALL_BASE + 107);
+	SYS_FSTAT			= (SYS_SYSCALL_BASE + 108);
+	SYS_VHANGUP			= (SYS_SYSCALL_BASE + 111);
+	SYS_SYSCALL			= (SYS_SYSCALL_BASE + 113);
+	SYS_WAIT4			= (SYS_SYSCALL_BASE + 114);
+	SYS_SWAPOFF			= (SYS_SYSCALL_BASE + 115);
+	SYS_SYSINFO			= (SYS_SYSCALL_BASE + 116);
+	SYS_IPC				= (SYS_SYSCALL_BASE + 117);
+	SYS_FSYNC			= (SYS_SYSCALL_BASE + 118);
+	SYS_SIGRETURN			= (SYS_SYSCALL_BASE + 119);
+	SYS_CLONE			= (SYS_SYSCALL_BASE + 120);
+	SYS_SETDOMAINNAME		= (SYS_SYSCALL_BASE + 121);
+	SYS_UNAME			= (SYS_SYSCALL_BASE + 122);
+	SYS_ADJTIMEX			= (SYS_SYSCALL_BASE + 124);
+	SYS_MPROTECT			= (SYS_SYSCALL_BASE + 125);
+	SYS_SIGPROCMASK			= (SYS_SYSCALL_BASE + 126);
+	SYS_INIT_MODULE			= (SYS_SYSCALL_BASE + 128);
+	SYS_DELETE_MODULE		= (SYS_SYSCALL_BASE + 129);
+	SYS_QUOTACTL			= (SYS_SYSCALL_BASE + 131);
+	SYS_GETPGID			= (SYS_SYSCALL_BASE + 132);
+	SYS_FCHDIR			= (SYS_SYSCALL_BASE + 133);
+	SYS_BDFLUSH			= (SYS_SYSCALL_BASE + 134);
+	SYS_SYSFS			= (SYS_SYSCALL_BASE + 135);
+	SYS_PERSONALITY			= (SYS_SYSCALL_BASE + 136);
+	SYS_SETFSUID			= (SYS_SYSCALL_BASE + 138);
+	SYS_SETFSGID			= (SYS_SYSCALL_BASE + 139);
+	SYS__LLSEEK			= (SYS_SYSCALL_BASE + 140);
+	SYS_GETDENTS			= (SYS_SYSCALL_BASE + 141);
+	SYS__NEWSELECT			= (SYS_SYSCALL_BASE + 142);
+	SYS_FLOCK			= (SYS_SYSCALL_BASE + 143);
+	SYS_MSYNC			= (SYS_SYSCALL_BASE + 144);
+	SYS_READV			= (SYS_SYSCALL_BASE + 145);
+	SYS_WRITEV			= (SYS_SYSCALL_BASE + 146);
+	SYS_GETSID			= (SYS_SYSCALL_BASE + 147);
+	SYS_FDATASYNC			= (SYS_SYSCALL_BASE + 148);
+	SYS__SYSCTL			= (SYS_SYSCALL_BASE + 149);
+	SYS_MLOCK			= (SYS_SYSCALL_BASE + 150);
+	SYS_MUNLOCK			= (SYS_SYSCALL_BASE + 151);
+	SYS_MLOCKALL			= (SYS_SYSCALL_BASE + 152);
+	SYS_MUNLOCKALL			= (SYS_SYSCALL_BASE + 153);
+	SYS_SCHED_SETPARAM		= (SYS_SYSCALL_BASE + 154);
+	SYS_SCHED_GETPARAM		= (SYS_SYSCALL_BASE + 155);
+	SYS_SCHED_SETSCHEDULER		= (SYS_SYSCALL_BASE + 156);
+	SYS_SCHED_GETSCHEDULER		= (SYS_SYSCALL_BASE + 157);
+	SYS_SCHED_YIELD			= (SYS_SYSCALL_BASE + 158);
+	SYS_SCHED_GET_PRIORITY_MAX	= (SYS_SYSCALL_BASE + 159);
+	SYS_SCHED_GET_PRIORITY_MIN	= (SYS_SYSCALL_BASE + 160);
+	SYS_SCHED_RR_GET_INTERVAL	= (SYS_SYSCALL_BASE + 161);
+	SYS_NANOSLEEP			= (SYS_SYSCALL_BASE + 162);
+	SYS_MREMAP			= (SYS_SYSCALL_BASE + 163);
+	SYS_SETRESUID			= (SYS_SYSCALL_BASE + 164);
+	SYS_GETRESUID			= (SYS_SYSCALL_BASE + 165);
+	SYS_POLL			= (SYS_SYSCALL_BASE + 168);
+	SYS_NFSSERVCTL			= (SYS_SYSCALL_BASE + 169);
+	SYS_SETRESGID			= (SYS_SYSCALL_BASE + 170);
+	SYS_GETRESGID			= (SYS_SYSCALL_BASE + 171);
+	SYS_PRCTL			= (SYS_SYSCALL_BASE + 172);
+	SYS_RT_SIGRETURN		= (SYS_SYSCALL_BASE + 173);
+	SYS_RT_SIGACTION		= (SYS_SYSCALL_BASE + 174);
+	SYS_RT_SIGPROCMASK		= (SYS_SYSCALL_BASE + 175);
+	SYS_RT_SIGPENDING		= (SYS_SYSCALL_BASE + 176);
+	SYS_RT_SIGTIMEDWAIT		= (SYS_SYSCALL_BASE + 177);
+	SYS_RT_SIGQUEUEINFO		= (SYS_SYSCALL_BASE + 178);
+	SYS_RT_SIGSUSPEND		= (SYS_SYSCALL_BASE + 179);
+	SYS_PREAD64			= (SYS_SYSCALL_BASE + 180);
+	SYS_PWRITE64			= (SYS_SYSCALL_BASE + 181);
+	SYS_CHOWN			= (SYS_SYSCALL_BASE + 182);
+	SYS_GETCWD			= (SYS_SYSCALL_BASE + 183);
+	SYS_CAPGET			= (SYS_SYSCALL_BASE + 184);
+	SYS_CAPSET			= (SYS_SYSCALL_BASE + 185);
+	SYS_SIGALTSTACK			= (SYS_SYSCALL_BASE + 186);
+	SYS_SENDFILE			= (SYS_SYSCALL_BASE + 187);
+	SYS_VFORK			= (SYS_SYSCALL_BASE + 190);
+	SYS_UGETRLIMIT			= (SYS_SYSCALL_BASE + 191);
+	SYS_MMAP2			= (SYS_SYSCALL_BASE + 192);
+	SYS_TRUNCATE64			= (SYS_SYSCALL_BASE + 193);
+	SYS_FTRUNCATE64			= (SYS_SYSCALL_BASE + 194);
+	SYS_STAT64			= (SYS_SYSCALL_BASE + 195);
+	SYS_LSTAT64			= (SYS_SYSCALL_BASE + 196);
+	SYS_FSTAT64			= (SYS_SYSCALL_BASE + 197);
+	SYS_LCHOWN32			= (SYS_SYSCALL_BASE + 198);
+	SYS_GETUID32			= (SYS_SYSCALL_BASE + 199);
+	SYS_GETGID32			= (SYS_SYSCALL_BASE + 200);
+	SYS_GETEUID32			= (SYS_SYSCALL_BASE + 201);
+	SYS_GETEGID32			= (SYS_SYSCALL_BASE + 202);
+	SYS_SETREUID32			= (SYS_SYSCALL_BASE + 203);
+	SYS_SETREGID32			= (SYS_SYSCALL_BASE + 204);
+	SYS_GETGROUPS32			= (SYS_SYSCALL_BASE + 205);
+	SYS_SETGROUPS32			= (SYS_SYSCALL_BASE + 206);
+	SYS_FCHOWN32			= (SYS_SYSCALL_BASE + 207);
+	SYS_SETRESUID32			= (SYS_SYSCALL_BASE + 208);
+	SYS_GETRESUID32			= (SYS_SYSCALL_BASE + 209);
+	SYS_SETRESGID32			= (SYS_SYSCALL_BASE + 210);
+	SYS_GETRESGID32			= (SYS_SYSCALL_BASE + 211);
+	SYS_CHOWN32			= (SYS_SYSCALL_BASE + 212);
+	SYS_SETUID32			= (SYS_SYSCALL_BASE + 213);
+	SYS_SETGID32			= (SYS_SYSCALL_BASE + 214);
+	SYS_SETFSUID32			= (SYS_SYSCALL_BASE + 215);
+	SYS_SETFSGID32			= (SYS_SYSCALL_BASE + 216);
+	SYS_GETDENTS64			= (SYS_SYSCALL_BASE + 217);
+	SYS_PIVOT_ROOT			= (SYS_SYSCALL_BASE + 218);
+	SYS_MINCORE			= (SYS_SYSCALL_BASE + 219);
+	SYS_MADVISE			= (SYS_SYSCALL_BASE + 220);
+	SYS_FCNTL64			= (SYS_SYSCALL_BASE + 221);
+	SYS_GETTID			= (SYS_SYSCALL_BASE + 224);
+	SYS_READAHEAD			= (SYS_SYSCALL_BASE + 225);
+	SYS_SETXATTR			= (SYS_SYSCALL_BASE + 226);
+	SYS_LSETXATTR			= (SYS_SYSCALL_BASE + 227);
+	SYS_FSETXATTR			= (SYS_SYSCALL_BASE + 228);
+	SYS_GETXATTR			= (SYS_SYSCALL_BASE + 229);
+	SYS_LGETXATTR			= (SYS_SYSCALL_BASE + 230);
+	SYS_FGETXATTR			= (SYS_SYSCALL_BASE + 231);
+	SYS_LISTXATTR			= (SYS_SYSCALL_BASE + 232);
+	SYS_LLISTXATTR			= (SYS_SYSCALL_BASE + 233);
+	SYS_FLISTXATTR			= (SYS_SYSCALL_BASE + 234);
+	SYS_REMOVEXATTR			= (SYS_SYSCALL_BASE + 235);
+	SYS_LREMOVEXATTR		= (SYS_SYSCALL_BASE + 236);
+	SYS_FREMOVEXATTR		= (SYS_SYSCALL_BASE + 237);
+	SYS_TKILL			= (SYS_SYSCALL_BASE + 238);
+	SYS_SENDFILE64			= (SYS_SYSCALL_BASE + 239);
+	SYS_FUTEX			= (SYS_SYSCALL_BASE + 240);
+	SYS_SCHED_SETAFFINITY		= (SYS_SYSCALL_BASE + 241);
+	SYS_SCHED_GETAFFINITY		= (SYS_SYSCALL_BASE + 242);
+	SYS_IO_SETUP			= (SYS_SYSCALL_BASE + 243);
+	SYS_IO_DESTROY			= (SYS_SYSCALL_BASE + 244);
+	SYS_IO_GETEVENTS		= (SYS_SYSCALL_BASE + 245);
+	SYS_IO_SUBMIT			= (SYS_SYSCALL_BASE + 246);
+	SYS_IO_CANCEL			= (SYS_SYSCALL_BASE + 247);
+	SYS_EXIT_GROUP			= (SYS_SYSCALL_BASE + 248);
+	SYS_LOOKUP_DCOOKIE		= (SYS_SYSCALL_BASE + 249);
+	SYS_EPOLL_CREATE		= (SYS_SYSCALL_BASE + 250);
+	SYS_EPOLL_CTL			= (SYS_SYSCALL_BASE + 251);
+	SYS_EPOLL_WAIT			= (SYS_SYSCALL_BASE + 252);
+	SYS_REMAP_FILE_PAGES		= (SYS_SYSCALL_BASE + 253);
+	SYS_SET_TID_ADDRESS		= (SYS_SYSCALL_BASE + 256);
+	SYS_TIMER_CREATE		= (SYS_SYSCALL_BASE + 257);
+	SYS_TIMER_SETTIME		= (SYS_SYSCALL_BASE + 258);
+	SYS_TIMER_GETTIME		= (SYS_SYSCALL_BASE + 259);
+	SYS_TIMER_GETOVERRUN		= (SYS_SYSCALL_BASE + 260);
+	SYS_TIMER_DELETE		= (SYS_SYSCALL_BASE + 261);
+	SYS_CLOCK_SETTIME		= (SYS_SYSCALL_BASE + 262);
+	SYS_CLOCK_GETTIME		= (SYS_SYSCALL_BASE + 263);
+	SYS_CLOCK_GETRES		= (SYS_SYSCALL_BASE + 264);
+	SYS_CLOCK_NANOSLEEP		= (SYS_SYSCALL_BASE + 265);
+	SYS_STATFS64			= (SYS_SYSCALL_BASE + 266);
+	SYS_FSTATFS64			= (SYS_SYSCALL_BASE + 267);
+	SYS_TGKILL			= (SYS_SYSCALL_BASE + 268);
+	SYS_UTIMES			= (SYS_SYSCALL_BASE + 269);
+	SYS_ARM_FADVISE64_64		= (SYS_SYSCALL_BASE + 270);
+	SYS_PCICONFIG_IOBASE		= (SYS_SYSCALL_BASE + 271);
+	SYS_PCICONFIG_READ		= (SYS_SYSCALL_BASE + 272);
+	SYS_PCICONFIG_WRITE		= (SYS_SYSCALL_BASE + 273);
+	SYS_MQ_OPEN			= (SYS_SYSCALL_BASE + 274);
+	SYS_MQ_UNLINK			= (SYS_SYSCALL_BASE + 275);
+	SYS_MQ_TIMEDSEND		= (SYS_SYSCALL_BASE + 276);
+	SYS_MQ_TIMEDRECEIVE		= (SYS_SYSCALL_BASE + 277);
+	SYS_MQ_NOTIFY			= (SYS_SYSCALL_BASE + 278);
+	SYS_MQ_GETSETATTR		= (SYS_SYSCALL_BASE + 279);
+	SYS_WAITID			= (SYS_SYSCALL_BASE + 280);
+	SYS_SOCKET			= (SYS_SYSCALL_BASE + 281);
+	SYS_BIND			= (SYS_SYSCALL_BASE + 282);
+	SYS_CONNECT			= (SYS_SYSCALL_BASE + 283);
+	SYS_LISTEN			= (SYS_SYSCALL_BASE + 284);
+	SYS_ACCEPT			= (SYS_SYSCALL_BASE + 285);
+	SYS_GETSOCKNAME			= (SYS_SYSCALL_BASE + 286);
+	SYS_GETPEERNAME			= (SYS_SYSCALL_BASE + 287);
+	SYS_SOCKETPAIR			= (SYS_SYSCALL_BASE + 288);
+	SYS_SEND			= (SYS_SYSCALL_BASE + 289);
+	SYS_SENDTO			= (SYS_SYSCALL_BASE + 290);
+	SYS_RECV			= (SYS_SYSCALL_BASE + 291);
+	SYS_RECVFROM			= (SYS_SYSCALL_BASE + 292);
+	SYS_SHUTDOWN			= (SYS_SYSCALL_BASE + 293);
+	SYS_SETSOCKOPT			= (SYS_SYSCALL_BASE + 294);
+	SYS_GETSOCKOPT			= (SYS_SYSCALL_BASE + 295);
+	SYS_SENDMSG			= (SYS_SYSCALL_BASE + 296);
+	SYS_RECVMSG			= (SYS_SYSCALL_BASE + 297);
+	SYS_SEMOP			= (SYS_SYSCALL_BASE + 298);
+	SYS_SEMGET			= (SYS_SYSCALL_BASE + 299);
+	SYS_SEMCTL			= (SYS_SYSCALL_BASE + 300);
+	SYS_MSGSND			= (SYS_SYSCALL_BASE + 301);
+	SYS_MSGRCV			= (SYS_SYSCALL_BASE + 302);
+	SYS_MSGGET			= (SYS_SYSCALL_BASE + 303);
+	SYS_MSGCTL			= (SYS_SYSCALL_BASE + 304);
+	SYS_SHMAT			= (SYS_SYSCALL_BASE + 305);
+	SYS_SHMDT			= (SYS_SYSCALL_BASE + 306);
+	SYS_SHMGET			= (SYS_SYSCALL_BASE + 307);
+	SYS_SHMCTL			= (SYS_SYSCALL_BASE + 308);
+	SYS_ADD_KEY			= (SYS_SYSCALL_BASE + 309);
+	SYS_REQUEST_KEY			= (SYS_SYSCALL_BASE + 310);
+	SYS_KEYCTL			= (SYS_SYSCALL_BASE + 311);
+	SYS_SEMTIMEDOP			= (SYS_SYSCALL_BASE + 312);
+	SYS_VSERVER			= (SYS_SYSCALL_BASE + 313);
+	SYS_IOPRIO_SET			= (SYS_SYSCALL_BASE + 314);
+	SYS_IOPRIO_GET			= (SYS_SYSCALL_BASE + 315);
+	SYS_INOTIFY_INIT		= (SYS_SYSCALL_BASE + 316);
+	SYS_INOTIFY_ADD_WATCH		= (SYS_SYSCALL_BASE + 317);
+	SYS_INOTIFY_RM_WATCH		= (SYS_SYSCALL_BASE + 318);
+	SYS_MBIND			= (SYS_SYSCALL_BASE + 319);
+	SYS_GET_MEMPOLICY		= (SYS_SYSCALL_BASE + 320);
+	SYS_SET_MEMPOLICY		= (SYS_SYSCALL_BASE + 321);
+	SYS_OPENAT			= (SYS_SYSCALL_BASE + 322);
+	SYS_MKDIRAT			= (SYS_SYSCALL_BASE + 323);
+	SYS_MKNODAT			= (SYS_SYSCALL_BASE + 324);
+	SYS_FCHOWNAT			= (SYS_SYSCALL_BASE + 325);
+	SYS_FUTIMESAT			= (SYS_SYSCALL_BASE + 326);
+	SYS_FSTATAT64			= (SYS_SYSCALL_BASE + 327);
+	SYS_UNLINKAT			= (SYS_SYSCALL_BASE + 328);
+	SYS_RENAMEAT			= (SYS_SYSCALL_BASE + 329);
+	SYS_LINKAT			= (SYS_SYSCALL_BASE + 330);
+	SYS_SYMLINKAT			= (SYS_SYSCALL_BASE + 331);
+	SYS_READLINKAT			= (SYS_SYSCALL_BASE + 332);
+	SYS_FCHMODAT			= (SYS_SYSCALL_BASE + 333);
+	SYS_FACCESSAT			= (SYS_SYSCALL_BASE + 334);
+	SYS_UNSHARE			= (SYS_SYSCALL_BASE + 337);
+	SYS_SET_ROBUST_LIST		= (SYS_SYSCALL_BASE + 338);
+	SYS_GET_ROBUST_LIST		= (SYS_SYSCALL_BASE + 339);
+	SYS_SPLICE			= (SYS_SYSCALL_BASE + 340);
+	SYS_ARM_SYNC_FILE_RANGE		= (SYS_SYSCALL_BASE + 341);
+	SYS_SYNC_FILE_RANGE2		= SYS_ARM_SYNC_FILE_RANGE;
+	SYS_TEE				= (SYS_SYSCALL_BASE + 342);
+	SYS_VMSPLICE			= (SYS_SYSCALL_BASE + 343);
+	SYS_MOVE_PAGES			= (SYS_SYSCALL_BASE + 344);
+	SYS_GETCPU			= (SYS_SYSCALL_BASE + 345);
+	SYS_KEXEC_LOAD			= (SYS_SYSCALL_BASE + 347);
+	SYS_UTIMENSAT			= (SYS_SYSCALL_BASE + 348);
+	SYS_SIGNALFD			= (SYS_SYSCALL_BASE + 349);
+	SYS_TIMERFD_CREATE		= (SYS_SYSCALL_BASE + 350);
+	SYS_EVENTFD			= (SYS_SYSCALL_BASE + 351);
+	SYS_FALLOCATE			= (SYS_SYSCALL_BASE + 352);
+	SYS_TIMERFD_SETTIME		= (SYS_SYSCALL_BASE + 353);
+	SYS_TIMERFD_GETTIME		= (SYS_SYSCALL_BASE + 354);
+	SYS_SIGNALFD4			= (SYS_SYSCALL_BASE + 355);
+	SYS_EVENTFD2			= (SYS_SYSCALL_BASE + 356);
+	SYS_EPOLL_CREATE1		= (SYS_SYSCALL_BASE + 357);
+	SYS_DUP3			= (SYS_SYSCALL_BASE + 358);
+	SYS_PIPE2			= (SYS_SYSCALL_BASE + 359);
+	SYS_INOTIFY_INIT1		= (SYS_SYSCALL_BASE + 360);
 )
 
-func _darwin_system_call_conflict() {
-}
+func _darwin_system_call_conflict() {}
diff --git a/src/pkg/syscall/zsysnum_nacl_386.go b/src/pkg/syscall/zsysnum_nacl_386.go
index 6b1a3a9900..d41cfec779 100644
--- a/src/pkg/syscall/zsysnum_nacl_386.go
+++ b/src/pkg/syscall/zsysnum_nacl_386.go
@@ -3,60 +3,59 @@
 
 package syscall
 
-const(
-	SYS_NULL = 1;
-	SYS_OPEN = 10;
-	SYS_CLOSE = 11;
-	SYS_READ = 12;
-	SYS_WRITE = 13;
-	SYS_LSEEK = 14;
-	SYS_IOCTL = 15;
-	SYS_STAT = 16;
-	SYS_FSTAT = 17;
-	SYS_CHMOD = 18;
-	SYS_SYSBRK = 20;
-	SYS_MMAP = 21;
-	SYS_MUNMAP = 22;
-	SYS_GETDENTS = 23;
-	SYS_EXIT = 30;
-	SYS_GETPID = 31;
-	SYS_SCHED_YIELD = 32;
-	SYS_SYSCONF = 33;
-	SYS_GETTIMEOFDAY = 40;
-	SYS_CLOCK = 41;
-	SYS_MULTIMEDIA_INIT = 50;
-	SYS_MULTIMEDIA_SHUTDOWN = 51;
-	SYS_VIDEO_INIT = 52;
-	SYS_VIDEO_SHUTDOWN = 53;
-	SYS_VIDEO_UPDATE = 54;
-	SYS_VIDEO_POLL_EVENT = 55;
-	SYS_AUDIO_INIT = 56;
-	SYS_AUDIO_SHUTDOWN = 57;
-	SYS_AUDIO_STREAM = 58;
-	SYS_IMC_MAKEBOUNDSOCK = 60;
-	SYS_IMC_ACCEPT = 61;
-	SYS_IMC_CONNECT = 62;
-	SYS_IMC_SENDMSG = 63;
-	SYS_IMC_RECVMSG = 64;
-	SYS_IMC_MEM_OBJ_CREATE = 65;
-	SYS_IMC_SOCKETPAIR = 66;
-	SYS_MUTEX_CREATE = 70;
-	SYS_MUTEX_LOCK = 71;
-	SYS_MUTEX_TRYLOCK = 72;
-	SYS_MUTEX_UNLOCK = 73;
-	SYS_COND_CREATE = 74;
-	SYS_COND_WAIT = 75;
-	SYS_COND_SIGNAL = 76;
-	SYS_COND_BROADCAST = 77;
-	SYS_COND_TIMED_WAIT_ABS = 79;
-	SYS_THREAD_CREATE = 80;
-	SYS_THREAD_EXIT = 81;
-	SYS_TLS_INIT = 82;
-	SYS_THREAD_NICE = 83;
-	SYS_SRPC_GET_FD = 90;
-	SYS_SEM_CREATE = 100;
-	SYS_SEM_WAIT = 101;
-	SYS_SEM_POST = 102;
-	SYS_SEM_GET_VALUE = 103;
+const (
+	SYS_NULL		= 1;
+	SYS_OPEN		= 10;
+	SYS_CLOSE		= 11;
+	SYS_READ		= 12;
+	SYS_WRITE		= 13;
+	SYS_LSEEK		= 14;
+	SYS_IOCTL		= 15;
+	SYS_STAT		= 16;
+	SYS_FSTAT		= 17;
+	SYS_CHMOD		= 18;
+	SYS_SYSBRK		= 20;
+	SYS_MMAP		= 21;
+	SYS_MUNMAP		= 22;
+	SYS_GETDENTS		= 23;
+	SYS_EXIT		= 30;
+	SYS_GETPID		= 31;
+	SYS_SCHED_YIELD		= 32;
+	SYS_SYSCONF		= 33;
+	SYS_GETTIMEOFDAY	= 40;
+	SYS_CLOCK		= 41;
+	SYS_MULTIMEDIA_INIT	= 50;
+	SYS_MULTIMEDIA_SHUTDOWN	= 51;
+	SYS_VIDEO_INIT		= 52;
+	SYS_VIDEO_SHUTDOWN	= 53;
+	SYS_VIDEO_UPDATE	= 54;
+	SYS_VIDEO_POLL_EVENT	= 55;
+	SYS_AUDIO_INIT		= 56;
+	SYS_AUDIO_SHUTDOWN	= 57;
+	SYS_AUDIO_STREAM	= 58;
+	SYS_IMC_MAKEBOUNDSOCK	= 60;
+	SYS_IMC_ACCEPT		= 61;
+	SYS_IMC_CONNECT		= 62;
+	SYS_IMC_SENDMSG		= 63;
+	SYS_IMC_RECVMSG		= 64;
+	SYS_IMC_MEM_OBJ_CREATE	= 65;
+	SYS_IMC_SOCKETPAIR	= 66;
+	SYS_MUTEX_CREATE	= 70;
+	SYS_MUTEX_LOCK		= 71;
+	SYS_MUTEX_TRYLOCK	= 72;
+	SYS_MUTEX_UNLOCK	= 73;
+	SYS_COND_CREATE		= 74;
+	SYS_COND_WAIT		= 75;
+	SYS_COND_SIGNAL		= 76;
+	SYS_COND_BROADCAST	= 77;
+	SYS_COND_TIMED_WAIT_ABS	= 79;
+	SYS_THREAD_CREATE	= 80;
+	SYS_THREAD_EXIT		= 81;
+	SYS_TLS_INIT		= 82;
+	SYS_THREAD_NICE		= 83;
+	SYS_SRPC_GET_FD		= 90;
+	SYS_SEM_CREATE		= 100;
+	SYS_SEM_WAIT		= 101;
+	SYS_SEM_POST		= 102;
+	SYS_SEM_GET_VALUE	= 103;
 )
-
diff --git a/src/pkg/syscall/ztypes_darwin_386.go b/src/pkg/syscall/ztypes_darwin_386.go
index a3fad0da7e..c5f837c91f 100644
--- a/src/pkg/syscall/ztypes_darwin_386.go
+++ b/src/pkg/syscall/ztypes_darwin_386.go
@@ -6,102 +6,102 @@ package syscall
 
 // Constants
 const (
-	sizeofPtr = 0x4;
-	sizeofShort = 0x2;
-	sizeofInt = 0x4;
-	sizeofLong = 0x4;
-	sizeofLongLong = 0x8;
-	O_RDONLY = 0;
-	O_WRONLY = 0x1;
-	O_RDWR = 0x2;
-	O_APPEND = 0x8;
-	O_ASYNC = 0x40;
-	O_CREAT = 0x200;
-	O_NOCTTY = 0x20000;
-	O_NONBLOCK = 0x4;
-	O_SYNC = 0x80;
-	O_TRUNC = 0x400;
-	O_CLOEXEC = 0;
-	F_GETFD = 0x1;
-	F_SETFD = 0x2;
-	F_GETFL = 0x3;
-	F_SETFL = 0x4;
-	FD_CLOEXEC = 0x1;
-	NAME_MAX = 0xff;
-	S_IFMT = 0xf000;
-	S_IFIFO = 0x1000;
-	S_IFCHR = 0x2000;
-	S_IFDIR = 0x4000;
-	S_IFBLK = 0x6000;
-	S_IFREG = 0x8000;
-	S_IFLNK = 0xa000;
-	S_IFSOCK = 0xc000;
-	S_IFWHT = 0xe000;
-	S_ISUID = 0x800;
-	S_ISGID = 0x400;
-	S_ISVTX = 0x200;
-	S_IRUSR = 0x100;
-	S_IWUSR = 0x80;
-	S_IXUSR = 0x40;
-	WNOHANG = 0x1;
-	WUNTRACED = 0x2;
-	WEXITED = 0x4;
-	WSTOPPED = 0x7f;
-	WCONTINUED = 0x10;
-	WNOWAIT = 0x20;
-	AF_UNIX = 0x1;
-	AF_INET = 0x2;
-	AF_DATAKIT = 0x9;
-	AF_INET6 = 0x1e;
-	SOCK_STREAM = 0x1;
-	SOCK_DGRAM = 0x2;
-	SOCK_RAW = 0x3;
-	SOCK_SEQPACKET = 0x5;
-	SOL_SOCKET = 0xffff;
-	SO_REUSEADDR = 0x4;
-	SO_KEEPALIVE = 0x8;
-	SO_DONTROUTE = 0x10;
-	SO_BROADCAST = 0x20;
-	SO_USELOOPBACK = 0x40;
-	SO_LINGER = 0x80;
-	SO_REUSEPORT = 0x200;
-	SO_SNDBUF = 0x1001;
-	SO_RCVBUF = 0x1002;
-	SO_SNDTIMEO = 0x1005;
-	SO_RCVTIMEO = 0x1006;
-	SO_NOSIGPIPE = 0x1022;
-	IPPROTO_TCP = 0x6;
-	IPPROTO_UDP = 0x11;
-	TCP_NODELAY = 0x1;
-	SOMAXCONN = 0x80;
-	SizeofSockaddrInet4 = 0x10;
-	SizeofSockaddrInet6 = 0x1c;
-	SizeofSockaddrAny = 0x1c;
-	SizeofSockaddrUnix = 0x6a;
-	_PTRACE_TRACEME = 0;
-	_PTRACE_CONT = 0x7;
-	_PTRACE_KILL = 0x8;
-	EVFILT_READ = -0x1;
-	EVFILT_WRITE = -0x2;
-	EVFILT_AIO = -0x3;
-	EVFILT_VNODE = -0x4;
-	EVFILT_PROC = -0x5;
-	EVFILT_SIGNAL = -0x6;
-	EVFILT_TIMER = -0x7;
-	EVFILT_MACHPORT = -0x8;
-	EVFILT_FS = -0x9;
-	EVFILT_SYSCOUNT = 0x9;
-	EV_ADD = 0x1;
-	EV_DELETE = 0x2;
-	EV_DISABLE = 0x8;
-	EV_RECEIPT = 0x40;
-	EV_ONESHOT = 0x10;
-	EV_CLEAR = 0x20;
-	EV_SYSFLAGS = 0xf000;
-	EV_FLAG0 = 0x1000;
-	EV_FLAG1 = 0x2000;
-	EV_EOF = 0x8000;
-	EV_ERROR = 0x4000;
+	sizeofPtr		= 0x4;
+	sizeofShort		= 0x2;
+	sizeofInt		= 0x4;
+	sizeofLong		= 0x4;
+	sizeofLongLong		= 0x8;
+	O_RDONLY		= 0;
+	O_WRONLY		= 0x1;
+	O_RDWR			= 0x2;
+	O_APPEND		= 0x8;
+	O_ASYNC			= 0x40;
+	O_CREAT			= 0x200;
+	O_NOCTTY		= 0x20000;
+	O_NONBLOCK		= 0x4;
+	O_SYNC			= 0x80;
+	O_TRUNC			= 0x400;
+	O_CLOEXEC		= 0;
+	F_GETFD			= 0x1;
+	F_SETFD			= 0x2;
+	F_GETFL			= 0x3;
+	F_SETFL			= 0x4;
+	FD_CLOEXEC		= 0x1;
+	NAME_MAX		= 0xff;
+	S_IFMT			= 0xf000;
+	S_IFIFO			= 0x1000;
+	S_IFCHR			= 0x2000;
+	S_IFDIR			= 0x4000;
+	S_IFBLK			= 0x6000;
+	S_IFREG			= 0x8000;
+	S_IFLNK			= 0xa000;
+	S_IFSOCK		= 0xc000;
+	S_IFWHT			= 0xe000;
+	S_ISUID			= 0x800;
+	S_ISGID			= 0x400;
+	S_ISVTX			= 0x200;
+	S_IRUSR			= 0x100;
+	S_IWUSR			= 0x80;
+	S_IXUSR			= 0x40;
+	WNOHANG			= 0x1;
+	WUNTRACED		= 0x2;
+	WEXITED			= 0x4;
+	WSTOPPED		= 0x7f;
+	WCONTINUED		= 0x10;
+	WNOWAIT			= 0x20;
+	AF_UNIX			= 0x1;
+	AF_INET			= 0x2;
+	AF_DATAKIT		= 0x9;
+	AF_INET6		= 0x1e;
+	SOCK_STREAM		= 0x1;
+	SOCK_DGRAM		= 0x2;
+	SOCK_RAW		= 0x3;
+	SOCK_SEQPACKET		= 0x5;
+	SOL_SOCKET		= 0xffff;
+	SO_REUSEADDR		= 0x4;
+	SO_KEEPALIVE		= 0x8;
+	SO_DONTROUTE		= 0x10;
+	SO_BROADCAST		= 0x20;
+	SO_USELOOPBACK		= 0x40;
+	SO_LINGER		= 0x80;
+	SO_REUSEPORT		= 0x200;
+	SO_SNDBUF		= 0x1001;
+	SO_RCVBUF		= 0x1002;
+	SO_SNDTIMEO		= 0x1005;
+	SO_RCVTIMEO		= 0x1006;
+	SO_NOSIGPIPE		= 0x1022;
+	IPPROTO_TCP		= 0x6;
+	IPPROTO_UDP		= 0x11;
+	TCP_NODELAY		= 0x1;
+	SOMAXCONN		= 0x80;
+	SizeofSockaddrInet4	= 0x10;
+	SizeofSockaddrInet6	= 0x1c;
+	SizeofSockaddrAny	= 0x1c;
+	SizeofSockaddrUnix	= 0x6a;
+	_PTRACE_TRACEME		= 0;
+	_PTRACE_CONT		= 0x7;
+	_PTRACE_KILL		= 0x8;
+	EVFILT_READ		= -0x1;
+	EVFILT_WRITE		= -0x2;
+	EVFILT_AIO		= -0x3;
+	EVFILT_VNODE		= -0x4;
+	EVFILT_PROC		= -0x5;
+	EVFILT_SIGNAL		= -0x6;
+	EVFILT_TIMER		= -0x7;
+	EVFILT_MACHPORT		= -0x8;
+	EVFILT_FS		= -0x9;
+	EVFILT_SYSCOUNT		= 0x9;
+	EV_ADD			= 0x1;
+	EV_DELETE		= 0x2;
+	EV_DISABLE		= 0x8;
+	EV_RECEIPT		= 0x40;
+	EV_ONESHOT		= 0x10;
+	EV_CLEAR		= 0x20;
+	EV_SYSFLAGS		= 0xf000;
+	EV_FLAG0		= 0x1000;
+	EV_FLAG1		= 0x2000;
+	EV_EOF			= 0x8000;
+	EV_ERROR		= 0x4000;
 )
 
 // Types
@@ -115,139 +115,139 @@ type _C_long int32
 type _C_long_long int64
 
 type Timespec struct {
-	Sec int32;
-	Nsec int32;
+	Sec	int32;
+	Nsec	int32;
 }
 
 type Timeval struct {
-	Sec int32;
-	Usec int32;
+	Sec	int32;
+	Usec	int32;
 }
 
 type Rusage struct {
-	Utime Timeval;
-	Stime Timeval;
-	Maxrss int32;
-	Ixrss int32;
-	Idrss int32;
-	Isrss int32;
-	Minflt int32;
-	Majflt int32;
-	Nswap int32;
-	Inblock int32;
-	Oublock int32;
-	Msgsnd int32;
-	Msgrcv int32;
-	Nsignals int32;
-	Nvcsw int32;
-	Nivcsw int32;
+	Utime		Timeval;
+	Stime		Timeval;
+	Maxrss		int32;
+	Ixrss		int32;
+	Idrss		int32;
+	Isrss		int32;
+	Minflt		int32;
+	Majflt		int32;
+	Nswap		int32;
+	Inblock		int32;
+	Oublock		int32;
+	Msgsnd		int32;
+	Msgrcv		int32;
+	Nsignals	int32;
+	Nvcsw		int32;
+	Nivcsw		int32;
 }
 
 type Rlimit struct {
-	Cur uint64;
-	Max uint64;
+	Cur	uint64;
+	Max	uint64;
 }
 
 type _Gid_t uint32
 
 type Stat_t struct {
-	Dev int32;
-	Mode uint16;
-	Nlink uint16;
-	Ino uint64;
-	Uid uint32;
-	Gid uint32;
-	Rdev int32;
-	Atimespec Timespec;
-	Mtimespec Timespec;
-	Ctimespec Timespec;
-	Birthtimespec Timespec;
-	Size int64;
-	Blocks int64;
-	Blksize int32;
-	Flags uint32;
-	Gen uint32;
-	Lspare int32;
-	Qspare [2]int64;
+	Dev		int32;
+	Mode		uint16;
+	Nlink		uint16;
+	Ino		uint64;
+	Uid		uint32;
+	Gid		uint32;
+	Rdev		int32;
+	Atimespec	Timespec;
+	Mtimespec	Timespec;
+	Ctimespec	Timespec;
+	Birthtimespec	Timespec;
+	Size		int64;
+	Blocks		int64;
+	Blksize		int32;
+	Flags		uint32;
+	Gen		uint32;
+	Lspare		int32;
+	Qspare		[2]int64;
 }
 
 type Statfs_t struct {
-	Bsize uint32;
-	Iosize int32;
-	Blocks uint64;
-	Bfree uint64;
-	Bavail uint64;
-	Files uint64;
-	Ffree uint64;
-	Fsid [8]byte /* fsid */;
-	Owner uint32;
-	Type uint32;
-	Flags uint32;
-	Fssubtype uint32;
-	Fstypename [16]int8;
-	Mntonname [1024]int8;
-	Mntfromname [1024]int8;
-	Reserved [8]uint32;
+	Bsize		uint32;
+	Iosize		int32;
+	Blocks		uint64;
+	Bfree		uint64;
+	Bavail		uint64;
+	Files		uint64;
+	Ffree		uint64;
+	Fsid		[8]byte;	/* fsid */
+	Owner		uint32;
+	Type		uint32;
+	Flags		uint32;
+	Fssubtype	uint32;
+	Fstypename	[16]int8;
+	Mntonname	[1024]int8;
+	Mntfromname	[1024]int8;
+	Reserved	[8]uint32;
 }
 
 type Dirent struct {
-	Ino uint64;
-	Seekoff uint64;
-	Reclen uint16;
-	Namlen uint16;
-	Type uint8;
-	Name [1024]int8;
-	Pad0 [3]byte;
+	Ino	uint64;
+	Seekoff	uint64;
+	Reclen	uint16;
+	Namlen	uint16;
+	Type	uint8;
+	Name	[1024]int8;
+	Pad0	[3]byte;
 }
 
 type RawSockaddrInet4 struct {
-	Len uint8;
-	Family uint8;
-	Port uint16;
-	Addr [4]byte /* in_addr */;
-	Zero [8]int8;
+	Len	uint8;
+	Family	uint8;
+	Port	uint16;
+	Addr	[4]byte;	/* in_addr */
+	Zero	[8]int8;
 }
 
 type RawSockaddrInet6 struct {
-	Len uint8;
-	Family uint8;
-	Port uint16;
-	Flowinfo uint32;
-	Addr [16]byte /* in6_addr */;
-	Scope_id uint32;
+	Len		uint8;
+	Family		uint8;
+	Port		uint16;
+	Flowinfo	uint32;
+	Addr		[16]byte;	/* in6_addr */
+	Scope_id	uint32;
 }
 
 type RawSockaddrUnix struct {
-	Len uint8;
-	Family uint8;
-	Path [104]int8;
+	Len	uint8;
+	Family	uint8;
+	Path	[104]int8;
 }
 
 type RawSockaddr struct {
-	Len uint8;
-	Family uint8;
-	Data [14]int8;
+	Len	uint8;
+	Family	uint8;
+	Data	[14]int8;
 }
 
 type RawSockaddrAny struct {
-	Addr RawSockaddr;
-	Pad [12]int8;
+	Addr	RawSockaddr;
+	Pad	[12]int8;
 }
 
 type _Socklen uint32
 
 type Linger struct {
-	Onoff int32;
-	Linger int32;
+	Onoff	int32;
+	Linger	int32;
 }
 
 type Kevent_t struct {
-	Ident uint32;
-	Filter int16;
-	Flags uint16;
-	Fflags uint32;
-	Data int32;
-	Udata *byte;
+	Ident	uint32;
+	Filter	int16;
+	Flags	uint16;
+	Fflags	uint32;
+	Data	int32;
+	Udata	*byte;
 }
 
 type FdSet struct {
diff --git a/src/pkg/syscall/ztypes_darwin_amd64.go b/src/pkg/syscall/ztypes_darwin_amd64.go
index 2c888718c4..46a301f890 100644
--- a/src/pkg/syscall/ztypes_darwin_amd64.go
+++ b/src/pkg/syscall/ztypes_darwin_amd64.go
@@ -6,102 +6,102 @@ package syscall
 
 // Constants
 const (
-	sizeofPtr = 0x8;
-	sizeofShort = 0x2;
-	sizeofInt = 0x4;
-	sizeofLong = 0x8;
-	sizeofLongLong = 0x8;
-	O_RDONLY = 0;
-	O_WRONLY = 0x1;
-	O_RDWR = 0x2;
-	O_APPEND = 0x8;
-	O_ASYNC = 0x40;
-	O_CREAT = 0x200;
-	O_NOCTTY = 0x20000;
-	O_NONBLOCK = 0x4;
-	O_SYNC = 0x80;
-	O_TRUNC = 0x400;
-	O_CLOEXEC = 0;
-	F_GETFD = 0x1;
-	F_SETFD = 0x2;
-	F_GETFL = 0x3;
-	F_SETFL = 0x4;
-	FD_CLOEXEC = 0x1;
-	NAME_MAX = 0xff;
-	S_IFMT = 0xf000;
-	S_IFIFO = 0x1000;
-	S_IFCHR = 0x2000;
-	S_IFDIR = 0x4000;
-	S_IFBLK = 0x6000;
-	S_IFREG = 0x8000;
-	S_IFLNK = 0xa000;
-	S_IFSOCK = 0xc000;
-	S_IFWHT = 0xe000;
-	S_ISUID = 0x800;
-	S_ISGID = 0x400;
-	S_ISVTX = 0x200;
-	S_IRUSR = 0x100;
-	S_IWUSR = 0x80;
-	S_IXUSR = 0x40;
-	WNOHANG = 0x1;
-	WUNTRACED = 0x2;
-	WEXITED = 0x4;
-	WSTOPPED = 0x7f;
-	WCONTINUED = 0x10;
-	WNOWAIT = 0x20;
-	AF_UNIX = 0x1;
-	AF_INET = 0x2;
-	AF_DATAKIT = 0x9;
-	AF_INET6 = 0x1e;
-	SOCK_STREAM = 0x1;
-	SOCK_DGRAM = 0x2;
-	SOCK_RAW = 0x3;
-	SOCK_SEQPACKET = 0x5;
-	SOL_SOCKET = 0xffff;
-	SO_REUSEADDR = 0x4;
-	SO_KEEPALIVE = 0x8;
-	SO_DONTROUTE = 0x10;
-	SO_BROADCAST = 0x20;
-	SO_USELOOPBACK = 0x40;
-	SO_LINGER = 0x80;
-	SO_REUSEPORT = 0x200;
-	SO_SNDBUF = 0x1001;
-	SO_RCVBUF = 0x1002;
-	SO_SNDTIMEO = 0x1005;
-	SO_RCVTIMEO = 0x1006;
-	SO_NOSIGPIPE = 0x1022;
-	IPPROTO_TCP = 0x6;
-	IPPROTO_UDP = 0x11;
-	TCP_NODELAY = 0x1;
-	SOMAXCONN = 0x80;
-	SizeofSockaddrInet4 = 0x10;
-	SizeofSockaddrInet6 = 0x1c;
-	SizeofSockaddrAny = 0x1c;
-	SizeofSockaddrUnix = 0x6a;
-	_PTRACE_TRACEME = 0;
-	_PTRACE_CONT = 0x7;
-	_PTRACE_KILL = 0x8;
-	EVFILT_READ = -0x1;
-	EVFILT_WRITE = -0x2;
-	EVFILT_AIO = -0x3;
-	EVFILT_VNODE = -0x4;
-	EVFILT_PROC = -0x5;
-	EVFILT_SIGNAL = -0x6;
-	EVFILT_TIMER = -0x7;
-	EVFILT_MACHPORT = -0x8;
-	EVFILT_FS = -0x9;
-	EVFILT_SYSCOUNT = 0x9;
-	EV_ADD = 0x1;
-	EV_DELETE = 0x2;
-	EV_DISABLE = 0x8;
-	EV_RECEIPT = 0x40;
-	EV_ONESHOT = 0x10;
-	EV_CLEAR = 0x20;
-	EV_SYSFLAGS = 0xf000;
-	EV_FLAG0 = 0x1000;
-	EV_FLAG1 = 0x2000;
-	EV_EOF = 0x8000;
-	EV_ERROR = 0x4000;
+	sizeofPtr		= 0x8;
+	sizeofShort		= 0x2;
+	sizeofInt		= 0x4;
+	sizeofLong		= 0x8;
+	sizeofLongLong		= 0x8;
+	O_RDONLY		= 0;
+	O_WRONLY		= 0x1;
+	O_RDWR			= 0x2;
+	O_APPEND		= 0x8;
+	O_ASYNC			= 0x40;
+	O_CREAT			= 0x200;
+	O_NOCTTY		= 0x20000;
+	O_NONBLOCK		= 0x4;
+	O_SYNC			= 0x80;
+	O_TRUNC			= 0x400;
+	O_CLOEXEC		= 0;
+	F_GETFD			= 0x1;
+	F_SETFD			= 0x2;
+	F_GETFL			= 0x3;
+	F_SETFL			= 0x4;
+	FD_CLOEXEC		= 0x1;
+	NAME_MAX		= 0xff;
+	S_IFMT			= 0xf000;
+	S_IFIFO			= 0x1000;
+	S_IFCHR			= 0x2000;
+	S_IFDIR			= 0x4000;
+	S_IFBLK			= 0x6000;
+	S_IFREG			= 0x8000;
+	S_IFLNK			= 0xa000;
+	S_IFSOCK		= 0xc000;
+	S_IFWHT			= 0xe000;
+	S_ISUID			= 0x800;
+	S_ISGID			= 0x400;
+	S_ISVTX			= 0x200;
+	S_IRUSR			= 0x100;
+	S_IWUSR			= 0x80;
+	S_IXUSR			= 0x40;
+	WNOHANG			= 0x1;
+	WUNTRACED		= 0x2;
+	WEXITED			= 0x4;
+	WSTOPPED		= 0x7f;
+	WCONTINUED		= 0x10;
+	WNOWAIT			= 0x20;
+	AF_UNIX			= 0x1;
+	AF_INET			= 0x2;
+	AF_DATAKIT		= 0x9;
+	AF_INET6		= 0x1e;
+	SOCK_STREAM		= 0x1;
+	SOCK_DGRAM		= 0x2;
+	SOCK_RAW		= 0x3;
+	SOCK_SEQPACKET		= 0x5;
+	SOL_SOCKET		= 0xffff;
+	SO_REUSEADDR		= 0x4;
+	SO_KEEPALIVE		= 0x8;
+	SO_DONTROUTE		= 0x10;
+	SO_BROADCAST		= 0x20;
+	SO_USELOOPBACK		= 0x40;
+	SO_LINGER		= 0x80;
+	SO_REUSEPORT		= 0x200;
+	SO_SNDBUF		= 0x1001;
+	SO_RCVBUF		= 0x1002;
+	SO_SNDTIMEO		= 0x1005;
+	SO_RCVTIMEO		= 0x1006;
+	SO_NOSIGPIPE		= 0x1022;
+	IPPROTO_TCP		= 0x6;
+	IPPROTO_UDP		= 0x11;
+	TCP_NODELAY		= 0x1;
+	SOMAXCONN		= 0x80;
+	SizeofSockaddrInet4	= 0x10;
+	SizeofSockaddrInet6	= 0x1c;
+	SizeofSockaddrAny	= 0x1c;
+	SizeofSockaddrUnix	= 0x6a;
+	_PTRACE_TRACEME		= 0;
+	_PTRACE_CONT		= 0x7;
+	_PTRACE_KILL		= 0x8;
+	EVFILT_READ		= -0x1;
+	EVFILT_WRITE		= -0x2;
+	EVFILT_AIO		= -0x3;
+	EVFILT_VNODE		= -0x4;
+	EVFILT_PROC		= -0x5;
+	EVFILT_SIGNAL		= -0x6;
+	EVFILT_TIMER		= -0x7;
+	EVFILT_MACHPORT		= -0x8;
+	EVFILT_FS		= -0x9;
+	EVFILT_SYSCOUNT		= 0x9;
+	EV_ADD			= 0x1;
+	EV_DELETE		= 0x2;
+	EV_DISABLE		= 0x8;
+	EV_RECEIPT		= 0x40;
+	EV_ONESHOT		= 0x10;
+	EV_CLEAR		= 0x20;
+	EV_SYSFLAGS		= 0xf000;
+	EV_FLAG0		= 0x1000;
+	EV_FLAG1		= 0x2000;
+	EV_EOF			= 0x8000;
+	EV_ERROR		= 0x4000;
 )
 
 // Types
@@ -115,141 +115,141 @@ type _C_long int64
 type _C_long_long int64
 
 type Timespec struct {
-	Sec int64;
-	Nsec int64;
+	Sec	int64;
+	Nsec	int64;
 }
 
 type Timeval struct {
-	Sec int64;
-	Usec int32;
-	Pad0 [4]byte;
+	Sec	int64;
+	Usec	int32;
+	Pad0	[4]byte;
 }
 
 type Rusage struct {
-	Utime Timeval;
-	Stime Timeval;
-	Maxrss int64;
-	Ixrss int64;
-	Idrss int64;
-	Isrss int64;
-	Minflt int64;
-	Majflt int64;
-	Nswap int64;
-	Inblock int64;
-	Oublock int64;
-	Msgsnd int64;
-	Msgrcv int64;
-	Nsignals int64;
-	Nvcsw int64;
-	Nivcsw int64;
+	Utime		Timeval;
+	Stime		Timeval;
+	Maxrss		int64;
+	Ixrss		int64;
+	Idrss		int64;
+	Isrss		int64;
+	Minflt		int64;
+	Majflt		int64;
+	Nswap		int64;
+	Inblock		int64;
+	Oublock		int64;
+	Msgsnd		int64;
+	Msgrcv		int64;
+	Nsignals	int64;
+	Nvcsw		int64;
+	Nivcsw		int64;
 }
 
 type Rlimit struct {
-	Cur uint64;
-	Max uint64;
+	Cur	uint64;
+	Max	uint64;
 }
 
 type _Gid_t uint32
 
 type Stat_t struct {
-	Dev int32;
-	Mode uint16;
-	Nlink uint16;
-	Ino uint64;
-	Uid uint32;
-	Gid uint32;
-	Rdev int32;
-	Pad0 [4]byte;
-	Atimespec Timespec;
-	Mtimespec Timespec;
-	Ctimespec Timespec;
-	Birthtimespec Timespec;
-	Size int64;
-	Blocks int64;
-	Blksize int32;
-	Flags uint32;
-	Gen uint32;
-	Lspare int32;
-	Qspare [2]int64;
+	Dev		int32;
+	Mode		uint16;
+	Nlink		uint16;
+	Ino		uint64;
+	Uid		uint32;
+	Gid		uint32;
+	Rdev		int32;
+	Pad0		[4]byte;
+	Atimespec	Timespec;
+	Mtimespec	Timespec;
+	Ctimespec	Timespec;
+	Birthtimespec	Timespec;
+	Size		int64;
+	Blocks		int64;
+	Blksize		int32;
+	Flags		uint32;
+	Gen		uint32;
+	Lspare		int32;
+	Qspare		[2]int64;
 }
 
 type Statfs_t struct {
-	Bsize uint32;
-	Iosize int32;
-	Blocks uint64;
-	Bfree uint64;
-	Bavail uint64;
-	Files uint64;
-	Ffree uint64;
-	Fsid [8]byte /* fsid */;
-	Owner uint32;
-	Type uint32;
-	Flags uint32;
-	Fssubtype uint32;
-	Fstypename [16]int8;
-	Mntonname [1024]int8;
-	Mntfromname [1024]int8;
-	Reserved [8]uint32;
+	Bsize		uint32;
+	Iosize		int32;
+	Blocks		uint64;
+	Bfree		uint64;
+	Bavail		uint64;
+	Files		uint64;
+	Ffree		uint64;
+	Fsid		[8]byte;	/* fsid */
+	Owner		uint32;
+	Type		uint32;
+	Flags		uint32;
+	Fssubtype	uint32;
+	Fstypename	[16]int8;
+	Mntonname	[1024]int8;
+	Mntfromname	[1024]int8;
+	Reserved	[8]uint32;
 }
 
 type Dirent struct {
-	Ino uint64;
-	Seekoff uint64;
-	Reclen uint16;
-	Namlen uint16;
-	Type uint8;
-	Name [1024]int8;
-	Pad0 [3]byte;
+	Ino	uint64;
+	Seekoff	uint64;
+	Reclen	uint16;
+	Namlen	uint16;
+	Type	uint8;
+	Name	[1024]int8;
+	Pad0	[3]byte;
 }
 
 type RawSockaddrInet4 struct {
-	Len uint8;
-	Family uint8;
-	Port uint16;
-	Addr [4]byte /* in_addr */;
-	Zero [8]int8;
+	Len	uint8;
+	Family	uint8;
+	Port	uint16;
+	Addr	[4]byte;	/* in_addr */
+	Zero	[8]int8;
 }
 
 type RawSockaddrInet6 struct {
-	Len uint8;
-	Family uint8;
-	Port uint16;
-	Flowinfo uint32;
-	Addr [16]byte /* in6_addr */;
-	Scope_id uint32;
+	Len		uint8;
+	Family		uint8;
+	Port		uint16;
+	Flowinfo	uint32;
+	Addr		[16]byte;	/* in6_addr */
+	Scope_id	uint32;
 }
 
 type RawSockaddrUnix struct {
-	Len uint8;
-	Family uint8;
-	Path [104]int8;
+	Len	uint8;
+	Family	uint8;
+	Path	[104]int8;
 }
 
 type RawSockaddr struct {
-	Len uint8;
-	Family uint8;
-	Data [14]int8;
+	Len	uint8;
+	Family	uint8;
+	Data	[14]int8;
 }
 
 type RawSockaddrAny struct {
-	Addr RawSockaddr;
-	Pad [12]int8;
+	Addr	RawSockaddr;
+	Pad	[12]int8;
 }
 
 type _Socklen uint32
 
 type Linger struct {
-	Onoff int32;
-	Linger int32;
+	Onoff	int32;
+	Linger	int32;
 }
 
 type Kevent_t struct {
-	Ident uint64;
-	Filter int16;
-	Flags uint16;
-	Fflags uint32;
-	Data int64;
-	Udata *byte;
+	Ident	uint64;
+	Filter	int16;
+	Flags	uint16;
+	Fflags	uint32;
+	Data	int64;
+	Udata	*byte;
 }
 
 type FdSet struct {
diff --git a/src/pkg/syscall/ztypes_linux_386.go b/src/pkg/syscall/ztypes_linux_386.go
index 16a86afbbe..2746d995a7 100644
--- a/src/pkg/syscall/ztypes_linux_386.go
+++ b/src/pkg/syscall/ztypes_linux_386.go
@@ -6,121 +6,121 @@ package syscall
 
 // Constants
 const (
-	sizeofPtr = 0x4;
-	sizeofShort = 0x2;
-	sizeofInt = 0x4;
-	sizeofLong = 0x4;
-	sizeofLongLong = 0x8;
-	PathMax = 0x1000;
-	O_RDONLY = 0;
-	O_WRONLY = 0x1;
-	O_RDWR = 0x2;
-	O_APPEND = 0x400;
-	O_ASYNC = 0x2000;
-	O_CREAT = 0x40;
-	O_NOCTTY = 0x100;
-	O_NONBLOCK = 0x800;
-	O_SYNC = 0x1000;
-	O_TRUNC = 0x200;
-	O_CLOEXEC = 0;
-	F_GETFD = 0x1;
-	F_SETFD = 0x2;
-	F_GETFL = 0x3;
-	F_SETFL = 0x4;
-	FD_CLOEXEC = 0x1;
-	NAME_MAX = 0xff;
-	S_IFMT = 0xf000;
-	S_IFIFO = 0x1000;
-	S_IFCHR = 0x2000;
-	S_IFDIR = 0x4000;
-	S_IFBLK = 0x6000;
-	S_IFREG = 0x8000;
-	S_IFLNK = 0xa000;
-	S_IFSOCK = 0xc000;
-	S_ISUID = 0x800;
-	S_ISGID = 0x400;
-	S_ISVTX = 0x200;
-	S_IRUSR = 0x100;
-	S_IWUSR = 0x80;
-	S_IXUSR = 0x40;
-	WNOHANG = 0x1;
-	WUNTRACED = 0x2;
-	WEXITED = 0x4;
-	WSTOPPED = 0x2;
-	WCONTINUED = 0x8;
-	WNOWAIT = 0x1000000;
-	WCLONE = 0x80000000;
-	WALL = 0x40000000;
-	WNOTHREAD = 0x20000000;
-	AF_UNIX = 0x1;
-	AF_INET = 0x2;
-	AF_INET6 = 0xa;
-	SOCK_STREAM = 0x1;
-	SOCK_DGRAM = 0x2;
-	SOCK_RAW = 0x3;
-	SOCK_SEQPACKET = 0x5;
-	SOL_SOCKET = 0x1;
-	SO_REUSEADDR = 0x2;
-	SO_KEEPALIVE = 0x9;
-	SO_DONTROUTE = 0x5;
-	SO_BROADCAST = 0x6;
-	SO_LINGER = 0xd;
-	SO_SNDBUF = 0x7;
-	SO_RCVBUF = 0x8;
-	SO_SNDTIMEO = 0x15;
-	SO_RCVTIMEO = 0x14;
-	IPPROTO_TCP = 0x6;
-	IPPROTO_UDP = 0x11;
-	TCP_NODELAY = 0x1;
-	SOMAXCONN = 0x80;
-	SizeofSockaddrInet4 = 0x10;
-	SizeofSockaddrInet6 = 0x1c;
-	SizeofSockaddrAny = 0x1c;
-	SizeofSockaddrUnix = 0x6e;
-	_PTRACE_TRACEME = 0;
-	_PTRACE_PEEKTEXT = 0x1;
-	_PTRACE_PEEKDATA = 0x2;
-	_PTRACE_PEEKUSER = 0x3;
-	_PTRACE_POKETEXT = 0x4;
-	_PTRACE_POKEDATA = 0x5;
-	_PTRACE_POKEUSER = 0x6;
-	_PTRACE_CONT = 0x7;
-	_PTRACE_KILL = 0x8;
-	_PTRACE_SINGLESTEP = 0x9;
-	_PTRACE_GETREGS = 0xc;
-	_PTRACE_SETREGS = 0xd;
-	_PTRACE_GETFPREGS = 0xe;
-	_PTRACE_SETFPREGS = 0xf;
-	_PTRACE_ATTACH = 0x10;
-	_PTRACE_DETACH = 0x11;
-	_PTRACE_GETFPXREGS = 0x12;
-	_PTRACE_SETFPXREGS = 0x13;
-	_PTRACE_SYSCALL = 0x18;
-	_PTRACE_SETOPTIONS = 0x4200;
-	_PTRACE_GETEVENTMSG = 0x4201;
-	_PTRACE_GETSIGINFO = 0x4202;
-	_PTRACE_SETSIGINFO = 0x4203;
-	PTRACE_O_TRACESYSGOOD = 0x1;
-	PTRACE_O_TRACEFORK = 0x2;
-	PTRACE_O_TRACEVFORK = 0x4;
-	PTRACE_O_TRACECLONE = 0x8;
-	PTRACE_O_TRACEEXEC = 0x10;
-	PTRACE_O_TRACEVFORKDONE = 0x20;
-	PTRACE_O_TRACEEXIT = 0x40;
-	PTRACE_O_MASK = 0x7f;
-	PTRACE_EVENT_FORK = 0x1;
-	PTRACE_EVENT_VFORK = 0x2;
-	PTRACE_EVENT_CLONE = 0x3;
-	PTRACE_EVENT_EXEC = 0x4;
-	PTRACE_EVENT_VFORK_DONE = 0x5;
-	PTRACE_EVENT_EXIT = 0x6;
-	EPOLLIN = 0x1;
-	EPOLLRDHUP = 0x2000;
-	EPOLLOUT = 0x4;
-	EPOLLONESHOT = 0x40000000;
-	EPOLL_CTL_MOD = 0x3;
-	EPOLL_CTL_ADD = 0x1;
-	EPOLL_CTL_DEL = 0x2;
+	sizeofPtr		= 0x4;
+	sizeofShort		= 0x2;
+	sizeofInt		= 0x4;
+	sizeofLong		= 0x4;
+	sizeofLongLong		= 0x8;
+	PathMax			= 0x1000;
+	O_RDONLY		= 0;
+	O_WRONLY		= 0x1;
+	O_RDWR			= 0x2;
+	O_APPEND		= 0x400;
+	O_ASYNC			= 0x2000;
+	O_CREAT			= 0x40;
+	O_NOCTTY		= 0x100;
+	O_NONBLOCK		= 0x800;
+	O_SYNC			= 0x1000;
+	O_TRUNC			= 0x200;
+	O_CLOEXEC		= 0;
+	F_GETFD			= 0x1;
+	F_SETFD			= 0x2;
+	F_GETFL			= 0x3;
+	F_SETFL			= 0x4;
+	FD_CLOEXEC		= 0x1;
+	NAME_MAX		= 0xff;
+	S_IFMT			= 0xf000;
+	S_IFIFO			= 0x1000;
+	S_IFCHR			= 0x2000;
+	S_IFDIR			= 0x4000;
+	S_IFBLK			= 0x6000;
+	S_IFREG			= 0x8000;
+	S_IFLNK			= 0xa000;
+	S_IFSOCK		= 0xc000;
+	S_ISUID			= 0x800;
+	S_ISGID			= 0x400;
+	S_ISVTX			= 0x200;
+	S_IRUSR			= 0x100;
+	S_IWUSR			= 0x80;
+	S_IXUSR			= 0x40;
+	WNOHANG			= 0x1;
+	WUNTRACED		= 0x2;
+	WEXITED			= 0x4;
+	WSTOPPED		= 0x2;
+	WCONTINUED		= 0x8;
+	WNOWAIT			= 0x1000000;
+	WCLONE			= 0x80000000;
+	WALL			= 0x40000000;
+	WNOTHREAD		= 0x20000000;
+	AF_UNIX			= 0x1;
+	AF_INET			= 0x2;
+	AF_INET6		= 0xa;
+	SOCK_STREAM		= 0x1;
+	SOCK_DGRAM		= 0x2;
+	SOCK_RAW		= 0x3;
+	SOCK_SEQPACKET		= 0x5;
+	SOL_SOCKET		= 0x1;
+	SO_REUSEADDR		= 0x2;
+	SO_KEEPALIVE		= 0x9;
+	SO_DONTROUTE		= 0x5;
+	SO_BROADCAST		= 0x6;
+	SO_LINGER		= 0xd;
+	SO_SNDBUF		= 0x7;
+	SO_RCVBUF		= 0x8;
+	SO_SNDTIMEO		= 0x15;
+	SO_RCVTIMEO		= 0x14;
+	IPPROTO_TCP		= 0x6;
+	IPPROTO_UDP		= 0x11;
+	TCP_NODELAY		= 0x1;
+	SOMAXCONN		= 0x80;
+	SizeofSockaddrInet4	= 0x10;
+	SizeofSockaddrInet6	= 0x1c;
+	SizeofSockaddrAny	= 0x1c;
+	SizeofSockaddrUnix	= 0x6e;
+	_PTRACE_TRACEME		= 0;
+	_PTRACE_PEEKTEXT	= 0x1;
+	_PTRACE_PEEKDATA	= 0x2;
+	_PTRACE_PEEKUSER	= 0x3;
+	_PTRACE_POKETEXT	= 0x4;
+	_PTRACE_POKEDATA	= 0x5;
+	_PTRACE_POKEUSER	= 0x6;
+	_PTRACE_CONT		= 0x7;
+	_PTRACE_KILL		= 0x8;
+	_PTRACE_SINGLESTEP	= 0x9;
+	_PTRACE_GETREGS		= 0xc;
+	_PTRACE_SETREGS		= 0xd;
+	_PTRACE_GETFPREGS	= 0xe;
+	_PTRACE_SETFPREGS	= 0xf;
+	_PTRACE_ATTACH		= 0x10;
+	_PTRACE_DETACH		= 0x11;
+	_PTRACE_GETFPXREGS	= 0x12;
+	_PTRACE_SETFPXREGS	= 0x13;
+	_PTRACE_SYSCALL		= 0x18;
+	_PTRACE_SETOPTIONS	= 0x4200;
+	_PTRACE_GETEVENTMSG	= 0x4201;
+	_PTRACE_GETSIGINFO	= 0x4202;
+	_PTRACE_SETSIGINFO	= 0x4203;
+	PTRACE_O_TRACESYSGOOD	= 0x1;
+	PTRACE_O_TRACEFORK	= 0x2;
+	PTRACE_O_TRACEVFORK	= 0x4;
+	PTRACE_O_TRACECLONE	= 0x8;
+	PTRACE_O_TRACEEXEC	= 0x10;
+	PTRACE_O_TRACEVFORKDONE	= 0x20;
+	PTRACE_O_TRACEEXIT	= 0x40;
+	PTRACE_O_MASK		= 0x7f;
+	PTRACE_EVENT_FORK	= 0x1;
+	PTRACE_EVENT_VFORK	= 0x2;
+	PTRACE_EVENT_CLONE	= 0x3;
+	PTRACE_EVENT_EXEC	= 0x4;
+	PTRACE_EVENT_VFORK_DONE	= 0x5;
+	PTRACE_EVENT_EXIT	= 0x6;
+	EPOLLIN			= 0x1;
+	EPOLLRDHUP		= 0x2000;
+	EPOLLOUT		= 0x4;
+	EPOLLONESHOT		= 0x40000000;
+	EPOLL_CTL_MOD		= 0x3;
+	EPOLL_CTL_ADD		= 0x1;
+	EPOLL_CTL_DEL		= 0x2;
 )
 
 // Types
@@ -134,194 +134,194 @@ type _C_long int32
 type _C_long_long int64
 
 type Timespec struct {
-	Sec int32;
-	Nsec int32;
+	Sec	int32;
+	Nsec	int32;
 }
 
 type Timeval struct {
-	Sec int32;
-	Usec int32;
+	Sec	int32;
+	Usec	int32;
 }
 
 type Timex struct {
-	Modes uint32;
-	Offset int32;
-	Freq int32;
-	Maxerror int32;
-	Esterror int32;
-	Status int32;
-	Constant int32;
-	Precision int32;
-	Tolerance int32;
-	Time Timeval;
-	Tick int32;
-	Ppsfreq int32;
-	Jitter int32;
-	Shift int32;
-	Stabil int32;
-	Jitcnt int32;
-	Calcnt int32;
-	Errcnt int32;
-	Stbcnt int32;
-	Pad0 int32;
-	Pad1 int32;
-	Pad2 int32;
-	Pad3 int32;
-	Pad4 int32;
-	Pad5 int32;
-	Pad6 int32;
-	Pad7 int32;
-	Pad8 int32;
-	Pad9 int32;
-	Pad10 int32;
-	Pad11 int32;
+	Modes		uint32;
+	Offset		int32;
+	Freq		int32;
+	Maxerror	int32;
+	Esterror	int32;
+	Status		int32;
+	Constant	int32;
+	Precision	int32;
+	Tolerance	int32;
+	Time		Timeval;
+	Tick		int32;
+	Ppsfreq		int32;
+	Jitter		int32;
+	Shift		int32;
+	Stabil		int32;
+	Jitcnt		int32;
+	Calcnt		int32;
+	Errcnt		int32;
+	Stbcnt		int32;
+	Pad0		int32;
+	Pad1		int32;
+	Pad2		int32;
+	Pad3		int32;
+	Pad4		int32;
+	Pad5		int32;
+	Pad6		int32;
+	Pad7		int32;
+	Pad8		int32;
+	Pad9		int32;
+	Pad10		int32;
+	Pad11		int32;
 }
 
 type Time_t int32
 
 type Tms struct {
-	Utime int32;
-	Stime int32;
-	Cutime int32;
-	Cstime int32;
+	Utime	int32;
+	Stime	int32;
+	Cutime	int32;
+	Cstime	int32;
 }
 
 type Utimbuf struct {
-	Actime int32;
-	Modtime int32;
+	Actime	int32;
+	Modtime	int32;
 }
 
 type Rusage struct {
-	Utime Timeval;
-	Stime Timeval;
-	Maxrss int32;
-	Ixrss int32;
-	Idrss int32;
-	Isrss int32;
-	Minflt int32;
-	Majflt int32;
-	Nswap int32;
-	Inblock int32;
-	Oublock int32;
-	Msgsnd int32;
-	Msgrcv int32;
-	Nsignals int32;
-	Nvcsw int32;
-	Nivcsw int32;
+	Utime		Timeval;
+	Stime		Timeval;
+	Maxrss		int32;
+	Ixrss		int32;
+	Idrss		int32;
+	Isrss		int32;
+	Minflt		int32;
+	Majflt		int32;
+	Nswap		int32;
+	Inblock		int32;
+	Oublock		int32;
+	Msgsnd		int32;
+	Msgrcv		int32;
+	Nsignals	int32;
+	Nvcsw		int32;
+	Nivcsw		int32;
 }
 
 type Rlimit struct {
-	Cur uint64;
-	Max uint64;
+	Cur	uint64;
+	Max	uint64;
 }
 
 type _Gid_t uint32
 
 type Stat_t struct {
-	Dev uint64;
-	__pad1 uint16;
-	Pad0 [2]byte;
-	__st_ino uint32;
-	Mode uint32;
-	Nlink uint32;
-	Uid uint32;
-	Gid uint32;
-	Rdev uint64;
-	__pad2 uint16;
-	Pad1 [2]byte;
-	Size int64;
-	Blksize int32;
-	Blocks int64;
-	Atim Timespec;
-	Mtim Timespec;
-	Ctim Timespec;
-	Ino uint64;
+	Dev		uint64;
+	__pad1		uint16;
+	Pad0		[2]byte;
+	__st_ino	uint32;
+	Mode		uint32;
+	Nlink		uint32;
+	Uid		uint32;
+	Gid		uint32;
+	Rdev		uint64;
+	__pad2		uint16;
+	Pad1		[2]byte;
+	Size		int64;
+	Blksize		int32;
+	Blocks		int64;
+	Atim		Timespec;
+	Mtim		Timespec;
+	Ctim		Timespec;
+	Ino		uint64;
 }
 
 type Statfs_t struct {
-	Type int32;
-	Bsize int32;
-	Blocks uint64;
-	Bfree uint64;
-	Bavail uint64;
-	Files uint64;
-	Ffree uint64;
-	Fsid [8]byte /* __fsid_t */;
-	Namelen int32;
-	Frsize int32;
-	Spare [5]int32;
+	Type	int32;
+	Bsize	int32;
+	Blocks	uint64;
+	Bfree	uint64;
+	Bavail	uint64;
+	Files	uint64;
+	Ffree	uint64;
+	Fsid	[8]byte;	/* __fsid_t */
+	Namelen	int32;
+	Frsize	int32;
+	Spare	[5]int32;
 }
 
 type Dirent struct {
-	Ino uint64;
-	Off int64;
-	Reclen uint16;
-	Type uint8;
-	Name [256]int8;
-	Pad0 [1]byte;
+	Ino	uint64;
+	Off	int64;
+	Reclen	uint16;
+	Type	uint8;
+	Name	[256]int8;
+	Pad0	[1]byte;
 }
 
 type RawSockaddrInet4 struct {
-	Family uint16;
-	Port uint16;
-	Addr [4]byte /* in_addr */;
-	Zero [8]uint8;
+	Family	uint16;
+	Port	uint16;
+	Addr	[4]byte;	/* in_addr */
+	Zero	[8]uint8;
 }
 
 type RawSockaddrInet6 struct {
-	Family uint16;
-	Port uint16;
-	Flowinfo uint32;
-	Addr [16]byte /* in6_addr */;
-	Scope_id uint32;
+	Family		uint16;
+	Port		uint16;
+	Flowinfo	uint32;
+	Addr		[16]byte;	/* in6_addr */
+	Scope_id	uint32;
 }
 
 type RawSockaddrUnix struct {
-	Family uint16;
-	Path [108]int8;
+	Family	uint16;
+	Path	[108]int8;
 }
 
 type RawSockaddr struct {
-	Family uint16;
-	Data [14]int8;
+	Family	uint16;
+	Data	[14]int8;
 }
 
 type RawSockaddrAny struct {
-	Addr RawSockaddr;
-	Pad [12]int8;
+	Addr	RawSockaddr;
+	Pad	[12]int8;
 }
 
 type _Socklen uint32
 
 type Linger struct {
-	Onoff int32;
-	Linger int32;
+	Onoff	int32;
+	Linger	int32;
 }
 
 type PtraceRegs struct {
-	Ebx int32;
-	Ecx int32;
-	Edx int32;
-	Esi int32;
-	Edi int32;
-	Ebp int32;
-	Eax int32;
-	Ds uint16;
-	X__ds uint16;
-	Es uint16;
-	X__es uint16;
-	Fs uint16;
-	X__fs uint16;
-	Gs uint16;
-	X__gs uint16;
-	Orig_eax int32;
-	Eip int32;
-	Cs uint16;
-	X__cs uint16;
-	Eflags int32;
-	Esp int32;
-	Ss uint16;
-	X__ss uint16;
+	Ebx		int32;
+	Ecx		int32;
+	Edx		int32;
+	Esi		int32;
+	Edi		int32;
+	Ebp		int32;
+	Eax		int32;
+	Ds		uint16;
+	X__ds		uint16;
+	Es		uint16;
+	X__es		uint16;
+	Fs		uint16;
+	X__fs		uint16;
+	Gs		uint16;
+	X__gs		uint16;
+	Orig_eax	int32;
+	Eip		int32;
+	Cs		uint16;
+	X__cs		uint16;
+	Eflags		int32;
+	Esp		int32;
+	Ss		uint16;
+	X__ss		uint16;
 }
 
 type FdSet struct {
@@ -329,40 +329,40 @@ type FdSet struct {
 }
 
 type Sysinfo_t struct {
-	Uptime int32;
-	Loads [3]uint32;
-	Totalram uint32;
-	Freeram uint32;
-	Sharedram uint32;
-	Bufferram uint32;
-	Totalswap uint32;
-	Freeswap uint32;
-	Procs uint16;
-	Pad uint16;
-	Totalhigh uint32;
-	Freehigh uint32;
-	Unit uint32;
-	_f [8]int8;
+	Uptime		int32;
+	Loads		[3]uint32;
+	Totalram	uint32;
+	Freeram		uint32;
+	Sharedram	uint32;
+	Bufferram	uint32;
+	Totalswap	uint32;
+	Freeswap	uint32;
+	Procs		uint16;
+	Pad		uint16;
+	Totalhigh	uint32;
+	Freehigh	uint32;
+	Unit		uint32;
+	_f		[8]int8;
 }
 
 type Utsname struct {
-	Sysname [65]int8;
-	Nodename [65]int8;
-	Release [65]int8;
-	Version [65]int8;
-	Machine [65]int8;
-	Domainname [65]int8;
+	Sysname		[65]int8;
+	Nodename	[65]int8;
+	Release		[65]int8;
+	Version		[65]int8;
+	Machine		[65]int8;
+	Domainname	[65]int8;
 }
 
 type Ustat_t struct {
-	Tfree int32;
-	Tinode uint32;
-	Fname [6]int8;
-	Fpack [6]int8;
+	Tfree	int32;
+	Tinode	uint32;
+	Fname	[6]int8;
+	Fpack	[6]int8;
 }
 
 type EpollEvent struct {
-	Events uint32;
-	Fd int32;
-	Pad int32;
+	Events	uint32;
+	Fd	int32;
+	Pad	int32;
 }
diff --git a/src/pkg/syscall/ztypes_linux_amd64.go b/src/pkg/syscall/ztypes_linux_amd64.go
index cdf251fa8a..57d23d3033 100644
--- a/src/pkg/syscall/ztypes_linux_amd64.go
+++ b/src/pkg/syscall/ztypes_linux_amd64.go
@@ -6,121 +6,121 @@ package syscall
 
 // Constants
 const (
-	sizeofPtr = 0x8;
-	sizeofShort = 0x2;
-	sizeofInt = 0x4;
-	sizeofLong = 0x8;
-	sizeofLongLong = 0x8;
-	PathMax = 0x1000;
-	O_RDONLY = 0;
-	O_WRONLY = 0x1;
-	O_RDWR = 0x2;
-	O_APPEND = 0x400;
-	O_ASYNC = 0x2000;
-	O_CREAT = 0x40;
-	O_NOCTTY = 0x100;
-	O_NONBLOCK = 0x800;
-	O_SYNC = 0x1000;
-	O_TRUNC = 0x200;
-	O_CLOEXEC = 0;
-	F_GETFD = 0x1;
-	F_SETFD = 0x2;
-	F_GETFL = 0x3;
-	F_SETFL = 0x4;
-	FD_CLOEXEC = 0x1;
-	NAME_MAX = 0xff;
-	S_IFMT = 0xf000;
-	S_IFIFO = 0x1000;
-	S_IFCHR = 0x2000;
-	S_IFDIR = 0x4000;
-	S_IFBLK = 0x6000;
-	S_IFREG = 0x8000;
-	S_IFLNK = 0xa000;
-	S_IFSOCK = 0xc000;
-	S_ISUID = 0x800;
-	S_ISGID = 0x400;
-	S_ISVTX = 0x200;
-	S_IRUSR = 0x100;
-	S_IWUSR = 0x80;
-	S_IXUSR = 0x40;
-	WNOHANG = 0x1;
-	WUNTRACED = 0x2;
-	WEXITED = 0x4;
-	WSTOPPED = 0x2;
-	WCONTINUED = 0x8;
-	WNOWAIT = 0x1000000;
-	WCLONE = 0x80000000;
-	WALL = 0x40000000;
-	WNOTHREAD = 0x20000000;
-	AF_UNIX = 0x1;
-	AF_INET = 0x2;
-	AF_INET6 = 0xa;
-	SOCK_STREAM = 0x1;
-	SOCK_DGRAM = 0x2;
-	SOCK_RAW = 0x3;
-	SOCK_SEQPACKET = 0x5;
-	SOL_SOCKET = 0x1;
-	SO_REUSEADDR = 0x2;
-	SO_KEEPALIVE = 0x9;
-	SO_DONTROUTE = 0x5;
-	SO_BROADCAST = 0x6;
-	SO_LINGER = 0xd;
-	SO_SNDBUF = 0x7;
-	SO_RCVBUF = 0x8;
-	SO_SNDTIMEO = 0x15;
-	SO_RCVTIMEO = 0x14;
-	IPPROTO_TCP = 0x6;
-	IPPROTO_UDP = 0x11;
-	TCP_NODELAY = 0x1;
-	SOMAXCONN = 0x80;
-	SizeofSockaddrInet4 = 0x10;
-	SizeofSockaddrInet6 = 0x1c;
-	SizeofSockaddrAny = 0x1c;
-	SizeofSockaddrUnix = 0x6e;
-	_PTRACE_TRACEME = 0;
-	_PTRACE_PEEKTEXT = 0x1;
-	_PTRACE_PEEKDATA = 0x2;
-	_PTRACE_PEEKUSER = 0x3;
-	_PTRACE_POKETEXT = 0x4;
-	_PTRACE_POKEDATA = 0x5;
-	_PTRACE_POKEUSER = 0x6;
-	_PTRACE_CONT = 0x7;
-	_PTRACE_KILL = 0x8;
-	_PTRACE_SINGLESTEP = 0x9;
-	_PTRACE_GETREGS = 0xc;
-	_PTRACE_SETREGS = 0xd;
-	_PTRACE_GETFPREGS = 0xe;
-	_PTRACE_SETFPREGS = 0xf;
-	_PTRACE_ATTACH = 0x10;
-	_PTRACE_DETACH = 0x11;
-	_PTRACE_GETFPXREGS = 0x12;
-	_PTRACE_SETFPXREGS = 0x13;
-	_PTRACE_SYSCALL = 0x18;
-	_PTRACE_SETOPTIONS = 0x4200;
-	_PTRACE_GETEVENTMSG = 0x4201;
-	_PTRACE_GETSIGINFO = 0x4202;
-	_PTRACE_SETSIGINFO = 0x4203;
-	PTRACE_O_TRACESYSGOOD = 0x1;
-	PTRACE_O_TRACEFORK = 0x2;
-	PTRACE_O_TRACEVFORK = 0x4;
-	PTRACE_O_TRACECLONE = 0x8;
-	PTRACE_O_TRACEEXEC = 0x10;
-	PTRACE_O_TRACEVFORKDONE = 0x20;
-	PTRACE_O_TRACEEXIT = 0x40;
-	PTRACE_O_MASK = 0x7f;
-	PTRACE_EVENT_FORK = 0x1;
-	PTRACE_EVENT_VFORK = 0x2;
-	PTRACE_EVENT_CLONE = 0x3;
-	PTRACE_EVENT_EXEC = 0x4;
-	PTRACE_EVENT_VFORK_DONE = 0x5;
-	PTRACE_EVENT_EXIT = 0x6;
-	EPOLLIN = 0x1;
-	EPOLLRDHUP = 0x2000;
-	EPOLLOUT = 0x4;
-	EPOLLONESHOT = 0x40000000;
-	EPOLL_CTL_MOD = 0x3;
-	EPOLL_CTL_ADD = 0x1;
-	EPOLL_CTL_DEL = 0x2;
+	sizeofPtr		= 0x8;
+	sizeofShort		= 0x2;
+	sizeofInt		= 0x4;
+	sizeofLong		= 0x8;
+	sizeofLongLong		= 0x8;
+	PathMax			= 0x1000;
+	O_RDONLY		= 0;
+	O_WRONLY		= 0x1;
+	O_RDWR			= 0x2;
+	O_APPEND		= 0x400;
+	O_ASYNC			= 0x2000;
+	O_CREAT			= 0x40;
+	O_NOCTTY		= 0x100;
+	O_NONBLOCK		= 0x800;
+	O_SYNC			= 0x1000;
+	O_TRUNC			= 0x200;
+	O_CLOEXEC		= 0;
+	F_GETFD			= 0x1;
+	F_SETFD			= 0x2;
+	F_GETFL			= 0x3;
+	F_SETFL			= 0x4;
+	FD_CLOEXEC		= 0x1;
+	NAME_MAX		= 0xff;
+	S_IFMT			= 0xf000;
+	S_IFIFO			= 0x1000;
+	S_IFCHR			= 0x2000;
+	S_IFDIR			= 0x4000;
+	S_IFBLK			= 0x6000;
+	S_IFREG			= 0x8000;
+	S_IFLNK			= 0xa000;
+	S_IFSOCK		= 0xc000;
+	S_ISUID			= 0x800;
+	S_ISGID			= 0x400;
+	S_ISVTX			= 0x200;
+	S_IRUSR			= 0x100;
+	S_IWUSR			= 0x80;
+	S_IXUSR			= 0x40;
+	WNOHANG			= 0x1;
+	WUNTRACED		= 0x2;
+	WEXITED			= 0x4;
+	WSTOPPED		= 0x2;
+	WCONTINUED		= 0x8;
+	WNOWAIT			= 0x1000000;
+	WCLONE			= 0x80000000;
+	WALL			= 0x40000000;
+	WNOTHREAD		= 0x20000000;
+	AF_UNIX			= 0x1;
+	AF_INET			= 0x2;
+	AF_INET6		= 0xa;
+	SOCK_STREAM		= 0x1;
+	SOCK_DGRAM		= 0x2;
+	SOCK_RAW		= 0x3;
+	SOCK_SEQPACKET		= 0x5;
+	SOL_SOCKET		= 0x1;
+	SO_REUSEADDR		= 0x2;
+	SO_KEEPALIVE		= 0x9;
+	SO_DONTROUTE		= 0x5;
+	SO_BROADCAST		= 0x6;
+	SO_LINGER		= 0xd;
+	SO_SNDBUF		= 0x7;
+	SO_RCVBUF		= 0x8;
+	SO_SNDTIMEO		= 0x15;
+	SO_RCVTIMEO		= 0x14;
+	IPPROTO_TCP		= 0x6;
+	IPPROTO_UDP		= 0x11;
+	TCP_NODELAY		= 0x1;
+	SOMAXCONN		= 0x80;
+	SizeofSockaddrInet4	= 0x10;
+	SizeofSockaddrInet6	= 0x1c;
+	SizeofSockaddrAny	= 0x1c;
+	SizeofSockaddrUnix	= 0x6e;
+	_PTRACE_TRACEME		= 0;
+	_PTRACE_PEEKTEXT	= 0x1;
+	_PTRACE_PEEKDATA	= 0x2;
+	_PTRACE_PEEKUSER	= 0x3;
+	_PTRACE_POKETEXT	= 0x4;
+	_PTRACE_POKEDATA	= 0x5;
+	_PTRACE_POKEUSER	= 0x6;
+	_PTRACE_CONT		= 0x7;
+	_PTRACE_KILL		= 0x8;
+	_PTRACE_SINGLESTEP	= 0x9;
+	_PTRACE_GETREGS		= 0xc;
+	_PTRACE_SETREGS		= 0xd;
+	_PTRACE_GETFPREGS	= 0xe;
+	_PTRACE_SETFPREGS	= 0xf;
+	_PTRACE_ATTACH		= 0x10;
+	_PTRACE_DETACH		= 0x11;
+	_PTRACE_GETFPXREGS	= 0x12;
+	_PTRACE_SETFPXREGS	= 0x13;
+	_PTRACE_SYSCALL		= 0x18;
+	_PTRACE_SETOPTIONS	= 0x4200;
+	_PTRACE_GETEVENTMSG	= 0x4201;
+	_PTRACE_GETSIGINFO	= 0x4202;
+	_PTRACE_SETSIGINFO	= 0x4203;
+	PTRACE_O_TRACESYSGOOD	= 0x1;
+	PTRACE_O_TRACEFORK	= 0x2;
+	PTRACE_O_TRACEVFORK	= 0x4;
+	PTRACE_O_TRACECLONE	= 0x8;
+	PTRACE_O_TRACEEXEC	= 0x10;
+	PTRACE_O_TRACEVFORKDONE	= 0x20;
+	PTRACE_O_TRACEEXIT	= 0x40;
+	PTRACE_O_MASK		= 0x7f;
+	PTRACE_EVENT_FORK	= 0x1;
+	PTRACE_EVENT_VFORK	= 0x2;
+	PTRACE_EVENT_CLONE	= 0x3;
+	PTRACE_EVENT_EXEC	= 0x4;
+	PTRACE_EVENT_VFORK_DONE	= 0x5;
+	PTRACE_EVENT_EXIT	= 0x6;
+	EPOLLIN			= 0x1;
+	EPOLLRDHUP		= 0x2000;
+	EPOLLOUT		= 0x4;
+	EPOLLONESHOT		= 0x40000000;
+	EPOLL_CTL_MOD		= 0x3;
+	EPOLL_CTL_ADD		= 0x1;
+	EPOLL_CTL_DEL		= 0x2;
 )
 
 // Types
@@ -134,198 +134,198 @@ type _C_long int64
 type _C_long_long int64
 
 type Timespec struct {
-	Sec int64;
-	Nsec int64;
+	Sec	int64;
+	Nsec	int64;
 }
 
 type Timeval struct {
-	Sec int64;
-	Usec int64;
+	Sec	int64;
+	Usec	int64;
 }
 
 type Timex struct {
-	Modes uint32;
-	Pad0 [4]byte;
-	Offset int64;
-	Freq int64;
-	Maxerror int64;
-	Esterror int64;
-	Status int32;
-	Pad1 [4]byte;
-	Constant int64;
-	Precision int64;
-	Tolerance int64;
-	Time Timeval;
-	Tick int64;
-	Ppsfreq int64;
-	Jitter int64;
-	Shift int32;
-	Pad2 [4]byte;
-	Stabil int64;
-	Jitcnt int64;
-	Calcnt int64;
-	Errcnt int64;
-	Stbcnt int64;
-	Pad3 int32;
-	Pad4 int32;
-	Pad5 int32;
-	Pad6 int32;
-	Pad7 int32;
-	Pad8 int32;
-	Pad9 int32;
-	Pad10 int32;
-	Pad11 int32;
-	Pad12 int32;
-	Pad13 int32;
-	Pad14 int32;
+	Modes		uint32;
+	Pad0		[4]byte;
+	Offset		int64;
+	Freq		int64;
+	Maxerror	int64;
+	Esterror	int64;
+	Status		int32;
+	Pad1		[4]byte;
+	Constant	int64;
+	Precision	int64;
+	Tolerance	int64;
+	Time		Timeval;
+	Tick		int64;
+	Ppsfreq		int64;
+	Jitter		int64;
+	Shift		int32;
+	Pad2		[4]byte;
+	Stabil		int64;
+	Jitcnt		int64;
+	Calcnt		int64;
+	Errcnt		int64;
+	Stbcnt		int64;
+	Pad3		int32;
+	Pad4		int32;
+	Pad5		int32;
+	Pad6		int32;
+	Pad7		int32;
+	Pad8		int32;
+	Pad9		int32;
+	Pad10		int32;
+	Pad11		int32;
+	Pad12		int32;
+	Pad13		int32;
+	Pad14		int32;
 }
 
 type Time_t int64
 
 type Tms struct {
-	Utime int64;
-	Stime int64;
-	Cutime int64;
-	Cstime int64;
+	Utime	int64;
+	Stime	int64;
+	Cutime	int64;
+	Cstime	int64;
 }
 
 type Utimbuf struct {
-	Actime int64;
-	Modtime int64;
+	Actime	int64;
+	Modtime	int64;
 }
 
 type Rusage struct {
-	Utime Timeval;
-	Stime Timeval;
-	Maxrss int64;
-	Ixrss int64;
-	Idrss int64;
-	Isrss int64;
-	Minflt int64;
-	Majflt int64;
-	Nswap int64;
-	Inblock int64;
-	Oublock int64;
-	Msgsnd int64;
-	Msgrcv int64;
-	Nsignals int64;
-	Nvcsw int64;
-	Nivcsw int64;
+	Utime		Timeval;
+	Stime		Timeval;
+	Maxrss		int64;
+	Ixrss		int64;
+	Idrss		int64;
+	Isrss		int64;
+	Minflt		int64;
+	Majflt		int64;
+	Nswap		int64;
+	Inblock		int64;
+	Oublock		int64;
+	Msgsnd		int64;
+	Msgrcv		int64;
+	Nsignals	int64;
+	Nvcsw		int64;
+	Nivcsw		int64;
 }
 
 type Rlimit struct {
-	Cur uint64;
-	Max uint64;
+	Cur	uint64;
+	Max	uint64;
 }
 
 type _Gid_t uint32
 
 type Stat_t struct {
-	Dev uint64;
-	Ino uint64;
-	Nlink uint64;
-	Mode uint32;
-	Uid uint32;
-	Gid uint32;
-	Pad0 int32;
-	Rdev uint64;
-	Size int64;
-	Blksize int64;
-	Blocks int64;
-	Atim Timespec;
-	Mtim Timespec;
-	Ctim Timespec;
-	__unused [3]int64;
+	Dev		uint64;
+	Ino		uint64;
+	Nlink		uint64;
+	Mode		uint32;
+	Uid		uint32;
+	Gid		uint32;
+	Pad0		int32;
+	Rdev		uint64;
+	Size		int64;
+	Blksize		int64;
+	Blocks		int64;
+	Atim		Timespec;
+	Mtim		Timespec;
+	Ctim		Timespec;
+	__unused	[3]int64;
 }
 
 type Statfs_t struct {
-	Type int64;
-	Bsize int64;
-	Blocks uint64;
-	Bfree uint64;
-	Bavail uint64;
-	Files uint64;
-	Ffree uint64;
-	Fsid [8]byte /* __fsid_t */;
-	Namelen int64;
-	Frsize int64;
-	Spare [5]int64;
+	Type	int64;
+	Bsize	int64;
+	Blocks	uint64;
+	Bfree	uint64;
+	Bavail	uint64;
+	Files	uint64;
+	Ffree	uint64;
+	Fsid	[8]byte;	/* __fsid_t */
+	Namelen	int64;
+	Frsize	int64;
+	Spare	[5]int64;
 }
 
 type Dirent struct {
-	Ino uint64;
-	Off int64;
-	Reclen uint16;
-	Type uint8;
-	Name [256]int8;
-	Pad0 [5]byte;
+	Ino	uint64;
+	Off	int64;
+	Reclen	uint16;
+	Type	uint8;
+	Name	[256]int8;
+	Pad0	[5]byte;
 }
 
 type RawSockaddrInet4 struct {
-	Family uint16;
-	Port uint16;
-	Addr [4]byte /* in_addr */;
-	Zero [8]uint8;
+	Family	uint16;
+	Port	uint16;
+	Addr	[4]byte;	/* in_addr */
+	Zero	[8]uint8;
 }
 
 type RawSockaddrInet6 struct {
-	Family uint16;
-	Port uint16;
-	Flowinfo uint32;
-	Addr [16]byte /* in6_addr */;
-	Scope_id uint32;
+	Family		uint16;
+	Port		uint16;
+	Flowinfo	uint32;
+	Addr		[16]byte;	/* in6_addr */
+	Scope_id	uint32;
 }
 
 type RawSockaddrUnix struct {
-	Family uint16;
-	Path [108]int8;
+	Family	uint16;
+	Path	[108]int8;
 }
 
 type RawSockaddr struct {
-	Family uint16;
-	Data [14]int8;
+	Family	uint16;
+	Data	[14]int8;
 }
 
 type RawSockaddrAny struct {
-	Addr RawSockaddr;
-	Pad [12]int8;
+	Addr	RawSockaddr;
+	Pad	[12]int8;
 }
 
 type _Socklen uint32
 
 type Linger struct {
-	Onoff int32;
-	Linger int32;
+	Onoff	int32;
+	Linger	int32;
 }
 
 type PtraceRegs struct {
-	R15 uint64;
-	R14 uint64;
-	R13 uint64;
-	R12 uint64;
-	Rbp uint64;
-	Rbx uint64;
-	R11 uint64;
-	R10 uint64;
-	R9 uint64;
-	R8 uint64;
-	Rax uint64;
-	Rcx uint64;
-	Rdx uint64;
-	Rsi uint64;
-	Rdi uint64;
-	Orig_rax uint64;
-	Rip uint64;
-	Cs uint64;
-	Eflags uint64;
-	Rsp uint64;
-	Ss uint64;
-	Fs_base uint64;
-	Gs_base uint64;
-	Ds uint64;
-	Es uint64;
-	Fs uint64;
-	Gs uint64;
+	R15		uint64;
+	R14		uint64;
+	R13		uint64;
+	R12		uint64;
+	Rbp		uint64;
+	Rbx		uint64;
+	R11		uint64;
+	R10		uint64;
+	R9		uint64;
+	R8		uint64;
+	Rax		uint64;
+	Rcx		uint64;
+	Rdx		uint64;
+	Rsi		uint64;
+	Rdi		uint64;
+	Orig_rax	uint64;
+	Rip		uint64;
+	Cs		uint64;
+	Eflags		uint64;
+	Rsp		uint64;
+	Ss		uint64;
+	Fs_base		uint64;
+	Gs_base		uint64;
+	Ds		uint64;
+	Es		uint64;
+	Fs		uint64;
+	Gs		uint64;
 }
 
 type FdSet struct {
@@ -333,44 +333,44 @@ type FdSet struct {
 }
 
 type Sysinfo_t struct {
-	Uptime int64;
-	Loads [3]uint64;
-	Totalram uint64;
-	Freeram uint64;
-	Sharedram uint64;
-	Bufferram uint64;
-	Totalswap uint64;
-	Freeswap uint64;
-	Procs uint16;
-	Pad uint16;
-	Pad0 [4]byte;
-	Totalhigh uint64;
-	Freehigh uint64;
-	Unit uint32;
-	_f [2]int8;
-	Pad1 [4]byte;
+	Uptime		int64;
+	Loads		[3]uint64;
+	Totalram	uint64;
+	Freeram		uint64;
+	Sharedram	uint64;
+	Bufferram	uint64;
+	Totalswap	uint64;
+	Freeswap	uint64;
+	Procs		uint16;
+	Pad		uint16;
+	Pad0		[4]byte;
+	Totalhigh	uint64;
+	Freehigh	uint64;
+	Unit		uint32;
+	_f		[2]int8;
+	Pad1		[4]byte;
 }
 
 type Utsname struct {
-	Sysname [65]int8;
-	Nodename [65]int8;
-	Release [65]int8;
-	Version [65]int8;
-	Machine [65]int8;
-	Domainname [65]int8;
+	Sysname		[65]int8;
+	Nodename	[65]int8;
+	Release		[65]int8;
+	Version		[65]int8;
+	Machine		[65]int8;
+	Domainname	[65]int8;
 }
 
 type Ustat_t struct {
-	Tfree int32;
-	Pad0 [4]byte;
-	Tinode uint64;
-	Fname [6]int8;
-	Fpack [6]int8;
-	Pad1 [4]byte;
+	Tfree	int32;
+	Pad0	[4]byte;
+	Tinode	uint64;
+	Fname	[6]int8;
+	Fpack	[6]int8;
+	Pad1	[4]byte;
 }
 
 type EpollEvent struct {
-	Events uint32;
-	Fd int32;
-	Pad int32;
+	Events	uint32;
+	Fd	int32;
+	Pad	int32;
 }
diff --git a/src/pkg/syscall/ztypes_linux_arm.go b/src/pkg/syscall/ztypes_linux_arm.go
index c038e02435..1f786b6faa 100644
--- a/src/pkg/syscall/ztypes_linux_arm.go
+++ b/src/pkg/syscall/ztypes_linux_arm.go
@@ -6,121 +6,121 @@ package syscall
 
 // Constants
 const (
-	sizeofPtr = 0x4;
-	sizeofShort = 0x2;
-	sizeofInt = 0x4;
-	sizeofLong = 0x4;
-	sizeofLongLong = 0x8;
-	PathMax = 0x1000;
-	O_RDONLY = 0;
-	O_WRONLY = 0x1;
-	O_RDWR = 0x2;
-	O_APPEND = 0x400;
-	O_ASYNC = 0x2000;
-	O_CREAT = 0x40;
-	O_NOCTTY = 0x100;
-	O_NONBLOCK = 0x800;
-	O_SYNC = 0x1000;
-	O_TRUNC = 0x200;
-	O_CLOEXEC = 0;
-	F_GETFD = 0x1;
-	F_SETFD = 0x2;
-	F_GETFL = 0x3;
-	F_SETFL = 0x4;
-	FD_CLOEXEC = 0x1;
-	NAME_MAX = 0xff;
-	S_IFMT = 0xf000;
-	S_IFIFO = 0x1000;
-	S_IFCHR = 0x2000;
-	S_IFDIR = 0x4000;
-	S_IFBLK = 0x6000;
-	S_IFREG = 0x8000;
-	S_IFLNK = 0xa000;
-	S_IFSOCK = 0xc000;
-	S_ISUID = 0x800;
-	S_ISGID = 0x400;
-	S_ISVTX = 0x200;
-	S_IRUSR = 0x100;
-	S_IWUSR = 0x80;
-	S_IXUSR = 0x40;
-	WNOHANG = 0x1;
-	WUNTRACED = 0x2;
-	WEXITED = 0x4;
-	WSTOPPED = 0x2;
-	WCONTINUED = 0x8;
-	WNOWAIT = 0x1000000;
-	WCLONE = 0x80000000;
-	WALL = 0x40000000;
-	WNOTHREAD = 0x20000000;
-	AF_UNIX = 0x1;
-	AF_INET = 0x2;
-	AF_INET6 = 0xa;
-	SOCK_STREAM = 0x1;
-	SOCK_DGRAM = 0x2;
-	SOCK_RAW = 0x3;
-	SOCK_SEQPACKET = 0x5;
-	SOL_SOCKET = 0x1;
-	SO_REUSEADDR = 0x2;
-	SO_KEEPALIVE = 0x9;
-	SO_DONTROUTE = 0x5;
-	SO_BROADCAST = 0x6;
-	SO_LINGER = 0xd;
-	SO_SNDBUF = 0x7;
-	SO_RCVBUF = 0x8;
-	SO_SNDTIMEO = 0x15;
-	SO_RCVTIMEO = 0x14;
-	IPPROTO_TCP = 0x6;
-	IPPROTO_UDP = 0x11;
-	TCP_NODELAY = 0x1;
-	SOMAXCONN = 0x80;
-	SizeofSockaddrInet4 = 0x10;
-	SizeofSockaddrInet6 = 0x1c;
-	SizeofSockaddrAny = 0x1c;
-	SizeofSockaddrUnix = 0x6e;
-	_PTRACE_TRACEME = 0;
-	_PTRACE_PEEKTEXT = 0x1;
-	_PTRACE_PEEKDATA = 0x2;
-	_PTRACE_PEEKUSER = 0x3;
-	_PTRACE_POKETEXT = 0x4;
-	_PTRACE_POKEDATA = 0x5;
-	_PTRACE_POKEUSER = 0x6;
-	_PTRACE_CONT = 0x7;
-	_PTRACE_KILL = 0x8;
-	_PTRACE_SINGLESTEP = 0x9;
-	_PTRACE_GETREGS = 0xc;
-	_PTRACE_SETREGS = 0xd;
-	_PTRACE_GETFPREGS = 0xe;
-	_PTRACE_SETFPREGS = 0xf;
-	_PTRACE_ATTACH = 0x10;
-	_PTRACE_DETACH = 0x11;
-	_PTRACE_GETFPXREGS = 0x12;
-	_PTRACE_SETFPXREGS = 0x13;
-	_PTRACE_SYSCALL = 0x18;
-	_PTRACE_SETOPTIONS = 0x4200;
-	_PTRACE_GETEVENTMSG = 0x4201;
-	_PTRACE_GETSIGINFO = 0x4202;
-	_PTRACE_SETSIGINFO = 0x4203;
-	PTRACE_O_TRACESYSGOOD = 0x1;
-	PTRACE_O_TRACEFORK = 0x2;
-	PTRACE_O_TRACEVFORK = 0x4;
-	PTRACE_O_TRACECLONE = 0x8;
-	PTRACE_O_TRACEEXEC = 0x10;
-	PTRACE_O_TRACEVFORKDONE = 0x20;
-	PTRACE_O_TRACEEXIT = 0x40;
-	PTRACE_O_MASK = 0x7f;
-	PTRACE_EVENT_FORK = 0x1;
-	PTRACE_EVENT_VFORK = 0x2;
-	PTRACE_EVENT_CLONE = 0x3;
-	PTRACE_EVENT_EXEC = 0x4;
-	PTRACE_EVENT_VFORK_DONE = 0x5;
-	PTRACE_EVENT_EXIT = 0x6;
-	EPOLLIN = 0x1;
-	EPOLLRDHUP = 0x2000;
-	EPOLLOUT = 0x4;
-	EPOLLONESHOT = 0x40000000;
-	EPOLL_CTL_MOD = 0x3;
-	EPOLL_CTL_ADD = 0x1;
-	EPOLL_CTL_DEL = 0x2;
+	sizeofPtr		= 0x4;
+	sizeofShort		= 0x2;
+	sizeofInt		= 0x4;
+	sizeofLong		= 0x4;
+	sizeofLongLong		= 0x8;
+	PathMax			= 0x1000;
+	O_RDONLY		= 0;
+	O_WRONLY		= 0x1;
+	O_RDWR			= 0x2;
+	O_APPEND		= 0x400;
+	O_ASYNC			= 0x2000;
+	O_CREAT			= 0x40;
+	O_NOCTTY		= 0x100;
+	O_NONBLOCK		= 0x800;
+	O_SYNC			= 0x1000;
+	O_TRUNC			= 0x200;
+	O_CLOEXEC		= 0;
+	F_GETFD			= 0x1;
+	F_SETFD			= 0x2;
+	F_GETFL			= 0x3;
+	F_SETFL			= 0x4;
+	FD_CLOEXEC		= 0x1;
+	NAME_MAX		= 0xff;
+	S_IFMT			= 0xf000;
+	S_IFIFO			= 0x1000;
+	S_IFCHR			= 0x2000;
+	S_IFDIR			= 0x4000;
+	S_IFBLK			= 0x6000;
+	S_IFREG			= 0x8000;
+	S_IFLNK			= 0xa000;
+	S_IFSOCK		= 0xc000;
+	S_ISUID			= 0x800;
+	S_ISGID			= 0x400;
+	S_ISVTX			= 0x200;
+	S_IRUSR			= 0x100;
+	S_IWUSR			= 0x80;
+	S_IXUSR			= 0x40;
+	WNOHANG			= 0x1;
+	WUNTRACED		= 0x2;
+	WEXITED			= 0x4;
+	WSTOPPED		= 0x2;
+	WCONTINUED		= 0x8;
+	WNOWAIT			= 0x1000000;
+	WCLONE			= 0x80000000;
+	WALL			= 0x40000000;
+	WNOTHREAD		= 0x20000000;
+	AF_UNIX			= 0x1;
+	AF_INET			= 0x2;
+	AF_INET6		= 0xa;
+	SOCK_STREAM		= 0x1;
+	SOCK_DGRAM		= 0x2;
+	SOCK_RAW		= 0x3;
+	SOCK_SEQPACKET		= 0x5;
+	SOL_SOCKET		= 0x1;
+	SO_REUSEADDR		= 0x2;
+	SO_KEEPALIVE		= 0x9;
+	SO_DONTROUTE		= 0x5;
+	SO_BROADCAST		= 0x6;
+	SO_LINGER		= 0xd;
+	SO_SNDBUF		= 0x7;
+	SO_RCVBUF		= 0x8;
+	SO_SNDTIMEO		= 0x15;
+	SO_RCVTIMEO		= 0x14;
+	IPPROTO_TCP		= 0x6;
+	IPPROTO_UDP		= 0x11;
+	TCP_NODELAY		= 0x1;
+	SOMAXCONN		= 0x80;
+	SizeofSockaddrInet4	= 0x10;
+	SizeofSockaddrInet6	= 0x1c;
+	SizeofSockaddrAny	= 0x1c;
+	SizeofSockaddrUnix	= 0x6e;
+	_PTRACE_TRACEME		= 0;
+	_PTRACE_PEEKTEXT	= 0x1;
+	_PTRACE_PEEKDATA	= 0x2;
+	_PTRACE_PEEKUSER	= 0x3;
+	_PTRACE_POKETEXT	= 0x4;
+	_PTRACE_POKEDATA	= 0x5;
+	_PTRACE_POKEUSER	= 0x6;
+	_PTRACE_CONT		= 0x7;
+	_PTRACE_KILL		= 0x8;
+	_PTRACE_SINGLESTEP	= 0x9;
+	_PTRACE_GETREGS		= 0xc;
+	_PTRACE_SETREGS		= 0xd;
+	_PTRACE_GETFPREGS	= 0xe;
+	_PTRACE_SETFPREGS	= 0xf;
+	_PTRACE_ATTACH		= 0x10;
+	_PTRACE_DETACH		= 0x11;
+	_PTRACE_GETFPXREGS	= 0x12;
+	_PTRACE_SETFPXREGS	= 0x13;
+	_PTRACE_SYSCALL		= 0x18;
+	_PTRACE_SETOPTIONS	= 0x4200;
+	_PTRACE_GETEVENTMSG	= 0x4201;
+	_PTRACE_GETSIGINFO	= 0x4202;
+	_PTRACE_SETSIGINFO	= 0x4203;
+	PTRACE_O_TRACESYSGOOD	= 0x1;
+	PTRACE_O_TRACEFORK	= 0x2;
+	PTRACE_O_TRACEVFORK	= 0x4;
+	PTRACE_O_TRACECLONE	= 0x8;
+	PTRACE_O_TRACEEXEC	= 0x10;
+	PTRACE_O_TRACEVFORKDONE	= 0x20;
+	PTRACE_O_TRACEEXIT	= 0x40;
+	PTRACE_O_MASK		= 0x7f;
+	PTRACE_EVENT_FORK	= 0x1;
+	PTRACE_EVENT_VFORK	= 0x2;
+	PTRACE_EVENT_CLONE	= 0x3;
+	PTRACE_EVENT_EXEC	= 0x4;
+	PTRACE_EVENT_VFORK_DONE	= 0x5;
+	PTRACE_EVENT_EXIT	= 0x6;
+	EPOLLIN			= 0x1;
+	EPOLLRDHUP		= 0x2000;
+	EPOLLOUT		= 0x4;
+	EPOLLONESHOT		= 0x40000000;
+	EPOLL_CTL_MOD		= 0x3;
+	EPOLL_CTL_ADD		= 0x1;
+	EPOLL_CTL_DEL		= 0x2;
 )
 
 // Types
@@ -134,194 +134,194 @@ type _C_long int32
 type _C_long_long int64
 
 type Timespec struct {
-	Sec int32;
-	Nsec int32;
+	Sec	int32;
+	Nsec	int32;
 }
 
 type Timeval struct {
-	Sec int32;
-	Usec int32;
+	Sec	int32;
+	Usec	int32;
 }
 
 type Timex struct {
-	Modes uint32;
-	Offset int32;
-	Freq int32;
-	Maxerror int32;
-	Esterror int32;
-	Status int32;
-	Constant int32;
-	Precision int32;
-	Tolerance int32;
-	Time Timeval;
-	Tick int32;
-	Ppsfreq int32;
-	Jitter int32;
-	Shift int32;
-	Stabil int32;
-	Jitcnt int32;
-	Calcnt int32;
-	Errcnt int32;
-	Stbcnt int32;
-	Pad0 int32;
-	Pad1 int32;
-	Pad2 int32;
-	Pad3 int32;
-	Pad4 int32;
-	Pad5 int32;
-	Pad6 int32;
-	Pad7 int32;
-	Pad8 int32;
-	Pad9 int32;
-	Pad10 int32;
-	Pad11 int32;
+	Modes		uint32;
+	Offset		int32;
+	Freq		int32;
+	Maxerror	int32;
+	Esterror	int32;
+	Status		int32;
+	Constant	int32;
+	Precision	int32;
+	Tolerance	int32;
+	Time		Timeval;
+	Tick		int32;
+	Ppsfreq		int32;
+	Jitter		int32;
+	Shift		int32;
+	Stabil		int32;
+	Jitcnt		int32;
+	Calcnt		int32;
+	Errcnt		int32;
+	Stbcnt		int32;
+	Pad0		int32;
+	Pad1		int32;
+	Pad2		int32;
+	Pad3		int32;
+	Pad4		int32;
+	Pad5		int32;
+	Pad6		int32;
+	Pad7		int32;
+	Pad8		int32;
+	Pad9		int32;
+	Pad10		int32;
+	Pad11		int32;
 }
 
 type Time_t int32
 
 type Tms struct {
-	Utime int32;
-	Stime int32;
-	Cutime int32;
-	Cstime int32;
+	Utime	int32;
+	Stime	int32;
+	Cutime	int32;
+	Cstime	int32;
 }
 
 type Utimbuf struct {
-	Actime int32;
-	Modtime int32;
+	Actime	int32;
+	Modtime	int32;
 }
 
 type Rusage struct {
-	Utime Timeval;
-	Stime Timeval;
-	Maxrss int32;
-	Ixrss int32;
-	Idrss int32;
-	Isrss int32;
-	Minflt int32;
-	Majflt int32;
-	Nswap int32;
-	Inblock int32;
-	Oublock int32;
-	Msgsnd int32;
-	Msgrcv int32;
-	Nsignals int32;
-	Nvcsw int32;
-	Nivcsw int32;
+	Utime		Timeval;
+	Stime		Timeval;
+	Maxrss		int32;
+	Ixrss		int32;
+	Idrss		int32;
+	Isrss		int32;
+	Minflt		int32;
+	Majflt		int32;
+	Nswap		int32;
+	Inblock		int32;
+	Oublock		int32;
+	Msgsnd		int32;
+	Msgrcv		int32;
+	Nsignals	int32;
+	Nvcsw		int32;
+	Nivcsw		int32;
 }
 
 type Rlimit struct {
-	Cur uint64;
-	Max uint64;
+	Cur	uint64;
+	Max	uint64;
 }
 
 type _Gid_t uint32
 
 type Stat_t struct {
-	Dev uint64;
-	__pad1 uint16;
-	Pad0 [2]byte;
-	__st_ino uint32;
-	Mode uint32;
-	Nlink uint32;
-	Uid uint32;
-	Gid uint32;
-	Rdev uint64;
-	__pad2 uint16;
-	Pad1 [2]byte;
-	Size int64;
-	Blksize int32;
-	Blocks int64;
-	Atim Timespec;
-	Mtim Timespec;
-	Ctim Timespec;
-	Ino uint64;
+	Dev		uint64;
+	__pad1		uint16;
+	Pad0		[2]byte;
+	__st_ino	uint32;
+	Mode		uint32;
+	Nlink		uint32;
+	Uid		uint32;
+	Gid		uint32;
+	Rdev		uint64;
+	__pad2		uint16;
+	Pad1		[2]byte;
+	Size		int64;
+	Blksize		int32;
+	Blocks		int64;
+	Atim		Timespec;
+	Mtim		Timespec;
+	Ctim		Timespec;
+	Ino		uint64;
 }
 
 type Statfs_t struct {
-	Type int32;
-	Bsize int32;
-	Blocks uint64;
-	Bfree uint64;
-	Bavail uint64;
-	Files uint64;
-	Ffree uint64;
-	Fsid [8]byte /* __fsid_t */;
-	Namelen int32;
-	Frsize int32;
-	Spare [5]int32;
+	Type	int32;
+	Bsize	int32;
+	Blocks	uint64;
+	Bfree	uint64;
+	Bavail	uint64;
+	Files	uint64;
+	Ffree	uint64;
+	Fsid	[8]byte;	/* __fsid_t */
+	Namelen	int32;
+	Frsize	int32;
+	Spare	[5]int32;
 }
 
 type Dirent struct {
-	Ino uint64;
-	Off int64;
-	Reclen uint16;
-	Type uint8;
-	Name [256]int8;
-	Pad0 [1]byte;
+	Ino	uint64;
+	Off	int64;
+	Reclen	uint16;
+	Type	uint8;
+	Name	[256]int8;
+	Pad0	[1]byte;
 }
 
 type RawSockaddrInet4 struct {
-	Family uint16;
-	Port uint16;
-	Addr [4]byte /* in_addr */;
-	Zero [8]uint8;
+	Family	uint16;
+	Port	uint16;
+	Addr	[4]byte;	/* in_addr */
+	Zero	[8]uint8;
 }
 
 type RawSockaddrInet6 struct {
-	Family uint16;
-	Port uint16;
-	Flowinfo uint32;
-	Addr [16]byte /* in6_addr */;
-	Scope_id uint32;
+	Family		uint16;
+	Port		uint16;
+	Flowinfo	uint32;
+	Addr		[16]byte;	/* in6_addr */
+	Scope_id	uint32;
 }
 
 type RawSockaddrUnix struct {
-	Family uint16;
-	Path [108]int8;
+	Family	uint16;
+	Path	[108]int8;
 }
 
 type RawSockaddr struct {
-	Family uint16;
-	Data [14]int8;
+	Family	uint16;
+	Data	[14]int8;
 }
 
 type RawSockaddrAny struct {
-	Addr RawSockaddr;
-	Pad [12]int8;
+	Addr	RawSockaddr;
+	Pad	[12]int8;
 }
 
 type _Socklen uint32
 
 type Linger struct {
-	Onoff int32;
-	Linger int32;
+	Onoff	int32;
+	Linger	int32;
 }
 
 type PtraceRegs struct {
-	Ebx int32;
-	Ecx int32;
-	Edx int32;
-	Esi int32;
-	Edi int32;
-	Ebp int32;
-	Eax int32;
-	Ds uint16;
-	__ds uint16;
-	Es uint16;
-	__es uint16;
-	Fs uint16;
-	__fs uint16;
-	Gs uint16;
-	__gs uint16;
-	Orig_eax int32;
-	Eip int32;
-	Cs uint16;
-	__cs uint16;
-	Eflags int32;
-	Esp int32;
-	Ss uint16;
-	__ss uint16;
+	Ebx		int32;
+	Ecx		int32;
+	Edx		int32;
+	Esi		int32;
+	Edi		int32;
+	Ebp		int32;
+	Eax		int32;
+	Ds		uint16;
+	__ds		uint16;
+	Es		uint16;
+	__es		uint16;
+	Fs		uint16;
+	__fs		uint16;
+	Gs		uint16;
+	__gs		uint16;
+	Orig_eax	int32;
+	Eip		int32;
+	Cs		uint16;
+	__cs		uint16;
+	Eflags		int32;
+	Esp		int32;
+	Ss		uint16;
+	__ss		uint16;
 }
 
 type FdSet struct {
@@ -329,40 +329,40 @@ type FdSet struct {
 }
 
 type Sysinfo_t struct {
-	Uptime int32;
-	Loads [3]uint32;
-	Totalram uint32;
-	Freeram uint32;
-	Sharedram uint32;
-	Bufferram uint32;
-	Totalswap uint32;
-	Freeswap uint32;
-	Procs uint16;
-	Pad uint16;
-	Totalhigh uint32;
-	Freehigh uint32;
-	Unit uint32;
-	_f [8]int8;
+	Uptime		int32;
+	Loads		[3]uint32;
+	Totalram	uint32;
+	Freeram		uint32;
+	Sharedram	uint32;
+	Bufferram	uint32;
+	Totalswap	uint32;
+	Freeswap	uint32;
+	Procs		uint16;
+	Pad		uint16;
+	Totalhigh	uint32;
+	Freehigh	uint32;
+	Unit		uint32;
+	_f		[8]int8;
 }
 
 type Utsname struct {
-	Sysname [65]int8;
-	Nodename [65]int8;
-	Release [65]int8;
-	Version [65]int8;
-	Machine [65]int8;
-	Domainname [65]int8;
+	Sysname		[65]int8;
+	Nodename	[65]int8;
+	Release		[65]int8;
+	Version		[65]int8;
+	Machine		[65]int8;
+	Domainname	[65]int8;
 }
 
 type Ustat_t struct {
-	Tfree int32;
-	Tinode uint32;
-	Fname [6]int8;
-	Fpack [6]int8;
+	Tfree	int32;
+	Tinode	uint32;
+	Fname	[6]int8;
+	Fpack	[6]int8;
 }
 
 type EpollEvent struct {
-	Events uint32;
-	Fd int32;
-	Pad int32;
+	Events	uint32;
+	Fd	int32;
+	Pad	int32;
 }
diff --git a/src/pkg/syscall/ztypes_nacl_386.go b/src/pkg/syscall/ztypes_nacl_386.go
index e2c33a2c5f..4bf66a4aa8 100644
--- a/src/pkg/syscall/ztypes_nacl_386.go
+++ b/src/pkg/syscall/ztypes_nacl_386.go
@@ -6,50 +6,50 @@ package syscall
 
 // Constants
 const (
-	sizeofPtr = 0x4;
-	sizeofShort = 0x2;
-	sizeofInt = 0x4;
-	sizeofLong = 0x4;
-	sizeofLongLong = 0x8;
-	PROT_READ = 0x1;
-	PROT_WRITE = 0x2;
-	MAP_SHARED = 0x1;
-	SYS_FORK = 0;
-	SYS_PTRACE = 0;
-	SYS_CHDIR = 0;
-	SYS_DUP2 = 0;
-	SYS_FCNTL = 0;
-	SYS_EXECVE = 0;
-	O_RDONLY = 0;
-	O_WRONLY = 0x1;
-	O_RDWR = 0x2;
-	O_APPEND = 0x400;
-	O_ASYNC = 0x2000;
-	O_CREAT = 0x40;
-	O_NOCTTY = 0;
-	O_NONBLOCK = 0x800;
-	O_SYNC = 0x1000;
-	O_TRUNC = 0x200;
-	O_CLOEXEC = 0;
-	F_GETFD = 0x1;
-	F_SETFD = 0x2;
-	F_GETFL = 0x3;
-	F_SETFL = 0x4;
-	FD_CLOEXEC = 0;
-	S_IFMT = 0x1f000;
-	S_IFIFO = 0x1000;
-	S_IFCHR = 0x2000;
-	S_IFDIR = 0x4000;
-	S_IFBLK = 0x6000;
-	S_IFREG = 0x8000;
-	S_IFLNK = 0xa000;
-	S_IFSOCK = 0xc000;
-	S_ISUID = 0x800;
-	S_ISGID = 0x400;
-	S_ISVTX = 0x200;
-	S_IRUSR = 0x100;
-	S_IWUSR = 0x80;
-	S_IXUSR = 0x40;
+	sizeofPtr	= 0x4;
+	sizeofShort	= 0x2;
+	sizeofInt	= 0x4;
+	sizeofLong	= 0x4;
+	sizeofLongLong	= 0x8;
+	PROT_READ	= 0x1;
+	PROT_WRITE	= 0x2;
+	MAP_SHARED	= 0x1;
+	SYS_FORK	= 0;
+	SYS_PTRACE	= 0;
+	SYS_CHDIR	= 0;
+	SYS_DUP2	= 0;
+	SYS_FCNTL	= 0;
+	SYS_EXECVE	= 0;
+	O_RDONLY	= 0;
+	O_WRONLY	= 0x1;
+	O_RDWR		= 0x2;
+	O_APPEND	= 0x400;
+	O_ASYNC		= 0x2000;
+	O_CREAT		= 0x40;
+	O_NOCTTY	= 0;
+	O_NONBLOCK	= 0x800;
+	O_SYNC		= 0x1000;
+	O_TRUNC		= 0x200;
+	O_CLOEXEC	= 0;
+	F_GETFD		= 0x1;
+	F_SETFD		= 0x2;
+	F_GETFL		= 0x3;
+	F_SETFL		= 0x4;
+	FD_CLOEXEC	= 0;
+	S_IFMT		= 0x1f000;
+	S_IFIFO		= 0x1000;
+	S_IFCHR		= 0x2000;
+	S_IFDIR		= 0x4000;
+	S_IFBLK		= 0x6000;
+	S_IFREG		= 0x8000;
+	S_IFLNK		= 0xa000;
+	S_IFSOCK	= 0xc000;
+	S_ISUID		= 0x800;
+	S_ISGID		= 0x400;
+	S_ISVTX		= 0x200;
+	S_IRUSR		= 0x100;
+	S_IWUSR		= 0x80;
+	S_IXUSR		= 0x40;
 )
 
 // Types
@@ -65,13 +65,13 @@ type _C_long_long int64
 type _C_off_t int32
 
 type Timespec struct {
-	Sec int32;
-	Nsec int32;
+	Sec	int32;
+	Nsec	int32;
 }
 
 type Timeval struct {
-	Sec int32;
-	Usec int32;
+	Sec	int32;
+	Usec	int32;
 }
 
 type Time_t int32
@@ -79,26 +79,26 @@ type Time_t int32
 type _Gid_t uint32
 
 type Stat_t struct {
-	Dev int64;
-	Ino uint32;
-	Mode uint32;
-	Nlink uint32;
-	Uid uint32;
-	Gid uint32;
-	__padding int32;
-	Rdev int64;
-	Size int32;
-	Blksize int32;
-	Blocks int32;
-	Atime int32;
-	Mtime int32;
-	Ctime int32;
+	Dev		int64;
+	Ino		uint32;
+	Mode		uint32;
+	Nlink		uint32;
+	Uid		uint32;
+	Gid		uint32;
+	__padding	int32;
+	Rdev		int64;
+	Size		int32;
+	Blksize		int32;
+	Blocks		int32;
+	Atime		int32;
+	Mtime		int32;
+	Ctime		int32;
 }
 
 type Dirent struct {
-	Ino uint32;
-	Off int32;
-	Reclen uint16;
-	Name [256]int8;
-	Pad0 [2]byte;
+	Ino	uint32;
+	Off	int32;
+	Reclen	uint16;
+	Name	[256]int8;
+	Pad0	[2]byte;
 }
