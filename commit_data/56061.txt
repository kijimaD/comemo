commit 0c89487b1d9bac744091a5ff2a09541c71b66b85
Author: Bryan C. Mills <bcmills@google.com>
Date:   Thu Apr 6 18:40:51 2023 +0000

    cmd/go/internal/modfetch/codehost: set core.longpaths in Git repos on Windows
    
    This setting appears to be needed to avoid “Filename too long” errors
    when downloading modules from repos with long branch names,
    particularly if the path to the module cache is already fairly long
    (as may be the case in CI systems and in tests of cmd/go itself).
    
    Change-Id: I3aa89ea872b29eb0460c8a8afc94f182a68982fd
    Reviewed-on: https://go-review.googlesource.com/c/go/+/482819
    Reviewed-by: Russ Cox <rsc@golang.org>
    Reviewed-by: Heschi Kreinick <heschi@google.com>
    Run-TryBot: Bryan Mills <bcmills@google.com>
    Auto-Submit: Bryan Mills <bcmills@google.com>
    TryBot-Result: Gopher Robot <gobot@golang.org>
---
 src/cmd/go/internal/modfetch/codehost/git.go | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)

diff --git a/src/cmd/go/internal/modfetch/codehost/git.go b/src/cmd/go/internal/modfetch/codehost/git.go
index 93c39cf3da..d18f890789 100644
--- a/src/cmd/go/internal/modfetch/codehost/git.go
+++ b/src/cmd/go/internal/modfetch/codehost/git.go
@@ -16,6 +16,7 @@ import (
 	"os"
 	"os/exec"
 	"path/filepath"
+	"runtime"
 	"sort"
 	"strconv"
 	"strings"
@@ -88,6 +89,21 @@ func newGitRepo(remote string, localOK bool) (Repo, error) {
 				os.RemoveAll(r.dir)
 				return nil, err
 			}
+			if runtime.GOOS == "windows" {
+				// Git for Windows by default does not support paths longer than
+				// MAX_PATH (260 characters) because that may interfere with navigation
+				// in some Windows programs. However, cmd/go should be able to handle
+				// long paths just fine, and we expect people to use 'go clean' to
+				// manipulate the module cache, so it should be harmless to set here,
+				// and in some cases may be necessary in order to download modules with
+				// long branch names.
+				//
+				// See https://github.com/git-for-windows/git/wiki/Git-cannot-create-a-file-or-directory-with-a-long-path.
+				if _, err := Run(r.dir, "git", "config", "core.longpaths", "true"); err != nil {
+					os.RemoveAll(r.dir)
+					return nil, err
+				}
+			}
 		}
 		r.remoteURL = r.remote
 		r.remote = "origin"
