commit da59dd41c2be2453f0ca9a0967e671adee43e638
Author: Russ Cox <rsc@golang.org>
Date:   Fri May 22 22:40:08 2009 -0700

    simple logging shim reader and writers
    
    R=r
    DELTA=53  (52 added, 0 deleted, 1 changed)
    OCL=29295
    CL=29298
---
 src/lib/testing/iotest/Makefile  |  3 ++-
 src/lib/testing/iotest/logger.go | 55 ++++++++++++++++++++++++++++++++++++++++
 2 files changed, 57 insertions(+), 1 deletion(-)

diff --git a/src/lib/testing/iotest/Makefile b/src/lib/testing/iotest/Makefile
index 5bfa513c73..1ca8d81603 100644
--- a/src/lib/testing/iotest/Makefile
+++ b/src/lib/testing/iotest/Makefile
@@ -40,6 +40,7 @@ coverage: packages
 	$(AS) $*.s
 
 O1=\
+	logger.$O\
 	reader.$O\
 
 
@@ -47,7 +48,7 @@ phases: a1
 _obj$D/iotest.a: phases
 
 a1: $(O1)
-	$(AR) grc _obj$D/iotest.a reader.$O
+	$(AR) grc _obj$D/iotest.a logger.$O reader.$O
 	rm -f $(O1)
 
 
diff --git a/src/lib/testing/iotest/logger.go b/src/lib/testing/iotest/logger.go
new file mode 100644
index 0000000000..8ee574080d
--- /dev/null
+++ b/src/lib/testing/iotest/logger.go
@@ -0,0 +1,55 @@
+// Copyright 2009 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package iotest
+
+import (
+	"io";
+	"log";
+	"os";
+)
+
+type writeLogger struct {
+	prefix string;
+	w io.Writer;
+}
+
+func (l *writeLogger) Write(p []byte) (n int, err os.Error) {
+	n, err = l.w.Write(p);
+	if err != nil {
+		log.Stdoutf("%s %x: %v", l.prefix, p[0:n], err);
+	} else {
+		log.Stdoutf("%s %x", l.prefix, p[0:n]);
+	}
+	return;
+}
+
+// NewWriteLogger returns a writer that behaves like w except
+// that it logs (using log.Stdout) each write to standard output,
+// printing the prefix and the hexadecimal data written.
+func NewWriteLogger(prefix string, w io.Writer) io.Writer {
+	return &writeLogger{prefix, w}
+}
+
+type readLogger struct {
+	prefix string;
+	r io.Reader;
+}
+
+func (l *readLogger) Read(p []byte) (n int, err os.Error) {
+	n, err = l.r.Read(p);
+	if err != nil {
+		log.Stdoutf("%s %x: %v", l.prefix, p[0:n], err);
+	} else {
+		log.Stdoutf("%s %x", l.prefix, p[0:n]);
+	}
+	return;
+}
+
+// NewReadLogger returns a writer that behaves like w except
+// that it logs (using log.Stdout) each write to standard output,
+// printing the prefix and the hexadecimal data written.
+func NewReadLogger(prefix string, r io.Reader) io.Reader {
+	return &readLogger{prefix, r}
+}
