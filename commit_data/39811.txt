commit 98891386146413e902bef41a7feb7595b86e4c1d
Author: Iskander Sharipov <quasilyte@gmail.com>
Date:   Fri Mar 22 15:30:30 2019 +0300

    sort: replace Errorf+FailNow with Fatalf
    
    Change-Id: I4f8d0178e780b86d1f551b367e2ddac3789be5aa
    Reviewed-on: https://go-review.googlesource.com/c/go/+/168880
    Run-TryBot: Ian Lance Taylor <iant@golang.org>
    Reviewed-by: Ian Lance Taylor <iant@golang.org>
---
 src/sort/sort_test.go | 10 +++-------
 1 file changed, 3 insertions(+), 7 deletions(-)

diff --git a/src/sort/sort_test.go b/src/sort/sort_test.go
index 3b31143a74..bfff3528d3 100644
--- a/src/sort/sort_test.go
+++ b/src/sort/sort_test.go
@@ -323,8 +323,7 @@ func (d *testingData) Less(i, j int) bool {
 }
 func (d *testingData) Swap(i, j int) {
 	if d.nswap >= d.maxswap {
-		d.t.Errorf("%s: used %d swaps sorting slice of %d", d.desc, d.nswap, len(d.data))
-		d.t.FailNow()
+		d.t.Fatalf("%s: used %d swaps sorting slice of %d", d.desc, d.nswap, len(d.data))
 	}
 	d.nswap++
 	d.data[i], d.data[j] = d.data[j], d.data[i]
@@ -433,9 +432,7 @@ func testBentleyMcIlroy(t *testing.T, sort func(Interface), maxswap func(int) in
 					// mutating method Sort can call is TestingData.swap,
 					// it suffices here just to check that the final slice is sorted.
 					if !IntsAreSorted(mdata) {
-						t.Errorf("%s: ints not sorted", desc)
-						t.Errorf("\t%v", mdata)
-						t.FailNow()
+						t.Fatalf("%s: ints not sorted\n\t%v", desc, mdata)
 					}
 				}
 			}
@@ -517,8 +514,7 @@ func TestAdversary(t *testing.T) {
 	// Check data is fully populated and sorted.
 	for i, v := range d.data {
 		if v != i {
-			t.Errorf("adversary data not fully sorted")
-			t.FailNow()
+			t.Fatalf("adversary data not fully sorted")
 		}
 	}
 }
