commit cc7e11c91ebb9d30b260cf92e66e94f3217b45e6
Author: Rob Pike <r@golang.org>
Date:   Mon Feb 27 14:34:16 2012 +1100

    doc/go1: mention that regexp has changed
    Also restore alphabetical order.
    
    R=golang-dev, bradfitz
    CC=golang-dev
    https://golang.org/cl/5701053
---
 doc/go1.html | 64 ++++++++++++++++++++++++++++++++++++------------------------
 doc/go1.tmpl | 64 ++++++++++++++++++++++++++++++++++++------------------------
 2 files changed, 78 insertions(+), 50 deletions(-)

diff --git a/doc/go1.html b/doc/go1.html
index 3309a40730..75a309fe9e 100644
--- a/doc/go1.html
+++ b/doc/go1.html
@@ -1702,6 +1702,39 @@ Code that uses the old POSIX error values from the <code>os</code> package
 will fail to compile and will also need to be updated by hand.
 </p>
 
+<h3 id="os_signal">The os/signal package</h3>
+
+<p>
+The <code>os/signal</code> package in Go 1 replaces the
+<code>Incoming</code> function, which returned a channel
+that received all incoming signals,
+with the selective <code>Notify</code> function, which asks
+for delivery of specific signals on an existing channel.
+</p>
+
+<p>
+<em>Updating</em>:
+Code must be updated by hand.
+A literal translation of
+</p>
+<pre>
+c := signal.Incoming()
+</pre>
+<p>
+is
+</p>
+<pre>
+c := make(chan os.Signal)
+signal.Notify(c) // ask for all signals
+</pre>
+<p>
+but most code should list the specific signals it wants to handle instead:
+</p>
+<pre>
+c := make(chan os.Signal)
+signal.Notify(c, syscall.SIGHUP, syscall.SIGQUIT)
+</pre>
+
 <h3 id="path_filepath">The path/filepath package</h3>
 
 <p>
@@ -1747,38 +1780,19 @@ will need to be updated by hand.
 The compiler will catch code using the old interface.
 </p>
 
-<h3 id="os_signal">The os/signal package</h3>
+<h3 id="regexp">The regexp package</h3>
 
 <p>
-The <code>os/signal</code> package in Go 1 replaces the
-<code>Incoming</code> function, which returned a channel
-that received all incoming signals,
-with the selective <code>Notify</code> function, which asks
-for delivery of specific signals on an existing channel.
+The <a href="/pkg/regexp/"><code>regexp</code></a> package has been rewritten.
+It has the same interface but the specification of the regular expressions 
+it supports has changed from the old "egrep" form to that of
+<a href="code.google.com/p/re2">RE2</a>.
 </p>
 
 <p>
 <em>Updating</em>:
-Code must be updated by hand.
-A literal translation of
+Code that uses the package should have its regular expressions checked by hand.
 </p>
-<pre>
-c := signal.Incoming()
-</pre>
-<p>
-is
-</p>
-<pre>
-c := make(chan os.Signal)
-signal.Notify(c) // ask for all signals
-</pre>
-<p>
-but most code should list the specific signals it wants to handle instead:
-</p>
-<pre>
-c := make(chan os.Signal)
-signal.Notify(c, syscall.SIGHUP, syscall.SIGQUIT)
-</pre>
 
 <h3 id="runtime">The runtime package</h3>
 
diff --git a/doc/go1.tmpl b/doc/go1.tmpl
index e3c6ea999d..6551daefd2 100644
--- a/doc/go1.tmpl
+++ b/doc/go1.tmpl
@@ -1601,6 +1601,39 @@ Code that uses the old POSIX error values from the <code>os</code> package
 will fail to compile and will also need to be updated by hand.
 </p>
 
+<h3 id="os_signal">The os/signal package</h3>
+
+<p>
+The <code>os/signal</code> package in Go 1 replaces the
+<code>Incoming</code> function, which returned a channel
+that received all incoming signals,
+with the selective <code>Notify</code> function, which asks
+for delivery of specific signals on an existing channel.
+</p>
+
+<p>
+<em>Updating</em>:
+Code must be updated by hand.
+A literal translation of
+</p>
+<pre>
+c := signal.Incoming()
+</pre>
+<p>
+is
+</p>
+<pre>
+c := make(chan os.Signal)
+signal.Notify(c) // ask for all signals
+</pre>
+<p>
+but most code should list the specific signals it wants to handle instead:
+</p>
+<pre>
+c := make(chan os.Signal)
+signal.Notify(c, syscall.SIGHUP, syscall.SIGQUIT)
+</pre>
+
 <h3 id="path_filepath">The path/filepath package</h3>
 
 <p>
@@ -1632,38 +1665,19 @@ will need to be updated by hand.
 The compiler will catch code using the old interface.
 </p>
 
-<h3 id="os_signal">The os/signal package</h3>
+<h3 id="regexp">The regexp package</h3>
 
 <p>
-The <code>os/signal</code> package in Go 1 replaces the
-<code>Incoming</code> function, which returned a channel
-that received all incoming signals,
-with the selective <code>Notify</code> function, which asks
-for delivery of specific signals on an existing channel.
+The <a href="/pkg/regexp/"><code>regexp</code></a> package has been rewritten.
+It has the same interface but the specification of the regular expressions 
+it supports has changed from the old "egrep" form to that of
+<a href="code.google.com/p/re2">RE2</a>.
 </p>
 
 <p>
 <em>Updating</em>:
-Code must be updated by hand.
-A literal translation of
+Code that uses the package should have its regular expressions checked by hand.
 </p>
-<pre>
-c := signal.Incoming()
-</pre>
-<p>
-is
-</p>
-<pre>
-c := make(chan os.Signal)
-signal.Notify(c) // ask for all signals
-</pre>
-<p>
-but most code should list the specific signals it wants to handle instead:
-</p>
-<pre>
-c := make(chan os.Signal)
-signal.Notify(c, syscall.SIGHUP, syscall.SIGQUIT)
-</pre>
 
 <h3 id="runtime">The runtime package</h3>
 
