commit b004c739b525d354ea62f5caadd962de4569d96e
Author: Robert Griesemer <gri@golang.org>
Date:   Tue Jun 21 15:56:16 2022 -0700

    go/types, types2: fix parameter order dependence in type inference
    
    If we have more than two function arguments to a generic function,
    we may have arguments with named and unnamed types. If that is the
    case, permutate params and args such that the arguments with named
    types are first in the list. This way, independent of parameter
    ordering, the type inference will produce the same result.
    
    This extra step is not explicitly outlined in the spec yet but we
    all agree that (parameter) order independence is an invariant that
    we should uphold for type inference. As we move towards less
    operational and more descriptive rules for type inference, we will
    incorporate this property as well.
    
    The actual fix for this bug existed before 1.18 but was not enabled.
    This CL merely enables the fix (switches a flag) and adjusts some
    tests.
    
    Fixes #43056.
    
    Change-Id: Ie4e40cf8438dfd82fa94b78068e4f6f6f53f83e6
    Reviewed-on: https://go-review.googlesource.com/c/go/+/413459
    Reviewed-by: Ian Lance Taylor <iant@google.com>
    Reviewed-by: Robert Griesemer <gri@google.com>
---
 src/cmd/compile/internal/types2/infer.go                         | 7 ++-----
 src/cmd/compile/internal/types2/testdata/examples/functions.go   | 2 +-
 src/cmd/compile/internal/types2/testdata/fixedbugs/issue43056.go | 4 ++--
 src/go/types/infer.go                                            | 7 ++-----
 src/go/types/testdata/examples/functions.go                      | 2 +-
 src/go/types/testdata/fixedbugs/issue43056.go                    | 4 ++--
 6 files changed, 10 insertions(+), 16 deletions(-)

diff --git a/src/cmd/compile/internal/types2/infer.go b/src/cmd/compile/internal/types2/infer.go
index b0c6a4fcea..8425cd6034 100644
--- a/src/cmd/compile/internal/types2/infer.go
+++ b/src/cmd/compile/internal/types2/infer.go
@@ -128,11 +128,8 @@ func (check *Checker) infer(pos syntax.Pos, tparams []*TypeParam, targs []Type,
 	// named and unnamed types are passed to parameters with identical type, different types
 	// (named vs underlying) may be inferred depending on the order of the arguments.
 	// By ensuring that named types are seen first, order dependence is avoided and unification
-	// succeeds where it can.
-	//
-	// This code is disabled for now pending decision whether we want to address cases like
-	// these and make the spec on type inference more complicated (see issue #43056).
-	const enableArgSorting = false
+	// succeeds where it can (issue #43056).
+	const enableArgSorting = true
 	if m := len(args); m >= 2 && enableArgSorting {
 		// Determine indices of arguments with named and unnamed types.
 		var named, unnamed []int
diff --git a/src/cmd/compile/internal/types2/testdata/examples/functions.go b/src/cmd/compile/internal/types2/testdata/examples/functions.go
index ef8953cb43..d50f79d11f 100644
--- a/src/cmd/compile/internal/types2/testdata/examples/functions.go
+++ b/src/cmd/compile/internal/types2/testdata/examples/functions.go
@@ -182,7 +182,7 @@ func _() {
 	type myString string
 	var s1 string
 	g3(nil, "1", myString("2"), "3")
-	g3(&s1, "1", myString /* ERROR does not match */ ("2"), "3")
+	g3(& /* ERROR does not match */ s1, "1", myString("2"), "3")
 	_ = s1
 
 	type myStruct struct{x int}
diff --git a/src/cmd/compile/internal/types2/testdata/fixedbugs/issue43056.go b/src/cmd/compile/internal/types2/testdata/fixedbugs/issue43056.go
index 35c7ef592d..8ff4e7f9b4 100644
--- a/src/cmd/compile/internal/types2/testdata/fixedbugs/issue43056.go
+++ b/src/cmd/compile/internal/types2/testdata/fixedbugs/issue43056.go
@@ -14,7 +14,7 @@ func _() {
 	var j func(F)
 
 	f(i, j)
-	// f(j, i) // disabled for now
+	f(j, i)
 }
 
 // example from issue
@@ -27,5 +27,5 @@ func _() {
 	var j interface{ Equal(I) bool }
 
 	g(i, j)
-	// g(j, i) // disabled for now
+	g(j, i)
 }
diff --git a/src/go/types/infer.go b/src/go/types/infer.go
index 1aa2612638..768efbf73b 100644
--- a/src/go/types/infer.go
+++ b/src/go/types/infer.go
@@ -128,11 +128,8 @@ func (check *Checker) infer(posn positioner, tparams []*TypeParam, targs []Type,
 	// named and unnamed types are passed to parameters with identical type, different types
 	// (named vs underlying) may be inferred depending on the order of the arguments.
 	// By ensuring that named types are seen first, order dependence is avoided and unification
-	// succeeds where it can.
-	//
-	// This code is disabled for now pending decision whether we want to address cases like
-	// these and make the spec on type inference more complicated (see issue #43056).
-	const enableArgSorting = false
+	// succeeds where it can (issue #43056).
+	const enableArgSorting = true
 	if m := len(args); m >= 2 && enableArgSorting {
 		// Determine indices of arguments with named and unnamed types.
 		var named, unnamed []int
diff --git a/src/go/types/testdata/examples/functions.go b/src/go/types/testdata/examples/functions.go
index 0af77267c5..1d30075c7c 100644
--- a/src/go/types/testdata/examples/functions.go
+++ b/src/go/types/testdata/examples/functions.go
@@ -182,7 +182,7 @@ func _() {
 	type myString string
 	var s1 string
 	g3(nil, "1", myString("2"), "3")
-	g3(&s1, "1", myString /* ERROR does not match */ ("2"), "3")
+	g3(& /* ERROR does not match */ s1, "1", myString("2"), "3")
 
 	type myStruct struct{x int}
 	var s2 myStruct
diff --git a/src/go/types/testdata/fixedbugs/issue43056.go b/src/go/types/testdata/fixedbugs/issue43056.go
index 35c7ef592d..8ff4e7f9b4 100644
--- a/src/go/types/testdata/fixedbugs/issue43056.go
+++ b/src/go/types/testdata/fixedbugs/issue43056.go
@@ -14,7 +14,7 @@ func _() {
 	var j func(F)
 
 	f(i, j)
-	// f(j, i) // disabled for now
+	f(j, i)
 }
 
 // example from issue
@@ -27,5 +27,5 @@ func _() {
 	var j interface{ Equal(I) bool }
 
 	g(i, j)
-	// g(j, i) // disabled for now
+	g(j, i)
 }
