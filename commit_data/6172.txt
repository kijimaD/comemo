commit cd8f4cd2068964bfa12e10cd094d41ddd725af4f
Author: Rob Pike <r@golang.org>
Date:   Sat Sep 4 10:22:49 2010 +1000

    tutorial: regenerate HTML to pick up change to progs/file.go.
    
    Fixes #1075.
    
    R=gri
    CC=golang-dev
    https://golang.org/cl/2104048
---
 doc/go_tutorial.html | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/doc/go_tutorial.html b/doc/go_tutorial.html
index 4c91a54242..a653fb032f 100644
--- a/doc/go_tutorial.html
+++ b/doc/go_tutorial.html
@@ -470,8 +470,8 @@ sort of open/close/read/write interface.  Here's the start of <code>file.go</cod
 10    )
 <p>
 12    type File struct {
-13        fd      int    // file descriptor number
-14        name    string // file name at Open time
+13        fd   int    // file descriptor number
+14        name string // file name at Open time
 15    }
 </pre>
 <p>
@@ -541,7 +541,7 @@ The <code>newFile</code> function was not exported because it's internal. The pr
 exported factory to use is <code>Open</code>:
 <p>
 <pre> <!-- progs/file.go /func.Open/ /^}/ -->
-30    func Open(name string, mode int, perm int) (file *File, err os.Error) {
+30    func Open(name string, mode int, perm uint32) (file *File, err os.Error) {
 31        r, e := syscall.Open(name, mode, perm)
 32        if e != 0 {
 33            err = os.Errno(e)
@@ -581,7 +581,7 @@ each of which declares a receiver variable <code>file</code>.
 40            return os.EINVAL
 41        }
 42        e := syscall.Close(file.fd)
-43        file.fd = -1  // so it can't be closed again
+43        file.fd = -1 // so it can't be closed again
 44        if e != 0 {
 45            return os.Errno(e)
 46        }
