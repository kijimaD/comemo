commit 6a0af8e1188c2adfd45f9e31bc044763fd014406
Author: Mark Zavislak <zavislak@google.com>
Date:   Tue Feb 23 12:01:09 2010 -0800

    crypto package documentation fix
    
    Replaces stale references to modes.go.
    
    R=golang-dev, agl, rsc
    CC=golang-dev
    https://golang.org/cl/218071
---
 src/pkg/crypto/aes/cipher.go  | 6 +++---
 src/pkg/crypto/xtea/cipher.go | 6 +++---
 2 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/src/pkg/crypto/aes/cipher.go b/src/pkg/crypto/aes/cipher.go
index a7caf55764..44e905e013 100644
--- a/src/pkg/crypto/aes/cipher.go
+++ b/src/pkg/crypto/aes/cipher.go
@@ -44,15 +44,15 @@ func NewCipher(key []byte) (*Cipher, os.Error) {
 }
 
 // BlockSize returns the AES block size, 16 bytes.
-// It is necessary to satisfy the Key interface in the
-// package "crypto/modes".
+// It is necessary to satisfy the Cipher interface in the
+// package "crypto/block".
 func (c *Cipher) BlockSize() int { return BlockSize }
 
 // Encrypt encrypts the 16-byte buffer src using the key k
 // and stores the result in dst.
 // Note that for amounts of data larger than a block,
 // it is not safe to just call Encrypt on successive blocks;
-// instead, use an encryption mode like AESCBC (see modes.go).
+// instead, use an encryption mode like CBC (see crypto/block/cbc.go).
 func (c *Cipher) Encrypt(src, dst []byte) { encryptBlock(c.enc, src, dst) }
 
 // Decrypt decrypts the 16-byte buffer src using the key k
diff --git a/src/pkg/crypto/xtea/cipher.go b/src/pkg/crypto/xtea/cipher.go
index 4fb3acbef3..144fe9434b 100644
--- a/src/pkg/crypto/xtea/cipher.go
+++ b/src/pkg/crypto/xtea/cipher.go
@@ -47,14 +47,14 @@ func NewCipher(key []byte) (*Cipher, os.Error) {
 }
 
 // BlockSize returns the XTEA block size, 8 bytes.
-// It is necessary to satisfy the Key interface in the
-// package "crypto/modes".
+// It is necessary to satisfy the Cipher interface in the
+// package "crypto/block".
 func (c *Cipher) BlockSize() int { return BlockSize }
 
 // Encrypt encrypts the 8 byte buffer src using the key and stores the result in dst.
 // Note that for amounts of data larger than a block,
 // it is not safe to just call Encrypt on successive blocks;
-// instead, use an encryption mode like XTEACBC (see modes.go).
+// instead, use an encryption mode like CBC (see crypto/block/cbc.go).
 func (c *Cipher) Encrypt(src, dst []byte) { encryptBlock(c, src, dst) }
 
 // Decrypt decrypts the 8 byte buffer src using the key k and stores the result in dst.
