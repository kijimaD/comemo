commit d980f538d7ebf1ce3922d8f5cf3e56f6680d0644
Author: Brad Fitzpatrick <bradfitz@golang.org>
Date:   Wed Jun 29 18:23:38 2011 -0700

    http: document that ServerConn and ClientConn are low-level
    
    R=golang-dev, r
    CC=golang-dev
    https://golang.org/cl/4635081
---
 src/pkg/http/persist.go | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/src/pkg/http/persist.go b/src/pkg/http/persist.go
index 62f9ff1b54..78bf9058f3 100644
--- a/src/pkg/http/persist.go
+++ b/src/pkg/http/persist.go
@@ -24,6 +24,9 @@ var (
 // to regain control over the connection. ServerConn supports pipe-lining,
 // i.e. requests can be read out of sync (but in the same order) while the
 // respective responses are sent.
+//
+// ServerConn is low-level and should not be needed by most applications.
+// See Server.
 type ServerConn struct {
 	lk              sync.Mutex // read-write protects the following fields
 	c               net.Conn
@@ -211,6 +214,9 @@ func (sc *ServerConn) Write(req *Request, resp *Response) os.Error {
 // connection, while respecting the HTTP keepalive logic. ClientConn
 // supports hijacking the connection calling Hijack to
 // regain control of the underlying net.Conn and deal with it as desired.
+//
+// ClientConn is low-level and should not be needed by most applications.
+// See Client.
 type ClientConn struct {
 	lk              sync.Mutex // read-write protects the following fields
 	c               net.Conn
