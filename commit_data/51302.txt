commit c74be77e63c0281abb45dbf9de31fa05a6824934
Author: Robert Griesemer <gri@golang.org>
Date:   Thu Jan 6 18:02:30 2022 -0800

    cmd/compile: accept string|[]byte-constrained 2nd argument in append
    
    Similarly to what we do for the built-in function `copy`,
    where we allow a string as 2nd argument to append, also
    permit a type parameter constrained by string|[]byte.
    
    While at it, change date in the manual.go2 test files so
    that we don't need to constantly correct it when copying
    a test case from that file into a proper test file.
    
    Fixes #50281.
    
    Change-Id: I23fed66736aa07bb3c481fe97313e828425ac448
    Reviewed-on: https://go-review.googlesource.com/c/go/+/376214
    Trust: Robert Griesemer <gri@golang.org>
    Reviewed-by: Robert Findley <rfindley@google.com>
---
 src/cmd/compile/internal/types2/builtins.go        |  2 +-
 .../types2/testdata/fixedbugs/issue50281.go2       | 26 ++++++++++++++++++++++
 .../compile/internal/types2/testdata/manual.go2    |  2 +-
 src/go/types/builtins.go                           |  2 +-
 src/go/types/testdata/fixedbugs/issue50281.go2     | 26 ++++++++++++++++++++++
 src/go/types/testdata/manual.go2                   |  2 +-
 test/typeparam/issue376214.go                      | 20 +++++++++++++++++
 7 files changed, 76 insertions(+), 4 deletions(-)

diff --git a/src/cmd/compile/internal/types2/builtins.go b/src/cmd/compile/internal/types2/builtins.go
index fcf02a6975..cea4fd3631 100644
--- a/src/cmd/compile/internal/types2/builtins.go
+++ b/src/cmd/compile/internal/types2/builtins.go
@@ -101,7 +101,7 @@ func (check *Checker) builtin(x *operand, call *syntax.CallExpr, id builtinId) (
 				if x.mode == invalid {
 					return
 				}
-				if allString(x.typ) {
+				if t := structuralString(x.typ); t != nil && isString(t) {
 					if check.Types != nil {
 						sig := makeSig(S, S, x.typ)
 						sig.variadic = true
diff --git a/src/cmd/compile/internal/types2/testdata/fixedbugs/issue50281.go2 b/src/cmd/compile/internal/types2/testdata/fixedbugs/issue50281.go2
new file mode 100644
index 0000000000..f333e81a70
--- /dev/null
+++ b/src/cmd/compile/internal/types2/testdata/fixedbugs/issue50281.go2
@@ -0,0 +1,26 @@
+// Copyright 2022 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package p
+
+func _[S string | []byte](s S) {
+	var buf []byte
+	_ = append(buf, s...)
+}
+
+func _[S ~string | ~[]byte](s S) {
+	var buf []byte
+	_ = append(buf, s...)
+}
+
+// test case from issue
+
+type byteseq interface {
+	string | []byte
+}
+
+// This should allow to eliminate the two functions above.
+func AppendByteString[source byteseq](buf []byte, s source) []byte {
+	return append(buf, s[1:6]...)
+}
diff --git a/src/cmd/compile/internal/types2/testdata/manual.go2 b/src/cmd/compile/internal/types2/testdata/manual.go2
index efe13cf8bc..96d4ba67c2 100644
--- a/src/cmd/compile/internal/types2/testdata/manual.go2
+++ b/src/cmd/compile/internal/types2/testdata/manual.go2
@@ -1,4 +1,4 @@
-// Copyright 2021 The Go Authors. All rights reserved.
+// Copyright 2022 The Go Authors. All rights reserved.
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
diff --git a/src/go/types/builtins.go b/src/go/types/builtins.go
index 828220f257..35a2d1ae2e 100644
--- a/src/go/types/builtins.go
+++ b/src/go/types/builtins.go
@@ -102,7 +102,7 @@ func (check *Checker) builtin(x *operand, call *ast.CallExpr, id builtinId) (_ b
 				if x.mode == invalid {
 					return
 				}
-				if allString(x.typ) {
+				if t := structuralString(x.typ); t != nil && isString(t) {
 					if check.Types != nil {
 						sig := makeSig(S, S, x.typ)
 						sig.variadic = true
diff --git a/src/go/types/testdata/fixedbugs/issue50281.go2 b/src/go/types/testdata/fixedbugs/issue50281.go2
new file mode 100644
index 0000000000..f333e81a70
--- /dev/null
+++ b/src/go/types/testdata/fixedbugs/issue50281.go2
@@ -0,0 +1,26 @@
+// Copyright 2022 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package p
+
+func _[S string | []byte](s S) {
+	var buf []byte
+	_ = append(buf, s...)
+}
+
+func _[S ~string | ~[]byte](s S) {
+	var buf []byte
+	_ = append(buf, s...)
+}
+
+// test case from issue
+
+type byteseq interface {
+	string | []byte
+}
+
+// This should allow to eliminate the two functions above.
+func AppendByteString[source byteseq](buf []byte, s source) []byte {
+	return append(buf, s[1:6]...)
+}
diff --git a/src/go/types/testdata/manual.go2 b/src/go/types/testdata/manual.go2
index 25e6f22f94..a7caee9903 100644
--- a/src/go/types/testdata/manual.go2
+++ b/src/go/types/testdata/manual.go2
@@ -1,4 +1,4 @@
-// Copyright 2021 The Go Authors. All rights reserved.
+// Copyright 2022 The Go Authors. All rights reserved.
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
diff --git a/test/typeparam/issue376214.go b/test/typeparam/issue376214.go
new file mode 100644
index 0000000000..8f94f4107d
--- /dev/null
+++ b/test/typeparam/issue376214.go
@@ -0,0 +1,20 @@
+// run -gcflags=-G=3
+
+// Copyright 2022 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package main
+
+func add[S ~string | ~[]byte](buf *[]byte, s S) {
+	*buf = append(*buf, s...)
+}
+
+func main() {
+	var buf []byte
+	add(&buf, "foo")
+	add(&buf, []byte("bar"))
+	if string(buf) != "foobar" {
+		panic("got " + string(buf))
+	}
+}
