commit 82c14346d89ec0eeca114f9ca0e88516b2cda454
Author: Cherry Mui <cherryyz@google.com>
Date:   Wed Jul 3 14:14:34 2024 -0400

    cmd/link: don't disable memory profiling when pprof.WriteHeapProfile is used
    
    We have an optimization that if the memory profile is not consumed
    anywhere, we set the memory profiling rate to 0 to disable the
    "background" low-rate profiling. We detect whether the memory
    profile is used by checking whether the runtime.MemProfile function
    is reachable at link time. Previously, all APIs that access the
    memory profile go through runtime.MemProfile. But the code was
    refactored in CL 572396, and now the legacy entry point
    WriteHeapProfile uses pprof_memProfileInternal without going
    through runtime.MemProfile. In fact, even with the recommended
    runtime/pprof.Profile API (pprof.Lookup or pprof.Profiles),
    runtime.MemProfile is only (happen to be) reachable through
    countHeap.
    
    Change the linker to check runtime.memProfileInternal instead,
    which is on all code paths that retrieve the memory profile. Add
    a test case for WriteHeapProfile, so we cover all entry points.
    
    Fixes #68136.
    
    Change-Id: I075c8d45c95c81825a1822f032e23107aea4303c
    Reviewed-on: https://go-review.googlesource.com/c/go/+/596538
    Reviewed-by: Than McIntosh <thanm@google.com>
    LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>

 src/cmd/link/internal/ld/ld_test.go | 29 ++++++++++++++++++++++++++++-
 src/cmd/link/internal/ld/lib.go     |  4 ++--
 src/runtime/mprof.go                | 10 +++++++++-
 src/runtime/pprof/pprof.go          |  3 ++-
 4 files changed, 41 insertions(+), 5 deletions(-)
