commit 0dae393a2643de239e5872260ec6e379f221f585
Author: Kir Kolyshkin <kolyshkin@gmail.com>
Date:   Wed Jul 10 19:07:05 2024 -0700

    encoding/binary: use list format in docstrings
    
    This looks way better than the code formatting.
    
    Similar to CL 597656.
    
    Change-Id: If404c952ece384aea096f2394bd475a601627a79
    Reviewed-on: https://go-review.googlesource.com/c/go/+/597657
    Reviewed-by: Cherry Mui <cherryyz@google.com>
    LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>
    Reviewed-by: Ian Lance Taylor <iant@google.com>
    Auto-Submit: Ian Lance Taylor <iant@google.com>
---
 src/encoding/binary/varint.go | 14 ++++++--------
 1 file changed, 6 insertions(+), 8 deletions(-)

diff --git a/src/encoding/binary/varint.go b/src/encoding/binary/varint.go
index 64dd9d61b4..c92ef82e82 100644
--- a/src/encoding/binary/varint.go
+++ b/src/encoding/binary/varint.go
@@ -62,10 +62,9 @@ func PutUvarint(buf []byte, x uint64) int {
 // Uvarint decodes a uint64 from buf and returns that value and the
 // number of bytes read (> 0). If an error occurred, the value is 0
 // and the number of bytes n is <= 0 meaning:
-//
-//	n == 0: buf too small
-//	n  < 0: value larger than 64 bits (overflow)
-//	        and -n is the number of bytes read
+//   - n == 0: buf too small;
+//   - n < 0: value larger than 64 bits (overflow) and -n is the number of
+//     bytes read.
 func Uvarint(buf []byte) (uint64, int) {
 	var x uint64
 	var s uint
@@ -110,10 +109,9 @@ func PutVarint(buf []byte, x int64) int {
 // Varint decodes an int64 from buf and returns that value and the
 // number of bytes read (> 0). If an error occurred, the value is 0
 // and the number of bytes n is <= 0 with the following meaning:
-//
-//	n == 0: buf too small
-//	n  < 0: value larger than 64 bits (overflow)
-//	        and -n is the number of bytes read
+//   - n == 0: buf too small;
+//   - n < 0: value larger than 64 bits (overflow)
+//     and -n is the number of bytes read.
 func Varint(buf []byte) (int64, int) {
 	ux, n := Uvarint(buf) // ok to continue in presence of error
 	x := int64(ux >> 1)
