commit eafe9a186c84dcfb7db1038cc43d1f0dfd1ea781
Author: Keith Randall <keithr@alum.mit.edu>
Date:   Fri Jan 25 10:21:40 2019 -0800

    cmd/compile: hide init functions in tracebacks
    
    Treat compiler-generated init functions as wrappers, so they will not
    be shown in tracebacks.
    
    The exception to this rule is that we'd like to show the line number
    of initializers for global variables in tracebacks. In order to
    preserve line numbers for those cases, separate out the code for those
    initializers into a separate function (which is not marked as
    autogenerated).
    
    This CL makes the go binary 0.2% bigger.
    
    Fixes #29919
    
    Change-Id: I0f1fbfc03d10d764ce3a8ddb48fb387ca8453386
    Reviewed-on: https://go-review.googlesource.com/c/159717
    Run-TryBot: Keith Randall <khr@golang.org>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Ian Lance Taylor <iant@golang.org>
---
 src/cmd/compile/internal/gc/init.go   | 32 ++++++++++++++-
 src/cmd/internal/objabi/funcid.go     |  2 +-
 test/fixedbugs/issue29919.dir/a.go    | 75 +++++++++++++++++++++++++++++++++++
 test/fixedbugs/issue29919.dir/main.go | 10 +++++
 test/fixedbugs/issue29919.go          |  9 +++++
 5 files changed, 125 insertions(+), 3 deletions(-)

diff --git a/src/cmd/compile/internal/gc/init.go b/src/cmd/compile/internal/gc/init.go
index ae87488075..e981f83653 100644
--- a/src/cmd/compile/internal/gc/init.go
+++ b/src/cmd/compile/internal/gc/init.go
@@ -57,6 +57,9 @@ func anyinit(n []*Node) bool {
 
 // fninit hand-crafts package initialization code.
 //
+//      func init.ializers() {                          (0)
+//              <init stmts>
+//      }
 //      var initdone路 uint8                             (1)
 //      func init() {                                   (2)
 //              if initdone路 > 1 {                      (3)
@@ -68,7 +71,7 @@ func anyinit(n []*Node) bool {
 //              initdone路 = 1                           (5)
 //              // over all matching imported symbols
 //                      <pkg>.init()                    (6)
-//              { <init stmts> }                        (7)
+//              init.ializers()                         (7)
 //              init.<n>() // if any                    (8)
 //              initdone路 = 2                           (9)
 //              return                                  (10)
@@ -80,6 +83,27 @@ func fninit(n []*Node) {
 		return
 	}
 
+	// (0)
+	// Make a function that contains all the initialization statements.
+	// This is a separate function because we want it to appear in
+	// stack traces, where the init function itself does not.
+	var initializers *types.Sym
+	if len(nf) > 0 {
+		lineno = nf[0].Pos // prolog/epilog gets line number of first init stmt
+		initializers = lookup("init.ializers")
+		disableExport(initializers)
+		fn := dclfunc(initializers, nod(OTFUNC, nil, nil))
+		fn.Nbody.Set(nf)
+		funcbody()
+
+		fn = typecheck(fn, ctxStmt)
+		Curfn = fn
+		typecheckslice(nf, ctxStmt)
+		Curfn = nil
+		funccompile(fn)
+		lineno = autogeneratedPos
+	}
+
 	var r []*Node
 
 	// (1)
@@ -130,7 +154,11 @@ func fninit(n []*Node) {
 	}
 
 	// (7)
-	r = append(r, nf...)
+	if initializers != nil {
+		n := newname(initializers)
+		addvar(n, functype(nil, nil, nil), PFUNC)
+		r = append(r, nod(OCALL, n, nil))
+	}
 
 	// (8)
 
diff --git a/src/cmd/internal/objabi/funcid.go b/src/cmd/internal/objabi/funcid.go
index 1792df7cc1..a30bc3fa05 100644
--- a/src/cmd/internal/objabi/funcid.go
+++ b/src/cmd/internal/objabi/funcid.go
@@ -83,7 +83,7 @@ func GetFuncID(name, file string) FuncID {
 	case "runtime.panicwrap":
 		return FuncID_panicwrap
 	}
-	if file == "<autogenerated>" && !strings.HasSuffix(name, ".init") {
+	if file == "<autogenerated>" {
 		return FuncID_wrapper
 	}
 	if strings.HasPrefix(name, "runtime.call") {
diff --git a/test/fixedbugs/issue29919.dir/a.go b/test/fixedbugs/issue29919.dir/a.go
new file mode 100644
index 0000000000..cfccc4aabb
--- /dev/null
+++ b/test/fixedbugs/issue29919.dir/a.go
@@ -0,0 +1,75 @@
+// Copyright 2019 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// Make sure tracebacks from initialization code are reported correctly.
+
+package a
+
+import (
+	"fmt"
+	"runtime"
+	"strings"
+)
+
+var x = f() // line 15
+
+func f() int {
+	var b [4096]byte
+	n := runtime.Stack(b[:], false) // line 19
+	s := string(b[:n])
+	var pcs [10]uintptr
+	n = runtime.Callers(1, pcs[:]) // line 22
+
+	// Check the Stack results.
+	if debug {
+		println(s)
+	}
+	if strings.Contains(s, "autogenerated") {
+		panic("autogenerated code in traceback")
+	}
+	if !strings.Contains(s, "a.go:15") {
+		panic("missing a.go:15")
+	}
+	if !strings.Contains(s, "a.go:19") {
+		panic("missing a.go:19")
+	}
+	if !strings.Contains(s, "a.init.ializers") {
+		panic("missing a.init.ializers")
+	}
+
+	// Check the CallersFrames results.
+	if debug {
+		iter := runtime.CallersFrames(pcs[:n])
+		for {
+			f, more := iter.Next()
+			fmt.Printf("%s %s:%d\n", f.Function, f.File, f.Line)
+			if !more {
+				break
+			}
+		}
+	}
+	iter := runtime.CallersFrames(pcs[:n])
+	f, more := iter.Next()
+	if f.Function != "a.f" || !strings.HasSuffix(f.File, "a.go") || f.Line != 22 {
+		panic(fmt.Sprintf("bad f %v\n", f))
+	}
+	if !more {
+		panic("traceback truncated after f")
+	}
+	f, more = iter.Next()
+	if f.Function != "a.init.ializers" || !strings.HasSuffix(f.File, "a.go") || f.Line != 15 {
+		panic(fmt.Sprintf("bad init.ializers %v\n", f))
+	}
+	if !more {
+		panic("traceback truncated after init.ializers")
+	}
+	f, _ = iter.Next()
+	if f.Function != "runtime.main" {
+		panic("runtime.main missing")
+	}
+
+	return 0
+}
+
+const debug = false
diff --git a/test/fixedbugs/issue29919.dir/main.go b/test/fixedbugs/issue29919.dir/main.go
new file mode 100644
index 0000000000..3e99ca891b
--- /dev/null
+++ b/test/fixedbugs/issue29919.dir/main.go
@@ -0,0 +1,10 @@
+// Copyright 2019 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package main
+
+import _ "./a"
+
+func main() {
+}
diff --git a/test/fixedbugs/issue29919.go b/test/fixedbugs/issue29919.go
new file mode 100644
index 0000000000..6d97592c11
--- /dev/null
+++ b/test/fixedbugs/issue29919.go
@@ -0,0 +1,9 @@
+// rundir
+
+// Copyright 2019 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// Make sure tracebacks from initialization code are reported correctly.
+
+package ignored
