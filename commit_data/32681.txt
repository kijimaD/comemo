commit 5548f7d5cfadf1319a99b2a17e72ff91fcdd09fc
Author: Josh Bleecher Snyder <josharian@gmail.com>
Date:   Mon May 15 09:40:19 2017 -0700

    cmd/compile: eliminate some bounds checks from generated rewrite rules
    
    Noticed while looking at #20356.
    
    Cuts 160k (1%) off of the cmd/compile binary.
    
    Change-Id: If2397bc6971d6be9be6975048adecb0b5efa6d66
    Reviewed-on: https://go-review.googlesource.com/43501
    Run-TryBot: Josh Bleecher Snyder <josharian@gmail.com>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Keith Randall <khr@golang.org>
---
 src/cmd/compile/internal/ssa/gen/rulegen.go    |    3 +
 src/cmd/compile/internal/ssa/rewrite386.go     |  782 ++++++++++
 src/cmd/compile/internal/ssa/rewriteAMD64.go   | 1960 ++++++++++++++++++++++++
 src/cmd/compile/internal/ssa/rewriteARM.go     |  833 ++++++++++
 src/cmd/compile/internal/ssa/rewriteARM64.go   |  656 ++++++++
 src/cmd/compile/internal/ssa/rewriteMIPS.go    |  344 +++++
 src/cmd/compile/internal/ssa/rewriteMIPS64.go  |  345 +++++
 src/cmd/compile/internal/ssa/rewritePPC64.go   |  406 +++++
 src/cmd/compile/internal/ssa/rewriteS390X.go   | 1692 ++++++++++++++++++++
 src/cmd/compile/internal/ssa/rewritedec.go     |   24 +
 src/cmd/compile/internal/ssa/rewritedec64.go   |  119 ++
 src/cmd/compile/internal/ssa/rewritegeneric.go | 1415 +++++++++++++++++
 12 files changed, 8579 insertions(+)

diff --git a/src/cmd/compile/internal/ssa/gen/rulegen.go b/src/cmd/compile/internal/ssa/gen/rulegen.go
index 166b99d4ab..4306f7e7c0 100644
--- a/src/cmd/compile/internal/ssa/gen/rulegen.go
+++ b/src/cmd/compile/internal/ssa/gen/rulegen.go
@@ -442,6 +442,9 @@ func genMatch0(w io.Writer, arch arch, match, v string, m map[string]struct{}, t
 		}
 	}
 
+	if n := len(args); n > 1 {
+		fmt.Fprintf(w, "_ = %s.Args[%d]\n", v, n-1) // combine some bounds checks
+	}
 	for i, arg := range args {
 		if arg == "_" {
 			continue
diff --git a/src/cmd/compile/internal/ssa/rewrite386.go b/src/cmd/compile/internal/ssa/rewrite386.go
index 21fc3f5c05..6e94c7c284 100644
--- a/src/cmd/compile/internal/ssa/rewrite386.go
+++ b/src/cmd/compile/internal/ssa/rewrite386.go
@@ -597,6 +597,7 @@ func rewriteValue386_Op386ADCL_0(v *Value) bool {
 	// cond:
 	// result: (ADCLconst [c] x f)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVLconst {
@@ -614,6 +615,7 @@ func rewriteValue386_Op386ADCL_0(v *Value) bool {
 	// cond:
 	// result: (ADCLconst [c] x f)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386MOVLconst {
 			break
@@ -631,6 +633,7 @@ func rewriteValue386_Op386ADCL_0(v *Value) bool {
 	// cond:
 	// result: (ADCLconst [c] x f)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386MOVLconst {
 			break
@@ -648,6 +651,7 @@ func rewriteValue386_Op386ADCL_0(v *Value) bool {
 	// cond:
 	// result: (ADCLconst [c] x f)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVLconst {
@@ -668,6 +672,7 @@ func rewriteValue386_Op386ADDL_0(v *Value) bool {
 	// cond:
 	// result: (ADDLconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVLconst {
@@ -683,6 +688,7 @@ func rewriteValue386_Op386ADDL_0(v *Value) bool {
 	// cond:
 	// result: (ADDLconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386MOVLconst {
 			break
@@ -698,6 +704,7 @@ func rewriteValue386_Op386ADDL_0(v *Value) bool {
 	// cond: d == 32-c
 	// result: (ROLLconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386SHLLconst {
 			break
@@ -724,6 +731,7 @@ func rewriteValue386_Op386ADDL_0(v *Value) bool {
 	// cond: d == 32-c
 	// result: (ROLLconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386SHRLconst {
 			break
@@ -751,6 +759,7 @@ func rewriteValue386_Op386ADDL_0(v *Value) bool {
 	// result: (ROLWconst x [c])
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386SHLLconst {
 			break
@@ -778,6 +787,7 @@ func rewriteValue386_Op386ADDL_0(v *Value) bool {
 	// result: (ROLWconst x [c])
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386SHRWconst {
 			break
@@ -805,6 +815,7 @@ func rewriteValue386_Op386ADDL_0(v *Value) bool {
 	// result: (ROLBconst x [c])
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386SHLLconst {
 			break
@@ -832,6 +843,7 @@ func rewriteValue386_Op386ADDL_0(v *Value) bool {
 	// result: (ROLBconst x [c])
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386SHRBconst {
 			break
@@ -858,6 +870,7 @@ func rewriteValue386_Op386ADDL_0(v *Value) bool {
 	// cond:
 	// result: (LEAL8 x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386SHLLconst {
@@ -876,6 +889,7 @@ func rewriteValue386_Op386ADDL_0(v *Value) bool {
 	// cond:
 	// result: (LEAL8 x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386SHLLconst {
 			break
@@ -897,6 +911,7 @@ func rewriteValue386_Op386ADDL_10(v *Value) bool {
 	// cond:
 	// result: (LEAL4 x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386SHLLconst {
@@ -915,6 +930,7 @@ func rewriteValue386_Op386ADDL_10(v *Value) bool {
 	// cond:
 	// result: (LEAL4 x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386SHLLconst {
 			break
@@ -933,6 +949,7 @@ func rewriteValue386_Op386ADDL_10(v *Value) bool {
 	// cond:
 	// result: (LEAL2 x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386SHLLconst {
@@ -951,6 +968,7 @@ func rewriteValue386_Op386ADDL_10(v *Value) bool {
 	// cond:
 	// result: (LEAL2 x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386SHLLconst {
 			break
@@ -969,11 +987,13 @@ func rewriteValue386_Op386ADDL_10(v *Value) bool {
 	// cond:
 	// result: (LEAL2 x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDL {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		if y != v_1.Args[1] {
 			break
@@ -987,10 +1007,12 @@ func rewriteValue386_Op386ADDL_10(v *Value) bool {
 	// cond:
 	// result: (LEAL2 x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDL {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		if y != v_0.Args[1] {
 			break
@@ -1005,11 +1027,13 @@ func rewriteValue386_Op386ADDL_10(v *Value) bool {
 	// cond:
 	// result: (LEAL2 y x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDL {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -1023,11 +1047,13 @@ func rewriteValue386_Op386ADDL_10(v *Value) bool {
 	// cond:
 	// result: (LEAL2 y x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDL {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		if x != v_1.Args[1] {
 			break
@@ -1041,10 +1067,12 @@ func rewriteValue386_Op386ADDL_10(v *Value) bool {
 	// cond:
 	// result: (LEAL2 y x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if x != v.Args[1] {
@@ -1059,10 +1087,12 @@ func rewriteValue386_Op386ADDL_10(v *Value) bool {
 	// cond:
 	// result: (LEAL2 y x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDL {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		x := v_0.Args[1]
 		if x != v.Args[1] {
@@ -1080,6 +1110,7 @@ func rewriteValue386_Op386ADDL_20(v *Value) bool {
 	// cond:
 	// result: (LEAL1 [c] x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -1097,6 +1128,7 @@ func rewriteValue386_Op386ADDL_20(v *Value) bool {
 	// cond:
 	// result: (LEAL1 [c] x y)
 	for {
+		_ = v.Args[1]
 		y := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -1114,6 +1146,7 @@ func rewriteValue386_Op386ADDL_20(v *Value) bool {
 	// cond: x.Op != OpSB && y.Op != OpSB
 	// result: (LEAL1 [c] {s} x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386LEAL {
@@ -1136,6 +1169,7 @@ func rewriteValue386_Op386ADDL_20(v *Value) bool {
 	// cond: x.Op != OpSB && y.Op != OpSB
 	// result: (LEAL1 [c] {s} x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL {
 			break
@@ -1158,6 +1192,7 @@ func rewriteValue386_Op386ADDL_20(v *Value) bool {
 	// cond:
 	// result: (SUBL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386NEGL {
@@ -1173,6 +1208,7 @@ func rewriteValue386_Op386ADDL_20(v *Value) bool {
 	// cond:
 	// result: (SUBL x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386NEGL {
 			break
@@ -1191,6 +1227,7 @@ func rewriteValue386_Op386ADDLcarry_0(v *Value) bool {
 	// cond:
 	// result: (ADDLconstcarry [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVLconst {
@@ -1206,6 +1243,7 @@ func rewriteValue386_Op386ADDLcarry_0(v *Value) bool {
 	// cond:
 	// result: (ADDLconstcarry [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386MOVLconst {
 			break
@@ -1229,6 +1267,7 @@ func rewriteValue386_Op386ADDLconst_0(v *Value) bool {
 		if v_0.Op != Op386ADDL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(Op386LEAL1)
@@ -1269,6 +1308,7 @@ func rewriteValue386_Op386ADDLconst_0(v *Value) bool {
 		}
 		d := v_0.AuxInt
 		s := v_0.Aux
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if !(is32Bit(c + d)) {
@@ -1292,6 +1332,7 @@ func rewriteValue386_Op386ADDLconst_0(v *Value) bool {
 		}
 		d := v_0.AuxInt
 		s := v_0.Aux
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if !(is32Bit(c + d)) {
@@ -1315,6 +1356,7 @@ func rewriteValue386_Op386ADDLconst_0(v *Value) bool {
 		}
 		d := v_0.AuxInt
 		s := v_0.Aux
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if !(is32Bit(c + d)) {
@@ -1338,6 +1380,7 @@ func rewriteValue386_Op386ADDLconst_0(v *Value) bool {
 		}
 		d := v_0.AuxInt
 		s := v_0.Aux
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if !(is32Bit(c + d)) {
@@ -1401,6 +1444,7 @@ func rewriteValue386_Op386ANDL_0(v *Value) bool {
 	// cond:
 	// result: (ANDLconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVLconst {
@@ -1416,6 +1460,7 @@ func rewriteValue386_Op386ANDL_0(v *Value) bool {
 	// cond:
 	// result: (ANDLconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386MOVLconst {
 			break
@@ -1431,6 +1476,7 @@ func rewriteValue386_Op386ANDL_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -1508,6 +1554,7 @@ func rewriteValue386_Op386CMPB_0(v *Value) bool {
 	// cond:
 	// result: (CMPBconst x [int64(int8(c))])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVLconst {
@@ -1523,6 +1570,7 @@ func rewriteValue386_Op386CMPB_0(v *Value) bool {
 	// cond:
 	// result: (InvertFlags (CMPBconst x [int64(int8(c))]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386MOVLconst {
 			break
@@ -1646,6 +1694,7 @@ func rewriteValue386_Op386CMPBconst_0(v *Value) bool {
 		if v_0.Op != Op386ANDL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(Op386TESTB)
@@ -1693,6 +1742,7 @@ func rewriteValue386_Op386CMPL_0(v *Value) bool {
 	// cond:
 	// result: (CMPLconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVLconst {
@@ -1708,6 +1758,7 @@ func rewriteValue386_Op386CMPL_0(v *Value) bool {
 	// cond:
 	// result: (InvertFlags (CMPLconst x [c]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386MOVLconst {
 			break
@@ -1847,6 +1898,7 @@ func rewriteValue386_Op386CMPLconst_0(v *Value) bool {
 		if v_0.Op != Op386ANDL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(Op386TESTL)
@@ -1894,6 +1946,7 @@ func rewriteValue386_Op386CMPW_0(v *Value) bool {
 	// cond:
 	// result: (CMPWconst x [int64(int16(c))])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVLconst {
@@ -1909,6 +1962,7 @@ func rewriteValue386_Op386CMPW_0(v *Value) bool {
 	// cond:
 	// result: (InvertFlags (CMPWconst x [int64(int16(c))]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386MOVLconst {
 			break
@@ -2032,6 +2086,7 @@ func rewriteValue386_Op386CMPWconst_0(v *Value) bool {
 		if v_0.Op != Op386ANDL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(Op386TESTW)
@@ -2104,6 +2159,7 @@ func rewriteValue386_Op386LEAL_0(v *Value) bool {
 		if v_0.Op != Op386ADDL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if !(x.Op != OpSB && y.Op != OpSB) {
@@ -2150,6 +2206,7 @@ func rewriteValue386_Op386LEAL_0(v *Value) bool {
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if !(is32Bit(off1+off2) && canMergeSym(sym1, sym2)) {
@@ -2174,6 +2231,7 @@ func rewriteValue386_Op386LEAL_0(v *Value) bool {
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if !(is32Bit(off1+off2) && canMergeSym(sym1, sym2)) {
@@ -2198,6 +2256,7 @@ func rewriteValue386_Op386LEAL_0(v *Value) bool {
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if !(is32Bit(off1+off2) && canMergeSym(sym1, sym2)) {
@@ -2222,6 +2281,7 @@ func rewriteValue386_Op386LEAL_0(v *Value) bool {
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if !(is32Bit(off1+off2) && canMergeSym(sym1, sym2)) {
@@ -2243,6 +2303,7 @@ func rewriteValue386_Op386LEAL1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -2266,6 +2327,7 @@ func rewriteValue386_Op386LEAL1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		y := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -2289,6 +2351,7 @@ func rewriteValue386_Op386LEAL1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386SHLLconst {
@@ -2311,6 +2374,7 @@ func rewriteValue386_Op386LEAL1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386SHLLconst {
 			break
@@ -2333,6 +2397,7 @@ func rewriteValue386_Op386LEAL1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386SHLLconst {
@@ -2355,6 +2420,7 @@ func rewriteValue386_Op386LEAL1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386SHLLconst {
 			break
@@ -2377,6 +2443,7 @@ func rewriteValue386_Op386LEAL1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386SHLLconst {
@@ -2399,6 +2466,7 @@ func rewriteValue386_Op386LEAL1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386SHLLconst {
 			break
@@ -2421,6 +2489,7 @@ func rewriteValue386_Op386LEAL1_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL {
 			break
@@ -2445,6 +2514,7 @@ func rewriteValue386_Op386LEAL1_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		y := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386LEAL {
@@ -2472,6 +2542,7 @@ func rewriteValue386_Op386LEAL2_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -2495,6 +2566,7 @@ func rewriteValue386_Op386LEAL2_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -2518,6 +2590,7 @@ func rewriteValue386_Op386LEAL2_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386SHLLconst {
@@ -2540,6 +2613,7 @@ func rewriteValue386_Op386LEAL2_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386SHLLconst {
@@ -2562,6 +2636,7 @@ func rewriteValue386_Op386LEAL2_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL {
 			break
@@ -2589,6 +2664,7 @@ func rewriteValue386_Op386LEAL4_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -2612,6 +2688,7 @@ func rewriteValue386_Op386LEAL4_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -2635,6 +2712,7 @@ func rewriteValue386_Op386LEAL4_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386SHLLconst {
@@ -2657,6 +2735,7 @@ func rewriteValue386_Op386LEAL4_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL {
 			break
@@ -2684,6 +2763,7 @@ func rewriteValue386_Op386LEAL8_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -2707,6 +2787,7 @@ func rewriteValue386_Op386LEAL8_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -2730,6 +2811,7 @@ func rewriteValue386_Op386LEAL8_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL {
 			break
@@ -2763,6 +2845,7 @@ func rewriteValue386_Op386MOVBLSX_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -2809,6 +2892,7 @@ func rewriteValue386_Op386MOVBLSXload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL {
 			break
@@ -2842,6 +2926,7 @@ func rewriteValue386_Op386MOVBLZX_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -2867,6 +2952,7 @@ func rewriteValue386_Op386MOVBLZX_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[2]
 		ptr := x.Args[0]
 		idx := x.Args[1]
 		mem := x.Args[2]
@@ -2912,6 +2998,7 @@ func rewriteValue386_Op386MOVBload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVBstore {
@@ -2919,6 +3006,7 @@ func rewriteValue386_Op386MOVBload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2)) {
@@ -2935,6 +3023,7 @@ func rewriteValue386_Op386MOVBload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -2958,6 +3047,7 @@ func rewriteValue386_Op386MOVBload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL {
 			break
@@ -2982,12 +3072,14 @@ func rewriteValue386_Op386MOVBload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL1 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -3008,10 +3100,12 @@ func rewriteValue386_Op386MOVBload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDL {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -3035,6 +3129,7 @@ func rewriteValue386_Op386MOVBloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -3057,6 +3152,7 @@ func rewriteValue386_Op386MOVBloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		idx := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -3079,6 +3175,7 @@ func rewriteValue386_Op386MOVBloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -3101,6 +3198,7 @@ func rewriteValue386_Op386MOVBloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -3130,6 +3228,7 @@ func rewriteValue386_Op386MOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVBLSX {
@@ -3151,6 +3250,7 @@ func rewriteValue386_Op386MOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVBLZX {
@@ -3172,6 +3272,7 @@ func rewriteValue386_Op386MOVBstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -3197,6 +3298,7 @@ func rewriteValue386_Op386MOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVLconst {
@@ -3220,6 +3322,7 @@ func rewriteValue386_Op386MOVBstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL {
 			break
@@ -3246,12 +3349,14 @@ func rewriteValue386_Op386MOVBstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL1 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -3274,10 +3379,12 @@ func rewriteValue386_Op386MOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDL {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -3300,6 +3407,7 @@ func rewriteValue386_Op386MOVBstore_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386SHRLconst {
@@ -3319,6 +3427,7 @@ func rewriteValue386_Op386MOVBstore_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -3343,6 +3452,7 @@ func rewriteValue386_Op386MOVBstore_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386SHRLconst {
@@ -3360,6 +3470,7 @@ func rewriteValue386_Op386MOVBstore_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -3398,6 +3509,7 @@ func rewriteValue386_Op386MOVBstoreconst_0(v *Value) bool {
 	for {
 		sc := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -3421,6 +3533,7 @@ func rewriteValue386_Op386MOVBstoreconst_0(v *Value) bool {
 	for {
 		sc := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL {
 			break
@@ -3445,12 +3558,14 @@ func rewriteValue386_Op386MOVBstoreconst_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL1 {
 			break
 		}
 		off := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -3471,10 +3586,12 @@ func rewriteValue386_Op386MOVBstoreconst_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDL {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -3492,6 +3609,7 @@ func rewriteValue386_Op386MOVBstoreconst_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		p := v.Args[0]
 		x := v.Args[1]
 		if x.Op != Op386MOVBstoreconst {
@@ -3501,6 +3619,7 @@ func rewriteValue386_Op386MOVBstoreconst_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[1]
 		if p != x.Args[0] {
 			break
 		}
@@ -3524,6 +3643,7 @@ func rewriteValue386_Op386MOVBstoreconstidx1_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -3546,6 +3666,7 @@ func rewriteValue386_Op386MOVBstoreconstidx1_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -3568,6 +3689,7 @@ func rewriteValue386_Op386MOVBstoreconstidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		i := v.Args[1]
 		x := v.Args[2]
@@ -3578,6 +3700,7 @@ func rewriteValue386_Op386MOVBstoreconstidx1_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -3605,6 +3728,7 @@ func rewriteValue386_Op386MOVBstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -3629,6 +3753,7 @@ func rewriteValue386_Op386MOVBstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -3653,6 +3778,7 @@ func rewriteValue386_Op386MOVBstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -3677,6 +3803,7 @@ func rewriteValue386_Op386MOVBstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -3701,6 +3828,7 @@ func rewriteValue386_Op386MOVBstoreidx1_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -3721,6 +3849,7 @@ func rewriteValue386_Op386MOVBstoreidx1_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -3749,6 +3878,7 @@ func rewriteValue386_Op386MOVBstoreidx1_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -3769,6 +3899,7 @@ func rewriteValue386_Op386MOVBstoreidx1_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -3797,6 +3928,7 @@ func rewriteValue386_Op386MOVBstoreidx1_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		v_2 := v.Args[2]
@@ -3817,6 +3949,7 @@ func rewriteValue386_Op386MOVBstoreidx1_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -3845,6 +3978,7 @@ func rewriteValue386_Op386MOVBstoreidx1_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		v_2 := v.Args[2]
@@ -3865,6 +3999,7 @@ func rewriteValue386_Op386MOVBstoreidx1_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -3893,6 +4028,7 @@ func rewriteValue386_Op386MOVBstoreidx1_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -3911,6 +4047,7 @@ func rewriteValue386_Op386MOVBstoreidx1_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -3946,6 +4083,7 @@ func rewriteValue386_Op386MOVBstoreidx1_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -3964,6 +4102,7 @@ func rewriteValue386_Op386MOVBstoreidx1_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -4002,6 +4141,7 @@ func rewriteValue386_Op386MOVBstoreidx1_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		v_2 := v.Args[2]
@@ -4020,6 +4160,7 @@ func rewriteValue386_Op386MOVBstoreidx1_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -4055,6 +4196,7 @@ func rewriteValue386_Op386MOVBstoreidx1_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		v_2 := v.Args[2]
@@ -4073,6 +4215,7 @@ func rewriteValue386_Op386MOVBstoreidx1_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -4115,6 +4258,7 @@ func rewriteValue386_Op386MOVLload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVLstore {
@@ -4122,6 +4266,7 @@ func rewriteValue386_Op386MOVLload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2)) {
@@ -4138,6 +4283,7 @@ func rewriteValue386_Op386MOVLload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -4161,6 +4307,7 @@ func rewriteValue386_Op386MOVLload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL {
 			break
@@ -4185,12 +4332,14 @@ func rewriteValue386_Op386MOVLload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL1 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -4211,12 +4360,14 @@ func rewriteValue386_Op386MOVLload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL4 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -4237,10 +4388,12 @@ func rewriteValue386_Op386MOVLload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDL {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -4264,6 +4417,7 @@ func rewriteValue386_Op386MOVLloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386SHLLconst {
@@ -4288,6 +4442,7 @@ func rewriteValue386_Op386MOVLloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386SHLLconst {
 			break
@@ -4312,6 +4467,7 @@ func rewriteValue386_Op386MOVLloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -4334,6 +4490,7 @@ func rewriteValue386_Op386MOVLloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		idx := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -4356,6 +4513,7 @@ func rewriteValue386_Op386MOVLloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -4378,6 +4536,7 @@ func rewriteValue386_Op386MOVLloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -4403,6 +4562,7 @@ func rewriteValue386_Op386MOVLloadidx4_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -4425,6 +4585,7 @@ func rewriteValue386_Op386MOVLloadidx4_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -4454,6 +4615,7 @@ func rewriteValue386_Op386MOVLstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -4479,6 +4641,7 @@ func rewriteValue386_Op386MOVLstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVLconst {
@@ -4502,6 +4665,7 @@ func rewriteValue386_Op386MOVLstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL {
 			break
@@ -4528,12 +4692,14 @@ func rewriteValue386_Op386MOVLstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL1 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -4556,12 +4722,14 @@ func rewriteValue386_Op386MOVLstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL4 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -4584,10 +4752,12 @@ func rewriteValue386_Op386MOVLstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDL {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -4617,6 +4787,7 @@ func rewriteValue386_Op386MOVLstoreconst_0(v *Value) bool {
 	for {
 		sc := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -4640,6 +4811,7 @@ func rewriteValue386_Op386MOVLstoreconst_0(v *Value) bool {
 	for {
 		sc := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL {
 			break
@@ -4664,12 +4836,14 @@ func rewriteValue386_Op386MOVLstoreconst_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL1 {
 			break
 		}
 		off := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -4690,12 +4864,14 @@ func rewriteValue386_Op386MOVLstoreconst_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL4 {
 			break
 		}
 		off := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -4716,10 +4892,12 @@ func rewriteValue386_Op386MOVLstoreconst_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDL {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -4740,6 +4918,7 @@ func rewriteValue386_Op386MOVLstoreconstidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386SHLLconst {
@@ -4764,6 +4943,7 @@ func rewriteValue386_Op386MOVLstoreconstidx1_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -4786,6 +4966,7 @@ func rewriteValue386_Op386MOVLstoreconstidx1_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -4811,6 +4992,7 @@ func rewriteValue386_Op386MOVLstoreconstidx4_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -4833,6 +5015,7 @@ func rewriteValue386_Op386MOVLstoreconstidx4_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -4858,6 +5041,7 @@ func rewriteValue386_Op386MOVLstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386SHLLconst {
@@ -4884,6 +5068,7 @@ func rewriteValue386_Op386MOVLstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386SHLLconst {
 			break
@@ -4910,6 +5095,7 @@ func rewriteValue386_Op386MOVLstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -4934,6 +5120,7 @@ func rewriteValue386_Op386MOVLstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -4958,6 +5145,7 @@ func rewriteValue386_Op386MOVLstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -4982,6 +5170,7 @@ func rewriteValue386_Op386MOVLstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -5009,6 +5198,7 @@ func rewriteValue386_Op386MOVLstoreidx4_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -5033,6 +5223,7 @@ func rewriteValue386_Op386MOVLstoreidx4_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -5087,6 +5278,7 @@ func rewriteValue386_Op386MOVSDload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -5110,6 +5302,7 @@ func rewriteValue386_Op386MOVSDload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL {
 			break
@@ -5134,12 +5327,14 @@ func rewriteValue386_Op386MOVSDload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL1 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -5160,12 +5355,14 @@ func rewriteValue386_Op386MOVSDload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL8 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -5186,10 +5383,12 @@ func rewriteValue386_Op386MOVSDload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDL {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -5213,6 +5412,7 @@ func rewriteValue386_Op386MOVSDloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -5235,6 +5435,7 @@ func rewriteValue386_Op386MOVSDloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -5260,6 +5461,7 @@ func rewriteValue386_Op386MOVSDloadidx8_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -5282,6 +5484,7 @@ func rewriteValue386_Op386MOVSDloadidx8_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -5311,6 +5514,7 @@ func rewriteValue386_Op386MOVSDstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -5336,6 +5540,7 @@ func rewriteValue386_Op386MOVSDstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL {
 			break
@@ -5362,12 +5567,14 @@ func rewriteValue386_Op386MOVSDstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL1 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -5390,12 +5597,14 @@ func rewriteValue386_Op386MOVSDstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL8 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -5418,10 +5627,12 @@ func rewriteValue386_Op386MOVSDstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDL {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -5447,6 +5658,7 @@ func rewriteValue386_Op386MOVSDstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -5471,6 +5683,7 @@ func rewriteValue386_Op386MOVSDstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -5498,6 +5711,7 @@ func rewriteValue386_Op386MOVSDstoreidx8_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -5522,6 +5736,7 @@ func rewriteValue386_Op386MOVSDstoreidx8_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -5576,6 +5791,7 @@ func rewriteValue386_Op386MOVSSload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -5599,6 +5815,7 @@ func rewriteValue386_Op386MOVSSload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL {
 			break
@@ -5623,12 +5840,14 @@ func rewriteValue386_Op386MOVSSload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL1 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -5649,12 +5868,14 @@ func rewriteValue386_Op386MOVSSload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL4 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -5675,10 +5896,12 @@ func rewriteValue386_Op386MOVSSload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDL {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -5702,6 +5925,7 @@ func rewriteValue386_Op386MOVSSloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -5724,6 +5948,7 @@ func rewriteValue386_Op386MOVSSloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -5749,6 +5974,7 @@ func rewriteValue386_Op386MOVSSloadidx4_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -5771,6 +5997,7 @@ func rewriteValue386_Op386MOVSSloadidx4_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -5800,6 +6027,7 @@ func rewriteValue386_Op386MOVSSstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -5825,6 +6053,7 @@ func rewriteValue386_Op386MOVSSstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL {
 			break
@@ -5851,12 +6080,14 @@ func rewriteValue386_Op386MOVSSstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL1 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -5879,12 +6110,14 @@ func rewriteValue386_Op386MOVSSstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL4 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -5907,10 +6140,12 @@ func rewriteValue386_Op386MOVSSstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDL {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -5936,6 +6171,7 @@ func rewriteValue386_Op386MOVSSstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -5960,6 +6196,7 @@ func rewriteValue386_Op386MOVSSstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -5987,6 +6224,7 @@ func rewriteValue386_Op386MOVSSstoreidx4_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -6011,6 +6249,7 @@ func rewriteValue386_Op386MOVSSstoreidx4_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -6044,6 +6283,7 @@ func rewriteValue386_Op386MOVWLSX_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -6090,6 +6330,7 @@ func rewriteValue386_Op386MOVWLSXload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL {
 			break
@@ -6123,6 +6364,7 @@ func rewriteValue386_Op386MOVWLZX_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -6148,6 +6390,7 @@ func rewriteValue386_Op386MOVWLZX_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[2]
 		ptr := x.Args[0]
 		idx := x.Args[1]
 		mem := x.Args[2]
@@ -6175,6 +6418,7 @@ func rewriteValue386_Op386MOVWLZX_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[2]
 		ptr := x.Args[0]
 		idx := x.Args[1]
 		mem := x.Args[2]
@@ -6220,6 +6464,7 @@ func rewriteValue386_Op386MOVWload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVWstore {
@@ -6227,6 +6472,7 @@ func rewriteValue386_Op386MOVWload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2)) {
@@ -6243,6 +6489,7 @@ func rewriteValue386_Op386MOVWload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -6266,6 +6513,7 @@ func rewriteValue386_Op386MOVWload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL {
 			break
@@ -6290,12 +6538,14 @@ func rewriteValue386_Op386MOVWload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL1 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -6316,12 +6566,14 @@ func rewriteValue386_Op386MOVWload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL2 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -6342,10 +6594,12 @@ func rewriteValue386_Op386MOVWload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDL {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -6369,6 +6623,7 @@ func rewriteValue386_Op386MOVWloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386SHLLconst {
@@ -6393,6 +6648,7 @@ func rewriteValue386_Op386MOVWloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386SHLLconst {
 			break
@@ -6417,6 +6673,7 @@ func rewriteValue386_Op386MOVWloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -6439,6 +6696,7 @@ func rewriteValue386_Op386MOVWloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		idx := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -6461,6 +6719,7 @@ func rewriteValue386_Op386MOVWloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -6483,6 +6742,7 @@ func rewriteValue386_Op386MOVWloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -6508,6 +6768,7 @@ func rewriteValue386_Op386MOVWloadidx2_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -6530,6 +6791,7 @@ func rewriteValue386_Op386MOVWloadidx2_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -6559,6 +6821,7 @@ func rewriteValue386_Op386MOVWstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVWLSX {
@@ -6580,6 +6843,7 @@ func rewriteValue386_Op386MOVWstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVWLZX {
@@ -6601,6 +6865,7 @@ func rewriteValue386_Op386MOVWstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -6626,6 +6891,7 @@ func rewriteValue386_Op386MOVWstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVLconst {
@@ -6649,6 +6915,7 @@ func rewriteValue386_Op386MOVWstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL {
 			break
@@ -6675,12 +6942,14 @@ func rewriteValue386_Op386MOVWstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL1 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -6703,12 +6972,14 @@ func rewriteValue386_Op386MOVWstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL2 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -6731,10 +7002,12 @@ func rewriteValue386_Op386MOVWstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDL {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -6757,6 +7030,7 @@ func rewriteValue386_Op386MOVWstore_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386SHRLconst {
@@ -6776,6 +7050,7 @@ func rewriteValue386_Op386MOVWstore_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -6800,6 +7075,7 @@ func rewriteValue386_Op386MOVWstore_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386SHRLconst {
@@ -6817,6 +7093,7 @@ func rewriteValue386_Op386MOVWstore_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -6855,6 +7132,7 @@ func rewriteValue386_Op386MOVWstoreconst_0(v *Value) bool {
 	for {
 		sc := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -6878,6 +7156,7 @@ func rewriteValue386_Op386MOVWstoreconst_0(v *Value) bool {
 	for {
 		sc := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL {
 			break
@@ -6902,12 +7181,14 @@ func rewriteValue386_Op386MOVWstoreconst_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL1 {
 			break
 		}
 		off := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -6928,12 +7209,14 @@ func rewriteValue386_Op386MOVWstoreconst_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386LEAL2 {
 			break
 		}
 		off := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -6954,10 +7237,12 @@ func rewriteValue386_Op386MOVWstoreconst_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDL {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -6975,6 +7260,7 @@ func rewriteValue386_Op386MOVWstoreconst_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		p := v.Args[0]
 		x := v.Args[1]
 		if x.Op != Op386MOVWstoreconst {
@@ -6984,6 +7270,7 @@ func rewriteValue386_Op386MOVWstoreconst_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[1]
 		if p != x.Args[0] {
 			break
 		}
@@ -7007,6 +7294,7 @@ func rewriteValue386_Op386MOVWstoreconstidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386SHLLconst {
@@ -7031,6 +7319,7 @@ func rewriteValue386_Op386MOVWstoreconstidx1_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -7053,6 +7342,7 @@ func rewriteValue386_Op386MOVWstoreconstidx1_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -7075,6 +7365,7 @@ func rewriteValue386_Op386MOVWstoreconstidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		i := v.Args[1]
 		x := v.Args[2]
@@ -7085,6 +7376,7 @@ func rewriteValue386_Op386MOVWstoreconstidx1_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -7114,6 +7406,7 @@ func rewriteValue386_Op386MOVWstoreconstidx2_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -7136,6 +7429,7 @@ func rewriteValue386_Op386MOVWstoreconstidx2_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -7158,6 +7452,7 @@ func rewriteValue386_Op386MOVWstoreconstidx2_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		i := v.Args[1]
 		x := v.Args[2]
@@ -7168,6 +7463,7 @@ func rewriteValue386_Op386MOVWstoreconstidx2_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -7198,6 +7494,7 @@ func rewriteValue386_Op386MOVWstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386SHLLconst {
@@ -7224,6 +7521,7 @@ func rewriteValue386_Op386MOVWstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386SHLLconst {
 			break
@@ -7250,6 +7548,7 @@ func rewriteValue386_Op386MOVWstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -7274,6 +7573,7 @@ func rewriteValue386_Op386MOVWstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -7298,6 +7598,7 @@ func rewriteValue386_Op386MOVWstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -7322,6 +7623,7 @@ func rewriteValue386_Op386MOVWstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -7346,6 +7648,7 @@ func rewriteValue386_Op386MOVWstoreidx1_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -7366,6 +7669,7 @@ func rewriteValue386_Op386MOVWstoreidx1_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -7394,6 +7698,7 @@ func rewriteValue386_Op386MOVWstoreidx1_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -7414,6 +7719,7 @@ func rewriteValue386_Op386MOVWstoreidx1_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -7442,6 +7748,7 @@ func rewriteValue386_Op386MOVWstoreidx1_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		v_2 := v.Args[2]
@@ -7462,6 +7769,7 @@ func rewriteValue386_Op386MOVWstoreidx1_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -7490,6 +7798,7 @@ func rewriteValue386_Op386MOVWstoreidx1_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		v_2 := v.Args[2]
@@ -7510,6 +7819,7 @@ func rewriteValue386_Op386MOVWstoreidx1_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -7541,6 +7851,7 @@ func rewriteValue386_Op386MOVWstoreidx1_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -7559,6 +7870,7 @@ func rewriteValue386_Op386MOVWstoreidx1_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -7594,6 +7906,7 @@ func rewriteValue386_Op386MOVWstoreidx1_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -7612,6 +7925,7 @@ func rewriteValue386_Op386MOVWstoreidx1_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -7647,6 +7961,7 @@ func rewriteValue386_Op386MOVWstoreidx1_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		v_2 := v.Args[2]
@@ -7665,6 +7980,7 @@ func rewriteValue386_Op386MOVWstoreidx1_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -7700,6 +8016,7 @@ func rewriteValue386_Op386MOVWstoreidx1_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		v_2 := v.Args[2]
@@ -7718,6 +8035,7 @@ func rewriteValue386_Op386MOVWstoreidx1_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -7758,6 +8076,7 @@ func rewriteValue386_Op386MOVWstoreidx2_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386ADDLconst {
 			break
@@ -7782,6 +8101,7 @@ func rewriteValue386_Op386MOVWstoreidx2_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ADDLconst {
@@ -7806,6 +8126,7 @@ func rewriteValue386_Op386MOVWstoreidx2_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -7826,6 +8147,7 @@ func rewriteValue386_Op386MOVWstoreidx2_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -7857,6 +8179,7 @@ func rewriteValue386_Op386MOVWstoreidx2_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -7875,6 +8198,7 @@ func rewriteValue386_Op386MOVWstoreidx2_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -7914,6 +8238,7 @@ func rewriteValue386_Op386MULL_0(v *Value) bool {
 	// cond:
 	// result: (MULLconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVLconst {
@@ -7929,6 +8254,7 @@ func rewriteValue386_Op386MULL_0(v *Value) bool {
 	// cond:
 	// result: (MULLconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386MOVLconst {
 			break
@@ -8380,6 +8706,7 @@ func rewriteValue386_Op386ORL_0(v *Value) bool {
 	// cond:
 	// result: (ORLconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVLconst {
@@ -8395,6 +8722,7 @@ func rewriteValue386_Op386ORL_0(v *Value) bool {
 	// cond:
 	// result: (ORLconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386MOVLconst {
 			break
@@ -8410,6 +8738,7 @@ func rewriteValue386_Op386ORL_0(v *Value) bool {
 	// cond: d == 32-c
 	// result: (ROLLconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386SHLLconst {
 			break
@@ -8436,6 +8765,7 @@ func rewriteValue386_Op386ORL_0(v *Value) bool {
 	// cond: d == 32-c
 	// result: (ROLLconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386SHRLconst {
 			break
@@ -8463,6 +8793,7 @@ func rewriteValue386_Op386ORL_0(v *Value) bool {
 	// result: (ROLWconst x [c])
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386SHLLconst {
 			break
@@ -8490,6 +8821,7 @@ func rewriteValue386_Op386ORL_0(v *Value) bool {
 	// result: (ROLWconst x [c])
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386SHRWconst {
 			break
@@ -8517,6 +8849,7 @@ func rewriteValue386_Op386ORL_0(v *Value) bool {
 	// result: (ROLBconst x [c])
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386SHLLconst {
 			break
@@ -8544,6 +8877,7 @@ func rewriteValue386_Op386ORL_0(v *Value) bool {
 	// result: (ROLBconst x [c])
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386SHRBconst {
 			break
@@ -8570,6 +8904,7 @@ func rewriteValue386_Op386ORL_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -8583,12 +8918,14 @@ func rewriteValue386_Op386ORL_0(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)
 	// result: @mergePoint(b,x0,x1) (MOVWload [i0] {s} p mem)
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != Op386MOVBload {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		s0 := v.Args[1]
@@ -8606,6 +8943,7 @@ func rewriteValue386_Op386ORL_0(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -8636,6 +8974,7 @@ func rewriteValue386_Op386ORL_10(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)
 	// result: @mergePoint(b,x0,x1) (MOVWload [i0] {s} p mem)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != Op386SHLLconst {
 			break
@@ -8649,6 +8988,7 @@ func rewriteValue386_Op386ORL_10(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		x0 := v.Args[1]
@@ -8659,6 +8999,7 @@ func rewriteValue386_Op386ORL_10(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -8682,16 +9023,19 @@ func rewriteValue386_Op386ORL_10(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLload [i0] {s} p mem)
 	for {
+		_ = v.Args[1]
 		o0 := v.Args[0]
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		x0 := o0.Args[0]
 		if x0.Op != Op386MOVWload {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		s0 := o0.Args[1]
@@ -8709,6 +9053,7 @@ func rewriteValue386_Op386ORL_10(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -8730,6 +9075,7 @@ func rewriteValue386_Op386ORL_10(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[1]
 		if p != x2.Args[0] {
 			break
 		}
@@ -8753,10 +9099,12 @@ func rewriteValue386_Op386ORL_10(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLload [i0] {s} p mem)
 	for {
+		_ = v.Args[1]
 		o0 := v.Args[0]
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		s0 := o0.Args[0]
 		if s0.Op != Op386SHLLconst {
 			break
@@ -8770,6 +9118,7 @@ func rewriteValue386_Op386ORL_10(v *Value) bool {
 		}
 		i2 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		x0 := o0.Args[1]
@@ -8780,6 +9129,7 @@ func rewriteValue386_Op386ORL_10(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -8801,6 +9151,7 @@ func rewriteValue386_Op386ORL_10(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[1]
 		if p != x2.Args[0] {
 			break
 		}
@@ -8824,6 +9175,7 @@ func rewriteValue386_Op386ORL_10(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLload [i0] {s} p mem)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != Op386SHLLconst {
 			break
@@ -8837,12 +9189,14 @@ func rewriteValue386_Op386ORL_10(v *Value) bool {
 		}
 		i3 := x2.AuxInt
 		s := x2.Aux
+		_ = x2.Args[1]
 		p := x2.Args[0]
 		mem := x2.Args[1]
 		o0 := v.Args[1]
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		x0 := o0.Args[0]
 		if x0.Op != Op386MOVWload {
 			break
@@ -8851,6 +9205,7 @@ func rewriteValue386_Op386ORL_10(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -8872,6 +9227,7 @@ func rewriteValue386_Op386ORL_10(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -8895,6 +9251,7 @@ func rewriteValue386_Op386ORL_10(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLload [i0] {s} p mem)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != Op386SHLLconst {
 			break
@@ -8908,12 +9265,14 @@ func rewriteValue386_Op386ORL_10(v *Value) bool {
 		}
 		i3 := x2.AuxInt
 		s := x2.Aux
+		_ = x2.Args[1]
 		p := x2.Args[0]
 		mem := x2.Args[1]
 		o0 := v.Args[1]
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		s0 := o0.Args[0]
 		if s0.Op != Op386SHLLconst {
 			break
@@ -8929,6 +9288,7 @@ func rewriteValue386_Op386ORL_10(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -8943,6 +9303,7 @@ func rewriteValue386_Op386ORL_10(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -8966,12 +9327,14 @@ func rewriteValue386_Op386ORL_10(v *Value) bool {
 	// cond: i1==i0+1   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)
 	// result: @mergePoint(b,x0,x1) (MOVWloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != Op386MOVBloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -8990,6 +9353,7 @@ func rewriteValue386_Op386ORL_10(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -9017,12 +9381,14 @@ func rewriteValue386_Op386ORL_10(v *Value) bool {
 	// cond: i1==i0+1   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)
 	// result: @mergePoint(b,x0,x1) (MOVWloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != Op386MOVBloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -9041,6 +9407,7 @@ func rewriteValue386_Op386ORL_10(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -9068,12 +9435,14 @@ func rewriteValue386_Op386ORL_10(v *Value) bool {
 	// cond: i1==i0+1   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)
 	// result: @mergePoint(b,x0,x1) (MOVWloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != Op386MOVBloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -9092,6 +9461,7 @@ func rewriteValue386_Op386ORL_10(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -9119,12 +9489,14 @@ func rewriteValue386_Op386ORL_10(v *Value) bool {
 	// cond: i1==i0+1   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)
 	// result: @mergePoint(b,x0,x1) (MOVWloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != Op386MOVBloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -9143,6 +9515,7 @@ func rewriteValue386_Op386ORL_10(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -9170,6 +9543,7 @@ func rewriteValue386_Op386ORL_10(v *Value) bool {
 	// cond: i1==i0+1   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)
 	// result: @mergePoint(b,x0,x1) (MOVWloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != Op386SHLLconst {
 			break
@@ -9183,6 +9557,7 @@ func rewriteValue386_Op386ORL_10(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -9194,6 +9569,7 @@ func rewriteValue386_Op386ORL_10(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -9226,6 +9602,7 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 	// cond: i1==i0+1   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)
 	// result: @mergePoint(b,x0,x1) (MOVWloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != Op386SHLLconst {
 			break
@@ -9239,6 +9616,7 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -9250,6 +9628,7 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -9277,6 +9656,7 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 	// cond: i1==i0+1   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)
 	// result: @mergePoint(b,x0,x1) (MOVWloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != Op386SHLLconst {
 			break
@@ -9290,6 +9670,7 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -9301,6 +9682,7 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -9328,6 +9710,7 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 	// cond: i1==i0+1   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)
 	// result: @mergePoint(b,x0,x1) (MOVWloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != Op386SHLLconst {
 			break
@@ -9341,6 +9724,7 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -9352,6 +9736,7 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -9379,16 +9764,19 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		o0 := v.Args[0]
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		x0 := o0.Args[0]
 		if x0.Op != Op386MOVWloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -9407,6 +9795,7 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -9431,6 +9820,7 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[2]
 		if p != x2.Args[0] {
 			break
 		}
@@ -9458,16 +9848,19 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		o0 := v.Args[0]
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		x0 := o0.Args[0]
 		if x0.Op != Op386MOVWloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -9486,6 +9879,7 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -9510,6 +9904,7 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[2]
 		if p != x2.Args[0] {
 			break
 		}
@@ -9537,16 +9932,19 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		o0 := v.Args[0]
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		x0 := o0.Args[0]
 		if x0.Op != Op386MOVWloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -9565,6 +9963,7 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -9589,6 +9988,7 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[2]
 		if p != x2.Args[0] {
 			break
 		}
@@ -9616,16 +10016,19 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		o0 := v.Args[0]
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		x0 := o0.Args[0]
 		if x0.Op != Op386MOVWloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -9644,6 +10047,7 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -9668,6 +10072,7 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[2]
 		if p != x2.Args[0] {
 			break
 		}
@@ -9695,10 +10100,12 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		o0 := v.Args[0]
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		s0 := o0.Args[0]
 		if s0.Op != Op386SHLLconst {
 			break
@@ -9712,6 +10119,7 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 		}
 		i2 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -9723,6 +10131,7 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -9747,6 +10156,7 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[2]
 		if p != x2.Args[0] {
 			break
 		}
@@ -9774,10 +10184,12 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		o0 := v.Args[0]
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		s0 := o0.Args[0]
 		if s0.Op != Op386SHLLconst {
 			break
@@ -9791,6 +10203,7 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 		}
 		i2 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -9802,6 +10215,7 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -9826,6 +10240,7 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[2]
 		if p != x2.Args[0] {
 			break
 		}
@@ -9853,10 +10268,12 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		o0 := v.Args[0]
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		s0 := o0.Args[0]
 		if s0.Op != Op386SHLLconst {
 			break
@@ -9870,6 +10287,7 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 		}
 		i2 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -9881,6 +10299,7 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -9905,6 +10324,7 @@ func rewriteValue386_Op386ORL_20(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[2]
 		if p != x2.Args[0] {
 			break
 		}
@@ -9937,10 +10357,12 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		o0 := v.Args[0]
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		s0 := o0.Args[0]
 		if s0.Op != Op386SHLLconst {
 			break
@@ -9954,6 +10376,7 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 		}
 		i2 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -9965,6 +10388,7 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -9989,6 +10413,7 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[2]
 		if p != x2.Args[0] {
 			break
 		}
@@ -10016,16 +10441,19 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		o0 := v.Args[0]
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		x0 := o0.Args[0]
 		if x0.Op != Op386MOVWloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -10044,6 +10472,7 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -10068,6 +10497,7 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[2]
 		if idx != x2.Args[0] {
 			break
 		}
@@ -10095,16 +10525,19 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		o0 := v.Args[0]
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		x0 := o0.Args[0]
 		if x0.Op != Op386MOVWloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -10123,6 +10556,7 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -10147,6 +10581,7 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[2]
 		if idx != x2.Args[0] {
 			break
 		}
@@ -10174,16 +10609,19 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		o0 := v.Args[0]
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		x0 := o0.Args[0]
 		if x0.Op != Op386MOVWloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -10202,6 +10640,7 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -10226,6 +10665,7 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[2]
 		if idx != x2.Args[0] {
 			break
 		}
@@ -10253,16 +10693,19 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		o0 := v.Args[0]
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		x0 := o0.Args[0]
 		if x0.Op != Op386MOVWloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -10281,6 +10724,7 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -10305,6 +10749,7 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[2]
 		if idx != x2.Args[0] {
 			break
 		}
@@ -10332,10 +10777,12 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		o0 := v.Args[0]
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		s0 := o0.Args[0]
 		if s0.Op != Op386SHLLconst {
 			break
@@ -10349,6 +10796,7 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 		}
 		i2 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -10360,6 +10808,7 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -10384,6 +10833,7 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[2]
 		if idx != x2.Args[0] {
 			break
 		}
@@ -10411,10 +10861,12 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		o0 := v.Args[0]
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		s0 := o0.Args[0]
 		if s0.Op != Op386SHLLconst {
 			break
@@ -10428,6 +10880,7 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 		}
 		i2 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -10439,6 +10892,7 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -10463,6 +10917,7 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[2]
 		if idx != x2.Args[0] {
 			break
 		}
@@ -10490,10 +10945,12 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		o0 := v.Args[0]
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		s0 := o0.Args[0]
 		if s0.Op != Op386SHLLconst {
 			break
@@ -10507,6 +10964,7 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 		}
 		i2 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -10518,6 +10976,7 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -10542,6 +11001,7 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[2]
 		if idx != x2.Args[0] {
 			break
 		}
@@ -10569,10 +11029,12 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		o0 := v.Args[0]
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		s0 := o0.Args[0]
 		if s0.Op != Op386SHLLconst {
 			break
@@ -10586,6 +11048,7 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 		}
 		i2 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -10597,6 +11060,7 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -10621,6 +11085,7 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[2]
 		if idx != x2.Args[0] {
 			break
 		}
@@ -10648,6 +11113,7 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != Op386SHLLconst {
 			break
@@ -10661,6 +11127,7 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 		}
 		i3 := x2.AuxInt
 		s := x2.Aux
+		_ = x2.Args[2]
 		p := x2.Args[0]
 		idx := x2.Args[1]
 		mem := x2.Args[2]
@@ -10668,6 +11135,7 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		x0 := o0.Args[0]
 		if x0.Op != Op386MOVWloadidx1 {
 			break
@@ -10676,6 +11144,7 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -10700,6 +11169,7 @@ func rewriteValue386_Op386ORL_30(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -10732,6 +11202,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != Op386SHLLconst {
 			break
@@ -10745,6 +11216,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		}
 		i3 := x2.AuxInt
 		s := x2.Aux
+		_ = x2.Args[2]
 		idx := x2.Args[0]
 		p := x2.Args[1]
 		mem := x2.Args[2]
@@ -10752,6 +11224,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		x0 := o0.Args[0]
 		if x0.Op != Op386MOVWloadidx1 {
 			break
@@ -10760,6 +11233,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -10784,6 +11258,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -10811,6 +11286,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != Op386SHLLconst {
 			break
@@ -10824,6 +11300,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		}
 		i3 := x2.AuxInt
 		s := x2.Aux
+		_ = x2.Args[2]
 		p := x2.Args[0]
 		idx := x2.Args[1]
 		mem := x2.Args[2]
@@ -10831,6 +11308,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		x0 := o0.Args[0]
 		if x0.Op != Op386MOVWloadidx1 {
 			break
@@ -10839,6 +11317,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -10863,6 +11342,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -10890,6 +11370,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != Op386SHLLconst {
 			break
@@ -10903,6 +11384,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		}
 		i3 := x2.AuxInt
 		s := x2.Aux
+		_ = x2.Args[2]
 		idx := x2.Args[0]
 		p := x2.Args[1]
 		mem := x2.Args[2]
@@ -10910,6 +11392,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		x0 := o0.Args[0]
 		if x0.Op != Op386MOVWloadidx1 {
 			break
@@ -10918,6 +11401,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -10942,6 +11426,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -10969,6 +11454,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != Op386SHLLconst {
 			break
@@ -10982,6 +11468,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		}
 		i3 := x2.AuxInt
 		s := x2.Aux
+		_ = x2.Args[2]
 		p := x2.Args[0]
 		idx := x2.Args[1]
 		mem := x2.Args[2]
@@ -10989,6 +11476,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		x0 := o0.Args[0]
 		if x0.Op != Op386MOVWloadidx1 {
 			break
@@ -10997,6 +11485,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -11021,6 +11510,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -11048,6 +11538,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != Op386SHLLconst {
 			break
@@ -11061,6 +11552,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		}
 		i3 := x2.AuxInt
 		s := x2.Aux
+		_ = x2.Args[2]
 		idx := x2.Args[0]
 		p := x2.Args[1]
 		mem := x2.Args[2]
@@ -11068,6 +11560,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		x0 := o0.Args[0]
 		if x0.Op != Op386MOVWloadidx1 {
 			break
@@ -11076,6 +11569,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -11100,6 +11594,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -11127,6 +11622,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != Op386SHLLconst {
 			break
@@ -11140,6 +11636,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		}
 		i3 := x2.AuxInt
 		s := x2.Aux
+		_ = x2.Args[2]
 		p := x2.Args[0]
 		idx := x2.Args[1]
 		mem := x2.Args[2]
@@ -11147,6 +11644,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		x0 := o0.Args[0]
 		if x0.Op != Op386MOVWloadidx1 {
 			break
@@ -11155,6 +11653,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -11179,6 +11678,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -11206,6 +11706,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != Op386SHLLconst {
 			break
@@ -11219,6 +11720,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		}
 		i3 := x2.AuxInt
 		s := x2.Aux
+		_ = x2.Args[2]
 		idx := x2.Args[0]
 		p := x2.Args[1]
 		mem := x2.Args[2]
@@ -11226,6 +11728,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		x0 := o0.Args[0]
 		if x0.Op != Op386MOVWloadidx1 {
 			break
@@ -11234,6 +11737,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -11258,6 +11762,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -11285,6 +11790,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != Op386SHLLconst {
 			break
@@ -11298,6 +11804,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		}
 		i3 := x2.AuxInt
 		s := x2.Aux
+		_ = x2.Args[2]
 		p := x2.Args[0]
 		idx := x2.Args[1]
 		mem := x2.Args[2]
@@ -11305,6 +11812,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		s0 := o0.Args[0]
 		if s0.Op != Op386SHLLconst {
 			break
@@ -11320,6 +11828,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -11337,6 +11846,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -11364,6 +11874,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != Op386SHLLconst {
 			break
@@ -11377,6 +11888,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		}
 		i3 := x2.AuxInt
 		s := x2.Aux
+		_ = x2.Args[2]
 		idx := x2.Args[0]
 		p := x2.Args[1]
 		mem := x2.Args[2]
@@ -11384,6 +11896,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		s0 := o0.Args[0]
 		if s0.Op != Op386SHLLconst {
 			break
@@ -11399,6 +11912,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -11416,6 +11930,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -11443,6 +11958,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != Op386SHLLconst {
 			break
@@ -11456,6 +11972,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		}
 		i3 := x2.AuxInt
 		s := x2.Aux
+		_ = x2.Args[2]
 		p := x2.Args[0]
 		idx := x2.Args[1]
 		mem := x2.Args[2]
@@ -11463,6 +11980,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		s0 := o0.Args[0]
 		if s0.Op != Op386SHLLconst {
 			break
@@ -11478,6 +11996,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -11495,6 +12014,7 @@ func rewriteValue386_Op386ORL_40(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -11527,6 +12047,7 @@ func rewriteValue386_Op386ORL_50(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != Op386SHLLconst {
 			break
@@ -11540,6 +12061,7 @@ func rewriteValue386_Op386ORL_50(v *Value) bool {
 		}
 		i3 := x2.AuxInt
 		s := x2.Aux
+		_ = x2.Args[2]
 		idx := x2.Args[0]
 		p := x2.Args[1]
 		mem := x2.Args[2]
@@ -11547,6 +12069,7 @@ func rewriteValue386_Op386ORL_50(v *Value) bool {
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		s0 := o0.Args[0]
 		if s0.Op != Op386SHLLconst {
 			break
@@ -11562,6 +12085,7 @@ func rewriteValue386_Op386ORL_50(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -11579,6 +12103,7 @@ func rewriteValue386_Op386ORL_50(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -11606,6 +12131,7 @@ func rewriteValue386_Op386ORL_50(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != Op386SHLLconst {
 			break
@@ -11619,6 +12145,7 @@ func rewriteValue386_Op386ORL_50(v *Value) bool {
 		}
 		i3 := x2.AuxInt
 		s := x2.Aux
+		_ = x2.Args[2]
 		p := x2.Args[0]
 		idx := x2.Args[1]
 		mem := x2.Args[2]
@@ -11626,6 +12153,7 @@ func rewriteValue386_Op386ORL_50(v *Value) bool {
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		s0 := o0.Args[0]
 		if s0.Op != Op386SHLLconst {
 			break
@@ -11641,6 +12169,7 @@ func rewriteValue386_Op386ORL_50(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -11658,6 +12187,7 @@ func rewriteValue386_Op386ORL_50(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -11685,6 +12215,7 @@ func rewriteValue386_Op386ORL_50(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != Op386SHLLconst {
 			break
@@ -11698,6 +12229,7 @@ func rewriteValue386_Op386ORL_50(v *Value) bool {
 		}
 		i3 := x2.AuxInt
 		s := x2.Aux
+		_ = x2.Args[2]
 		idx := x2.Args[0]
 		p := x2.Args[1]
 		mem := x2.Args[2]
@@ -11705,6 +12237,7 @@ func rewriteValue386_Op386ORL_50(v *Value) bool {
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		s0 := o0.Args[0]
 		if s0.Op != Op386SHLLconst {
 			break
@@ -11720,6 +12253,7 @@ func rewriteValue386_Op386ORL_50(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -11737,6 +12271,7 @@ func rewriteValue386_Op386ORL_50(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -11764,6 +12299,7 @@ func rewriteValue386_Op386ORL_50(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != Op386SHLLconst {
 			break
@@ -11777,6 +12313,7 @@ func rewriteValue386_Op386ORL_50(v *Value) bool {
 		}
 		i3 := x2.AuxInt
 		s := x2.Aux
+		_ = x2.Args[2]
 		p := x2.Args[0]
 		idx := x2.Args[1]
 		mem := x2.Args[2]
@@ -11784,6 +12321,7 @@ func rewriteValue386_Op386ORL_50(v *Value) bool {
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		s0 := o0.Args[0]
 		if s0.Op != Op386SHLLconst {
 			break
@@ -11799,6 +12337,7 @@ func rewriteValue386_Op386ORL_50(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -11816,6 +12355,7 @@ func rewriteValue386_Op386ORL_50(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -11843,6 +12383,7 @@ func rewriteValue386_Op386ORL_50(v *Value) bool {
 	// cond: i2 == i0+2   && i3 == i0+3   && x0.Uses == 1   && x1.Uses == 1   && x2.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && o0.Uses == 1   && mergePoint(b,x0,x1,x2) != nil   && clobber(x0)   && clobber(x1)   && clobber(x2)   && clobber(s0)   && clobber(s1)   && clobber(o0)
 	// result: @mergePoint(b,x0,x1,x2) (MOVLloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != Op386SHLLconst {
 			break
@@ -11856,6 +12397,7 @@ func rewriteValue386_Op386ORL_50(v *Value) bool {
 		}
 		i3 := x2.AuxInt
 		s := x2.Aux
+		_ = x2.Args[2]
 		idx := x2.Args[0]
 		p := x2.Args[1]
 		mem := x2.Args[2]
@@ -11863,6 +12405,7 @@ func rewriteValue386_Op386ORL_50(v *Value) bool {
 		if o0.Op != Op386ORL {
 			break
 		}
+		_ = o0.Args[1]
 		s0 := o0.Args[0]
 		if s0.Op != Op386SHLLconst {
 			break
@@ -11878,6 +12421,7 @@ func rewriteValue386_Op386ORL_50(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -11895,6 +12439,7 @@ func rewriteValue386_Op386ORL_50(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -12064,6 +12609,7 @@ func rewriteValue386_Op386SARB_0(v *Value) bool {
 	// cond:
 	// result: (SARBconst [min(c&31,7)] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVLconst {
@@ -12112,6 +12658,7 @@ func rewriteValue386_Op386SARL_0(v *Value) bool {
 	// cond:
 	// result: (SARLconst [c&31] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVLconst {
@@ -12127,6 +12674,7 @@ func rewriteValue386_Op386SARL_0(v *Value) bool {
 	// cond:
 	// result: (SARL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ANDLconst {
@@ -12178,6 +12726,7 @@ func rewriteValue386_Op386SARW_0(v *Value) bool {
 	// cond:
 	// result: (SARWconst [min(c&31,15)] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVLconst {
@@ -12226,6 +12775,7 @@ func rewriteValue386_Op386SBBL_0(v *Value) bool {
 	// cond:
 	// result: (SBBLconst [c] x f)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVLconst {
@@ -13069,6 +13619,7 @@ func rewriteValue386_Op386SHLL_0(v *Value) bool {
 	// cond:
 	// result: (SHLLconst [c&31] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVLconst {
@@ -13084,6 +13635,7 @@ func rewriteValue386_Op386SHLL_0(v *Value) bool {
 	// cond:
 	// result: (SHLL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ANDLconst {
@@ -13121,6 +13673,7 @@ func rewriteValue386_Op386SHRB_0(v *Value) bool {
 	// cond: c&31 < 8
 	// result: (SHRBconst [c&31] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVLconst {
@@ -13139,6 +13692,7 @@ func rewriteValue386_Op386SHRB_0(v *Value) bool {
 	// cond: c&31 >= 8
 	// result: (MOVLconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVLconst {
 			break
@@ -13174,6 +13728,7 @@ func rewriteValue386_Op386SHRL_0(v *Value) bool {
 	// cond:
 	// result: (SHRLconst [c&31] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVLconst {
@@ -13189,6 +13744,7 @@ func rewriteValue386_Op386SHRL_0(v *Value) bool {
 	// cond:
 	// result: (SHRL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386ANDLconst {
@@ -13226,6 +13782,7 @@ func rewriteValue386_Op386SHRW_0(v *Value) bool {
 	// cond: c&31 < 16
 	// result: (SHRWconst [c&31] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVLconst {
@@ -13244,6 +13801,7 @@ func rewriteValue386_Op386SHRW_0(v *Value) bool {
 	// cond: c&31 >= 16
 	// result: (MOVLconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVLconst {
 			break
@@ -13281,6 +13839,7 @@ func rewriteValue386_Op386SUBL_0(v *Value) bool {
 	// cond:
 	// result: (SUBLconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVLconst {
@@ -13296,6 +13855,7 @@ func rewriteValue386_Op386SUBL_0(v *Value) bool {
 	// cond:
 	// result: (NEGL (SUBLconst <v.Type> x [c]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386MOVLconst {
 			break
@@ -13313,6 +13873,7 @@ func rewriteValue386_Op386SUBL_0(v *Value) bool {
 	// cond:
 	// result: (MOVLconst [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -13328,6 +13889,7 @@ func rewriteValue386_Op386SUBLcarry_0(v *Value) bool {
 	// cond:
 	// result: (SUBLconstcarry [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVLconst {
@@ -13373,6 +13935,7 @@ func rewriteValue386_Op386XORL_0(v *Value) bool {
 	// cond:
 	// result: (XORLconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != Op386MOVLconst {
@@ -13388,6 +13951,7 @@ func rewriteValue386_Op386XORL_0(v *Value) bool {
 	// cond:
 	// result: (XORLconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386MOVLconst {
 			break
@@ -13403,6 +13967,7 @@ func rewriteValue386_Op386XORL_0(v *Value) bool {
 	// cond: d == 32-c
 	// result: (ROLLconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386SHLLconst {
 			break
@@ -13429,6 +13994,7 @@ func rewriteValue386_Op386XORL_0(v *Value) bool {
 	// cond: d == 32-c
 	// result: (ROLLconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386SHRLconst {
 			break
@@ -13456,6 +14022,7 @@ func rewriteValue386_Op386XORL_0(v *Value) bool {
 	// result: (ROLWconst x [c])
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386SHLLconst {
 			break
@@ -13483,6 +14050,7 @@ func rewriteValue386_Op386XORL_0(v *Value) bool {
 	// result: (ROLWconst x [c])
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386SHRWconst {
 			break
@@ -13510,6 +14078,7 @@ func rewriteValue386_Op386XORL_0(v *Value) bool {
 	// result: (ROLBconst x [c])
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386SHLLconst {
 			break
@@ -13537,6 +14106,7 @@ func rewriteValue386_Op386XORL_0(v *Value) bool {
 	// result: (ROLBconst x [c])
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != Op386SHRBconst {
 			break
@@ -13563,6 +14133,7 @@ func rewriteValue386_Op386XORL_0(v *Value) bool {
 	// cond:
 	// result: (MOVLconst [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -13625,6 +14196,7 @@ func rewriteValue386_OpAdd16_0(v *Value) bool {
 	// cond:
 	// result: (ADDL  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ADDL)
@@ -13638,6 +14210,7 @@ func rewriteValue386_OpAdd32_0(v *Value) bool {
 	// cond:
 	// result: (ADDL  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ADDL)
@@ -13651,6 +14224,7 @@ func rewriteValue386_OpAdd32F_0(v *Value) bool {
 	// cond:
 	// result: (ADDSS x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ADDSS)
@@ -13664,6 +14238,7 @@ func rewriteValue386_OpAdd32carry_0(v *Value) bool {
 	// cond:
 	// result: (ADDLcarry x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ADDLcarry)
@@ -13677,6 +14252,7 @@ func rewriteValue386_OpAdd32withcarry_0(v *Value) bool {
 	// cond:
 	// result: (ADCL x y c)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		c := v.Args[2]
@@ -13692,6 +14268,7 @@ func rewriteValue386_OpAdd64F_0(v *Value) bool {
 	// cond:
 	// result: (ADDSD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ADDSD)
@@ -13705,6 +14282,7 @@ func rewriteValue386_OpAdd8_0(v *Value) bool {
 	// cond:
 	// result: (ADDL  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ADDL)
@@ -13718,6 +14296,7 @@ func rewriteValue386_OpAddPtr_0(v *Value) bool {
 	// cond:
 	// result: (ADDL  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ADDL)
@@ -13744,6 +14323,7 @@ func rewriteValue386_OpAnd16_0(v *Value) bool {
 	// cond:
 	// result: (ANDL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ANDL)
@@ -13757,6 +14337,7 @@ func rewriteValue386_OpAnd32_0(v *Value) bool {
 	// cond:
 	// result: (ANDL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ANDL)
@@ -13770,6 +14351,7 @@ func rewriteValue386_OpAnd8_0(v *Value) bool {
 	// cond:
 	// result: (ANDL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ANDL)
@@ -13783,6 +14365,7 @@ func rewriteValue386_OpAndB_0(v *Value) bool {
 	// cond:
 	// result: (ANDL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ANDL)
@@ -13796,6 +14379,7 @@ func rewriteValue386_OpAvg32u_0(v *Value) bool {
 	// cond:
 	// result: (AVGLU x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386AVGLU)
@@ -13821,6 +14405,7 @@ func rewriteValue386_OpClosureCall_0(v *Value) bool {
 	// result: (CALLclosure [argwid] entry closure mem)
 	for {
 		argwid := v.AuxInt
+		_ = v.Args[2]
 		entry := v.Args[0]
 		closure := v.Args[1]
 		mem := v.Args[2]
@@ -13947,6 +14532,7 @@ func rewriteValue386_OpConvert_0(v *Value) bool {
 	// result: (MOVLconvert <t> x mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		mem := v.Args[1]
 		v.reset(Op386MOVLconvert)
@@ -14027,6 +14613,7 @@ func rewriteValue386_OpDiv16_0(v *Value) bool {
 	// cond:
 	// result: (DIVW  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386DIVW)
@@ -14040,6 +14627,7 @@ func rewriteValue386_OpDiv16u_0(v *Value) bool {
 	// cond:
 	// result: (DIVWU x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386DIVWU)
@@ -14053,6 +14641,7 @@ func rewriteValue386_OpDiv32_0(v *Value) bool {
 	// cond:
 	// result: (DIVL  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386DIVL)
@@ -14066,6 +14655,7 @@ func rewriteValue386_OpDiv32F_0(v *Value) bool {
 	// cond:
 	// result: (DIVSS x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386DIVSS)
@@ -14079,6 +14669,7 @@ func rewriteValue386_OpDiv32u_0(v *Value) bool {
 	// cond:
 	// result: (DIVLU x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386DIVLU)
@@ -14092,6 +14683,7 @@ func rewriteValue386_OpDiv64F_0(v *Value) bool {
 	// cond:
 	// result: (DIVSD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386DIVSD)
@@ -14109,6 +14701,7 @@ func rewriteValue386_OpDiv8_0(v *Value) bool {
 	// cond:
 	// result: (DIVW  (SignExt8to16 x) (SignExt8to16 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386DIVW)
@@ -14130,6 +14723,7 @@ func rewriteValue386_OpDiv8u_0(v *Value) bool {
 	// cond:
 	// result: (DIVWU (ZeroExt8to16 x) (ZeroExt8to16 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386DIVWU)
@@ -14149,6 +14743,7 @@ func rewriteValue386_OpEq16_0(v *Value) bool {
 	// cond:
 	// result: (SETEQ (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETEQ)
@@ -14166,6 +14761,7 @@ func rewriteValue386_OpEq32_0(v *Value) bool {
 	// cond:
 	// result: (SETEQ (CMPL x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETEQ)
@@ -14183,6 +14779,7 @@ func rewriteValue386_OpEq32F_0(v *Value) bool {
 	// cond:
 	// result: (SETEQF (UCOMISS x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETEQF)
@@ -14200,6 +14797,7 @@ func rewriteValue386_OpEq64F_0(v *Value) bool {
 	// cond:
 	// result: (SETEQF (UCOMISD x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETEQF)
@@ -14217,6 +14815,7 @@ func rewriteValue386_OpEq8_0(v *Value) bool {
 	// cond:
 	// result: (SETEQ (CMPB x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETEQ)
@@ -14234,6 +14833,7 @@ func rewriteValue386_OpEqB_0(v *Value) bool {
 	// cond:
 	// result: (SETEQ (CMPB x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETEQ)
@@ -14251,6 +14851,7 @@ func rewriteValue386_OpEqPtr_0(v *Value) bool {
 	// cond:
 	// result: (SETEQ (CMPL x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETEQ)
@@ -14268,6 +14869,7 @@ func rewriteValue386_OpGeq16_0(v *Value) bool {
 	// cond:
 	// result: (SETGE (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETGE)
@@ -14285,6 +14887,7 @@ func rewriteValue386_OpGeq16U_0(v *Value) bool {
 	// cond:
 	// result: (SETAE (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETAE)
@@ -14302,6 +14905,7 @@ func rewriteValue386_OpGeq32_0(v *Value) bool {
 	// cond:
 	// result: (SETGE (CMPL x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETGE)
@@ -14319,6 +14923,7 @@ func rewriteValue386_OpGeq32F_0(v *Value) bool {
 	// cond:
 	// result: (SETGEF (UCOMISS x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETGEF)
@@ -14336,6 +14941,7 @@ func rewriteValue386_OpGeq32U_0(v *Value) bool {
 	// cond:
 	// result: (SETAE (CMPL x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETAE)
@@ -14353,6 +14959,7 @@ func rewriteValue386_OpGeq64F_0(v *Value) bool {
 	// cond:
 	// result: (SETGEF (UCOMISD x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETGEF)
@@ -14370,6 +14977,7 @@ func rewriteValue386_OpGeq8_0(v *Value) bool {
 	// cond:
 	// result: (SETGE (CMPB x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETGE)
@@ -14387,6 +14995,7 @@ func rewriteValue386_OpGeq8U_0(v *Value) bool {
 	// cond:
 	// result: (SETAE (CMPB x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETAE)
@@ -14424,6 +15033,7 @@ func rewriteValue386_OpGreater16_0(v *Value) bool {
 	// cond:
 	// result: (SETG (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETG)
@@ -14441,6 +15051,7 @@ func rewriteValue386_OpGreater16U_0(v *Value) bool {
 	// cond:
 	// result: (SETA (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETA)
@@ -14458,6 +15069,7 @@ func rewriteValue386_OpGreater32_0(v *Value) bool {
 	// cond:
 	// result: (SETG (CMPL x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETG)
@@ -14475,6 +15087,7 @@ func rewriteValue386_OpGreater32F_0(v *Value) bool {
 	// cond:
 	// result: (SETGF (UCOMISS x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETGF)
@@ -14492,6 +15105,7 @@ func rewriteValue386_OpGreater32U_0(v *Value) bool {
 	// cond:
 	// result: (SETA (CMPL x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETA)
@@ -14509,6 +15123,7 @@ func rewriteValue386_OpGreater64F_0(v *Value) bool {
 	// cond:
 	// result: (SETGF (UCOMISD x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETGF)
@@ -14526,6 +15141,7 @@ func rewriteValue386_OpGreater8_0(v *Value) bool {
 	// cond:
 	// result: (SETG (CMPB x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETG)
@@ -14543,6 +15159,7 @@ func rewriteValue386_OpGreater8U_0(v *Value) bool {
 	// cond:
 	// result: (SETA (CMPB x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETA)
@@ -14558,6 +15175,7 @@ func rewriteValue386_OpHmul32_0(v *Value) bool {
 	// cond:
 	// result: (HMULL  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386HMULL)
@@ -14571,6 +15189,7 @@ func rewriteValue386_OpHmul32u_0(v *Value) bool {
 	// cond:
 	// result: (HMULLU x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386HMULLU)
@@ -14585,6 +15204,7 @@ func rewriteValue386_OpInterCall_0(v *Value) bool {
 	// result: (CALLinter [argwid] entry mem)
 	for {
 		argwid := v.AuxInt
+		_ = v.Args[1]
 		entry := v.Args[0]
 		mem := v.Args[1]
 		v.reset(Op386CALLinter)
@@ -14601,6 +15221,7 @@ func rewriteValue386_OpIsInBounds_0(v *Value) bool {
 	// cond:
 	// result: (SETB (CMPL idx len))
 	for {
+		_ = v.Args[1]
 		idx := v.Args[0]
 		len := v.Args[1]
 		v.reset(Op386SETB)
@@ -14634,6 +15255,7 @@ func rewriteValue386_OpIsSliceInBounds_0(v *Value) bool {
 	// cond:
 	// result: (SETBE (CMPL idx len))
 	for {
+		_ = v.Args[1]
 		idx := v.Args[0]
 		len := v.Args[1]
 		v.reset(Op386SETBE)
@@ -14651,6 +15273,7 @@ func rewriteValue386_OpLeq16_0(v *Value) bool {
 	// cond:
 	// result: (SETLE (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETLE)
@@ -14668,6 +15291,7 @@ func rewriteValue386_OpLeq16U_0(v *Value) bool {
 	// cond:
 	// result: (SETBE (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETBE)
@@ -14685,6 +15309,7 @@ func rewriteValue386_OpLeq32_0(v *Value) bool {
 	// cond:
 	// result: (SETLE (CMPL x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETLE)
@@ -14702,6 +15327,7 @@ func rewriteValue386_OpLeq32F_0(v *Value) bool {
 	// cond:
 	// result: (SETGEF (UCOMISS y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETGEF)
@@ -14719,6 +15345,7 @@ func rewriteValue386_OpLeq32U_0(v *Value) bool {
 	// cond:
 	// result: (SETBE (CMPL x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETBE)
@@ -14736,6 +15363,7 @@ func rewriteValue386_OpLeq64F_0(v *Value) bool {
 	// cond:
 	// result: (SETGEF (UCOMISD y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETGEF)
@@ -14753,6 +15381,7 @@ func rewriteValue386_OpLeq8_0(v *Value) bool {
 	// cond:
 	// result: (SETLE (CMPB x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETLE)
@@ -14770,6 +15399,7 @@ func rewriteValue386_OpLeq8U_0(v *Value) bool {
 	// cond:
 	// result: (SETBE (CMPB x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETBE)
@@ -14787,6 +15417,7 @@ func rewriteValue386_OpLess16_0(v *Value) bool {
 	// cond:
 	// result: (SETL (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETL)
@@ -14804,6 +15435,7 @@ func rewriteValue386_OpLess16U_0(v *Value) bool {
 	// cond:
 	// result: (SETB (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETB)
@@ -14821,6 +15453,7 @@ func rewriteValue386_OpLess32_0(v *Value) bool {
 	// cond:
 	// result: (SETL (CMPL x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETL)
@@ -14838,6 +15471,7 @@ func rewriteValue386_OpLess32F_0(v *Value) bool {
 	// cond:
 	// result: (SETGF (UCOMISS y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETGF)
@@ -14855,6 +15489,7 @@ func rewriteValue386_OpLess32U_0(v *Value) bool {
 	// cond:
 	// result: (SETB (CMPL x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETB)
@@ -14872,6 +15507,7 @@ func rewriteValue386_OpLess64F_0(v *Value) bool {
 	// cond:
 	// result: (SETGF (UCOMISD y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETGF)
@@ -14889,6 +15525,7 @@ func rewriteValue386_OpLess8_0(v *Value) bool {
 	// cond:
 	// result: (SETL (CMPB x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETL)
@@ -14906,6 +15543,7 @@ func rewriteValue386_OpLess8U_0(v *Value) bool {
 	// cond:
 	// result: (SETB (CMPB x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETB)
@@ -14922,6 +15560,7 @@ func rewriteValue386_OpLoad_0(v *Value) bool {
 	// result: (MOVLload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is32BitInt(t) || isPtr(t)) {
@@ -14937,6 +15576,7 @@ func rewriteValue386_OpLoad_0(v *Value) bool {
 	// result: (MOVWload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is16BitInt(t)) {
@@ -14952,6 +15592,7 @@ func rewriteValue386_OpLoad_0(v *Value) bool {
 	// result: (MOVBload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.IsBoolean() || is8BitInt(t)) {
@@ -14967,6 +15608,7 @@ func rewriteValue386_OpLoad_0(v *Value) bool {
 	// result: (MOVSSload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is32BitFloat(t)) {
@@ -14982,6 +15624,7 @@ func rewriteValue386_OpLoad_0(v *Value) bool {
 	// result: (MOVSDload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is64BitFloat(t)) {
@@ -15002,6 +15645,7 @@ func rewriteValue386_OpLsh16x16_0(v *Value) bool {
 	// result: (ANDL (SHLL <t> x y) (SBBLcarrymask <t> (CMPWconst y [32])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ANDL)
@@ -15026,6 +15670,7 @@ func rewriteValue386_OpLsh16x32_0(v *Value) bool {
 	// result: (ANDL (SHLL <t> x y) (SBBLcarrymask <t> (CMPLconst y [32])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ANDL)
@@ -15047,6 +15692,7 @@ func rewriteValue386_OpLsh16x64_0(v *Value) bool {
 	// cond: uint64(c) < 16
 	// result: (SHLLconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -15065,6 +15711,7 @@ func rewriteValue386_OpLsh16x64_0(v *Value) bool {
 	// cond: uint64(c) >= 16
 	// result: (Const16 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -15087,6 +15734,7 @@ func rewriteValue386_OpLsh16x8_0(v *Value) bool {
 	// result: (ANDL (SHLL <t> x y) (SBBLcarrymask <t> (CMPBconst y [32])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ANDL)
@@ -15111,6 +15759,7 @@ func rewriteValue386_OpLsh32x16_0(v *Value) bool {
 	// result: (ANDL (SHLL <t> x y) (SBBLcarrymask <t> (CMPWconst y [32])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ANDL)
@@ -15135,6 +15784,7 @@ func rewriteValue386_OpLsh32x32_0(v *Value) bool {
 	// result: (ANDL (SHLL <t> x y) (SBBLcarrymask <t> (CMPLconst y [32])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ANDL)
@@ -15156,6 +15806,7 @@ func rewriteValue386_OpLsh32x64_0(v *Value) bool {
 	// cond: uint64(c) < 32
 	// result: (SHLLconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -15174,6 +15825,7 @@ func rewriteValue386_OpLsh32x64_0(v *Value) bool {
 	// cond: uint64(c) >= 32
 	// result: (Const32 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -15196,6 +15848,7 @@ func rewriteValue386_OpLsh32x8_0(v *Value) bool {
 	// result: (ANDL (SHLL <t> x y) (SBBLcarrymask <t> (CMPBconst y [32])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ANDL)
@@ -15220,6 +15873,7 @@ func rewriteValue386_OpLsh8x16_0(v *Value) bool {
 	// result: (ANDL (SHLL <t> x y) (SBBLcarrymask <t> (CMPWconst y [32])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ANDL)
@@ -15244,6 +15898,7 @@ func rewriteValue386_OpLsh8x32_0(v *Value) bool {
 	// result: (ANDL (SHLL <t> x y) (SBBLcarrymask <t> (CMPLconst y [32])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ANDL)
@@ -15265,6 +15920,7 @@ func rewriteValue386_OpLsh8x64_0(v *Value) bool {
 	// cond: uint64(c) < 8
 	// result: (SHLLconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -15283,6 +15939,7 @@ func rewriteValue386_OpLsh8x64_0(v *Value) bool {
 	// cond: uint64(c) >= 8
 	// result: (Const8 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -15305,6 +15962,7 @@ func rewriteValue386_OpLsh8x8_0(v *Value) bool {
 	// result: (ANDL (SHLL <t> x y) (SBBLcarrymask <t> (CMPBconst y [32])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ANDL)
@@ -15326,6 +15984,7 @@ func rewriteValue386_OpMod16_0(v *Value) bool {
 	// cond:
 	// result: (MODW  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386MODW)
@@ -15339,6 +15998,7 @@ func rewriteValue386_OpMod16u_0(v *Value) bool {
 	// cond:
 	// result: (MODWU x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386MODWU)
@@ -15352,6 +16012,7 @@ func rewriteValue386_OpMod32_0(v *Value) bool {
 	// cond:
 	// result: (MODL  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386MODL)
@@ -15365,6 +16026,7 @@ func rewriteValue386_OpMod32u_0(v *Value) bool {
 	// cond:
 	// result: (MODLU x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386MODLU)
@@ -15382,6 +16044,7 @@ func rewriteValue386_OpMod8_0(v *Value) bool {
 	// cond:
 	// result: (MODW  (SignExt8to16 x) (SignExt8to16 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386MODW)
@@ -15403,6 +16066,7 @@ func rewriteValue386_OpMod8u_0(v *Value) bool {
 	// cond:
 	// result: (MODWU (ZeroExt8to16 x) (ZeroExt8to16 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386MODWU)
@@ -15427,6 +16091,7 @@ func rewriteValue386_OpMove_0(v *Value) bool {
 		if v.AuxInt != 0 {
 			break
 		}
+		_ = v.Args[2]
 		mem := v.Args[2]
 		v.reset(OpCopy)
 		v.Type = mem.Type
@@ -15440,6 +16105,7 @@ func rewriteValue386_OpMove_0(v *Value) bool {
 		if v.AuxInt != 1 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -15459,6 +16125,7 @@ func rewriteValue386_OpMove_0(v *Value) bool {
 		if v.AuxInt != 2 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -15478,6 +16145,7 @@ func rewriteValue386_OpMove_0(v *Value) bool {
 		if v.AuxInt != 4 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -15497,6 +16165,7 @@ func rewriteValue386_OpMove_0(v *Value) bool {
 		if v.AuxInt != 3 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -15525,6 +16194,7 @@ func rewriteValue386_OpMove_0(v *Value) bool {
 		if v.AuxInt != 5 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -15553,6 +16223,7 @@ func rewriteValue386_OpMove_0(v *Value) bool {
 		if v.AuxInt != 6 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -15581,6 +16252,7 @@ func rewriteValue386_OpMove_0(v *Value) bool {
 		if v.AuxInt != 7 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -15609,6 +16281,7 @@ func rewriteValue386_OpMove_0(v *Value) bool {
 		if v.AuxInt != 8 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -15635,6 +16308,7 @@ func rewriteValue386_OpMove_0(v *Value) bool {
 	// result: (Move [s-s%4] 		(ADDLconst <dst.Type> dst [s%4]) 		(ADDLconst <src.Type> src [s%4]) 		(MOVLstore dst (MOVLload src mem) mem))
 	for {
 		s := v.AuxInt
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -15675,6 +16349,7 @@ func rewriteValue386_OpMove_10(v *Value) bool {
 	// result: (DUFFCOPY [10*(128-s/4)] dst src mem)
 	for {
 		s := v.AuxInt
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -15693,6 +16368,7 @@ func rewriteValue386_OpMove_10(v *Value) bool {
 	// result: (REPMOVSL dst src (MOVLconst [s/4]) mem)
 	for {
 		s := v.AuxInt
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -15715,6 +16391,7 @@ func rewriteValue386_OpMul16_0(v *Value) bool {
 	// cond:
 	// result: (MULL  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386MULL)
@@ -15728,6 +16405,7 @@ func rewriteValue386_OpMul32_0(v *Value) bool {
 	// cond:
 	// result: (MULL  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386MULL)
@@ -15741,6 +16419,7 @@ func rewriteValue386_OpMul32F_0(v *Value) bool {
 	// cond:
 	// result: (MULSS x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386MULSS)
@@ -15754,6 +16433,7 @@ func rewriteValue386_OpMul32uhilo_0(v *Value) bool {
 	// cond:
 	// result: (MULLQU x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386MULLQU)
@@ -15767,6 +16447,7 @@ func rewriteValue386_OpMul64F_0(v *Value) bool {
 	// cond:
 	// result: (MULSD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386MULSD)
@@ -15780,6 +16461,7 @@ func rewriteValue386_OpMul8_0(v *Value) bool {
 	// cond:
 	// result: (MULL  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386MULL)
@@ -15900,6 +16582,7 @@ func rewriteValue386_OpNeq16_0(v *Value) bool {
 	// cond:
 	// result: (SETNE (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETNE)
@@ -15917,6 +16600,7 @@ func rewriteValue386_OpNeq32_0(v *Value) bool {
 	// cond:
 	// result: (SETNE (CMPL x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETNE)
@@ -15934,6 +16618,7 @@ func rewriteValue386_OpNeq32F_0(v *Value) bool {
 	// cond:
 	// result: (SETNEF (UCOMISS x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETNEF)
@@ -15951,6 +16636,7 @@ func rewriteValue386_OpNeq64F_0(v *Value) bool {
 	// cond:
 	// result: (SETNEF (UCOMISD x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETNEF)
@@ -15968,6 +16654,7 @@ func rewriteValue386_OpNeq8_0(v *Value) bool {
 	// cond:
 	// result: (SETNE (CMPB x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETNE)
@@ -15985,6 +16672,7 @@ func rewriteValue386_OpNeqB_0(v *Value) bool {
 	// cond:
 	// result: (SETNE (CMPB x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETNE)
@@ -16002,6 +16690,7 @@ func rewriteValue386_OpNeqPtr_0(v *Value) bool {
 	// cond:
 	// result: (SETNE (CMPL x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SETNE)
@@ -16017,6 +16706,7 @@ func rewriteValue386_OpNilCheck_0(v *Value) bool {
 	// cond:
 	// result: (LoweredNilCheck ptr mem)
 	for {
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(Op386LoweredNilCheck)
@@ -16055,6 +16745,7 @@ func rewriteValue386_OpOr16_0(v *Value) bool {
 	// cond:
 	// result: (ORL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ORL)
@@ -16068,6 +16759,7 @@ func rewriteValue386_OpOr32_0(v *Value) bool {
 	// cond:
 	// result: (ORL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ORL)
@@ -16081,6 +16773,7 @@ func rewriteValue386_OpOr8_0(v *Value) bool {
 	// cond:
 	// result: (ORL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ORL)
@@ -16094,6 +16787,7 @@ func rewriteValue386_OpOrB_0(v *Value) bool {
 	// cond:
 	// result: (ORL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ORL)
@@ -16134,6 +16828,7 @@ func rewriteValue386_OpRsh16Ux16_0(v *Value) bool {
 	// result: (ANDL (SHRW <t> x y) (SBBLcarrymask <t> (CMPWconst y [16])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ANDL)
@@ -16158,6 +16853,7 @@ func rewriteValue386_OpRsh16Ux32_0(v *Value) bool {
 	// result: (ANDL (SHRW <t> x y) (SBBLcarrymask <t> (CMPLconst y [16])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ANDL)
@@ -16179,6 +16875,7 @@ func rewriteValue386_OpRsh16Ux64_0(v *Value) bool {
 	// cond: uint64(c) < 16
 	// result: (SHRWconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -16197,6 +16894,7 @@ func rewriteValue386_OpRsh16Ux64_0(v *Value) bool {
 	// cond: uint64(c) >= 16
 	// result: (Const16 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -16219,6 +16917,7 @@ func rewriteValue386_OpRsh16Ux8_0(v *Value) bool {
 	// result: (ANDL (SHRW <t> x y) (SBBLcarrymask <t> (CMPBconst y [16])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ANDL)
@@ -16243,6 +16942,7 @@ func rewriteValue386_OpRsh16x16_0(v *Value) bool {
 	// result: (SARW <t> x (ORL <y.Type> y (NOTL <y.Type> (SBBLcarrymask <y.Type> (CMPWconst y [16])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SARW)
@@ -16270,6 +16970,7 @@ func rewriteValue386_OpRsh16x32_0(v *Value) bool {
 	// result: (SARW <t> x (ORL <y.Type> y (NOTL <y.Type> (SBBLcarrymask <y.Type> (CMPLconst y [16])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SARW)
@@ -16294,6 +16995,7 @@ func rewriteValue386_OpRsh16x64_0(v *Value) bool {
 	// cond: uint64(c) < 16
 	// result: (SARWconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -16312,6 +17014,7 @@ func rewriteValue386_OpRsh16x64_0(v *Value) bool {
 	// cond: uint64(c) >= 16
 	// result: (SARWconst x [15])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -16336,6 +17039,7 @@ func rewriteValue386_OpRsh16x8_0(v *Value) bool {
 	// result: (SARW <t> x (ORL <y.Type> y (NOTL <y.Type> (SBBLcarrymask <y.Type> (CMPBconst y [16])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SARW)
@@ -16363,6 +17067,7 @@ func rewriteValue386_OpRsh32Ux16_0(v *Value) bool {
 	// result: (ANDL (SHRL <t> x y) (SBBLcarrymask <t> (CMPWconst y [32])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ANDL)
@@ -16387,6 +17092,7 @@ func rewriteValue386_OpRsh32Ux32_0(v *Value) bool {
 	// result: (ANDL (SHRL <t> x y) (SBBLcarrymask <t> (CMPLconst y [32])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ANDL)
@@ -16408,6 +17114,7 @@ func rewriteValue386_OpRsh32Ux64_0(v *Value) bool {
 	// cond: uint64(c) < 32
 	// result: (SHRLconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -16426,6 +17133,7 @@ func rewriteValue386_OpRsh32Ux64_0(v *Value) bool {
 	// cond: uint64(c) >= 32
 	// result: (Const32 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -16448,6 +17156,7 @@ func rewriteValue386_OpRsh32Ux8_0(v *Value) bool {
 	// result: (ANDL (SHRL <t> x y) (SBBLcarrymask <t> (CMPBconst y [32])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ANDL)
@@ -16472,6 +17181,7 @@ func rewriteValue386_OpRsh32x16_0(v *Value) bool {
 	// result: (SARL <t> x (ORL <y.Type> y (NOTL <y.Type> (SBBLcarrymask <y.Type> (CMPWconst y [32])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SARL)
@@ -16499,6 +17209,7 @@ func rewriteValue386_OpRsh32x32_0(v *Value) bool {
 	// result: (SARL <t> x (ORL <y.Type> y (NOTL <y.Type> (SBBLcarrymask <y.Type> (CMPLconst y [32])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SARL)
@@ -16523,6 +17234,7 @@ func rewriteValue386_OpRsh32x64_0(v *Value) bool {
 	// cond: uint64(c) < 32
 	// result: (SARLconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -16541,6 +17253,7 @@ func rewriteValue386_OpRsh32x64_0(v *Value) bool {
 	// cond: uint64(c) >= 32
 	// result: (SARLconst x [31])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -16565,6 +17278,7 @@ func rewriteValue386_OpRsh32x8_0(v *Value) bool {
 	// result: (SARL <t> x (ORL <y.Type> y (NOTL <y.Type> (SBBLcarrymask <y.Type> (CMPBconst y [32])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SARL)
@@ -16592,6 +17306,7 @@ func rewriteValue386_OpRsh8Ux16_0(v *Value) bool {
 	// result: (ANDL (SHRB <t> x y) (SBBLcarrymask <t> (CMPWconst y [8])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ANDL)
@@ -16616,6 +17331,7 @@ func rewriteValue386_OpRsh8Ux32_0(v *Value) bool {
 	// result: (ANDL (SHRB <t> x y) (SBBLcarrymask <t> (CMPLconst y [8])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ANDL)
@@ -16637,6 +17353,7 @@ func rewriteValue386_OpRsh8Ux64_0(v *Value) bool {
 	// cond: uint64(c) < 8
 	// result: (SHRBconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -16655,6 +17372,7 @@ func rewriteValue386_OpRsh8Ux64_0(v *Value) bool {
 	// cond: uint64(c) >= 8
 	// result: (Const8 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -16677,6 +17395,7 @@ func rewriteValue386_OpRsh8Ux8_0(v *Value) bool {
 	// result: (ANDL (SHRB <t> x y) (SBBLcarrymask <t> (CMPBconst y [8])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386ANDL)
@@ -16701,6 +17420,7 @@ func rewriteValue386_OpRsh8x16_0(v *Value) bool {
 	// result: (SARB <t> x (ORL <y.Type> y (NOTL <y.Type> (SBBLcarrymask <y.Type> (CMPWconst y [8])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SARB)
@@ -16728,6 +17448,7 @@ func rewriteValue386_OpRsh8x32_0(v *Value) bool {
 	// result: (SARB <t> x (ORL <y.Type> y (NOTL <y.Type> (SBBLcarrymask <y.Type> (CMPLconst y [8])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SARB)
@@ -16752,6 +17473,7 @@ func rewriteValue386_OpRsh8x64_0(v *Value) bool {
 	// cond: uint64(c) < 8
 	// result: (SARBconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -16770,6 +17492,7 @@ func rewriteValue386_OpRsh8x64_0(v *Value) bool {
 	// cond: uint64(c) >= 8
 	// result: (SARBconst x [7])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -16794,6 +17517,7 @@ func rewriteValue386_OpRsh8x8_0(v *Value) bool {
 	// result: (SARB <t> x (ORL <y.Type> y (NOTL <y.Type> (SBBLcarrymask <y.Type> (CMPBconst y [8])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SARB)
@@ -16907,6 +17631,7 @@ func rewriteValue386_OpStore_0(v *Value) bool {
 	// result: (MOVSDstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -16924,6 +17649,7 @@ func rewriteValue386_OpStore_0(v *Value) bool {
 	// result: (MOVSSstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -16941,6 +17667,7 @@ func rewriteValue386_OpStore_0(v *Value) bool {
 	// result: (MOVLstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -16958,6 +17685,7 @@ func rewriteValue386_OpStore_0(v *Value) bool {
 	// result: (MOVWstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -16975,6 +17703,7 @@ func rewriteValue386_OpStore_0(v *Value) bool {
 	// result: (MOVBstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -16994,6 +17723,7 @@ func rewriteValue386_OpSub16_0(v *Value) bool {
 	// cond:
 	// result: (SUBL  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SUBL)
@@ -17007,6 +17737,7 @@ func rewriteValue386_OpSub32_0(v *Value) bool {
 	// cond:
 	// result: (SUBL  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SUBL)
@@ -17020,6 +17751,7 @@ func rewriteValue386_OpSub32F_0(v *Value) bool {
 	// cond:
 	// result: (SUBSS x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SUBSS)
@@ -17033,6 +17765,7 @@ func rewriteValue386_OpSub32carry_0(v *Value) bool {
 	// cond:
 	// result: (SUBLcarry x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SUBLcarry)
@@ -17046,6 +17779,7 @@ func rewriteValue386_OpSub32withcarry_0(v *Value) bool {
 	// cond:
 	// result: (SBBL x y c)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		c := v.Args[2]
@@ -17061,6 +17795,7 @@ func rewriteValue386_OpSub64F_0(v *Value) bool {
 	// cond:
 	// result: (SUBSD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SUBSD)
@@ -17074,6 +17809,7 @@ func rewriteValue386_OpSub8_0(v *Value) bool {
 	// cond:
 	// result: (SUBL  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SUBL)
@@ -17087,6 +17823,7 @@ func rewriteValue386_OpSubPtr_0(v *Value) bool {
 	// cond:
 	// result: (SUBL  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386SUBL)
@@ -17136,6 +17873,7 @@ func rewriteValue386_OpXor16_0(v *Value) bool {
 	// cond:
 	// result: (XORL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386XORL)
@@ -17149,6 +17887,7 @@ func rewriteValue386_OpXor32_0(v *Value) bool {
 	// cond:
 	// result: (XORL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386XORL)
@@ -17162,6 +17901,7 @@ func rewriteValue386_OpXor8_0(v *Value) bool {
 	// cond:
 	// result: (XORL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(Op386XORL)
@@ -17182,6 +17922,7 @@ func rewriteValue386_OpZero_0(v *Value) bool {
 		if v.AuxInt != 0 {
 			break
 		}
+		_ = v.Args[1]
 		mem := v.Args[1]
 		v.reset(OpCopy)
 		v.Type = mem.Type
@@ -17195,6 +17936,7 @@ func rewriteValue386_OpZero_0(v *Value) bool {
 		if v.AuxInt != 1 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(Op386MOVBstoreconst)
@@ -17210,6 +17952,7 @@ func rewriteValue386_OpZero_0(v *Value) bool {
 		if v.AuxInt != 2 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(Op386MOVWstoreconst)
@@ -17225,6 +17968,7 @@ func rewriteValue386_OpZero_0(v *Value) bool {
 		if v.AuxInt != 4 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(Op386MOVLstoreconst)
@@ -17240,6 +17984,7 @@ func rewriteValue386_OpZero_0(v *Value) bool {
 		if v.AuxInt != 3 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(Op386MOVBstoreconst)
@@ -17259,6 +18004,7 @@ func rewriteValue386_OpZero_0(v *Value) bool {
 		if v.AuxInt != 5 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(Op386MOVBstoreconst)
@@ -17278,6 +18024,7 @@ func rewriteValue386_OpZero_0(v *Value) bool {
 		if v.AuxInt != 6 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(Op386MOVWstoreconst)
@@ -17297,6 +18044,7 @@ func rewriteValue386_OpZero_0(v *Value) bool {
 		if v.AuxInt != 7 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(Op386MOVLstoreconst)
@@ -17314,6 +18062,7 @@ func rewriteValue386_OpZero_0(v *Value) bool {
 	// result: (Zero [s-s%4] (ADDLconst destptr [s%4]) 		(MOVLstoreconst [0] destptr mem))
 	for {
 		s := v.AuxInt
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		if !(s%4 != 0 && s > 4) {
@@ -17339,6 +18088,7 @@ func rewriteValue386_OpZero_0(v *Value) bool {
 		if v.AuxInt != 8 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(Op386MOVLstoreconst)
@@ -17367,6 +18117,7 @@ func rewriteValue386_OpZero_10(v *Value) bool {
 		if v.AuxInt != 12 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(Op386MOVLstoreconst)
@@ -17390,6 +18141,7 @@ func rewriteValue386_OpZero_10(v *Value) bool {
 		if v.AuxInt != 16 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(Op386MOVLstoreconst)
@@ -17415,6 +18167,7 @@ func rewriteValue386_OpZero_10(v *Value) bool {
 	// result: (DUFFZERO [1*(128-s/4)] destptr (MOVLconst [0]) mem)
 	for {
 		s := v.AuxInt
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		if !(s > 16 && s <= 4*128 && s%4 == 0 && !config.noDuffDevice) {
@@ -17434,6 +18187,7 @@ func rewriteValue386_OpZero_10(v *Value) bool {
 	// result: (REPSTOSL destptr (MOVLconst [s/4]) (MOVLconst [0]) mem)
 	for {
 		s := v.AuxInt
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		if !((s > 4*128 || (config.noDuffDevice && s > 16)) && s%4 == 0) {
@@ -18103,6 +18857,7 @@ func rewriteBlock386(b *Block) bool {
 			if v.Op != Op386TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != Op386SETL {
 				break
@@ -18127,6 +18882,7 @@ func rewriteBlock386(b *Block) bool {
 			if v.Op != Op386TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != Op386SETL {
 				break
@@ -18151,6 +18907,7 @@ func rewriteBlock386(b *Block) bool {
 			if v.Op != Op386TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != Op386SETLE {
 				break
@@ -18175,6 +18932,7 @@ func rewriteBlock386(b *Block) bool {
 			if v.Op != Op386TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != Op386SETLE {
 				break
@@ -18199,6 +18957,7 @@ func rewriteBlock386(b *Block) bool {
 			if v.Op != Op386TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != Op386SETG {
 				break
@@ -18223,6 +18982,7 @@ func rewriteBlock386(b *Block) bool {
 			if v.Op != Op386TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != Op386SETG {
 				break
@@ -18247,6 +19007,7 @@ func rewriteBlock386(b *Block) bool {
 			if v.Op != Op386TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != Op386SETGE {
 				break
@@ -18271,6 +19032,7 @@ func rewriteBlock386(b *Block) bool {
 			if v.Op != Op386TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != Op386SETGE {
 				break
@@ -18295,6 +19057,7 @@ func rewriteBlock386(b *Block) bool {
 			if v.Op != Op386TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != Op386SETEQ {
 				break
@@ -18319,6 +19082,7 @@ func rewriteBlock386(b *Block) bool {
 			if v.Op != Op386TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != Op386SETEQ {
 				break
@@ -18343,6 +19107,7 @@ func rewriteBlock386(b *Block) bool {
 			if v.Op != Op386TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != Op386SETNE {
 				break
@@ -18367,6 +19132,7 @@ func rewriteBlock386(b *Block) bool {
 			if v.Op != Op386TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != Op386SETNE {
 				break
@@ -18391,6 +19157,7 @@ func rewriteBlock386(b *Block) bool {
 			if v.Op != Op386TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != Op386SETB {
 				break
@@ -18415,6 +19182,7 @@ func rewriteBlock386(b *Block) bool {
 			if v.Op != Op386TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != Op386SETB {
 				break
@@ -18439,6 +19207,7 @@ func rewriteBlock386(b *Block) bool {
 			if v.Op != Op386TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != Op386SETBE {
 				break
@@ -18463,6 +19232,7 @@ func rewriteBlock386(b *Block) bool {
 			if v.Op != Op386TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != Op386SETBE {
 				break
@@ -18487,6 +19257,7 @@ func rewriteBlock386(b *Block) bool {
 			if v.Op != Op386TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != Op386SETA {
 				break
@@ -18511,6 +19282,7 @@ func rewriteBlock386(b *Block) bool {
 			if v.Op != Op386TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != Op386SETA {
 				break
@@ -18535,6 +19307,7 @@ func rewriteBlock386(b *Block) bool {
 			if v.Op != Op386TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != Op386SETAE {
 				break
@@ -18559,6 +19332,7 @@ func rewriteBlock386(b *Block) bool {
 			if v.Op != Op386TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != Op386SETAE {
 				break
@@ -18583,6 +19357,7 @@ func rewriteBlock386(b *Block) bool {
 			if v.Op != Op386TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != Op386SETGF {
 				break
@@ -18607,6 +19382,7 @@ func rewriteBlock386(b *Block) bool {
 			if v.Op != Op386TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != Op386SETGF {
 				break
@@ -18631,6 +19407,7 @@ func rewriteBlock386(b *Block) bool {
 			if v.Op != Op386TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != Op386SETGEF {
 				break
@@ -18655,6 +19432,7 @@ func rewriteBlock386(b *Block) bool {
 			if v.Op != Op386TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != Op386SETGEF {
 				break
@@ -18679,6 +19457,7 @@ func rewriteBlock386(b *Block) bool {
 			if v.Op != Op386TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != Op386SETEQF {
 				break
@@ -18703,6 +19482,7 @@ func rewriteBlock386(b *Block) bool {
 			if v.Op != Op386TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != Op386SETEQF {
 				break
@@ -18727,6 +19507,7 @@ func rewriteBlock386(b *Block) bool {
 			if v.Op != Op386TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != Op386SETNEF {
 				break
@@ -18751,6 +19532,7 @@ func rewriteBlock386(b *Block) bool {
 			if v.Op != Op386TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != Op386SETNEF {
 				break
diff --git a/src/cmd/compile/internal/ssa/rewriteAMD64.go b/src/cmd/compile/internal/ssa/rewriteAMD64.go
index 9a69a31043..06b52e5c39 100644
--- a/src/cmd/compile/internal/ssa/rewriteAMD64.go
+++ b/src/cmd/compile/internal/ssa/rewriteAMD64.go
@@ -863,6 +863,7 @@ func rewriteValueAMD64_OpAMD64ADDL_0(v *Value) bool {
 	// cond:
 	// result: (ADDLconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -878,6 +879,7 @@ func rewriteValueAMD64_OpAMD64ADDL_0(v *Value) bool {
 	// cond:
 	// result: (ADDLconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64MOVLconst {
 			break
@@ -893,6 +895,7 @@ func rewriteValueAMD64_OpAMD64ADDL_0(v *Value) bool {
 	// cond: d==32-c
 	// result: (ROLLconst x [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLLconst {
 			break
@@ -919,6 +922,7 @@ func rewriteValueAMD64_OpAMD64ADDL_0(v *Value) bool {
 	// cond: d==32-c
 	// result: (ROLLconst x [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHRLconst {
 			break
@@ -946,6 +950,7 @@ func rewriteValueAMD64_OpAMD64ADDL_0(v *Value) bool {
 	// result: (ROLWconst x [c])
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLLconst {
 			break
@@ -973,6 +978,7 @@ func rewriteValueAMD64_OpAMD64ADDL_0(v *Value) bool {
 	// result: (ROLWconst x [c])
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHRWconst {
 			break
@@ -1000,6 +1006,7 @@ func rewriteValueAMD64_OpAMD64ADDL_0(v *Value) bool {
 	// result: (ROLBconst x [c])
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLLconst {
 			break
@@ -1027,6 +1034,7 @@ func rewriteValueAMD64_OpAMD64ADDL_0(v *Value) bool {
 	// result: (ROLBconst x [c])
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHRBconst {
 			break
@@ -1053,6 +1061,7 @@ func rewriteValueAMD64_OpAMD64ADDL_0(v *Value) bool {
 	// cond:
 	// result: (SUBL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGL {
@@ -1068,6 +1077,7 @@ func rewriteValueAMD64_OpAMD64ADDL_0(v *Value) bool {
 	// cond:
 	// result: (SUBL x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64NEGL {
 			break
@@ -1086,6 +1096,7 @@ func rewriteValueAMD64_OpAMD64ADDL_10(v *Value) bool {
 	// cond: canMergeLoad(v, l, x) && clobber(l)
 	// result: (ADDLmem x [off] {sym} ptr mem)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		l := v.Args[1]
 		if l.Op != OpAMD64MOVLload {
@@ -1093,6 +1104,7 @@ func rewriteValueAMD64_OpAMD64ADDL_10(v *Value) bool {
 		}
 		off := l.AuxInt
 		sym := l.Aux
+		_ = l.Args[1]
 		ptr := l.Args[0]
 		mem := l.Args[1]
 		if !(canMergeLoad(v, l, x) && clobber(l)) {
@@ -1110,12 +1122,14 @@ func rewriteValueAMD64_OpAMD64ADDL_10(v *Value) bool {
 	// cond: canMergeLoad(v, l, x) && clobber(l)
 	// result: (ADDLmem x [off] {sym} ptr mem)
 	for {
+		_ = v.Args[1]
 		l := v.Args[0]
 		if l.Op != OpAMD64MOVLload {
 			break
 		}
 		off := l.AuxInt
 		sym := l.Aux
+		_ = l.Args[1]
 		ptr := l.Args[0]
 		mem := l.Args[1]
 		x := v.Args[1]
@@ -1205,6 +1219,7 @@ func rewriteValueAMD64_OpAMD64ADDQ_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (ADDQconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVQconst {
@@ -1223,6 +1238,7 @@ func rewriteValueAMD64_OpAMD64ADDQ_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (ADDQconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64MOVQconst {
 			break
@@ -1241,6 +1257,7 @@ func rewriteValueAMD64_OpAMD64ADDQ_0(v *Value) bool {
 	// cond: d==64-c
 	// result: (ROLQconst x [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLQconst {
 			break
@@ -1267,6 +1284,7 @@ func rewriteValueAMD64_OpAMD64ADDQ_0(v *Value) bool {
 	// cond: d==64-c
 	// result: (ROLQconst x [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHRQconst {
 			break
@@ -1293,6 +1311,7 @@ func rewriteValueAMD64_OpAMD64ADDQ_0(v *Value) bool {
 	// cond:
 	// result: (LEAQ8 x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64SHLQconst {
@@ -1311,6 +1330,7 @@ func rewriteValueAMD64_OpAMD64ADDQ_0(v *Value) bool {
 	// cond:
 	// result: (LEAQ8 x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLQconst {
 			break
@@ -1329,6 +1349,7 @@ func rewriteValueAMD64_OpAMD64ADDQ_0(v *Value) bool {
 	// cond:
 	// result: (LEAQ4 x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64SHLQconst {
@@ -1347,6 +1368,7 @@ func rewriteValueAMD64_OpAMD64ADDQ_0(v *Value) bool {
 	// cond:
 	// result: (LEAQ4 x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLQconst {
 			break
@@ -1365,6 +1387,7 @@ func rewriteValueAMD64_OpAMD64ADDQ_0(v *Value) bool {
 	// cond:
 	// result: (LEAQ2 x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64SHLQconst {
@@ -1383,6 +1406,7 @@ func rewriteValueAMD64_OpAMD64ADDQ_0(v *Value) bool {
 	// cond:
 	// result: (LEAQ2 x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLQconst {
 			break
@@ -1404,11 +1428,13 @@ func rewriteValueAMD64_OpAMD64ADDQ_10(v *Value) bool {
 	// cond:
 	// result: (LEAQ2 x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQ {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		if y != v_1.Args[1] {
 			break
@@ -1422,10 +1448,12 @@ func rewriteValueAMD64_OpAMD64ADDQ_10(v *Value) bool {
 	// cond:
 	// result: (LEAQ2 x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQ {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		if y != v_0.Args[1] {
 			break
@@ -1440,11 +1468,13 @@ func rewriteValueAMD64_OpAMD64ADDQ_10(v *Value) bool {
 	// cond:
 	// result: (LEAQ2 y x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQ {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -1458,11 +1488,13 @@ func rewriteValueAMD64_OpAMD64ADDQ_10(v *Value) bool {
 	// cond:
 	// result: (LEAQ2 y x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQ {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		if x != v_1.Args[1] {
 			break
@@ -1476,10 +1508,12 @@ func rewriteValueAMD64_OpAMD64ADDQ_10(v *Value) bool {
 	// cond:
 	// result: (LEAQ2 y x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQ {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if x != v.Args[1] {
@@ -1494,10 +1528,12 @@ func rewriteValueAMD64_OpAMD64ADDQ_10(v *Value) bool {
 	// cond:
 	// result: (LEAQ2 y x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQ {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		x := v_0.Args[1]
 		if x != v.Args[1] {
@@ -1512,6 +1548,7 @@ func rewriteValueAMD64_OpAMD64ADDQ_10(v *Value) bool {
 	// cond:
 	// result: (LEAQ1 [c] x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -1529,6 +1566,7 @@ func rewriteValueAMD64_OpAMD64ADDQ_10(v *Value) bool {
 	// cond:
 	// result: (LEAQ1 [c] x y)
 	for {
+		_ = v.Args[1]
 		y := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -1546,6 +1584,7 @@ func rewriteValueAMD64_OpAMD64ADDQ_10(v *Value) bool {
 	// cond: x.Op != OpSB && y.Op != OpSB
 	// result: (LEAQ1 [c] {s} x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64LEAQ {
@@ -1568,6 +1607,7 @@ func rewriteValueAMD64_OpAMD64ADDQ_10(v *Value) bool {
 	// cond: x.Op != OpSB && y.Op != OpSB
 	// result: (LEAQ1 [c] {s} x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ {
 			break
@@ -1593,6 +1633,7 @@ func rewriteValueAMD64_OpAMD64ADDQ_20(v *Value) bool {
 	// cond:
 	// result: (SUBQ x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGQ {
@@ -1608,6 +1649,7 @@ func rewriteValueAMD64_OpAMD64ADDQ_20(v *Value) bool {
 	// cond:
 	// result: (SUBQ x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64NEGQ {
 			break
@@ -1623,6 +1665,7 @@ func rewriteValueAMD64_OpAMD64ADDQ_20(v *Value) bool {
 	// cond: canMergeLoad(v, l, x) && clobber(l)
 	// result: (ADDQmem x [off] {sym} ptr mem)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		l := v.Args[1]
 		if l.Op != OpAMD64MOVQload {
@@ -1630,6 +1673,7 @@ func rewriteValueAMD64_OpAMD64ADDQ_20(v *Value) bool {
 		}
 		off := l.AuxInt
 		sym := l.Aux
+		_ = l.Args[1]
 		ptr := l.Args[0]
 		mem := l.Args[1]
 		if !(canMergeLoad(v, l, x) && clobber(l)) {
@@ -1647,12 +1691,14 @@ func rewriteValueAMD64_OpAMD64ADDQ_20(v *Value) bool {
 	// cond: canMergeLoad(v, l, x) && clobber(l)
 	// result: (ADDQmem x [off] {sym} ptr mem)
 	for {
+		_ = v.Args[1]
 		l := v.Args[0]
 		if l.Op != OpAMD64MOVQload {
 			break
 		}
 		off := l.AuxInt
 		sym := l.Aux
+		_ = l.Args[1]
 		ptr := l.Args[0]
 		mem := l.Args[1]
 		x := v.Args[1]
@@ -1679,6 +1725,7 @@ func rewriteValueAMD64_OpAMD64ADDQconst_0(v *Value) bool {
 		if v_0.Op != OpAMD64ADDQ {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpAMD64LEAQ1)
@@ -1719,6 +1766,7 @@ func rewriteValueAMD64_OpAMD64ADDQconst_0(v *Value) bool {
 		}
 		d := v_0.AuxInt
 		s := v_0.Aux
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if !(is32Bit(c + d)) {
@@ -1742,6 +1790,7 @@ func rewriteValueAMD64_OpAMD64ADDQconst_0(v *Value) bool {
 		}
 		d := v_0.AuxInt
 		s := v_0.Aux
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if !(is32Bit(c + d)) {
@@ -1765,6 +1814,7 @@ func rewriteValueAMD64_OpAMD64ADDQconst_0(v *Value) bool {
 		}
 		d := v_0.AuxInt
 		s := v_0.Aux
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if !(is32Bit(c + d)) {
@@ -1788,6 +1838,7 @@ func rewriteValueAMD64_OpAMD64ADDQconst_0(v *Value) bool {
 		}
 		d := v_0.AuxInt
 		s := v_0.Aux
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if !(is32Bit(c + d)) {
@@ -1853,6 +1904,7 @@ func rewriteValueAMD64_OpAMD64ADDSD_0(v *Value) bool {
 	// cond: canMergeLoad(v, l, x) && clobber(l)
 	// result: (ADDSDmem x [off] {sym} ptr mem)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		l := v.Args[1]
 		if l.Op != OpAMD64MOVSDload {
@@ -1860,6 +1912,7 @@ func rewriteValueAMD64_OpAMD64ADDSD_0(v *Value) bool {
 		}
 		off := l.AuxInt
 		sym := l.Aux
+		_ = l.Args[1]
 		ptr := l.Args[0]
 		mem := l.Args[1]
 		if !(canMergeLoad(v, l, x) && clobber(l)) {
@@ -1877,12 +1930,14 @@ func rewriteValueAMD64_OpAMD64ADDSD_0(v *Value) bool {
 	// cond: canMergeLoad(v, l, x) && clobber(l)
 	// result: (ADDSDmem x [off] {sym} ptr mem)
 	for {
+		_ = v.Args[1]
 		l := v.Args[0]
 		if l.Op != OpAMD64MOVSDload {
 			break
 		}
 		off := l.AuxInt
 		sym := l.Aux
+		_ = l.Args[1]
 		ptr := l.Args[0]
 		mem := l.Args[1]
 		x := v.Args[1]
@@ -1904,6 +1959,7 @@ func rewriteValueAMD64_OpAMD64ADDSS_0(v *Value) bool {
 	// cond: canMergeLoad(v, l, x) && clobber(l)
 	// result: (ADDSSmem x [off] {sym} ptr mem)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		l := v.Args[1]
 		if l.Op != OpAMD64MOVSSload {
@@ -1911,6 +1967,7 @@ func rewriteValueAMD64_OpAMD64ADDSS_0(v *Value) bool {
 		}
 		off := l.AuxInt
 		sym := l.Aux
+		_ = l.Args[1]
 		ptr := l.Args[0]
 		mem := l.Args[1]
 		if !(canMergeLoad(v, l, x) && clobber(l)) {
@@ -1928,12 +1985,14 @@ func rewriteValueAMD64_OpAMD64ADDSS_0(v *Value) bool {
 	// cond: canMergeLoad(v, l, x) && clobber(l)
 	// result: (ADDSSmem x [off] {sym} ptr mem)
 	for {
+		_ = v.Args[1]
 		l := v.Args[0]
 		if l.Op != OpAMD64MOVSSload {
 			break
 		}
 		off := l.AuxInt
 		sym := l.Aux
+		_ = l.Args[1]
 		ptr := l.Args[0]
 		mem := l.Args[1]
 		x := v.Args[1]
@@ -1955,6 +2014,7 @@ func rewriteValueAMD64_OpAMD64ANDL_0(v *Value) bool {
 	// cond:
 	// result: (ANDLconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -1970,6 +2030,7 @@ func rewriteValueAMD64_OpAMD64ANDL_0(v *Value) bool {
 	// cond:
 	// result: (ANDLconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64MOVLconst {
 			break
@@ -1985,6 +2046,7 @@ func rewriteValueAMD64_OpAMD64ANDL_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -1998,6 +2060,7 @@ func rewriteValueAMD64_OpAMD64ANDL_0(v *Value) bool {
 	// cond: canMergeLoad(v, l, x) && clobber(l)
 	// result: (ANDLmem x [off] {sym} ptr mem)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		l := v.Args[1]
 		if l.Op != OpAMD64MOVLload {
@@ -2005,6 +2068,7 @@ func rewriteValueAMD64_OpAMD64ANDL_0(v *Value) bool {
 		}
 		off := l.AuxInt
 		sym := l.Aux
+		_ = l.Args[1]
 		ptr := l.Args[0]
 		mem := l.Args[1]
 		if !(canMergeLoad(v, l, x) && clobber(l)) {
@@ -2022,12 +2086,14 @@ func rewriteValueAMD64_OpAMD64ANDL_0(v *Value) bool {
 	// cond: canMergeLoad(v, l, x) && clobber(l)
 	// result: (ANDLmem x [off] {sym} ptr mem)
 	for {
+		_ = v.Args[1]
 		l := v.Args[0]
 		if l.Op != OpAMD64MOVLload {
 			break
 		}
 		off := l.AuxInt
 		sym := l.Aux
+		_ = l.Args[1]
 		ptr := l.Args[0]
 		mem := l.Args[1]
 		x := v.Args[1]
@@ -2132,6 +2198,7 @@ func rewriteValueAMD64_OpAMD64ANDQ_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (ANDQconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVQconst {
@@ -2150,6 +2217,7 @@ func rewriteValueAMD64_OpAMD64ANDQ_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (ANDQconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64MOVQconst {
 			break
@@ -2168,6 +2236,7 @@ func rewriteValueAMD64_OpAMD64ANDQ_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -2181,6 +2250,7 @@ func rewriteValueAMD64_OpAMD64ANDQ_0(v *Value) bool {
 	// cond: canMergeLoad(v, l, x) && clobber(l)
 	// result: (ANDQmem x [off] {sym} ptr mem)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		l := v.Args[1]
 		if l.Op != OpAMD64MOVQload {
@@ -2188,6 +2258,7 @@ func rewriteValueAMD64_OpAMD64ANDQ_0(v *Value) bool {
 		}
 		off := l.AuxInt
 		sym := l.Aux
+		_ = l.Args[1]
 		ptr := l.Args[0]
 		mem := l.Args[1]
 		if !(canMergeLoad(v, l, x) && clobber(l)) {
@@ -2205,12 +2276,14 @@ func rewriteValueAMD64_OpAMD64ANDQ_0(v *Value) bool {
 	// cond: canMergeLoad(v, l, x) && clobber(l)
 	// result: (ANDQmem x [off] {sym} ptr mem)
 	for {
+		_ = v.Args[1]
 		l := v.Args[0]
 		if l.Op != OpAMD64MOVQload {
 			break
 		}
 		off := l.AuxInt
 		sym := l.Aux
+		_ = l.Args[1]
 		ptr := l.Args[0]
 		mem := l.Args[1]
 		x := v.Args[1]
@@ -2395,6 +2468,7 @@ func rewriteValueAMD64_OpAMD64CMOVQEQ_0(v *Value) bool {
 	// cond: c != 0
 	// result: x
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_2 := v.Args[2]
 		if v_2.Op != OpSelect1 {
@@ -2426,6 +2500,7 @@ func rewriteValueAMD64_OpAMD64CMPB_0(v *Value) bool {
 	// cond:
 	// result: (CMPBconst x [int64(int8(c))])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -2441,6 +2516,7 @@ func rewriteValueAMD64_OpAMD64CMPB_0(v *Value) bool {
 	// cond:
 	// result: (InvertFlags (CMPBconst x [int64(int8(c))]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64MOVLconst {
 			break
@@ -2564,6 +2640,7 @@ func rewriteValueAMD64_OpAMD64CMPBconst_0(v *Value) bool {
 		if v_0.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpAMD64TESTB)
@@ -2611,6 +2688,7 @@ func rewriteValueAMD64_OpAMD64CMPL_0(v *Value) bool {
 	// cond:
 	// result: (CMPLconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -2626,6 +2704,7 @@ func rewriteValueAMD64_OpAMD64CMPL_0(v *Value) bool {
 	// cond:
 	// result: (InvertFlags (CMPLconst x [c]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64MOVLconst {
 			break
@@ -2765,6 +2844,7 @@ func rewriteValueAMD64_OpAMD64CMPLconst_0(v *Value) bool {
 		if v_0.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpAMD64TESTL)
@@ -2812,6 +2892,7 @@ func rewriteValueAMD64_OpAMD64CMPQ_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (CMPQconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVQconst {
@@ -2830,6 +2911,7 @@ func rewriteValueAMD64_OpAMD64CMPQ_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (InvertFlags (CMPQconst x [c]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64MOVQconst {
 			break
@@ -3092,6 +3174,7 @@ func rewriteValueAMD64_OpAMD64CMPQconst_10(v *Value) bool {
 		if v_0.Op != OpAMD64ANDQ {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpAMD64TESTQ)
@@ -3139,6 +3222,7 @@ func rewriteValueAMD64_OpAMD64CMPW_0(v *Value) bool {
 	// cond:
 	// result: (CMPWconst x [int64(int16(c))])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -3154,6 +3238,7 @@ func rewriteValueAMD64_OpAMD64CMPW_0(v *Value) bool {
 	// cond:
 	// result: (InvertFlags (CMPWconst x [int64(int16(c))]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64MOVLconst {
 			break
@@ -3277,6 +3362,7 @@ func rewriteValueAMD64_OpAMD64CMPWconst_0(v *Value) bool {
 		if v_0.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpAMD64TESTW)
@@ -3324,6 +3410,7 @@ func rewriteValueAMD64_OpAMD64CMPXCHGLlock_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -3354,6 +3441,7 @@ func rewriteValueAMD64_OpAMD64CMPXCHGQlock_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -3433,6 +3521,7 @@ func rewriteValueAMD64_OpAMD64LEAQ_0(v *Value) bool {
 		if v_0.Op != OpAMD64ADDQ {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if !(x.Op != OpSB && y.Op != OpSB) {
@@ -3479,6 +3568,7 @@ func rewriteValueAMD64_OpAMD64LEAQ_0(v *Value) bool {
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if !(is32Bit(off1+off2) && canMergeSym(sym1, sym2)) {
@@ -3503,6 +3593,7 @@ func rewriteValueAMD64_OpAMD64LEAQ_0(v *Value) bool {
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if !(is32Bit(off1+off2) && canMergeSym(sym1, sym2)) {
@@ -3527,6 +3618,7 @@ func rewriteValueAMD64_OpAMD64LEAQ_0(v *Value) bool {
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if !(is32Bit(off1+off2) && canMergeSym(sym1, sym2)) {
@@ -3551,6 +3643,7 @@ func rewriteValueAMD64_OpAMD64LEAQ_0(v *Value) bool {
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if !(is32Bit(off1+off2) && canMergeSym(sym1, sym2)) {
@@ -3572,6 +3665,7 @@ func rewriteValueAMD64_OpAMD64LEAQ1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -3595,6 +3689,7 @@ func rewriteValueAMD64_OpAMD64LEAQ1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		y := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -3618,6 +3713,7 @@ func rewriteValueAMD64_OpAMD64LEAQ1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64SHLQconst {
@@ -3640,6 +3736,7 @@ func rewriteValueAMD64_OpAMD64LEAQ1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLQconst {
 			break
@@ -3662,6 +3759,7 @@ func rewriteValueAMD64_OpAMD64LEAQ1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64SHLQconst {
@@ -3684,6 +3782,7 @@ func rewriteValueAMD64_OpAMD64LEAQ1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLQconst {
 			break
@@ -3706,6 +3805,7 @@ func rewriteValueAMD64_OpAMD64LEAQ1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64SHLQconst {
@@ -3728,6 +3828,7 @@ func rewriteValueAMD64_OpAMD64LEAQ1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLQconst {
 			break
@@ -3750,6 +3851,7 @@ func rewriteValueAMD64_OpAMD64LEAQ1_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ {
 			break
@@ -3774,6 +3876,7 @@ func rewriteValueAMD64_OpAMD64LEAQ1_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		y := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64LEAQ {
@@ -3801,6 +3904,7 @@ func rewriteValueAMD64_OpAMD64LEAQ2_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -3824,6 +3928,7 @@ func rewriteValueAMD64_OpAMD64LEAQ2_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -3847,6 +3952,7 @@ func rewriteValueAMD64_OpAMD64LEAQ2_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64SHLQconst {
@@ -3869,6 +3975,7 @@ func rewriteValueAMD64_OpAMD64LEAQ2_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64SHLQconst {
@@ -3891,6 +3998,7 @@ func rewriteValueAMD64_OpAMD64LEAQ2_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ {
 			break
@@ -3918,6 +4026,7 @@ func rewriteValueAMD64_OpAMD64LEAQ4_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -3941,6 +4050,7 @@ func rewriteValueAMD64_OpAMD64LEAQ4_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -3964,6 +4074,7 @@ func rewriteValueAMD64_OpAMD64LEAQ4_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64SHLQconst {
@@ -3986,6 +4097,7 @@ func rewriteValueAMD64_OpAMD64LEAQ4_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ {
 			break
@@ -4013,6 +4125,7 @@ func rewriteValueAMD64_OpAMD64LEAQ8_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -4036,6 +4149,7 @@ func rewriteValueAMD64_OpAMD64LEAQ8_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -4059,6 +4173,7 @@ func rewriteValueAMD64_OpAMD64LEAQ8_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ {
 			break
@@ -4092,6 +4207,7 @@ func rewriteValueAMD64_OpAMD64MOVBQSX_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -4117,6 +4233,7 @@ func rewriteValueAMD64_OpAMD64MOVBQSX_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -4142,6 +4259,7 @@ func rewriteValueAMD64_OpAMD64MOVBQSX_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -4167,6 +4285,7 @@ func rewriteValueAMD64_OpAMD64MOVBQSX_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -4222,6 +4341,7 @@ func rewriteValueAMD64_OpAMD64MOVBQSXload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ {
 			break
@@ -4255,6 +4375,7 @@ func rewriteValueAMD64_OpAMD64MOVBQZX_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -4280,6 +4401,7 @@ func rewriteValueAMD64_OpAMD64MOVBQZX_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -4305,6 +4427,7 @@ func rewriteValueAMD64_OpAMD64MOVBQZX_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -4330,6 +4453,7 @@ func rewriteValueAMD64_OpAMD64MOVBQZX_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -4355,6 +4479,7 @@ func rewriteValueAMD64_OpAMD64MOVBQZX_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[2]
 		ptr := x.Args[0]
 		idx := x.Args[1]
 		mem := x.Args[2]
@@ -4409,6 +4534,7 @@ func rewriteValueAMD64_OpAMD64MOVBload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVBstore {
@@ -4416,6 +4542,7 @@ func rewriteValueAMD64_OpAMD64MOVBload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2)) {
@@ -4432,6 +4559,7 @@ func rewriteValueAMD64_OpAMD64MOVBload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -4455,6 +4583,7 @@ func rewriteValueAMD64_OpAMD64MOVBload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ {
 			break
@@ -4479,12 +4608,14 @@ func rewriteValueAMD64_OpAMD64MOVBload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ1 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -4505,10 +4636,12 @@ func rewriteValueAMD64_OpAMD64MOVBload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQ {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -4529,6 +4662,7 @@ func rewriteValueAMD64_OpAMD64MOVBload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAL {
 			break
@@ -4553,6 +4687,7 @@ func rewriteValueAMD64_OpAMD64MOVBload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDLconst {
 			break
@@ -4579,6 +4714,7 @@ func rewriteValueAMD64_OpAMD64MOVBloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -4601,6 +4737,7 @@ func rewriteValueAMD64_OpAMD64MOVBloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		idx := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -4623,6 +4760,7 @@ func rewriteValueAMD64_OpAMD64MOVBloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -4645,6 +4783,7 @@ func rewriteValueAMD64_OpAMD64MOVBloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -4672,6 +4811,7 @@ func rewriteValueAMD64_OpAMD64MOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVBQSX {
@@ -4693,6 +4833,7 @@ func rewriteValueAMD64_OpAMD64MOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVBQZX {
@@ -4714,6 +4855,7 @@ func rewriteValueAMD64_OpAMD64MOVBstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -4739,6 +4881,7 @@ func rewriteValueAMD64_OpAMD64MOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -4762,6 +4905,7 @@ func rewriteValueAMD64_OpAMD64MOVBstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ {
 			break
@@ -4788,12 +4932,14 @@ func rewriteValueAMD64_OpAMD64MOVBstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ1 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -4816,10 +4962,12 @@ func rewriteValueAMD64_OpAMD64MOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQ {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -4842,6 +4990,7 @@ func rewriteValueAMD64_OpAMD64MOVBstore_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		w := v.Args[1]
 		x0 := v.Args[2]
@@ -4854,6 +5003,7 @@ func rewriteValueAMD64_OpAMD64MOVBstore_0(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -4888,6 +5038,7 @@ func rewriteValueAMD64_OpAMD64MOVBstore_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		w := v.Args[1]
 		x2 := v.Args[2]
@@ -4900,6 +5051,7 @@ func rewriteValueAMD64_OpAMD64MOVBstore_0(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[2]
 		if p != x2.Args[0] {
 			break
 		}
@@ -4923,6 +5075,7 @@ func rewriteValueAMD64_OpAMD64MOVBstore_0(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -4946,6 +5099,7 @@ func rewriteValueAMD64_OpAMD64MOVBstore_0(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -4979,6 +5133,7 @@ func rewriteValueAMD64_OpAMD64MOVBstore_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		w := v.Args[1]
 		x6 := v.Args[2]
@@ -4991,6 +5146,7 @@ func rewriteValueAMD64_OpAMD64MOVBstore_0(v *Value) bool {
 		if x6.Aux != s {
 			break
 		}
+		_ = x6.Args[2]
 		if p != x6.Args[0] {
 			break
 		}
@@ -5014,6 +5170,7 @@ func rewriteValueAMD64_OpAMD64MOVBstore_0(v *Value) bool {
 		if x5.Aux != s {
 			break
 		}
+		_ = x5.Args[2]
 		if p != x5.Args[0] {
 			break
 		}
@@ -5037,6 +5194,7 @@ func rewriteValueAMD64_OpAMD64MOVBstore_0(v *Value) bool {
 		if x4.Aux != s {
 			break
 		}
+		_ = x4.Args[2]
 		if p != x4.Args[0] {
 			break
 		}
@@ -5060,6 +5218,7 @@ func rewriteValueAMD64_OpAMD64MOVBstore_0(v *Value) bool {
 		if x3.Aux != s {
 			break
 		}
+		_ = x3.Args[2]
 		if p != x3.Args[0] {
 			break
 		}
@@ -5083,6 +5242,7 @@ func rewriteValueAMD64_OpAMD64MOVBstore_0(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[2]
 		if p != x2.Args[0] {
 			break
 		}
@@ -5106,6 +5266,7 @@ func rewriteValueAMD64_OpAMD64MOVBstore_0(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -5129,6 +5290,7 @@ func rewriteValueAMD64_OpAMD64MOVBstore_0(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -5165,6 +5327,7 @@ func rewriteValueAMD64_OpAMD64MOVBstore_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64SHRQconst {
@@ -5184,6 +5347,7 @@ func rewriteValueAMD64_OpAMD64MOVBstore_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -5208,6 +5372,7 @@ func rewriteValueAMD64_OpAMD64MOVBstore_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64SHRQconst {
@@ -5225,6 +5390,7 @@ func rewriteValueAMD64_OpAMD64MOVBstore_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -5256,6 +5422,7 @@ func rewriteValueAMD64_OpAMD64MOVBstore_10(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAL {
 			break
@@ -5282,6 +5449,7 @@ func rewriteValueAMD64_OpAMD64MOVBstore_10(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDLconst {
 			break
@@ -5310,6 +5478,7 @@ func rewriteValueAMD64_OpAMD64MOVBstoreconst_0(v *Value) bool {
 	for {
 		sc := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -5333,6 +5502,7 @@ func rewriteValueAMD64_OpAMD64MOVBstoreconst_0(v *Value) bool {
 	for {
 		sc := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ {
 			break
@@ -5357,12 +5527,14 @@ func rewriteValueAMD64_OpAMD64MOVBstoreconst_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ1 {
 			break
 		}
 		off := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -5383,10 +5555,12 @@ func rewriteValueAMD64_OpAMD64MOVBstoreconst_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQ {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -5404,6 +5578,7 @@ func rewriteValueAMD64_OpAMD64MOVBstoreconst_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		p := v.Args[0]
 		x := v.Args[1]
 		if x.Op != OpAMD64MOVBstoreconst {
@@ -5413,6 +5588,7 @@ func rewriteValueAMD64_OpAMD64MOVBstoreconst_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[1]
 		if p != x.Args[0] {
 			break
 		}
@@ -5433,6 +5609,7 @@ func rewriteValueAMD64_OpAMD64MOVBstoreconst_0(v *Value) bool {
 	for {
 		sc := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAL {
 			break
@@ -5457,6 +5634,7 @@ func rewriteValueAMD64_OpAMD64MOVBstoreconst_0(v *Value) bool {
 	for {
 		sc := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDLconst {
 			break
@@ -5483,6 +5661,7 @@ func rewriteValueAMD64_OpAMD64MOVBstoreconstidx1_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -5505,6 +5684,7 @@ func rewriteValueAMD64_OpAMD64MOVBstoreconstidx1_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -5527,6 +5707,7 @@ func rewriteValueAMD64_OpAMD64MOVBstoreconstidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		i := v.Args[1]
 		x := v.Args[2]
@@ -5537,6 +5718,7 @@ func rewriteValueAMD64_OpAMD64MOVBstoreconstidx1_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -5566,6 +5748,7 @@ func rewriteValueAMD64_OpAMD64MOVBstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -5590,6 +5773,7 @@ func rewriteValueAMD64_OpAMD64MOVBstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -5614,6 +5798,7 @@ func rewriteValueAMD64_OpAMD64MOVBstoreidx1_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		w := v.Args[2]
@@ -5627,6 +5812,7 @@ func rewriteValueAMD64_OpAMD64MOVBstoreidx1_0(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[3]
 		if p != x0.Args[0] {
 			break
 		}
@@ -5665,6 +5851,7 @@ func rewriteValueAMD64_OpAMD64MOVBstoreidx1_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		w := v.Args[2]
@@ -5678,6 +5865,7 @@ func rewriteValueAMD64_OpAMD64MOVBstoreidx1_0(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[3]
 		if p != x2.Args[0] {
 			break
 		}
@@ -5704,6 +5892,7 @@ func rewriteValueAMD64_OpAMD64MOVBstoreidx1_0(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[3]
 		if p != x1.Args[0] {
 			break
 		}
@@ -5730,6 +5919,7 @@ func rewriteValueAMD64_OpAMD64MOVBstoreidx1_0(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[3]
 		if p != x0.Args[0] {
 			break
 		}
@@ -5767,6 +5957,7 @@ func rewriteValueAMD64_OpAMD64MOVBstoreidx1_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		w := v.Args[2]
@@ -5780,6 +5971,7 @@ func rewriteValueAMD64_OpAMD64MOVBstoreidx1_0(v *Value) bool {
 		if x6.Aux != s {
 			break
 		}
+		_ = x6.Args[3]
 		if p != x6.Args[0] {
 			break
 		}
@@ -5806,6 +5998,7 @@ func rewriteValueAMD64_OpAMD64MOVBstoreidx1_0(v *Value) bool {
 		if x5.Aux != s {
 			break
 		}
+		_ = x5.Args[3]
 		if p != x5.Args[0] {
 			break
 		}
@@ -5832,6 +6025,7 @@ func rewriteValueAMD64_OpAMD64MOVBstoreidx1_0(v *Value) bool {
 		if x4.Aux != s {
 			break
 		}
+		_ = x4.Args[3]
 		if p != x4.Args[0] {
 			break
 		}
@@ -5858,6 +6052,7 @@ func rewriteValueAMD64_OpAMD64MOVBstoreidx1_0(v *Value) bool {
 		if x3.Aux != s {
 			break
 		}
+		_ = x3.Args[3]
 		if p != x3.Args[0] {
 			break
 		}
@@ -5884,6 +6079,7 @@ func rewriteValueAMD64_OpAMD64MOVBstoreidx1_0(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[3]
 		if p != x2.Args[0] {
 			break
 		}
@@ -5910,6 +6106,7 @@ func rewriteValueAMD64_OpAMD64MOVBstoreidx1_0(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[3]
 		if p != x1.Args[0] {
 			break
 		}
@@ -5936,6 +6133,7 @@ func rewriteValueAMD64_OpAMD64MOVBstoreidx1_0(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[3]
 		if p != x0.Args[0] {
 			break
 		}
@@ -5973,6 +6171,7 @@ func rewriteValueAMD64_OpAMD64MOVBstoreidx1_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -5993,6 +6192,7 @@ func rewriteValueAMD64_OpAMD64MOVBstoreidx1_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -6021,6 +6221,7 @@ func rewriteValueAMD64_OpAMD64MOVBstoreidx1_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -6039,6 +6240,7 @@ func rewriteValueAMD64_OpAMD64MOVBstoreidx1_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -6083,6 +6285,7 @@ func rewriteValueAMD64_OpAMD64MOVLQSX_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -6108,6 +6311,7 @@ func rewriteValueAMD64_OpAMD64MOVLQSX_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -6189,6 +6393,7 @@ func rewriteValueAMD64_OpAMD64MOVLQSXload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ {
 			break
@@ -6222,6 +6427,7 @@ func rewriteValueAMD64_OpAMD64MOVLQZX_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -6247,6 +6453,7 @@ func rewriteValueAMD64_OpAMD64MOVLQZX_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -6272,6 +6479,7 @@ func rewriteValueAMD64_OpAMD64MOVLQZX_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[2]
 		ptr := x.Args[0]
 		idx := x.Args[1]
 		mem := x.Args[2]
@@ -6299,6 +6507,7 @@ func rewriteValueAMD64_OpAMD64MOVLQZX_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[2]
 		ptr := x.Args[0]
 		idx := x.Args[1]
 		mem := x.Args[2]
@@ -6379,6 +6588,7 @@ func rewriteValueAMD64_OpAMD64MOVLatomicload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -6402,6 +6612,7 @@ func rewriteValueAMD64_OpAMD64MOVLatomicload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ {
 			break
@@ -6429,6 +6640,7 @@ func rewriteValueAMD64_OpAMD64MOVLload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLstore {
@@ -6436,6 +6648,7 @@ func rewriteValueAMD64_OpAMD64MOVLload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2)) {
@@ -6452,6 +6665,7 @@ func rewriteValueAMD64_OpAMD64MOVLload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -6475,6 +6689,7 @@ func rewriteValueAMD64_OpAMD64MOVLload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ {
 			break
@@ -6499,12 +6714,14 @@ func rewriteValueAMD64_OpAMD64MOVLload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ1 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -6525,12 +6742,14 @@ func rewriteValueAMD64_OpAMD64MOVLload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ4 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -6551,10 +6770,12 @@ func rewriteValueAMD64_OpAMD64MOVLload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQ {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -6575,6 +6796,7 @@ func rewriteValueAMD64_OpAMD64MOVLload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAL {
 			break
@@ -6599,6 +6821,7 @@ func rewriteValueAMD64_OpAMD64MOVLload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDLconst {
 			break
@@ -6625,6 +6848,7 @@ func rewriteValueAMD64_OpAMD64MOVLloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64SHLQconst {
@@ -6649,6 +6873,7 @@ func rewriteValueAMD64_OpAMD64MOVLloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLQconst {
 			break
@@ -6673,6 +6898,7 @@ func rewriteValueAMD64_OpAMD64MOVLloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -6695,6 +6921,7 @@ func rewriteValueAMD64_OpAMD64MOVLloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		idx := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -6717,6 +6944,7 @@ func rewriteValueAMD64_OpAMD64MOVLloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -6739,6 +6967,7 @@ func rewriteValueAMD64_OpAMD64MOVLloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -6764,6 +6993,7 @@ func rewriteValueAMD64_OpAMD64MOVLloadidx4_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -6786,6 +7016,7 @@ func rewriteValueAMD64_OpAMD64MOVLloadidx4_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -6811,6 +7042,7 @@ func rewriteValueAMD64_OpAMD64MOVLstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLQSX {
@@ -6832,6 +7064,7 @@ func rewriteValueAMD64_OpAMD64MOVLstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLQZX {
@@ -6853,6 +7086,7 @@ func rewriteValueAMD64_OpAMD64MOVLstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -6878,6 +7112,7 @@ func rewriteValueAMD64_OpAMD64MOVLstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -6901,6 +7136,7 @@ func rewriteValueAMD64_OpAMD64MOVLstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ {
 			break
@@ -6927,12 +7163,14 @@ func rewriteValueAMD64_OpAMD64MOVLstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ1 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -6955,12 +7193,14 @@ func rewriteValueAMD64_OpAMD64MOVLstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ4 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -6983,10 +7223,12 @@ func rewriteValueAMD64_OpAMD64MOVLstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQ {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -7009,6 +7251,7 @@ func rewriteValueAMD64_OpAMD64MOVLstore_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64SHRQconst {
@@ -7028,6 +7271,7 @@ func rewriteValueAMD64_OpAMD64MOVLstore_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -7052,6 +7296,7 @@ func rewriteValueAMD64_OpAMD64MOVLstore_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64SHRQconst {
@@ -7069,6 +7314,7 @@ func rewriteValueAMD64_OpAMD64MOVLstore_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -7103,6 +7349,7 @@ func rewriteValueAMD64_OpAMD64MOVLstore_10(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAL {
 			break
@@ -7129,6 +7376,7 @@ func rewriteValueAMD64_OpAMD64MOVLstore_10(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDLconst {
 			break
@@ -7161,6 +7409,7 @@ func rewriteValueAMD64_OpAMD64MOVLstoreconst_0(v *Value) bool {
 	for {
 		sc := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -7184,6 +7433,7 @@ func rewriteValueAMD64_OpAMD64MOVLstoreconst_0(v *Value) bool {
 	for {
 		sc := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ {
 			break
@@ -7208,12 +7458,14 @@ func rewriteValueAMD64_OpAMD64MOVLstoreconst_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ1 {
 			break
 		}
 		off := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -7234,12 +7486,14 @@ func rewriteValueAMD64_OpAMD64MOVLstoreconst_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ4 {
 			break
 		}
 		off := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -7260,10 +7514,12 @@ func rewriteValueAMD64_OpAMD64MOVLstoreconst_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQ {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -7281,6 +7537,7 @@ func rewriteValueAMD64_OpAMD64MOVLstoreconst_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		p := v.Args[0]
 		x := v.Args[1]
 		if x.Op != OpAMD64MOVLstoreconst {
@@ -7290,6 +7547,7 @@ func rewriteValueAMD64_OpAMD64MOVLstoreconst_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[1]
 		if p != x.Args[0] {
 			break
 		}
@@ -7313,6 +7571,7 @@ func rewriteValueAMD64_OpAMD64MOVLstoreconst_0(v *Value) bool {
 	for {
 		sc := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAL {
 			break
@@ -7337,6 +7596,7 @@ func rewriteValueAMD64_OpAMD64MOVLstoreconst_0(v *Value) bool {
 	for {
 		sc := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDLconst {
 			break
@@ -7367,6 +7627,7 @@ func rewriteValueAMD64_OpAMD64MOVLstoreconstidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64SHLQconst {
@@ -7391,6 +7652,7 @@ func rewriteValueAMD64_OpAMD64MOVLstoreconstidx1_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -7413,6 +7675,7 @@ func rewriteValueAMD64_OpAMD64MOVLstoreconstidx1_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -7435,6 +7698,7 @@ func rewriteValueAMD64_OpAMD64MOVLstoreconstidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		i := v.Args[1]
 		x := v.Args[2]
@@ -7445,6 +7709,7 @@ func rewriteValueAMD64_OpAMD64MOVLstoreconstidx1_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -7479,6 +7744,7 @@ func rewriteValueAMD64_OpAMD64MOVLstoreconstidx4_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -7501,6 +7767,7 @@ func rewriteValueAMD64_OpAMD64MOVLstoreconstidx4_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -7523,6 +7790,7 @@ func rewriteValueAMD64_OpAMD64MOVLstoreconstidx4_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		i := v.Args[1]
 		x := v.Args[2]
@@ -7533,6 +7801,7 @@ func rewriteValueAMD64_OpAMD64MOVLstoreconstidx4_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -7566,6 +7835,7 @@ func rewriteValueAMD64_OpAMD64MOVLstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64SHLQconst {
@@ -7592,6 +7862,7 @@ func rewriteValueAMD64_OpAMD64MOVLstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -7616,6 +7887,7 @@ func rewriteValueAMD64_OpAMD64MOVLstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -7640,6 +7912,7 @@ func rewriteValueAMD64_OpAMD64MOVLstoreidx1_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -7660,6 +7933,7 @@ func rewriteValueAMD64_OpAMD64MOVLstoreidx1_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -7688,6 +7962,7 @@ func rewriteValueAMD64_OpAMD64MOVLstoreidx1_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -7706,6 +7981,7 @@ func rewriteValueAMD64_OpAMD64MOVLstoreidx1_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -7746,6 +8022,7 @@ func rewriteValueAMD64_OpAMD64MOVLstoreidx4_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -7770,6 +8047,7 @@ func rewriteValueAMD64_OpAMD64MOVLstoreidx4_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -7794,6 +8072,7 @@ func rewriteValueAMD64_OpAMD64MOVLstoreidx4_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -7814,6 +8093,7 @@ func rewriteValueAMD64_OpAMD64MOVLstoreidx4_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -7845,6 +8125,7 @@ func rewriteValueAMD64_OpAMD64MOVLstoreidx4_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -7863,6 +8144,7 @@ func rewriteValueAMD64_OpAMD64MOVLstoreidx4_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -7904,6 +8186,7 @@ func rewriteValueAMD64_OpAMD64MOVOload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -7927,6 +8210,7 @@ func rewriteValueAMD64_OpAMD64MOVOload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ {
 			break
@@ -7954,6 +8238,7 @@ func rewriteValueAMD64_OpAMD64MOVOstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -7979,6 +8264,7 @@ func rewriteValueAMD64_OpAMD64MOVOstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ {
 			break
@@ -8008,6 +8294,7 @@ func rewriteValueAMD64_OpAMD64MOVQatomicload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -8031,6 +8318,7 @@ func rewriteValueAMD64_OpAMD64MOVQatomicload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ {
 			break
@@ -8058,6 +8346,7 @@ func rewriteValueAMD64_OpAMD64MOVQload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVQstore {
@@ -8065,6 +8354,7 @@ func rewriteValueAMD64_OpAMD64MOVQload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2)) {
@@ -8081,6 +8371,7 @@ func rewriteValueAMD64_OpAMD64MOVQload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -8104,6 +8395,7 @@ func rewriteValueAMD64_OpAMD64MOVQload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ {
 			break
@@ -8128,12 +8420,14 @@ func rewriteValueAMD64_OpAMD64MOVQload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ1 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -8154,12 +8448,14 @@ func rewriteValueAMD64_OpAMD64MOVQload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ8 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -8180,10 +8476,12 @@ func rewriteValueAMD64_OpAMD64MOVQload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQ {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -8204,6 +8502,7 @@ func rewriteValueAMD64_OpAMD64MOVQload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAL {
 			break
@@ -8228,6 +8527,7 @@ func rewriteValueAMD64_OpAMD64MOVQload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDLconst {
 			break
@@ -8254,6 +8554,7 @@ func rewriteValueAMD64_OpAMD64MOVQloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64SHLQconst {
@@ -8278,6 +8579,7 @@ func rewriteValueAMD64_OpAMD64MOVQloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLQconst {
 			break
@@ -8302,6 +8604,7 @@ func rewriteValueAMD64_OpAMD64MOVQloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -8324,6 +8627,7 @@ func rewriteValueAMD64_OpAMD64MOVQloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		idx := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -8346,6 +8650,7 @@ func rewriteValueAMD64_OpAMD64MOVQloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -8368,6 +8673,7 @@ func rewriteValueAMD64_OpAMD64MOVQloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -8393,6 +8699,7 @@ func rewriteValueAMD64_OpAMD64MOVQloadidx8_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -8415,6 +8722,7 @@ func rewriteValueAMD64_OpAMD64MOVQloadidx8_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -8440,6 +8748,7 @@ func rewriteValueAMD64_OpAMD64MOVQstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -8465,6 +8774,7 @@ func rewriteValueAMD64_OpAMD64MOVQstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVQconst {
@@ -8488,6 +8798,7 @@ func rewriteValueAMD64_OpAMD64MOVQstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ {
 			break
@@ -8514,12 +8825,14 @@ func rewriteValueAMD64_OpAMD64MOVQstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ1 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -8542,12 +8855,14 @@ func rewriteValueAMD64_OpAMD64MOVQstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ8 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -8570,10 +8885,12 @@ func rewriteValueAMD64_OpAMD64MOVQstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQ {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -8596,6 +8913,7 @@ func rewriteValueAMD64_OpAMD64MOVQstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAL {
 			break
@@ -8622,6 +8940,7 @@ func rewriteValueAMD64_OpAMD64MOVQstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDLconst {
 			break
@@ -8650,6 +8969,7 @@ func rewriteValueAMD64_OpAMD64MOVQstoreconst_0(v *Value) bool {
 	for {
 		sc := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -8673,6 +8993,7 @@ func rewriteValueAMD64_OpAMD64MOVQstoreconst_0(v *Value) bool {
 	for {
 		sc := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ {
 			break
@@ -8697,12 +9018,14 @@ func rewriteValueAMD64_OpAMD64MOVQstoreconst_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ1 {
 			break
 		}
 		off := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -8723,12 +9046,14 @@ func rewriteValueAMD64_OpAMD64MOVQstoreconst_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ8 {
 			break
 		}
 		off := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -8749,10 +9074,12 @@ func rewriteValueAMD64_OpAMD64MOVQstoreconst_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQ {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -8770,6 +9097,7 @@ func rewriteValueAMD64_OpAMD64MOVQstoreconst_0(v *Value) bool {
 	for {
 		sc := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAL {
 			break
@@ -8794,6 +9122,7 @@ func rewriteValueAMD64_OpAMD64MOVQstoreconst_0(v *Value) bool {
 	for {
 		sc := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDLconst {
 			break
@@ -8820,6 +9149,7 @@ func rewriteValueAMD64_OpAMD64MOVQstoreconstidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64SHLQconst {
@@ -8844,6 +9174,7 @@ func rewriteValueAMD64_OpAMD64MOVQstoreconstidx1_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -8866,6 +9197,7 @@ func rewriteValueAMD64_OpAMD64MOVQstoreconstidx1_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -8891,6 +9223,7 @@ func rewriteValueAMD64_OpAMD64MOVQstoreconstidx8_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -8913,6 +9246,7 @@ func rewriteValueAMD64_OpAMD64MOVQstoreconstidx8_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -8938,6 +9272,7 @@ func rewriteValueAMD64_OpAMD64MOVQstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64SHLQconst {
@@ -8964,6 +9299,7 @@ func rewriteValueAMD64_OpAMD64MOVQstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -8988,6 +9324,7 @@ func rewriteValueAMD64_OpAMD64MOVQstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -9015,6 +9352,7 @@ func rewriteValueAMD64_OpAMD64MOVQstoreidx8_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -9039,6 +9377,7 @@ func rewriteValueAMD64_OpAMD64MOVQstoreidx8_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -9066,6 +9405,7 @@ func rewriteValueAMD64_OpAMD64MOVSDload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -9089,6 +9429,7 @@ func rewriteValueAMD64_OpAMD64MOVSDload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ {
 			break
@@ -9113,12 +9454,14 @@ func rewriteValueAMD64_OpAMD64MOVSDload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ1 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -9139,12 +9482,14 @@ func rewriteValueAMD64_OpAMD64MOVSDload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ8 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -9165,10 +9510,12 @@ func rewriteValueAMD64_OpAMD64MOVSDload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQ {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -9192,6 +9539,7 @@ func rewriteValueAMD64_OpAMD64MOVSDloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64SHLQconst {
@@ -9216,6 +9564,7 @@ func rewriteValueAMD64_OpAMD64MOVSDloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -9238,6 +9587,7 @@ func rewriteValueAMD64_OpAMD64MOVSDloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -9263,6 +9613,7 @@ func rewriteValueAMD64_OpAMD64MOVSDloadidx8_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -9285,6 +9636,7 @@ func rewriteValueAMD64_OpAMD64MOVSDloadidx8_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -9310,6 +9662,7 @@ func rewriteValueAMD64_OpAMD64MOVSDstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -9335,6 +9688,7 @@ func rewriteValueAMD64_OpAMD64MOVSDstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ {
 			break
@@ -9361,12 +9715,14 @@ func rewriteValueAMD64_OpAMD64MOVSDstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ1 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -9389,12 +9745,14 @@ func rewriteValueAMD64_OpAMD64MOVSDstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ8 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -9417,10 +9775,12 @@ func rewriteValueAMD64_OpAMD64MOVSDstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQ {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -9446,6 +9806,7 @@ func rewriteValueAMD64_OpAMD64MOVSDstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64SHLQconst {
@@ -9472,6 +9833,7 @@ func rewriteValueAMD64_OpAMD64MOVSDstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -9496,6 +9858,7 @@ func rewriteValueAMD64_OpAMD64MOVSDstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -9523,6 +9886,7 @@ func rewriteValueAMD64_OpAMD64MOVSDstoreidx8_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -9547,6 +9911,7 @@ func rewriteValueAMD64_OpAMD64MOVSDstoreidx8_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -9574,6 +9939,7 @@ func rewriteValueAMD64_OpAMD64MOVSSload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -9597,6 +9963,7 @@ func rewriteValueAMD64_OpAMD64MOVSSload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ {
 			break
@@ -9621,12 +9988,14 @@ func rewriteValueAMD64_OpAMD64MOVSSload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ1 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -9647,12 +10016,14 @@ func rewriteValueAMD64_OpAMD64MOVSSload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ4 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -9673,10 +10044,12 @@ func rewriteValueAMD64_OpAMD64MOVSSload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQ {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -9700,6 +10073,7 @@ func rewriteValueAMD64_OpAMD64MOVSSloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64SHLQconst {
@@ -9724,6 +10098,7 @@ func rewriteValueAMD64_OpAMD64MOVSSloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -9746,6 +10121,7 @@ func rewriteValueAMD64_OpAMD64MOVSSloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -9771,6 +10147,7 @@ func rewriteValueAMD64_OpAMD64MOVSSloadidx4_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -9793,6 +10170,7 @@ func rewriteValueAMD64_OpAMD64MOVSSloadidx4_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -9818,6 +10196,7 @@ func rewriteValueAMD64_OpAMD64MOVSSstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -9843,6 +10222,7 @@ func rewriteValueAMD64_OpAMD64MOVSSstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ {
 			break
@@ -9869,12 +10249,14 @@ func rewriteValueAMD64_OpAMD64MOVSSstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ1 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -9897,12 +10279,14 @@ func rewriteValueAMD64_OpAMD64MOVSSstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ4 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -9925,10 +10309,12 @@ func rewriteValueAMD64_OpAMD64MOVSSstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQ {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -9954,6 +10340,7 @@ func rewriteValueAMD64_OpAMD64MOVSSstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64SHLQconst {
@@ -9980,6 +10367,7 @@ func rewriteValueAMD64_OpAMD64MOVSSstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -10004,6 +10392,7 @@ func rewriteValueAMD64_OpAMD64MOVSSstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -10031,6 +10420,7 @@ func rewriteValueAMD64_OpAMD64MOVSSstoreidx4_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -10055,6 +10445,7 @@ func rewriteValueAMD64_OpAMD64MOVSSstoreidx4_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -10088,6 +10479,7 @@ func rewriteValueAMD64_OpAMD64MOVWQSX_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -10113,6 +10505,7 @@ func rewriteValueAMD64_OpAMD64MOVWQSX_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -10138,6 +10531,7 @@ func rewriteValueAMD64_OpAMD64MOVWQSX_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -10206,6 +10600,7 @@ func rewriteValueAMD64_OpAMD64MOVWQSXload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ {
 			break
@@ -10239,6 +10634,7 @@ func rewriteValueAMD64_OpAMD64MOVWQZX_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -10264,6 +10660,7 @@ func rewriteValueAMD64_OpAMD64MOVWQZX_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -10289,6 +10686,7 @@ func rewriteValueAMD64_OpAMD64MOVWQZX_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -10314,6 +10712,7 @@ func rewriteValueAMD64_OpAMD64MOVWQZX_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[2]
 		ptr := x.Args[0]
 		idx := x.Args[1]
 		mem := x.Args[2]
@@ -10341,6 +10740,7 @@ func rewriteValueAMD64_OpAMD64MOVWQZX_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[2]
 		ptr := x.Args[0]
 		idx := x.Args[1]
 		mem := x.Args[2]
@@ -10408,6 +10808,7 @@ func rewriteValueAMD64_OpAMD64MOVWload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVWstore {
@@ -10415,6 +10816,7 @@ func rewriteValueAMD64_OpAMD64MOVWload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2)) {
@@ -10431,6 +10833,7 @@ func rewriteValueAMD64_OpAMD64MOVWload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -10454,6 +10857,7 @@ func rewriteValueAMD64_OpAMD64MOVWload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ {
 			break
@@ -10478,12 +10882,14 @@ func rewriteValueAMD64_OpAMD64MOVWload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ1 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -10504,12 +10910,14 @@ func rewriteValueAMD64_OpAMD64MOVWload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ2 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -10530,10 +10938,12 @@ func rewriteValueAMD64_OpAMD64MOVWload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQ {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -10554,6 +10964,7 @@ func rewriteValueAMD64_OpAMD64MOVWload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAL {
 			break
@@ -10578,6 +10989,7 @@ func rewriteValueAMD64_OpAMD64MOVWload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDLconst {
 			break
@@ -10604,6 +11016,7 @@ func rewriteValueAMD64_OpAMD64MOVWloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64SHLQconst {
@@ -10628,6 +11041,7 @@ func rewriteValueAMD64_OpAMD64MOVWloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLQconst {
 			break
@@ -10652,6 +11066,7 @@ func rewriteValueAMD64_OpAMD64MOVWloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -10674,6 +11089,7 @@ func rewriteValueAMD64_OpAMD64MOVWloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		idx := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -10696,6 +11112,7 @@ func rewriteValueAMD64_OpAMD64MOVWloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -10718,6 +11135,7 @@ func rewriteValueAMD64_OpAMD64MOVWloadidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -10743,6 +11161,7 @@ func rewriteValueAMD64_OpAMD64MOVWloadidx2_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -10765,6 +11184,7 @@ func rewriteValueAMD64_OpAMD64MOVWloadidx2_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -10790,6 +11210,7 @@ func rewriteValueAMD64_OpAMD64MOVWstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVWQSX {
@@ -10811,6 +11232,7 @@ func rewriteValueAMD64_OpAMD64MOVWstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVWQZX {
@@ -10832,6 +11254,7 @@ func rewriteValueAMD64_OpAMD64MOVWstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -10857,6 +11280,7 @@ func rewriteValueAMD64_OpAMD64MOVWstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -10880,6 +11304,7 @@ func rewriteValueAMD64_OpAMD64MOVWstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ {
 			break
@@ -10906,12 +11331,14 @@ func rewriteValueAMD64_OpAMD64MOVWstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ1 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -10934,12 +11361,14 @@ func rewriteValueAMD64_OpAMD64MOVWstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ2 {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -10962,10 +11391,12 @@ func rewriteValueAMD64_OpAMD64MOVWstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQ {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -10988,6 +11419,7 @@ func rewriteValueAMD64_OpAMD64MOVWstore_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64SHRQconst {
@@ -11007,6 +11439,7 @@ func rewriteValueAMD64_OpAMD64MOVWstore_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -11031,6 +11464,7 @@ func rewriteValueAMD64_OpAMD64MOVWstore_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64SHRQconst {
@@ -11048,6 +11482,7 @@ func rewriteValueAMD64_OpAMD64MOVWstore_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -11082,6 +11517,7 @@ func rewriteValueAMD64_OpAMD64MOVWstore_10(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAL {
 			break
@@ -11108,6 +11544,7 @@ func rewriteValueAMD64_OpAMD64MOVWstore_10(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDLconst {
 			break
@@ -11136,6 +11573,7 @@ func rewriteValueAMD64_OpAMD64MOVWstoreconst_0(v *Value) bool {
 	for {
 		sc := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -11159,6 +11597,7 @@ func rewriteValueAMD64_OpAMD64MOVWstoreconst_0(v *Value) bool {
 	for {
 		sc := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ {
 			break
@@ -11183,12 +11622,14 @@ func rewriteValueAMD64_OpAMD64MOVWstoreconst_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ1 {
 			break
 		}
 		off := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -11209,12 +11650,14 @@ func rewriteValueAMD64_OpAMD64MOVWstoreconst_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAQ2 {
 			break
 		}
 		off := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -11235,10 +11678,12 @@ func rewriteValueAMD64_OpAMD64MOVWstoreconst_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQ {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -11256,6 +11701,7 @@ func rewriteValueAMD64_OpAMD64MOVWstoreconst_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		p := v.Args[0]
 		x := v.Args[1]
 		if x.Op != OpAMD64MOVWstoreconst {
@@ -11265,6 +11711,7 @@ func rewriteValueAMD64_OpAMD64MOVWstoreconst_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[1]
 		if p != x.Args[0] {
 			break
 		}
@@ -11285,6 +11732,7 @@ func rewriteValueAMD64_OpAMD64MOVWstoreconst_0(v *Value) bool {
 	for {
 		sc := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64LEAL {
 			break
@@ -11309,6 +11757,7 @@ func rewriteValueAMD64_OpAMD64MOVWstoreconst_0(v *Value) bool {
 	for {
 		sc := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDLconst {
 			break
@@ -11335,6 +11784,7 @@ func rewriteValueAMD64_OpAMD64MOVWstoreconstidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64SHLQconst {
@@ -11359,6 +11809,7 @@ func rewriteValueAMD64_OpAMD64MOVWstoreconstidx1_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -11381,6 +11832,7 @@ func rewriteValueAMD64_OpAMD64MOVWstoreconstidx1_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -11403,6 +11855,7 @@ func rewriteValueAMD64_OpAMD64MOVWstoreconstidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		i := v.Args[1]
 		x := v.Args[2]
@@ -11413,6 +11866,7 @@ func rewriteValueAMD64_OpAMD64MOVWstoreconstidx1_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -11442,6 +11896,7 @@ func rewriteValueAMD64_OpAMD64MOVWstoreconstidx2_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -11464,6 +11919,7 @@ func rewriteValueAMD64_OpAMD64MOVWstoreconstidx2_0(v *Value) bool {
 	for {
 		x := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -11486,6 +11942,7 @@ func rewriteValueAMD64_OpAMD64MOVWstoreconstidx2_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		i := v.Args[1]
 		x := v.Args[2]
@@ -11496,6 +11953,7 @@ func rewriteValueAMD64_OpAMD64MOVWstoreconstidx2_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -11526,6 +11984,7 @@ func rewriteValueAMD64_OpAMD64MOVWstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64SHLQconst {
@@ -11552,6 +12011,7 @@ func rewriteValueAMD64_OpAMD64MOVWstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -11576,6 +12036,7 @@ func rewriteValueAMD64_OpAMD64MOVWstoreidx1_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -11600,6 +12061,7 @@ func rewriteValueAMD64_OpAMD64MOVWstoreidx1_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -11620,6 +12082,7 @@ func rewriteValueAMD64_OpAMD64MOVWstoreidx1_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -11648,6 +12111,7 @@ func rewriteValueAMD64_OpAMD64MOVWstoreidx1_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -11666,6 +12130,7 @@ func rewriteValueAMD64_OpAMD64MOVWstoreidx1_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -11706,6 +12171,7 @@ func rewriteValueAMD64_OpAMD64MOVWstoreidx2_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ADDQconst {
 			break
@@ -11730,6 +12196,7 @@ func rewriteValueAMD64_OpAMD64MOVWstoreidx2_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -11754,6 +12221,7 @@ func rewriteValueAMD64_OpAMD64MOVWstoreidx2_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -11774,6 +12242,7 @@ func rewriteValueAMD64_OpAMD64MOVWstoreidx2_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -11805,6 +12274,7 @@ func rewriteValueAMD64_OpAMD64MOVWstoreidx2_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -11823,6 +12293,7 @@ func rewriteValueAMD64_OpAMD64MOVWstoreidx2_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -11862,6 +12333,7 @@ func rewriteValueAMD64_OpAMD64MULL_0(v *Value) bool {
 	// cond:
 	// result: (MULLconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -11877,6 +12349,7 @@ func rewriteValueAMD64_OpAMD64MULL_0(v *Value) bool {
 	// cond:
 	// result: (MULLconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64MOVLconst {
 			break
@@ -11928,6 +12401,7 @@ func rewriteValueAMD64_OpAMD64MULQ_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (MULQconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVQconst {
@@ -11946,6 +12420,7 @@ func rewriteValueAMD64_OpAMD64MULQ_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (MULQconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64MOVQconst {
 			break
@@ -12367,6 +12842,7 @@ func rewriteValueAMD64_OpAMD64MULSD_0(v *Value) bool {
 	// cond: canMergeLoad(v, l, x) && clobber(l)
 	// result: (MULSDmem x [off] {sym} ptr mem)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		l := v.Args[1]
 		if l.Op != OpAMD64MOVSDload {
@@ -12374,6 +12850,7 @@ func rewriteValueAMD64_OpAMD64MULSD_0(v *Value) bool {
 		}
 		off := l.AuxInt
 		sym := l.Aux
+		_ = l.Args[1]
 		ptr := l.Args[0]
 		mem := l.Args[1]
 		if !(canMergeLoad(v, l, x) && clobber(l)) {
@@ -12391,12 +12868,14 @@ func rewriteValueAMD64_OpAMD64MULSD_0(v *Value) bool {
 	// cond: canMergeLoad(v, l, x) && clobber(l)
 	// result: (MULSDmem x [off] {sym} ptr mem)
 	for {
+		_ = v.Args[1]
 		l := v.Args[0]
 		if l.Op != OpAMD64MOVSDload {
 			break
 		}
 		off := l.AuxInt
 		sym := l.Aux
+		_ = l.Args[1]
 		ptr := l.Args[0]
 		mem := l.Args[1]
 		x := v.Args[1]
@@ -12418,6 +12897,7 @@ func rewriteValueAMD64_OpAMD64MULSS_0(v *Value) bool {
 	// cond: canMergeLoad(v, l, x) && clobber(l)
 	// result: (MULSSmem x [off] {sym} ptr mem)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		l := v.Args[1]
 		if l.Op != OpAMD64MOVSSload {
@@ -12425,6 +12905,7 @@ func rewriteValueAMD64_OpAMD64MULSS_0(v *Value) bool {
 		}
 		off := l.AuxInt
 		sym := l.Aux
+		_ = l.Args[1]
 		ptr := l.Args[0]
 		mem := l.Args[1]
 		if !(canMergeLoad(v, l, x) && clobber(l)) {
@@ -12442,12 +12923,14 @@ func rewriteValueAMD64_OpAMD64MULSS_0(v *Value) bool {
 	// cond: canMergeLoad(v, l, x) && clobber(l)
 	// result: (MULSSmem x [off] {sym} ptr mem)
 	for {
+		_ = v.Args[1]
 		l := v.Args[0]
 		if l.Op != OpAMD64MOVSSload {
 			break
 		}
 		off := l.AuxInt
 		sym := l.Aux
+		_ = l.Args[1]
 		ptr := l.Args[0]
 		mem := l.Args[1]
 		x := v.Args[1]
@@ -12555,6 +13038,7 @@ func rewriteValueAMD64_OpAMD64ORL_0(v *Value) bool {
 	// cond:
 	// result: (ORLconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -12570,6 +13054,7 @@ func rewriteValueAMD64_OpAMD64ORL_0(v *Value) bool {
 	// cond:
 	// result: (ORLconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64MOVLconst {
 			break
@@ -12585,6 +13070,7 @@ func rewriteValueAMD64_OpAMD64ORL_0(v *Value) bool {
 	// cond: d==32-c
 	// result: (ROLLconst x [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLLconst {
 			break
@@ -12611,6 +13097,7 @@ func rewriteValueAMD64_OpAMD64ORL_0(v *Value) bool {
 	// cond: d==32-c
 	// result: (ROLLconst x [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHRLconst {
 			break
@@ -12638,6 +13125,7 @@ func rewriteValueAMD64_OpAMD64ORL_0(v *Value) bool {
 	// result: (ROLWconst x [c])
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLLconst {
 			break
@@ -12665,6 +13153,7 @@ func rewriteValueAMD64_OpAMD64ORL_0(v *Value) bool {
 	// result: (ROLWconst x [c])
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHRWconst {
 			break
@@ -12692,6 +13181,7 @@ func rewriteValueAMD64_OpAMD64ORL_0(v *Value) bool {
 	// result: (ROLBconst x [c])
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLLconst {
 			break
@@ -12719,6 +13209,7 @@ func rewriteValueAMD64_OpAMD64ORL_0(v *Value) bool {
 	// result: (ROLBconst x [c])
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHRBconst {
 			break
@@ -12745,20 +13236,24 @@ func rewriteValueAMD64_OpAMD64ORL_0(v *Value) bool {
 	// cond:
 	// result: (ROLL x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpAMD64SHRL {
 			break
 		}
+		_ = v_1_0.Args[1]
 		if x != v_1_0.Args[0] {
 			break
 		}
@@ -12810,16 +13305,19 @@ func rewriteValueAMD64_OpAMD64ORL_0(v *Value) bool {
 	// cond:
 	// result: (ROLL x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpAMD64SBBLcarrymask {
 			break
@@ -12856,6 +13354,7 @@ func rewriteValueAMD64_OpAMD64ORL_0(v *Value) bool {
 		if v_1_1.Op != OpAMD64SHRL {
 			break
 		}
+		_ = v_1_1.Args[1]
 		if x != v_1_1.Args[0] {
 			break
 		}
@@ -12878,14 +13377,17 @@ func rewriteValueAMD64_OpAMD64ORL_10(v *Value) bool {
 	// cond:
 	// result: (ROLL x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpAMD64SHRL {
 			break
 		}
+		_ = v_0_0.Args[1]
 		x := v_0_0.Args[0]
 		v_0_0_1 := v_0_0.Args[1]
 		if v_0_0_1.Op != OpAMD64NEGQ {
@@ -12928,6 +13430,7 @@ func rewriteValueAMD64_OpAMD64ORL_10(v *Value) bool {
 		if v_1.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -12943,10 +13446,12 @@ func rewriteValueAMD64_OpAMD64ORL_10(v *Value) bool {
 	// cond:
 	// result: (ROLL x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpAMD64SBBLcarrymask {
 			break
@@ -12981,6 +13486,7 @@ func rewriteValueAMD64_OpAMD64ORL_10(v *Value) bool {
 		if v_0_1.Op != OpAMD64SHRL {
 			break
 		}
+		_ = v_0_1.Args[1]
 		x := v_0_1.Args[0]
 		v_0_1_1 := v_0_1.Args[1]
 		if v_0_1_1.Op != OpAMD64NEGQ {
@@ -12993,6 +13499,7 @@ func rewriteValueAMD64_OpAMD64ORL_10(v *Value) bool {
 		if v_1.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -13008,20 +13515,24 @@ func rewriteValueAMD64_OpAMD64ORL_10(v *Value) bool {
 	// cond:
 	// result: (ROLL x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpAMD64SHRL {
 			break
 		}
+		_ = v_1_0.Args[1]
 		if x != v_1_0.Args[0] {
 			break
 		}
@@ -13073,16 +13584,19 @@ func rewriteValueAMD64_OpAMD64ORL_10(v *Value) bool {
 	// cond:
 	// result: (ROLL x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpAMD64SBBLcarrymask {
 			break
@@ -13119,6 +13633,7 @@ func rewriteValueAMD64_OpAMD64ORL_10(v *Value) bool {
 		if v_1_1.Op != OpAMD64SHRL {
 			break
 		}
+		_ = v_1_1.Args[1]
 		if x != v_1_1.Args[0] {
 			break
 		}
@@ -13138,14 +13653,17 @@ func rewriteValueAMD64_OpAMD64ORL_10(v *Value) bool {
 	// cond:
 	// result: (ROLL x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpAMD64SHRL {
 			break
 		}
+		_ = v_0_0.Args[1]
 		x := v_0_0.Args[0]
 		v_0_0_1 := v_0_0.Args[1]
 		if v_0_0_1.Op != OpAMD64NEGL {
@@ -13188,6 +13706,7 @@ func rewriteValueAMD64_OpAMD64ORL_10(v *Value) bool {
 		if v_1.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -13203,10 +13722,12 @@ func rewriteValueAMD64_OpAMD64ORL_10(v *Value) bool {
 	// cond:
 	// result: (ROLL x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpAMD64SBBLcarrymask {
 			break
@@ -13241,6 +13762,7 @@ func rewriteValueAMD64_OpAMD64ORL_10(v *Value) bool {
 		if v_0_1.Op != OpAMD64SHRL {
 			break
 		}
+		_ = v_0_1.Args[1]
 		x := v_0_1.Args[0]
 		v_0_1_1 := v_0_1.Args[1]
 		if v_0_1_1.Op != OpAMD64NEGL {
@@ -13253,6 +13775,7 @@ func rewriteValueAMD64_OpAMD64ORL_10(v *Value) bool {
 		if v_1.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -13268,20 +13791,24 @@ func rewriteValueAMD64_OpAMD64ORL_10(v *Value) bool {
 	// cond:
 	// result: (RORL x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHRL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_1_0.Args[1]
 		if x != v_1_0.Args[0] {
 			break
 		}
@@ -13333,16 +13860,19 @@ func rewriteValueAMD64_OpAMD64ORL_10(v *Value) bool {
 	// cond:
 	// result: (RORL x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHRL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpAMD64SBBLcarrymask {
 			break
@@ -13379,6 +13909,7 @@ func rewriteValueAMD64_OpAMD64ORL_10(v *Value) bool {
 		if v_1_1.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_1_1.Args[1]
 		if x != v_1_1.Args[0] {
 			break
 		}
@@ -13398,14 +13929,17 @@ func rewriteValueAMD64_OpAMD64ORL_10(v *Value) bool {
 	// cond:
 	// result: (RORL x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_0_0.Args[1]
 		x := v_0_0.Args[0]
 		v_0_0_1 := v_0_0.Args[1]
 		if v_0_0_1.Op != OpAMD64NEGQ {
@@ -13448,6 +13982,7 @@ func rewriteValueAMD64_OpAMD64ORL_10(v *Value) bool {
 		if v_1.Op != OpAMD64SHRL {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -13463,10 +13998,12 @@ func rewriteValueAMD64_OpAMD64ORL_10(v *Value) bool {
 	// cond:
 	// result: (RORL x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpAMD64SBBLcarrymask {
 			break
@@ -13501,6 +14038,7 @@ func rewriteValueAMD64_OpAMD64ORL_10(v *Value) bool {
 		if v_0_1.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_0_1.Args[1]
 		x := v_0_1.Args[0]
 		v_0_1_1 := v_0_1.Args[1]
 		if v_0_1_1.Op != OpAMD64NEGQ {
@@ -13513,6 +14051,7 @@ func rewriteValueAMD64_OpAMD64ORL_10(v *Value) bool {
 		if v_1.Op != OpAMD64SHRL {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -13531,20 +14070,24 @@ func rewriteValueAMD64_OpAMD64ORL_20(v *Value) bool {
 	// cond:
 	// result: (RORL x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHRL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_1_0.Args[1]
 		if x != v_1_0.Args[0] {
 			break
 		}
@@ -13596,16 +14139,19 @@ func rewriteValueAMD64_OpAMD64ORL_20(v *Value) bool {
 	// cond:
 	// result: (RORL x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHRL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpAMD64SBBLcarrymask {
 			break
@@ -13642,6 +14188,7 @@ func rewriteValueAMD64_OpAMD64ORL_20(v *Value) bool {
 		if v_1_1.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_1_1.Args[1]
 		if x != v_1_1.Args[0] {
 			break
 		}
@@ -13661,14 +14208,17 @@ func rewriteValueAMD64_OpAMD64ORL_20(v *Value) bool {
 	// cond:
 	// result: (RORL x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_0_0.Args[1]
 		x := v_0_0.Args[0]
 		v_0_0_1 := v_0_0.Args[1]
 		if v_0_0_1.Op != OpAMD64NEGL {
@@ -13711,6 +14261,7 @@ func rewriteValueAMD64_OpAMD64ORL_20(v *Value) bool {
 		if v_1.Op != OpAMD64SHRL {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -13726,10 +14277,12 @@ func rewriteValueAMD64_OpAMD64ORL_20(v *Value) bool {
 	// cond:
 	// result: (RORL x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpAMD64SBBLcarrymask {
 			break
@@ -13764,6 +14317,7 @@ func rewriteValueAMD64_OpAMD64ORL_20(v *Value) bool {
 		if v_0_1.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_0_1.Args[1]
 		x := v_0_1.Args[0]
 		v_0_1_1 := v_0_1.Args[1]
 		if v_0_1_1.Op != OpAMD64NEGL {
@@ -13776,6 +14330,7 @@ func rewriteValueAMD64_OpAMD64ORL_20(v *Value) bool {
 		if v_1.Op != OpAMD64SHRL {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -13791,10 +14346,12 @@ func rewriteValueAMD64_OpAMD64ORL_20(v *Value) bool {
 	// cond: v.Type.Size() == 2
 	// result: (ROLW x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpAMD64ANDQconst {
@@ -13808,10 +14365,12 @@ func rewriteValueAMD64_OpAMD64ORL_20(v *Value) bool {
 		if v_1.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpAMD64SHRW {
 			break
 		}
+		_ = v_1_0.Args[1]
 		if x != v_1_0.Args[0] {
 			break
 		}
@@ -13880,10 +14439,12 @@ func rewriteValueAMD64_OpAMD64ORL_20(v *Value) bool {
 	// cond: v.Type.Size() == 2
 	// result: (ROLW x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpAMD64ANDQconst {
@@ -13897,6 +14458,7 @@ func rewriteValueAMD64_OpAMD64ORL_20(v *Value) bool {
 		if v_1.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpAMD64SBBLcarrymask {
 			break
@@ -13933,6 +14495,7 @@ func rewriteValueAMD64_OpAMD64ORL_20(v *Value) bool {
 		if v_1_1.Op != OpAMD64SHRW {
 			break
 		}
+		_ = v_1_1.Args[1]
 		if x != v_1_1.Args[0] {
 			break
 		}
@@ -13969,14 +14532,17 @@ func rewriteValueAMD64_OpAMD64ORL_20(v *Value) bool {
 	// cond: v.Type.Size() == 2
 	// result: (ROLW x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpAMD64SHRW {
 			break
 		}
+		_ = v_0_0.Args[1]
 		x := v_0_0.Args[0]
 		v_0_0_1 := v_0_0.Args[1]
 		if v_0_0_1.Op != OpAMD64NEGQ {
@@ -14033,6 +14599,7 @@ func rewriteValueAMD64_OpAMD64ORL_20(v *Value) bool {
 		if v_1.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -14058,10 +14625,12 @@ func rewriteValueAMD64_OpAMD64ORL_20(v *Value) bool {
 	// cond: v.Type.Size() == 2
 	// result: (ROLW x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpAMD64SBBLcarrymask {
 			break
@@ -14096,6 +14665,7 @@ func rewriteValueAMD64_OpAMD64ORL_20(v *Value) bool {
 		if v_0_1.Op != OpAMD64SHRW {
 			break
 		}
+		_ = v_0_1.Args[1]
 		x := v_0_1.Args[0]
 		v_0_1_1 := v_0_1.Args[1]
 		if v_0_1_1.Op != OpAMD64NEGQ {
@@ -14122,6 +14692,7 @@ func rewriteValueAMD64_OpAMD64ORL_20(v *Value) bool {
 		if v_1.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -14147,10 +14718,12 @@ func rewriteValueAMD64_OpAMD64ORL_20(v *Value) bool {
 	// cond: v.Type.Size() == 2
 	// result: (ROLW x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpAMD64ANDLconst {
@@ -14164,10 +14737,12 @@ func rewriteValueAMD64_OpAMD64ORL_20(v *Value) bool {
 		if v_1.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpAMD64SHRW {
 			break
 		}
+		_ = v_1_0.Args[1]
 		if x != v_1_0.Args[0] {
 			break
 		}
@@ -14236,10 +14811,12 @@ func rewriteValueAMD64_OpAMD64ORL_20(v *Value) bool {
 	// cond: v.Type.Size() == 2
 	// result: (ROLW x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpAMD64ANDLconst {
@@ -14253,6 +14830,7 @@ func rewriteValueAMD64_OpAMD64ORL_20(v *Value) bool {
 		if v_1.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpAMD64SBBLcarrymask {
 			break
@@ -14289,6 +14867,7 @@ func rewriteValueAMD64_OpAMD64ORL_20(v *Value) bool {
 		if v_1_1.Op != OpAMD64SHRW {
 			break
 		}
+		_ = v_1_1.Args[1]
 		if x != v_1_1.Args[0] {
 			break
 		}
@@ -14328,14 +14907,17 @@ func rewriteValueAMD64_OpAMD64ORL_30(v *Value) bool {
 	// cond: v.Type.Size() == 2
 	// result: (ROLW x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpAMD64SHRW {
 			break
 		}
+		_ = v_0_0.Args[1]
 		x := v_0_0.Args[0]
 		v_0_0_1 := v_0_0.Args[1]
 		if v_0_0_1.Op != OpAMD64NEGL {
@@ -14392,6 +14974,7 @@ func rewriteValueAMD64_OpAMD64ORL_30(v *Value) bool {
 		if v_1.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -14417,10 +15000,12 @@ func rewriteValueAMD64_OpAMD64ORL_30(v *Value) bool {
 	// cond: v.Type.Size() == 2
 	// result: (ROLW x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpAMD64SBBLcarrymask {
 			break
@@ -14455,6 +15040,7 @@ func rewriteValueAMD64_OpAMD64ORL_30(v *Value) bool {
 		if v_0_1.Op != OpAMD64SHRW {
 			break
 		}
+		_ = v_0_1.Args[1]
 		x := v_0_1.Args[0]
 		v_0_1_1 := v_0_1.Args[1]
 		if v_0_1_1.Op != OpAMD64NEGL {
@@ -14481,6 +15067,7 @@ func rewriteValueAMD64_OpAMD64ORL_30(v *Value) bool {
 		if v_1.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -14506,10 +15093,12 @@ func rewriteValueAMD64_OpAMD64ORL_30(v *Value) bool {
 	// cond: v.Type.Size() == 2
 	// result: (RORW x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHRW {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpAMD64ANDQconst {
@@ -14523,6 +15112,7 @@ func rewriteValueAMD64_OpAMD64ORL_30(v *Value) bool {
 		if v_1.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -14559,10 +15149,12 @@ func rewriteValueAMD64_OpAMD64ORL_30(v *Value) bool {
 	// cond: v.Type.Size() == 2
 	// result: (RORW x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpAMD64NEGQ {
@@ -14587,6 +15179,7 @@ func rewriteValueAMD64_OpAMD64ORL_30(v *Value) bool {
 		if v_1.Op != OpAMD64SHRW {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -14612,10 +15205,12 @@ func rewriteValueAMD64_OpAMD64ORL_30(v *Value) bool {
 	// cond: v.Type.Size() == 2
 	// result: (RORW x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHRW {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpAMD64ANDLconst {
@@ -14629,6 +15224,7 @@ func rewriteValueAMD64_OpAMD64ORL_30(v *Value) bool {
 		if v_1.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -14665,10 +15261,12 @@ func rewriteValueAMD64_OpAMD64ORL_30(v *Value) bool {
 	// cond: v.Type.Size() == 2
 	// result: (RORW x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpAMD64NEGL {
@@ -14693,6 +15291,7 @@ func rewriteValueAMD64_OpAMD64ORL_30(v *Value) bool {
 		if v_1.Op != OpAMD64SHRW {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -14718,10 +15317,12 @@ func rewriteValueAMD64_OpAMD64ORL_30(v *Value) bool {
 	// cond: v.Type.Size() == 1
 	// result: (ROLB x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpAMD64ANDQconst {
@@ -14735,10 +15336,12 @@ func rewriteValueAMD64_OpAMD64ORL_30(v *Value) bool {
 		if v_1.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpAMD64SHRB {
 			break
 		}
+		_ = v_1_0.Args[1]
 		if x != v_1_0.Args[0] {
 			break
 		}
@@ -14807,10 +15410,12 @@ func rewriteValueAMD64_OpAMD64ORL_30(v *Value) bool {
 	// cond: v.Type.Size() == 1
 	// result: (ROLB x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpAMD64ANDQconst {
@@ -14824,6 +15429,7 @@ func rewriteValueAMD64_OpAMD64ORL_30(v *Value) bool {
 		if v_1.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpAMD64SBBLcarrymask {
 			break
@@ -14860,6 +15466,7 @@ func rewriteValueAMD64_OpAMD64ORL_30(v *Value) bool {
 		if v_1_1.Op != OpAMD64SHRB {
 			break
 		}
+		_ = v_1_1.Args[1]
 		if x != v_1_1.Args[0] {
 			break
 		}
@@ -14896,14 +15503,17 @@ func rewriteValueAMD64_OpAMD64ORL_30(v *Value) bool {
 	// cond: v.Type.Size() == 1
 	// result: (ROLB x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpAMD64SHRB {
 			break
 		}
+		_ = v_0_0.Args[1]
 		x := v_0_0.Args[0]
 		v_0_0_1 := v_0_0.Args[1]
 		if v_0_0_1.Op != OpAMD64NEGQ {
@@ -14960,6 +15570,7 @@ func rewriteValueAMD64_OpAMD64ORL_30(v *Value) bool {
 		if v_1.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -14985,10 +15596,12 @@ func rewriteValueAMD64_OpAMD64ORL_30(v *Value) bool {
 	// cond: v.Type.Size() == 1
 	// result: (ROLB x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpAMD64SBBLcarrymask {
 			break
@@ -15023,6 +15636,7 @@ func rewriteValueAMD64_OpAMD64ORL_30(v *Value) bool {
 		if v_0_1.Op != OpAMD64SHRB {
 			break
 		}
+		_ = v_0_1.Args[1]
 		x := v_0_1.Args[0]
 		v_0_1_1 := v_0_1.Args[1]
 		if v_0_1_1.Op != OpAMD64NEGQ {
@@ -15049,6 +15663,7 @@ func rewriteValueAMD64_OpAMD64ORL_30(v *Value) bool {
 		if v_1.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -15081,10 +15696,12 @@ func rewriteValueAMD64_OpAMD64ORL_40(v *Value) bool {
 	// cond: v.Type.Size() == 1
 	// result: (ROLB x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpAMD64ANDLconst {
@@ -15098,10 +15715,12 @@ func rewriteValueAMD64_OpAMD64ORL_40(v *Value) bool {
 		if v_1.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpAMD64SHRB {
 			break
 		}
+		_ = v_1_0.Args[1]
 		if x != v_1_0.Args[0] {
 			break
 		}
@@ -15170,10 +15789,12 @@ func rewriteValueAMD64_OpAMD64ORL_40(v *Value) bool {
 	// cond: v.Type.Size() == 1
 	// result: (ROLB x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpAMD64ANDLconst {
@@ -15187,6 +15808,7 @@ func rewriteValueAMD64_OpAMD64ORL_40(v *Value) bool {
 		if v_1.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpAMD64SBBLcarrymask {
 			break
@@ -15223,6 +15845,7 @@ func rewriteValueAMD64_OpAMD64ORL_40(v *Value) bool {
 		if v_1_1.Op != OpAMD64SHRB {
 			break
 		}
+		_ = v_1_1.Args[1]
 		if x != v_1_1.Args[0] {
 			break
 		}
@@ -15259,14 +15882,17 @@ func rewriteValueAMD64_OpAMD64ORL_40(v *Value) bool {
 	// cond: v.Type.Size() == 1
 	// result: (ROLB x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpAMD64SHRB {
 			break
 		}
+		_ = v_0_0.Args[1]
 		x := v_0_0.Args[0]
 		v_0_0_1 := v_0_0.Args[1]
 		if v_0_0_1.Op != OpAMD64NEGL {
@@ -15323,6 +15949,7 @@ func rewriteValueAMD64_OpAMD64ORL_40(v *Value) bool {
 		if v_1.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -15348,10 +15975,12 @@ func rewriteValueAMD64_OpAMD64ORL_40(v *Value) bool {
 	// cond: v.Type.Size() == 1
 	// result: (ROLB x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ANDL {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpAMD64SBBLcarrymask {
 			break
@@ -15386,6 +16015,7 @@ func rewriteValueAMD64_OpAMD64ORL_40(v *Value) bool {
 		if v_0_1.Op != OpAMD64SHRB {
 			break
 		}
+		_ = v_0_1.Args[1]
 		x := v_0_1.Args[0]
 		v_0_1_1 := v_0_1.Args[1]
 		if v_0_1_1.Op != OpAMD64NEGL {
@@ -15412,6 +16042,7 @@ func rewriteValueAMD64_OpAMD64ORL_40(v *Value) bool {
 		if v_1.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -15437,10 +16068,12 @@ func rewriteValueAMD64_OpAMD64ORL_40(v *Value) bool {
 	// cond: v.Type.Size() == 1
 	// result: (RORB x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHRB {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpAMD64ANDQconst {
@@ -15454,6 +16087,7 @@ func rewriteValueAMD64_OpAMD64ORL_40(v *Value) bool {
 		if v_1.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -15490,10 +16124,12 @@ func rewriteValueAMD64_OpAMD64ORL_40(v *Value) bool {
 	// cond: v.Type.Size() == 1
 	// result: (RORB x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpAMD64NEGQ {
@@ -15518,6 +16154,7 @@ func rewriteValueAMD64_OpAMD64ORL_40(v *Value) bool {
 		if v_1.Op != OpAMD64SHRB {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -15543,10 +16180,12 @@ func rewriteValueAMD64_OpAMD64ORL_40(v *Value) bool {
 	// cond: v.Type.Size() == 1
 	// result: (RORB x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHRB {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpAMD64ANDLconst {
@@ -15560,6 +16199,7 @@ func rewriteValueAMD64_OpAMD64ORL_40(v *Value) bool {
 		if v_1.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -15596,10 +16236,12 @@ func rewriteValueAMD64_OpAMD64ORL_40(v *Value) bool {
 	// cond: v.Type.Size() == 1
 	// result: (RORB x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpAMD64NEGL {
@@ -15624,6 +16266,7 @@ func rewriteValueAMD64_OpAMD64ORL_40(v *Value) bool {
 		if v_1.Op != OpAMD64SHRB {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -15649,6 +16292,7 @@ func rewriteValueAMD64_OpAMD64ORL_40(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -15662,12 +16306,14 @@ func rewriteValueAMD64_OpAMD64ORL_40(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWload [i0] {s} p mem)
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpAMD64MOVBload {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		sh := v.Args[1]
@@ -15685,6 +16331,7 @@ func rewriteValueAMD64_OpAMD64ORL_40(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -15715,6 +16362,7 @@ func rewriteValueAMD64_OpAMD64ORL_50(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWload [i0] {s} p mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLLconst {
 			break
@@ -15728,6 +16376,7 @@ func rewriteValueAMD64_OpAMD64ORL_50(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		x0 := v.Args[1]
@@ -15738,6 +16387,7 @@ func rewriteValueAMD64_OpAMD64ORL_50(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -15761,12 +16411,14 @@ func rewriteValueAMD64_OpAMD64ORL_50(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVLload [i0] {s} p mem)
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpAMD64MOVWload {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		sh := v.Args[1]
@@ -15784,6 +16436,7 @@ func rewriteValueAMD64_OpAMD64ORL_50(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -15807,6 +16460,7 @@ func rewriteValueAMD64_OpAMD64ORL_50(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVLload [i0] {s} p mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLLconst {
 			break
@@ -15820,6 +16474,7 @@ func rewriteValueAMD64_OpAMD64ORL_50(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		x0 := v.Args[1]
@@ -15830,6 +16485,7 @@ func rewriteValueAMD64_OpAMD64ORL_50(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -15853,6 +16509,7 @@ func rewriteValueAMD64_OpAMD64ORL_50(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j0] (MOVWload [i0] {s} p mem)) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpAMD64SHLLconst {
 			break
@@ -15864,12 +16521,14 @@ func rewriteValueAMD64_OpAMD64ORL_50(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		or := v.Args[1]
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpAMD64SHLLconst {
 			break
@@ -15883,6 +16542,7 @@ func rewriteValueAMD64_OpAMD64ORL_50(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -15913,6 +16573,7 @@ func rewriteValueAMD64_OpAMD64ORL_50(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j0] (MOVWload [i0] {s} p mem)) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpAMD64SHLLconst {
 			break
@@ -15924,12 +16585,14 @@ func rewriteValueAMD64_OpAMD64ORL_50(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		or := v.Args[1]
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpAMD64SHLLconst {
@@ -15944,6 +16607,7 @@ func rewriteValueAMD64_OpAMD64ORL_50(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -15973,10 +16637,12 @@ func rewriteValueAMD64_OpAMD64ORL_50(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j0] (MOVWload [i0] {s} p mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpAMD64SHLLconst {
 			break
@@ -15988,6 +16654,7 @@ func rewriteValueAMD64_OpAMD64ORL_50(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		y := or.Args[1]
@@ -16004,6 +16671,7 @@ func rewriteValueAMD64_OpAMD64ORL_50(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -16033,10 +16701,12 @@ func rewriteValueAMD64_OpAMD64ORL_50(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j0] (MOVWload [i0] {s} p mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpAMD64SHLLconst {
@@ -16049,6 +16719,7 @@ func rewriteValueAMD64_OpAMD64ORL_50(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		s1 := v.Args[1]
@@ -16064,6 +16735,7 @@ func rewriteValueAMD64_OpAMD64ORL_50(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -16093,12 +16765,14 @@ func rewriteValueAMD64_OpAMD64ORL_50(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpAMD64MOVBloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -16117,6 +16791,7 @@ func rewriteValueAMD64_OpAMD64ORL_50(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -16144,12 +16819,14 @@ func rewriteValueAMD64_OpAMD64ORL_50(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpAMD64MOVBloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -16168,6 +16845,7 @@ func rewriteValueAMD64_OpAMD64ORL_50(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -16195,12 +16873,14 @@ func rewriteValueAMD64_OpAMD64ORL_50(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpAMD64MOVBloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -16219,6 +16899,7 @@ func rewriteValueAMD64_OpAMD64ORL_50(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -16253,12 +16934,14 @@ func rewriteValueAMD64_OpAMD64ORL_60(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpAMD64MOVBloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -16277,6 +16960,7 @@ func rewriteValueAMD64_OpAMD64ORL_60(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -16304,6 +16988,7 @@ func rewriteValueAMD64_OpAMD64ORL_60(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLLconst {
 			break
@@ -16317,6 +17002,7 @@ func rewriteValueAMD64_OpAMD64ORL_60(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -16328,6 +17014,7 @@ func rewriteValueAMD64_OpAMD64ORL_60(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -16355,6 +17042,7 @@ func rewriteValueAMD64_OpAMD64ORL_60(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLLconst {
 			break
@@ -16368,6 +17056,7 @@ func rewriteValueAMD64_OpAMD64ORL_60(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -16379,6 +17068,7 @@ func rewriteValueAMD64_OpAMD64ORL_60(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -16406,6 +17096,7 @@ func rewriteValueAMD64_OpAMD64ORL_60(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLLconst {
 			break
@@ -16419,6 +17110,7 @@ func rewriteValueAMD64_OpAMD64ORL_60(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -16430,6 +17122,7 @@ func rewriteValueAMD64_OpAMD64ORL_60(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -16457,6 +17150,7 @@ func rewriteValueAMD64_OpAMD64ORL_60(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLLconst {
 			break
@@ -16470,6 +17164,7 @@ func rewriteValueAMD64_OpAMD64ORL_60(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -16481,6 +17176,7 @@ func rewriteValueAMD64_OpAMD64ORL_60(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -16508,12 +17204,14 @@ func rewriteValueAMD64_OpAMD64ORL_60(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVLloadidx1 [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpAMD64MOVWloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -16532,6 +17230,7 @@ func rewriteValueAMD64_OpAMD64ORL_60(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -16559,12 +17258,14 @@ func rewriteValueAMD64_OpAMD64ORL_60(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVLloadidx1 [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpAMD64MOVWloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -16583,6 +17284,7 @@ func rewriteValueAMD64_OpAMD64ORL_60(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -16610,12 +17312,14 @@ func rewriteValueAMD64_OpAMD64ORL_60(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVLloadidx1 [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpAMD64MOVWloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -16634,6 +17338,7 @@ func rewriteValueAMD64_OpAMD64ORL_60(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -16661,12 +17366,14 @@ func rewriteValueAMD64_OpAMD64ORL_60(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVLloadidx1 [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpAMD64MOVWloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -16685,6 +17392,7 @@ func rewriteValueAMD64_OpAMD64ORL_60(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -16712,6 +17420,7 @@ func rewriteValueAMD64_OpAMD64ORL_60(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVLloadidx1 [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLLconst {
 			break
@@ -16725,6 +17434,7 @@ func rewriteValueAMD64_OpAMD64ORL_60(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -16736,6 +17446,7 @@ func rewriteValueAMD64_OpAMD64ORL_60(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -16770,6 +17481,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVLloadidx1 [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLLconst {
 			break
@@ -16783,6 +17495,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -16794,6 +17507,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -16821,6 +17535,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVLloadidx1 [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLLconst {
 			break
@@ -16834,6 +17549,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -16845,6 +17561,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -16872,6 +17589,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVLloadidx1 [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLLconst {
 			break
@@ -16885,6 +17603,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -16896,6 +17615,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -16923,6 +17643,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpAMD64SHLLconst {
 			break
@@ -16934,6 +17655,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -16941,6 +17663,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpAMD64SHLLconst {
 			break
@@ -16954,6 +17677,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -16988,6 +17712,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpAMD64SHLLconst {
 			break
@@ -16999,6 +17724,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -17006,6 +17732,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpAMD64SHLLconst {
 			break
@@ -17019,6 +17746,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -17053,6 +17781,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpAMD64SHLLconst {
 			break
@@ -17064,6 +17793,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -17071,6 +17801,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpAMD64SHLLconst {
 			break
@@ -17084,6 +17815,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -17118,6 +17850,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpAMD64SHLLconst {
 			break
@@ -17129,6 +17862,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -17136,6 +17870,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpAMD64SHLLconst {
 			break
@@ -17149,6 +17884,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -17183,6 +17919,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpAMD64SHLLconst {
 			break
@@ -17194,6 +17931,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -17201,6 +17939,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpAMD64SHLLconst {
@@ -17215,6 +17954,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -17248,6 +17988,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpAMD64SHLLconst {
 			break
@@ -17259,6 +18000,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -17266,6 +18008,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpAMD64SHLLconst {
@@ -17280,6 +18023,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -17313,6 +18057,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpAMD64SHLLconst {
 			break
@@ -17324,6 +18069,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -17331,6 +18077,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpAMD64SHLLconst {
@@ -17345,6 +18092,7 @@ func rewriteValueAMD64_OpAMD64ORL_70(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -17385,6 +18133,7 @@ func rewriteValueAMD64_OpAMD64ORL_80(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpAMD64SHLLconst {
 			break
@@ -17396,6 +18145,7 @@ func rewriteValueAMD64_OpAMD64ORL_80(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -17403,6 +18153,7 @@ func rewriteValueAMD64_OpAMD64ORL_80(v *Value) bool {
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpAMD64SHLLconst {
@@ -17417,6 +18168,7 @@ func rewriteValueAMD64_OpAMD64ORL_80(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -17450,10 +18202,12 @@ func rewriteValueAMD64_OpAMD64ORL_80(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpAMD64SHLLconst {
 			break
@@ -17465,6 +18219,7 @@ func rewriteValueAMD64_OpAMD64ORL_80(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -17482,6 +18237,7 @@ func rewriteValueAMD64_OpAMD64ORL_80(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -17515,10 +18271,12 @@ func rewriteValueAMD64_OpAMD64ORL_80(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpAMD64SHLLconst {
 			break
@@ -17530,6 +18288,7 @@ func rewriteValueAMD64_OpAMD64ORL_80(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -17547,6 +18306,7 @@ func rewriteValueAMD64_OpAMD64ORL_80(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -17580,10 +18340,12 @@ func rewriteValueAMD64_OpAMD64ORL_80(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpAMD64SHLLconst {
@@ -17596,6 +18358,7 @@ func rewriteValueAMD64_OpAMD64ORL_80(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -17612,6 +18375,7 @@ func rewriteValueAMD64_OpAMD64ORL_80(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -17645,10 +18409,12 @@ func rewriteValueAMD64_OpAMD64ORL_80(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpAMD64SHLLconst {
@@ -17661,6 +18427,7 @@ func rewriteValueAMD64_OpAMD64ORL_80(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -17677,6 +18444,7 @@ func rewriteValueAMD64_OpAMD64ORL_80(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -17710,10 +18478,12 @@ func rewriteValueAMD64_OpAMD64ORL_80(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpAMD64SHLLconst {
 			break
@@ -17725,6 +18495,7 @@ func rewriteValueAMD64_OpAMD64ORL_80(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -17742,6 +18513,7 @@ func rewriteValueAMD64_OpAMD64ORL_80(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -17775,10 +18547,12 @@ func rewriteValueAMD64_OpAMD64ORL_80(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpAMD64SHLLconst {
 			break
@@ -17790,6 +18564,7 @@ func rewriteValueAMD64_OpAMD64ORL_80(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -17807,6 +18582,7 @@ func rewriteValueAMD64_OpAMD64ORL_80(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -17840,10 +18616,12 @@ func rewriteValueAMD64_OpAMD64ORL_80(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpAMD64SHLLconst {
@@ -17856,6 +18634,7 @@ func rewriteValueAMD64_OpAMD64ORL_80(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -17872,6 +18651,7 @@ func rewriteValueAMD64_OpAMD64ORL_80(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -17905,10 +18685,12 @@ func rewriteValueAMD64_OpAMD64ORL_80(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpAMD64SHLLconst {
@@ -17921,6 +18703,7 @@ func rewriteValueAMD64_OpAMD64ORL_80(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -17937,6 +18720,7 @@ func rewriteValueAMD64_OpAMD64ORL_80(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -17970,12 +18754,14 @@ func rewriteValueAMD64_OpAMD64ORL_80(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (ROLWconst <v.Type> [8] (MOVWload [i0] {s} p mem))
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpAMD64MOVBload {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		sh := v.Args[1]
@@ -17993,6 +18779,7 @@ func rewriteValueAMD64_OpAMD64ORL_80(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -18026,6 +18813,7 @@ func rewriteValueAMD64_OpAMD64ORL_90(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (ROLWconst <v.Type> [8] (MOVWload [i0] {s} p mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLLconst {
 			break
@@ -18039,6 +18827,7 @@ func rewriteValueAMD64_OpAMD64ORL_90(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		x1 := v.Args[1]
@@ -18049,6 +18838,7 @@ func rewriteValueAMD64_OpAMD64ORL_90(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -18075,6 +18865,7 @@ func rewriteValueAMD64_OpAMD64ORL_90(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (BSWAPL <v.Type> (MOVLload [i0] {s} p mem))
 	for {
+		_ = v.Args[1]
 		r1 := v.Args[0]
 		if r1.Op != OpAMD64ROLWconst {
 			break
@@ -18088,6 +18879,7 @@ func rewriteValueAMD64_OpAMD64ORL_90(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		sh := v.Args[1]
@@ -18112,6 +18904,7 @@ func rewriteValueAMD64_OpAMD64ORL_90(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -18137,6 +18930,7 @@ func rewriteValueAMD64_OpAMD64ORL_90(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (BSWAPL <v.Type> (MOVLload [i0] {s} p mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLLconst {
 			break
@@ -18157,6 +18951,7 @@ func rewriteValueAMD64_OpAMD64ORL_90(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		r1 := v.Args[1]
@@ -18174,6 +18969,7 @@ func rewriteValueAMD64_OpAMD64ORL_90(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -18199,6 +18995,7 @@ func rewriteValueAMD64_OpAMD64ORL_90(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWload [i0] {s} p mem))) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpAMD64SHLLconst {
 			break
@@ -18210,12 +19007,14 @@ func rewriteValueAMD64_OpAMD64ORL_90(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		or := v.Args[1]
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpAMD64SHLLconst {
 			break
@@ -18229,6 +19028,7 @@ func rewriteValueAMD64_OpAMD64ORL_90(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -18262,6 +19062,7 @@ func rewriteValueAMD64_OpAMD64ORL_90(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWload [i0] {s} p mem))) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpAMD64SHLLconst {
 			break
@@ -18273,12 +19074,14 @@ func rewriteValueAMD64_OpAMD64ORL_90(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		or := v.Args[1]
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpAMD64SHLLconst {
@@ -18293,6 +19096,7 @@ func rewriteValueAMD64_OpAMD64ORL_90(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -18325,10 +19129,12 @@ func rewriteValueAMD64_OpAMD64ORL_90(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWload [i0] {s} p mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpAMD64SHLLconst {
 			break
@@ -18340,6 +19146,7 @@ func rewriteValueAMD64_OpAMD64ORL_90(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		y := or.Args[1]
@@ -18356,6 +19163,7 @@ func rewriteValueAMD64_OpAMD64ORL_90(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -18388,10 +19196,12 @@ func rewriteValueAMD64_OpAMD64ORL_90(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWload [i0] {s} p mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpAMD64SHLLconst {
@@ -18404,6 +19214,7 @@ func rewriteValueAMD64_OpAMD64ORL_90(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		s0 := v.Args[1]
@@ -18419,6 +19230,7 @@ func rewriteValueAMD64_OpAMD64ORL_90(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -18451,12 +19263,14 @@ func rewriteValueAMD64_OpAMD64ORL_90(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (ROLWconst <v.Type> [8] (MOVWloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpAMD64MOVBloadidx1 {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -18475,6 +19289,7 @@ func rewriteValueAMD64_OpAMD64ORL_90(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -18505,12 +19320,14 @@ func rewriteValueAMD64_OpAMD64ORL_90(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (ROLWconst <v.Type> [8] (MOVWloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpAMD64MOVBloadidx1 {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -18529,6 +19346,7 @@ func rewriteValueAMD64_OpAMD64ORL_90(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -18559,12 +19377,14 @@ func rewriteValueAMD64_OpAMD64ORL_90(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (ROLWconst <v.Type> [8] (MOVWloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpAMD64MOVBloadidx1 {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -18583,6 +19403,7 @@ func rewriteValueAMD64_OpAMD64ORL_90(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -18620,12 +19441,14 @@ func rewriteValueAMD64_OpAMD64ORL_100(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (ROLWconst <v.Type> [8] (MOVWloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpAMD64MOVBloadidx1 {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -18644,6 +19467,7 @@ func rewriteValueAMD64_OpAMD64ORL_100(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -18674,6 +19498,7 @@ func rewriteValueAMD64_OpAMD64ORL_100(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (ROLWconst <v.Type> [8] (MOVWloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLLconst {
 			break
@@ -18687,6 +19512,7 @@ func rewriteValueAMD64_OpAMD64ORL_100(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -18698,6 +19524,7 @@ func rewriteValueAMD64_OpAMD64ORL_100(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -18728,6 +19555,7 @@ func rewriteValueAMD64_OpAMD64ORL_100(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (ROLWconst <v.Type> [8] (MOVWloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLLconst {
 			break
@@ -18741,6 +19569,7 @@ func rewriteValueAMD64_OpAMD64ORL_100(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -18752,6 +19581,7 @@ func rewriteValueAMD64_OpAMD64ORL_100(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -18782,6 +19612,7 @@ func rewriteValueAMD64_OpAMD64ORL_100(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (ROLWconst <v.Type> [8] (MOVWloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLLconst {
 			break
@@ -18795,6 +19626,7 @@ func rewriteValueAMD64_OpAMD64ORL_100(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -18806,6 +19638,7 @@ func rewriteValueAMD64_OpAMD64ORL_100(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -18836,6 +19669,7 @@ func rewriteValueAMD64_OpAMD64ORL_100(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (ROLWconst <v.Type> [8] (MOVWloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLLconst {
 			break
@@ -18849,6 +19683,7 @@ func rewriteValueAMD64_OpAMD64ORL_100(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -18860,6 +19695,7 @@ func rewriteValueAMD64_OpAMD64ORL_100(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -18890,6 +19726,7 @@ func rewriteValueAMD64_OpAMD64ORL_100(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (BSWAPL <v.Type> (MOVLloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		r1 := v.Args[0]
 		if r1.Op != OpAMD64ROLWconst {
 			break
@@ -18903,6 +19740,7 @@ func rewriteValueAMD64_OpAMD64ORL_100(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -18928,6 +19766,7 @@ func rewriteValueAMD64_OpAMD64ORL_100(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -18957,6 +19796,7 @@ func rewriteValueAMD64_OpAMD64ORL_100(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (BSWAPL <v.Type> (MOVLloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		r1 := v.Args[0]
 		if r1.Op != OpAMD64ROLWconst {
 			break
@@ -18970,6 +19810,7 @@ func rewriteValueAMD64_OpAMD64ORL_100(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -18995,6 +19836,7 @@ func rewriteValueAMD64_OpAMD64ORL_100(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -19024,6 +19866,7 @@ func rewriteValueAMD64_OpAMD64ORL_100(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (BSWAPL <v.Type> (MOVLloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		r1 := v.Args[0]
 		if r1.Op != OpAMD64ROLWconst {
 			break
@@ -19037,6 +19880,7 @@ func rewriteValueAMD64_OpAMD64ORL_100(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -19062,6 +19906,7 @@ func rewriteValueAMD64_OpAMD64ORL_100(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -19091,6 +19936,7 @@ func rewriteValueAMD64_OpAMD64ORL_100(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (BSWAPL <v.Type> (MOVLloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		r1 := v.Args[0]
 		if r1.Op != OpAMD64ROLWconst {
 			break
@@ -19104,6 +19950,7 @@ func rewriteValueAMD64_OpAMD64ORL_100(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -19129,6 +19976,7 @@ func rewriteValueAMD64_OpAMD64ORL_100(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -19158,6 +20006,7 @@ func rewriteValueAMD64_OpAMD64ORL_100(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (BSWAPL <v.Type> (MOVLloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLLconst {
 			break
@@ -19178,6 +20027,7 @@ func rewriteValueAMD64_OpAMD64ORL_100(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -19196,6 +20046,7 @@ func rewriteValueAMD64_OpAMD64ORL_100(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -19232,6 +20083,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (BSWAPL <v.Type> (MOVLloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLLconst {
 			break
@@ -19252,6 +20104,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -19270,6 +20123,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -19299,6 +20153,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (BSWAPL <v.Type> (MOVLloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLLconst {
 			break
@@ -19319,6 +20174,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -19337,6 +20193,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -19366,6 +20223,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (BSWAPL <v.Type> (MOVLloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLLconst {
 			break
@@ -19386,6 +20244,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -19404,6 +20263,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -19433,6 +20293,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpAMD64SHLLconst {
 			break
@@ -19444,6 +20305,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -19451,6 +20313,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpAMD64SHLLconst {
 			break
@@ -19464,6 +20327,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -19501,6 +20365,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpAMD64SHLLconst {
 			break
@@ -19512,6 +20377,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -19519,6 +20385,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpAMD64SHLLconst {
 			break
@@ -19532,6 +20399,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -19569,6 +20437,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpAMD64SHLLconst {
 			break
@@ -19580,6 +20449,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -19587,6 +20457,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpAMD64SHLLconst {
 			break
@@ -19600,6 +20471,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -19637,6 +20509,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpAMD64SHLLconst {
 			break
@@ -19648,6 +20521,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -19655,6 +20529,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpAMD64SHLLconst {
 			break
@@ -19668,6 +20543,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -19705,6 +20581,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpAMD64SHLLconst {
 			break
@@ -19716,6 +20593,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -19723,6 +20601,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpAMD64SHLLconst {
@@ -19737,6 +20616,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -19773,6 +20653,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpAMD64SHLLconst {
 			break
@@ -19784,6 +20665,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -19791,6 +20673,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpAMD64SHLLconst {
@@ -19805,6 +20688,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -19841,6 +20725,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpAMD64SHLLconst {
 			break
@@ -19852,6 +20737,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -19859,6 +20745,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpAMD64SHLLconst {
@@ -19873,6 +20760,7 @@ func rewriteValueAMD64_OpAMD64ORL_110(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -19916,6 +20804,7 @@ func rewriteValueAMD64_OpAMD64ORL_120(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpAMD64SHLLconst {
 			break
@@ -19927,6 +20816,7 @@ func rewriteValueAMD64_OpAMD64ORL_120(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -19934,6 +20824,7 @@ func rewriteValueAMD64_OpAMD64ORL_120(v *Value) bool {
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpAMD64SHLLconst {
@@ -19948,6 +20839,7 @@ func rewriteValueAMD64_OpAMD64ORL_120(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -19984,10 +20876,12 @@ func rewriteValueAMD64_OpAMD64ORL_120(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpAMD64SHLLconst {
 			break
@@ -19999,6 +20893,7 @@ func rewriteValueAMD64_OpAMD64ORL_120(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -20016,6 +20911,7 @@ func rewriteValueAMD64_OpAMD64ORL_120(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -20052,10 +20948,12 @@ func rewriteValueAMD64_OpAMD64ORL_120(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpAMD64SHLLconst {
 			break
@@ -20067,6 +20965,7 @@ func rewriteValueAMD64_OpAMD64ORL_120(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -20084,6 +20983,7 @@ func rewriteValueAMD64_OpAMD64ORL_120(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -20120,10 +21020,12 @@ func rewriteValueAMD64_OpAMD64ORL_120(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpAMD64SHLLconst {
@@ -20136,6 +21038,7 @@ func rewriteValueAMD64_OpAMD64ORL_120(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -20152,6 +21055,7 @@ func rewriteValueAMD64_OpAMD64ORL_120(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -20188,10 +21092,12 @@ func rewriteValueAMD64_OpAMD64ORL_120(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpAMD64SHLLconst {
@@ -20204,6 +21110,7 @@ func rewriteValueAMD64_OpAMD64ORL_120(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -20220,6 +21127,7 @@ func rewriteValueAMD64_OpAMD64ORL_120(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -20256,10 +21164,12 @@ func rewriteValueAMD64_OpAMD64ORL_120(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpAMD64SHLLconst {
 			break
@@ -20271,6 +21181,7 @@ func rewriteValueAMD64_OpAMD64ORL_120(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -20288,6 +21199,7 @@ func rewriteValueAMD64_OpAMD64ORL_120(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -20324,10 +21236,12 @@ func rewriteValueAMD64_OpAMD64ORL_120(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpAMD64SHLLconst {
 			break
@@ -20339,6 +21253,7 @@ func rewriteValueAMD64_OpAMD64ORL_120(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -20356,6 +21271,7 @@ func rewriteValueAMD64_OpAMD64ORL_120(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -20392,10 +21308,12 @@ func rewriteValueAMD64_OpAMD64ORL_120(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpAMD64SHLLconst {
@@ -20408,6 +21326,7 @@ func rewriteValueAMD64_OpAMD64ORL_120(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -20424,6 +21343,7 @@ func rewriteValueAMD64_OpAMD64ORL_120(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -20460,10 +21380,12 @@ func rewriteValueAMD64_OpAMD64ORL_120(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORL <v.Type> (SHLLconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORL {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpAMD64SHLLconst {
@@ -20476,6 +21398,7 @@ func rewriteValueAMD64_OpAMD64ORL_120(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -20492,6 +21415,7 @@ func rewriteValueAMD64_OpAMD64ORL_120(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -20528,6 +21452,7 @@ func rewriteValueAMD64_OpAMD64ORL_120(v *Value) bool {
 	// cond: canMergeLoad(v, l, x) && clobber(l)
 	// result: (ORLmem x [off] {sym} ptr mem)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		l := v.Args[1]
 		if l.Op != OpAMD64MOVLload {
@@ -20535,6 +21460,7 @@ func rewriteValueAMD64_OpAMD64ORL_120(v *Value) bool {
 		}
 		off := l.AuxInt
 		sym := l.Aux
+		_ = l.Args[1]
 		ptr := l.Args[0]
 		mem := l.Args[1]
 		if !(canMergeLoad(v, l, x) && clobber(l)) {
@@ -20555,12 +21481,14 @@ func rewriteValueAMD64_OpAMD64ORL_130(v *Value) bool {
 	// cond: canMergeLoad(v, l, x) && clobber(l)
 	// result: (ORLmem x [off] {sym} ptr mem)
 	for {
+		_ = v.Args[1]
 		l := v.Args[0]
 		if l.Op != OpAMD64MOVLload {
 			break
 		}
 		off := l.AuxInt
 		sym := l.Aux
+		_ = l.Args[1]
 		ptr := l.Args[0]
 		mem := l.Args[1]
 		x := v.Args[1]
@@ -20625,6 +21553,7 @@ func rewriteValueAMD64_OpAMD64ORQ_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (ORQconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVQconst {
@@ -20643,6 +21572,7 @@ func rewriteValueAMD64_OpAMD64ORQ_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (ORQconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64MOVQconst {
 			break
@@ -20661,6 +21591,7 @@ func rewriteValueAMD64_OpAMD64ORQ_0(v *Value) bool {
 	// cond: d==64-c
 	// result: (ROLQconst x [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLQconst {
 			break
@@ -20687,6 +21618,7 @@ func rewriteValueAMD64_OpAMD64ORQ_0(v *Value) bool {
 	// cond: d==64-c
 	// result: (ROLQconst x [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHRQconst {
 			break
@@ -20713,20 +21645,24 @@ func rewriteValueAMD64_OpAMD64ORQ_0(v *Value) bool {
 	// cond:
 	// result: (ROLQ x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLQ {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ANDQ {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpAMD64SHRQ {
 			break
 		}
+		_ = v_1_0.Args[1]
 		if x != v_1_0.Args[0] {
 			break
 		}
@@ -20778,16 +21714,19 @@ func rewriteValueAMD64_OpAMD64ORQ_0(v *Value) bool {
 	// cond:
 	// result: (ROLQ x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLQ {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ANDQ {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpAMD64SBBQcarrymask {
 			break
@@ -20824,6 +21763,7 @@ func rewriteValueAMD64_OpAMD64ORQ_0(v *Value) bool {
 		if v_1_1.Op != OpAMD64SHRQ {
 			break
 		}
+		_ = v_1_1.Args[1]
 		if x != v_1_1.Args[0] {
 			break
 		}
@@ -20843,14 +21783,17 @@ func rewriteValueAMD64_OpAMD64ORQ_0(v *Value) bool {
 	// cond:
 	// result: (ROLQ x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ANDQ {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpAMD64SHRQ {
 			break
 		}
+		_ = v_0_0.Args[1]
 		x := v_0_0.Args[0]
 		v_0_0_1 := v_0_0.Args[1]
 		if v_0_0_1.Op != OpAMD64NEGQ {
@@ -20893,6 +21836,7 @@ func rewriteValueAMD64_OpAMD64ORQ_0(v *Value) bool {
 		if v_1.Op != OpAMD64SHLQ {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -20908,10 +21852,12 @@ func rewriteValueAMD64_OpAMD64ORQ_0(v *Value) bool {
 	// cond:
 	// result: (ROLQ x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ANDQ {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpAMD64SBBQcarrymask {
 			break
@@ -20946,6 +21892,7 @@ func rewriteValueAMD64_OpAMD64ORQ_0(v *Value) bool {
 		if v_0_1.Op != OpAMD64SHRQ {
 			break
 		}
+		_ = v_0_1.Args[1]
 		x := v_0_1.Args[0]
 		v_0_1_1 := v_0_1.Args[1]
 		if v_0_1_1.Op != OpAMD64NEGQ {
@@ -20958,6 +21905,7 @@ func rewriteValueAMD64_OpAMD64ORQ_0(v *Value) bool {
 		if v_1.Op != OpAMD64SHLQ {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -20973,20 +21921,24 @@ func rewriteValueAMD64_OpAMD64ORQ_0(v *Value) bool {
 	// cond:
 	// result: (ROLQ x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLQ {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ANDQ {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpAMD64SHRQ {
 			break
 		}
+		_ = v_1_0.Args[1]
 		if x != v_1_0.Args[0] {
 			break
 		}
@@ -21038,16 +21990,19 @@ func rewriteValueAMD64_OpAMD64ORQ_0(v *Value) bool {
 	// cond:
 	// result: (ROLQ x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLQ {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ANDQ {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpAMD64SBBQcarrymask {
 			break
@@ -21084,6 +22039,7 @@ func rewriteValueAMD64_OpAMD64ORQ_0(v *Value) bool {
 		if v_1_1.Op != OpAMD64SHRQ {
 			break
 		}
+		_ = v_1_1.Args[1]
 		if x != v_1_1.Args[0] {
 			break
 		}
@@ -21106,14 +22062,17 @@ func rewriteValueAMD64_OpAMD64ORQ_10(v *Value) bool {
 	// cond:
 	// result: (ROLQ x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ANDQ {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpAMD64SHRQ {
 			break
 		}
+		_ = v_0_0.Args[1]
 		x := v_0_0.Args[0]
 		v_0_0_1 := v_0_0.Args[1]
 		if v_0_0_1.Op != OpAMD64NEGL {
@@ -21156,6 +22115,7 @@ func rewriteValueAMD64_OpAMD64ORQ_10(v *Value) bool {
 		if v_1.Op != OpAMD64SHLQ {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -21171,10 +22131,12 @@ func rewriteValueAMD64_OpAMD64ORQ_10(v *Value) bool {
 	// cond:
 	// result: (ROLQ x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ANDQ {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpAMD64SBBQcarrymask {
 			break
@@ -21209,6 +22171,7 @@ func rewriteValueAMD64_OpAMD64ORQ_10(v *Value) bool {
 		if v_0_1.Op != OpAMD64SHRQ {
 			break
 		}
+		_ = v_0_1.Args[1]
 		x := v_0_1.Args[0]
 		v_0_1_1 := v_0_1.Args[1]
 		if v_0_1_1.Op != OpAMD64NEGL {
@@ -21221,6 +22184,7 @@ func rewriteValueAMD64_OpAMD64ORQ_10(v *Value) bool {
 		if v_1.Op != OpAMD64SHLQ {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -21236,20 +22200,24 @@ func rewriteValueAMD64_OpAMD64ORQ_10(v *Value) bool {
 	// cond:
 	// result: (RORQ x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHRQ {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ANDQ {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpAMD64SHLQ {
 			break
 		}
+		_ = v_1_0.Args[1]
 		if x != v_1_0.Args[0] {
 			break
 		}
@@ -21301,16 +22269,19 @@ func rewriteValueAMD64_OpAMD64ORQ_10(v *Value) bool {
 	// cond:
 	// result: (RORQ x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHRQ {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ANDQ {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpAMD64SBBQcarrymask {
 			break
@@ -21347,6 +22318,7 @@ func rewriteValueAMD64_OpAMD64ORQ_10(v *Value) bool {
 		if v_1_1.Op != OpAMD64SHLQ {
 			break
 		}
+		_ = v_1_1.Args[1]
 		if x != v_1_1.Args[0] {
 			break
 		}
@@ -21366,14 +22338,17 @@ func rewriteValueAMD64_OpAMD64ORQ_10(v *Value) bool {
 	// cond:
 	// result: (RORQ x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ANDQ {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpAMD64SHLQ {
 			break
 		}
+		_ = v_0_0.Args[1]
 		x := v_0_0.Args[0]
 		v_0_0_1 := v_0_0.Args[1]
 		if v_0_0_1.Op != OpAMD64NEGQ {
@@ -21416,6 +22391,7 @@ func rewriteValueAMD64_OpAMD64ORQ_10(v *Value) bool {
 		if v_1.Op != OpAMD64SHRQ {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -21431,10 +22407,12 @@ func rewriteValueAMD64_OpAMD64ORQ_10(v *Value) bool {
 	// cond:
 	// result: (RORQ x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ANDQ {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpAMD64SBBQcarrymask {
 			break
@@ -21469,6 +22447,7 @@ func rewriteValueAMD64_OpAMD64ORQ_10(v *Value) bool {
 		if v_0_1.Op != OpAMD64SHLQ {
 			break
 		}
+		_ = v_0_1.Args[1]
 		x := v_0_1.Args[0]
 		v_0_1_1 := v_0_1.Args[1]
 		if v_0_1_1.Op != OpAMD64NEGQ {
@@ -21481,6 +22460,7 @@ func rewriteValueAMD64_OpAMD64ORQ_10(v *Value) bool {
 		if v_1.Op != OpAMD64SHRQ {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -21496,20 +22476,24 @@ func rewriteValueAMD64_OpAMD64ORQ_10(v *Value) bool {
 	// cond:
 	// result: (RORQ x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHRQ {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ANDQ {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpAMD64SHLQ {
 			break
 		}
+		_ = v_1_0.Args[1]
 		if x != v_1_0.Args[0] {
 			break
 		}
@@ -21561,16 +22545,19 @@ func rewriteValueAMD64_OpAMD64ORQ_10(v *Value) bool {
 	// cond:
 	// result: (RORQ x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHRQ {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ANDQ {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpAMD64SBBQcarrymask {
 			break
@@ -21607,6 +22594,7 @@ func rewriteValueAMD64_OpAMD64ORQ_10(v *Value) bool {
 		if v_1_1.Op != OpAMD64SHLQ {
 			break
 		}
+		_ = v_1_1.Args[1]
 		if x != v_1_1.Args[0] {
 			break
 		}
@@ -21626,14 +22614,17 @@ func rewriteValueAMD64_OpAMD64ORQ_10(v *Value) bool {
 	// cond:
 	// result: (RORQ x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ANDQ {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpAMD64SHLQ {
 			break
 		}
+		_ = v_0_0.Args[1]
 		x := v_0_0.Args[0]
 		v_0_0_1 := v_0_0.Args[1]
 		if v_0_0_1.Op != OpAMD64NEGL {
@@ -21676,6 +22667,7 @@ func rewriteValueAMD64_OpAMD64ORQ_10(v *Value) bool {
 		if v_1.Op != OpAMD64SHRQ {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -21691,10 +22683,12 @@ func rewriteValueAMD64_OpAMD64ORQ_10(v *Value) bool {
 	// cond:
 	// result: (RORQ x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64ANDQ {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpAMD64SBBQcarrymask {
 			break
@@ -21729,6 +22723,7 @@ func rewriteValueAMD64_OpAMD64ORQ_10(v *Value) bool {
 		if v_0_1.Op != OpAMD64SHLQ {
 			break
 		}
+		_ = v_0_1.Args[1]
 		x := v_0_1.Args[0]
 		v_0_1_1 := v_0_1.Args[1]
 		if v_0_1_1.Op != OpAMD64NEGL {
@@ -21741,6 +22736,7 @@ func rewriteValueAMD64_OpAMD64ORQ_10(v *Value) bool {
 		if v_1.Op != OpAMD64SHRQ {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -21763,6 +22759,7 @@ func rewriteValueAMD64_OpAMD64ORQ_20(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -21776,12 +22773,14 @@ func rewriteValueAMD64_OpAMD64ORQ_20(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWload [i0] {s} p mem)
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpAMD64MOVBload {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		sh := v.Args[1]
@@ -21799,6 +22798,7 @@ func rewriteValueAMD64_OpAMD64ORQ_20(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -21822,6 +22822,7 @@ func rewriteValueAMD64_OpAMD64ORQ_20(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWload [i0] {s} p mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLQconst {
 			break
@@ -21835,6 +22836,7 @@ func rewriteValueAMD64_OpAMD64ORQ_20(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		x0 := v.Args[1]
@@ -21845,6 +22847,7 @@ func rewriteValueAMD64_OpAMD64ORQ_20(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -21868,12 +22871,14 @@ func rewriteValueAMD64_OpAMD64ORQ_20(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVLload [i0] {s} p mem)
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpAMD64MOVWload {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		sh := v.Args[1]
@@ -21891,6 +22896,7 @@ func rewriteValueAMD64_OpAMD64ORQ_20(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -21914,6 +22920,7 @@ func rewriteValueAMD64_OpAMD64ORQ_20(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVLload [i0] {s} p mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLQconst {
 			break
@@ -21927,6 +22934,7 @@ func rewriteValueAMD64_OpAMD64ORQ_20(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		x0 := v.Args[1]
@@ -21937,6 +22945,7 @@ func rewriteValueAMD64_OpAMD64ORQ_20(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -21960,12 +22969,14 @@ func rewriteValueAMD64_OpAMD64ORQ_20(v *Value) bool {
 	// cond: i1 == i0+4   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVQload [i0] {s} p mem)
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpAMD64MOVLload {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		sh := v.Args[1]
@@ -21983,6 +22994,7 @@ func rewriteValueAMD64_OpAMD64ORQ_20(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -22006,6 +23018,7 @@ func rewriteValueAMD64_OpAMD64ORQ_20(v *Value) bool {
 	// cond: i1 == i0+4   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVQload [i0] {s} p mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLQconst {
 			break
@@ -22019,6 +23032,7 @@ func rewriteValueAMD64_OpAMD64ORQ_20(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		x0 := v.Args[1]
@@ -22029,6 +23043,7 @@ func rewriteValueAMD64_OpAMD64ORQ_20(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -22052,6 +23067,7 @@ func rewriteValueAMD64_OpAMD64ORQ_20(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVWload [i0] {s} p mem)) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -22063,12 +23079,14 @@ func rewriteValueAMD64_OpAMD64ORQ_20(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		or := v.Args[1]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -22082,6 +23100,7 @@ func rewriteValueAMD64_OpAMD64ORQ_20(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -22112,6 +23131,7 @@ func rewriteValueAMD64_OpAMD64ORQ_20(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVWload [i0] {s} p mem)) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -22123,12 +23143,14 @@ func rewriteValueAMD64_OpAMD64ORQ_20(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		or := v.Args[1]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpAMD64SHLQconst {
@@ -22143,6 +23165,7 @@ func rewriteValueAMD64_OpAMD64ORQ_20(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -22172,10 +23195,12 @@ func rewriteValueAMD64_OpAMD64ORQ_20(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVWload [i0] {s} p mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -22187,6 +23212,7 @@ func rewriteValueAMD64_OpAMD64ORQ_20(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		y := or.Args[1]
@@ -22203,6 +23229,7 @@ func rewriteValueAMD64_OpAMD64ORQ_20(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -22239,10 +23266,12 @@ func rewriteValueAMD64_OpAMD64ORQ_30(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVWload [i0] {s} p mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpAMD64SHLQconst {
@@ -22255,6 +23284,7 @@ func rewriteValueAMD64_OpAMD64ORQ_30(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		s1 := v.Args[1]
@@ -22270,6 +23300,7 @@ func rewriteValueAMD64_OpAMD64ORQ_30(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -22299,6 +23330,7 @@ func rewriteValueAMD64_OpAMD64ORQ_30(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVLload [i0] {s} p mem)) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -22310,12 +23342,14 @@ func rewriteValueAMD64_OpAMD64ORQ_30(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		or := v.Args[1]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -22329,6 +23363,7 @@ func rewriteValueAMD64_OpAMD64ORQ_30(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -22359,6 +23394,7 @@ func rewriteValueAMD64_OpAMD64ORQ_30(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVLload [i0] {s} p mem)) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -22370,12 +23406,14 @@ func rewriteValueAMD64_OpAMD64ORQ_30(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		or := v.Args[1]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpAMD64SHLQconst {
@@ -22390,6 +23428,7 @@ func rewriteValueAMD64_OpAMD64ORQ_30(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -22419,10 +23458,12 @@ func rewriteValueAMD64_OpAMD64ORQ_30(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVLload [i0] {s} p mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -22434,6 +23475,7 @@ func rewriteValueAMD64_OpAMD64ORQ_30(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		y := or.Args[1]
@@ -22450,6 +23492,7 @@ func rewriteValueAMD64_OpAMD64ORQ_30(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -22479,10 +23522,12 @@ func rewriteValueAMD64_OpAMD64ORQ_30(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVLload [i0] {s} p mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpAMD64SHLQconst {
@@ -22495,6 +23540,7 @@ func rewriteValueAMD64_OpAMD64ORQ_30(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		s1 := v.Args[1]
@@ -22510,6 +23556,7 @@ func rewriteValueAMD64_OpAMD64ORQ_30(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -22539,12 +23586,14 @@ func rewriteValueAMD64_OpAMD64ORQ_30(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpAMD64MOVBloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -22563,6 +23612,7 @@ func rewriteValueAMD64_OpAMD64ORQ_30(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -22590,12 +23640,14 @@ func rewriteValueAMD64_OpAMD64ORQ_30(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpAMD64MOVBloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -22614,6 +23666,7 @@ func rewriteValueAMD64_OpAMD64ORQ_30(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -22641,12 +23694,14 @@ func rewriteValueAMD64_OpAMD64ORQ_30(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpAMD64MOVBloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -22665,6 +23720,7 @@ func rewriteValueAMD64_OpAMD64ORQ_30(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -22692,12 +23748,14 @@ func rewriteValueAMD64_OpAMD64ORQ_30(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpAMD64MOVBloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -22716,6 +23774,7 @@ func rewriteValueAMD64_OpAMD64ORQ_30(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -22743,6 +23802,7 @@ func rewriteValueAMD64_OpAMD64ORQ_30(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLQconst {
 			break
@@ -22756,6 +23816,7 @@ func rewriteValueAMD64_OpAMD64ORQ_30(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -22767,6 +23828,7 @@ func rewriteValueAMD64_OpAMD64ORQ_30(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -22801,6 +23863,7 @@ func rewriteValueAMD64_OpAMD64ORQ_40(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLQconst {
 			break
@@ -22814,6 +23877,7 @@ func rewriteValueAMD64_OpAMD64ORQ_40(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -22825,6 +23889,7 @@ func rewriteValueAMD64_OpAMD64ORQ_40(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -22852,6 +23917,7 @@ func rewriteValueAMD64_OpAMD64ORQ_40(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLQconst {
 			break
@@ -22865,6 +23931,7 @@ func rewriteValueAMD64_OpAMD64ORQ_40(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -22876,6 +23943,7 @@ func rewriteValueAMD64_OpAMD64ORQ_40(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -22903,6 +23971,7 @@ func rewriteValueAMD64_OpAMD64ORQ_40(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWloadidx1 <v.Type> [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLQconst {
 			break
@@ -22916,6 +23985,7 @@ func rewriteValueAMD64_OpAMD64ORQ_40(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -22927,6 +23997,7 @@ func rewriteValueAMD64_OpAMD64ORQ_40(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -22954,12 +24025,14 @@ func rewriteValueAMD64_OpAMD64ORQ_40(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVLloadidx1 [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpAMD64MOVWloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -22978,6 +24051,7 @@ func rewriteValueAMD64_OpAMD64ORQ_40(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -23005,12 +24079,14 @@ func rewriteValueAMD64_OpAMD64ORQ_40(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVLloadidx1 [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpAMD64MOVWloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -23029,6 +24105,7 @@ func rewriteValueAMD64_OpAMD64ORQ_40(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -23056,12 +24133,14 @@ func rewriteValueAMD64_OpAMD64ORQ_40(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVLloadidx1 [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpAMD64MOVWloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -23080,6 +24159,7 @@ func rewriteValueAMD64_OpAMD64ORQ_40(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -23107,12 +24187,14 @@ func rewriteValueAMD64_OpAMD64ORQ_40(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVLloadidx1 [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpAMD64MOVWloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -23131,6 +24213,7 @@ func rewriteValueAMD64_OpAMD64ORQ_40(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -23158,6 +24241,7 @@ func rewriteValueAMD64_OpAMD64ORQ_40(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVLloadidx1 [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLQconst {
 			break
@@ -23171,6 +24255,7 @@ func rewriteValueAMD64_OpAMD64ORQ_40(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -23182,6 +24267,7 @@ func rewriteValueAMD64_OpAMD64ORQ_40(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -23209,6 +24295,7 @@ func rewriteValueAMD64_OpAMD64ORQ_40(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVLloadidx1 [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLQconst {
 			break
@@ -23222,6 +24309,7 @@ func rewriteValueAMD64_OpAMD64ORQ_40(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -23233,6 +24321,7 @@ func rewriteValueAMD64_OpAMD64ORQ_40(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -23260,6 +24349,7 @@ func rewriteValueAMD64_OpAMD64ORQ_40(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVLloadidx1 [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLQconst {
 			break
@@ -23273,6 +24363,7 @@ func rewriteValueAMD64_OpAMD64ORQ_40(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -23284,6 +24375,7 @@ func rewriteValueAMD64_OpAMD64ORQ_40(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -23318,6 +24410,7 @@ func rewriteValueAMD64_OpAMD64ORQ_50(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVLloadidx1 [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLQconst {
 			break
@@ -23331,6 +24424,7 @@ func rewriteValueAMD64_OpAMD64ORQ_50(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -23342,6 +24436,7 @@ func rewriteValueAMD64_OpAMD64ORQ_50(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -23369,12 +24464,14 @@ func rewriteValueAMD64_OpAMD64ORQ_50(v *Value) bool {
 	// cond: i1 == i0+4   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVQloadidx1 [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpAMD64MOVLloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -23393,6 +24490,7 @@ func rewriteValueAMD64_OpAMD64ORQ_50(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -23420,12 +24518,14 @@ func rewriteValueAMD64_OpAMD64ORQ_50(v *Value) bool {
 	// cond: i1 == i0+4   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVQloadidx1 [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpAMD64MOVLloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -23444,6 +24544,7 @@ func rewriteValueAMD64_OpAMD64ORQ_50(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -23471,12 +24572,14 @@ func rewriteValueAMD64_OpAMD64ORQ_50(v *Value) bool {
 	// cond: i1 == i0+4   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVQloadidx1 [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpAMD64MOVLloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -23495,6 +24598,7 @@ func rewriteValueAMD64_OpAMD64ORQ_50(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -23522,12 +24626,14 @@ func rewriteValueAMD64_OpAMD64ORQ_50(v *Value) bool {
 	// cond: i1 == i0+4   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVQloadidx1 [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpAMD64MOVLloadidx1 {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -23546,6 +24652,7 @@ func rewriteValueAMD64_OpAMD64ORQ_50(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -23573,6 +24680,7 @@ func rewriteValueAMD64_OpAMD64ORQ_50(v *Value) bool {
 	// cond: i1 == i0+4   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVQloadidx1 [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLQconst {
 			break
@@ -23586,6 +24694,7 @@ func rewriteValueAMD64_OpAMD64ORQ_50(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -23597,6 +24706,7 @@ func rewriteValueAMD64_OpAMD64ORQ_50(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -23624,6 +24734,7 @@ func rewriteValueAMD64_OpAMD64ORQ_50(v *Value) bool {
 	// cond: i1 == i0+4   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVQloadidx1 [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLQconst {
 			break
@@ -23637,6 +24748,7 @@ func rewriteValueAMD64_OpAMD64ORQ_50(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -23648,6 +24760,7 @@ func rewriteValueAMD64_OpAMD64ORQ_50(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -23675,6 +24788,7 @@ func rewriteValueAMD64_OpAMD64ORQ_50(v *Value) bool {
 	// cond: i1 == i0+4   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVQloadidx1 [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLQconst {
 			break
@@ -23688,6 +24802,7 @@ func rewriteValueAMD64_OpAMD64ORQ_50(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -23699,6 +24814,7 @@ func rewriteValueAMD64_OpAMD64ORQ_50(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -23726,6 +24842,7 @@ func rewriteValueAMD64_OpAMD64ORQ_50(v *Value) bool {
 	// cond: i1 == i0+4   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVQloadidx1 [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLQconst {
 			break
@@ -23739,6 +24856,7 @@ func rewriteValueAMD64_OpAMD64ORQ_50(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -23750,6 +24868,7 @@ func rewriteValueAMD64_OpAMD64ORQ_50(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -23777,6 +24896,7 @@ func rewriteValueAMD64_OpAMD64ORQ_50(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -23788,6 +24908,7 @@ func rewriteValueAMD64_OpAMD64ORQ_50(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -23795,6 +24916,7 @@ func rewriteValueAMD64_OpAMD64ORQ_50(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -23808,6 +24930,7 @@ func rewriteValueAMD64_OpAMD64ORQ_50(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -23849,6 +24972,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -23860,6 +24984,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -23867,6 +24992,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -23880,6 +25006,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -23914,6 +25041,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -23925,6 +25053,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -23932,6 +25061,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -23945,6 +25075,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -23979,6 +25110,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -23990,6 +25122,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -23997,6 +25130,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -24010,6 +25144,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -24044,6 +25179,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -24055,6 +25191,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -24062,6 +25199,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpAMD64SHLQconst {
@@ -24076,6 +25214,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -24109,6 +25248,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -24120,6 +25260,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -24127,6 +25268,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpAMD64SHLQconst {
@@ -24141,6 +25283,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -24174,6 +25317,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -24185,6 +25329,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -24192,6 +25337,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpAMD64SHLQconst {
@@ -24206,6 +25352,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -24239,6 +25386,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -24250,6 +25398,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -24257,6 +25406,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpAMD64SHLQconst {
@@ -24271,6 +25421,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -24304,10 +25455,12 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -24319,6 +25472,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -24336,6 +25490,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -24369,10 +25524,12 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -24384,6 +25541,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -24401,6 +25559,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -24434,10 +25593,12 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpAMD64SHLQconst {
@@ -24450,6 +25611,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -24466,6 +25628,7 @@ func rewriteValueAMD64_OpAMD64ORQ_60(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -24506,10 +25669,12 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpAMD64SHLQconst {
@@ -24522,6 +25687,7 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -24538,6 +25704,7 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -24571,10 +25738,12 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -24586,6 +25755,7 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -24603,6 +25773,7 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -24636,10 +25807,12 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -24651,6 +25824,7 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -24668,6 +25842,7 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -24701,10 +25876,12 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpAMD64SHLQconst {
@@ -24717,6 +25894,7 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -24733,6 +25911,7 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -24766,10 +25945,12 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVWloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpAMD64SHLQconst {
@@ -24782,6 +25963,7 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -24798,6 +25980,7 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -24831,6 +26014,7 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVLloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -24842,6 +26026,7 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -24849,6 +26034,7 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -24862,6 +26048,7 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -24896,6 +26083,7 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVLloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -24907,6 +26095,7 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -24914,6 +26103,7 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -24927,6 +26117,7 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -24961,6 +26152,7 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVLloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -24972,6 +26164,7 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -24979,6 +26172,7 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -24992,6 +26186,7 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -25026,6 +26221,7 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVLloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -25037,6 +26233,7 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -25044,6 +26241,7 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -25057,6 +26255,7 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -25091,6 +26290,7 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVLloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -25102,6 +26302,7 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -25109,6 +26310,7 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpAMD64SHLQconst {
@@ -25123,6 +26325,7 @@ func rewriteValueAMD64_OpAMD64ORQ_70(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -25163,6 +26366,7 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVLloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -25174,6 +26378,7 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -25181,6 +26386,7 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpAMD64SHLQconst {
@@ -25195,6 +26401,7 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -25228,6 +26435,7 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVLloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -25239,6 +26447,7 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -25246,6 +26455,7 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpAMD64SHLQconst {
@@ -25260,6 +26470,7 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -25293,6 +26504,7 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVLloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -25304,6 +26516,7 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -25311,6 +26524,7 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpAMD64SHLQconst {
@@ -25325,6 +26539,7 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -25358,10 +26573,12 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVLloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -25373,6 +26590,7 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -25390,6 +26608,7 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -25423,10 +26642,12 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVLloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -25438,6 +26659,7 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -25455,6 +26677,7 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -25488,10 +26711,12 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVLloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpAMD64SHLQconst {
@@ -25504,6 +26729,7 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -25520,6 +26746,7 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -25553,10 +26780,12 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVLloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpAMD64SHLQconst {
@@ -25569,6 +26798,7 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -25585,6 +26815,7 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -25618,10 +26849,12 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVLloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -25633,6 +26866,7 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -25650,6 +26884,7 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -25683,10 +26918,12 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVLloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -25698,6 +26935,7 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -25715,6 +26953,7 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -25748,10 +26987,12 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVLloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpAMD64SHLQconst {
@@ -25764,6 +27005,7 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -25780,6 +27022,7 @@ func rewriteValueAMD64_OpAMD64ORQ_80(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -25820,10 +27063,12 @@ func rewriteValueAMD64_OpAMD64ORQ_90(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j0] (MOVLloadidx1 [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpAMD64SHLQconst {
@@ -25836,6 +27081,7 @@ func rewriteValueAMD64_OpAMD64ORQ_90(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -25852,6 +27098,7 @@ func rewriteValueAMD64_OpAMD64ORQ_90(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -25885,12 +27132,14 @@ func rewriteValueAMD64_OpAMD64ORQ_90(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (ROLWconst <v.Type> [8] (MOVWload [i0] {s} p mem))
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpAMD64MOVBload {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		sh := v.Args[1]
@@ -25908,6 +27157,7 @@ func rewriteValueAMD64_OpAMD64ORQ_90(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -25934,6 +27184,7 @@ func rewriteValueAMD64_OpAMD64ORQ_90(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (ROLWconst <v.Type> [8] (MOVWload [i0] {s} p mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLQconst {
 			break
@@ -25947,6 +27198,7 @@ func rewriteValueAMD64_OpAMD64ORQ_90(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		x1 := v.Args[1]
@@ -25957,6 +27209,7 @@ func rewriteValueAMD64_OpAMD64ORQ_90(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -25983,6 +27236,7 @@ func rewriteValueAMD64_OpAMD64ORQ_90(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (BSWAPL <v.Type> (MOVLload [i0] {s} p mem))
 	for {
+		_ = v.Args[1]
 		r1 := v.Args[0]
 		if r1.Op != OpAMD64ROLWconst {
 			break
@@ -25996,6 +27250,7 @@ func rewriteValueAMD64_OpAMD64ORQ_90(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		sh := v.Args[1]
@@ -26020,6 +27275,7 @@ func rewriteValueAMD64_OpAMD64ORQ_90(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -26045,6 +27301,7 @@ func rewriteValueAMD64_OpAMD64ORQ_90(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (BSWAPL <v.Type> (MOVLload [i0] {s} p mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLQconst {
 			break
@@ -26065,6 +27322,7 @@ func rewriteValueAMD64_OpAMD64ORQ_90(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		r1 := v.Args[1]
@@ -26082,6 +27340,7 @@ func rewriteValueAMD64_OpAMD64ORQ_90(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -26107,6 +27366,7 @@ func rewriteValueAMD64_OpAMD64ORQ_90(v *Value) bool {
 	// cond: i1 == i0+4   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (BSWAPQ <v.Type> (MOVQload [i0] {s} p mem))
 	for {
+		_ = v.Args[1]
 		r1 := v.Args[0]
 		if r1.Op != OpAMD64BSWAPL {
 			break
@@ -26117,6 +27377,7 @@ func rewriteValueAMD64_OpAMD64ORQ_90(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		sh := v.Args[1]
@@ -26138,6 +27399,7 @@ func rewriteValueAMD64_OpAMD64ORQ_90(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -26163,6 +27425,7 @@ func rewriteValueAMD64_OpAMD64ORQ_90(v *Value) bool {
 	// cond: i1 == i0+4   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (BSWAPQ <v.Type> (MOVQload [i0] {s} p mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLQconst {
 			break
@@ -26180,6 +27443,7 @@ func rewriteValueAMD64_OpAMD64ORQ_90(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		r1 := v.Args[1]
@@ -26194,6 +27458,7 @@ func rewriteValueAMD64_OpAMD64ORQ_90(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -26219,6 +27484,7 @@ func rewriteValueAMD64_OpAMD64ORQ_90(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWload [i0] {s} p mem))) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -26230,12 +27496,14 @@ func rewriteValueAMD64_OpAMD64ORQ_90(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		or := v.Args[1]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -26249,6 +27517,7 @@ func rewriteValueAMD64_OpAMD64ORQ_90(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -26282,6 +27551,7 @@ func rewriteValueAMD64_OpAMD64ORQ_90(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWload [i0] {s} p mem))) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -26293,12 +27563,14 @@ func rewriteValueAMD64_OpAMD64ORQ_90(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		or := v.Args[1]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpAMD64SHLQconst {
@@ -26313,6 +27585,7 @@ func rewriteValueAMD64_OpAMD64ORQ_90(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -26345,10 +27618,12 @@ func rewriteValueAMD64_OpAMD64ORQ_90(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWload [i0] {s} p mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -26360,6 +27635,7 @@ func rewriteValueAMD64_OpAMD64ORQ_90(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		y := or.Args[1]
@@ -26376,6 +27652,7 @@ func rewriteValueAMD64_OpAMD64ORQ_90(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -26415,10 +27692,12 @@ func rewriteValueAMD64_OpAMD64ORQ_100(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWload [i0] {s} p mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpAMD64SHLQconst {
@@ -26431,6 +27710,7 @@ func rewriteValueAMD64_OpAMD64ORQ_100(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		s0 := v.Args[1]
@@ -26446,6 +27726,7 @@ func rewriteValueAMD64_OpAMD64ORQ_100(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -26478,6 +27759,7 @@ func rewriteValueAMD64_OpAMD64ORQ_100(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (BSWAPL <typ.UInt32> (MOVLload [i0] {s} p mem))) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -26496,12 +27778,14 @@ func rewriteValueAMD64_OpAMD64ORQ_100(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		or := v.Args[1]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -26522,6 +27806,7 @@ func rewriteValueAMD64_OpAMD64ORQ_100(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -26554,6 +27839,7 @@ func rewriteValueAMD64_OpAMD64ORQ_100(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (BSWAPL <typ.UInt32> (MOVLload [i0] {s} p mem))) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -26572,12 +27858,14 @@ func rewriteValueAMD64_OpAMD64ORQ_100(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		or := v.Args[1]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpAMD64SHLQconst {
@@ -26599,6 +27887,7 @@ func rewriteValueAMD64_OpAMD64ORQ_100(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -26630,10 +27919,12 @@ func rewriteValueAMD64_OpAMD64ORQ_100(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (BSWAPL <typ.UInt32> (MOVLload [i0] {s} p mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -26652,6 +27943,7 @@ func rewriteValueAMD64_OpAMD64ORQ_100(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		y := or.Args[1]
@@ -26675,6 +27967,7 @@ func rewriteValueAMD64_OpAMD64ORQ_100(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -26706,10 +27999,12 @@ func rewriteValueAMD64_OpAMD64ORQ_100(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (BSWAPL <typ.UInt32> (MOVLload [i0] {s} p mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpAMD64SHLQconst {
@@ -26729,6 +28024,7 @@ func rewriteValueAMD64_OpAMD64ORQ_100(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		s0 := v.Args[1]
@@ -26751,6 +28047,7 @@ func rewriteValueAMD64_OpAMD64ORQ_100(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -26782,12 +28079,14 @@ func rewriteValueAMD64_OpAMD64ORQ_100(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (ROLWconst <v.Type> [8] (MOVWloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpAMD64MOVBloadidx1 {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -26806,6 +28105,7 @@ func rewriteValueAMD64_OpAMD64ORQ_100(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -26836,12 +28136,14 @@ func rewriteValueAMD64_OpAMD64ORQ_100(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (ROLWconst <v.Type> [8] (MOVWloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpAMD64MOVBloadidx1 {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -26860,6 +28162,7 @@ func rewriteValueAMD64_OpAMD64ORQ_100(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -26890,12 +28193,14 @@ func rewriteValueAMD64_OpAMD64ORQ_100(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (ROLWconst <v.Type> [8] (MOVWloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpAMD64MOVBloadidx1 {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -26914,6 +28219,7 @@ func rewriteValueAMD64_OpAMD64ORQ_100(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -26944,12 +28250,14 @@ func rewriteValueAMD64_OpAMD64ORQ_100(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (ROLWconst <v.Type> [8] (MOVWloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpAMD64MOVBloadidx1 {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -26968,6 +28276,7 @@ func rewriteValueAMD64_OpAMD64ORQ_100(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -26998,6 +28307,7 @@ func rewriteValueAMD64_OpAMD64ORQ_100(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (ROLWconst <v.Type> [8] (MOVWloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLQconst {
 			break
@@ -27011,6 +28321,7 @@ func rewriteValueAMD64_OpAMD64ORQ_100(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -27022,6 +28333,7 @@ func rewriteValueAMD64_OpAMD64ORQ_100(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -27059,6 +28371,7 @@ func rewriteValueAMD64_OpAMD64ORQ_110(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (ROLWconst <v.Type> [8] (MOVWloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLQconst {
 			break
@@ -27072,6 +28385,7 @@ func rewriteValueAMD64_OpAMD64ORQ_110(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -27083,6 +28397,7 @@ func rewriteValueAMD64_OpAMD64ORQ_110(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -27113,6 +28428,7 @@ func rewriteValueAMD64_OpAMD64ORQ_110(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (ROLWconst <v.Type> [8] (MOVWloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLQconst {
 			break
@@ -27126,6 +28442,7 @@ func rewriteValueAMD64_OpAMD64ORQ_110(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -27137,6 +28454,7 @@ func rewriteValueAMD64_OpAMD64ORQ_110(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -27167,6 +28485,7 @@ func rewriteValueAMD64_OpAMD64ORQ_110(v *Value) bool {
 	// cond: i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (ROLWconst <v.Type> [8] (MOVWloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLQconst {
 			break
@@ -27180,6 +28499,7 @@ func rewriteValueAMD64_OpAMD64ORQ_110(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -27191,6 +28511,7 @@ func rewriteValueAMD64_OpAMD64ORQ_110(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -27221,6 +28542,7 @@ func rewriteValueAMD64_OpAMD64ORQ_110(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (BSWAPL <v.Type> (MOVLloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		r1 := v.Args[0]
 		if r1.Op != OpAMD64ROLWconst {
 			break
@@ -27234,6 +28556,7 @@ func rewriteValueAMD64_OpAMD64ORQ_110(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -27259,6 +28582,7 @@ func rewriteValueAMD64_OpAMD64ORQ_110(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -27288,6 +28612,7 @@ func rewriteValueAMD64_OpAMD64ORQ_110(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (BSWAPL <v.Type> (MOVLloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		r1 := v.Args[0]
 		if r1.Op != OpAMD64ROLWconst {
 			break
@@ -27301,6 +28626,7 @@ func rewriteValueAMD64_OpAMD64ORQ_110(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -27326,6 +28652,7 @@ func rewriteValueAMD64_OpAMD64ORQ_110(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -27355,6 +28682,7 @@ func rewriteValueAMD64_OpAMD64ORQ_110(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (BSWAPL <v.Type> (MOVLloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		r1 := v.Args[0]
 		if r1.Op != OpAMD64ROLWconst {
 			break
@@ -27368,6 +28696,7 @@ func rewriteValueAMD64_OpAMD64ORQ_110(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -27393,6 +28722,7 @@ func rewriteValueAMD64_OpAMD64ORQ_110(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -27422,6 +28752,7 @@ func rewriteValueAMD64_OpAMD64ORQ_110(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (BSWAPL <v.Type> (MOVLloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		r1 := v.Args[0]
 		if r1.Op != OpAMD64ROLWconst {
 			break
@@ -27435,6 +28766,7 @@ func rewriteValueAMD64_OpAMD64ORQ_110(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -27460,6 +28792,7 @@ func rewriteValueAMD64_OpAMD64ORQ_110(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -27489,6 +28822,7 @@ func rewriteValueAMD64_OpAMD64ORQ_110(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (BSWAPL <v.Type> (MOVLloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLQconst {
 			break
@@ -27509,6 +28843,7 @@ func rewriteValueAMD64_OpAMD64ORQ_110(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -27527,6 +28862,7 @@ func rewriteValueAMD64_OpAMD64ORQ_110(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -27556,6 +28892,7 @@ func rewriteValueAMD64_OpAMD64ORQ_110(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (BSWAPL <v.Type> (MOVLloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLQconst {
 			break
@@ -27576,6 +28913,7 @@ func rewriteValueAMD64_OpAMD64ORQ_110(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -27594,6 +28932,7 @@ func rewriteValueAMD64_OpAMD64ORQ_110(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -27623,6 +28962,7 @@ func rewriteValueAMD64_OpAMD64ORQ_110(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (BSWAPL <v.Type> (MOVLloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLQconst {
 			break
@@ -27643,6 +28983,7 @@ func rewriteValueAMD64_OpAMD64ORQ_110(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -27661,6 +29002,7 @@ func rewriteValueAMD64_OpAMD64ORQ_110(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -27697,6 +29039,7 @@ func rewriteValueAMD64_OpAMD64ORQ_120(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (BSWAPL <v.Type> (MOVLloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLQconst {
 			break
@@ -27717,6 +29060,7 @@ func rewriteValueAMD64_OpAMD64ORQ_120(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -27735,6 +29079,7 @@ func rewriteValueAMD64_OpAMD64ORQ_120(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -27764,6 +29109,7 @@ func rewriteValueAMD64_OpAMD64ORQ_120(v *Value) bool {
 	// cond: i1 == i0+4   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (BSWAPQ <v.Type> (MOVQloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		r1 := v.Args[0]
 		if r1.Op != OpAMD64BSWAPL {
 			break
@@ -27774,6 +29120,7 @@ func rewriteValueAMD64_OpAMD64ORQ_120(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -27796,6 +29143,7 @@ func rewriteValueAMD64_OpAMD64ORQ_120(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -27825,6 +29173,7 @@ func rewriteValueAMD64_OpAMD64ORQ_120(v *Value) bool {
 	// cond: i1 == i0+4   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (BSWAPQ <v.Type> (MOVQloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		r1 := v.Args[0]
 		if r1.Op != OpAMD64BSWAPL {
 			break
@@ -27835,6 +29184,7 @@ func rewriteValueAMD64_OpAMD64ORQ_120(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -27857,6 +29207,7 @@ func rewriteValueAMD64_OpAMD64ORQ_120(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -27886,6 +29237,7 @@ func rewriteValueAMD64_OpAMD64ORQ_120(v *Value) bool {
 	// cond: i1 == i0+4   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (BSWAPQ <v.Type> (MOVQloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		r1 := v.Args[0]
 		if r1.Op != OpAMD64BSWAPL {
 			break
@@ -27896,6 +29248,7 @@ func rewriteValueAMD64_OpAMD64ORQ_120(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -27918,6 +29271,7 @@ func rewriteValueAMD64_OpAMD64ORQ_120(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -27947,6 +29301,7 @@ func rewriteValueAMD64_OpAMD64ORQ_120(v *Value) bool {
 	// cond: i1 == i0+4   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (BSWAPQ <v.Type> (MOVQloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		r1 := v.Args[0]
 		if r1.Op != OpAMD64BSWAPL {
 			break
@@ -27957,6 +29312,7 @@ func rewriteValueAMD64_OpAMD64ORQ_120(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -27979,6 +29335,7 @@ func rewriteValueAMD64_OpAMD64ORQ_120(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -28008,6 +29365,7 @@ func rewriteValueAMD64_OpAMD64ORQ_120(v *Value) bool {
 	// cond: i1 == i0+4   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (BSWAPQ <v.Type> (MOVQloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLQconst {
 			break
@@ -28025,6 +29383,7 @@ func rewriteValueAMD64_OpAMD64ORQ_120(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -28040,6 +29399,7 @@ func rewriteValueAMD64_OpAMD64ORQ_120(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -28069,6 +29429,7 @@ func rewriteValueAMD64_OpAMD64ORQ_120(v *Value) bool {
 	// cond: i1 == i0+4   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (BSWAPQ <v.Type> (MOVQloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLQconst {
 			break
@@ -28086,6 +29447,7 @@ func rewriteValueAMD64_OpAMD64ORQ_120(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -28101,6 +29463,7 @@ func rewriteValueAMD64_OpAMD64ORQ_120(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -28130,6 +29493,7 @@ func rewriteValueAMD64_OpAMD64ORQ_120(v *Value) bool {
 	// cond: i1 == i0+4   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (BSWAPQ <v.Type> (MOVQloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLQconst {
 			break
@@ -28147,6 +29511,7 @@ func rewriteValueAMD64_OpAMD64ORQ_120(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -28162,6 +29527,7 @@ func rewriteValueAMD64_OpAMD64ORQ_120(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -28191,6 +29557,7 @@ func rewriteValueAMD64_OpAMD64ORQ_120(v *Value) bool {
 	// cond: i1 == i0+4   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (BSWAPQ <v.Type> (MOVQloadidx1 [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpAMD64SHLQconst {
 			break
@@ -28208,6 +29575,7 @@ func rewriteValueAMD64_OpAMD64ORQ_120(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -28223,6 +29591,7 @@ func rewriteValueAMD64_OpAMD64ORQ_120(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -28252,6 +29621,7 @@ func rewriteValueAMD64_OpAMD64ORQ_120(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -28263,6 +29633,7 @@ func rewriteValueAMD64_OpAMD64ORQ_120(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -28270,6 +29641,7 @@ func rewriteValueAMD64_OpAMD64ORQ_120(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -28283,6 +29655,7 @@ func rewriteValueAMD64_OpAMD64ORQ_120(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -28327,6 +29700,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -28338,6 +29712,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -28345,6 +29720,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -28358,6 +29734,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -28395,6 +29772,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -28406,6 +29784,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -28413,6 +29792,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -28426,6 +29806,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -28463,6 +29844,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -28474,6 +29856,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -28481,6 +29864,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -28494,6 +29878,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -28531,6 +29916,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -28542,6 +29928,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -28549,6 +29936,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpAMD64SHLQconst {
@@ -28563,6 +29951,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -28599,6 +29988,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -28610,6 +30000,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -28617,6 +30008,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpAMD64SHLQconst {
@@ -28631,6 +30023,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -28667,6 +30060,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -28678,6 +30072,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -28685,6 +30080,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpAMD64SHLQconst {
@@ -28699,6 +30095,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -28735,6 +30132,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -28746,6 +30144,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -28753,6 +30152,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpAMD64SHLQconst {
@@ -28767,6 +30167,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -28803,10 +30204,12 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -28818,6 +30221,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -28835,6 +30239,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -28871,10 +30276,12 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -28886,6 +30293,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -28903,6 +30311,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -28939,10 +30348,12 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpAMD64SHLQconst {
@@ -28955,6 +30366,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -28971,6 +30383,7 @@ func rewriteValueAMD64_OpAMD64ORQ_130(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -29014,10 +30427,12 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpAMD64SHLQconst {
@@ -29030,6 +30445,7 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -29046,6 +30462,7 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -29082,10 +30499,12 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -29097,6 +30516,7 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -29114,6 +30534,7 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -29150,10 +30571,12 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -29165,6 +30588,7 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -29182,6 +30606,7 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -29218,10 +30643,12 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpAMD64SHLQconst {
@@ -29234,6 +30661,7 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -29250,6 +30678,7 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -29286,10 +30715,12 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (ROLWconst <typ.UInt16> [8] (MOVWloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpAMD64SHLQconst {
@@ -29302,6 +30733,7 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -29318,6 +30750,7 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -29354,6 +30787,7 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (BSWAPL <typ.UInt32> (MOVLloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -29372,6 +30806,7 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -29379,6 +30814,7 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -29399,6 +30835,7 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -29435,6 +30872,7 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (BSWAPL <typ.UInt32> (MOVLloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -29453,6 +30891,7 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -29460,6 +30899,7 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -29480,6 +30920,7 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -29516,6 +30957,7 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (BSWAPL <typ.UInt32> (MOVLloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -29534,6 +30976,7 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -29541,6 +30984,7 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -29561,6 +31005,7 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -29597,6 +31042,7 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (BSWAPL <typ.UInt32> (MOVLloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -29615,6 +31061,7 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -29622,6 +31069,7 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -29642,6 +31090,7 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -29678,6 +31127,7 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (BSWAPL <typ.UInt32> (MOVLloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -29696,6 +31146,7 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -29703,6 +31154,7 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpAMD64SHLQconst {
@@ -29724,6 +31176,7 @@ func rewriteValueAMD64_OpAMD64ORQ_140(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -29766,6 +31219,7 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (BSWAPL <typ.UInt32> (MOVLloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -29784,6 +31238,7 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -29791,6 +31246,7 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpAMD64SHLQconst {
@@ -29812,6 +31268,7 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -29847,6 +31304,7 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (BSWAPL <typ.UInt32> (MOVLloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -29865,6 +31323,7 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -29872,6 +31331,7 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpAMD64SHLQconst {
@@ -29893,6 +31353,7 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -29928,6 +31389,7 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (BSWAPL <typ.UInt32> (MOVLloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpAMD64SHLQconst {
 			break
@@ -29946,6 +31408,7 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -29953,6 +31416,7 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpAMD64SHLQconst {
@@ -29974,6 +31438,7 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -30009,10 +31474,12 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (BSWAPL <typ.UInt32> (MOVLloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -30031,6 +31498,7 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -30055,6 +31523,7 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -30090,10 +31559,12 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (BSWAPL <typ.UInt32> (MOVLloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -30112,6 +31583,7 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -30136,6 +31608,7 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -30171,10 +31644,12 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (BSWAPL <typ.UInt32> (MOVLloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpAMD64SHLQconst {
@@ -30194,6 +31669,7 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -30217,6 +31693,7 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -30252,10 +31729,12 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (BSWAPL <typ.UInt32> (MOVLloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpAMD64SHLQconst {
@@ -30275,6 +31754,7 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -30298,6 +31778,7 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -30333,10 +31814,12 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (BSWAPL <typ.UInt32> (MOVLloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -30355,6 +31838,7 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -30379,6 +31863,7 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -30414,10 +31899,12 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (BSWAPL <typ.UInt32> (MOVLloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpAMD64SHLQconst {
 			break
@@ -30436,6 +31923,7 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -30460,6 +31948,7 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -30495,10 +31984,12 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (BSWAPL <typ.UInt32> (MOVLloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpAMD64SHLQconst {
@@ -30518,6 +32009,7 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -30541,6 +32033,7 @@ func rewriteValueAMD64_OpAMD64ORQ_150(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -30583,10 +32076,12 @@ func rewriteValueAMD64_OpAMD64ORQ_160(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORQ <v.Type> (SHLQconst <v.Type> [j1] (BSWAPL <typ.UInt32> (MOVLloadidx1 [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpAMD64ORQ {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpAMD64SHLQconst {
@@ -30606,6 +32101,7 @@ func rewriteValueAMD64_OpAMD64ORQ_160(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -30629,6 +32125,7 @@ func rewriteValueAMD64_OpAMD64ORQ_160(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -30664,6 +32161,7 @@ func rewriteValueAMD64_OpAMD64ORQ_160(v *Value) bool {
 	// cond: canMergeLoad(v, l, x) && clobber(l)
 	// result: (ORQmem x [off] {sym} ptr mem)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		l := v.Args[1]
 		if l.Op != OpAMD64MOVQload {
@@ -30671,6 +32169,7 @@ func rewriteValueAMD64_OpAMD64ORQ_160(v *Value) bool {
 		}
 		off := l.AuxInt
 		sym := l.Aux
+		_ = l.Args[1]
 		ptr := l.Args[0]
 		mem := l.Args[1]
 		if !(canMergeLoad(v, l, x) && clobber(l)) {
@@ -30688,12 +32187,14 @@ func rewriteValueAMD64_OpAMD64ORQ_160(v *Value) bool {
 	// cond: canMergeLoad(v, l, x) && clobber(l)
 	// result: (ORQmem x [off] {sym} ptr mem)
 	for {
+		_ = v.Args[1]
 		l := v.Args[0]
 		if l.Op != OpAMD64MOVQload {
 			break
 		}
 		off := l.AuxInt
 		sym := l.Aux
+		_ = l.Args[1]
 		ptr := l.Args[0]
 		mem := l.Args[1]
 		x := v.Args[1]
@@ -30756,6 +32257,7 @@ func rewriteValueAMD64_OpAMD64ROLB_0(v *Value) bool {
 	// cond:
 	// result: (RORB x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGQ {
@@ -30771,6 +32273,7 @@ func rewriteValueAMD64_OpAMD64ROLB_0(v *Value) bool {
 	// cond:
 	// result: (RORB x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGL {
@@ -30786,6 +32289,7 @@ func rewriteValueAMD64_OpAMD64ROLB_0(v *Value) bool {
 	// cond:
 	// result: (ROLBconst [c&7 ] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVQconst {
@@ -30801,6 +32305,7 @@ func rewriteValueAMD64_OpAMD64ROLB_0(v *Value) bool {
 	// cond:
 	// result: (ROLBconst [c&7 ] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -30851,6 +32356,7 @@ func rewriteValueAMD64_OpAMD64ROLL_0(v *Value) bool {
 	// cond:
 	// result: (RORL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGQ {
@@ -30866,6 +32372,7 @@ func rewriteValueAMD64_OpAMD64ROLL_0(v *Value) bool {
 	// cond:
 	// result: (RORL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGL {
@@ -30881,6 +32388,7 @@ func rewriteValueAMD64_OpAMD64ROLL_0(v *Value) bool {
 	// cond:
 	// result: (ROLLconst [c&31] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVQconst {
@@ -30896,6 +32404,7 @@ func rewriteValueAMD64_OpAMD64ROLL_0(v *Value) bool {
 	// cond:
 	// result: (ROLLconst [c&31] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -30946,6 +32455,7 @@ func rewriteValueAMD64_OpAMD64ROLQ_0(v *Value) bool {
 	// cond:
 	// result: (RORQ x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGQ {
@@ -30961,6 +32471,7 @@ func rewriteValueAMD64_OpAMD64ROLQ_0(v *Value) bool {
 	// cond:
 	// result: (RORQ x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGL {
@@ -30976,6 +32487,7 @@ func rewriteValueAMD64_OpAMD64ROLQ_0(v *Value) bool {
 	// cond:
 	// result: (ROLQconst [c&63] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVQconst {
@@ -30991,6 +32503,7 @@ func rewriteValueAMD64_OpAMD64ROLQ_0(v *Value) bool {
 	// cond:
 	// result: (ROLQconst [c&63] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -31041,6 +32554,7 @@ func rewriteValueAMD64_OpAMD64ROLW_0(v *Value) bool {
 	// cond:
 	// result: (RORW x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGQ {
@@ -31056,6 +32570,7 @@ func rewriteValueAMD64_OpAMD64ROLW_0(v *Value) bool {
 	// cond:
 	// result: (RORW x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGL {
@@ -31071,6 +32586,7 @@ func rewriteValueAMD64_OpAMD64ROLW_0(v *Value) bool {
 	// cond:
 	// result: (ROLWconst [c&15] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVQconst {
@@ -31086,6 +32602,7 @@ func rewriteValueAMD64_OpAMD64ROLW_0(v *Value) bool {
 	// cond:
 	// result: (ROLWconst [c&15] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -31136,6 +32653,7 @@ func rewriteValueAMD64_OpAMD64RORB_0(v *Value) bool {
 	// cond:
 	// result: (ROLB x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGQ {
@@ -31151,6 +32669,7 @@ func rewriteValueAMD64_OpAMD64RORB_0(v *Value) bool {
 	// cond:
 	// result: (ROLB x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGL {
@@ -31166,6 +32685,7 @@ func rewriteValueAMD64_OpAMD64RORB_0(v *Value) bool {
 	// cond:
 	// result: (ROLBconst [(-c)&7 ] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVQconst {
@@ -31181,6 +32701,7 @@ func rewriteValueAMD64_OpAMD64RORB_0(v *Value) bool {
 	// cond:
 	// result: (ROLBconst [(-c)&7 ] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -31199,6 +32720,7 @@ func rewriteValueAMD64_OpAMD64RORL_0(v *Value) bool {
 	// cond:
 	// result: (ROLL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGQ {
@@ -31214,6 +32736,7 @@ func rewriteValueAMD64_OpAMD64RORL_0(v *Value) bool {
 	// cond:
 	// result: (ROLL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGL {
@@ -31229,6 +32752,7 @@ func rewriteValueAMD64_OpAMD64RORL_0(v *Value) bool {
 	// cond:
 	// result: (ROLLconst [(-c)&31] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVQconst {
@@ -31244,6 +32768,7 @@ func rewriteValueAMD64_OpAMD64RORL_0(v *Value) bool {
 	// cond:
 	// result: (ROLLconst [(-c)&31] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -31262,6 +32787,7 @@ func rewriteValueAMD64_OpAMD64RORQ_0(v *Value) bool {
 	// cond:
 	// result: (ROLQ x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGQ {
@@ -31277,6 +32803,7 @@ func rewriteValueAMD64_OpAMD64RORQ_0(v *Value) bool {
 	// cond:
 	// result: (ROLQ x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGL {
@@ -31292,6 +32819,7 @@ func rewriteValueAMD64_OpAMD64RORQ_0(v *Value) bool {
 	// cond:
 	// result: (ROLQconst [(-c)&63] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVQconst {
@@ -31307,6 +32835,7 @@ func rewriteValueAMD64_OpAMD64RORQ_0(v *Value) bool {
 	// cond:
 	// result: (ROLQconst [(-c)&63] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -31325,6 +32854,7 @@ func rewriteValueAMD64_OpAMD64RORW_0(v *Value) bool {
 	// cond:
 	// result: (ROLW x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGQ {
@@ -31340,6 +32870,7 @@ func rewriteValueAMD64_OpAMD64RORW_0(v *Value) bool {
 	// cond:
 	// result: (ROLW x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGL {
@@ -31355,6 +32886,7 @@ func rewriteValueAMD64_OpAMD64RORW_0(v *Value) bool {
 	// cond:
 	// result: (ROLWconst [(-c)&15] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVQconst {
@@ -31370,6 +32902,7 @@ func rewriteValueAMD64_OpAMD64RORW_0(v *Value) bool {
 	// cond:
 	// result: (ROLWconst [(-c)&15] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -31388,6 +32921,7 @@ func rewriteValueAMD64_OpAMD64SARB_0(v *Value) bool {
 	// cond:
 	// result: (SARBconst [min(c&31,7)] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVQconst {
@@ -31403,6 +32937,7 @@ func rewriteValueAMD64_OpAMD64SARB_0(v *Value) bool {
 	// cond:
 	// result: (SARBconst [min(c&31,7)] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -31453,6 +32988,7 @@ func rewriteValueAMD64_OpAMD64SARL_0(v *Value) bool {
 	// cond:
 	// result: (SARLconst [c&31] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVQconst {
@@ -31468,6 +33004,7 @@ func rewriteValueAMD64_OpAMD64SARL_0(v *Value) bool {
 	// cond:
 	// result: (SARLconst [c&31] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -31483,6 +33020,7 @@ func rewriteValueAMD64_OpAMD64SARL_0(v *Value) bool {
 	// cond: c & 31 == 0
 	// result: (SARL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -31502,6 +33040,7 @@ func rewriteValueAMD64_OpAMD64SARL_0(v *Value) bool {
 	// cond: c & 31 == 0
 	// result: (SARL x (NEGQ <t> y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGQ {
@@ -31528,6 +33067,7 @@ func rewriteValueAMD64_OpAMD64SARL_0(v *Value) bool {
 	// cond: c & 31 == 31
 	// result: (SARL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ANDQconst {
@@ -31547,6 +33087,7 @@ func rewriteValueAMD64_OpAMD64SARL_0(v *Value) bool {
 	// cond: c & 31 == 31
 	// result: (SARL x (NEGQ <t> y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGQ {
@@ -31573,6 +33114,7 @@ func rewriteValueAMD64_OpAMD64SARL_0(v *Value) bool {
 	// cond: c & 31 == 0
 	// result: (SARL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDLconst {
@@ -31592,6 +33134,7 @@ func rewriteValueAMD64_OpAMD64SARL_0(v *Value) bool {
 	// cond: c & 31 == 0
 	// result: (SARL x (NEGL <t> y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGL {
@@ -31618,6 +33161,7 @@ func rewriteValueAMD64_OpAMD64SARL_0(v *Value) bool {
 	// cond: c & 31 == 31
 	// result: (SARL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ANDLconst {
@@ -31637,6 +33181,7 @@ func rewriteValueAMD64_OpAMD64SARL_0(v *Value) bool {
 	// cond: c & 31 == 31
 	// result: (SARL x (NEGL <t> y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGL {
@@ -31698,6 +33243,7 @@ func rewriteValueAMD64_OpAMD64SARQ_0(v *Value) bool {
 	// cond:
 	// result: (SARQconst [c&63] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVQconst {
@@ -31713,6 +33259,7 @@ func rewriteValueAMD64_OpAMD64SARQ_0(v *Value) bool {
 	// cond:
 	// result: (SARQconst [c&63] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -31728,6 +33275,7 @@ func rewriteValueAMD64_OpAMD64SARQ_0(v *Value) bool {
 	// cond: c & 63 == 0
 	// result: (SARQ x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -31747,6 +33295,7 @@ func rewriteValueAMD64_OpAMD64SARQ_0(v *Value) bool {
 	// cond: c & 63 == 0
 	// result: (SARQ x (NEGQ <t> y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGQ {
@@ -31773,6 +33322,7 @@ func rewriteValueAMD64_OpAMD64SARQ_0(v *Value) bool {
 	// cond: c & 63 == 63
 	// result: (SARQ x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ANDQconst {
@@ -31792,6 +33342,7 @@ func rewriteValueAMD64_OpAMD64SARQ_0(v *Value) bool {
 	// cond: c & 63 == 63
 	// result: (SARQ x (NEGQ <t> y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGQ {
@@ -31818,6 +33369,7 @@ func rewriteValueAMD64_OpAMD64SARQ_0(v *Value) bool {
 	// cond: c & 63 == 0
 	// result: (SARQ x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDLconst {
@@ -31837,6 +33389,7 @@ func rewriteValueAMD64_OpAMD64SARQ_0(v *Value) bool {
 	// cond: c & 63 == 0
 	// result: (SARQ x (NEGL <t> y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGL {
@@ -31863,6 +33416,7 @@ func rewriteValueAMD64_OpAMD64SARQ_0(v *Value) bool {
 	// cond: c & 63 == 63
 	// result: (SARQ x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ANDLconst {
@@ -31882,6 +33436,7 @@ func rewriteValueAMD64_OpAMD64SARQ_0(v *Value) bool {
 	// cond: c & 63 == 63
 	// result: (SARQ x (NEGL <t> y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGL {
@@ -31941,6 +33496,7 @@ func rewriteValueAMD64_OpAMD64SARW_0(v *Value) bool {
 	// cond:
 	// result: (SARWconst [min(c&31,15)] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVQconst {
@@ -31956,6 +33512,7 @@ func rewriteValueAMD64_OpAMD64SARW_0(v *Value) bool {
 	// cond:
 	// result: (SARWconst [min(c&31,15)] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -32442,10 +33999,12 @@ func rewriteValueAMD64_OpAMD64SETEQ_0(v *Value) bool {
 		if v_0.Op != OpAMD64TESTL {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_0_0.Args[1]
 		v_0_0_0 := v_0_0.Args[0]
 		if v_0_0_0.Op != OpAMD64MOVLconst {
 			break
@@ -32473,11 +34032,13 @@ func rewriteValueAMD64_OpAMD64SETEQ_0(v *Value) bool {
 		if v_0.Op != OpAMD64TESTL {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_0_1.Args[1]
 		v_0_1_0 := v_0_1.Args[0]
 		if v_0_1_0.Op != OpAMD64MOVLconst {
 			break
@@ -32504,10 +34065,12 @@ func rewriteValueAMD64_OpAMD64SETEQ_0(v *Value) bool {
 		if v_0.Op != OpAMD64TESTQ {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpAMD64SHLQ {
 			break
 		}
+		_ = v_0_0.Args[1]
 		v_0_0_0 := v_0_0.Args[0]
 		if v_0_0_0.Op != OpAMD64MOVQconst {
 			break
@@ -32535,11 +34098,13 @@ func rewriteValueAMD64_OpAMD64SETEQ_0(v *Value) bool {
 		if v_0.Op != OpAMD64TESTQ {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpAMD64SHLQ {
 			break
 		}
+		_ = v_0_1.Args[1]
 		v_0_1_0 := v_0_1.Args[0]
 		if v_0_1_0.Op != OpAMD64MOVQconst {
 			break
@@ -32606,6 +34171,7 @@ func rewriteValueAMD64_OpAMD64SETEQ_0(v *Value) bool {
 		if v_0.Op != OpAMD64TESTQ {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpAMD64MOVQconst {
 			break
@@ -32630,6 +34196,7 @@ func rewriteValueAMD64_OpAMD64SETEQ_0(v *Value) bool {
 		if v_0.Op != OpAMD64TESTQ {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpAMD64MOVQconst {
@@ -33041,10 +34608,12 @@ func rewriteValueAMD64_OpAMD64SETNE_0(v *Value) bool {
 		if v_0.Op != OpAMD64TESTL {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_0_0.Args[1]
 		v_0_0_0 := v_0_0.Args[0]
 		if v_0_0_0.Op != OpAMD64MOVLconst {
 			break
@@ -33072,11 +34641,13 @@ func rewriteValueAMD64_OpAMD64SETNE_0(v *Value) bool {
 		if v_0.Op != OpAMD64TESTL {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpAMD64SHLL {
 			break
 		}
+		_ = v_0_1.Args[1]
 		v_0_1_0 := v_0_1.Args[0]
 		if v_0_1_0.Op != OpAMD64MOVLconst {
 			break
@@ -33103,10 +34674,12 @@ func rewriteValueAMD64_OpAMD64SETNE_0(v *Value) bool {
 		if v_0.Op != OpAMD64TESTQ {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpAMD64SHLQ {
 			break
 		}
+		_ = v_0_0.Args[1]
 		v_0_0_0 := v_0_0.Args[0]
 		if v_0_0_0.Op != OpAMD64MOVQconst {
 			break
@@ -33134,11 +34707,13 @@ func rewriteValueAMD64_OpAMD64SETNE_0(v *Value) bool {
 		if v_0.Op != OpAMD64TESTQ {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpAMD64SHLQ {
 			break
 		}
+		_ = v_0_1.Args[1]
 		v_0_1_0 := v_0_1.Args[0]
 		if v_0_1_0.Op != OpAMD64MOVQconst {
 			break
@@ -33205,6 +34780,7 @@ func rewriteValueAMD64_OpAMD64SETNE_0(v *Value) bool {
 		if v_0.Op != OpAMD64TESTQ {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpAMD64MOVQconst {
 			break
@@ -33229,6 +34805,7 @@ func rewriteValueAMD64_OpAMD64SETNE_0(v *Value) bool {
 		if v_0.Op != OpAMD64TESTQ {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpAMD64MOVQconst {
@@ -33330,6 +34907,7 @@ func rewriteValueAMD64_OpAMD64SHLL_0(v *Value) bool {
 	// cond:
 	// result: (SHLLconst [c&31] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVQconst {
@@ -33345,6 +34923,7 @@ func rewriteValueAMD64_OpAMD64SHLL_0(v *Value) bool {
 	// cond:
 	// result: (SHLLconst [c&31] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -33360,6 +34939,7 @@ func rewriteValueAMD64_OpAMD64SHLL_0(v *Value) bool {
 	// cond: c & 31 == 0
 	// result: (SHLL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -33379,6 +34959,7 @@ func rewriteValueAMD64_OpAMD64SHLL_0(v *Value) bool {
 	// cond: c & 31 == 0
 	// result: (SHLL x (NEGQ <t> y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGQ {
@@ -33405,6 +34986,7 @@ func rewriteValueAMD64_OpAMD64SHLL_0(v *Value) bool {
 	// cond: c & 31 == 31
 	// result: (SHLL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ANDQconst {
@@ -33424,6 +35006,7 @@ func rewriteValueAMD64_OpAMD64SHLL_0(v *Value) bool {
 	// cond: c & 31 == 31
 	// result: (SHLL x (NEGQ <t> y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGQ {
@@ -33450,6 +35033,7 @@ func rewriteValueAMD64_OpAMD64SHLL_0(v *Value) bool {
 	// cond: c & 31 == 0
 	// result: (SHLL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDLconst {
@@ -33469,6 +35053,7 @@ func rewriteValueAMD64_OpAMD64SHLL_0(v *Value) bool {
 	// cond: c & 31 == 0
 	// result: (SHLL x (NEGL <t> y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGL {
@@ -33495,6 +35080,7 @@ func rewriteValueAMD64_OpAMD64SHLL_0(v *Value) bool {
 	// cond: c & 31 == 31
 	// result: (SHLL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ANDLconst {
@@ -33514,6 +35100,7 @@ func rewriteValueAMD64_OpAMD64SHLL_0(v *Value) bool {
 	// cond: c & 31 == 31
 	// result: (SHLL x (NEGL <t> y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGL {
@@ -33561,6 +35148,7 @@ func rewriteValueAMD64_OpAMD64SHLQ_0(v *Value) bool {
 	// cond:
 	// result: (SHLQconst [c&63] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVQconst {
@@ -33576,6 +35164,7 @@ func rewriteValueAMD64_OpAMD64SHLQ_0(v *Value) bool {
 	// cond:
 	// result: (SHLQconst [c&63] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -33591,6 +35180,7 @@ func rewriteValueAMD64_OpAMD64SHLQ_0(v *Value) bool {
 	// cond: c & 63 == 0
 	// result: (SHLQ x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -33610,6 +35200,7 @@ func rewriteValueAMD64_OpAMD64SHLQ_0(v *Value) bool {
 	// cond: c & 63 == 0
 	// result: (SHLQ x (NEGQ <t> y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGQ {
@@ -33636,6 +35227,7 @@ func rewriteValueAMD64_OpAMD64SHLQ_0(v *Value) bool {
 	// cond: c & 63 == 63
 	// result: (SHLQ x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ANDQconst {
@@ -33655,6 +35247,7 @@ func rewriteValueAMD64_OpAMD64SHLQ_0(v *Value) bool {
 	// cond: c & 63 == 63
 	// result: (SHLQ x (NEGQ <t> y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGQ {
@@ -33681,6 +35274,7 @@ func rewriteValueAMD64_OpAMD64SHLQ_0(v *Value) bool {
 	// cond: c & 63 == 0
 	// result: (SHLQ x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDLconst {
@@ -33700,6 +35294,7 @@ func rewriteValueAMD64_OpAMD64SHLQ_0(v *Value) bool {
 	// cond: c & 63 == 0
 	// result: (SHLQ x (NEGL <t> y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGL {
@@ -33726,6 +35321,7 @@ func rewriteValueAMD64_OpAMD64SHLQ_0(v *Value) bool {
 	// cond: c & 63 == 63
 	// result: (SHLQ x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ANDLconst {
@@ -33745,6 +35341,7 @@ func rewriteValueAMD64_OpAMD64SHLQ_0(v *Value) bool {
 	// cond: c & 63 == 63
 	// result: (SHLQ x (NEGL <t> y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGL {
@@ -33790,6 +35387,7 @@ func rewriteValueAMD64_OpAMD64SHRB_0(v *Value) bool {
 	// cond: c&31 < 8
 	// result: (SHRBconst [c&31] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVQconst {
@@ -33808,6 +35406,7 @@ func rewriteValueAMD64_OpAMD64SHRB_0(v *Value) bool {
 	// cond: c&31 < 8
 	// result: (SHRBconst [c&31] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -33826,6 +35425,7 @@ func rewriteValueAMD64_OpAMD64SHRB_0(v *Value) bool {
 	// cond: c&31 >= 8
 	// result: (MOVLconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVQconst {
 			break
@@ -33842,6 +35442,7 @@ func rewriteValueAMD64_OpAMD64SHRB_0(v *Value) bool {
 	// cond: c&31 >= 8
 	// result: (MOVLconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
 			break
@@ -33879,6 +35480,7 @@ func rewriteValueAMD64_OpAMD64SHRL_0(v *Value) bool {
 	// cond:
 	// result: (SHRLconst [c&31] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVQconst {
@@ -33894,6 +35496,7 @@ func rewriteValueAMD64_OpAMD64SHRL_0(v *Value) bool {
 	// cond:
 	// result: (SHRLconst [c&31] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -33909,6 +35512,7 @@ func rewriteValueAMD64_OpAMD64SHRL_0(v *Value) bool {
 	// cond: c & 31 == 0
 	// result: (SHRL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -33928,6 +35532,7 @@ func rewriteValueAMD64_OpAMD64SHRL_0(v *Value) bool {
 	// cond: c & 31 == 0
 	// result: (SHRL x (NEGQ <t> y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGQ {
@@ -33954,6 +35559,7 @@ func rewriteValueAMD64_OpAMD64SHRL_0(v *Value) bool {
 	// cond: c & 31 == 31
 	// result: (SHRL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ANDQconst {
@@ -33973,6 +35579,7 @@ func rewriteValueAMD64_OpAMD64SHRL_0(v *Value) bool {
 	// cond: c & 31 == 31
 	// result: (SHRL x (NEGQ <t> y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGQ {
@@ -33999,6 +35606,7 @@ func rewriteValueAMD64_OpAMD64SHRL_0(v *Value) bool {
 	// cond: c & 31 == 0
 	// result: (SHRL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDLconst {
@@ -34018,6 +35626,7 @@ func rewriteValueAMD64_OpAMD64SHRL_0(v *Value) bool {
 	// cond: c & 31 == 0
 	// result: (SHRL x (NEGL <t> y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGL {
@@ -34044,6 +35653,7 @@ func rewriteValueAMD64_OpAMD64SHRL_0(v *Value) bool {
 	// cond: c & 31 == 31
 	// result: (SHRL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ANDLconst {
@@ -34063,6 +35673,7 @@ func rewriteValueAMD64_OpAMD64SHRL_0(v *Value) bool {
 	// cond: c & 31 == 31
 	// result: (SHRL x (NEGL <t> y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGL {
@@ -34110,6 +35721,7 @@ func rewriteValueAMD64_OpAMD64SHRQ_0(v *Value) bool {
 	// cond:
 	// result: (SHRQconst [c&63] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVQconst {
@@ -34125,6 +35737,7 @@ func rewriteValueAMD64_OpAMD64SHRQ_0(v *Value) bool {
 	// cond:
 	// result: (SHRQconst [c&63] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -34140,6 +35753,7 @@ func rewriteValueAMD64_OpAMD64SHRQ_0(v *Value) bool {
 	// cond: c & 63 == 0
 	// result: (SHRQ x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -34159,6 +35773,7 @@ func rewriteValueAMD64_OpAMD64SHRQ_0(v *Value) bool {
 	// cond: c & 63 == 0
 	// result: (SHRQ x (NEGQ <t> y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGQ {
@@ -34185,6 +35800,7 @@ func rewriteValueAMD64_OpAMD64SHRQ_0(v *Value) bool {
 	// cond: c & 63 == 63
 	// result: (SHRQ x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ANDQconst {
@@ -34204,6 +35820,7 @@ func rewriteValueAMD64_OpAMD64SHRQ_0(v *Value) bool {
 	// cond: c & 63 == 63
 	// result: (SHRQ x (NEGQ <t> y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGQ {
@@ -34230,6 +35847,7 @@ func rewriteValueAMD64_OpAMD64SHRQ_0(v *Value) bool {
 	// cond: c & 63 == 0
 	// result: (SHRQ x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDLconst {
@@ -34249,6 +35867,7 @@ func rewriteValueAMD64_OpAMD64SHRQ_0(v *Value) bool {
 	// cond: c & 63 == 0
 	// result: (SHRQ x (NEGL <t> y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGL {
@@ -34275,6 +35894,7 @@ func rewriteValueAMD64_OpAMD64SHRQ_0(v *Value) bool {
 	// cond: c & 63 == 63
 	// result: (SHRQ x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ANDLconst {
@@ -34294,6 +35914,7 @@ func rewriteValueAMD64_OpAMD64SHRQ_0(v *Value) bool {
 	// cond: c & 63 == 63
 	// result: (SHRQ x (NEGL <t> y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64NEGL {
@@ -34339,6 +35960,7 @@ func rewriteValueAMD64_OpAMD64SHRW_0(v *Value) bool {
 	// cond: c&31 < 16
 	// result: (SHRWconst [c&31] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVQconst {
@@ -34357,6 +35979,7 @@ func rewriteValueAMD64_OpAMD64SHRW_0(v *Value) bool {
 	// cond: c&31 < 16
 	// result: (SHRWconst [c&31] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -34375,6 +35998,7 @@ func rewriteValueAMD64_OpAMD64SHRW_0(v *Value) bool {
 	// cond: c&31 >= 16
 	// result: (MOVLconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVQconst {
 			break
@@ -34391,6 +36015,7 @@ func rewriteValueAMD64_OpAMD64SHRW_0(v *Value) bool {
 	// cond: c&31 >= 16
 	// result: (MOVLconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
 			break
@@ -34428,6 +36053,7 @@ func rewriteValueAMD64_OpAMD64SUBL_0(v *Value) bool {
 	// cond:
 	// result: (SUBLconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -34443,6 +36069,7 @@ func rewriteValueAMD64_OpAMD64SUBL_0(v *Value) bool {
 	// cond:
 	// result: (NEGL (SUBLconst <v.Type> x [c]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64MOVLconst {
 			break
@@ -34460,6 +36087,7 @@ func rewriteValueAMD64_OpAMD64SUBL_0(v *Value) bool {
 	// cond:
 	// result: (MOVLconst [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -34472,6 +36100,7 @@ func rewriteValueAMD64_OpAMD64SUBL_0(v *Value) bool {
 	// cond: canMergeLoad(v, l, x) && clobber(l)
 	// result: (SUBLmem x [off] {sym} ptr mem)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		l := v.Args[1]
 		if l.Op != OpAMD64MOVLload {
@@ -34479,6 +36108,7 @@ func rewriteValueAMD64_OpAMD64SUBL_0(v *Value) bool {
 		}
 		off := l.AuxInt
 		sym := l.Aux
+		_ = l.Args[1]
 		ptr := l.Args[0]
 		mem := l.Args[1]
 		if !(canMergeLoad(v, l, x) && clobber(l)) {
@@ -34528,6 +36158,7 @@ func rewriteValueAMD64_OpAMD64SUBQ_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (SUBQconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVQconst {
@@ -34546,6 +36177,7 @@ func rewriteValueAMD64_OpAMD64SUBQ_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (NEGQ (SUBQconst <v.Type> x [c]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64MOVQconst {
 			break
@@ -34566,6 +36198,7 @@ func rewriteValueAMD64_OpAMD64SUBQ_0(v *Value) bool {
 	// cond:
 	// result: (MOVQconst [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -34578,6 +36211,7 @@ func rewriteValueAMD64_OpAMD64SUBQ_0(v *Value) bool {
 	// cond: canMergeLoad(v, l, x) && clobber(l)
 	// result: (SUBQmem x [off] {sym} ptr mem)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		l := v.Args[1]
 		if l.Op != OpAMD64MOVQload {
@@ -34585,6 +36219,7 @@ func rewriteValueAMD64_OpAMD64SUBQ_0(v *Value) bool {
 		}
 		off := l.AuxInt
 		sym := l.Aux
+		_ = l.Args[1]
 		ptr := l.Args[0]
 		mem := l.Args[1]
 		if !(canMergeLoad(v, l, x) && clobber(l)) {
@@ -34668,6 +36303,7 @@ func rewriteValueAMD64_OpAMD64SUBSD_0(v *Value) bool {
 	// cond: canMergeLoad(v, l, x) && clobber(l)
 	// result: (SUBSDmem x [off] {sym} ptr mem)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		l := v.Args[1]
 		if l.Op != OpAMD64MOVSDload {
@@ -34675,6 +36311,7 @@ func rewriteValueAMD64_OpAMD64SUBSD_0(v *Value) bool {
 		}
 		off := l.AuxInt
 		sym := l.Aux
+		_ = l.Args[1]
 		ptr := l.Args[0]
 		mem := l.Args[1]
 		if !(canMergeLoad(v, l, x) && clobber(l)) {
@@ -34695,6 +36332,7 @@ func rewriteValueAMD64_OpAMD64SUBSS_0(v *Value) bool {
 	// cond: canMergeLoad(v, l, x) && clobber(l)
 	// result: (SUBSSmem x [off] {sym} ptr mem)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		l := v.Args[1]
 		if l.Op != OpAMD64MOVSSload {
@@ -34702,6 +36340,7 @@ func rewriteValueAMD64_OpAMD64SUBSS_0(v *Value) bool {
 		}
 		off := l.AuxInt
 		sym := l.Aux
+		_ = l.Args[1]
 		ptr := l.Args[0]
 		mem := l.Args[1]
 		if !(canMergeLoad(v, l, x) && clobber(l)) {
@@ -34722,6 +36361,7 @@ func rewriteValueAMD64_OpAMD64TESTB_0(v *Value) bool {
 	// cond:
 	// result: (TESTBconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64MOVLconst {
 			break
@@ -34737,6 +36377,7 @@ func rewriteValueAMD64_OpAMD64TESTB_0(v *Value) bool {
 	// cond:
 	// result: (TESTBconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -34755,6 +36396,7 @@ func rewriteValueAMD64_OpAMD64TESTL_0(v *Value) bool {
 	// cond:
 	// result: (TESTLconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64MOVLconst {
 			break
@@ -34770,6 +36412,7 @@ func rewriteValueAMD64_OpAMD64TESTL_0(v *Value) bool {
 	// cond:
 	// result: (TESTLconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -34788,6 +36431,7 @@ func rewriteValueAMD64_OpAMD64TESTQ_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (TESTQconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64MOVQconst {
 			break
@@ -34806,6 +36450,7 @@ func rewriteValueAMD64_OpAMD64TESTQ_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (TESTQconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVQconst {
@@ -34827,6 +36472,7 @@ func rewriteValueAMD64_OpAMD64TESTW_0(v *Value) bool {
 	// cond:
 	// result: (TESTWconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64MOVLconst {
 			break
@@ -34842,6 +36488,7 @@ func rewriteValueAMD64_OpAMD64TESTW_0(v *Value) bool {
 	// cond:
 	// result: (TESTWconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -34862,6 +36509,7 @@ func rewriteValueAMD64_OpAMD64XADDLlock_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		val := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -34890,6 +36538,7 @@ func rewriteValueAMD64_OpAMD64XADDQlock_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		val := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -34918,6 +36567,7 @@ func rewriteValueAMD64_OpAMD64XCHGL_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		val := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -34943,6 +36593,7 @@ func rewriteValueAMD64_OpAMD64XCHGL_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		val := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64LEAQ {
@@ -34972,6 +36623,7 @@ func rewriteValueAMD64_OpAMD64XCHGQ_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		val := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64ADDQconst {
@@ -34997,6 +36649,7 @@ func rewriteValueAMD64_OpAMD64XCHGQ_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		val := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64LEAQ {
@@ -35024,6 +36677,7 @@ func rewriteValueAMD64_OpAMD64XORL_0(v *Value) bool {
 	// cond:
 	// result: (XORLconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVLconst {
@@ -35039,6 +36693,7 @@ func rewriteValueAMD64_OpAMD64XORL_0(v *Value) bool {
 	// cond:
 	// result: (XORLconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64MOVLconst {
 			break
@@ -35054,6 +36709,7 @@ func rewriteValueAMD64_OpAMD64XORL_0(v *Value) bool {
 	// cond: d==32-c
 	// result: (ROLLconst x [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLLconst {
 			break
@@ -35080,6 +36736,7 @@ func rewriteValueAMD64_OpAMD64XORL_0(v *Value) bool {
 	// cond: d==32-c
 	// result: (ROLLconst x [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHRLconst {
 			break
@@ -35107,6 +36764,7 @@ func rewriteValueAMD64_OpAMD64XORL_0(v *Value) bool {
 	// result: (ROLWconst x [c])
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLLconst {
 			break
@@ -35134,6 +36792,7 @@ func rewriteValueAMD64_OpAMD64XORL_0(v *Value) bool {
 	// result: (ROLWconst x [c])
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHRWconst {
 			break
@@ -35161,6 +36820,7 @@ func rewriteValueAMD64_OpAMD64XORL_0(v *Value) bool {
 	// result: (ROLBconst x [c])
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLLconst {
 			break
@@ -35188,6 +36848,7 @@ func rewriteValueAMD64_OpAMD64XORL_0(v *Value) bool {
 	// result: (ROLBconst x [c])
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHRBconst {
 			break
@@ -35214,6 +36875,7 @@ func rewriteValueAMD64_OpAMD64XORL_0(v *Value) bool {
 	// cond:
 	// result: (MOVLconst [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -35226,6 +36888,7 @@ func rewriteValueAMD64_OpAMD64XORL_0(v *Value) bool {
 	// cond: canMergeLoad(v, l, x) && clobber(l)
 	// result: (XORLmem x [off] {sym} ptr mem)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		l := v.Args[1]
 		if l.Op != OpAMD64MOVLload {
@@ -35233,6 +36896,7 @@ func rewriteValueAMD64_OpAMD64XORL_0(v *Value) bool {
 		}
 		off := l.AuxInt
 		sym := l.Aux
+		_ = l.Args[1]
 		ptr := l.Args[0]
 		mem := l.Args[1]
 		if !(canMergeLoad(v, l, x) && clobber(l)) {
@@ -35253,12 +36917,14 @@ func rewriteValueAMD64_OpAMD64XORL_10(v *Value) bool {
 	// cond: canMergeLoad(v, l, x) && clobber(l)
 	// result: (XORLmem x [off] {sym} ptr mem)
 	for {
+		_ = v.Args[1]
 		l := v.Args[0]
 		if l.Op != OpAMD64MOVLload {
 			break
 		}
 		off := l.AuxInt
 		sym := l.Aux
+		_ = l.Args[1]
 		ptr := l.Args[0]
 		mem := l.Args[1]
 		x := v.Args[1]
@@ -35490,6 +37156,7 @@ func rewriteValueAMD64_OpAMD64XORQ_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (XORQconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAMD64MOVQconst {
@@ -35508,6 +37175,7 @@ func rewriteValueAMD64_OpAMD64XORQ_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (XORQconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64MOVQconst {
 			break
@@ -35526,6 +37194,7 @@ func rewriteValueAMD64_OpAMD64XORQ_0(v *Value) bool {
 	// cond: d==64-c
 	// result: (ROLQconst x [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHLQconst {
 			break
@@ -35552,6 +37221,7 @@ func rewriteValueAMD64_OpAMD64XORQ_0(v *Value) bool {
 	// cond: d==64-c
 	// result: (ROLQconst x [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAMD64SHRQconst {
 			break
@@ -35578,6 +37248,7 @@ func rewriteValueAMD64_OpAMD64XORQ_0(v *Value) bool {
 	// cond:
 	// result: (MOVQconst [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -35590,6 +37261,7 @@ func rewriteValueAMD64_OpAMD64XORQ_0(v *Value) bool {
 	// cond: canMergeLoad(v, l, x) && clobber(l)
 	// result: (XORQmem x [off] {sym} ptr mem)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		l := v.Args[1]
 		if l.Op != OpAMD64MOVQload {
@@ -35597,6 +37269,7 @@ func rewriteValueAMD64_OpAMD64XORQ_0(v *Value) bool {
 		}
 		off := l.AuxInt
 		sym := l.Aux
+		_ = l.Args[1]
 		ptr := l.Args[0]
 		mem := l.Args[1]
 		if !(canMergeLoad(v, l, x) && clobber(l)) {
@@ -35614,12 +37287,14 @@ func rewriteValueAMD64_OpAMD64XORQ_0(v *Value) bool {
 	// cond: canMergeLoad(v, l, x) && clobber(l)
 	// result: (XORQmem x [off] {sym} ptr mem)
 	for {
+		_ = v.Args[1]
 		l := v.Args[0]
 		if l.Op != OpAMD64MOVQload {
 			break
 		}
 		off := l.AuxInt
 		sym := l.Aux
+		_ = l.Args[1]
 		ptr := l.Args[0]
 		mem := l.Args[1]
 		x := v.Args[1]
@@ -35687,6 +37362,7 @@ func rewriteValueAMD64_OpAdd16_0(v *Value) bool {
 	// cond:
 	// result: (ADDL  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ADDL)
@@ -35700,6 +37376,7 @@ func rewriteValueAMD64_OpAdd32_0(v *Value) bool {
 	// cond:
 	// result: (ADDL  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ADDL)
@@ -35713,6 +37390,7 @@ func rewriteValueAMD64_OpAdd32F_0(v *Value) bool {
 	// cond:
 	// result: (ADDSS x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ADDSS)
@@ -35726,6 +37404,7 @@ func rewriteValueAMD64_OpAdd64_0(v *Value) bool {
 	// cond:
 	// result: (ADDQ  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ADDQ)
@@ -35739,6 +37418,7 @@ func rewriteValueAMD64_OpAdd64F_0(v *Value) bool {
 	// cond:
 	// result: (ADDSD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ADDSD)
@@ -35752,6 +37432,7 @@ func rewriteValueAMD64_OpAdd8_0(v *Value) bool {
 	// cond:
 	// result: (ADDL  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ADDL)
@@ -35769,6 +37450,7 @@ func rewriteValueAMD64_OpAddPtr_0(v *Value) bool {
 	// cond: config.PtrSize == 8
 	// result: (ADDQ x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		if !(config.PtrSize == 8) {
@@ -35783,6 +37465,7 @@ func rewriteValueAMD64_OpAddPtr_0(v *Value) bool {
 	// cond: config.PtrSize == 4
 	// result: (ADDL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		if !(config.PtrSize == 4) {
@@ -35835,6 +37518,7 @@ func rewriteValueAMD64_OpAnd16_0(v *Value) bool {
 	// cond:
 	// result: (ANDL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDL)
@@ -35848,6 +37532,7 @@ func rewriteValueAMD64_OpAnd32_0(v *Value) bool {
 	// cond:
 	// result: (ANDL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDL)
@@ -35861,6 +37546,7 @@ func rewriteValueAMD64_OpAnd64_0(v *Value) bool {
 	// cond:
 	// result: (ANDQ x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDQ)
@@ -35874,6 +37560,7 @@ func rewriteValueAMD64_OpAnd8_0(v *Value) bool {
 	// cond:
 	// result: (ANDL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDL)
@@ -35887,6 +37574,7 @@ func rewriteValueAMD64_OpAndB_0(v *Value) bool {
 	// cond:
 	// result: (ANDL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDL)
@@ -35904,6 +37592,7 @@ func rewriteValueAMD64_OpAtomicAdd32_0(v *Value) bool {
 	// cond:
 	// result: (AddTupleFirst32 val (XADDLlock val ptr mem))
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -35926,6 +37615,7 @@ func rewriteValueAMD64_OpAtomicAdd64_0(v *Value) bool {
 	// cond:
 	// result: (AddTupleFirst64 val (XADDQlock val ptr mem))
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -35944,6 +37634,7 @@ func rewriteValueAMD64_OpAtomicAnd8_0(v *Value) bool {
 	// cond:
 	// result: (ANDBlock ptr val mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -35959,6 +37650,7 @@ func rewriteValueAMD64_OpAtomicCompareAndSwap32_0(v *Value) bool {
 	// cond:
 	// result: (CMPXCHGLlock ptr old new_ mem)
 	for {
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		old := v.Args[1]
 		new_ := v.Args[2]
@@ -35976,6 +37668,7 @@ func rewriteValueAMD64_OpAtomicCompareAndSwap64_0(v *Value) bool {
 	// cond:
 	// result: (CMPXCHGQlock ptr old new_ mem)
 	for {
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		old := v.Args[1]
 		new_ := v.Args[2]
@@ -35993,6 +37686,7 @@ func rewriteValueAMD64_OpAtomicExchange32_0(v *Value) bool {
 	// cond:
 	// result: (XCHGL val ptr mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -36008,6 +37702,7 @@ func rewriteValueAMD64_OpAtomicExchange64_0(v *Value) bool {
 	// cond:
 	// result: (XCHGQ val ptr mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -36023,6 +37718,7 @@ func rewriteValueAMD64_OpAtomicLoad32_0(v *Value) bool {
 	// cond:
 	// result: (MOVLatomicload ptr mem)
 	for {
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpAMD64MOVLatomicload)
@@ -36036,6 +37732,7 @@ func rewriteValueAMD64_OpAtomicLoad64_0(v *Value) bool {
 	// cond:
 	// result: (MOVQatomicload ptr mem)
 	for {
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpAMD64MOVQatomicload)
@@ -36053,6 +37750,7 @@ func rewriteValueAMD64_OpAtomicLoadPtr_0(v *Value) bool {
 	// cond: config.PtrSize == 8
 	// result: (MOVQatomicload ptr mem)
 	for {
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(config.PtrSize == 8) {
@@ -36067,6 +37765,7 @@ func rewriteValueAMD64_OpAtomicLoadPtr_0(v *Value) bool {
 	// cond: config.PtrSize == 4
 	// result: (MOVLatomicload ptr mem)
 	for {
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(config.PtrSize == 4) {
@@ -36084,6 +37783,7 @@ func rewriteValueAMD64_OpAtomicOr8_0(v *Value) bool {
 	// cond:
 	// result: (ORBlock ptr val mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -36103,6 +37803,7 @@ func rewriteValueAMD64_OpAtomicStore32_0(v *Value) bool {
 	// cond:
 	// result: (Select1 (XCHGL <types.NewTuple(typ.UInt32,types.TypeMem)> val ptr mem))
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -36124,6 +37825,7 @@ func rewriteValueAMD64_OpAtomicStore64_0(v *Value) bool {
 	// cond:
 	// result: (Select1 (XCHGQ <types.NewTuple(typ.UInt64,types.TypeMem)> val ptr mem))
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -36147,6 +37849,7 @@ func rewriteValueAMD64_OpAtomicStorePtrNoWB_0(v *Value) bool {
 	// cond: config.PtrSize == 8
 	// result: (Select1 (XCHGQ <types.NewTuple(typ.BytePtr,types.TypeMem)> val ptr mem))
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -36165,6 +37868,7 @@ func rewriteValueAMD64_OpAtomicStorePtrNoWB_0(v *Value) bool {
 	// cond: config.PtrSize == 4
 	// result: (Select1 (XCHGL <types.NewTuple(typ.BytePtr,types.TypeMem)> val ptr mem))
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -36186,6 +37890,7 @@ func rewriteValueAMD64_OpAvg64u_0(v *Value) bool {
 	// cond:
 	// result: (AVGQU x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64AVGQU)
@@ -36270,6 +37975,7 @@ func rewriteValueAMD64_OpClosureCall_0(v *Value) bool {
 	// result: (CALLclosure [argwid] entry closure mem)
 	for {
 		argwid := v.AuxInt
+		_ = v.Args[2]
 		entry := v.Args[0]
 		closure := v.Args[1]
 		mem := v.Args[2]
@@ -36441,6 +38147,7 @@ func rewriteValueAMD64_OpConvert_0(v *Value) bool {
 	// result: (MOVQconvert <t> x mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		mem := v.Args[1]
 		if !(config.PtrSize == 8) {
@@ -36457,6 +38164,7 @@ func rewriteValueAMD64_OpConvert_0(v *Value) bool {
 	// result: (MOVLconvert <t> x mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		mem := v.Args[1]
 		if !(config.PtrSize == 4) {
@@ -36635,6 +38343,7 @@ func rewriteValueAMD64_OpDiv128u_0(v *Value) bool {
 	// cond:
 	// result: (DIVQU2 xhi xlo y)
 	for {
+		_ = v.Args[2]
 		xhi := v.Args[0]
 		xlo := v.Args[1]
 		y := v.Args[2]
@@ -36654,6 +38363,7 @@ func rewriteValueAMD64_OpDiv16_0(v *Value) bool {
 	// cond:
 	// result: (Select0 (DIVW  x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect0)
@@ -36673,6 +38383,7 @@ func rewriteValueAMD64_OpDiv16u_0(v *Value) bool {
 	// cond:
 	// result: (Select0 (DIVWU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect0)
@@ -36692,6 +38403,7 @@ func rewriteValueAMD64_OpDiv32_0(v *Value) bool {
 	// cond:
 	// result: (Select0 (DIVL  x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect0)
@@ -36707,6 +38419,7 @@ func rewriteValueAMD64_OpDiv32F_0(v *Value) bool {
 	// cond:
 	// result: (DIVSS x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64DIVSS)
@@ -36724,6 +38437,7 @@ func rewriteValueAMD64_OpDiv32u_0(v *Value) bool {
 	// cond:
 	// result: (Select0 (DIVLU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect0)
@@ -36743,6 +38457,7 @@ func rewriteValueAMD64_OpDiv64_0(v *Value) bool {
 	// cond:
 	// result: (Select0 (DIVQ  x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect0)
@@ -36758,6 +38473,7 @@ func rewriteValueAMD64_OpDiv64F_0(v *Value) bool {
 	// cond:
 	// result: (DIVSD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64DIVSD)
@@ -36775,6 +38491,7 @@ func rewriteValueAMD64_OpDiv64u_0(v *Value) bool {
 	// cond:
 	// result: (Select0 (DIVQU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect0)
@@ -36794,6 +38511,7 @@ func rewriteValueAMD64_OpDiv8_0(v *Value) bool {
 	// cond:
 	// result: (Select0 (DIVW  (SignExt8to16 x) (SignExt8to16 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect0)
@@ -36817,6 +38535,7 @@ func rewriteValueAMD64_OpDiv8u_0(v *Value) bool {
 	// cond:
 	// result: (Select0 (DIVWU (ZeroExt8to16 x) (ZeroExt8to16 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect0)
@@ -36838,6 +38557,7 @@ func rewriteValueAMD64_OpEq16_0(v *Value) bool {
 	// cond:
 	// result: (SETEQ (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETEQ)
@@ -36855,6 +38575,7 @@ func rewriteValueAMD64_OpEq32_0(v *Value) bool {
 	// cond:
 	// result: (SETEQ (CMPL x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETEQ)
@@ -36872,6 +38593,7 @@ func rewriteValueAMD64_OpEq32F_0(v *Value) bool {
 	// cond:
 	// result: (SETEQF (UCOMISS x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETEQF)
@@ -36889,6 +38611,7 @@ func rewriteValueAMD64_OpEq64_0(v *Value) bool {
 	// cond:
 	// result: (SETEQ (CMPQ x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETEQ)
@@ -36906,6 +38629,7 @@ func rewriteValueAMD64_OpEq64F_0(v *Value) bool {
 	// cond:
 	// result: (SETEQF (UCOMISD x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETEQF)
@@ -36923,6 +38647,7 @@ func rewriteValueAMD64_OpEq8_0(v *Value) bool {
 	// cond:
 	// result: (SETEQ (CMPB x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETEQ)
@@ -36940,6 +38665,7 @@ func rewriteValueAMD64_OpEqB_0(v *Value) bool {
 	// cond:
 	// result: (SETEQ (CMPB x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETEQ)
@@ -36959,6 +38685,7 @@ func rewriteValueAMD64_OpEqPtr_0(v *Value) bool {
 	// cond: config.PtrSize == 8
 	// result: (SETEQ (CMPQ x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		if !(config.PtrSize == 8) {
@@ -36975,6 +38702,7 @@ func rewriteValueAMD64_OpEqPtr_0(v *Value) bool {
 	// cond: config.PtrSize == 4
 	// result: (SETEQ (CMPL x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		if !(config.PtrSize == 4) {
@@ -36996,6 +38724,7 @@ func rewriteValueAMD64_OpGeq16_0(v *Value) bool {
 	// cond:
 	// result: (SETGE (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETGE)
@@ -37013,6 +38742,7 @@ func rewriteValueAMD64_OpGeq16U_0(v *Value) bool {
 	// cond:
 	// result: (SETAE (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETAE)
@@ -37030,6 +38760,7 @@ func rewriteValueAMD64_OpGeq32_0(v *Value) bool {
 	// cond:
 	// result: (SETGE (CMPL x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETGE)
@@ -37047,6 +38778,7 @@ func rewriteValueAMD64_OpGeq32F_0(v *Value) bool {
 	// cond:
 	// result: (SETGEF (UCOMISS x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETGEF)
@@ -37064,6 +38796,7 @@ func rewriteValueAMD64_OpGeq32U_0(v *Value) bool {
 	// cond:
 	// result: (SETAE (CMPL x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETAE)
@@ -37081,6 +38814,7 @@ func rewriteValueAMD64_OpGeq64_0(v *Value) bool {
 	// cond:
 	// result: (SETGE (CMPQ x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETGE)
@@ -37098,6 +38832,7 @@ func rewriteValueAMD64_OpGeq64F_0(v *Value) bool {
 	// cond:
 	// result: (SETGEF (UCOMISD x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETGEF)
@@ -37115,6 +38850,7 @@ func rewriteValueAMD64_OpGeq64U_0(v *Value) bool {
 	// cond:
 	// result: (SETAE (CMPQ x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETAE)
@@ -37132,6 +38868,7 @@ func rewriteValueAMD64_OpGeq8_0(v *Value) bool {
 	// cond:
 	// result: (SETGE (CMPB x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETGE)
@@ -37149,6 +38886,7 @@ func rewriteValueAMD64_OpGeq8U_0(v *Value) bool {
 	// cond:
 	// result: (SETAE (CMPB x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETAE)
@@ -37186,6 +38924,7 @@ func rewriteValueAMD64_OpGreater16_0(v *Value) bool {
 	// cond:
 	// result: (SETG (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETG)
@@ -37203,6 +38942,7 @@ func rewriteValueAMD64_OpGreater16U_0(v *Value) bool {
 	// cond:
 	// result: (SETA (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETA)
@@ -37220,6 +38960,7 @@ func rewriteValueAMD64_OpGreater32_0(v *Value) bool {
 	// cond:
 	// result: (SETG (CMPL x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETG)
@@ -37237,6 +38978,7 @@ func rewriteValueAMD64_OpGreater32F_0(v *Value) bool {
 	// cond:
 	// result: (SETGF (UCOMISS x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETGF)
@@ -37254,6 +38996,7 @@ func rewriteValueAMD64_OpGreater32U_0(v *Value) bool {
 	// cond:
 	// result: (SETA (CMPL x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETA)
@@ -37271,6 +39014,7 @@ func rewriteValueAMD64_OpGreater64_0(v *Value) bool {
 	// cond:
 	// result: (SETG (CMPQ x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETG)
@@ -37288,6 +39032,7 @@ func rewriteValueAMD64_OpGreater64F_0(v *Value) bool {
 	// cond:
 	// result: (SETGF (UCOMISD x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETGF)
@@ -37305,6 +39050,7 @@ func rewriteValueAMD64_OpGreater64U_0(v *Value) bool {
 	// cond:
 	// result: (SETA (CMPQ x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETA)
@@ -37322,6 +39068,7 @@ func rewriteValueAMD64_OpGreater8_0(v *Value) bool {
 	// cond:
 	// result: (SETG (CMPB x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETG)
@@ -37339,6 +39086,7 @@ func rewriteValueAMD64_OpGreater8U_0(v *Value) bool {
 	// cond:
 	// result: (SETA (CMPB x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETA)
@@ -37354,6 +39102,7 @@ func rewriteValueAMD64_OpHmul32_0(v *Value) bool {
 	// cond:
 	// result: (HMULL  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64HMULL)
@@ -37367,6 +39116,7 @@ func rewriteValueAMD64_OpHmul32u_0(v *Value) bool {
 	// cond:
 	// result: (HMULLU x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64HMULLU)
@@ -37380,6 +39130,7 @@ func rewriteValueAMD64_OpHmul64_0(v *Value) bool {
 	// cond:
 	// result: (HMULQ  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64HMULQ)
@@ -37393,6 +39144,7 @@ func rewriteValueAMD64_OpHmul64u_0(v *Value) bool {
 	// cond:
 	// result: (HMULQU x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64HMULQU)
@@ -37419,6 +39171,7 @@ func rewriteValueAMD64_OpInterCall_0(v *Value) bool {
 	// result: (CALLinter [argwid] entry mem)
 	for {
 		argwid := v.AuxInt
+		_ = v.Args[1]
 		entry := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpAMD64CALLinter)
@@ -37435,6 +39188,7 @@ func rewriteValueAMD64_OpIsInBounds_0(v *Value) bool {
 	// cond:
 	// result: (SETB (CMPQ idx len))
 	for {
+		_ = v.Args[1]
 		idx := v.Args[0]
 		len := v.Args[1]
 		v.reset(OpAMD64SETB)
@@ -37489,6 +39243,7 @@ func rewriteValueAMD64_OpIsSliceInBounds_0(v *Value) bool {
 	// cond:
 	// result: (SETBE (CMPQ idx len))
 	for {
+		_ = v.Args[1]
 		idx := v.Args[0]
 		len := v.Args[1]
 		v.reset(OpAMD64SETBE)
@@ -37506,6 +39261,7 @@ func rewriteValueAMD64_OpLeq16_0(v *Value) bool {
 	// cond:
 	// result: (SETLE (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETLE)
@@ -37523,6 +39279,7 @@ func rewriteValueAMD64_OpLeq16U_0(v *Value) bool {
 	// cond:
 	// result: (SETBE (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETBE)
@@ -37540,6 +39297,7 @@ func rewriteValueAMD64_OpLeq32_0(v *Value) bool {
 	// cond:
 	// result: (SETLE (CMPL x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETLE)
@@ -37557,6 +39315,7 @@ func rewriteValueAMD64_OpLeq32F_0(v *Value) bool {
 	// cond:
 	// result: (SETGEF (UCOMISS y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETGEF)
@@ -37574,6 +39333,7 @@ func rewriteValueAMD64_OpLeq32U_0(v *Value) bool {
 	// cond:
 	// result: (SETBE (CMPL x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETBE)
@@ -37591,6 +39351,7 @@ func rewriteValueAMD64_OpLeq64_0(v *Value) bool {
 	// cond:
 	// result: (SETLE (CMPQ x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETLE)
@@ -37608,6 +39369,7 @@ func rewriteValueAMD64_OpLeq64F_0(v *Value) bool {
 	// cond:
 	// result: (SETGEF (UCOMISD y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETGEF)
@@ -37625,6 +39387,7 @@ func rewriteValueAMD64_OpLeq64U_0(v *Value) bool {
 	// cond:
 	// result: (SETBE (CMPQ x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETBE)
@@ -37642,6 +39405,7 @@ func rewriteValueAMD64_OpLeq8_0(v *Value) bool {
 	// cond:
 	// result: (SETLE (CMPB x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETLE)
@@ -37659,6 +39423,7 @@ func rewriteValueAMD64_OpLeq8U_0(v *Value) bool {
 	// cond:
 	// result: (SETBE (CMPB x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETBE)
@@ -37676,6 +39441,7 @@ func rewriteValueAMD64_OpLess16_0(v *Value) bool {
 	// cond:
 	// result: (SETL (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETL)
@@ -37693,6 +39459,7 @@ func rewriteValueAMD64_OpLess16U_0(v *Value) bool {
 	// cond:
 	// result: (SETB (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETB)
@@ -37710,6 +39477,7 @@ func rewriteValueAMD64_OpLess32_0(v *Value) bool {
 	// cond:
 	// result: (SETL (CMPL x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETL)
@@ -37727,6 +39495,7 @@ func rewriteValueAMD64_OpLess32F_0(v *Value) bool {
 	// cond:
 	// result: (SETGF (UCOMISS y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETGF)
@@ -37744,6 +39513,7 @@ func rewriteValueAMD64_OpLess32U_0(v *Value) bool {
 	// cond:
 	// result: (SETB (CMPL x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETB)
@@ -37761,6 +39531,7 @@ func rewriteValueAMD64_OpLess64_0(v *Value) bool {
 	// cond:
 	// result: (SETL (CMPQ x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETL)
@@ -37778,6 +39549,7 @@ func rewriteValueAMD64_OpLess64F_0(v *Value) bool {
 	// cond:
 	// result: (SETGF (UCOMISD y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETGF)
@@ -37795,6 +39567,7 @@ func rewriteValueAMD64_OpLess64U_0(v *Value) bool {
 	// cond:
 	// result: (SETB (CMPQ x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETB)
@@ -37812,6 +39585,7 @@ func rewriteValueAMD64_OpLess8_0(v *Value) bool {
 	// cond:
 	// result: (SETL (CMPB x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETL)
@@ -37829,6 +39603,7 @@ func rewriteValueAMD64_OpLess8U_0(v *Value) bool {
 	// cond:
 	// result: (SETB (CMPB x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETB)
@@ -37849,6 +39624,7 @@ func rewriteValueAMD64_OpLoad_0(v *Value) bool {
 	// result: (MOVQload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is64BitInt(t) || isPtr(t) && config.PtrSize == 8) {
@@ -37864,6 +39640,7 @@ func rewriteValueAMD64_OpLoad_0(v *Value) bool {
 	// result: (MOVLload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is32BitInt(t) || isPtr(t) && config.PtrSize == 4) {
@@ -37879,6 +39656,7 @@ func rewriteValueAMD64_OpLoad_0(v *Value) bool {
 	// result: (MOVWload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is16BitInt(t)) {
@@ -37894,6 +39672,7 @@ func rewriteValueAMD64_OpLoad_0(v *Value) bool {
 	// result: (MOVBload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.IsBoolean() || is8BitInt(t)) {
@@ -37909,6 +39688,7 @@ func rewriteValueAMD64_OpLoad_0(v *Value) bool {
 	// result: (MOVSSload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is32BitFloat(t)) {
@@ -37924,6 +39704,7 @@ func rewriteValueAMD64_OpLoad_0(v *Value) bool {
 	// result: (MOVSDload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is64BitFloat(t)) {
@@ -37944,6 +39725,7 @@ func rewriteValueAMD64_OpLsh16x16_0(v *Value) bool {
 	// result: (ANDL (SHLL <t> x y) (SBBLcarrymask <t> (CMPWconst y [32])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDL)
@@ -37968,6 +39750,7 @@ func rewriteValueAMD64_OpLsh16x32_0(v *Value) bool {
 	// result: (ANDL (SHLL <t> x y) (SBBLcarrymask <t> (CMPLconst y [32])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDL)
@@ -37992,6 +39775,7 @@ func rewriteValueAMD64_OpLsh16x64_0(v *Value) bool {
 	// result: (ANDL (SHLL <t> x y) (SBBLcarrymask <t> (CMPQconst y [32])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDL)
@@ -38016,6 +39800,7 @@ func rewriteValueAMD64_OpLsh16x8_0(v *Value) bool {
 	// result: (ANDL (SHLL <t> x y) (SBBLcarrymask <t> (CMPBconst y [32])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDL)
@@ -38040,6 +39825,7 @@ func rewriteValueAMD64_OpLsh32x16_0(v *Value) bool {
 	// result: (ANDL (SHLL <t> x y) (SBBLcarrymask <t> (CMPWconst y [32])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDL)
@@ -38064,6 +39850,7 @@ func rewriteValueAMD64_OpLsh32x32_0(v *Value) bool {
 	// result: (ANDL (SHLL <t> x y) (SBBLcarrymask <t> (CMPLconst y [32])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDL)
@@ -38088,6 +39875,7 @@ func rewriteValueAMD64_OpLsh32x64_0(v *Value) bool {
 	// result: (ANDL (SHLL <t> x y) (SBBLcarrymask <t> (CMPQconst y [32])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDL)
@@ -38112,6 +39900,7 @@ func rewriteValueAMD64_OpLsh32x8_0(v *Value) bool {
 	// result: (ANDL (SHLL <t> x y) (SBBLcarrymask <t> (CMPBconst y [32])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDL)
@@ -38136,6 +39925,7 @@ func rewriteValueAMD64_OpLsh64x16_0(v *Value) bool {
 	// result: (ANDQ (SHLQ <t> x y) (SBBQcarrymask <t> (CMPWconst y [64])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDQ)
@@ -38160,6 +39950,7 @@ func rewriteValueAMD64_OpLsh64x32_0(v *Value) bool {
 	// result: (ANDQ (SHLQ <t> x y) (SBBQcarrymask <t> (CMPLconst y [64])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDQ)
@@ -38184,6 +39975,7 @@ func rewriteValueAMD64_OpLsh64x64_0(v *Value) bool {
 	// result: (ANDQ (SHLQ <t> x y) (SBBQcarrymask <t> (CMPQconst y [64])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDQ)
@@ -38208,6 +40000,7 @@ func rewriteValueAMD64_OpLsh64x8_0(v *Value) bool {
 	// result: (ANDQ (SHLQ <t> x y) (SBBQcarrymask <t> (CMPBconst y [64])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDQ)
@@ -38232,6 +40025,7 @@ func rewriteValueAMD64_OpLsh8x16_0(v *Value) bool {
 	// result: (ANDL (SHLL <t> x y) (SBBLcarrymask <t> (CMPWconst y [32])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDL)
@@ -38256,6 +40050,7 @@ func rewriteValueAMD64_OpLsh8x32_0(v *Value) bool {
 	// result: (ANDL (SHLL <t> x y) (SBBLcarrymask <t> (CMPLconst y [32])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDL)
@@ -38280,6 +40075,7 @@ func rewriteValueAMD64_OpLsh8x64_0(v *Value) bool {
 	// result: (ANDL (SHLL <t> x y) (SBBLcarrymask <t> (CMPQconst y [32])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDL)
@@ -38304,6 +40100,7 @@ func rewriteValueAMD64_OpLsh8x8_0(v *Value) bool {
 	// result: (ANDL (SHLL <t> x y) (SBBLcarrymask <t> (CMPBconst y [32])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDL)
@@ -38329,6 +40126,7 @@ func rewriteValueAMD64_OpMod16_0(v *Value) bool {
 	// cond:
 	// result: (Select1 (DIVW  x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect1)
@@ -38348,6 +40146,7 @@ func rewriteValueAMD64_OpMod16u_0(v *Value) bool {
 	// cond:
 	// result: (Select1 (DIVWU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect1)
@@ -38367,6 +40166,7 @@ func rewriteValueAMD64_OpMod32_0(v *Value) bool {
 	// cond:
 	// result: (Select1 (DIVL  x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect1)
@@ -38386,6 +40186,7 @@ func rewriteValueAMD64_OpMod32u_0(v *Value) bool {
 	// cond:
 	// result: (Select1 (DIVLU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect1)
@@ -38405,6 +40206,7 @@ func rewriteValueAMD64_OpMod64_0(v *Value) bool {
 	// cond:
 	// result: (Select1 (DIVQ  x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect1)
@@ -38424,6 +40226,7 @@ func rewriteValueAMD64_OpMod64u_0(v *Value) bool {
 	// cond:
 	// result: (Select1 (DIVQU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect1)
@@ -38443,6 +40246,7 @@ func rewriteValueAMD64_OpMod8_0(v *Value) bool {
 	// cond:
 	// result: (Select1 (DIVW  (SignExt8to16 x) (SignExt8to16 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect1)
@@ -38466,6 +40270,7 @@ func rewriteValueAMD64_OpMod8u_0(v *Value) bool {
 	// cond:
 	// result: (Select1 (DIVWU (ZeroExt8to16 x) (ZeroExt8to16 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect1)
@@ -38492,6 +40297,7 @@ func rewriteValueAMD64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 0 {
 			break
 		}
+		_ = v.Args[2]
 		mem := v.Args[2]
 		v.reset(OpCopy)
 		v.Type = mem.Type
@@ -38505,6 +40311,7 @@ func rewriteValueAMD64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 1 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -38524,6 +40331,7 @@ func rewriteValueAMD64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 2 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -38543,6 +40351,7 @@ func rewriteValueAMD64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 4 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -38562,6 +40371,7 @@ func rewriteValueAMD64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 8 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -38581,6 +40391,7 @@ func rewriteValueAMD64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 16 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -38600,6 +40411,7 @@ func rewriteValueAMD64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 3 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -38628,6 +40440,7 @@ func rewriteValueAMD64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 5 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -38656,6 +40469,7 @@ func rewriteValueAMD64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 6 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -38684,6 +40498,7 @@ func rewriteValueAMD64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 7 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -38719,6 +40534,7 @@ func rewriteValueAMD64_OpMove_10(v *Value) bool {
 	// result: (MOVQstore [s-8] dst (MOVQload [s-8] src mem) 		(MOVQstore dst (MOVQload src mem) mem))
 	for {
 		s := v.AuxInt
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -38748,6 +40564,7 @@ func rewriteValueAMD64_OpMove_10(v *Value) bool {
 	// result: (Move [s-s%16] 		(OffPtr <dst.Type> dst [s%16]) 		(OffPtr <src.Type> src [s%16]) 		(MOVQstore dst (MOVQload src mem) mem))
 	for {
 		s := v.AuxInt
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -38779,6 +40596,7 @@ func rewriteValueAMD64_OpMove_10(v *Value) bool {
 	// result: (Move [s-s%16] 		(OffPtr <dst.Type> dst [s%16]) 		(OffPtr <src.Type> src [s%16]) 		(MOVOstore dst (MOVOload src mem) mem))
 	for {
 		s := v.AuxInt
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -38810,6 +40628,7 @@ func rewriteValueAMD64_OpMove_10(v *Value) bool {
 	// result: (DUFFCOPY [14*(64-s/16)] dst src mem)
 	for {
 		s := v.AuxInt
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -38828,6 +40647,7 @@ func rewriteValueAMD64_OpMove_10(v *Value) bool {
 	// result: (REPMOVSQ dst src (MOVQconst [s/8]) mem)
 	for {
 		s := v.AuxInt
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -38850,6 +40670,7 @@ func rewriteValueAMD64_OpMul16_0(v *Value) bool {
 	// cond:
 	// result: (MULL  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64MULL)
@@ -38863,6 +40684,7 @@ func rewriteValueAMD64_OpMul32_0(v *Value) bool {
 	// cond:
 	// result: (MULL  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64MULL)
@@ -38876,6 +40698,7 @@ func rewriteValueAMD64_OpMul32F_0(v *Value) bool {
 	// cond:
 	// result: (MULSS x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64MULSS)
@@ -38889,6 +40712,7 @@ func rewriteValueAMD64_OpMul64_0(v *Value) bool {
 	// cond:
 	// result: (MULQ  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64MULQ)
@@ -38902,6 +40726,7 @@ func rewriteValueAMD64_OpMul64F_0(v *Value) bool {
 	// cond:
 	// result: (MULSD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64MULSD)
@@ -38915,6 +40740,7 @@ func rewriteValueAMD64_OpMul64uhilo_0(v *Value) bool {
 	// cond:
 	// result: (MULQU2 x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64MULQU2)
@@ -38928,6 +40754,7 @@ func rewriteValueAMD64_OpMul8_0(v *Value) bool {
 	// cond:
 	// result: (MULL  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64MULL)
@@ -39023,6 +40850,7 @@ func rewriteValueAMD64_OpNeq16_0(v *Value) bool {
 	// cond:
 	// result: (SETNE (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETNE)
@@ -39040,6 +40868,7 @@ func rewriteValueAMD64_OpNeq32_0(v *Value) bool {
 	// cond:
 	// result: (SETNE (CMPL x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETNE)
@@ -39057,6 +40886,7 @@ func rewriteValueAMD64_OpNeq32F_0(v *Value) bool {
 	// cond:
 	// result: (SETNEF (UCOMISS x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETNEF)
@@ -39074,6 +40904,7 @@ func rewriteValueAMD64_OpNeq64_0(v *Value) bool {
 	// cond:
 	// result: (SETNE (CMPQ x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETNE)
@@ -39091,6 +40922,7 @@ func rewriteValueAMD64_OpNeq64F_0(v *Value) bool {
 	// cond:
 	// result: (SETNEF (UCOMISD x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETNEF)
@@ -39108,6 +40940,7 @@ func rewriteValueAMD64_OpNeq8_0(v *Value) bool {
 	// cond:
 	// result: (SETNE (CMPB x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETNE)
@@ -39125,6 +40958,7 @@ func rewriteValueAMD64_OpNeqB_0(v *Value) bool {
 	// cond:
 	// result: (SETNE (CMPB x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SETNE)
@@ -39144,6 +40978,7 @@ func rewriteValueAMD64_OpNeqPtr_0(v *Value) bool {
 	// cond: config.PtrSize == 8
 	// result: (SETNE (CMPQ x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		if !(config.PtrSize == 8) {
@@ -39160,6 +40995,7 @@ func rewriteValueAMD64_OpNeqPtr_0(v *Value) bool {
 	// cond: config.PtrSize == 4
 	// result: (SETNE (CMPL x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		if !(config.PtrSize == 4) {
@@ -39179,6 +41015,7 @@ func rewriteValueAMD64_OpNilCheck_0(v *Value) bool {
 	// cond:
 	// result: (LoweredNilCheck ptr mem)
 	for {
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpAMD64LoweredNilCheck)
@@ -39257,6 +41094,7 @@ func rewriteValueAMD64_OpOr16_0(v *Value) bool {
 	// cond:
 	// result: (ORL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ORL)
@@ -39270,6 +41108,7 @@ func rewriteValueAMD64_OpOr32_0(v *Value) bool {
 	// cond:
 	// result: (ORL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ORL)
@@ -39283,6 +41122,7 @@ func rewriteValueAMD64_OpOr64_0(v *Value) bool {
 	// cond:
 	// result: (ORQ x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ORQ)
@@ -39296,6 +41136,7 @@ func rewriteValueAMD64_OpOr8_0(v *Value) bool {
 	// cond:
 	// result: (ORL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ORL)
@@ -39309,6 +41150,7 @@ func rewriteValueAMD64_OpOrB_0(v *Value) bool {
 	// cond:
 	// result: (ORL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ORL)
@@ -39405,6 +41247,7 @@ func rewriteValueAMD64_OpRsh16Ux16_0(v *Value) bool {
 	// result: (ANDL (SHRW <t> x y) (SBBLcarrymask <t> (CMPWconst y [16])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDL)
@@ -39429,6 +41272,7 @@ func rewriteValueAMD64_OpRsh16Ux32_0(v *Value) bool {
 	// result: (ANDL (SHRW <t> x y) (SBBLcarrymask <t> (CMPLconst y [16])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDL)
@@ -39453,6 +41297,7 @@ func rewriteValueAMD64_OpRsh16Ux64_0(v *Value) bool {
 	// result: (ANDL (SHRW <t> x y) (SBBLcarrymask <t> (CMPQconst y [16])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDL)
@@ -39477,6 +41322,7 @@ func rewriteValueAMD64_OpRsh16Ux8_0(v *Value) bool {
 	// result: (ANDL (SHRW <t> x y) (SBBLcarrymask <t> (CMPBconst y [16])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDL)
@@ -39501,6 +41347,7 @@ func rewriteValueAMD64_OpRsh16x16_0(v *Value) bool {
 	// result: (SARW <t> x (ORL <y.Type> y (NOTL <y.Type> (SBBLcarrymask <y.Type> (CMPWconst y [16])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SARW)
@@ -39528,6 +41375,7 @@ func rewriteValueAMD64_OpRsh16x32_0(v *Value) bool {
 	// result: (SARW <t> x (ORL <y.Type> y (NOTL <y.Type> (SBBLcarrymask <y.Type> (CMPLconst y [16])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SARW)
@@ -39555,6 +41403,7 @@ func rewriteValueAMD64_OpRsh16x64_0(v *Value) bool {
 	// result: (SARW <t> x (ORQ <y.Type> y (NOTQ <y.Type> (SBBQcarrymask <y.Type> (CMPQconst y [16])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SARW)
@@ -39582,6 +41431,7 @@ func rewriteValueAMD64_OpRsh16x8_0(v *Value) bool {
 	// result: (SARW <t> x (ORL <y.Type> y (NOTL <y.Type> (SBBLcarrymask <y.Type> (CMPBconst y [16])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SARW)
@@ -39609,6 +41459,7 @@ func rewriteValueAMD64_OpRsh32Ux16_0(v *Value) bool {
 	// result: (ANDL (SHRL <t> x y) (SBBLcarrymask <t> (CMPWconst y [32])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDL)
@@ -39633,6 +41484,7 @@ func rewriteValueAMD64_OpRsh32Ux32_0(v *Value) bool {
 	// result: (ANDL (SHRL <t> x y) (SBBLcarrymask <t> (CMPLconst y [32])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDL)
@@ -39657,6 +41509,7 @@ func rewriteValueAMD64_OpRsh32Ux64_0(v *Value) bool {
 	// result: (ANDL (SHRL <t> x y) (SBBLcarrymask <t> (CMPQconst y [32])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDL)
@@ -39681,6 +41534,7 @@ func rewriteValueAMD64_OpRsh32Ux8_0(v *Value) bool {
 	// result: (ANDL (SHRL <t> x y) (SBBLcarrymask <t> (CMPBconst y [32])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDL)
@@ -39705,6 +41559,7 @@ func rewriteValueAMD64_OpRsh32x16_0(v *Value) bool {
 	// result: (SARL <t> x (ORL <y.Type> y (NOTL <y.Type> (SBBLcarrymask <y.Type> (CMPWconst y [32])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SARL)
@@ -39732,6 +41587,7 @@ func rewriteValueAMD64_OpRsh32x32_0(v *Value) bool {
 	// result: (SARL <t> x (ORL <y.Type> y (NOTL <y.Type> (SBBLcarrymask <y.Type> (CMPLconst y [32])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SARL)
@@ -39759,6 +41615,7 @@ func rewriteValueAMD64_OpRsh32x64_0(v *Value) bool {
 	// result: (SARL <t> x (ORQ <y.Type> y (NOTQ <y.Type> (SBBQcarrymask <y.Type> (CMPQconst y [32])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SARL)
@@ -39786,6 +41643,7 @@ func rewriteValueAMD64_OpRsh32x8_0(v *Value) bool {
 	// result: (SARL <t> x (ORL <y.Type> y (NOTL <y.Type> (SBBLcarrymask <y.Type> (CMPBconst y [32])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SARL)
@@ -39813,6 +41671,7 @@ func rewriteValueAMD64_OpRsh64Ux16_0(v *Value) bool {
 	// result: (ANDQ (SHRQ <t> x y) (SBBQcarrymask <t> (CMPWconst y [64])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDQ)
@@ -39837,6 +41696,7 @@ func rewriteValueAMD64_OpRsh64Ux32_0(v *Value) bool {
 	// result: (ANDQ (SHRQ <t> x y) (SBBQcarrymask <t> (CMPLconst y [64])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDQ)
@@ -39861,6 +41721,7 @@ func rewriteValueAMD64_OpRsh64Ux64_0(v *Value) bool {
 	// result: (ANDQ (SHRQ <t> x y) (SBBQcarrymask <t> (CMPQconst y [64])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDQ)
@@ -39885,6 +41746,7 @@ func rewriteValueAMD64_OpRsh64Ux8_0(v *Value) bool {
 	// result: (ANDQ (SHRQ <t> x y) (SBBQcarrymask <t> (CMPBconst y [64])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDQ)
@@ -39909,6 +41771,7 @@ func rewriteValueAMD64_OpRsh64x16_0(v *Value) bool {
 	// result: (SARQ <t> x (ORL <y.Type> y (NOTL <y.Type> (SBBLcarrymask <y.Type> (CMPWconst y [64])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SARQ)
@@ -39936,6 +41799,7 @@ func rewriteValueAMD64_OpRsh64x32_0(v *Value) bool {
 	// result: (SARQ <t> x (ORL <y.Type> y (NOTL <y.Type> (SBBLcarrymask <y.Type> (CMPLconst y [64])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SARQ)
@@ -39963,6 +41827,7 @@ func rewriteValueAMD64_OpRsh64x64_0(v *Value) bool {
 	// result: (SARQ <t> x (ORQ <y.Type> y (NOTQ <y.Type> (SBBQcarrymask <y.Type> (CMPQconst y [64])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SARQ)
@@ -39990,6 +41855,7 @@ func rewriteValueAMD64_OpRsh64x8_0(v *Value) bool {
 	// result: (SARQ <t> x (ORL <y.Type> y (NOTL <y.Type> (SBBLcarrymask <y.Type> (CMPBconst y [64])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SARQ)
@@ -40017,6 +41883,7 @@ func rewriteValueAMD64_OpRsh8Ux16_0(v *Value) bool {
 	// result: (ANDL (SHRB <t> x y) (SBBLcarrymask <t> (CMPWconst y [8])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDL)
@@ -40041,6 +41908,7 @@ func rewriteValueAMD64_OpRsh8Ux32_0(v *Value) bool {
 	// result: (ANDL (SHRB <t> x y) (SBBLcarrymask <t> (CMPLconst y [8])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDL)
@@ -40065,6 +41933,7 @@ func rewriteValueAMD64_OpRsh8Ux64_0(v *Value) bool {
 	// result: (ANDL (SHRB <t> x y) (SBBLcarrymask <t> (CMPQconst y [8])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDL)
@@ -40089,6 +41958,7 @@ func rewriteValueAMD64_OpRsh8Ux8_0(v *Value) bool {
 	// result: (ANDL (SHRB <t> x y) (SBBLcarrymask <t> (CMPBconst y [8])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64ANDL)
@@ -40113,6 +41983,7 @@ func rewriteValueAMD64_OpRsh8x16_0(v *Value) bool {
 	// result: (SARB <t> x (ORL <y.Type> y (NOTL <y.Type> (SBBLcarrymask <y.Type> (CMPWconst y [8])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SARB)
@@ -40140,6 +42011,7 @@ func rewriteValueAMD64_OpRsh8x32_0(v *Value) bool {
 	// result: (SARB <t> x (ORL <y.Type> y (NOTL <y.Type> (SBBLcarrymask <y.Type> (CMPLconst y [8])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SARB)
@@ -40167,6 +42039,7 @@ func rewriteValueAMD64_OpRsh8x64_0(v *Value) bool {
 	// result: (SARB <t> x (ORQ <y.Type> y (NOTQ <y.Type> (SBBQcarrymask <y.Type> (CMPQconst y [8])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SARB)
@@ -40194,6 +42067,7 @@ func rewriteValueAMD64_OpRsh8x8_0(v *Value) bool {
 	// result: (SARB <t> x (ORL <y.Type> y (NOTL <y.Type> (SBBLcarrymask <y.Type> (CMPBconst y [8])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SARB)
@@ -40225,6 +42099,7 @@ func rewriteValueAMD64_OpSelect0_0(v *Value) bool {
 		if v_0.Op != OpAMD64AddTupleFirst32 {
 			break
 		}
+		_ = v_0.Args[1]
 		val := v_0.Args[0]
 		tuple := v_0.Args[1]
 		v.reset(OpAMD64ADDL)
@@ -40243,6 +42118,7 @@ func rewriteValueAMD64_OpSelect0_0(v *Value) bool {
 		if v_0.Op != OpAMD64AddTupleFirst64 {
 			break
 		}
+		_ = v_0.Args[1]
 		val := v_0.Args[0]
 		tuple := v_0.Args[1]
 		v.reset(OpAMD64ADDQ)
@@ -40263,6 +42139,7 @@ func rewriteValueAMD64_OpSelect1_0(v *Value) bool {
 		if v_0.Op != OpAMD64AddTupleFirst32 {
 			break
 		}
+		_ = v_0.Args[1]
 		tuple := v_0.Args[1]
 		v.reset(OpSelect1)
 		v.AddArg(tuple)
@@ -40276,6 +42153,7 @@ func rewriteValueAMD64_OpSelect1_0(v *Value) bool {
 		if v_0.Op != OpAMD64AddTupleFirst64 {
 			break
 		}
+		_ = v_0.Args[1]
 		tuple := v_0.Args[1]
 		v.reset(OpSelect1)
 		v.AddArg(tuple)
@@ -40398,6 +42276,7 @@ func rewriteValueAMD64_OpStore_0(v *Value) bool {
 	// result: (MOVSDstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -40415,6 +42294,7 @@ func rewriteValueAMD64_OpStore_0(v *Value) bool {
 	// result: (MOVSSstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -40432,6 +42312,7 @@ func rewriteValueAMD64_OpStore_0(v *Value) bool {
 	// result: (MOVQstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -40449,6 +42330,7 @@ func rewriteValueAMD64_OpStore_0(v *Value) bool {
 	// result: (MOVLstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -40466,6 +42348,7 @@ func rewriteValueAMD64_OpStore_0(v *Value) bool {
 	// result: (MOVWstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -40483,6 +42366,7 @@ func rewriteValueAMD64_OpStore_0(v *Value) bool {
 	// result: (MOVBstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -40502,6 +42386,7 @@ func rewriteValueAMD64_OpSub16_0(v *Value) bool {
 	// cond:
 	// result: (SUBL  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SUBL)
@@ -40515,6 +42400,7 @@ func rewriteValueAMD64_OpSub32_0(v *Value) bool {
 	// cond:
 	// result: (SUBL  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SUBL)
@@ -40528,6 +42414,7 @@ func rewriteValueAMD64_OpSub32F_0(v *Value) bool {
 	// cond:
 	// result: (SUBSS x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SUBSS)
@@ -40541,6 +42428,7 @@ func rewriteValueAMD64_OpSub64_0(v *Value) bool {
 	// cond:
 	// result: (SUBQ  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SUBQ)
@@ -40554,6 +42442,7 @@ func rewriteValueAMD64_OpSub64F_0(v *Value) bool {
 	// cond:
 	// result: (SUBSD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SUBSD)
@@ -40567,6 +42456,7 @@ func rewriteValueAMD64_OpSub8_0(v *Value) bool {
 	// cond:
 	// result: (SUBL  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64SUBL)
@@ -40584,6 +42474,7 @@ func rewriteValueAMD64_OpSubPtr_0(v *Value) bool {
 	// cond: config.PtrSize == 8
 	// result: (SUBQ x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		if !(config.PtrSize == 8) {
@@ -40598,6 +42489,7 @@ func rewriteValueAMD64_OpSubPtr_0(v *Value) bool {
 	// cond: config.PtrSize == 4
 	// result: (SUBL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		if !(config.PtrSize == 4) {
@@ -40687,6 +42579,7 @@ func rewriteValueAMD64_OpXor16_0(v *Value) bool {
 	// cond:
 	// result: (XORL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64XORL)
@@ -40700,6 +42593,7 @@ func rewriteValueAMD64_OpXor32_0(v *Value) bool {
 	// cond:
 	// result: (XORL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64XORL)
@@ -40713,6 +42607,7 @@ func rewriteValueAMD64_OpXor64_0(v *Value) bool {
 	// cond:
 	// result: (XORQ x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64XORQ)
@@ -40726,6 +42621,7 @@ func rewriteValueAMD64_OpXor8_0(v *Value) bool {
 	// cond:
 	// result: (XORL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAMD64XORL)
@@ -40744,6 +42640,7 @@ func rewriteValueAMD64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 0 {
 			break
 		}
+		_ = v.Args[1]
 		mem := v.Args[1]
 		v.reset(OpCopy)
 		v.Type = mem.Type
@@ -40757,6 +42654,7 @@ func rewriteValueAMD64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 1 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpAMD64MOVBstoreconst)
@@ -40772,6 +42670,7 @@ func rewriteValueAMD64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 2 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpAMD64MOVWstoreconst)
@@ -40787,6 +42686,7 @@ func rewriteValueAMD64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 4 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpAMD64MOVLstoreconst)
@@ -40802,6 +42702,7 @@ func rewriteValueAMD64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 8 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpAMD64MOVQstoreconst)
@@ -40817,6 +42718,7 @@ func rewriteValueAMD64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 3 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpAMD64MOVBstoreconst)
@@ -40836,6 +42738,7 @@ func rewriteValueAMD64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 5 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpAMD64MOVBstoreconst)
@@ -40855,6 +42758,7 @@ func rewriteValueAMD64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 6 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpAMD64MOVWstoreconst)
@@ -40874,6 +42778,7 @@ func rewriteValueAMD64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 7 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpAMD64MOVLstoreconst)
@@ -40891,6 +42796,7 @@ func rewriteValueAMD64_OpZero_0(v *Value) bool {
 	// result: (Zero [s-s%8] (OffPtr <destptr.Type> destptr [s%8]) 		(MOVQstoreconst [0] destptr mem))
 	for {
 		s := v.AuxInt
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		if !(s%8 != 0 && s > 8) {
@@ -40925,6 +42831,7 @@ func rewriteValueAMD64_OpZero_10(v *Value) bool {
 		if v.AuxInt != 16 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpAMD64MOVQstoreconst)
@@ -40944,6 +42851,7 @@ func rewriteValueAMD64_OpZero_10(v *Value) bool {
 		if v.AuxInt != 24 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpAMD64MOVQstoreconst)
@@ -40967,6 +42875,7 @@ func rewriteValueAMD64_OpZero_10(v *Value) bool {
 		if v.AuxInt != 32 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpAMD64MOVQstoreconst)
@@ -40992,6 +42901,7 @@ func rewriteValueAMD64_OpZero_10(v *Value) bool {
 	// result: (Zero [s-8] (OffPtr <destptr.Type> [8] destptr) (MOVQstore destptr (MOVQconst [0]) mem))
 	for {
 		s := v.AuxInt
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		if !(s <= 1024 && s%8 == 0 && s%16 != 0 && !config.noDuffDevice) {
@@ -41017,6 +42927,7 @@ func rewriteValueAMD64_OpZero_10(v *Value) bool {
 	// result: (DUFFZERO [s] destptr (MOVOconst [0]) mem)
 	for {
 		s := v.AuxInt
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		if !(s <= 1024 && s%16 == 0 && !config.noDuffDevice) {
@@ -41036,6 +42947,7 @@ func rewriteValueAMD64_OpZero_10(v *Value) bool {
 	// result: (REPSTOSQ destptr (MOVQconst [s/8]) (MOVQconst [0]) mem)
 	for {
 		s := v.AuxInt
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		if !((s > 1024 || (config.noDuffDevice && s > 32)) && s%8 == 0) {
@@ -41137,10 +43049,12 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTL {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SHLL {
 				break
 			}
+			_ = v_0.Args[1]
 			v_0_0 := v_0.Args[0]
 			if v_0_0.Op != OpAMD64MOVLconst {
 				break
@@ -41168,11 +43082,13 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTL {
 				break
 			}
+			_ = v.Args[1]
 			y := v.Args[0]
 			v_1 := v.Args[1]
 			if v_1.Op != OpAMD64SHLL {
 				break
 			}
+			_ = v_1.Args[1]
 			v_1_0 := v_1.Args[0]
 			if v_1_0.Op != OpAMD64MOVLconst {
 				break
@@ -41199,10 +43115,12 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTQ {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SHLQ {
 				break
 			}
+			_ = v_0.Args[1]
 			v_0_0 := v_0.Args[0]
 			if v_0_0.Op != OpAMD64MOVQconst {
 				break
@@ -41230,11 +43148,13 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTQ {
 				break
 			}
+			_ = v.Args[1]
 			y := v.Args[0]
 			v_1 := v.Args[1]
 			if v_1.Op != OpAMD64SHLQ {
 				break
 			}
+			_ = v_1.Args[1]
 			v_1_0 := v_1.Args[0]
 			if v_1_0.Op != OpAMD64MOVQconst {
 				break
@@ -41301,6 +43221,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTQ {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64MOVQconst {
 				break
@@ -41325,6 +43246,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTQ {
 				break
 			}
+			_ = v.Args[1]
 			x := v.Args[0]
 			v_1 := v.Args[1]
 			if v_1.Op != OpAMD64MOVQconst {
@@ -41930,6 +43852,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SETL {
 				break
@@ -41954,6 +43877,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SETL {
 				break
@@ -41978,6 +43902,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SETLE {
 				break
@@ -42002,6 +43927,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SETLE {
 				break
@@ -42026,6 +43952,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SETG {
 				break
@@ -42050,6 +43977,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SETG {
 				break
@@ -42074,6 +44002,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SETGE {
 				break
@@ -42098,6 +44027,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SETGE {
 				break
@@ -42122,6 +44052,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SETEQ {
 				break
@@ -42146,6 +44077,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SETEQ {
 				break
@@ -42170,6 +44102,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SETNE {
 				break
@@ -42194,6 +44127,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SETNE {
 				break
@@ -42218,6 +44152,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SETB {
 				break
@@ -42242,6 +44177,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SETB {
 				break
@@ -42266,6 +44202,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SETBE {
 				break
@@ -42290,6 +44227,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SETBE {
 				break
@@ -42314,6 +44252,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SETA {
 				break
@@ -42338,6 +44277,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SETA {
 				break
@@ -42362,6 +44302,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SETAE {
 				break
@@ -42386,6 +44327,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SETAE {
 				break
@@ -42410,10 +44352,12 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTL {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SHLL {
 				break
 			}
+			_ = v_0.Args[1]
 			v_0_0 := v_0.Args[0]
 			if v_0_0.Op != OpAMD64MOVLconst {
 				break
@@ -42441,11 +44385,13 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTL {
 				break
 			}
+			_ = v.Args[1]
 			y := v.Args[0]
 			v_1 := v.Args[1]
 			if v_1.Op != OpAMD64SHLL {
 				break
 			}
+			_ = v_1.Args[1]
 			v_1_0 := v_1.Args[0]
 			if v_1_0.Op != OpAMD64MOVLconst {
 				break
@@ -42472,10 +44418,12 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTQ {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SHLQ {
 				break
 			}
+			_ = v_0.Args[1]
 			v_0_0 := v_0.Args[0]
 			if v_0_0.Op != OpAMD64MOVQconst {
 				break
@@ -42503,11 +44451,13 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTQ {
 				break
 			}
+			_ = v.Args[1]
 			y := v.Args[0]
 			v_1 := v.Args[1]
 			if v_1.Op != OpAMD64SHLQ {
 				break
 			}
+			_ = v_1.Args[1]
 			v_1_0 := v_1.Args[0]
 			if v_1_0.Op != OpAMD64MOVQconst {
 				break
@@ -42574,6 +44524,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTQ {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64MOVQconst {
 				break
@@ -42598,6 +44549,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTQ {
 				break
 			}
+			_ = v.Args[1]
 			x := v.Args[0]
 			v_1 := v.Args[1]
 			if v_1.Op != OpAMD64MOVQconst {
@@ -42622,6 +44574,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SETGF {
 				break
@@ -42646,6 +44599,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SETGF {
 				break
@@ -42670,6 +44624,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SETGEF {
 				break
@@ -42694,6 +44649,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SETGEF {
 				break
@@ -42718,6 +44674,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SETEQF {
 				break
@@ -42742,6 +44699,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SETEQF {
 				break
@@ -42766,6 +44724,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SETNEF {
 				break
@@ -42790,6 +44749,7 @@ func rewriteBlockAMD64(b *Block) bool {
 			if v.Op != OpAMD64TESTB {
 				break
 			}
+			_ = v.Args[1]
 			v_0 := v.Args[0]
 			if v_0.Op != OpAMD64SETNEF {
 				break
diff --git a/src/cmd/compile/internal/ssa/rewriteARM.go b/src/cmd/compile/internal/ssa/rewriteARM.go
index 65e97e13d8..9d794598cf 100644
--- a/src/cmd/compile/internal/ssa/rewriteARM.go
+++ b/src/cmd/compile/internal/ssa/rewriteARM.go
@@ -735,6 +735,7 @@ func rewriteValueARM_OpARMADC_0(v *Value) bool {
 	// cond:
 	// result: (ADCconst [c] x flags)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -752,6 +753,7 @@ func rewriteValueARM_OpARMADC_0(v *Value) bool {
 	// cond:
 	// result: (ADCconst [c] x flags)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -769,6 +771,7 @@ func rewriteValueARM_OpARMADC_0(v *Value) bool {
 	// cond:
 	// result: (ADCconst [c] x flags)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -786,6 +789,7 @@ func rewriteValueARM_OpARMADC_0(v *Value) bool {
 	// cond:
 	// result: (ADCconst [c] x flags)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -803,6 +807,7 @@ func rewriteValueARM_OpARMADC_0(v *Value) bool {
 	// cond:
 	// result: (ADCshiftLL x y [c] flags)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLLconst {
@@ -822,6 +827,7 @@ func rewriteValueARM_OpARMADC_0(v *Value) bool {
 	// cond:
 	// result: (ADCshiftLL x y [c] flags)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSLLconst {
 			break
@@ -841,6 +847,7 @@ func rewriteValueARM_OpARMADC_0(v *Value) bool {
 	// cond:
 	// result: (ADCshiftLL x y [c] flags)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSLLconst {
 			break
@@ -860,6 +867,7 @@ func rewriteValueARM_OpARMADC_0(v *Value) bool {
 	// cond:
 	// result: (ADCshiftLL x y [c] flags)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLLconst {
@@ -879,6 +887,7 @@ func rewriteValueARM_OpARMADC_0(v *Value) bool {
 	// cond:
 	// result: (ADCshiftRL x y [c] flags)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRLconst {
@@ -898,6 +907,7 @@ func rewriteValueARM_OpARMADC_0(v *Value) bool {
 	// cond:
 	// result: (ADCshiftRL x y [c] flags)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRLconst {
 			break
@@ -920,6 +930,7 @@ func rewriteValueARM_OpARMADC_10(v *Value) bool {
 	// cond:
 	// result: (ADCshiftRL x y [c] flags)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRLconst {
 			break
@@ -939,6 +950,7 @@ func rewriteValueARM_OpARMADC_10(v *Value) bool {
 	// cond:
 	// result: (ADCshiftRL x y [c] flags)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRLconst {
@@ -958,6 +970,7 @@ func rewriteValueARM_OpARMADC_10(v *Value) bool {
 	// cond:
 	// result: (ADCshiftRA x y [c] flags)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRAconst {
@@ -977,6 +990,7 @@ func rewriteValueARM_OpARMADC_10(v *Value) bool {
 	// cond:
 	// result: (ADCshiftRA x y [c] flags)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRAconst {
 			break
@@ -996,6 +1010,7 @@ func rewriteValueARM_OpARMADC_10(v *Value) bool {
 	// cond:
 	// result: (ADCshiftRA x y [c] flags)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRAconst {
 			break
@@ -1015,6 +1030,7 @@ func rewriteValueARM_OpARMADC_10(v *Value) bool {
 	// cond:
 	// result: (ADCshiftRA x y [c] flags)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRAconst {
@@ -1034,11 +1050,13 @@ func rewriteValueARM_OpARMADC_10(v *Value) bool {
 	// cond:
 	// result: (ADCshiftLLreg x y z flags)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLL {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		flags := v.Args[2]
@@ -1053,10 +1071,12 @@ func rewriteValueARM_OpARMADC_10(v *Value) bool {
 	// cond:
 	// result: (ADCshiftLLreg x y z flags)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSLL {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -1072,10 +1092,12 @@ func rewriteValueARM_OpARMADC_10(v *Value) bool {
 	// cond:
 	// result: (ADCshiftLLreg x y z flags)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSLL {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -1091,11 +1113,13 @@ func rewriteValueARM_OpARMADC_10(v *Value) bool {
 	// cond:
 	// result: (ADCshiftLLreg x y z flags)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLL {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		flags := v.Args[2]
@@ -1113,11 +1137,13 @@ func rewriteValueARM_OpARMADC_20(v *Value) bool {
 	// cond:
 	// result: (ADCshiftRLreg x y z flags)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRL {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		flags := v.Args[2]
@@ -1132,10 +1158,12 @@ func rewriteValueARM_OpARMADC_20(v *Value) bool {
 	// cond:
 	// result: (ADCshiftRLreg x y z flags)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRL {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -1151,10 +1179,12 @@ func rewriteValueARM_OpARMADC_20(v *Value) bool {
 	// cond:
 	// result: (ADCshiftRLreg x y z flags)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRL {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -1170,11 +1200,13 @@ func rewriteValueARM_OpARMADC_20(v *Value) bool {
 	// cond:
 	// result: (ADCshiftRLreg x y z flags)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRL {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		flags := v.Args[2]
@@ -1189,11 +1221,13 @@ func rewriteValueARM_OpARMADC_20(v *Value) bool {
 	// cond:
 	// result: (ADCshiftRAreg x y z flags)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRA {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		flags := v.Args[2]
@@ -1208,10 +1242,12 @@ func rewriteValueARM_OpARMADC_20(v *Value) bool {
 	// cond:
 	// result: (ADCshiftRAreg x y z flags)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRA {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -1227,10 +1263,12 @@ func rewriteValueARM_OpARMADC_20(v *Value) bool {
 	// cond:
 	// result: (ADCshiftRAreg x y z flags)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRA {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -1246,11 +1284,13 @@ func rewriteValueARM_OpARMADC_20(v *Value) bool {
 	// cond:
 	// result: (ADCshiftRAreg x y z flags)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRA {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		flags := v.Args[2]
@@ -1269,6 +1309,7 @@ func rewriteValueARM_OpARMADCconst_0(v *Value) bool {
 	// result: (ADCconst [int64(int32(c+d))] x flags)
 	for {
 		c := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMADDconst {
 			break
@@ -1287,6 +1328,7 @@ func rewriteValueARM_OpARMADCconst_0(v *Value) bool {
 	// result: (ADCconst [int64(int32(c-d))] x flags)
 	for {
 		c := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSUBconst {
 			break
@@ -1310,6 +1352,7 @@ func rewriteValueARM_OpARMADCshiftLL_0(v *Value) bool {
 	// result: (ADCconst [c] (SLLconst <x.Type> x [d]) flags)
 	for {
 		d := v.AuxInt
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -1331,6 +1374,7 @@ func rewriteValueARM_OpARMADCshiftLL_0(v *Value) bool {
 	// result: (ADCconst x [int64(uint32(c)<<uint64(d))] flags)
 	for {
 		d := v.AuxInt
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -1353,6 +1397,7 @@ func rewriteValueARM_OpARMADCshiftLLreg_0(v *Value) bool {
 	// cond:
 	// result: (ADCconst [c] (SLL <x.Type> x y) flags)
 	for {
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -1374,6 +1419,7 @@ func rewriteValueARM_OpARMADCshiftLLreg_0(v *Value) bool {
 	// cond:
 	// result: (ADCshiftLL x y [c] flags)
 	for {
+		_ = v.Args[3]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -1399,6 +1445,7 @@ func rewriteValueARM_OpARMADCshiftRA_0(v *Value) bool {
 	// result: (ADCconst [c] (SRAconst <x.Type> x [d]) flags)
 	for {
 		d := v.AuxInt
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -1420,6 +1467,7 @@ func rewriteValueARM_OpARMADCshiftRA_0(v *Value) bool {
 	// result: (ADCconst x [int64(int32(c)>>uint64(d))] flags)
 	for {
 		d := v.AuxInt
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -1442,6 +1490,7 @@ func rewriteValueARM_OpARMADCshiftRAreg_0(v *Value) bool {
 	// cond:
 	// result: (ADCconst [c] (SRA <x.Type> x y) flags)
 	for {
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -1463,6 +1512,7 @@ func rewriteValueARM_OpARMADCshiftRAreg_0(v *Value) bool {
 	// cond:
 	// result: (ADCshiftRA x y [c] flags)
 	for {
+		_ = v.Args[3]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -1488,6 +1538,7 @@ func rewriteValueARM_OpARMADCshiftRL_0(v *Value) bool {
 	// result: (ADCconst [c] (SRLconst <x.Type> x [d]) flags)
 	for {
 		d := v.AuxInt
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -1509,6 +1560,7 @@ func rewriteValueARM_OpARMADCshiftRL_0(v *Value) bool {
 	// result: (ADCconst x [int64(uint32(c)>>uint64(d))] flags)
 	for {
 		d := v.AuxInt
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -1531,6 +1583,7 @@ func rewriteValueARM_OpARMADCshiftRLreg_0(v *Value) bool {
 	// cond:
 	// result: (ADCconst [c] (SRL <x.Type> x y) flags)
 	for {
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -1552,6 +1605,7 @@ func rewriteValueARM_OpARMADCshiftRLreg_0(v *Value) bool {
 	// cond:
 	// result: (ADCshiftRL x y [c] flags)
 	for {
+		_ = v.Args[3]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -1574,6 +1628,7 @@ func rewriteValueARM_OpARMADD_0(v *Value) bool {
 	// cond:
 	// result: (ADDconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -1589,6 +1644,7 @@ func rewriteValueARM_OpARMADD_0(v *Value) bool {
 	// cond:
 	// result: (ADDconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -1604,6 +1660,7 @@ func rewriteValueARM_OpARMADD_0(v *Value) bool {
 	// cond:
 	// result: (ADDshiftLL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLLconst {
@@ -1621,6 +1678,7 @@ func rewriteValueARM_OpARMADD_0(v *Value) bool {
 	// cond:
 	// result: (ADDshiftLL x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSLLconst {
 			break
@@ -1638,6 +1696,7 @@ func rewriteValueARM_OpARMADD_0(v *Value) bool {
 	// cond:
 	// result: (ADDshiftRL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRLconst {
@@ -1655,6 +1714,7 @@ func rewriteValueARM_OpARMADD_0(v *Value) bool {
 	// cond:
 	// result: (ADDshiftRL x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRLconst {
 			break
@@ -1672,6 +1732,7 @@ func rewriteValueARM_OpARMADD_0(v *Value) bool {
 	// cond:
 	// result: (ADDshiftRA x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRAconst {
@@ -1689,6 +1750,7 @@ func rewriteValueARM_OpARMADD_0(v *Value) bool {
 	// cond:
 	// result: (ADDshiftRA x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRAconst {
 			break
@@ -1706,11 +1768,13 @@ func rewriteValueARM_OpARMADD_0(v *Value) bool {
 	// cond:
 	// result: (ADDshiftLLreg x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLL {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpARMADDshiftLLreg)
@@ -1723,10 +1787,12 @@ func rewriteValueARM_OpARMADD_0(v *Value) bool {
 	// cond:
 	// result: (ADDshiftLLreg x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSLL {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -1745,11 +1811,13 @@ func rewriteValueARM_OpARMADD_10(v *Value) bool {
 	// cond:
 	// result: (ADDshiftRLreg x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRL {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpARMADDshiftRLreg)
@@ -1762,10 +1830,12 @@ func rewriteValueARM_OpARMADD_10(v *Value) bool {
 	// cond:
 	// result: (ADDshiftRLreg x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRL {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -1779,11 +1849,13 @@ func rewriteValueARM_OpARMADD_10(v *Value) bool {
 	// cond:
 	// result: (ADDshiftRAreg x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRA {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpARMADDshiftRAreg)
@@ -1796,10 +1868,12 @@ func rewriteValueARM_OpARMADD_10(v *Value) bool {
 	// cond:
 	// result: (ADDshiftRAreg x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRA {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -1813,6 +1887,7 @@ func rewriteValueARM_OpARMADD_10(v *Value) bool {
 	// cond:
 	// result: (SUB x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMRSBconst {
@@ -1831,6 +1906,7 @@ func rewriteValueARM_OpARMADD_10(v *Value) bool {
 	// cond:
 	// result: (SUB x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMRSBconst {
 			break
@@ -1850,6 +1926,7 @@ func rewriteValueARM_OpARMADD_10(v *Value) bool {
 	// result: (RSBconst [c+d] (ADD <t> x y))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMRSBconst {
 			break
@@ -1875,6 +1952,7 @@ func rewriteValueARM_OpARMADD_10(v *Value) bool {
 	// result: (RSBconst [c+d] (ADD <t> x y))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMRSBconst {
 			break
@@ -1899,10 +1977,12 @@ func rewriteValueARM_OpARMADD_10(v *Value) bool {
 	// cond:
 	// result: (MULA x y a)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMUL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		a := v.Args[1]
@@ -1916,11 +1996,13 @@ func rewriteValueARM_OpARMADD_10(v *Value) bool {
 	// cond:
 	// result: (MULA x y a)
 	for {
+		_ = v.Args[1]
 		a := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMUL {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		y := v_1.Args[1]
 		v.reset(OpARMMULA)
@@ -1936,6 +2018,7 @@ func rewriteValueARM_OpARMADDS_0(v *Value) bool {
 	// cond:
 	// result: (ADDSconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -1951,6 +2034,7 @@ func rewriteValueARM_OpARMADDS_0(v *Value) bool {
 	// cond:
 	// result: (ADDSconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -1966,6 +2050,7 @@ func rewriteValueARM_OpARMADDS_0(v *Value) bool {
 	// cond:
 	// result: (ADDSshiftLL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLLconst {
@@ -1983,6 +2068,7 @@ func rewriteValueARM_OpARMADDS_0(v *Value) bool {
 	// cond:
 	// result: (ADDSshiftLL x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSLLconst {
 			break
@@ -2000,6 +2086,7 @@ func rewriteValueARM_OpARMADDS_0(v *Value) bool {
 	// cond:
 	// result: (ADDSshiftRL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRLconst {
@@ -2017,6 +2104,7 @@ func rewriteValueARM_OpARMADDS_0(v *Value) bool {
 	// cond:
 	// result: (ADDSshiftRL x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRLconst {
 			break
@@ -2034,6 +2122,7 @@ func rewriteValueARM_OpARMADDS_0(v *Value) bool {
 	// cond:
 	// result: (ADDSshiftRA x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRAconst {
@@ -2051,6 +2140,7 @@ func rewriteValueARM_OpARMADDS_0(v *Value) bool {
 	// cond:
 	// result: (ADDSshiftRA x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRAconst {
 			break
@@ -2068,11 +2158,13 @@ func rewriteValueARM_OpARMADDS_0(v *Value) bool {
 	// cond:
 	// result: (ADDSshiftLLreg x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLL {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpARMADDSshiftLLreg)
@@ -2085,10 +2177,12 @@ func rewriteValueARM_OpARMADDS_0(v *Value) bool {
 	// cond:
 	// result: (ADDSshiftLLreg x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSLL {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -2105,11 +2199,13 @@ func rewriteValueARM_OpARMADDS_10(v *Value) bool {
 	// cond:
 	// result: (ADDSshiftRLreg x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRL {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpARMADDSshiftRLreg)
@@ -2122,10 +2218,12 @@ func rewriteValueARM_OpARMADDS_10(v *Value) bool {
 	// cond:
 	// result: (ADDSshiftRLreg x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRL {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -2139,11 +2237,13 @@ func rewriteValueARM_OpARMADDS_10(v *Value) bool {
 	// cond:
 	// result: (ADDSshiftRAreg x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRA {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpARMADDSshiftRAreg)
@@ -2156,10 +2256,12 @@ func rewriteValueARM_OpARMADDS_10(v *Value) bool {
 	// cond:
 	// result: (ADDSshiftRAreg x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRA {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -2179,6 +2281,7 @@ func rewriteValueARM_OpARMADDSshiftLL_0(v *Value) bool {
 	// result: (ADDSconst [c] (SLLconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -2198,6 +2301,7 @@ func rewriteValueARM_OpARMADDSshiftLL_0(v *Value) bool {
 	// result: (ADDSconst x [int64(uint32(c)<<uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -2218,6 +2322,7 @@ func rewriteValueARM_OpARMADDSshiftLLreg_0(v *Value) bool {
 	// cond:
 	// result: (ADDSconst [c] (SLL <x.Type> x y))
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -2237,6 +2342,7 @@ func rewriteValueARM_OpARMADDSshiftLLreg_0(v *Value) bool {
 	// cond:
 	// result: (ADDSshiftLL x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -2260,6 +2366,7 @@ func rewriteValueARM_OpARMADDSshiftRA_0(v *Value) bool {
 	// result: (ADDSconst [c] (SRAconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -2279,6 +2386,7 @@ func rewriteValueARM_OpARMADDSshiftRA_0(v *Value) bool {
 	// result: (ADDSconst x [int64(int32(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -2299,6 +2407,7 @@ func rewriteValueARM_OpARMADDSshiftRAreg_0(v *Value) bool {
 	// cond:
 	// result: (ADDSconst [c] (SRA <x.Type> x y))
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -2318,6 +2427,7 @@ func rewriteValueARM_OpARMADDSshiftRAreg_0(v *Value) bool {
 	// cond:
 	// result: (ADDSshiftRA x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -2341,6 +2451,7 @@ func rewriteValueARM_OpARMADDSshiftRL_0(v *Value) bool {
 	// result: (ADDSconst [c] (SRLconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -2360,6 +2471,7 @@ func rewriteValueARM_OpARMADDSshiftRL_0(v *Value) bool {
 	// result: (ADDSconst x [int64(uint32(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -2380,6 +2492,7 @@ func rewriteValueARM_OpARMADDSshiftRLreg_0(v *Value) bool {
 	// cond:
 	// result: (ADDSconst [c] (SRL <x.Type> x y))
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -2399,6 +2512,7 @@ func rewriteValueARM_OpARMADDSshiftRLreg_0(v *Value) bool {
 	// cond:
 	// result: (ADDSshiftRL x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -2532,6 +2646,7 @@ func rewriteValueARM_OpARMADDshiftLL_0(v *Value) bool {
 	// result: (ADDconst [c] (SLLconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -2551,6 +2666,7 @@ func rewriteValueARM_OpARMADDshiftLL_0(v *Value) bool {
 	// result: (ADDconst x [int64(uint32(c)<<uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -2567,6 +2683,7 @@ func rewriteValueARM_OpARMADDshiftLL_0(v *Value) bool {
 	// result: (SRRconst [32-c] x)
 	for {
 		c := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRLconst {
 			break
@@ -2592,6 +2709,7 @@ func rewriteValueARM_OpARMADDshiftLLreg_0(v *Value) bool {
 	// cond:
 	// result: (ADDconst [c] (SLL <x.Type> x y))
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -2611,6 +2729,7 @@ func rewriteValueARM_OpARMADDshiftLLreg_0(v *Value) bool {
 	// cond:
 	// result: (ADDshiftLL x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -2634,6 +2753,7 @@ func rewriteValueARM_OpARMADDshiftRA_0(v *Value) bool {
 	// result: (ADDconst [c] (SRAconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -2653,6 +2773,7 @@ func rewriteValueARM_OpARMADDshiftRA_0(v *Value) bool {
 	// result: (ADDconst x [int64(int32(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -2673,6 +2794,7 @@ func rewriteValueARM_OpARMADDshiftRAreg_0(v *Value) bool {
 	// cond:
 	// result: (ADDconst [c] (SRA <x.Type> x y))
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -2692,6 +2814,7 @@ func rewriteValueARM_OpARMADDshiftRAreg_0(v *Value) bool {
 	// cond:
 	// result: (ADDshiftRA x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -2715,6 +2838,7 @@ func rewriteValueARM_OpARMADDshiftRL_0(v *Value) bool {
 	// result: (ADDconst [c] (SRLconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -2734,6 +2858,7 @@ func rewriteValueARM_OpARMADDshiftRL_0(v *Value) bool {
 	// result: (ADDconst x [int64(uint32(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -2750,6 +2875,7 @@ func rewriteValueARM_OpARMADDshiftRL_0(v *Value) bool {
 	// result: (SRRconst [   c] x)
 	for {
 		c := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSLLconst {
 			break
@@ -2775,6 +2901,7 @@ func rewriteValueARM_OpARMADDshiftRLreg_0(v *Value) bool {
 	// cond:
 	// result: (ADDconst [c] (SRL <x.Type> x y))
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -2794,6 +2921,7 @@ func rewriteValueARM_OpARMADDshiftRLreg_0(v *Value) bool {
 	// cond:
 	// result: (ADDshiftRL x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -2814,6 +2942,7 @@ func rewriteValueARM_OpARMAND_0(v *Value) bool {
 	// cond:
 	// result: (ANDconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -2829,6 +2958,7 @@ func rewriteValueARM_OpARMAND_0(v *Value) bool {
 	// cond:
 	// result: (ANDconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -2844,6 +2974,7 @@ func rewriteValueARM_OpARMAND_0(v *Value) bool {
 	// cond:
 	// result: (ANDshiftLL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLLconst {
@@ -2861,6 +2992,7 @@ func rewriteValueARM_OpARMAND_0(v *Value) bool {
 	// cond:
 	// result: (ANDshiftLL x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSLLconst {
 			break
@@ -2878,6 +3010,7 @@ func rewriteValueARM_OpARMAND_0(v *Value) bool {
 	// cond:
 	// result: (ANDshiftRL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRLconst {
@@ -2895,6 +3028,7 @@ func rewriteValueARM_OpARMAND_0(v *Value) bool {
 	// cond:
 	// result: (ANDshiftRL x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRLconst {
 			break
@@ -2912,6 +3046,7 @@ func rewriteValueARM_OpARMAND_0(v *Value) bool {
 	// cond:
 	// result: (ANDshiftRA x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRAconst {
@@ -2929,6 +3064,7 @@ func rewriteValueARM_OpARMAND_0(v *Value) bool {
 	// cond:
 	// result: (ANDshiftRA x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRAconst {
 			break
@@ -2946,11 +3082,13 @@ func rewriteValueARM_OpARMAND_0(v *Value) bool {
 	// cond:
 	// result: (ANDshiftLLreg x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLL {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpARMANDshiftLLreg)
@@ -2963,10 +3101,12 @@ func rewriteValueARM_OpARMAND_0(v *Value) bool {
 	// cond:
 	// result: (ANDshiftLLreg x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSLL {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -2983,11 +3123,13 @@ func rewriteValueARM_OpARMAND_10(v *Value) bool {
 	// cond:
 	// result: (ANDshiftRLreg x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRL {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpARMANDshiftRLreg)
@@ -3000,10 +3142,12 @@ func rewriteValueARM_OpARMAND_10(v *Value) bool {
 	// cond:
 	// result: (ANDshiftRLreg x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRL {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -3017,11 +3161,13 @@ func rewriteValueARM_OpARMAND_10(v *Value) bool {
 	// cond:
 	// result: (ANDshiftRAreg x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRA {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpARMANDshiftRAreg)
@@ -3034,10 +3180,12 @@ func rewriteValueARM_OpARMAND_10(v *Value) bool {
 	// cond:
 	// result: (ANDshiftRAreg x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRA {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -3051,6 +3199,7 @@ func rewriteValueARM_OpARMAND_10(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -3064,6 +3213,7 @@ func rewriteValueARM_OpARMAND_10(v *Value) bool {
 	// cond:
 	// result: (BIC x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMVN {
@@ -3079,6 +3229,7 @@ func rewriteValueARM_OpARMAND_10(v *Value) bool {
 	// cond:
 	// result: (BIC x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMVN {
 			break
@@ -3094,6 +3245,7 @@ func rewriteValueARM_OpARMAND_10(v *Value) bool {
 	// cond:
 	// result: (BICshiftLL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMVNshiftLL {
@@ -3111,6 +3263,7 @@ func rewriteValueARM_OpARMAND_10(v *Value) bool {
 	// cond:
 	// result: (BICshiftLL x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMVNshiftLL {
 			break
@@ -3128,6 +3281,7 @@ func rewriteValueARM_OpARMAND_10(v *Value) bool {
 	// cond:
 	// result: (BICshiftRL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMVNshiftRL {
@@ -3148,6 +3302,7 @@ func rewriteValueARM_OpARMAND_20(v *Value) bool {
 	// cond:
 	// result: (BICshiftRL x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMVNshiftRL {
 			break
@@ -3165,6 +3320,7 @@ func rewriteValueARM_OpARMAND_20(v *Value) bool {
 	// cond:
 	// result: (BICshiftRA x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMVNshiftRA {
@@ -3182,6 +3338,7 @@ func rewriteValueARM_OpARMAND_20(v *Value) bool {
 	// cond:
 	// result: (BICshiftRA x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMVNshiftRA {
 			break
@@ -3277,6 +3434,7 @@ func rewriteValueARM_OpARMANDshiftLL_0(v *Value) bool {
 	// result: (ANDconst [c] (SLLconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -3296,6 +3454,7 @@ func rewriteValueARM_OpARMANDshiftLL_0(v *Value) bool {
 	// result: (ANDconst x [int64(uint32(c)<<uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -3312,6 +3471,7 @@ func rewriteValueARM_OpARMANDshiftLL_0(v *Value) bool {
 	// result: y
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		if y.Op != OpARMSLLconst {
@@ -3338,6 +3498,7 @@ func rewriteValueARM_OpARMANDshiftLLreg_0(v *Value) bool {
 	// cond:
 	// result: (ANDconst [c] (SLL <x.Type> x y))
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -3357,6 +3518,7 @@ func rewriteValueARM_OpARMANDshiftLLreg_0(v *Value) bool {
 	// cond:
 	// result: (ANDshiftLL x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -3380,6 +3542,7 @@ func rewriteValueARM_OpARMANDshiftRA_0(v *Value) bool {
 	// result: (ANDconst [c] (SRAconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -3399,6 +3562,7 @@ func rewriteValueARM_OpARMANDshiftRA_0(v *Value) bool {
 	// result: (ANDconst x [int64(int32(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -3415,6 +3579,7 @@ func rewriteValueARM_OpARMANDshiftRA_0(v *Value) bool {
 	// result: y
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		if y.Op != OpARMSRAconst {
@@ -3441,6 +3606,7 @@ func rewriteValueARM_OpARMANDshiftRAreg_0(v *Value) bool {
 	// cond:
 	// result: (ANDconst [c] (SRA <x.Type> x y))
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -3460,6 +3626,7 @@ func rewriteValueARM_OpARMANDshiftRAreg_0(v *Value) bool {
 	// cond:
 	// result: (ANDshiftRA x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -3483,6 +3650,7 @@ func rewriteValueARM_OpARMANDshiftRL_0(v *Value) bool {
 	// result: (ANDconst [c] (SRLconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -3502,6 +3670,7 @@ func rewriteValueARM_OpARMANDshiftRL_0(v *Value) bool {
 	// result: (ANDconst x [int64(uint32(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -3518,6 +3687,7 @@ func rewriteValueARM_OpARMANDshiftRL_0(v *Value) bool {
 	// result: y
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		if y.Op != OpARMSRLconst {
@@ -3544,6 +3714,7 @@ func rewriteValueARM_OpARMANDshiftRLreg_0(v *Value) bool {
 	// cond:
 	// result: (ANDconst [c] (SRL <x.Type> x y))
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -3563,6 +3734,7 @@ func rewriteValueARM_OpARMANDshiftRLreg_0(v *Value) bool {
 	// cond:
 	// result: (ANDshiftRL x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -3583,6 +3755,7 @@ func rewriteValueARM_OpARMBIC_0(v *Value) bool {
 	// cond:
 	// result: (BICconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -3598,6 +3771,7 @@ func rewriteValueARM_OpARMBIC_0(v *Value) bool {
 	// cond:
 	// result: (BICshiftLL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLLconst {
@@ -3615,6 +3789,7 @@ func rewriteValueARM_OpARMBIC_0(v *Value) bool {
 	// cond:
 	// result: (BICshiftRL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRLconst {
@@ -3632,6 +3807,7 @@ func rewriteValueARM_OpARMBIC_0(v *Value) bool {
 	// cond:
 	// result: (BICshiftRA x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRAconst {
@@ -3649,11 +3825,13 @@ func rewriteValueARM_OpARMBIC_0(v *Value) bool {
 	// cond:
 	// result: (BICshiftLLreg x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLL {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpARMBICshiftLLreg)
@@ -3666,11 +3844,13 @@ func rewriteValueARM_OpARMBIC_0(v *Value) bool {
 	// cond:
 	// result: (BICshiftRLreg x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRL {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpARMBICshiftRLreg)
@@ -3683,11 +3863,13 @@ func rewriteValueARM_OpARMBIC_0(v *Value) bool {
 	// cond:
 	// result: (BICshiftRAreg x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRA {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpARMBICshiftRAreg)
@@ -3700,6 +3882,7 @@ func rewriteValueARM_OpARMBIC_0(v *Value) bool {
 	// cond:
 	// result: (MOVWconst [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -3788,6 +3971,7 @@ func rewriteValueARM_OpARMBICshiftLL_0(v *Value) bool {
 	// result: (BICconst x [int64(uint32(c)<<uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -3804,6 +3988,7 @@ func rewriteValueARM_OpARMBICshiftLL_0(v *Value) bool {
 	// result: (MOVWconst [0])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLLconst {
@@ -3827,6 +4012,7 @@ func rewriteValueARM_OpARMBICshiftLLreg_0(v *Value) bool {
 	// cond:
 	// result: (BICshiftLL x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -3848,6 +4034,7 @@ func rewriteValueARM_OpARMBICshiftRA_0(v *Value) bool {
 	// result: (BICconst x [int64(int32(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -3864,6 +4051,7 @@ func rewriteValueARM_OpARMBICshiftRA_0(v *Value) bool {
 	// result: (MOVWconst [0])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRAconst {
@@ -3887,6 +4075,7 @@ func rewriteValueARM_OpARMBICshiftRAreg_0(v *Value) bool {
 	// cond:
 	// result: (BICshiftRA x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -3908,6 +4097,7 @@ func rewriteValueARM_OpARMBICshiftRL_0(v *Value) bool {
 	// result: (BICconst x [int64(uint32(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -3924,6 +4114,7 @@ func rewriteValueARM_OpARMBICshiftRL_0(v *Value) bool {
 	// result: (MOVWconst [0])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRLconst {
@@ -3947,6 +4138,7 @@ func rewriteValueARM_OpARMBICshiftRLreg_0(v *Value) bool {
 	// cond:
 	// result: (BICshiftRL x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -3968,6 +4160,7 @@ func rewriteValueARM_OpARMCMOVWHSconst_0(v *Value) bool {
 	// result: (MOVWconst [c])
 	for {
 		c := v.AuxInt
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMFlagEQ {
 			break
@@ -3980,6 +4173,7 @@ func rewriteValueARM_OpARMCMOVWHSconst_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMFlagLT_ULT {
@@ -3995,6 +4189,7 @@ func rewriteValueARM_OpARMCMOVWHSconst_0(v *Value) bool {
 	// result: (MOVWconst [c])
 	for {
 		c := v.AuxInt
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMFlagLT_UGT {
 			break
@@ -4007,6 +4202,7 @@ func rewriteValueARM_OpARMCMOVWHSconst_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMFlagGT_ULT {
@@ -4022,6 +4218,7 @@ func rewriteValueARM_OpARMCMOVWHSconst_0(v *Value) bool {
 	// result: (MOVWconst [c])
 	for {
 		c := v.AuxInt
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMFlagGT_UGT {
 			break
@@ -4035,6 +4232,7 @@ func rewriteValueARM_OpARMCMOVWHSconst_0(v *Value) bool {
 	// result: (CMOVWLSconst x flags [c])
 	for {
 		c := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMInvertFlags {
@@ -4055,6 +4253,7 @@ func rewriteValueARM_OpARMCMOVWLSconst_0(v *Value) bool {
 	// result: (MOVWconst [c])
 	for {
 		c := v.AuxInt
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMFlagEQ {
 			break
@@ -4068,6 +4267,7 @@ func rewriteValueARM_OpARMCMOVWLSconst_0(v *Value) bool {
 	// result: (MOVWconst [c])
 	for {
 		c := v.AuxInt
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMFlagLT_ULT {
 			break
@@ -4080,6 +4280,7 @@ func rewriteValueARM_OpARMCMOVWLSconst_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMFlagLT_UGT {
@@ -4095,6 +4296,7 @@ func rewriteValueARM_OpARMCMOVWLSconst_0(v *Value) bool {
 	// result: (MOVWconst [c])
 	for {
 		c := v.AuxInt
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMFlagGT_ULT {
 			break
@@ -4107,6 +4309,7 @@ func rewriteValueARM_OpARMCMOVWLSconst_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMFlagGT_UGT {
@@ -4122,6 +4325,7 @@ func rewriteValueARM_OpARMCMOVWLSconst_0(v *Value) bool {
 	// result: (CMOVWHSconst x flags [c])
 	for {
 		c := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMInvertFlags {
@@ -4143,6 +4347,7 @@ func rewriteValueARM_OpARMCMP_0(v *Value) bool {
 	// cond:
 	// result: (CMPconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -4158,6 +4363,7 @@ func rewriteValueARM_OpARMCMP_0(v *Value) bool {
 	// cond:
 	// result: (InvertFlags (CMPconst [c] x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -4175,6 +4381,7 @@ func rewriteValueARM_OpARMCMP_0(v *Value) bool {
 	// cond:
 	// result: (CMPshiftLL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLLconst {
@@ -4192,6 +4399,7 @@ func rewriteValueARM_OpARMCMP_0(v *Value) bool {
 	// cond:
 	// result: (InvertFlags (CMPshiftLL x y [c]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSLLconst {
 			break
@@ -4211,6 +4419,7 @@ func rewriteValueARM_OpARMCMP_0(v *Value) bool {
 	// cond:
 	// result: (CMPshiftRL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRLconst {
@@ -4228,6 +4437,7 @@ func rewriteValueARM_OpARMCMP_0(v *Value) bool {
 	// cond:
 	// result: (InvertFlags (CMPshiftRL x y [c]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRLconst {
 			break
@@ -4247,6 +4457,7 @@ func rewriteValueARM_OpARMCMP_0(v *Value) bool {
 	// cond:
 	// result: (CMPshiftRA x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRAconst {
@@ -4264,6 +4475,7 @@ func rewriteValueARM_OpARMCMP_0(v *Value) bool {
 	// cond:
 	// result: (InvertFlags (CMPshiftRA x y [c]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRAconst {
 			break
@@ -4283,11 +4495,13 @@ func rewriteValueARM_OpARMCMP_0(v *Value) bool {
 	// cond:
 	// result: (CMPshiftLLreg x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLL {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpARMCMPshiftLLreg)
@@ -4300,10 +4514,12 @@ func rewriteValueARM_OpARMCMP_0(v *Value) bool {
 	// cond:
 	// result: (InvertFlags (CMPshiftLLreg x y z))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSLL {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -4324,11 +4540,13 @@ func rewriteValueARM_OpARMCMP_10(v *Value) bool {
 	// cond:
 	// result: (CMPshiftRLreg x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRL {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpARMCMPshiftRLreg)
@@ -4341,10 +4559,12 @@ func rewriteValueARM_OpARMCMP_10(v *Value) bool {
 	// cond:
 	// result: (InvertFlags (CMPshiftRLreg x y z))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRL {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -4360,11 +4580,13 @@ func rewriteValueARM_OpARMCMP_10(v *Value) bool {
 	// cond:
 	// result: (CMPshiftRAreg x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRA {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpARMCMPshiftRAreg)
@@ -4377,10 +4599,12 @@ func rewriteValueARM_OpARMCMP_10(v *Value) bool {
 	// cond:
 	// result: (InvertFlags (CMPshiftRAreg x y z))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRA {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -4399,6 +4623,7 @@ func rewriteValueARM_OpARMCMPD_0(v *Value) bool {
 	// cond:
 	// result: (CMPD0 x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVDconst {
@@ -4418,6 +4643,7 @@ func rewriteValueARM_OpARMCMPF_0(v *Value) bool {
 	// cond:
 	// result: (CMPF0 x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVFconst {
@@ -4585,6 +4811,7 @@ func rewriteValueARM_OpARMCMPshiftLL_0(v *Value) bool {
 	// result: (InvertFlags (CMPconst [c] (SLLconst <x.Type> x [d])))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -4606,6 +4833,7 @@ func rewriteValueARM_OpARMCMPshiftLL_0(v *Value) bool {
 	// result: (CMPconst x [int64(uint32(c)<<uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -4626,6 +4854,7 @@ func rewriteValueARM_OpARMCMPshiftLLreg_0(v *Value) bool {
 	// cond:
 	// result: (InvertFlags (CMPconst [c] (SLL <x.Type> x y)))
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -4647,6 +4876,7 @@ func rewriteValueARM_OpARMCMPshiftLLreg_0(v *Value) bool {
 	// cond:
 	// result: (CMPshiftLL x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -4670,6 +4900,7 @@ func rewriteValueARM_OpARMCMPshiftRA_0(v *Value) bool {
 	// result: (InvertFlags (CMPconst [c] (SRAconst <x.Type> x [d])))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -4691,6 +4922,7 @@ func rewriteValueARM_OpARMCMPshiftRA_0(v *Value) bool {
 	// result: (CMPconst x [int64(int32(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -4711,6 +4943,7 @@ func rewriteValueARM_OpARMCMPshiftRAreg_0(v *Value) bool {
 	// cond:
 	// result: (InvertFlags (CMPconst [c] (SRA <x.Type> x y)))
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -4732,6 +4965,7 @@ func rewriteValueARM_OpARMCMPshiftRAreg_0(v *Value) bool {
 	// cond:
 	// result: (CMPshiftRA x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -4755,6 +4989,7 @@ func rewriteValueARM_OpARMCMPshiftRL_0(v *Value) bool {
 	// result: (InvertFlags (CMPconst [c] (SRLconst <x.Type> x [d])))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -4776,6 +5011,7 @@ func rewriteValueARM_OpARMCMPshiftRL_0(v *Value) bool {
 	// result: (CMPconst x [int64(uint32(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -4796,6 +5032,7 @@ func rewriteValueARM_OpARMCMPshiftRLreg_0(v *Value) bool {
 	// cond:
 	// result: (InvertFlags (CMPconst [c] (SRL <x.Type> x y)))
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -4817,6 +5054,7 @@ func rewriteValueARM_OpARMCMPshiftRLreg_0(v *Value) bool {
 	// cond:
 	// result: (CMPshiftRL x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -5523,6 +5761,7 @@ func rewriteValueARM_OpARMMOVBUload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMADDconst {
 			break
@@ -5543,6 +5782,7 @@ func rewriteValueARM_OpARMMOVBUload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSUBconst {
 			break
@@ -5563,6 +5803,7 @@ func rewriteValueARM_OpARMMOVBUload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWaddr {
 			break
@@ -5587,6 +5828,7 @@ func rewriteValueARM_OpARMMOVBUload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVBstore {
@@ -5594,6 +5836,7 @@ func rewriteValueARM_OpARMMOVBUload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2) && !isSigned(x.Type)) {
@@ -5615,6 +5858,7 @@ func rewriteValueARM_OpARMMOVBUreg_0(v *Value) bool {
 		if x.Op != OpARMMOVBUload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpARMMOVWreg)
 		v.AddArg(x)
 		return true
@@ -5668,6 +5912,7 @@ func rewriteValueARM_OpARMMOVBload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMADDconst {
 			break
@@ -5688,6 +5933,7 @@ func rewriteValueARM_OpARMMOVBload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSUBconst {
 			break
@@ -5708,6 +5954,7 @@ func rewriteValueARM_OpARMMOVBload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWaddr {
 			break
@@ -5732,6 +5979,7 @@ func rewriteValueARM_OpARMMOVBload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVBstore {
@@ -5739,6 +5987,7 @@ func rewriteValueARM_OpARMMOVBload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2) && isSigned(x.Type)) {
@@ -5760,6 +6009,7 @@ func rewriteValueARM_OpARMMOVBreg_0(v *Value) bool {
 		if x.Op != OpARMMOVBload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpARMMOVWreg)
 		v.AddArg(x)
 		return true
@@ -5816,6 +6066,7 @@ func rewriteValueARM_OpARMMOVBstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMADDconst {
 			break
@@ -5838,6 +6089,7 @@ func rewriteValueARM_OpARMMOVBstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSUBconst {
 			break
@@ -5860,6 +6112,7 @@ func rewriteValueARM_OpARMMOVBstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWaddr {
 			break
@@ -5886,6 +6139,7 @@ func rewriteValueARM_OpARMMOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVBreg {
@@ -5907,6 +6161,7 @@ func rewriteValueARM_OpARMMOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVBUreg {
@@ -5928,6 +6183,7 @@ func rewriteValueARM_OpARMMOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVHreg {
@@ -5949,6 +6205,7 @@ func rewriteValueARM_OpARMMOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVHUreg {
@@ -5973,6 +6230,7 @@ func rewriteValueARM_OpARMMOVDload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMADDconst {
 			break
@@ -5993,6 +6251,7 @@ func rewriteValueARM_OpARMMOVDload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSUBconst {
 			break
@@ -6013,6 +6272,7 @@ func rewriteValueARM_OpARMMOVDload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWaddr {
 			break
@@ -6037,6 +6297,7 @@ func rewriteValueARM_OpARMMOVDload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVDstore {
@@ -6044,6 +6305,7 @@ func rewriteValueARM_OpARMMOVDload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2)) {
@@ -6063,6 +6325,7 @@ func rewriteValueARM_OpARMMOVDstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMADDconst {
 			break
@@ -6085,6 +6348,7 @@ func rewriteValueARM_OpARMMOVDstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSUBconst {
 			break
@@ -6107,6 +6371,7 @@ func rewriteValueARM_OpARMMOVDstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWaddr {
 			break
@@ -6136,6 +6401,7 @@ func rewriteValueARM_OpARMMOVFload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMADDconst {
 			break
@@ -6156,6 +6422,7 @@ func rewriteValueARM_OpARMMOVFload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSUBconst {
 			break
@@ -6176,6 +6443,7 @@ func rewriteValueARM_OpARMMOVFload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWaddr {
 			break
@@ -6200,6 +6468,7 @@ func rewriteValueARM_OpARMMOVFload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVFstore {
@@ -6207,6 +6476,7 @@ func rewriteValueARM_OpARMMOVFload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2)) {
@@ -6226,6 +6496,7 @@ func rewriteValueARM_OpARMMOVFstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMADDconst {
 			break
@@ -6248,6 +6519,7 @@ func rewriteValueARM_OpARMMOVFstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSUBconst {
 			break
@@ -6270,6 +6542,7 @@ func rewriteValueARM_OpARMMOVFstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWaddr {
 			break
@@ -6299,6 +6572,7 @@ func rewriteValueARM_OpARMMOVHUload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMADDconst {
 			break
@@ -6319,6 +6593,7 @@ func rewriteValueARM_OpARMMOVHUload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSUBconst {
 			break
@@ -6339,6 +6614,7 @@ func rewriteValueARM_OpARMMOVHUload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWaddr {
 			break
@@ -6363,6 +6639,7 @@ func rewriteValueARM_OpARMMOVHUload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVHstore {
@@ -6370,6 +6647,7 @@ func rewriteValueARM_OpARMMOVHUload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2) && !isSigned(x.Type)) {
@@ -6391,6 +6669,7 @@ func rewriteValueARM_OpARMMOVHUreg_0(v *Value) bool {
 		if x.Op != OpARMMOVBUload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpARMMOVWreg)
 		v.AddArg(x)
 		return true
@@ -6403,6 +6682,7 @@ func rewriteValueARM_OpARMMOVHUreg_0(v *Value) bool {
 		if x.Op != OpARMMOVHUload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpARMMOVWreg)
 		v.AddArg(x)
 		return true
@@ -6468,6 +6748,7 @@ func rewriteValueARM_OpARMMOVHload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMADDconst {
 			break
@@ -6488,6 +6769,7 @@ func rewriteValueARM_OpARMMOVHload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSUBconst {
 			break
@@ -6508,6 +6790,7 @@ func rewriteValueARM_OpARMMOVHload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWaddr {
 			break
@@ -6532,6 +6815,7 @@ func rewriteValueARM_OpARMMOVHload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVHstore {
@@ -6539,6 +6823,7 @@ func rewriteValueARM_OpARMMOVHload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2) && isSigned(x.Type)) {
@@ -6560,6 +6845,7 @@ func rewriteValueARM_OpARMMOVHreg_0(v *Value) bool {
 		if x.Op != OpARMMOVBload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpARMMOVWreg)
 		v.AddArg(x)
 		return true
@@ -6572,6 +6858,7 @@ func rewriteValueARM_OpARMMOVHreg_0(v *Value) bool {
 		if x.Op != OpARMMOVBUload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpARMMOVWreg)
 		v.AddArg(x)
 		return true
@@ -6584,6 +6871,7 @@ func rewriteValueARM_OpARMMOVHreg_0(v *Value) bool {
 		if x.Op != OpARMMOVHload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpARMMOVWreg)
 		v.AddArg(x)
 		return true
@@ -6664,6 +6952,7 @@ func rewriteValueARM_OpARMMOVHstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMADDconst {
 			break
@@ -6686,6 +6975,7 @@ func rewriteValueARM_OpARMMOVHstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSUBconst {
 			break
@@ -6708,6 +6998,7 @@ func rewriteValueARM_OpARMMOVHstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWaddr {
 			break
@@ -6734,6 +7025,7 @@ func rewriteValueARM_OpARMMOVHstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVHreg {
@@ -6755,6 +7047,7 @@ func rewriteValueARM_OpARMMOVHstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVHUreg {
@@ -6783,6 +7076,7 @@ func rewriteValueARM_OpARMMOVWload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMADDconst {
 			break
@@ -6803,6 +7097,7 @@ func rewriteValueARM_OpARMMOVWload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSUBconst {
 			break
@@ -6823,6 +7118,7 @@ func rewriteValueARM_OpARMMOVWload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWaddr {
 			break
@@ -6847,6 +7143,7 @@ func rewriteValueARM_OpARMMOVWload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWstore {
@@ -6854,6 +7151,7 @@ func rewriteValueARM_OpARMMOVWload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2)) {
@@ -6872,10 +7170,12 @@ func rewriteValueARM_OpARMMOVWload_0(v *Value) bool {
 			break
 		}
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMADD {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -6896,11 +7196,13 @@ func rewriteValueARM_OpARMMOVWload_0(v *Value) bool {
 			break
 		}
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMADDshiftLL {
 			break
 		}
 		c := v_0.AuxInt
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -6922,11 +7224,13 @@ func rewriteValueARM_OpARMMOVWload_0(v *Value) bool {
 			break
 		}
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMADDshiftRL {
 			break
 		}
 		c := v_0.AuxInt
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -6948,11 +7252,13 @@ func rewriteValueARM_OpARMMOVWload_0(v *Value) bool {
 			break
 		}
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMADDshiftRA {
 			break
 		}
 		c := v_0.AuxInt
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -6973,12 +7279,14 @@ func rewriteValueARM_OpARMMOVWloadidx_0(v *Value) bool {
 	// cond: isSamePtr(ptr, ptr2)
 	// result: x
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
 		if v_2.Op != OpARMMOVWstoreidx {
 			break
 		}
+		_ = v_2.Args[3]
 		ptr2 := v_2.Args[0]
 		if idx != v_2.Args[1] {
 			break
@@ -6996,6 +7304,7 @@ func rewriteValueARM_OpARMMOVWloadidx_0(v *Value) bool {
 	// cond:
 	// result: (MOVWload [c] ptr mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -7013,6 +7322,7 @@ func rewriteValueARM_OpARMMOVWloadidx_0(v *Value) bool {
 	// cond:
 	// result: (MOVWload [c] ptr mem)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -7030,6 +7340,7 @@ func rewriteValueARM_OpARMMOVWloadidx_0(v *Value) bool {
 	// cond:
 	// result: (MOVWloadshiftLL ptr idx [c] mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLLconst {
@@ -7049,6 +7360,7 @@ func rewriteValueARM_OpARMMOVWloadidx_0(v *Value) bool {
 	// cond:
 	// result: (MOVWloadshiftLL ptr idx [c] mem)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSLLconst {
 			break
@@ -7068,6 +7380,7 @@ func rewriteValueARM_OpARMMOVWloadidx_0(v *Value) bool {
 	// cond:
 	// result: (MOVWloadshiftRL ptr idx [c] mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRLconst {
@@ -7087,6 +7400,7 @@ func rewriteValueARM_OpARMMOVWloadidx_0(v *Value) bool {
 	// cond:
 	// result: (MOVWloadshiftRL ptr idx [c] mem)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRLconst {
 			break
@@ -7106,6 +7420,7 @@ func rewriteValueARM_OpARMMOVWloadidx_0(v *Value) bool {
 	// cond:
 	// result: (MOVWloadshiftRA ptr idx [c] mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRAconst {
@@ -7125,6 +7440,7 @@ func rewriteValueARM_OpARMMOVWloadidx_0(v *Value) bool {
 	// cond:
 	// result: (MOVWloadshiftRA ptr idx [c] mem)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRAconst {
 			break
@@ -7148,6 +7464,7 @@ func rewriteValueARM_OpARMMOVWloadshiftLL_0(v *Value) bool {
 	// result: x
 	for {
 		c := v.AuxInt
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -7155,6 +7472,7 @@ func rewriteValueARM_OpARMMOVWloadshiftLL_0(v *Value) bool {
 			break
 		}
 		d := v_2.AuxInt
+		_ = v_2.Args[3]
 		ptr2 := v_2.Args[0]
 		if idx != v_2.Args[1] {
 			break
@@ -7173,6 +7491,7 @@ func rewriteValueARM_OpARMMOVWloadshiftLL_0(v *Value) bool {
 	// result: (MOVWload [int64(uint32(c)<<uint64(d))] ptr mem)
 	for {
 		d := v.AuxInt
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -7194,6 +7513,7 @@ func rewriteValueARM_OpARMMOVWloadshiftRA_0(v *Value) bool {
 	// result: x
 	for {
 		c := v.AuxInt
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -7201,6 +7521,7 @@ func rewriteValueARM_OpARMMOVWloadshiftRA_0(v *Value) bool {
 			break
 		}
 		d := v_2.AuxInt
+		_ = v_2.Args[3]
 		ptr2 := v_2.Args[0]
 		if idx != v_2.Args[1] {
 			break
@@ -7219,6 +7540,7 @@ func rewriteValueARM_OpARMMOVWloadshiftRA_0(v *Value) bool {
 	// result: (MOVWload [int64(int32(c)>>uint64(d))] ptr mem)
 	for {
 		d := v.AuxInt
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -7240,6 +7562,7 @@ func rewriteValueARM_OpARMMOVWloadshiftRL_0(v *Value) bool {
 	// result: x
 	for {
 		c := v.AuxInt
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -7247,6 +7570,7 @@ func rewriteValueARM_OpARMMOVWloadshiftRL_0(v *Value) bool {
 			break
 		}
 		d := v_2.AuxInt
+		_ = v_2.Args[3]
 		ptr2 := v_2.Args[0]
 		if idx != v_2.Args[1] {
 			break
@@ -7265,6 +7589,7 @@ func rewriteValueARM_OpARMMOVWloadshiftRL_0(v *Value) bool {
 	// result: (MOVWload [int64(uint32(c)>>uint64(d))] ptr mem)
 	for {
 		d := v.AuxInt
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -7319,6 +7644,7 @@ func rewriteValueARM_OpARMMOVWstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMADDconst {
 			break
@@ -7341,6 +7667,7 @@ func rewriteValueARM_OpARMMOVWstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSUBconst {
 			break
@@ -7363,6 +7690,7 @@ func rewriteValueARM_OpARMMOVWstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWaddr {
 			break
@@ -7391,10 +7719,12 @@ func rewriteValueARM_OpARMMOVWstore_0(v *Value) bool {
 			break
 		}
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMADD {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -7417,11 +7747,13 @@ func rewriteValueARM_OpARMMOVWstore_0(v *Value) bool {
 			break
 		}
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMADDshiftLL {
 			break
 		}
 		c := v_0.AuxInt
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -7445,11 +7777,13 @@ func rewriteValueARM_OpARMMOVWstore_0(v *Value) bool {
 			break
 		}
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMADDshiftRL {
 			break
 		}
 		c := v_0.AuxInt
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -7473,11 +7807,13 @@ func rewriteValueARM_OpARMMOVWstore_0(v *Value) bool {
 			break
 		}
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMADDshiftRA {
 			break
 		}
 		c := v_0.AuxInt
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -7500,6 +7836,7 @@ func rewriteValueARM_OpARMMOVWstoreidx_0(v *Value) bool {
 	// cond:
 	// result: (MOVWstore [c] ptr val mem)
 	for {
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -7519,6 +7856,7 @@ func rewriteValueARM_OpARMMOVWstoreidx_0(v *Value) bool {
 	// cond:
 	// result: (MOVWstore [c] ptr val mem)
 	for {
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -7538,6 +7876,7 @@ func rewriteValueARM_OpARMMOVWstoreidx_0(v *Value) bool {
 	// cond:
 	// result: (MOVWstoreshiftLL ptr idx [c] val mem)
 	for {
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLLconst {
@@ -7559,6 +7898,7 @@ func rewriteValueARM_OpARMMOVWstoreidx_0(v *Value) bool {
 	// cond:
 	// result: (MOVWstoreshiftLL ptr idx [c] val mem)
 	for {
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSLLconst {
 			break
@@ -7580,6 +7920,7 @@ func rewriteValueARM_OpARMMOVWstoreidx_0(v *Value) bool {
 	// cond:
 	// result: (MOVWstoreshiftRL ptr idx [c] val mem)
 	for {
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRLconst {
@@ -7601,6 +7942,7 @@ func rewriteValueARM_OpARMMOVWstoreidx_0(v *Value) bool {
 	// cond:
 	// result: (MOVWstoreshiftRL ptr idx [c] val mem)
 	for {
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRLconst {
 			break
@@ -7622,6 +7964,7 @@ func rewriteValueARM_OpARMMOVWstoreidx_0(v *Value) bool {
 	// cond:
 	// result: (MOVWstoreshiftRA ptr idx [c] val mem)
 	for {
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRAconst {
@@ -7643,6 +7986,7 @@ func rewriteValueARM_OpARMMOVWstoreidx_0(v *Value) bool {
 	// cond:
 	// result: (MOVWstoreshiftRA ptr idx [c] val mem)
 	for {
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRAconst {
 			break
@@ -7668,6 +8012,7 @@ func rewriteValueARM_OpARMMOVWstoreshiftLL_0(v *Value) bool {
 	// result: (MOVWstore [int64(uint32(c)<<uint64(d))] ptr val mem)
 	for {
 		d := v.AuxInt
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -7691,6 +8036,7 @@ func rewriteValueARM_OpARMMOVWstoreshiftRA_0(v *Value) bool {
 	// result: (MOVWstore [int64(int32(c)>>uint64(d))] ptr val mem)
 	for {
 		d := v.AuxInt
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -7714,6 +8060,7 @@ func rewriteValueARM_OpARMMOVWstoreshiftRL_0(v *Value) bool {
 	// result: (MOVWstore [int64(uint32(c)>>uint64(d))] ptr val mem)
 	for {
 		d := v.AuxInt
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -7736,6 +8083,7 @@ func rewriteValueARM_OpARMMUL_0(v *Value) bool {
 	// cond: int32(c) == -1
 	// result: (RSBconst [0] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -7754,6 +8102,7 @@ func rewriteValueARM_OpARMMUL_0(v *Value) bool {
 	// cond: int32(c) == -1
 	// result: (RSBconst [0] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -7772,6 +8121,7 @@ func rewriteValueARM_OpARMMUL_0(v *Value) bool {
 	// cond:
 	// result: (MOVWconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
 			break
@@ -7787,6 +8137,7 @@ func rewriteValueARM_OpARMMUL_0(v *Value) bool {
 	// cond:
 	// result: (MOVWconst [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -7802,6 +8153,7 @@ func rewriteValueARM_OpARMMUL_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -7819,6 +8171,7 @@ func rewriteValueARM_OpARMMUL_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -7836,6 +8189,7 @@ func rewriteValueARM_OpARMMUL_0(v *Value) bool {
 	// cond: isPowerOfTwo(c)
 	// result: (SLLconst [log2(c)] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -7854,6 +8208,7 @@ func rewriteValueARM_OpARMMUL_0(v *Value) bool {
 	// cond: isPowerOfTwo(c)
 	// result: (SLLconst [log2(c)] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -7872,6 +8227,7 @@ func rewriteValueARM_OpARMMUL_0(v *Value) bool {
 	// cond: isPowerOfTwo(c-1) && int32(c) >= 3
 	// result: (ADDshiftLL x x [log2(c-1)])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -7891,6 +8247,7 @@ func rewriteValueARM_OpARMMUL_0(v *Value) bool {
 	// cond: isPowerOfTwo(c-1) && int32(c) >= 3
 	// result: (ADDshiftLL x x [log2(c-1)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -7915,6 +8272,7 @@ func rewriteValueARM_OpARMMUL_10(v *Value) bool {
 	// cond: isPowerOfTwo(c+1) && int32(c) >= 7
 	// result: (RSBshiftLL x x [log2(c+1)])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -7934,6 +8292,7 @@ func rewriteValueARM_OpARMMUL_10(v *Value) bool {
 	// cond: isPowerOfTwo(c+1) && int32(c) >= 7
 	// result: (RSBshiftLL x x [log2(c+1)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -7953,6 +8312,7 @@ func rewriteValueARM_OpARMMUL_10(v *Value) bool {
 	// cond: c%3 == 0 && isPowerOfTwo(c/3) && is32Bit(c)
 	// result: (SLLconst [log2(c/3)] (ADDshiftLL <x.Type> x x [1]))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -7975,6 +8335,7 @@ func rewriteValueARM_OpARMMUL_10(v *Value) bool {
 	// cond: c%3 == 0 && isPowerOfTwo(c/3) && is32Bit(c)
 	// result: (SLLconst [log2(c/3)] (ADDshiftLL <x.Type> x x [1]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -7997,6 +8358,7 @@ func rewriteValueARM_OpARMMUL_10(v *Value) bool {
 	// cond: c%5 == 0 && isPowerOfTwo(c/5) && is32Bit(c)
 	// result: (SLLconst [log2(c/5)] (ADDshiftLL <x.Type> x x [2]))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -8019,6 +8381,7 @@ func rewriteValueARM_OpARMMUL_10(v *Value) bool {
 	// cond: c%5 == 0 && isPowerOfTwo(c/5) && is32Bit(c)
 	// result: (SLLconst [log2(c/5)] (ADDshiftLL <x.Type> x x [2]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -8041,6 +8404,7 @@ func rewriteValueARM_OpARMMUL_10(v *Value) bool {
 	// cond: c%7 == 0 && isPowerOfTwo(c/7) && is32Bit(c)
 	// result: (SLLconst [log2(c/7)] (RSBshiftLL <x.Type> x x [3]))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -8063,6 +8427,7 @@ func rewriteValueARM_OpARMMUL_10(v *Value) bool {
 	// cond: c%7 == 0 && isPowerOfTwo(c/7) && is32Bit(c)
 	// result: (SLLconst [log2(c/7)] (RSBshiftLL <x.Type> x x [3]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -8085,6 +8450,7 @@ func rewriteValueARM_OpARMMUL_10(v *Value) bool {
 	// cond: c%9 == 0 && isPowerOfTwo(c/9) && is32Bit(c)
 	// result: (SLLconst [log2(c/9)] (ADDshiftLL <x.Type> x x [3]))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -8107,6 +8473,7 @@ func rewriteValueARM_OpARMMUL_10(v *Value) bool {
 	// cond: c%9 == 0 && isPowerOfTwo(c/9) && is32Bit(c)
 	// result: (SLLconst [log2(c/9)] (ADDshiftLL <x.Type> x x [3]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -8132,6 +8499,7 @@ func rewriteValueARM_OpARMMUL_20(v *Value) bool {
 	// cond:
 	// result: (MOVWconst [int64(int32(c*d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -8150,6 +8518,7 @@ func rewriteValueARM_OpARMMUL_20(v *Value) bool {
 	// cond:
 	// result: (MOVWconst [int64(int32(c*d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -8173,6 +8542,7 @@ func rewriteValueARM_OpARMMULA_0(v *Value) bool {
 	// cond: int32(c) == -1
 	// result: (SUB a x)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -8192,6 +8562,7 @@ func rewriteValueARM_OpARMMULA_0(v *Value) bool {
 	// cond:
 	// result: a
 	for {
+		_ = v.Args[2]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
 			break
@@ -8209,6 +8580,7 @@ func rewriteValueARM_OpARMMULA_0(v *Value) bool {
 	// cond:
 	// result: (ADD x a)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -8227,6 +8599,7 @@ func rewriteValueARM_OpARMMULA_0(v *Value) bool {
 	// cond: isPowerOfTwo(c)
 	// result: (ADD (SLLconst <x.Type> [log2(c)] x) a)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -8249,6 +8622,7 @@ func rewriteValueARM_OpARMMULA_0(v *Value) bool {
 	// cond: isPowerOfTwo(c-1) && int32(c) >= 3
 	// result: (ADD (ADDshiftLL <x.Type> x x [log2(c-1)]) a)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -8272,6 +8646,7 @@ func rewriteValueARM_OpARMMULA_0(v *Value) bool {
 	// cond: isPowerOfTwo(c+1) && int32(c) >= 7
 	// result: (ADD (RSBshiftLL <x.Type> x x [log2(c+1)]) a)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -8295,6 +8670,7 @@ func rewriteValueARM_OpARMMULA_0(v *Value) bool {
 	// cond: c%3 == 0 && isPowerOfTwo(c/3) && is32Bit(c)
 	// result: (ADD (SLLconst <x.Type> [log2(c/3)] (ADDshiftLL <x.Type> x x [1])) a)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -8321,6 +8697,7 @@ func rewriteValueARM_OpARMMULA_0(v *Value) bool {
 	// cond: c%5 == 0 && isPowerOfTwo(c/5) && is32Bit(c)
 	// result: (ADD (SLLconst <x.Type> [log2(c/5)] (ADDshiftLL <x.Type> x x [2])) a)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -8347,6 +8724,7 @@ func rewriteValueARM_OpARMMULA_0(v *Value) bool {
 	// cond: c%7 == 0 && isPowerOfTwo(c/7) && is32Bit(c)
 	// result: (ADD (SLLconst <x.Type> [log2(c/7)] (RSBshiftLL <x.Type> x x [3])) a)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -8373,6 +8751,7 @@ func rewriteValueARM_OpARMMULA_0(v *Value) bool {
 	// cond: c%9 == 0 && isPowerOfTwo(c/9) && is32Bit(c)
 	// result: (ADD (SLLconst <x.Type> [log2(c/9)] (ADDshiftLL <x.Type> x x [3])) a)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -8404,6 +8783,7 @@ func rewriteValueARM_OpARMMULA_10(v *Value) bool {
 	// cond: int32(c) == -1
 	// result: (SUB a x)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -8423,6 +8803,7 @@ func rewriteValueARM_OpARMMULA_10(v *Value) bool {
 	// cond:
 	// result: a
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -8440,6 +8821,7 @@ func rewriteValueARM_OpARMMULA_10(v *Value) bool {
 	// cond:
 	// result: (ADD x a)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -8458,6 +8840,7 @@ func rewriteValueARM_OpARMMULA_10(v *Value) bool {
 	// cond: isPowerOfTwo(c)
 	// result: (ADD (SLLconst <x.Type> [log2(c)] x) a)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -8480,6 +8863,7 @@ func rewriteValueARM_OpARMMULA_10(v *Value) bool {
 	// cond: isPowerOfTwo(c-1) && int32(c) >= 3
 	// result: (ADD (ADDshiftLL <x.Type> x x [log2(c-1)]) a)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -8503,6 +8887,7 @@ func rewriteValueARM_OpARMMULA_10(v *Value) bool {
 	// cond: isPowerOfTwo(c+1) && int32(c) >= 7
 	// result: (ADD (RSBshiftLL <x.Type> x x [log2(c+1)]) a)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -8526,6 +8911,7 @@ func rewriteValueARM_OpARMMULA_10(v *Value) bool {
 	// cond: c%3 == 0 && isPowerOfTwo(c/3) && is32Bit(c)
 	// result: (ADD (SLLconst <x.Type> [log2(c/3)] (ADDshiftLL <x.Type> x x [1])) a)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -8552,6 +8938,7 @@ func rewriteValueARM_OpARMMULA_10(v *Value) bool {
 	// cond: c%5 == 0 && isPowerOfTwo(c/5) && is32Bit(c)
 	// result: (ADD (SLLconst <x.Type> [log2(c/5)] (ADDshiftLL <x.Type> x x [2])) a)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -8578,6 +8965,7 @@ func rewriteValueARM_OpARMMULA_10(v *Value) bool {
 	// cond: c%7 == 0 && isPowerOfTwo(c/7) && is32Bit(c)
 	// result: (ADD (SLLconst <x.Type> [log2(c/7)] (RSBshiftLL <x.Type> x x [3])) a)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -8604,6 +8992,7 @@ func rewriteValueARM_OpARMMULA_10(v *Value) bool {
 	// cond: c%9 == 0 && isPowerOfTwo(c/9) && is32Bit(c)
 	// result: (ADD (SLLconst <x.Type> [log2(c/9)] (ADDshiftLL <x.Type> x x [3])) a)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -8633,6 +9022,7 @@ func rewriteValueARM_OpARMMULA_20(v *Value) bool {
 	// cond:
 	// result: (ADDconst [int64(int32(c*d))] a)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -8718,6 +9108,7 @@ func rewriteValueARM_OpARMMVN_0(v *Value) bool {
 		if v_0.Op != OpARMSLL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpARMMVNshiftLLreg)
@@ -8733,6 +9124,7 @@ func rewriteValueARM_OpARMMVN_0(v *Value) bool {
 		if v_0.Op != OpARMSRL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpARMMVNshiftRLreg)
@@ -8748,6 +9140,7 @@ func rewriteValueARM_OpARMMVN_0(v *Value) bool {
 		if v_0.Op != OpARMSRA {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpARMMVNshiftRAreg)
@@ -8779,6 +9172,7 @@ func rewriteValueARM_OpARMMVNshiftLLreg_0(v *Value) bool {
 	// cond:
 	// result: (MVNshiftLL x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -8814,6 +9208,7 @@ func rewriteValueARM_OpARMMVNshiftRAreg_0(v *Value) bool {
 	// cond:
 	// result: (MVNshiftRA x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -8849,6 +9244,7 @@ func rewriteValueARM_OpARMMVNshiftRLreg_0(v *Value) bool {
 	// cond:
 	// result: (MVNshiftRL x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -8943,6 +9339,7 @@ func rewriteValueARM_OpARMOR_0(v *Value) bool {
 	// cond:
 	// result: (ORconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -8958,6 +9355,7 @@ func rewriteValueARM_OpARMOR_0(v *Value) bool {
 	// cond:
 	// result: (ORconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -8973,6 +9371,7 @@ func rewriteValueARM_OpARMOR_0(v *Value) bool {
 	// cond:
 	// result: (ORshiftLL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLLconst {
@@ -8990,6 +9389,7 @@ func rewriteValueARM_OpARMOR_0(v *Value) bool {
 	// cond:
 	// result: (ORshiftLL x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSLLconst {
 			break
@@ -9007,6 +9407,7 @@ func rewriteValueARM_OpARMOR_0(v *Value) bool {
 	// cond:
 	// result: (ORshiftRL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRLconst {
@@ -9024,6 +9425,7 @@ func rewriteValueARM_OpARMOR_0(v *Value) bool {
 	// cond:
 	// result: (ORshiftRL x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRLconst {
 			break
@@ -9041,6 +9443,7 @@ func rewriteValueARM_OpARMOR_0(v *Value) bool {
 	// cond:
 	// result: (ORshiftRA x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRAconst {
@@ -9058,6 +9461,7 @@ func rewriteValueARM_OpARMOR_0(v *Value) bool {
 	// cond:
 	// result: (ORshiftRA x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRAconst {
 			break
@@ -9075,11 +9479,13 @@ func rewriteValueARM_OpARMOR_0(v *Value) bool {
 	// cond:
 	// result: (ORshiftLLreg x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLL {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpARMORshiftLLreg)
@@ -9092,10 +9498,12 @@ func rewriteValueARM_OpARMOR_0(v *Value) bool {
 	// cond:
 	// result: (ORshiftLLreg x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSLL {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -9112,11 +9520,13 @@ func rewriteValueARM_OpARMOR_10(v *Value) bool {
 	// cond:
 	// result: (ORshiftRLreg x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRL {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpARMORshiftRLreg)
@@ -9129,10 +9539,12 @@ func rewriteValueARM_OpARMOR_10(v *Value) bool {
 	// cond:
 	// result: (ORshiftRLreg x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRL {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -9146,11 +9558,13 @@ func rewriteValueARM_OpARMOR_10(v *Value) bool {
 	// cond:
 	// result: (ORshiftRAreg x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRA {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpARMORshiftRAreg)
@@ -9163,10 +9577,12 @@ func rewriteValueARM_OpARMOR_10(v *Value) bool {
 	// cond:
 	// result: (ORshiftRAreg x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRA {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -9180,6 +9596,7 @@ func rewriteValueARM_OpARMOR_10(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -9257,6 +9674,7 @@ func rewriteValueARM_OpARMORshiftLL_0(v *Value) bool {
 	// result: (ORconst [c] (SLLconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -9276,6 +9694,7 @@ func rewriteValueARM_OpARMORshiftLL_0(v *Value) bool {
 	// result: (ORconst x [int64(uint32(c)<<uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -9292,6 +9711,7 @@ func rewriteValueARM_OpARMORshiftLL_0(v *Value) bool {
 	// result: (SRRconst [32-c] x)
 	for {
 		c := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRLconst {
 			break
@@ -9313,6 +9733,7 @@ func rewriteValueARM_OpARMORshiftLL_0(v *Value) bool {
 	// result: y
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		if y.Op != OpARMSLLconst {
@@ -9339,6 +9760,7 @@ func rewriteValueARM_OpARMORshiftLLreg_0(v *Value) bool {
 	// cond:
 	// result: (ORconst [c] (SLL <x.Type> x y))
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -9358,6 +9780,7 @@ func rewriteValueARM_OpARMORshiftLLreg_0(v *Value) bool {
 	// cond:
 	// result: (ORshiftLL x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -9381,6 +9804,7 @@ func rewriteValueARM_OpARMORshiftRA_0(v *Value) bool {
 	// result: (ORconst [c] (SRAconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -9400,6 +9824,7 @@ func rewriteValueARM_OpARMORshiftRA_0(v *Value) bool {
 	// result: (ORconst x [int64(int32(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -9416,6 +9841,7 @@ func rewriteValueARM_OpARMORshiftRA_0(v *Value) bool {
 	// result: y
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		if y.Op != OpARMSRAconst {
@@ -9442,6 +9868,7 @@ func rewriteValueARM_OpARMORshiftRAreg_0(v *Value) bool {
 	// cond:
 	// result: (ORconst [c] (SRA <x.Type> x y))
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -9461,6 +9888,7 @@ func rewriteValueARM_OpARMORshiftRAreg_0(v *Value) bool {
 	// cond:
 	// result: (ORshiftRA x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -9484,6 +9912,7 @@ func rewriteValueARM_OpARMORshiftRL_0(v *Value) bool {
 	// result: (ORconst [c] (SRLconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -9503,6 +9932,7 @@ func rewriteValueARM_OpARMORshiftRL_0(v *Value) bool {
 	// result: (ORconst x [int64(uint32(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -9519,6 +9949,7 @@ func rewriteValueARM_OpARMORshiftRL_0(v *Value) bool {
 	// result: (SRRconst [   c] x)
 	for {
 		c := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSLLconst {
 			break
@@ -9540,6 +9971,7 @@ func rewriteValueARM_OpARMORshiftRL_0(v *Value) bool {
 	// result: y
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		if y.Op != OpARMSRLconst {
@@ -9566,6 +9998,7 @@ func rewriteValueARM_OpARMORshiftRLreg_0(v *Value) bool {
 	// cond:
 	// result: (ORconst [c] (SRL <x.Type> x y))
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -9585,6 +10018,7 @@ func rewriteValueARM_OpARMORshiftRLreg_0(v *Value) bool {
 	// cond:
 	// result: (ORshiftRL x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -9605,6 +10039,7 @@ func rewriteValueARM_OpARMRSB_0(v *Value) bool {
 	// cond:
 	// result: (SUBconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -9620,6 +10055,7 @@ func rewriteValueARM_OpARMRSB_0(v *Value) bool {
 	// cond:
 	// result: (RSBconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -9635,6 +10071,7 @@ func rewriteValueARM_OpARMRSB_0(v *Value) bool {
 	// cond:
 	// result: (RSBshiftLL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLLconst {
@@ -9652,6 +10089,7 @@ func rewriteValueARM_OpARMRSB_0(v *Value) bool {
 	// cond:
 	// result: (SUBshiftLL x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSLLconst {
 			break
@@ -9669,6 +10107,7 @@ func rewriteValueARM_OpARMRSB_0(v *Value) bool {
 	// cond:
 	// result: (RSBshiftRL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRLconst {
@@ -9686,6 +10125,7 @@ func rewriteValueARM_OpARMRSB_0(v *Value) bool {
 	// cond:
 	// result: (SUBshiftRL x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRLconst {
 			break
@@ -9703,6 +10143,7 @@ func rewriteValueARM_OpARMRSB_0(v *Value) bool {
 	// cond:
 	// result: (RSBshiftRA x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRAconst {
@@ -9720,6 +10161,7 @@ func rewriteValueARM_OpARMRSB_0(v *Value) bool {
 	// cond:
 	// result: (SUBshiftRA x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRAconst {
 			break
@@ -9737,11 +10179,13 @@ func rewriteValueARM_OpARMRSB_0(v *Value) bool {
 	// cond:
 	// result: (RSBshiftLLreg x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLL {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpARMRSBshiftLLreg)
@@ -9754,10 +10198,12 @@ func rewriteValueARM_OpARMRSB_0(v *Value) bool {
 	// cond:
 	// result: (SUBshiftLLreg x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSLL {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -9774,11 +10220,13 @@ func rewriteValueARM_OpARMRSB_10(v *Value) bool {
 	// cond:
 	// result: (RSBshiftRLreg x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRL {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpARMRSBshiftRLreg)
@@ -9791,10 +10239,12 @@ func rewriteValueARM_OpARMRSB_10(v *Value) bool {
 	// cond:
 	// result: (SUBshiftRLreg x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRL {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -9808,11 +10258,13 @@ func rewriteValueARM_OpARMRSB_10(v *Value) bool {
 	// cond:
 	// result: (RSBshiftRAreg x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRA {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpARMRSBshiftRAreg)
@@ -9825,10 +10277,12 @@ func rewriteValueARM_OpARMRSB_10(v *Value) bool {
 	// cond:
 	// result: (SUBshiftRAreg x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRA {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -9842,6 +10296,7 @@ func rewriteValueARM_OpARMRSB_10(v *Value) bool {
 	// cond:
 	// result: (MOVWconst [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -9860,6 +10315,7 @@ func rewriteValueARM_OpARMRSBSshiftLL_0(v *Value) bool {
 	// result: (SUBSconst [c] (SLLconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -9879,6 +10335,7 @@ func rewriteValueARM_OpARMRSBSshiftLL_0(v *Value) bool {
 	// result: (RSBSconst x [int64(uint32(c)<<uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -9899,6 +10356,7 @@ func rewriteValueARM_OpARMRSBSshiftLLreg_0(v *Value) bool {
 	// cond:
 	// result: (SUBSconst [c] (SLL <x.Type> x y))
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -9918,6 +10376,7 @@ func rewriteValueARM_OpARMRSBSshiftLLreg_0(v *Value) bool {
 	// cond:
 	// result: (RSBSshiftLL x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -9941,6 +10400,7 @@ func rewriteValueARM_OpARMRSBSshiftRA_0(v *Value) bool {
 	// result: (SUBSconst [c] (SRAconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -9960,6 +10420,7 @@ func rewriteValueARM_OpARMRSBSshiftRA_0(v *Value) bool {
 	// result: (RSBSconst x [int64(int32(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -9980,6 +10441,7 @@ func rewriteValueARM_OpARMRSBSshiftRAreg_0(v *Value) bool {
 	// cond:
 	// result: (SUBSconst [c] (SRA <x.Type> x y))
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -9999,6 +10461,7 @@ func rewriteValueARM_OpARMRSBSshiftRAreg_0(v *Value) bool {
 	// cond:
 	// result: (RSBSshiftRA x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -10022,6 +10485,7 @@ func rewriteValueARM_OpARMRSBSshiftRL_0(v *Value) bool {
 	// result: (SUBSconst [c] (SRLconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -10041,6 +10505,7 @@ func rewriteValueARM_OpARMRSBSshiftRL_0(v *Value) bool {
 	// result: (RSBSconst x [int64(uint32(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -10061,6 +10526,7 @@ func rewriteValueARM_OpARMRSBSshiftRLreg_0(v *Value) bool {
 	// cond:
 	// result: (SUBSconst [c] (SRL <x.Type> x y))
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -10080,6 +10546,7 @@ func rewriteValueARM_OpARMRSBSshiftRLreg_0(v *Value) bool {
 	// cond:
 	// result: (RSBSshiftRL x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -10168,6 +10635,7 @@ func rewriteValueARM_OpARMRSBshiftLL_0(v *Value) bool {
 	// result: (SUBconst [c] (SLLconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -10187,6 +10655,7 @@ func rewriteValueARM_OpARMRSBshiftLL_0(v *Value) bool {
 	// result: (RSBconst x [int64(uint32(c)<<uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -10203,6 +10672,7 @@ func rewriteValueARM_OpARMRSBshiftLL_0(v *Value) bool {
 	// result: (MOVWconst [0])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLLconst {
@@ -10228,6 +10698,7 @@ func rewriteValueARM_OpARMRSBshiftLLreg_0(v *Value) bool {
 	// cond:
 	// result: (SUBconst [c] (SLL <x.Type> x y))
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -10247,6 +10718,7 @@ func rewriteValueARM_OpARMRSBshiftLLreg_0(v *Value) bool {
 	// cond:
 	// result: (RSBshiftLL x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -10270,6 +10742,7 @@ func rewriteValueARM_OpARMRSBshiftRA_0(v *Value) bool {
 	// result: (SUBconst [c] (SRAconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -10289,6 +10762,7 @@ func rewriteValueARM_OpARMRSBshiftRA_0(v *Value) bool {
 	// result: (RSBconst x [int64(int32(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -10305,6 +10779,7 @@ func rewriteValueARM_OpARMRSBshiftRA_0(v *Value) bool {
 	// result: (MOVWconst [0])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRAconst {
@@ -10330,6 +10805,7 @@ func rewriteValueARM_OpARMRSBshiftRAreg_0(v *Value) bool {
 	// cond:
 	// result: (SUBconst [c] (SRA <x.Type> x y))
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -10349,6 +10825,7 @@ func rewriteValueARM_OpARMRSBshiftRAreg_0(v *Value) bool {
 	// cond:
 	// result: (RSBshiftRA x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -10372,6 +10849,7 @@ func rewriteValueARM_OpARMRSBshiftRL_0(v *Value) bool {
 	// result: (SUBconst [c] (SRLconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -10391,6 +10869,7 @@ func rewriteValueARM_OpARMRSBshiftRL_0(v *Value) bool {
 	// result: (RSBconst x [int64(uint32(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -10407,6 +10886,7 @@ func rewriteValueARM_OpARMRSBshiftRL_0(v *Value) bool {
 	// result: (MOVWconst [0])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRLconst {
@@ -10432,6 +10912,7 @@ func rewriteValueARM_OpARMRSBshiftRLreg_0(v *Value) bool {
 	// cond:
 	// result: (SUBconst [c] (SRL <x.Type> x y))
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -10451,6 +10932,7 @@ func rewriteValueARM_OpARMRSBshiftRLreg_0(v *Value) bool {
 	// cond:
 	// result: (RSBshiftRL x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -10472,6 +10954,7 @@ func rewriteValueARM_OpARMRSCconst_0(v *Value) bool {
 	// result: (RSCconst [int64(int32(c-d))] x flags)
 	for {
 		c := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMADDconst {
 			break
@@ -10490,6 +10973,7 @@ func rewriteValueARM_OpARMRSCconst_0(v *Value) bool {
 	// result: (RSCconst [int64(int32(c+d))] x flags)
 	for {
 		c := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSUBconst {
 			break
@@ -10513,6 +10997,7 @@ func rewriteValueARM_OpARMRSCshiftLL_0(v *Value) bool {
 	// result: (SBCconst [c] (SLLconst <x.Type> x [d]) flags)
 	for {
 		d := v.AuxInt
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -10534,6 +11019,7 @@ func rewriteValueARM_OpARMRSCshiftLL_0(v *Value) bool {
 	// result: (RSCconst x [int64(uint32(c)<<uint64(d))] flags)
 	for {
 		d := v.AuxInt
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -10556,6 +11042,7 @@ func rewriteValueARM_OpARMRSCshiftLLreg_0(v *Value) bool {
 	// cond:
 	// result: (SBCconst [c] (SLL <x.Type> x y) flags)
 	for {
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -10577,6 +11064,7 @@ func rewriteValueARM_OpARMRSCshiftLLreg_0(v *Value) bool {
 	// cond:
 	// result: (RSCshiftLL x y [c] flags)
 	for {
+		_ = v.Args[3]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -10602,6 +11090,7 @@ func rewriteValueARM_OpARMRSCshiftRA_0(v *Value) bool {
 	// result: (SBCconst [c] (SRAconst <x.Type> x [d]) flags)
 	for {
 		d := v.AuxInt
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -10623,6 +11112,7 @@ func rewriteValueARM_OpARMRSCshiftRA_0(v *Value) bool {
 	// result: (RSCconst x [int64(int32(c)>>uint64(d))] flags)
 	for {
 		d := v.AuxInt
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -10645,6 +11135,7 @@ func rewriteValueARM_OpARMRSCshiftRAreg_0(v *Value) bool {
 	// cond:
 	// result: (SBCconst [c] (SRA <x.Type> x y) flags)
 	for {
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -10666,6 +11157,7 @@ func rewriteValueARM_OpARMRSCshiftRAreg_0(v *Value) bool {
 	// cond:
 	// result: (RSCshiftRA x y [c] flags)
 	for {
+		_ = v.Args[3]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -10691,6 +11183,7 @@ func rewriteValueARM_OpARMRSCshiftRL_0(v *Value) bool {
 	// result: (SBCconst [c] (SRLconst <x.Type> x [d]) flags)
 	for {
 		d := v.AuxInt
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -10712,6 +11205,7 @@ func rewriteValueARM_OpARMRSCshiftRL_0(v *Value) bool {
 	// result: (RSCconst x [int64(uint32(c)>>uint64(d))] flags)
 	for {
 		d := v.AuxInt
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -10734,6 +11228,7 @@ func rewriteValueARM_OpARMRSCshiftRLreg_0(v *Value) bool {
 	// cond:
 	// result: (SBCconst [c] (SRL <x.Type> x y) flags)
 	for {
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -10755,6 +11250,7 @@ func rewriteValueARM_OpARMRSCshiftRLreg_0(v *Value) bool {
 	// cond:
 	// result: (RSCshiftRL x y [c] flags)
 	for {
+		_ = v.Args[3]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -10777,6 +11273,7 @@ func rewriteValueARM_OpARMSBC_0(v *Value) bool {
 	// cond:
 	// result: (RSCconst [c] x flags)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -10794,6 +11291,7 @@ func rewriteValueARM_OpARMSBC_0(v *Value) bool {
 	// cond:
 	// result: (SBCconst [c] x flags)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -10811,6 +11309,7 @@ func rewriteValueARM_OpARMSBC_0(v *Value) bool {
 	// cond:
 	// result: (SBCshiftLL x y [c] flags)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLLconst {
@@ -10830,6 +11329,7 @@ func rewriteValueARM_OpARMSBC_0(v *Value) bool {
 	// cond:
 	// result: (RSCshiftLL x y [c] flags)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSLLconst {
 			break
@@ -10849,6 +11349,7 @@ func rewriteValueARM_OpARMSBC_0(v *Value) bool {
 	// cond:
 	// result: (SBCshiftRL x y [c] flags)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRLconst {
@@ -10868,6 +11369,7 @@ func rewriteValueARM_OpARMSBC_0(v *Value) bool {
 	// cond:
 	// result: (RSCshiftRL x y [c] flags)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRLconst {
 			break
@@ -10887,6 +11389,7 @@ func rewriteValueARM_OpARMSBC_0(v *Value) bool {
 	// cond:
 	// result: (SBCshiftRA x y [c] flags)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRAconst {
@@ -10906,6 +11409,7 @@ func rewriteValueARM_OpARMSBC_0(v *Value) bool {
 	// cond:
 	// result: (RSCshiftRA x y [c] flags)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRAconst {
 			break
@@ -10925,11 +11429,13 @@ func rewriteValueARM_OpARMSBC_0(v *Value) bool {
 	// cond:
 	// result: (SBCshiftLLreg x y z flags)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLL {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		flags := v.Args[2]
@@ -10944,10 +11450,12 @@ func rewriteValueARM_OpARMSBC_0(v *Value) bool {
 	// cond:
 	// result: (RSCshiftLLreg x y z flags)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSLL {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -10966,11 +11474,13 @@ func rewriteValueARM_OpARMSBC_10(v *Value) bool {
 	// cond:
 	// result: (SBCshiftRLreg x y z flags)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRL {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		flags := v.Args[2]
@@ -10985,10 +11495,12 @@ func rewriteValueARM_OpARMSBC_10(v *Value) bool {
 	// cond:
 	// result: (RSCshiftRLreg x y z flags)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRL {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -11004,11 +11516,13 @@ func rewriteValueARM_OpARMSBC_10(v *Value) bool {
 	// cond:
 	// result: (SBCshiftRAreg x y z flags)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRA {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		flags := v.Args[2]
@@ -11023,10 +11537,12 @@ func rewriteValueARM_OpARMSBC_10(v *Value) bool {
 	// cond:
 	// result: (RSCshiftRAreg x y z flags)
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRA {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -11046,6 +11562,7 @@ func rewriteValueARM_OpARMSBCconst_0(v *Value) bool {
 	// result: (SBCconst [int64(int32(c-d))] x flags)
 	for {
 		c := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMADDconst {
 			break
@@ -11064,6 +11581,7 @@ func rewriteValueARM_OpARMSBCconst_0(v *Value) bool {
 	// result: (SBCconst [int64(int32(c+d))] x flags)
 	for {
 		c := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSUBconst {
 			break
@@ -11087,6 +11605,7 @@ func rewriteValueARM_OpARMSBCshiftLL_0(v *Value) bool {
 	// result: (RSCconst [c] (SLLconst <x.Type> x [d]) flags)
 	for {
 		d := v.AuxInt
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -11108,6 +11627,7 @@ func rewriteValueARM_OpARMSBCshiftLL_0(v *Value) bool {
 	// result: (SBCconst x [int64(uint32(c)<<uint64(d))] flags)
 	for {
 		d := v.AuxInt
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -11130,6 +11650,7 @@ func rewriteValueARM_OpARMSBCshiftLLreg_0(v *Value) bool {
 	// cond:
 	// result: (RSCconst [c] (SLL <x.Type> x y) flags)
 	for {
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -11151,6 +11672,7 @@ func rewriteValueARM_OpARMSBCshiftLLreg_0(v *Value) bool {
 	// cond:
 	// result: (SBCshiftLL x y [c] flags)
 	for {
+		_ = v.Args[3]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -11176,6 +11698,7 @@ func rewriteValueARM_OpARMSBCshiftRA_0(v *Value) bool {
 	// result: (RSCconst [c] (SRAconst <x.Type> x [d]) flags)
 	for {
 		d := v.AuxInt
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -11197,6 +11720,7 @@ func rewriteValueARM_OpARMSBCshiftRA_0(v *Value) bool {
 	// result: (SBCconst x [int64(int32(c)>>uint64(d))] flags)
 	for {
 		d := v.AuxInt
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -11219,6 +11743,7 @@ func rewriteValueARM_OpARMSBCshiftRAreg_0(v *Value) bool {
 	// cond:
 	// result: (RSCconst [c] (SRA <x.Type> x y) flags)
 	for {
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -11240,6 +11765,7 @@ func rewriteValueARM_OpARMSBCshiftRAreg_0(v *Value) bool {
 	// cond:
 	// result: (SBCshiftRA x y [c] flags)
 	for {
+		_ = v.Args[3]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -11265,6 +11791,7 @@ func rewriteValueARM_OpARMSBCshiftRL_0(v *Value) bool {
 	// result: (RSCconst [c] (SRLconst <x.Type> x [d]) flags)
 	for {
 		d := v.AuxInt
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -11286,6 +11813,7 @@ func rewriteValueARM_OpARMSBCshiftRL_0(v *Value) bool {
 	// result: (SBCconst x [int64(uint32(c)>>uint64(d))] flags)
 	for {
 		d := v.AuxInt
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -11308,6 +11836,7 @@ func rewriteValueARM_OpARMSBCshiftRLreg_0(v *Value) bool {
 	// cond:
 	// result: (RSCconst [c] (SRL <x.Type> x y) flags)
 	for {
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -11329,6 +11858,7 @@ func rewriteValueARM_OpARMSBCshiftRLreg_0(v *Value) bool {
 	// cond:
 	// result: (SBCshiftRL x y [c] flags)
 	for {
+		_ = v.Args[3]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -11351,6 +11881,7 @@ func rewriteValueARM_OpARMSLL_0(v *Value) bool {
 	// cond:
 	// result: (SLLconst x [c&31])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -11386,6 +11917,7 @@ func rewriteValueARM_OpARMSRA_0(v *Value) bool {
 	// cond:
 	// result: (SRAconst x [c&31])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -11404,6 +11936,7 @@ func rewriteValueARM_OpARMSRAcond_0(v *Value) bool {
 	// cond:
 	// result: (SRAconst x [31])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_2 := v.Args[2]
 		if v_2.Op != OpARMFlagEQ {
@@ -11418,6 +11951,7 @@ func rewriteValueARM_OpARMSRAcond_0(v *Value) bool {
 	// cond:
 	// result: (SRA x y)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -11433,6 +11967,7 @@ func rewriteValueARM_OpARMSRAcond_0(v *Value) bool {
 	// cond:
 	// result: (SRAconst x [31])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_2 := v.Args[2]
 		if v_2.Op != OpARMFlagLT_UGT {
@@ -11447,6 +11982,7 @@ func rewriteValueARM_OpARMSRAcond_0(v *Value) bool {
 	// cond:
 	// result: (SRA x y)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -11462,6 +11998,7 @@ func rewriteValueARM_OpARMSRAcond_0(v *Value) bool {
 	// cond:
 	// result: (SRAconst x [31])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_2 := v.Args[2]
 		if v_2.Op != OpARMFlagGT_UGT {
@@ -11496,6 +12033,7 @@ func rewriteValueARM_OpARMSRL_0(v *Value) bool {
 	// cond:
 	// result: (SRLconst x [c&31])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -11531,6 +12069,7 @@ func rewriteValueARM_OpARMSUB_0(v *Value) bool {
 	// cond:
 	// result: (RSBconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -11546,6 +12085,7 @@ func rewriteValueARM_OpARMSUB_0(v *Value) bool {
 	// cond:
 	// result: (SUBconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -11561,6 +12101,7 @@ func rewriteValueARM_OpARMSUB_0(v *Value) bool {
 	// cond:
 	// result: (SUBshiftLL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLLconst {
@@ -11578,6 +12119,7 @@ func rewriteValueARM_OpARMSUB_0(v *Value) bool {
 	// cond:
 	// result: (RSBshiftLL x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSLLconst {
 			break
@@ -11595,6 +12137,7 @@ func rewriteValueARM_OpARMSUB_0(v *Value) bool {
 	// cond:
 	// result: (SUBshiftRL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRLconst {
@@ -11612,6 +12155,7 @@ func rewriteValueARM_OpARMSUB_0(v *Value) bool {
 	// cond:
 	// result: (RSBshiftRL x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRLconst {
 			break
@@ -11629,6 +12173,7 @@ func rewriteValueARM_OpARMSUB_0(v *Value) bool {
 	// cond:
 	// result: (SUBshiftRA x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRAconst {
@@ -11646,6 +12191,7 @@ func rewriteValueARM_OpARMSUB_0(v *Value) bool {
 	// cond:
 	// result: (RSBshiftRA x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRAconst {
 			break
@@ -11663,11 +12209,13 @@ func rewriteValueARM_OpARMSUB_0(v *Value) bool {
 	// cond:
 	// result: (SUBshiftLLreg x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLL {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpARMSUBshiftLLreg)
@@ -11680,10 +12228,12 @@ func rewriteValueARM_OpARMSUB_0(v *Value) bool {
 	// cond:
 	// result: (RSBshiftLLreg x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSLL {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -11700,11 +12250,13 @@ func rewriteValueARM_OpARMSUB_10(v *Value) bool {
 	// cond:
 	// result: (SUBshiftRLreg x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRL {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpARMSUBshiftRLreg)
@@ -11717,10 +12269,12 @@ func rewriteValueARM_OpARMSUB_10(v *Value) bool {
 	// cond:
 	// result: (RSBshiftRLreg x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRL {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -11734,11 +12288,13 @@ func rewriteValueARM_OpARMSUB_10(v *Value) bool {
 	// cond:
 	// result: (SUBshiftRAreg x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRA {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpARMSUBshiftRAreg)
@@ -11751,10 +12307,12 @@ func rewriteValueARM_OpARMSUB_10(v *Value) bool {
 	// cond:
 	// result: (RSBshiftRAreg x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRA {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -11768,6 +12326,7 @@ func rewriteValueARM_OpARMSUB_10(v *Value) bool {
 	// cond:
 	// result: (MOVWconst [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -11783,6 +12342,7 @@ func rewriteValueARM_OpARMSUBS_0(v *Value) bool {
 	// cond:
 	// result: (SUBSconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -11798,6 +12358,7 @@ func rewriteValueARM_OpARMSUBS_0(v *Value) bool {
 	// cond:
 	// result: (SUBSshiftLL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLLconst {
@@ -11815,6 +12376,7 @@ func rewriteValueARM_OpARMSUBS_0(v *Value) bool {
 	// cond:
 	// result: (RSBSshiftLL x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSLLconst {
 			break
@@ -11832,6 +12394,7 @@ func rewriteValueARM_OpARMSUBS_0(v *Value) bool {
 	// cond:
 	// result: (SUBSshiftRL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRLconst {
@@ -11849,6 +12412,7 @@ func rewriteValueARM_OpARMSUBS_0(v *Value) bool {
 	// cond:
 	// result: (RSBSshiftRL x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRLconst {
 			break
@@ -11866,6 +12430,7 @@ func rewriteValueARM_OpARMSUBS_0(v *Value) bool {
 	// cond:
 	// result: (SUBSshiftRA x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRAconst {
@@ -11883,6 +12448,7 @@ func rewriteValueARM_OpARMSUBS_0(v *Value) bool {
 	// cond:
 	// result: (RSBSshiftRA x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRAconst {
 			break
@@ -11900,11 +12466,13 @@ func rewriteValueARM_OpARMSUBS_0(v *Value) bool {
 	// cond:
 	// result: (SUBSshiftLLreg x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLL {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpARMSUBSshiftLLreg)
@@ -11917,10 +12485,12 @@ func rewriteValueARM_OpARMSUBS_0(v *Value) bool {
 	// cond:
 	// result: (RSBSshiftLLreg x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSLL {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -11934,11 +12504,13 @@ func rewriteValueARM_OpARMSUBS_0(v *Value) bool {
 	// cond:
 	// result: (SUBSshiftRLreg x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRL {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpARMSUBSshiftRLreg)
@@ -11954,10 +12526,12 @@ func rewriteValueARM_OpARMSUBS_10(v *Value) bool {
 	// cond:
 	// result: (RSBSshiftRLreg x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRL {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -11971,11 +12545,13 @@ func rewriteValueARM_OpARMSUBS_10(v *Value) bool {
 	// cond:
 	// result: (SUBSshiftRAreg x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRA {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpARMSUBSshiftRAreg)
@@ -11988,10 +12564,12 @@ func rewriteValueARM_OpARMSUBS_10(v *Value) bool {
 	// cond:
 	// result: (RSBSshiftRAreg x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRA {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -12011,6 +12589,7 @@ func rewriteValueARM_OpARMSUBSshiftLL_0(v *Value) bool {
 	// result: (RSBSconst [c] (SLLconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -12030,6 +12609,7 @@ func rewriteValueARM_OpARMSUBSshiftLL_0(v *Value) bool {
 	// result: (SUBSconst x [int64(uint32(c)<<uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -12050,6 +12630,7 @@ func rewriteValueARM_OpARMSUBSshiftLLreg_0(v *Value) bool {
 	// cond:
 	// result: (RSBSconst [c] (SLL <x.Type> x y))
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -12069,6 +12650,7 @@ func rewriteValueARM_OpARMSUBSshiftLLreg_0(v *Value) bool {
 	// cond:
 	// result: (SUBSshiftLL x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -12092,6 +12674,7 @@ func rewriteValueARM_OpARMSUBSshiftRA_0(v *Value) bool {
 	// result: (RSBSconst [c] (SRAconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -12111,6 +12694,7 @@ func rewriteValueARM_OpARMSUBSshiftRA_0(v *Value) bool {
 	// result: (SUBSconst x [int64(int32(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -12131,6 +12715,7 @@ func rewriteValueARM_OpARMSUBSshiftRAreg_0(v *Value) bool {
 	// cond:
 	// result: (RSBSconst [c] (SRA <x.Type> x y))
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -12150,6 +12735,7 @@ func rewriteValueARM_OpARMSUBSshiftRAreg_0(v *Value) bool {
 	// cond:
 	// result: (SUBSshiftRA x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -12173,6 +12759,7 @@ func rewriteValueARM_OpARMSUBSshiftRL_0(v *Value) bool {
 	// result: (RSBSconst [c] (SRLconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -12192,6 +12779,7 @@ func rewriteValueARM_OpARMSUBSshiftRL_0(v *Value) bool {
 	// result: (SUBSconst x [int64(uint32(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -12212,6 +12800,7 @@ func rewriteValueARM_OpARMSUBSshiftRLreg_0(v *Value) bool {
 	// cond:
 	// result: (RSBSconst [c] (SRL <x.Type> x y))
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -12231,6 +12820,7 @@ func rewriteValueARM_OpARMSUBSshiftRLreg_0(v *Value) bool {
 	// cond:
 	// result: (SUBSshiftRL x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -12364,6 +12954,7 @@ func rewriteValueARM_OpARMSUBshiftLL_0(v *Value) bool {
 	// result: (RSBconst [c] (SLLconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -12383,6 +12974,7 @@ func rewriteValueARM_OpARMSUBshiftLL_0(v *Value) bool {
 	// result: (SUBconst x [int64(uint32(c)<<uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -12399,6 +12991,7 @@ func rewriteValueARM_OpARMSUBshiftLL_0(v *Value) bool {
 	// result: (MOVWconst [0])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLLconst {
@@ -12424,6 +13017,7 @@ func rewriteValueARM_OpARMSUBshiftLLreg_0(v *Value) bool {
 	// cond:
 	// result: (RSBconst [c] (SLL <x.Type> x y))
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -12443,6 +13037,7 @@ func rewriteValueARM_OpARMSUBshiftLLreg_0(v *Value) bool {
 	// cond:
 	// result: (SUBshiftLL x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -12466,6 +13061,7 @@ func rewriteValueARM_OpARMSUBshiftRA_0(v *Value) bool {
 	// result: (RSBconst [c] (SRAconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -12485,6 +13081,7 @@ func rewriteValueARM_OpARMSUBshiftRA_0(v *Value) bool {
 	// result: (SUBconst x [int64(int32(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -12501,6 +13098,7 @@ func rewriteValueARM_OpARMSUBshiftRA_0(v *Value) bool {
 	// result: (MOVWconst [0])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRAconst {
@@ -12526,6 +13124,7 @@ func rewriteValueARM_OpARMSUBshiftRAreg_0(v *Value) bool {
 	// cond:
 	// result: (RSBconst [c] (SRA <x.Type> x y))
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -12545,6 +13144,7 @@ func rewriteValueARM_OpARMSUBshiftRAreg_0(v *Value) bool {
 	// cond:
 	// result: (SUBshiftRA x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -12568,6 +13168,7 @@ func rewriteValueARM_OpARMSUBshiftRL_0(v *Value) bool {
 	// result: (RSBconst [c] (SRLconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -12587,6 +13188,7 @@ func rewriteValueARM_OpARMSUBshiftRL_0(v *Value) bool {
 	// result: (SUBconst x [int64(uint32(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -12603,6 +13205,7 @@ func rewriteValueARM_OpARMSUBshiftRL_0(v *Value) bool {
 	// result: (MOVWconst [0])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRLconst {
@@ -12628,6 +13231,7 @@ func rewriteValueARM_OpARMSUBshiftRLreg_0(v *Value) bool {
 	// cond:
 	// result: (RSBconst [c] (SRL <x.Type> x y))
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -12647,6 +13251,7 @@ func rewriteValueARM_OpARMSUBshiftRLreg_0(v *Value) bool {
 	// cond:
 	// result: (SUBshiftRL x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -12667,6 +13272,7 @@ func rewriteValueARM_OpARMXOR_0(v *Value) bool {
 	// cond:
 	// result: (XORconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -12682,6 +13288,7 @@ func rewriteValueARM_OpARMXOR_0(v *Value) bool {
 	// cond:
 	// result: (XORconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -12697,6 +13304,7 @@ func rewriteValueARM_OpARMXOR_0(v *Value) bool {
 	// cond:
 	// result: (XORshiftLL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLLconst {
@@ -12714,6 +13322,7 @@ func rewriteValueARM_OpARMXOR_0(v *Value) bool {
 	// cond:
 	// result: (XORshiftLL x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSLLconst {
 			break
@@ -12731,6 +13340,7 @@ func rewriteValueARM_OpARMXOR_0(v *Value) bool {
 	// cond:
 	// result: (XORshiftRL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRLconst {
@@ -12748,6 +13358,7 @@ func rewriteValueARM_OpARMXOR_0(v *Value) bool {
 	// cond:
 	// result: (XORshiftRL x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRLconst {
 			break
@@ -12765,6 +13376,7 @@ func rewriteValueARM_OpARMXOR_0(v *Value) bool {
 	// cond:
 	// result: (XORshiftRA x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRAconst {
@@ -12782,6 +13394,7 @@ func rewriteValueARM_OpARMXOR_0(v *Value) bool {
 	// cond:
 	// result: (XORshiftRA x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRAconst {
 			break
@@ -12799,6 +13412,7 @@ func rewriteValueARM_OpARMXOR_0(v *Value) bool {
 	// cond:
 	// result: (XORshiftRR x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRRconst {
@@ -12816,6 +13430,7 @@ func rewriteValueARM_OpARMXOR_0(v *Value) bool {
 	// cond:
 	// result: (XORshiftRR x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRRconst {
 			break
@@ -12836,11 +13451,13 @@ func rewriteValueARM_OpARMXOR_10(v *Value) bool {
 	// cond:
 	// result: (XORshiftLLreg x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLL {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpARMXORshiftLLreg)
@@ -12853,10 +13470,12 @@ func rewriteValueARM_OpARMXOR_10(v *Value) bool {
 	// cond:
 	// result: (XORshiftLLreg x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSLL {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -12870,11 +13489,13 @@ func rewriteValueARM_OpARMXOR_10(v *Value) bool {
 	// cond:
 	// result: (XORshiftRLreg x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRL {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpARMXORshiftRLreg)
@@ -12887,10 +13508,12 @@ func rewriteValueARM_OpARMXOR_10(v *Value) bool {
 	// cond:
 	// result: (XORshiftRLreg x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRL {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -12904,11 +13527,13 @@ func rewriteValueARM_OpARMXOR_10(v *Value) bool {
 	// cond:
 	// result: (XORshiftRAreg x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRA {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpARMXORshiftRAreg)
@@ -12921,10 +13546,12 @@ func rewriteValueARM_OpARMXOR_10(v *Value) bool {
 	// cond:
 	// result: (XORshiftRAreg x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRA {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -12938,6 +13565,7 @@ func rewriteValueARM_OpARMXOR_10(v *Value) bool {
 	// cond:
 	// result: (MOVWconst [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -13002,6 +13630,7 @@ func rewriteValueARM_OpARMXORshiftLL_0(v *Value) bool {
 	// result: (XORconst [c] (SLLconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -13021,6 +13650,7 @@ func rewriteValueARM_OpARMXORshiftLL_0(v *Value) bool {
 	// result: (XORconst x [int64(uint32(c)<<uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -13037,6 +13667,7 @@ func rewriteValueARM_OpARMXORshiftLL_0(v *Value) bool {
 	// result: (SRRconst [32-c] x)
 	for {
 		c := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSRLconst {
 			break
@@ -13058,6 +13689,7 @@ func rewriteValueARM_OpARMXORshiftLL_0(v *Value) bool {
 	// result: (MOVWconst [0])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSLLconst {
@@ -13083,6 +13715,7 @@ func rewriteValueARM_OpARMXORshiftLLreg_0(v *Value) bool {
 	// cond:
 	// result: (XORconst [c] (SLL <x.Type> x y))
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -13102,6 +13735,7 @@ func rewriteValueARM_OpARMXORshiftLLreg_0(v *Value) bool {
 	// cond:
 	// result: (XORshiftLL x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -13125,6 +13759,7 @@ func rewriteValueARM_OpARMXORshiftRA_0(v *Value) bool {
 	// result: (XORconst [c] (SRAconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -13144,6 +13779,7 @@ func rewriteValueARM_OpARMXORshiftRA_0(v *Value) bool {
 	// result: (XORconst x [int64(int32(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -13160,6 +13796,7 @@ func rewriteValueARM_OpARMXORshiftRA_0(v *Value) bool {
 	// result: (MOVWconst [0])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRAconst {
@@ -13185,6 +13822,7 @@ func rewriteValueARM_OpARMXORshiftRAreg_0(v *Value) bool {
 	// cond:
 	// result: (XORconst [c] (SRA <x.Type> x y))
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -13204,6 +13842,7 @@ func rewriteValueARM_OpARMXORshiftRAreg_0(v *Value) bool {
 	// cond:
 	// result: (XORshiftRA x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -13227,6 +13866,7 @@ func rewriteValueARM_OpARMXORshiftRL_0(v *Value) bool {
 	// result: (XORconst [c] (SRLconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -13246,6 +13886,7 @@ func rewriteValueARM_OpARMXORshiftRL_0(v *Value) bool {
 	// result: (XORconst x [int64(uint32(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -13262,6 +13903,7 @@ func rewriteValueARM_OpARMXORshiftRL_0(v *Value) bool {
 	// result: (SRRconst [   c] x)
 	for {
 		c := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMSLLconst {
 			break
@@ -13283,6 +13925,7 @@ func rewriteValueARM_OpARMXORshiftRL_0(v *Value) bool {
 	// result: (MOVWconst [0])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMSRLconst {
@@ -13308,6 +13951,7 @@ func rewriteValueARM_OpARMXORshiftRLreg_0(v *Value) bool {
 	// cond:
 	// result: (XORconst [c] (SRL <x.Type> x y))
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -13327,6 +13971,7 @@ func rewriteValueARM_OpARMXORshiftRLreg_0(v *Value) bool {
 	// cond:
 	// result: (XORshiftRL x y [c])
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -13350,6 +13995,7 @@ func rewriteValueARM_OpARMXORshiftRR_0(v *Value) bool {
 	// result: (XORconst [c] (SRRconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARMMOVWconst {
 			break
@@ -13369,6 +14015,7 @@ func rewriteValueARM_OpARMXORshiftRR_0(v *Value) bool {
 	// result: (XORconst x [int64(uint32(c)>>uint64(d)|uint32(c)<<uint64(32-d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARMMOVWconst {
@@ -13387,6 +14034,7 @@ func rewriteValueARM_OpAdd16_0(v *Value) bool {
 	// cond:
 	// result: (ADD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMADD)
@@ -13400,6 +14048,7 @@ func rewriteValueARM_OpAdd32_0(v *Value) bool {
 	// cond:
 	// result: (ADD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMADD)
@@ -13413,6 +14062,7 @@ func rewriteValueARM_OpAdd32F_0(v *Value) bool {
 	// cond:
 	// result: (ADDF x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMADDF)
@@ -13426,6 +14076,7 @@ func rewriteValueARM_OpAdd32carry_0(v *Value) bool {
 	// cond:
 	// result: (ADDS x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMADDS)
@@ -13439,6 +14090,7 @@ func rewriteValueARM_OpAdd32withcarry_0(v *Value) bool {
 	// cond:
 	// result: (ADC x y c)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		c := v.Args[2]
@@ -13454,6 +14106,7 @@ func rewriteValueARM_OpAdd64F_0(v *Value) bool {
 	// cond:
 	// result: (ADDD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMADDD)
@@ -13467,6 +14120,7 @@ func rewriteValueARM_OpAdd8_0(v *Value) bool {
 	// cond:
 	// result: (ADD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMADD)
@@ -13480,6 +14134,7 @@ func rewriteValueARM_OpAddPtr_0(v *Value) bool {
 	// cond:
 	// result: (ADD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMADD)
@@ -13506,6 +14161,7 @@ func rewriteValueARM_OpAnd16_0(v *Value) bool {
 	// cond:
 	// result: (AND x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMAND)
@@ -13519,6 +14175,7 @@ func rewriteValueARM_OpAnd32_0(v *Value) bool {
 	// cond:
 	// result: (AND x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMAND)
@@ -13532,6 +14189,7 @@ func rewriteValueARM_OpAnd8_0(v *Value) bool {
 	// cond:
 	// result: (AND x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMAND)
@@ -13545,6 +14203,7 @@ func rewriteValueARM_OpAndB_0(v *Value) bool {
 	// cond:
 	// result: (AND x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMAND)
@@ -13561,6 +14220,7 @@ func rewriteValueARM_OpAvg32u_0(v *Value) bool {
 	// result: (ADD (SRLconst <t> (SUB <t> x y) [1]) y)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMADD)
@@ -13645,6 +14305,7 @@ func rewriteValueARM_OpClosureCall_0(v *Value) bool {
 	// result: (CALLclosure [argwid] entry closure mem)
 	for {
 		argwid := v.AuxInt
+		_ = v.Args[2]
 		entry := v.Args[0]
 		closure := v.Args[1]
 		mem := v.Args[2]
@@ -13770,6 +14431,7 @@ func rewriteValueARM_OpConvert_0(v *Value) bool {
 	// cond:
 	// result: (MOVWconvert x mem)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpARMMOVWconvert)
@@ -13943,6 +14605,7 @@ func rewriteValueARM_OpDiv16_0(v *Value) bool {
 	// cond:
 	// result: (Div32 (SignExt16to32 x) (SignExt16to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpDiv32)
@@ -13964,6 +14627,7 @@ func rewriteValueARM_OpDiv16u_0(v *Value) bool {
 	// cond:
 	// result: (Div32u (ZeroExt16to32 x) (ZeroExt16to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpDiv32u)
@@ -13985,6 +14649,7 @@ func rewriteValueARM_OpDiv32_0(v *Value) bool {
 	// cond:
 	// result: (SUB (XOR <typ.UInt32> 		(Select0 <typ.UInt32> (CALLudiv 			(SUB <typ.UInt32> (XOR x <typ.UInt32> (Signmask x)) (Signmask x)) 			(SUB <typ.UInt32> (XOR y <typ.UInt32> (Signmask y)) (Signmask y)))) 		(Signmask (XOR <typ.UInt32> x y))) (Signmask (XOR <typ.UInt32> x y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMSUB)
@@ -14036,6 +14701,7 @@ func rewriteValueARM_OpDiv32F_0(v *Value) bool {
 	// cond:
 	// result: (DIVF x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMDIVF)
@@ -14053,6 +14719,7 @@ func rewriteValueARM_OpDiv32u_0(v *Value) bool {
 	// cond:
 	// result: (Select0 <typ.UInt32> (CALLudiv x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect0)
@@ -14069,6 +14736,7 @@ func rewriteValueARM_OpDiv64F_0(v *Value) bool {
 	// cond:
 	// result: (DIVD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMDIVD)
@@ -14086,6 +14754,7 @@ func rewriteValueARM_OpDiv8_0(v *Value) bool {
 	// cond:
 	// result: (Div32 (SignExt8to32 x) (SignExt8to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpDiv32)
@@ -14107,6 +14776,7 @@ func rewriteValueARM_OpDiv8u_0(v *Value) bool {
 	// cond:
 	// result: (Div32u (ZeroExt8to32 x) (ZeroExt8to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpDiv32u)
@@ -14128,6 +14798,7 @@ func rewriteValueARM_OpEq16_0(v *Value) bool {
 	// cond:
 	// result: (Equal (CMP (ZeroExt16to32 x) (ZeroExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMEqual)
@@ -14149,6 +14820,7 @@ func rewriteValueARM_OpEq32_0(v *Value) bool {
 	// cond:
 	// result: (Equal (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMEqual)
@@ -14166,6 +14838,7 @@ func rewriteValueARM_OpEq32F_0(v *Value) bool {
 	// cond:
 	// result: (Equal (CMPF x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMEqual)
@@ -14183,6 +14856,7 @@ func rewriteValueARM_OpEq64F_0(v *Value) bool {
 	// cond:
 	// result: (Equal (CMPD x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMEqual)
@@ -14202,6 +14876,7 @@ func rewriteValueARM_OpEq8_0(v *Value) bool {
 	// cond:
 	// result: (Equal (CMP (ZeroExt8to32 x) (ZeroExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMEqual)
@@ -14225,6 +14900,7 @@ func rewriteValueARM_OpEqB_0(v *Value) bool {
 	// cond:
 	// result: (XORconst [1] (XOR <typ.Bool> x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMXORconst)
@@ -14243,6 +14919,7 @@ func rewriteValueARM_OpEqPtr_0(v *Value) bool {
 	// cond:
 	// result: (Equal (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMEqual)
@@ -14262,6 +14939,7 @@ func rewriteValueARM_OpGeq16_0(v *Value) bool {
 	// cond:
 	// result: (GreaterEqual (CMP (SignExt16to32 x) (SignExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMGreaterEqual)
@@ -14285,6 +14963,7 @@ func rewriteValueARM_OpGeq16U_0(v *Value) bool {
 	// cond:
 	// result: (GreaterEqualU (CMP (ZeroExt16to32 x) (ZeroExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMGreaterEqualU)
@@ -14306,6 +14985,7 @@ func rewriteValueARM_OpGeq32_0(v *Value) bool {
 	// cond:
 	// result: (GreaterEqual (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMGreaterEqual)
@@ -14323,6 +15003,7 @@ func rewriteValueARM_OpGeq32F_0(v *Value) bool {
 	// cond:
 	// result: (GreaterEqual (CMPF x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMGreaterEqual)
@@ -14340,6 +15021,7 @@ func rewriteValueARM_OpGeq32U_0(v *Value) bool {
 	// cond:
 	// result: (GreaterEqualU (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMGreaterEqualU)
@@ -14357,6 +15039,7 @@ func rewriteValueARM_OpGeq64F_0(v *Value) bool {
 	// cond:
 	// result: (GreaterEqual (CMPD x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMGreaterEqual)
@@ -14376,6 +15059,7 @@ func rewriteValueARM_OpGeq8_0(v *Value) bool {
 	// cond:
 	// result: (GreaterEqual (CMP (SignExt8to32 x) (SignExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMGreaterEqual)
@@ -14399,6 +15083,7 @@ func rewriteValueARM_OpGeq8U_0(v *Value) bool {
 	// cond:
 	// result: (GreaterEqualU (CMP (ZeroExt8to32 x) (ZeroExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMGreaterEqualU)
@@ -14431,6 +15116,7 @@ func rewriteValueARM_OpGreater16_0(v *Value) bool {
 	// cond:
 	// result: (GreaterThan (CMP (SignExt16to32 x) (SignExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMGreaterThan)
@@ -14454,6 +15140,7 @@ func rewriteValueARM_OpGreater16U_0(v *Value) bool {
 	// cond:
 	// result: (GreaterThanU (CMP (ZeroExt16to32 x) (ZeroExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMGreaterThanU)
@@ -14475,6 +15162,7 @@ func rewriteValueARM_OpGreater32_0(v *Value) bool {
 	// cond:
 	// result: (GreaterThan (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMGreaterThan)
@@ -14492,6 +15180,7 @@ func rewriteValueARM_OpGreater32F_0(v *Value) bool {
 	// cond:
 	// result: (GreaterThan (CMPF x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMGreaterThan)
@@ -14509,6 +15198,7 @@ func rewriteValueARM_OpGreater32U_0(v *Value) bool {
 	// cond:
 	// result: (GreaterThanU (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMGreaterThanU)
@@ -14526,6 +15216,7 @@ func rewriteValueARM_OpGreater64F_0(v *Value) bool {
 	// cond:
 	// result: (GreaterThan (CMPD x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMGreaterThan)
@@ -14545,6 +15236,7 @@ func rewriteValueARM_OpGreater8_0(v *Value) bool {
 	// cond:
 	// result: (GreaterThan (CMP (SignExt8to32 x) (SignExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMGreaterThan)
@@ -14568,6 +15260,7 @@ func rewriteValueARM_OpGreater8U_0(v *Value) bool {
 	// cond:
 	// result: (GreaterThanU (CMP (ZeroExt8to32 x) (ZeroExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMGreaterThanU)
@@ -14587,6 +15280,7 @@ func rewriteValueARM_OpHmul32_0(v *Value) bool {
 	// cond:
 	// result: (HMUL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMHMUL)
@@ -14600,6 +15294,7 @@ func rewriteValueARM_OpHmul32u_0(v *Value) bool {
 	// cond:
 	// result: (HMULU x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMHMULU)
@@ -14614,6 +15309,7 @@ func rewriteValueARM_OpInterCall_0(v *Value) bool {
 	// result: (CALLinter [argwid] entry mem)
 	for {
 		argwid := v.AuxInt
+		_ = v.Args[1]
 		entry := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpARMCALLinter)
@@ -14630,6 +15326,7 @@ func rewriteValueARM_OpIsInBounds_0(v *Value) bool {
 	// cond:
 	// result: (LessThanU (CMP idx len))
 	for {
+		_ = v.Args[1]
 		idx := v.Args[0]
 		len := v.Args[1]
 		v.reset(OpARMLessThanU)
@@ -14663,6 +15360,7 @@ func rewriteValueARM_OpIsSliceInBounds_0(v *Value) bool {
 	// cond:
 	// result: (LessEqualU (CMP idx len))
 	for {
+		_ = v.Args[1]
 		idx := v.Args[0]
 		len := v.Args[1]
 		v.reset(OpARMLessEqualU)
@@ -14682,6 +15380,7 @@ func rewriteValueARM_OpLeq16_0(v *Value) bool {
 	// cond:
 	// result: (LessEqual (CMP (SignExt16to32 x) (SignExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMLessEqual)
@@ -14705,6 +15404,7 @@ func rewriteValueARM_OpLeq16U_0(v *Value) bool {
 	// cond:
 	// result: (LessEqualU (CMP (ZeroExt16to32 x) (ZeroExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMLessEqualU)
@@ -14726,6 +15426,7 @@ func rewriteValueARM_OpLeq32_0(v *Value) bool {
 	// cond:
 	// result: (LessEqual (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMLessEqual)
@@ -14743,6 +15444,7 @@ func rewriteValueARM_OpLeq32F_0(v *Value) bool {
 	// cond:
 	// result: (GreaterEqual (CMPF y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMGreaterEqual)
@@ -14760,6 +15462,7 @@ func rewriteValueARM_OpLeq32U_0(v *Value) bool {
 	// cond:
 	// result: (LessEqualU (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMLessEqualU)
@@ -14777,6 +15480,7 @@ func rewriteValueARM_OpLeq64F_0(v *Value) bool {
 	// cond:
 	// result: (GreaterEqual (CMPD y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMGreaterEqual)
@@ -14796,6 +15500,7 @@ func rewriteValueARM_OpLeq8_0(v *Value) bool {
 	// cond:
 	// result: (LessEqual (CMP (SignExt8to32 x) (SignExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMLessEqual)
@@ -14819,6 +15524,7 @@ func rewriteValueARM_OpLeq8U_0(v *Value) bool {
 	// cond:
 	// result: (LessEqualU (CMP (ZeroExt8to32 x) (ZeroExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMLessEqualU)
@@ -14842,6 +15548,7 @@ func rewriteValueARM_OpLess16_0(v *Value) bool {
 	// cond:
 	// result: (LessThan (CMP (SignExt16to32 x) (SignExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMLessThan)
@@ -14865,6 +15572,7 @@ func rewriteValueARM_OpLess16U_0(v *Value) bool {
 	// cond:
 	// result: (LessThanU (CMP (ZeroExt16to32 x) (ZeroExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMLessThanU)
@@ -14886,6 +15594,7 @@ func rewriteValueARM_OpLess32_0(v *Value) bool {
 	// cond:
 	// result: (LessThan (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMLessThan)
@@ -14903,6 +15612,7 @@ func rewriteValueARM_OpLess32F_0(v *Value) bool {
 	// cond:
 	// result: (GreaterThan (CMPF y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMGreaterThan)
@@ -14920,6 +15630,7 @@ func rewriteValueARM_OpLess32U_0(v *Value) bool {
 	// cond:
 	// result: (LessThanU (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMLessThanU)
@@ -14937,6 +15648,7 @@ func rewriteValueARM_OpLess64F_0(v *Value) bool {
 	// cond:
 	// result: (GreaterThan (CMPD y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMGreaterThan)
@@ -14956,6 +15668,7 @@ func rewriteValueARM_OpLess8_0(v *Value) bool {
 	// cond:
 	// result: (LessThan (CMP (SignExt8to32 x) (SignExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMLessThan)
@@ -14979,6 +15692,7 @@ func rewriteValueARM_OpLess8U_0(v *Value) bool {
 	// cond:
 	// result: (LessThanU (CMP (ZeroExt8to32 x) (ZeroExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMLessThanU)
@@ -14999,6 +15713,7 @@ func rewriteValueARM_OpLoad_0(v *Value) bool {
 	// result: (MOVBUload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.IsBoolean()) {
@@ -15014,6 +15729,7 @@ func rewriteValueARM_OpLoad_0(v *Value) bool {
 	// result: (MOVBload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is8BitInt(t) && isSigned(t)) {
@@ -15029,6 +15745,7 @@ func rewriteValueARM_OpLoad_0(v *Value) bool {
 	// result: (MOVBUload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is8BitInt(t) && !isSigned(t)) {
@@ -15044,6 +15761,7 @@ func rewriteValueARM_OpLoad_0(v *Value) bool {
 	// result: (MOVHload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is16BitInt(t) && isSigned(t)) {
@@ -15059,6 +15777,7 @@ func rewriteValueARM_OpLoad_0(v *Value) bool {
 	// result: (MOVHUload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is16BitInt(t) && !isSigned(t)) {
@@ -15074,6 +15793,7 @@ func rewriteValueARM_OpLoad_0(v *Value) bool {
 	// result: (MOVWload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is32BitInt(t) || isPtr(t)) {
@@ -15089,6 +15809,7 @@ func rewriteValueARM_OpLoad_0(v *Value) bool {
 	// result: (MOVFload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is32BitFloat(t)) {
@@ -15104,6 +15825,7 @@ func rewriteValueARM_OpLoad_0(v *Value) bool {
 	// result: (MOVDload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is64BitFloat(t)) {
@@ -15125,6 +15847,7 @@ func rewriteValueARM_OpLsh16x16_0(v *Value) bool {
 	// cond:
 	// result: (CMOVWHSconst (SLL <x.Type> x (ZeroExt16to32 y)) (CMPconst [256] (ZeroExt16to32 y)) [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMCMOVWHSconst)
@@ -15151,6 +15874,7 @@ func rewriteValueARM_OpLsh16x32_0(v *Value) bool {
 	// cond:
 	// result: (CMOVWHSconst (SLL <x.Type> x y) (CMPconst [256] y) [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMCMOVWHSconst)
@@ -15171,6 +15895,7 @@ func rewriteValueARM_OpLsh16x64_0(v *Value) bool {
 	// cond: uint64(c) < 16
 	// result: (SLLconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -15189,6 +15914,7 @@ func rewriteValueARM_OpLsh16x64_0(v *Value) bool {
 	// cond: uint64(c) >= 16
 	// result: (Const16 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -15212,6 +15938,7 @@ func rewriteValueARM_OpLsh16x8_0(v *Value) bool {
 	// cond:
 	// result: (SLL x (ZeroExt8to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMSLL)
@@ -15231,6 +15958,7 @@ func rewriteValueARM_OpLsh32x16_0(v *Value) bool {
 	// cond:
 	// result: (CMOVWHSconst (SLL <x.Type> x (ZeroExt16to32 y)) (CMPconst [256] (ZeroExt16to32 y)) [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMCMOVWHSconst)
@@ -15257,6 +15985,7 @@ func rewriteValueARM_OpLsh32x32_0(v *Value) bool {
 	// cond:
 	// result: (CMOVWHSconst (SLL <x.Type> x y) (CMPconst [256] y) [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMCMOVWHSconst)
@@ -15277,6 +16006,7 @@ func rewriteValueARM_OpLsh32x64_0(v *Value) bool {
 	// cond: uint64(c) < 32
 	// result: (SLLconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -15295,6 +16025,7 @@ func rewriteValueARM_OpLsh32x64_0(v *Value) bool {
 	// cond: uint64(c) >= 32
 	// result: (Const32 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -15318,6 +16049,7 @@ func rewriteValueARM_OpLsh32x8_0(v *Value) bool {
 	// cond:
 	// result: (SLL x (ZeroExt8to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMSLL)
@@ -15337,6 +16069,7 @@ func rewriteValueARM_OpLsh8x16_0(v *Value) bool {
 	// cond:
 	// result: (CMOVWHSconst (SLL <x.Type> x (ZeroExt16to32 y)) (CMPconst [256] (ZeroExt16to32 y)) [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMCMOVWHSconst)
@@ -15363,6 +16096,7 @@ func rewriteValueARM_OpLsh8x32_0(v *Value) bool {
 	// cond:
 	// result: (CMOVWHSconst (SLL <x.Type> x y) (CMPconst [256] y) [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMCMOVWHSconst)
@@ -15383,6 +16117,7 @@ func rewriteValueARM_OpLsh8x64_0(v *Value) bool {
 	// cond: uint64(c) < 8
 	// result: (SLLconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -15401,6 +16136,7 @@ func rewriteValueARM_OpLsh8x64_0(v *Value) bool {
 	// cond: uint64(c) >= 8
 	// result: (Const8 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -15424,6 +16160,7 @@ func rewriteValueARM_OpLsh8x8_0(v *Value) bool {
 	// cond:
 	// result: (SLL x (ZeroExt8to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMSLL)
@@ -15443,6 +16180,7 @@ func rewriteValueARM_OpMod16_0(v *Value) bool {
 	// cond:
 	// result: (Mod32 (SignExt16to32 x) (SignExt16to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMod32)
@@ -15464,6 +16202,7 @@ func rewriteValueARM_OpMod16u_0(v *Value) bool {
 	// cond:
 	// result: (Mod32u (ZeroExt16to32 x) (ZeroExt16to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMod32u)
@@ -15485,6 +16224,7 @@ func rewriteValueARM_OpMod32_0(v *Value) bool {
 	// cond:
 	// result: (SUB (XOR <typ.UInt32> 		(Select1 <typ.UInt32> (CALLudiv 			(SUB <typ.UInt32> (XOR <typ.UInt32> x (Signmask x)) (Signmask x)) 			(SUB <typ.UInt32> (XOR <typ.UInt32> y (Signmask y)) (Signmask y)))) 		(Signmask x)) (Signmask x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMSUB)
@@ -15534,6 +16274,7 @@ func rewriteValueARM_OpMod32u_0(v *Value) bool {
 	// cond:
 	// result: (Select1 <typ.UInt32> (CALLudiv x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect1)
@@ -15554,6 +16295,7 @@ func rewriteValueARM_OpMod8_0(v *Value) bool {
 	// cond:
 	// result: (Mod32 (SignExt8to32 x) (SignExt8to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMod32)
@@ -15575,6 +16317,7 @@ func rewriteValueARM_OpMod8u_0(v *Value) bool {
 	// cond:
 	// result: (Mod32u (ZeroExt8to32 x) (ZeroExt8to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMod32u)
@@ -15601,6 +16344,7 @@ func rewriteValueARM_OpMove_0(v *Value) bool {
 		if v.AuxInt != 0 {
 			break
 		}
+		_ = v.Args[2]
 		mem := v.Args[2]
 		v.reset(OpCopy)
 		v.Type = mem.Type
@@ -15614,6 +16358,7 @@ func rewriteValueARM_OpMove_0(v *Value) bool {
 		if v.AuxInt != 1 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -15634,6 +16379,7 @@ func rewriteValueARM_OpMove_0(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -15656,6 +16402,7 @@ func rewriteValueARM_OpMove_0(v *Value) bool {
 		if v.AuxInt != 2 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -15685,6 +16432,7 @@ func rewriteValueARM_OpMove_0(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -15708,6 +16456,7 @@ func rewriteValueARM_OpMove_0(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -15739,6 +16488,7 @@ func rewriteValueARM_OpMove_0(v *Value) bool {
 		if v.AuxInt != 4 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -15785,6 +16535,7 @@ func rewriteValueARM_OpMove_0(v *Value) bool {
 		if v.AuxInt != 3 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -15821,6 +16572,7 @@ func rewriteValueARM_OpMove_0(v *Value) bool {
 	for {
 		s := v.AuxInt
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -15840,6 +16592,7 @@ func rewriteValueARM_OpMove_0(v *Value) bool {
 	for {
 		s := v.AuxInt
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -15864,6 +16617,7 @@ func rewriteValueARM_OpMul16_0(v *Value) bool {
 	// cond:
 	// result: (MUL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMMUL)
@@ -15877,6 +16631,7 @@ func rewriteValueARM_OpMul32_0(v *Value) bool {
 	// cond:
 	// result: (MUL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMMUL)
@@ -15890,6 +16645,7 @@ func rewriteValueARM_OpMul32F_0(v *Value) bool {
 	// cond:
 	// result: (MULF x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMMULF)
@@ -15903,6 +16659,7 @@ func rewriteValueARM_OpMul32uhilo_0(v *Value) bool {
 	// cond:
 	// result: (MULLU x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMMULLU)
@@ -15916,6 +16673,7 @@ func rewriteValueARM_OpMul64F_0(v *Value) bool {
 	// cond:
 	// result: (MULD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMMULD)
@@ -15929,6 +16687,7 @@ func rewriteValueARM_OpMul8_0(v *Value) bool {
 	// cond:
 	// result: (MUL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMMUL)
@@ -16004,6 +16763,7 @@ func rewriteValueARM_OpNeq16_0(v *Value) bool {
 	// cond:
 	// result: (NotEqual (CMP (ZeroExt16to32 x) (ZeroExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMNotEqual)
@@ -16025,6 +16785,7 @@ func rewriteValueARM_OpNeq32_0(v *Value) bool {
 	// cond:
 	// result: (NotEqual (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMNotEqual)
@@ -16042,6 +16803,7 @@ func rewriteValueARM_OpNeq32F_0(v *Value) bool {
 	// cond:
 	// result: (NotEqual (CMPF x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMNotEqual)
@@ -16059,6 +16821,7 @@ func rewriteValueARM_OpNeq64F_0(v *Value) bool {
 	// cond:
 	// result: (NotEqual (CMPD x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMNotEqual)
@@ -16078,6 +16841,7 @@ func rewriteValueARM_OpNeq8_0(v *Value) bool {
 	// cond:
 	// result: (NotEqual (CMP (ZeroExt8to32 x) (ZeroExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMNotEqual)
@@ -16097,6 +16861,7 @@ func rewriteValueARM_OpNeqB_0(v *Value) bool {
 	// cond:
 	// result: (XOR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMXOR)
@@ -16112,6 +16877,7 @@ func rewriteValueARM_OpNeqPtr_0(v *Value) bool {
 	// cond:
 	// result: (NotEqual (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMNotEqual)
@@ -16127,6 +16893,7 @@ func rewriteValueARM_OpNilCheck_0(v *Value) bool {
 	// cond:
 	// result: (LoweredNilCheck ptr mem)
 	for {
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpARMLoweredNilCheck)
@@ -16179,6 +16946,7 @@ func rewriteValueARM_OpOr16_0(v *Value) bool {
 	// cond:
 	// result: (OR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMOR)
@@ -16192,6 +16960,7 @@ func rewriteValueARM_OpOr32_0(v *Value) bool {
 	// cond:
 	// result: (OR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMOR)
@@ -16205,6 +16974,7 @@ func rewriteValueARM_OpOr8_0(v *Value) bool {
 	// cond:
 	// result: (OR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMOR)
@@ -16218,6 +16988,7 @@ func rewriteValueARM_OpOrB_0(v *Value) bool {
 	// cond:
 	// result: (OR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMOR)
@@ -16259,6 +17030,7 @@ func rewriteValueARM_OpRsh16Ux16_0(v *Value) bool {
 	// cond:
 	// result: (CMOVWHSconst (SRL <x.Type> (ZeroExt16to32 x) (ZeroExt16to32 y)) (CMPconst [256] (ZeroExt16to32 y)) [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMCMOVWHSconst)
@@ -16289,6 +17061,7 @@ func rewriteValueARM_OpRsh16Ux32_0(v *Value) bool {
 	// cond:
 	// result: (CMOVWHSconst (SRL <x.Type> (ZeroExt16to32 x) y) (CMPconst [256] y) [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMCMOVWHSconst)
@@ -16315,6 +17088,7 @@ func rewriteValueARM_OpRsh16Ux64_0(v *Value) bool {
 	// cond: uint64(c) < 16
 	// result: (SRLconst (SLLconst <typ.UInt32> x [16]) [c+16])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -16336,6 +17110,7 @@ func rewriteValueARM_OpRsh16Ux64_0(v *Value) bool {
 	// cond: uint64(c) >= 16
 	// result: (Const16 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -16359,6 +17134,7 @@ func rewriteValueARM_OpRsh16Ux8_0(v *Value) bool {
 	// cond:
 	// result: (SRL (ZeroExt16to32 x) (ZeroExt8to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMSRL)
@@ -16380,6 +17156,7 @@ func rewriteValueARM_OpRsh16x16_0(v *Value) bool {
 	// cond:
 	// result: (SRAcond (SignExt16to32 x) (ZeroExt16to32 y) (CMPconst [256] (ZeroExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMSRAcond)
@@ -16407,6 +17184,7 @@ func rewriteValueARM_OpRsh16x32_0(v *Value) bool {
 	// cond:
 	// result: (SRAcond (SignExt16to32 x) y (CMPconst [256] y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMSRAcond)
@@ -16430,6 +17208,7 @@ func rewriteValueARM_OpRsh16x64_0(v *Value) bool {
 	// cond: uint64(c) < 16
 	// result: (SRAconst (SLLconst <typ.UInt32> x [16]) [c+16])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -16451,6 +17230,7 @@ func rewriteValueARM_OpRsh16x64_0(v *Value) bool {
 	// cond: uint64(c) >= 16
 	// result: (SRAconst (SLLconst <typ.UInt32> x [16]) [31])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -16479,6 +17259,7 @@ func rewriteValueARM_OpRsh16x8_0(v *Value) bool {
 	// cond:
 	// result: (SRA (SignExt16to32 x) (ZeroExt8to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMSRA)
@@ -16500,6 +17281,7 @@ func rewriteValueARM_OpRsh32Ux16_0(v *Value) bool {
 	// cond:
 	// result: (CMOVWHSconst (SRL <x.Type> x (ZeroExt16to32 y)) (CMPconst [256] (ZeroExt16to32 y)) [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMCMOVWHSconst)
@@ -16526,6 +17308,7 @@ func rewriteValueARM_OpRsh32Ux32_0(v *Value) bool {
 	// cond:
 	// result: (CMOVWHSconst (SRL <x.Type> x y) (CMPconst [256] y) [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMCMOVWHSconst)
@@ -16546,6 +17329,7 @@ func rewriteValueARM_OpRsh32Ux64_0(v *Value) bool {
 	// cond: uint64(c) < 32
 	// result: (SRLconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -16564,6 +17348,7 @@ func rewriteValueARM_OpRsh32Ux64_0(v *Value) bool {
 	// cond: uint64(c) >= 32
 	// result: (Const32 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -16587,6 +17372,7 @@ func rewriteValueARM_OpRsh32Ux8_0(v *Value) bool {
 	// cond:
 	// result: (SRL x (ZeroExt8to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMSRL)
@@ -16606,6 +17392,7 @@ func rewriteValueARM_OpRsh32x16_0(v *Value) bool {
 	// cond:
 	// result: (SRAcond x (ZeroExt16to32 y) (CMPconst [256] (ZeroExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMSRAcond)
@@ -16629,6 +17416,7 @@ func rewriteValueARM_OpRsh32x32_0(v *Value) bool {
 	// cond:
 	// result: (SRAcond x y (CMPconst [256] y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMSRAcond)
@@ -16646,6 +17434,7 @@ func rewriteValueARM_OpRsh32x64_0(v *Value) bool {
 	// cond: uint64(c) < 32
 	// result: (SRAconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -16664,6 +17453,7 @@ func rewriteValueARM_OpRsh32x64_0(v *Value) bool {
 	// cond: uint64(c) >= 32
 	// result: (SRAconst x [31])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -16689,6 +17479,7 @@ func rewriteValueARM_OpRsh32x8_0(v *Value) bool {
 	// cond:
 	// result: (SRA x (ZeroExt8to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMSRA)
@@ -16708,6 +17499,7 @@ func rewriteValueARM_OpRsh8Ux16_0(v *Value) bool {
 	// cond:
 	// result: (CMOVWHSconst (SRL <x.Type> (ZeroExt8to32 x) (ZeroExt16to32 y)) (CMPconst [256] (ZeroExt16to32 y)) [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMCMOVWHSconst)
@@ -16738,6 +17530,7 @@ func rewriteValueARM_OpRsh8Ux32_0(v *Value) bool {
 	// cond:
 	// result: (CMOVWHSconst (SRL <x.Type> (ZeroExt8to32 x) y) (CMPconst [256] y) [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMCMOVWHSconst)
@@ -16764,6 +17557,7 @@ func rewriteValueARM_OpRsh8Ux64_0(v *Value) bool {
 	// cond: uint64(c) < 8
 	// result: (SRLconst (SLLconst <typ.UInt32> x [24]) [c+24])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -16785,6 +17579,7 @@ func rewriteValueARM_OpRsh8Ux64_0(v *Value) bool {
 	// cond: uint64(c) >= 8
 	// result: (Const8 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -16808,6 +17603,7 @@ func rewriteValueARM_OpRsh8Ux8_0(v *Value) bool {
 	// cond:
 	// result: (SRL (ZeroExt8to32 x) (ZeroExt8to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMSRL)
@@ -16829,6 +17625,7 @@ func rewriteValueARM_OpRsh8x16_0(v *Value) bool {
 	// cond:
 	// result: (SRAcond (SignExt8to32 x) (ZeroExt16to32 y) (CMPconst [256] (ZeroExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMSRAcond)
@@ -16856,6 +17653,7 @@ func rewriteValueARM_OpRsh8x32_0(v *Value) bool {
 	// cond:
 	// result: (SRAcond (SignExt8to32 x) y (CMPconst [256] y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMSRAcond)
@@ -16879,6 +17677,7 @@ func rewriteValueARM_OpRsh8x64_0(v *Value) bool {
 	// cond: uint64(c) < 8
 	// result: (SRAconst (SLLconst <typ.UInt32> x [24]) [c+24])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -16900,6 +17699,7 @@ func rewriteValueARM_OpRsh8x64_0(v *Value) bool {
 	// cond: uint64(c) >= 8
 	// result: (SRAconst (SLLconst <typ.UInt32> x [24]) [31])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -16928,6 +17728,7 @@ func rewriteValueARM_OpRsh8x8_0(v *Value) bool {
 	// cond:
 	// result: (SRA (SignExt8to32 x) (ZeroExt8to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMSRA)
@@ -16949,6 +17750,7 @@ func rewriteValueARM_OpSelect0_0(v *Value) bool {
 		if v_0.Op != OpARMCALLudiv {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpARMMOVWconst {
@@ -16970,6 +17772,7 @@ func rewriteValueARM_OpSelect0_0(v *Value) bool {
 		if v_0.Op != OpARMCALLudiv {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpARMMOVWconst {
@@ -16992,6 +17795,7 @@ func rewriteValueARM_OpSelect0_0(v *Value) bool {
 		if v_0.Op != OpARMCALLudiv {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpARMMOVWconst {
 			break
@@ -17017,6 +17821,7 @@ func rewriteValueARM_OpSelect1_0(v *Value) bool {
 		if v_0.Op != OpARMCALLudiv {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpARMMOVWconst {
 			break
@@ -17036,6 +17841,7 @@ func rewriteValueARM_OpSelect1_0(v *Value) bool {
 		if v_0.Op != OpARMCALLudiv {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpARMMOVWconst {
@@ -17058,6 +17864,7 @@ func rewriteValueARM_OpSelect1_0(v *Value) bool {
 		if v_0.Op != OpARMCALLudiv {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpARMMOVWconst {
 			break
@@ -17169,6 +17976,7 @@ func rewriteValueARM_OpStore_0(v *Value) bool {
 	// result: (MOVBstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -17186,6 +17994,7 @@ func rewriteValueARM_OpStore_0(v *Value) bool {
 	// result: (MOVHstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -17203,6 +18012,7 @@ func rewriteValueARM_OpStore_0(v *Value) bool {
 	// result: (MOVWstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -17220,6 +18030,7 @@ func rewriteValueARM_OpStore_0(v *Value) bool {
 	// result: (MOVFstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -17237,6 +18048,7 @@ func rewriteValueARM_OpStore_0(v *Value) bool {
 	// result: (MOVDstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -17256,6 +18068,7 @@ func rewriteValueARM_OpSub16_0(v *Value) bool {
 	// cond:
 	// result: (SUB x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMSUB)
@@ -17269,6 +18082,7 @@ func rewriteValueARM_OpSub32_0(v *Value) bool {
 	// cond:
 	// result: (SUB x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMSUB)
@@ -17282,6 +18096,7 @@ func rewriteValueARM_OpSub32F_0(v *Value) bool {
 	// cond:
 	// result: (SUBF x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMSUBF)
@@ -17295,6 +18110,7 @@ func rewriteValueARM_OpSub32carry_0(v *Value) bool {
 	// cond:
 	// result: (SUBS x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMSUBS)
@@ -17308,6 +18124,7 @@ func rewriteValueARM_OpSub32withcarry_0(v *Value) bool {
 	// cond:
 	// result: (SBC x y c)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		c := v.Args[2]
@@ -17323,6 +18140,7 @@ func rewriteValueARM_OpSub64F_0(v *Value) bool {
 	// cond:
 	// result: (SUBD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMSUBD)
@@ -17336,6 +18154,7 @@ func rewriteValueARM_OpSub8_0(v *Value) bool {
 	// cond:
 	// result: (SUB x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMSUB)
@@ -17349,6 +18168,7 @@ func rewriteValueARM_OpSubPtr_0(v *Value) bool {
 	// cond:
 	// result: (SUB x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMSUB)
@@ -17398,6 +18218,7 @@ func rewriteValueARM_OpXor16_0(v *Value) bool {
 	// cond:
 	// result: (XOR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMXOR)
@@ -17411,6 +18232,7 @@ func rewriteValueARM_OpXor32_0(v *Value) bool {
 	// cond:
 	// result: (XOR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMXOR)
@@ -17424,6 +18246,7 @@ func rewriteValueARM_OpXor8_0(v *Value) bool {
 	// cond:
 	// result: (XOR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARMXOR)
@@ -17446,6 +18269,7 @@ func rewriteValueARM_OpZero_0(v *Value) bool {
 		if v.AuxInt != 0 {
 			break
 		}
+		_ = v.Args[1]
 		mem := v.Args[1]
 		v.reset(OpCopy)
 		v.Type = mem.Type
@@ -17459,6 +18283,7 @@ func rewriteValueARM_OpZero_0(v *Value) bool {
 		if v.AuxInt != 1 {
 			break
 		}
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpARMMOVBstore)
@@ -17477,6 +18302,7 @@ func rewriteValueARM_OpZero_0(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.(*types.Type).Alignment()%2 == 0) {
@@ -17497,6 +18323,7 @@ func rewriteValueARM_OpZero_0(v *Value) bool {
 		if v.AuxInt != 2 {
 			break
 		}
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpARMMOVBstore)
@@ -17523,6 +18350,7 @@ func rewriteValueARM_OpZero_0(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.(*types.Type).Alignment()%4 == 0) {
@@ -17544,6 +18372,7 @@ func rewriteValueARM_OpZero_0(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.(*types.Type).Alignment()%2 == 0) {
@@ -17572,6 +18401,7 @@ func rewriteValueARM_OpZero_0(v *Value) bool {
 		if v.AuxInt != 4 {
 			break
 		}
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpARMMOVBstore)
@@ -17611,6 +18441,7 @@ func rewriteValueARM_OpZero_0(v *Value) bool {
 		if v.AuxInt != 3 {
 			break
 		}
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpARMMOVBstore)
@@ -17642,6 +18473,7 @@ func rewriteValueARM_OpZero_0(v *Value) bool {
 	for {
 		s := v.AuxInt
 		t := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(s%4 == 0 && s > 4 && s <= 512 && t.(*types.Type).Alignment()%4 == 0 && !config.noDuffDevice) {
@@ -17662,6 +18494,7 @@ func rewriteValueARM_OpZero_0(v *Value) bool {
 	for {
 		s := v.AuxInt
 		t := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !((s > 512 || config.noDuffDevice) || t.(*types.Type).Alignment()%4 != 0) {
diff --git a/src/cmd/compile/internal/ssa/rewriteARM64.go b/src/cmd/compile/internal/ssa/rewriteARM64.go
index fa2795723d..2be3d112a3 100644
--- a/src/cmd/compile/internal/ssa/rewriteARM64.go
+++ b/src/cmd/compile/internal/ssa/rewriteARM64.go
@@ -725,6 +725,7 @@ func rewriteValueARM64_OpARM64ADD_0(v *Value) bool {
 	// cond:
 	// result: (ADDconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -740,6 +741,7 @@ func rewriteValueARM64_OpARM64ADD_0(v *Value) bool {
 	// cond:
 	// result: (ADDconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -755,6 +757,7 @@ func rewriteValueARM64_OpARM64ADD_0(v *Value) bool {
 	// cond:
 	// result: (SUB x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64NEG {
@@ -770,6 +773,7 @@ func rewriteValueARM64_OpARM64ADD_0(v *Value) bool {
 	// cond:
 	// result: (SUB x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64NEG {
 			break
@@ -785,6 +789,7 @@ func rewriteValueARM64_OpARM64ADD_0(v *Value) bool {
 	// cond:
 	// result: (ADDshiftLL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64SLLconst {
@@ -802,6 +807,7 @@ func rewriteValueARM64_OpARM64ADD_0(v *Value) bool {
 	// cond:
 	// result: (ADDshiftLL x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64SLLconst {
 			break
@@ -819,6 +825,7 @@ func rewriteValueARM64_OpARM64ADD_0(v *Value) bool {
 	// cond:
 	// result: (ADDshiftRL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64SRLconst {
@@ -836,6 +843,7 @@ func rewriteValueARM64_OpARM64ADD_0(v *Value) bool {
 	// cond:
 	// result: (ADDshiftRL x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64SRLconst {
 			break
@@ -853,6 +861,7 @@ func rewriteValueARM64_OpARM64ADD_0(v *Value) bool {
 	// cond:
 	// result: (ADDshiftRA x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64SRAconst {
@@ -870,6 +879,7 @@ func rewriteValueARM64_OpARM64ADD_0(v *Value) bool {
 	// cond:
 	// result: (ADDshiftRA x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64SRAconst {
 			break
@@ -973,6 +983,7 @@ func rewriteValueARM64_OpARM64ADDshiftLL_0(v *Value) bool {
 	// result: (ADDconst [c] (SLLconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -992,6 +1003,7 @@ func rewriteValueARM64_OpARM64ADDshiftLL_0(v *Value) bool {
 	// result: (ADDconst x [int64(uint64(c)<<uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -1008,6 +1020,7 @@ func rewriteValueARM64_OpARM64ADDshiftLL_0(v *Value) bool {
 	// result: (RORconst [64-c] x)
 	for {
 		c := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64SRLconst {
 			break
@@ -1030,6 +1043,7 @@ func rewriteValueARM64_OpARM64ADDshiftLL_0(v *Value) bool {
 	for {
 		t := v.Type
 		c := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64SRLconst {
 			break
@@ -1063,6 +1077,7 @@ func rewriteValueARM64_OpARM64ADDshiftRA_0(v *Value) bool {
 	// result: (ADDconst [c] (SRAconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -1082,6 +1097,7 @@ func rewriteValueARM64_OpARM64ADDshiftRA_0(v *Value) bool {
 	// result: (ADDconst x [int64(int64(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -1103,6 +1119,7 @@ func rewriteValueARM64_OpARM64ADDshiftRL_0(v *Value) bool {
 	// result: (ADDconst [c] (SRLconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -1122,6 +1139,7 @@ func rewriteValueARM64_OpARM64ADDshiftRL_0(v *Value) bool {
 	// result: (ADDconst x [int64(uint64(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -1138,6 +1156,7 @@ func rewriteValueARM64_OpARM64ADDshiftRL_0(v *Value) bool {
 	// result: (RORconst [   c] x)
 	for {
 		c := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64SLLconst {
 			break
@@ -1160,6 +1179,7 @@ func rewriteValueARM64_OpARM64ADDshiftRL_0(v *Value) bool {
 	for {
 		t := v.Type
 		c := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64SLLconst {
 			break
@@ -1190,6 +1210,7 @@ func rewriteValueARM64_OpARM64AND_0(v *Value) bool {
 	// cond:
 	// result: (ANDconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -1205,6 +1226,7 @@ func rewriteValueARM64_OpARM64AND_0(v *Value) bool {
 	// cond:
 	// result: (ANDconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -1220,6 +1242,7 @@ func rewriteValueARM64_OpARM64AND_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -1233,6 +1256,7 @@ func rewriteValueARM64_OpARM64AND_0(v *Value) bool {
 	// cond:
 	// result: (BIC x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MVN {
@@ -1248,6 +1272,7 @@ func rewriteValueARM64_OpARM64AND_0(v *Value) bool {
 	// cond:
 	// result: (BIC x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MVN {
 			break
@@ -1263,6 +1288,7 @@ func rewriteValueARM64_OpARM64AND_0(v *Value) bool {
 	// cond:
 	// result: (ANDshiftLL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64SLLconst {
@@ -1280,6 +1306,7 @@ func rewriteValueARM64_OpARM64AND_0(v *Value) bool {
 	// cond:
 	// result: (ANDshiftLL x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64SLLconst {
 			break
@@ -1297,6 +1324,7 @@ func rewriteValueARM64_OpARM64AND_0(v *Value) bool {
 	// cond:
 	// result: (ANDshiftRL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64SRLconst {
@@ -1314,6 +1342,7 @@ func rewriteValueARM64_OpARM64AND_0(v *Value) bool {
 	// cond:
 	// result: (ANDshiftRL x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64SRLconst {
 			break
@@ -1331,6 +1360,7 @@ func rewriteValueARM64_OpARM64AND_0(v *Value) bool {
 	// cond:
 	// result: (ANDshiftRA x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64SRAconst {
@@ -1351,6 +1381,7 @@ func rewriteValueARM64_OpARM64AND_10(v *Value) bool {
 	// cond:
 	// result: (ANDshiftRA x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64SRAconst {
 			break
@@ -1431,6 +1462,7 @@ func rewriteValueARM64_OpARM64ANDshiftLL_0(v *Value) bool {
 	// result: (ANDconst [c] (SLLconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -1450,6 +1482,7 @@ func rewriteValueARM64_OpARM64ANDshiftLL_0(v *Value) bool {
 	// result: (ANDconst x [int64(uint64(c)<<uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -1466,6 +1499,7 @@ func rewriteValueARM64_OpARM64ANDshiftLL_0(v *Value) bool {
 	// result: y
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		if y.Op != OpARM64SLLconst {
@@ -1493,6 +1527,7 @@ func rewriteValueARM64_OpARM64ANDshiftRA_0(v *Value) bool {
 	// result: (ANDconst [c] (SRAconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -1512,6 +1547,7 @@ func rewriteValueARM64_OpARM64ANDshiftRA_0(v *Value) bool {
 	// result: (ANDconst x [int64(int64(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -1528,6 +1564,7 @@ func rewriteValueARM64_OpARM64ANDshiftRA_0(v *Value) bool {
 	// result: y
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		if y.Op != OpARM64SRAconst {
@@ -1555,6 +1592,7 @@ func rewriteValueARM64_OpARM64ANDshiftRL_0(v *Value) bool {
 	// result: (ANDconst [c] (SRLconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -1574,6 +1612,7 @@ func rewriteValueARM64_OpARM64ANDshiftRL_0(v *Value) bool {
 	// result: (ANDconst x [int64(uint64(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -1590,6 +1629,7 @@ func rewriteValueARM64_OpARM64ANDshiftRL_0(v *Value) bool {
 	// result: y
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		if y.Op != OpARM64SRLconst {
@@ -1614,6 +1654,7 @@ func rewriteValueARM64_OpARM64BIC_0(v *Value) bool {
 	// cond:
 	// result: (BICconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -1629,6 +1670,7 @@ func rewriteValueARM64_OpARM64BIC_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -1641,6 +1683,7 @@ func rewriteValueARM64_OpARM64BIC_0(v *Value) bool {
 	// cond:
 	// result: (BICshiftLL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64SLLconst {
@@ -1658,6 +1701,7 @@ func rewriteValueARM64_OpARM64BIC_0(v *Value) bool {
 	// cond:
 	// result: (BICshiftRL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64SRLconst {
@@ -1675,6 +1719,7 @@ func rewriteValueARM64_OpARM64BIC_0(v *Value) bool {
 	// cond:
 	// result: (BICshiftRA x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64SRAconst {
@@ -1737,6 +1782,7 @@ func rewriteValueARM64_OpARM64BICshiftLL_0(v *Value) bool {
 	// result: (BICconst x [int64(uint64(c)<<uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -1753,6 +1799,7 @@ func rewriteValueARM64_OpARM64BICshiftLL_0(v *Value) bool {
 	// result: (MOVDconst [0])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64SLLconst {
@@ -1777,6 +1824,7 @@ func rewriteValueARM64_OpARM64BICshiftRA_0(v *Value) bool {
 	// result: (BICconst x [int64(int64(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -1793,6 +1841,7 @@ func rewriteValueARM64_OpARM64BICshiftRA_0(v *Value) bool {
 	// result: (MOVDconst [0])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64SRAconst {
@@ -1817,6 +1866,7 @@ func rewriteValueARM64_OpARM64BICshiftRL_0(v *Value) bool {
 	// result: (BICconst x [int64(uint64(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -1833,6 +1883,7 @@ func rewriteValueARM64_OpARM64BICshiftRL_0(v *Value) bool {
 	// result: (MOVDconst [0])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64SRLconst {
@@ -1858,6 +1909,7 @@ func rewriteValueARM64_OpARM64CMP_0(v *Value) bool {
 	// cond:
 	// result: (CMPconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -1873,6 +1925,7 @@ func rewriteValueARM64_OpARM64CMP_0(v *Value) bool {
 	// cond:
 	// result: (InvertFlags (CMPconst [c] x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -1890,6 +1943,7 @@ func rewriteValueARM64_OpARM64CMP_0(v *Value) bool {
 	// cond:
 	// result: (CMPshiftLL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64SLLconst {
@@ -1907,6 +1961,7 @@ func rewriteValueARM64_OpARM64CMP_0(v *Value) bool {
 	// cond:
 	// result: (InvertFlags (CMPshiftLL x y [c]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64SLLconst {
 			break
@@ -1926,6 +1981,7 @@ func rewriteValueARM64_OpARM64CMP_0(v *Value) bool {
 	// cond:
 	// result: (CMPshiftRL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64SRLconst {
@@ -1943,6 +1999,7 @@ func rewriteValueARM64_OpARM64CMP_0(v *Value) bool {
 	// cond:
 	// result: (InvertFlags (CMPshiftRL x y [c]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64SRLconst {
 			break
@@ -1962,6 +2019,7 @@ func rewriteValueARM64_OpARM64CMP_0(v *Value) bool {
 	// cond:
 	// result: (CMPshiftRA x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64SRAconst {
@@ -1979,6 +2037,7 @@ func rewriteValueARM64_OpARM64CMP_0(v *Value) bool {
 	// cond:
 	// result: (InvertFlags (CMPshiftRA x y [c]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64SRAconst {
 			break
@@ -2003,6 +2062,7 @@ func rewriteValueARM64_OpARM64CMPW_0(v *Value) bool {
 	// cond:
 	// result: (CMPWconst [int64(int32(c))] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -2018,6 +2078,7 @@ func rewriteValueARM64_OpARM64CMPW_0(v *Value) bool {
 	// cond:
 	// result: (InvertFlags (CMPWconst [int64(int32(c))] x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -2314,6 +2375,7 @@ func rewriteValueARM64_OpARM64CMPshiftLL_0(v *Value) bool {
 	// result: (InvertFlags (CMPconst [c] (SLLconst <x.Type> x [d])))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -2335,6 +2397,7 @@ func rewriteValueARM64_OpARM64CMPshiftLL_0(v *Value) bool {
 	// result: (CMPconst x [int64(uint64(c)<<uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -2356,6 +2419,7 @@ func rewriteValueARM64_OpARM64CMPshiftRA_0(v *Value) bool {
 	// result: (InvertFlags (CMPconst [c] (SRAconst <x.Type> x [d])))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -2377,6 +2441,7 @@ func rewriteValueARM64_OpARM64CMPshiftRA_0(v *Value) bool {
 	// result: (CMPconst x [int64(int64(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -2398,6 +2463,7 @@ func rewriteValueARM64_OpARM64CMPshiftRL_0(v *Value) bool {
 	// result: (InvertFlags (CMPconst [c] (SRLconst <x.Type> x [d])))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -2419,6 +2485,7 @@ func rewriteValueARM64_OpARM64CMPshiftRL_0(v *Value) bool {
 	// result: (CMPconst x [int64(uint64(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -2437,6 +2504,7 @@ func rewriteValueARM64_OpARM64CSELULT_0(v *Value) bool {
 	// cond:
 	// result: (CSELULT0 x flag)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -2455,6 +2523,7 @@ func rewriteValueARM64_OpARM64CSELULT_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[2]
 		y := v.Args[1]
 		v_2 := v.Args[2]
 		if v_2.Op != OpARM64FlagEQ {
@@ -2469,6 +2538,7 @@ func rewriteValueARM64_OpARM64CSELULT_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_2 := v.Args[2]
 		if v_2.Op != OpARM64FlagLT_ULT {
@@ -2483,6 +2553,7 @@ func rewriteValueARM64_OpARM64CSELULT_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[2]
 		y := v.Args[1]
 		v_2 := v.Args[2]
 		if v_2.Op != OpARM64FlagLT_UGT {
@@ -2497,6 +2568,7 @@ func rewriteValueARM64_OpARM64CSELULT_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		v_2 := v.Args[2]
 		if v_2.Op != OpARM64FlagGT_ULT {
@@ -2511,6 +2583,7 @@ func rewriteValueARM64_OpARM64CSELULT_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[2]
 		y := v.Args[1]
 		v_2 := v.Args[2]
 		if v_2.Op != OpARM64FlagGT_UGT {
@@ -2528,6 +2601,7 @@ func rewriteValueARM64_OpARM64CSELULT0_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64FlagEQ {
 			break
@@ -2540,6 +2614,7 @@ func rewriteValueARM64_OpARM64CSELULT0_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64FlagLT_ULT {
@@ -2554,6 +2629,7 @@ func rewriteValueARM64_OpARM64CSELULT0_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64FlagLT_UGT {
 			break
@@ -2566,6 +2642,7 @@ func rewriteValueARM64_OpARM64CSELULT0_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64FlagGT_ULT {
@@ -2580,6 +2657,7 @@ func rewriteValueARM64_OpARM64CSELULT0_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64FlagGT_UGT {
 			break
@@ -2595,6 +2673,7 @@ func rewriteValueARM64_OpARM64DIV_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [int64(c)/int64(d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -2616,6 +2695,7 @@ func rewriteValueARM64_OpARM64DIVW_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [int64(int32(c)/int32(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -2719,6 +2799,7 @@ func rewriteValueARM64_OpARM64FMOVDload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64ADDconst {
 			break
@@ -2742,6 +2823,7 @@ func rewriteValueARM64_OpARM64FMOVDload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDaddr {
 			break
@@ -2773,6 +2855,7 @@ func rewriteValueARM64_OpARM64FMOVDstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64ADDconst {
 			break
@@ -2798,6 +2881,7 @@ func rewriteValueARM64_OpARM64FMOVDstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDaddr {
 			break
@@ -2831,6 +2915,7 @@ func rewriteValueARM64_OpARM64FMOVSload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64ADDconst {
 			break
@@ -2854,6 +2939,7 @@ func rewriteValueARM64_OpARM64FMOVSload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDaddr {
 			break
@@ -2885,6 +2971,7 @@ func rewriteValueARM64_OpARM64FMOVSstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64ADDconst {
 			break
@@ -2910,6 +2997,7 @@ func rewriteValueARM64_OpARM64FMOVSstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDaddr {
 			break
@@ -3545,6 +3633,7 @@ func rewriteValueARM64_OpARM64MOD_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [int64(c)%int64(d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -3566,6 +3655,7 @@ func rewriteValueARM64_OpARM64MODW_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [int64(int32(c)%int32(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -3593,6 +3683,7 @@ func rewriteValueARM64_OpARM64MOVBUload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64ADDconst {
 			break
@@ -3616,6 +3707,7 @@ func rewriteValueARM64_OpARM64MOVBUload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDaddr {
 			break
@@ -3640,6 +3732,7 @@ func rewriteValueARM64_OpARM64MOVBUload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVBstorezero {
@@ -3647,6 +3740,7 @@ func rewriteValueARM64_OpARM64MOVBUload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[1]
 		ptr2 := v_1.Args[0]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2)) {
 			break
@@ -3666,6 +3760,7 @@ func rewriteValueARM64_OpARM64MOVBUreg_0(v *Value) bool {
 		if x.Op != OpARM64MOVBUload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpARM64MOVDreg)
 		v.AddArg(x)
 		return true
@@ -3708,6 +3803,7 @@ func rewriteValueARM64_OpARM64MOVBload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64ADDconst {
 			break
@@ -3731,6 +3827,7 @@ func rewriteValueARM64_OpARM64MOVBload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDaddr {
 			break
@@ -3755,6 +3852,7 @@ func rewriteValueARM64_OpARM64MOVBload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVBstorezero {
@@ -3762,6 +3860,7 @@ func rewriteValueARM64_OpARM64MOVBload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[1]
 		ptr2 := v_1.Args[0]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2)) {
 			break
@@ -3781,6 +3880,7 @@ func rewriteValueARM64_OpARM64MOVBreg_0(v *Value) bool {
 		if x.Op != OpARM64MOVBload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpARM64MOVDreg)
 		v.AddArg(x)
 		return true
@@ -3823,6 +3923,7 @@ func rewriteValueARM64_OpARM64MOVBstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64ADDconst {
 			break
@@ -3848,6 +3949,7 @@ func rewriteValueARM64_OpARM64MOVBstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDaddr {
 			break
@@ -3874,6 +3976,7 @@ func rewriteValueARM64_OpARM64MOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -3896,6 +3999,7 @@ func rewriteValueARM64_OpARM64MOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVBreg {
@@ -3917,6 +4021,7 @@ func rewriteValueARM64_OpARM64MOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVBUreg {
@@ -3938,6 +4043,7 @@ func rewriteValueARM64_OpARM64MOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVHreg {
@@ -3959,6 +4065,7 @@ func rewriteValueARM64_OpARM64MOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVHUreg {
@@ -3980,6 +4087,7 @@ func rewriteValueARM64_OpARM64MOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVWreg {
@@ -4001,6 +4109,7 @@ func rewriteValueARM64_OpARM64MOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVWUreg {
@@ -4029,6 +4138,7 @@ func rewriteValueARM64_OpARM64MOVBstorezero_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64ADDconst {
 			break
@@ -4052,6 +4162,7 @@ func rewriteValueARM64_OpARM64MOVBstorezero_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDaddr {
 			break
@@ -4083,6 +4194,7 @@ func rewriteValueARM64_OpARM64MOVDload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64ADDconst {
 			break
@@ -4106,6 +4218,7 @@ func rewriteValueARM64_OpARM64MOVDload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDaddr {
 			break
@@ -4130,6 +4243,7 @@ func rewriteValueARM64_OpARM64MOVDload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDstorezero {
@@ -4137,6 +4251,7 @@ func rewriteValueARM64_OpARM64MOVDload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[1]
 		ptr2 := v_1.Args[0]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2)) {
 			break
@@ -4186,6 +4301,7 @@ func rewriteValueARM64_OpARM64MOVDstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64ADDconst {
 			break
@@ -4211,6 +4327,7 @@ func rewriteValueARM64_OpARM64MOVDstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDaddr {
 			break
@@ -4237,6 +4354,7 @@ func rewriteValueARM64_OpARM64MOVDstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -4266,6 +4384,7 @@ func rewriteValueARM64_OpARM64MOVDstorezero_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64ADDconst {
 			break
@@ -4289,6 +4408,7 @@ func rewriteValueARM64_OpARM64MOVDstorezero_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDaddr {
 			break
@@ -4320,6 +4440,7 @@ func rewriteValueARM64_OpARM64MOVHUload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64ADDconst {
 			break
@@ -4343,6 +4464,7 @@ func rewriteValueARM64_OpARM64MOVHUload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDaddr {
 			break
@@ -4367,6 +4489,7 @@ func rewriteValueARM64_OpARM64MOVHUload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVHstorezero {
@@ -4374,6 +4497,7 @@ func rewriteValueARM64_OpARM64MOVHUload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[1]
 		ptr2 := v_1.Args[0]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2)) {
 			break
@@ -4393,6 +4517,7 @@ func rewriteValueARM64_OpARM64MOVHUreg_0(v *Value) bool {
 		if x.Op != OpARM64MOVBUload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpARM64MOVDreg)
 		v.AddArg(x)
 		return true
@@ -4405,6 +4530,7 @@ func rewriteValueARM64_OpARM64MOVHUreg_0(v *Value) bool {
 		if x.Op != OpARM64MOVHUload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpARM64MOVDreg)
 		v.AddArg(x)
 		return true
@@ -4459,6 +4585,7 @@ func rewriteValueARM64_OpARM64MOVHload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64ADDconst {
 			break
@@ -4482,6 +4609,7 @@ func rewriteValueARM64_OpARM64MOVHload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDaddr {
 			break
@@ -4506,6 +4634,7 @@ func rewriteValueARM64_OpARM64MOVHload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVHstorezero {
@@ -4513,6 +4642,7 @@ func rewriteValueARM64_OpARM64MOVHload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[1]
 		ptr2 := v_1.Args[0]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2)) {
 			break
@@ -4532,6 +4662,7 @@ func rewriteValueARM64_OpARM64MOVHreg_0(v *Value) bool {
 		if x.Op != OpARM64MOVBload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpARM64MOVDreg)
 		v.AddArg(x)
 		return true
@@ -4544,6 +4675,7 @@ func rewriteValueARM64_OpARM64MOVHreg_0(v *Value) bool {
 		if x.Op != OpARM64MOVBUload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpARM64MOVDreg)
 		v.AddArg(x)
 		return true
@@ -4556,6 +4688,7 @@ func rewriteValueARM64_OpARM64MOVHreg_0(v *Value) bool {
 		if x.Op != OpARM64MOVHload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpARM64MOVDreg)
 		v.AddArg(x)
 		return true
@@ -4622,6 +4755,7 @@ func rewriteValueARM64_OpARM64MOVHstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64ADDconst {
 			break
@@ -4647,6 +4781,7 @@ func rewriteValueARM64_OpARM64MOVHstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDaddr {
 			break
@@ -4673,6 +4808,7 @@ func rewriteValueARM64_OpARM64MOVHstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -4695,6 +4831,7 @@ func rewriteValueARM64_OpARM64MOVHstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVHreg {
@@ -4716,6 +4853,7 @@ func rewriteValueARM64_OpARM64MOVHstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVHUreg {
@@ -4737,6 +4875,7 @@ func rewriteValueARM64_OpARM64MOVHstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVWreg {
@@ -4758,6 +4897,7 @@ func rewriteValueARM64_OpARM64MOVHstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVWUreg {
@@ -4786,6 +4926,7 @@ func rewriteValueARM64_OpARM64MOVHstorezero_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64ADDconst {
 			break
@@ -4809,6 +4950,7 @@ func rewriteValueARM64_OpARM64MOVHstorezero_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDaddr {
 			break
@@ -4840,6 +4982,7 @@ func rewriteValueARM64_OpARM64MOVWUload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64ADDconst {
 			break
@@ -4863,6 +5006,7 @@ func rewriteValueARM64_OpARM64MOVWUload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDaddr {
 			break
@@ -4887,6 +5031,7 @@ func rewriteValueARM64_OpARM64MOVWUload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVWstorezero {
@@ -4894,6 +5039,7 @@ func rewriteValueARM64_OpARM64MOVWUload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[1]
 		ptr2 := v_1.Args[0]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2)) {
 			break
@@ -4913,6 +5059,7 @@ func rewriteValueARM64_OpARM64MOVWUreg_0(v *Value) bool {
 		if x.Op != OpARM64MOVBUload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpARM64MOVDreg)
 		v.AddArg(x)
 		return true
@@ -4925,6 +5072,7 @@ func rewriteValueARM64_OpARM64MOVWUreg_0(v *Value) bool {
 		if x.Op != OpARM64MOVHUload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpARM64MOVDreg)
 		v.AddArg(x)
 		return true
@@ -4937,6 +5085,7 @@ func rewriteValueARM64_OpARM64MOVWUreg_0(v *Value) bool {
 		if x.Op != OpARM64MOVWUload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpARM64MOVDreg)
 		v.AddArg(x)
 		return true
@@ -5003,6 +5152,7 @@ func rewriteValueARM64_OpARM64MOVWload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64ADDconst {
 			break
@@ -5026,6 +5176,7 @@ func rewriteValueARM64_OpARM64MOVWload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDaddr {
 			break
@@ -5050,6 +5201,7 @@ func rewriteValueARM64_OpARM64MOVWload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVWstorezero {
@@ -5057,6 +5209,7 @@ func rewriteValueARM64_OpARM64MOVWload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[1]
 		ptr2 := v_1.Args[0]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2)) {
 			break
@@ -5076,6 +5229,7 @@ func rewriteValueARM64_OpARM64MOVWreg_0(v *Value) bool {
 		if x.Op != OpARM64MOVBload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpARM64MOVDreg)
 		v.AddArg(x)
 		return true
@@ -5088,6 +5242,7 @@ func rewriteValueARM64_OpARM64MOVWreg_0(v *Value) bool {
 		if x.Op != OpARM64MOVBUload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpARM64MOVDreg)
 		v.AddArg(x)
 		return true
@@ -5100,6 +5255,7 @@ func rewriteValueARM64_OpARM64MOVWreg_0(v *Value) bool {
 		if x.Op != OpARM64MOVHload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpARM64MOVDreg)
 		v.AddArg(x)
 		return true
@@ -5112,6 +5268,7 @@ func rewriteValueARM64_OpARM64MOVWreg_0(v *Value) bool {
 		if x.Op != OpARM64MOVHUload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpARM64MOVDreg)
 		v.AddArg(x)
 		return true
@@ -5124,6 +5281,7 @@ func rewriteValueARM64_OpARM64MOVWreg_0(v *Value) bool {
 		if x.Op != OpARM64MOVWload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpARM64MOVDreg)
 		v.AddArg(x)
 		return true
@@ -5217,6 +5375,7 @@ func rewriteValueARM64_OpARM64MOVWstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64ADDconst {
 			break
@@ -5242,6 +5401,7 @@ func rewriteValueARM64_OpARM64MOVWstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDaddr {
 			break
@@ -5268,6 +5428,7 @@ func rewriteValueARM64_OpARM64MOVWstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -5290,6 +5451,7 @@ func rewriteValueARM64_OpARM64MOVWstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVWreg {
@@ -5311,6 +5473,7 @@ func rewriteValueARM64_OpARM64MOVWstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVWUreg {
@@ -5339,6 +5502,7 @@ func rewriteValueARM64_OpARM64MOVWstorezero_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64ADDconst {
 			break
@@ -5362,6 +5526,7 @@ func rewriteValueARM64_OpARM64MOVWstorezero_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDaddr {
 			break
@@ -5387,6 +5552,7 @@ func rewriteValueARM64_OpARM64MUL_0(v *Value) bool {
 	// cond:
 	// result: (NEG x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -5403,6 +5569,7 @@ func rewriteValueARM64_OpARM64MUL_0(v *Value) bool {
 	// cond:
 	// result: (NEG x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -5419,6 +5586,7 @@ func rewriteValueARM64_OpARM64MUL_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
 			break
@@ -5434,6 +5602,7 @@ func rewriteValueARM64_OpARM64MUL_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -5449,6 +5618,7 @@ func rewriteValueARM64_OpARM64MUL_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -5466,6 +5636,7 @@ func rewriteValueARM64_OpARM64MUL_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -5483,6 +5654,7 @@ func rewriteValueARM64_OpARM64MUL_0(v *Value) bool {
 	// cond: isPowerOfTwo(c)
 	// result: (SLLconst [log2(c)] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -5501,6 +5673,7 @@ func rewriteValueARM64_OpARM64MUL_0(v *Value) bool {
 	// cond: isPowerOfTwo(c)
 	// result: (SLLconst [log2(c)] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -5519,6 +5692,7 @@ func rewriteValueARM64_OpARM64MUL_0(v *Value) bool {
 	// cond: isPowerOfTwo(c-1) && c >= 3
 	// result: (ADDshiftLL x x [log2(c-1)])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -5538,6 +5712,7 @@ func rewriteValueARM64_OpARM64MUL_0(v *Value) bool {
 	// cond: isPowerOfTwo(c-1) && c >= 3
 	// result: (ADDshiftLL x x [log2(c-1)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -5562,6 +5737,7 @@ func rewriteValueARM64_OpARM64MUL_10(v *Value) bool {
 	// cond: isPowerOfTwo(c+1) && c >= 7
 	// result: (ADDshiftLL (NEG <x.Type> x) x [log2(c+1)])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -5583,6 +5759,7 @@ func rewriteValueARM64_OpARM64MUL_10(v *Value) bool {
 	// cond: isPowerOfTwo(c+1) && c >= 7
 	// result: (ADDshiftLL (NEG <x.Type> x) x [log2(c+1)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -5604,6 +5781,7 @@ func rewriteValueARM64_OpARM64MUL_10(v *Value) bool {
 	// cond: c%3 == 0 && isPowerOfTwo(c/3)
 	// result: (SLLconst [log2(c/3)] (ADDshiftLL <x.Type> x x [1]))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -5626,6 +5804,7 @@ func rewriteValueARM64_OpARM64MUL_10(v *Value) bool {
 	// cond: c%3 == 0 && isPowerOfTwo(c/3)
 	// result: (SLLconst [log2(c/3)] (ADDshiftLL <x.Type> x x [1]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -5648,6 +5827,7 @@ func rewriteValueARM64_OpARM64MUL_10(v *Value) bool {
 	// cond: c%5 == 0 && isPowerOfTwo(c/5)
 	// result: (SLLconst [log2(c/5)] (ADDshiftLL <x.Type> x x [2]))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -5670,6 +5850,7 @@ func rewriteValueARM64_OpARM64MUL_10(v *Value) bool {
 	// cond: c%5 == 0 && isPowerOfTwo(c/5)
 	// result: (SLLconst [log2(c/5)] (ADDshiftLL <x.Type> x x [2]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -5692,6 +5873,7 @@ func rewriteValueARM64_OpARM64MUL_10(v *Value) bool {
 	// cond: c%7 == 0 && isPowerOfTwo(c/7)
 	// result: (SLLconst [log2(c/7)] (ADDshiftLL <x.Type> (NEG <x.Type> x) x [3]))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -5716,6 +5898,7 @@ func rewriteValueARM64_OpARM64MUL_10(v *Value) bool {
 	// cond: c%7 == 0 && isPowerOfTwo(c/7)
 	// result: (SLLconst [log2(c/7)] (ADDshiftLL <x.Type> (NEG <x.Type> x) x [3]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -5740,6 +5923,7 @@ func rewriteValueARM64_OpARM64MUL_10(v *Value) bool {
 	// cond: c%9 == 0 && isPowerOfTwo(c/9)
 	// result: (SLLconst [log2(c/9)] (ADDshiftLL <x.Type> x x [3]))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -5762,6 +5946,7 @@ func rewriteValueARM64_OpARM64MUL_10(v *Value) bool {
 	// cond: c%9 == 0 && isPowerOfTwo(c/9)
 	// result: (SLLconst [log2(c/9)] (ADDshiftLL <x.Type> x x [3]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -5787,6 +5972,7 @@ func rewriteValueARM64_OpARM64MUL_20(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [c*d])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -5805,6 +5991,7 @@ func rewriteValueARM64_OpARM64MUL_20(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [c*d])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -5826,6 +6013,7 @@ func rewriteValueARM64_OpARM64MULW_0(v *Value) bool {
 	// cond: int32(c)==-1
 	// result: (NEG x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -5843,6 +6031,7 @@ func rewriteValueARM64_OpARM64MULW_0(v *Value) bool {
 	// cond: int32(c)==-1
 	// result: (NEG x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -5860,6 +6049,7 @@ func rewriteValueARM64_OpARM64MULW_0(v *Value) bool {
 	// cond: int32(c)==0
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
 			break
@@ -5876,6 +6066,7 @@ func rewriteValueARM64_OpARM64MULW_0(v *Value) bool {
 	// cond: int32(c)==0
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -5892,6 +6083,7 @@ func rewriteValueARM64_OpARM64MULW_0(v *Value) bool {
 	// cond: int32(c)==1
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -5910,6 +6102,7 @@ func rewriteValueARM64_OpARM64MULW_0(v *Value) bool {
 	// cond: int32(c)==1
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -5928,6 +6121,7 @@ func rewriteValueARM64_OpARM64MULW_0(v *Value) bool {
 	// cond: isPowerOfTwo(c)
 	// result: (SLLconst [log2(c)] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -5946,6 +6140,7 @@ func rewriteValueARM64_OpARM64MULW_0(v *Value) bool {
 	// cond: isPowerOfTwo(c)
 	// result: (SLLconst [log2(c)] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -5964,6 +6159,7 @@ func rewriteValueARM64_OpARM64MULW_0(v *Value) bool {
 	// cond: isPowerOfTwo(c-1) && int32(c) >= 3
 	// result: (ADDshiftLL x x [log2(c-1)])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -5983,6 +6179,7 @@ func rewriteValueARM64_OpARM64MULW_0(v *Value) bool {
 	// cond: isPowerOfTwo(c-1) && int32(c) >= 3
 	// result: (ADDshiftLL x x [log2(c-1)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -6007,6 +6204,7 @@ func rewriteValueARM64_OpARM64MULW_10(v *Value) bool {
 	// cond: isPowerOfTwo(c+1) && int32(c) >= 7
 	// result: (ADDshiftLL (NEG <x.Type> x) x [log2(c+1)])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -6028,6 +6226,7 @@ func rewriteValueARM64_OpARM64MULW_10(v *Value) bool {
 	// cond: isPowerOfTwo(c+1) && int32(c) >= 7
 	// result: (ADDshiftLL (NEG <x.Type> x) x [log2(c+1)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -6049,6 +6248,7 @@ func rewriteValueARM64_OpARM64MULW_10(v *Value) bool {
 	// cond: c%3 == 0 && isPowerOfTwo(c/3) && is32Bit(c)
 	// result: (SLLconst [log2(c/3)] (ADDshiftLL <x.Type> x x [1]))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -6071,6 +6271,7 @@ func rewriteValueARM64_OpARM64MULW_10(v *Value) bool {
 	// cond: c%3 == 0 && isPowerOfTwo(c/3) && is32Bit(c)
 	// result: (SLLconst [log2(c/3)] (ADDshiftLL <x.Type> x x [1]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -6093,6 +6294,7 @@ func rewriteValueARM64_OpARM64MULW_10(v *Value) bool {
 	// cond: c%5 == 0 && isPowerOfTwo(c/5) && is32Bit(c)
 	// result: (SLLconst [log2(c/5)] (ADDshiftLL <x.Type> x x [2]))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -6115,6 +6317,7 @@ func rewriteValueARM64_OpARM64MULW_10(v *Value) bool {
 	// cond: c%5 == 0 && isPowerOfTwo(c/5) && is32Bit(c)
 	// result: (SLLconst [log2(c/5)] (ADDshiftLL <x.Type> x x [2]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -6137,6 +6340,7 @@ func rewriteValueARM64_OpARM64MULW_10(v *Value) bool {
 	// cond: c%7 == 0 && isPowerOfTwo(c/7) && is32Bit(c)
 	// result: (SLLconst [log2(c/7)] (ADDshiftLL <x.Type> (NEG <x.Type> x) x [3]))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -6161,6 +6365,7 @@ func rewriteValueARM64_OpARM64MULW_10(v *Value) bool {
 	// cond: c%7 == 0 && isPowerOfTwo(c/7) && is32Bit(c)
 	// result: (SLLconst [log2(c/7)] (ADDshiftLL <x.Type> (NEG <x.Type> x) x [3]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -6185,6 +6390,7 @@ func rewriteValueARM64_OpARM64MULW_10(v *Value) bool {
 	// cond: c%9 == 0 && isPowerOfTwo(c/9) && is32Bit(c)
 	// result: (SLLconst [log2(c/9)] (ADDshiftLL <x.Type> x x [3]))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -6207,6 +6413,7 @@ func rewriteValueARM64_OpARM64MULW_10(v *Value) bool {
 	// cond: c%9 == 0 && isPowerOfTwo(c/9) && is32Bit(c)
 	// result: (SLLconst [log2(c/9)] (ADDshiftLL <x.Type> x x [3]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -6232,6 +6439,7 @@ func rewriteValueARM64_OpARM64MULW_20(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [int64(int32(c)*int32(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -6250,6 +6458,7 @@ func rewriteValueARM64_OpARM64MULW_20(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [int64(int32(c)*int32(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -6381,6 +6590,7 @@ func rewriteValueARM64_OpARM64OR_0(v *Value) bool {
 	// cond:
 	// result: (ORconst  [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -6396,6 +6606,7 @@ func rewriteValueARM64_OpARM64OR_0(v *Value) bool {
 	// cond:
 	// result: (ORconst  [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -6411,6 +6622,7 @@ func rewriteValueARM64_OpARM64OR_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -6424,6 +6636,7 @@ func rewriteValueARM64_OpARM64OR_0(v *Value) bool {
 	// cond:
 	// result: (ORshiftLL  x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64SLLconst {
@@ -6441,6 +6654,7 @@ func rewriteValueARM64_OpARM64OR_0(v *Value) bool {
 	// cond:
 	// result: (ORshiftLL  x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64SLLconst {
 			break
@@ -6458,6 +6672,7 @@ func rewriteValueARM64_OpARM64OR_0(v *Value) bool {
 	// cond:
 	// result: (ORshiftRL  x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64SRLconst {
@@ -6475,6 +6690,7 @@ func rewriteValueARM64_OpARM64OR_0(v *Value) bool {
 	// cond:
 	// result: (ORshiftRL  x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64SRLconst {
 			break
@@ -6492,6 +6708,7 @@ func rewriteValueARM64_OpARM64OR_0(v *Value) bool {
 	// cond:
 	// result: (ORshiftRA  x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64SRAconst {
@@ -6509,6 +6726,7 @@ func rewriteValueARM64_OpARM64OR_0(v *Value) bool {
 	// cond:
 	// result: (ORshiftRA  x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64SRAconst {
 			break
@@ -6527,6 +6745,7 @@ func rewriteValueARM64_OpARM64OR_0(v *Value) bool {
 	// result: @mergePoint(b,x0,x1,x2,x3) (MOVWUload <t> {s} (OffPtr <p.Type> [i0] p) mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		o0 := v.Args[0]
 		if o0.Op != OpARM64ORshiftLL {
 			break
@@ -6534,6 +6753,7 @@ func rewriteValueARM64_OpARM64OR_0(v *Value) bool {
 		if o0.AuxInt != 8 {
 			break
 		}
+		_ = o0.Args[1]
 		o1 := o0.Args[0]
 		if o1.Op != OpARM64ORshiftLL {
 			break
@@ -6541,6 +6761,7 @@ func rewriteValueARM64_OpARM64OR_0(v *Value) bool {
 		if o1.AuxInt != 16 {
 			break
 		}
+		_ = o1.Args[1]
 		s0 := o1.Args[0]
 		if s0.Op != OpARM64SLLconst {
 			break
@@ -6558,6 +6779,7 @@ func rewriteValueARM64_OpARM64OR_0(v *Value) bool {
 		}
 		i3 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		y1 := o1.Args[1]
@@ -6572,6 +6794,7 @@ func rewriteValueARM64_OpARM64OR_0(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -6590,6 +6813,7 @@ func rewriteValueARM64_OpARM64OR_0(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[1]
 		if p != x2.Args[0] {
 			break
 		}
@@ -6608,6 +6832,7 @@ func rewriteValueARM64_OpARM64OR_0(v *Value) bool {
 		if x3.Aux != s {
 			break
 		}
+		_ = x3.Args[1]
 		if p != x3.Args[0] {
 			break
 		}
@@ -6639,6 +6864,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 	// result: @mergePoint(b,x0,x1,x2,x3) (MOVWUload <t> {s} (OffPtr <p.Type> [i0] p) mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		y3 := v.Args[0]
 		if y3.Op != OpARM64MOVDnop {
 			break
@@ -6649,6 +6875,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		}
 		i0 := x3.AuxInt
 		s := x3.Aux
+		_ = x3.Args[1]
 		p := x3.Args[0]
 		mem := x3.Args[1]
 		o0 := v.Args[1]
@@ -6658,6 +6885,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if o0.AuxInt != 8 {
 			break
 		}
+		_ = o0.Args[1]
 		o1 := o0.Args[0]
 		if o1.Op != OpARM64ORshiftLL {
 			break
@@ -6665,6 +6893,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if o1.AuxInt != 16 {
 			break
 		}
+		_ = o1.Args[1]
 		s0 := o1.Args[0]
 		if s0.Op != OpARM64SLLconst {
 			break
@@ -6684,6 +6913,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -6702,6 +6932,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -6720,6 +6951,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[1]
 		if p != x2.Args[0] {
 			break
 		}
@@ -6746,6 +6978,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 	// result: @mergePoint(b,x0,x1,x2,x3,x4,x5,x6,x7) (REV <t> (MOVDload <t> {s} (OffPtr <p.Type> [i0] p) mem))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		o0 := v.Args[0]
 		if o0.Op != OpARM64ORshiftLL {
 			break
@@ -6753,6 +6986,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if o0.AuxInt != 8 {
 			break
 		}
+		_ = o0.Args[1]
 		o1 := o0.Args[0]
 		if o1.Op != OpARM64ORshiftLL {
 			break
@@ -6760,6 +6994,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if o1.AuxInt != 16 {
 			break
 		}
+		_ = o1.Args[1]
 		o2 := o1.Args[0]
 		if o2.Op != OpARM64ORshiftLL {
 			break
@@ -6767,6 +7002,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if o2.AuxInt != 24 {
 			break
 		}
+		_ = o2.Args[1]
 		o3 := o2.Args[0]
 		if o3.Op != OpARM64ORshiftLL {
 			break
@@ -6774,6 +7010,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if o3.AuxInt != 32 {
 			break
 		}
+		_ = o3.Args[1]
 		o4 := o3.Args[0]
 		if o4.Op != OpARM64ORshiftLL {
 			break
@@ -6781,6 +7018,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if o4.AuxInt != 40 {
 			break
 		}
+		_ = o4.Args[1]
 		o5 := o4.Args[0]
 		if o5.Op != OpARM64ORshiftLL {
 			break
@@ -6788,6 +7026,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if o5.AuxInt != 48 {
 			break
 		}
+		_ = o5.Args[1]
 		s0 := o5.Args[0]
 		if s0.Op != OpARM64SLLconst {
 			break
@@ -6805,6 +7044,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		}
 		i7 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		y1 := o5.Args[1]
@@ -6819,6 +7059,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -6837,6 +7078,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[1]
 		if p != x2.Args[0] {
 			break
 		}
@@ -6855,6 +7097,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x3.Aux != s {
 			break
 		}
+		_ = x3.Args[1]
 		if p != x3.Args[0] {
 			break
 		}
@@ -6873,6 +7116,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x4.Aux != s {
 			break
 		}
+		_ = x4.Args[1]
 		if p != x4.Args[0] {
 			break
 		}
@@ -6891,6 +7135,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x5.Aux != s {
 			break
 		}
+		_ = x5.Args[1]
 		if p != x5.Args[0] {
 			break
 		}
@@ -6909,6 +7154,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x6.Aux != s {
 			break
 		}
+		_ = x6.Args[1]
 		if p != x6.Args[0] {
 			break
 		}
@@ -6927,6 +7173,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x7.Aux != s {
 			break
 		}
+		_ = x7.Args[1]
 		if p != x7.Args[0] {
 			break
 		}
@@ -6955,6 +7202,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 	// result: @mergePoint(b,x0,x1,x2,x3,x4,x5,x6,x7) (REV <t> (MOVDload <t> {s} (OffPtr <p.Type> [i0] p) mem))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		y7 := v.Args[0]
 		if y7.Op != OpARM64MOVDnop {
 			break
@@ -6965,6 +7213,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		}
 		i0 := x7.AuxInt
 		s := x7.Aux
+		_ = x7.Args[1]
 		p := x7.Args[0]
 		mem := x7.Args[1]
 		o0 := v.Args[1]
@@ -6974,6 +7223,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if o0.AuxInt != 8 {
 			break
 		}
+		_ = o0.Args[1]
 		o1 := o0.Args[0]
 		if o1.Op != OpARM64ORshiftLL {
 			break
@@ -6981,6 +7231,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if o1.AuxInt != 16 {
 			break
 		}
+		_ = o1.Args[1]
 		o2 := o1.Args[0]
 		if o2.Op != OpARM64ORshiftLL {
 			break
@@ -6988,6 +7239,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if o2.AuxInt != 24 {
 			break
 		}
+		_ = o2.Args[1]
 		o3 := o2.Args[0]
 		if o3.Op != OpARM64ORshiftLL {
 			break
@@ -6995,6 +7247,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if o3.AuxInt != 32 {
 			break
 		}
+		_ = o3.Args[1]
 		o4 := o3.Args[0]
 		if o4.Op != OpARM64ORshiftLL {
 			break
@@ -7002,6 +7255,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if o4.AuxInt != 40 {
 			break
 		}
+		_ = o4.Args[1]
 		o5 := o4.Args[0]
 		if o5.Op != OpARM64ORshiftLL {
 			break
@@ -7009,6 +7263,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if o5.AuxInt != 48 {
 			break
 		}
+		_ = o5.Args[1]
 		s0 := o5.Args[0]
 		if s0.Op != OpARM64SLLconst {
 			break
@@ -7028,6 +7283,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -7046,6 +7302,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -7064,6 +7321,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[1]
 		if p != x2.Args[0] {
 			break
 		}
@@ -7082,6 +7340,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x3.Aux != s {
 			break
 		}
+		_ = x3.Args[1]
 		if p != x3.Args[0] {
 			break
 		}
@@ -7100,6 +7359,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x4.Aux != s {
 			break
 		}
+		_ = x4.Args[1]
 		if p != x4.Args[0] {
 			break
 		}
@@ -7118,6 +7378,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x5.Aux != s {
 			break
 		}
+		_ = x5.Args[1]
 		if p != x5.Args[0] {
 			break
 		}
@@ -7136,6 +7397,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x6.Aux != s {
 			break
 		}
+		_ = x6.Args[1]
 		if p != x6.Args[0] {
 			break
 		}
@@ -7164,6 +7426,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 	// result: @mergePoint(b,x0,x1,x2,x3) (REVW <t> (MOVWUload <t> {s} (OffPtr <p.Type> [i0] p) mem))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		o0 := v.Args[0]
 		if o0.Op != OpARM64ORshiftLL {
 			break
@@ -7171,6 +7434,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if o0.AuxInt != 8 {
 			break
 		}
+		_ = o0.Args[1]
 		o1 := o0.Args[0]
 		if o1.Op != OpARM64ORshiftLL {
 			break
@@ -7178,6 +7442,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if o1.AuxInt != 16 {
 			break
 		}
+		_ = o1.Args[1]
 		s0 := o1.Args[0]
 		if s0.Op != OpARM64SLLconst {
 			break
@@ -7195,6 +7460,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		y1 := o1.Args[1]
@@ -7209,6 +7475,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -7227,6 +7494,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[1]
 		if p != x2.Args[0] {
 			break
 		}
@@ -7245,6 +7513,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x3.Aux != s {
 			break
 		}
+		_ = x3.Args[1]
 		if p != x3.Args[0] {
 			break
 		}
@@ -7273,6 +7542,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 	// result: @mergePoint(b,x0,x1,x2,x3) (REVW <t> (MOVWUload <t> {s} (OffPtr <p.Type> [i0] p) mem))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		y3 := v.Args[0]
 		if y3.Op != OpARM64MOVDnop {
 			break
@@ -7283,6 +7553,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		}
 		i3 := x3.AuxInt
 		s := x3.Aux
+		_ = x3.Args[1]
 		p := x3.Args[0]
 		mem := x3.Args[1]
 		o0 := v.Args[1]
@@ -7292,6 +7563,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if o0.AuxInt != 8 {
 			break
 		}
+		_ = o0.Args[1]
 		o1 := o0.Args[0]
 		if o1.Op != OpARM64ORshiftLL {
 			break
@@ -7299,6 +7571,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if o1.AuxInt != 16 {
 			break
 		}
+		_ = o1.Args[1]
 		s0 := o1.Args[0]
 		if s0.Op != OpARM64SLLconst {
 			break
@@ -7318,6 +7591,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -7336,6 +7610,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -7354,6 +7629,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[1]
 		if p != x2.Args[0] {
 			break
 		}
@@ -7382,6 +7658,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 	// result: @mergePoint(b,x0,x1,x2,x3,x4,x5,x6,x7) (REV <t> (MOVDload <t> {s} (OffPtr <p.Type> [i0] p) mem))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		o0 := v.Args[0]
 		if o0.Op != OpARM64ORshiftLL {
 			break
@@ -7389,6 +7666,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if o0.AuxInt != 8 {
 			break
 		}
+		_ = o0.Args[1]
 		o1 := o0.Args[0]
 		if o1.Op != OpARM64ORshiftLL {
 			break
@@ -7396,6 +7674,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if o1.AuxInt != 16 {
 			break
 		}
+		_ = o1.Args[1]
 		o2 := o1.Args[0]
 		if o2.Op != OpARM64ORshiftLL {
 			break
@@ -7403,6 +7682,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if o2.AuxInt != 24 {
 			break
 		}
+		_ = o2.Args[1]
 		o3 := o2.Args[0]
 		if o3.Op != OpARM64ORshiftLL {
 			break
@@ -7410,6 +7690,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if o3.AuxInt != 32 {
 			break
 		}
+		_ = o3.Args[1]
 		o4 := o3.Args[0]
 		if o4.Op != OpARM64ORshiftLL {
 			break
@@ -7417,6 +7698,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if o4.AuxInt != 40 {
 			break
 		}
+		_ = o4.Args[1]
 		o5 := o4.Args[0]
 		if o5.Op != OpARM64ORshiftLL {
 			break
@@ -7424,6 +7706,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if o5.AuxInt != 48 {
 			break
 		}
+		_ = o5.Args[1]
 		s0 := o5.Args[0]
 		if s0.Op != OpARM64SLLconst {
 			break
@@ -7441,6 +7724,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		y1 := o5.Args[1]
@@ -7455,6 +7739,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -7473,6 +7758,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[1]
 		if p != x2.Args[0] {
 			break
 		}
@@ -7491,6 +7777,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x3.Aux != s {
 			break
 		}
+		_ = x3.Args[1]
 		if p != x3.Args[0] {
 			break
 		}
@@ -7509,6 +7796,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x4.Aux != s {
 			break
 		}
+		_ = x4.Args[1]
 		if p != x4.Args[0] {
 			break
 		}
@@ -7527,6 +7815,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x5.Aux != s {
 			break
 		}
+		_ = x5.Args[1]
 		if p != x5.Args[0] {
 			break
 		}
@@ -7545,6 +7834,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x6.Aux != s {
 			break
 		}
+		_ = x6.Args[1]
 		if p != x6.Args[0] {
 			break
 		}
@@ -7563,6 +7853,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x7.Aux != s {
 			break
 		}
+		_ = x7.Args[1]
 		if p != x7.Args[0] {
 			break
 		}
@@ -7591,6 +7882,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 	// result: @mergePoint(b,x0,x1,x2,x3,x4,x5,x6,x7) (REV <t> (MOVDload <t> {s} (OffPtr <p.Type> [i0] p) mem))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		y7 := v.Args[0]
 		if y7.Op != OpARM64MOVDnop {
 			break
@@ -7601,6 +7893,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		}
 		i7 := x7.AuxInt
 		s := x7.Aux
+		_ = x7.Args[1]
 		p := x7.Args[0]
 		mem := x7.Args[1]
 		o0 := v.Args[1]
@@ -7610,6 +7903,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if o0.AuxInt != 8 {
 			break
 		}
+		_ = o0.Args[1]
 		o1 := o0.Args[0]
 		if o1.Op != OpARM64ORshiftLL {
 			break
@@ -7617,6 +7911,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if o1.AuxInt != 16 {
 			break
 		}
+		_ = o1.Args[1]
 		o2 := o1.Args[0]
 		if o2.Op != OpARM64ORshiftLL {
 			break
@@ -7624,6 +7919,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if o2.AuxInt != 24 {
 			break
 		}
+		_ = o2.Args[1]
 		o3 := o2.Args[0]
 		if o3.Op != OpARM64ORshiftLL {
 			break
@@ -7631,6 +7927,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if o3.AuxInt != 32 {
 			break
 		}
+		_ = o3.Args[1]
 		o4 := o3.Args[0]
 		if o4.Op != OpARM64ORshiftLL {
 			break
@@ -7638,6 +7935,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if o4.AuxInt != 40 {
 			break
 		}
+		_ = o4.Args[1]
 		o5 := o4.Args[0]
 		if o5.Op != OpARM64ORshiftLL {
 			break
@@ -7645,6 +7943,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if o5.AuxInt != 48 {
 			break
 		}
+		_ = o5.Args[1]
 		s0 := o5.Args[0]
 		if s0.Op != OpARM64SLLconst {
 			break
@@ -7664,6 +7963,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -7682,6 +7982,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -7700,6 +8001,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[1]
 		if p != x2.Args[0] {
 			break
 		}
@@ -7718,6 +8020,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x3.Aux != s {
 			break
 		}
+		_ = x3.Args[1]
 		if p != x3.Args[0] {
 			break
 		}
@@ -7736,6 +8039,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x4.Aux != s {
 			break
 		}
+		_ = x4.Args[1]
 		if p != x4.Args[0] {
 			break
 		}
@@ -7754,6 +8058,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x5.Aux != s {
 			break
 		}
+		_ = x5.Args[1]
 		if p != x5.Args[0] {
 			break
 		}
@@ -7772,6 +8077,7 @@ func rewriteValueARM64_OpARM64OR_10(v *Value) bool {
 		if x6.Aux != s {
 			break
 		}
+		_ = x6.Args[1]
 		if p != x6.Args[0] {
 			break
 		}
@@ -7862,6 +8168,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_0(v *Value) bool {
 	// result: (ORconst  [c] (SLLconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -7881,6 +8188,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_0(v *Value) bool {
 	// result: (ORconst  x [int64(uint64(c)<<uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -7897,6 +8205,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_0(v *Value) bool {
 	// result: y
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		if y.Op != OpARM64SLLconst {
@@ -7919,6 +8228,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_0(v *Value) bool {
 	// result: (RORconst [64-c] x)
 	for {
 		c := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64SRLconst {
 			break
@@ -7941,6 +8251,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_0(v *Value) bool {
 	for {
 		t := v.Type
 		c := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64SRLconst {
 			break
@@ -7972,6 +8283,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_0(v *Value) bool {
 		if v.AuxInt != 8 {
 			break
 		}
+		_ = v.Args[1]
 		y0 := v.Args[0]
 		if y0.Op != OpARM64MOVDnop {
 			break
@@ -7982,6 +8294,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_0(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		y1 := v.Args[1]
@@ -7996,6 +8309,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_0(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -8025,6 +8339,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_0(v *Value) bool {
 		if v.AuxInt != 24 {
 			break
 		}
+		_ = v.Args[1]
 		o0 := v.Args[0]
 		if o0.Op != OpARM64ORshiftLL {
 			break
@@ -8032,12 +8347,14 @@ func rewriteValueARM64_OpARM64ORshiftLL_0(v *Value) bool {
 		if o0.AuxInt != 16 {
 			break
 		}
+		_ = o0.Args[1]
 		x0 := o0.Args[0]
 		if x0.Op != OpARM64MOVHUload {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		y1 := o0.Args[1]
@@ -8052,6 +8369,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_0(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -8070,6 +8388,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_0(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[1]
 		if p != x2.Args[0] {
 			break
 		}
@@ -8099,6 +8418,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_0(v *Value) bool {
 		if v.AuxInt != 56 {
 			break
 		}
+		_ = v.Args[1]
 		o0 := v.Args[0]
 		if o0.Op != OpARM64ORshiftLL {
 			break
@@ -8106,6 +8426,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_0(v *Value) bool {
 		if o0.AuxInt != 48 {
 			break
 		}
+		_ = o0.Args[1]
 		o1 := o0.Args[0]
 		if o1.Op != OpARM64ORshiftLL {
 			break
@@ -8113,6 +8434,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_0(v *Value) bool {
 		if o1.AuxInt != 40 {
 			break
 		}
+		_ = o1.Args[1]
 		o2 := o1.Args[0]
 		if o2.Op != OpARM64ORshiftLL {
 			break
@@ -8120,12 +8442,14 @@ func rewriteValueARM64_OpARM64ORshiftLL_0(v *Value) bool {
 		if o2.AuxInt != 32 {
 			break
 		}
+		_ = o2.Args[1]
 		x0 := o2.Args[0]
 		if x0.Op != OpARM64MOVWUload {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		y1 := o2.Args[1]
@@ -8140,6 +8464,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_0(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -8158,6 +8483,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_0(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[1]
 		if p != x2.Args[0] {
 			break
 		}
@@ -8176,6 +8502,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_0(v *Value) bool {
 		if x3.Aux != s {
 			break
 		}
+		_ = x3.Args[1]
 		if p != x3.Args[0] {
 			break
 		}
@@ -8194,6 +8521,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_0(v *Value) bool {
 		if x4.Aux != s {
 			break
 		}
+		_ = x4.Args[1]
 		if p != x4.Args[0] {
 			break
 		}
@@ -8223,6 +8551,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_0(v *Value) bool {
 		if v.AuxInt != 8 {
 			break
 		}
+		_ = v.Args[1]
 		y0 := v.Args[0]
 		if y0.Op != OpARM64MOVDnop {
 			break
@@ -8233,6 +8562,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_0(v *Value) bool {
 		}
 		i1 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		y1 := v.Args[1]
@@ -8247,6 +8577,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_0(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -8276,6 +8607,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_0(v *Value) bool {
 		if v.AuxInt != 24 {
 			break
 		}
+		_ = v.Args[1]
 		o0 := v.Args[0]
 		if o0.Op != OpARM64ORshiftLL {
 			break
@@ -8283,6 +8615,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_0(v *Value) bool {
 		if o0.AuxInt != 16 {
 			break
 		}
+		_ = o0.Args[1]
 		y0 := o0.Args[0]
 		if y0.Op != OpARM64REV16W {
 			break
@@ -8293,6 +8626,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_0(v *Value) bool {
 		}
 		i2 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		y1 := o0.Args[1]
@@ -8307,6 +8641,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_0(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -8325,6 +8660,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_0(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[1]
 		if p != x2.Args[0] {
 			break
 		}
@@ -8361,6 +8697,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_10(v *Value) bool {
 		if v.AuxInt != 56 {
 			break
 		}
+		_ = v.Args[1]
 		o0 := v.Args[0]
 		if o0.Op != OpARM64ORshiftLL {
 			break
@@ -8368,6 +8705,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_10(v *Value) bool {
 		if o0.AuxInt != 48 {
 			break
 		}
+		_ = o0.Args[1]
 		o1 := o0.Args[0]
 		if o1.Op != OpARM64ORshiftLL {
 			break
@@ -8375,6 +8713,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_10(v *Value) bool {
 		if o1.AuxInt != 40 {
 			break
 		}
+		_ = o1.Args[1]
 		o2 := o1.Args[0]
 		if o2.Op != OpARM64ORshiftLL {
 			break
@@ -8382,6 +8721,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_10(v *Value) bool {
 		if o2.AuxInt != 32 {
 			break
 		}
+		_ = o2.Args[1]
 		y0 := o2.Args[0]
 		if y0.Op != OpARM64REVW {
 			break
@@ -8392,6 +8732,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_10(v *Value) bool {
 		}
 		i4 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		y1 := o2.Args[1]
@@ -8406,6 +8747,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_10(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -8424,6 +8766,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_10(v *Value) bool {
 		if x2.Aux != s {
 			break
 		}
+		_ = x2.Args[1]
 		if p != x2.Args[0] {
 			break
 		}
@@ -8442,6 +8785,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_10(v *Value) bool {
 		if x3.Aux != s {
 			break
 		}
+		_ = x3.Args[1]
 		if p != x3.Args[0] {
 			break
 		}
@@ -8460,6 +8804,7 @@ func rewriteValueARM64_OpARM64ORshiftLL_10(v *Value) bool {
 		if x4.Aux != s {
 			break
 		}
+		_ = x4.Args[1]
 		if p != x4.Args[0] {
 			break
 		}
@@ -8493,6 +8838,7 @@ func rewriteValueARM64_OpARM64ORshiftRA_0(v *Value) bool {
 	// result: (ORconst  [c] (SRAconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -8512,6 +8858,7 @@ func rewriteValueARM64_OpARM64ORshiftRA_0(v *Value) bool {
 	// result: (ORconst  x [int64(int64(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -8528,6 +8875,7 @@ func rewriteValueARM64_OpARM64ORshiftRA_0(v *Value) bool {
 	// result: y
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		if y.Op != OpARM64SRAconst {
@@ -8555,6 +8903,7 @@ func rewriteValueARM64_OpARM64ORshiftRL_0(v *Value) bool {
 	// result: (ORconst  [c] (SRLconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -8574,6 +8923,7 @@ func rewriteValueARM64_OpARM64ORshiftRL_0(v *Value) bool {
 	// result: (ORconst  x [int64(uint64(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -8590,6 +8940,7 @@ func rewriteValueARM64_OpARM64ORshiftRL_0(v *Value) bool {
 	// result: y
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		if y.Op != OpARM64SRLconst {
@@ -8612,6 +8963,7 @@ func rewriteValueARM64_OpARM64ORshiftRL_0(v *Value) bool {
 	// result: (RORconst [   c] x)
 	for {
 		c := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64SLLconst {
 			break
@@ -8634,6 +8986,7 @@ func rewriteValueARM64_OpARM64ORshiftRL_0(v *Value) bool {
 	for {
 		t := v.Type
 		c := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64SLLconst {
 			break
@@ -8664,6 +9017,7 @@ func rewriteValueARM64_OpARM64SLL_0(v *Value) bool {
 	// cond:
 	// result: (SLLconst x [c&63])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -8720,6 +9074,7 @@ func rewriteValueARM64_OpARM64SRA_0(v *Value) bool {
 	// cond:
 	// result: (SRAconst x [c&63])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -8755,6 +9110,7 @@ func rewriteValueARM64_OpARM64SRL_0(v *Value) bool {
 	// cond:
 	// result: (SRLconst x [c&63])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -8813,6 +9169,7 @@ func rewriteValueARM64_OpARM64SUB_0(v *Value) bool {
 	// cond:
 	// result: (SUBconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -8828,6 +9185,7 @@ func rewriteValueARM64_OpARM64SUB_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -8840,11 +9198,13 @@ func rewriteValueARM64_OpARM64SUB_0(v *Value) bool {
 	// cond:
 	// result: (SUB (ADD <v.Type> x z) y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64SUB {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpARM64SUB)
@@ -8859,10 +9219,12 @@ func rewriteValueARM64_OpARM64SUB_0(v *Value) bool {
 	// cond:
 	// result: (SUB x (ADD <y.Type> y z))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64SUB {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		z := v.Args[1]
@@ -8878,6 +9240,7 @@ func rewriteValueARM64_OpARM64SUB_0(v *Value) bool {
 	// cond:
 	// result: (SUBshiftLL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64SLLconst {
@@ -8895,6 +9258,7 @@ func rewriteValueARM64_OpARM64SUB_0(v *Value) bool {
 	// cond:
 	// result: (SUBshiftRL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64SRLconst {
@@ -8912,6 +9276,7 @@ func rewriteValueARM64_OpARM64SUB_0(v *Value) bool {
 	// cond:
 	// result: (SUBshiftRA x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64SRAconst {
@@ -8995,6 +9360,7 @@ func rewriteValueARM64_OpARM64SUBshiftLL_0(v *Value) bool {
 	// result: (SUBconst x [int64(uint64(c)<<uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -9011,6 +9377,7 @@ func rewriteValueARM64_OpARM64SUBshiftLL_0(v *Value) bool {
 	// result: (MOVDconst [0])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64SLLconst {
@@ -9035,6 +9402,7 @@ func rewriteValueARM64_OpARM64SUBshiftRA_0(v *Value) bool {
 	// result: (SUBconst x [int64(int64(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -9051,6 +9419,7 @@ func rewriteValueARM64_OpARM64SUBshiftRA_0(v *Value) bool {
 	// result: (MOVDconst [0])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64SRAconst {
@@ -9075,6 +9444,7 @@ func rewriteValueARM64_OpARM64SUBshiftRL_0(v *Value) bool {
 	// result: (SUBconst x [int64(uint64(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -9091,6 +9461,7 @@ func rewriteValueARM64_OpARM64SUBshiftRL_0(v *Value) bool {
 	// result: (MOVDconst [0])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64SRLconst {
@@ -9114,6 +9485,7 @@ func rewriteValueARM64_OpARM64UDIV_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -9131,6 +9503,7 @@ func rewriteValueARM64_OpARM64UDIV_0(v *Value) bool {
 	// cond: isPowerOfTwo(c)
 	// result: (SRLconst [log2(c)] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -9149,6 +9522,7 @@ func rewriteValueARM64_OpARM64UDIV_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [int64(uint64(c)/uint64(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -9170,6 +9544,7 @@ func rewriteValueARM64_OpARM64UDIVW_0(v *Value) bool {
 	// cond: uint32(c)==1
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -9188,6 +9563,7 @@ func rewriteValueARM64_OpARM64UDIVW_0(v *Value) bool {
 	// cond: isPowerOfTwo(c) && is32Bit(c)
 	// result: (SRLconst [log2(c)] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -9206,6 +9582,7 @@ func rewriteValueARM64_OpARM64UDIVW_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [int64(uint32(c)/uint32(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -9227,6 +9604,7 @@ func rewriteValueARM64_OpARM64UMOD_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
 			break
@@ -9242,6 +9620,7 @@ func rewriteValueARM64_OpARM64UMOD_0(v *Value) bool {
 	// cond: isPowerOfTwo(c)
 	// result: (ANDconst [c-1] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -9260,6 +9639,7 @@ func rewriteValueARM64_OpARM64UMOD_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [int64(uint64(c)%uint64(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -9281,6 +9661,7 @@ func rewriteValueARM64_OpARM64UMODW_0(v *Value) bool {
 	// cond: uint32(c)==1
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
 			break
@@ -9297,6 +9678,7 @@ func rewriteValueARM64_OpARM64UMODW_0(v *Value) bool {
 	// cond: isPowerOfTwo(c) && is32Bit(c)
 	// result: (ANDconst [c-1] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -9315,6 +9697,7 @@ func rewriteValueARM64_OpARM64UMODW_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [int64(uint32(c)%uint32(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -9336,6 +9719,7 @@ func rewriteValueARM64_OpARM64XOR_0(v *Value) bool {
 	// cond:
 	// result: (XORconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -9351,6 +9735,7 @@ func rewriteValueARM64_OpARM64XOR_0(v *Value) bool {
 	// cond:
 	// result: (XORconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -9366,6 +9751,7 @@ func rewriteValueARM64_OpARM64XOR_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -9378,6 +9764,7 @@ func rewriteValueARM64_OpARM64XOR_0(v *Value) bool {
 	// cond:
 	// result: (XORshiftLL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64SLLconst {
@@ -9395,6 +9782,7 @@ func rewriteValueARM64_OpARM64XOR_0(v *Value) bool {
 	// cond:
 	// result: (XORshiftLL x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64SLLconst {
 			break
@@ -9412,6 +9800,7 @@ func rewriteValueARM64_OpARM64XOR_0(v *Value) bool {
 	// cond:
 	// result: (XORshiftRL x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64SRLconst {
@@ -9429,6 +9818,7 @@ func rewriteValueARM64_OpARM64XOR_0(v *Value) bool {
 	// cond:
 	// result: (XORshiftRL x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64SRLconst {
 			break
@@ -9446,6 +9836,7 @@ func rewriteValueARM64_OpARM64XOR_0(v *Value) bool {
 	// cond:
 	// result: (XORshiftRA x y [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64SRAconst {
@@ -9463,6 +9854,7 @@ func rewriteValueARM64_OpARM64XOR_0(v *Value) bool {
 	// cond:
 	// result: (XORshiftRA x y [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64SRAconst {
 			break
@@ -9544,6 +9936,7 @@ func rewriteValueARM64_OpARM64XORshiftLL_0(v *Value) bool {
 	// result: (XORconst [c] (SLLconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -9563,6 +9956,7 @@ func rewriteValueARM64_OpARM64XORshiftLL_0(v *Value) bool {
 	// result: (XORconst x [int64(uint64(c)<<uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -9579,6 +9973,7 @@ func rewriteValueARM64_OpARM64XORshiftLL_0(v *Value) bool {
 	// result: (MOVDconst [0])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64SLLconst {
@@ -9600,6 +9995,7 @@ func rewriteValueARM64_OpARM64XORshiftLL_0(v *Value) bool {
 	// result: (RORconst [64-c] x)
 	for {
 		c := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64SRLconst {
 			break
@@ -9622,6 +10018,7 @@ func rewriteValueARM64_OpARM64XORshiftLL_0(v *Value) bool {
 	for {
 		t := v.Type
 		c := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64SRLconst {
 			break
@@ -9655,6 +10052,7 @@ func rewriteValueARM64_OpARM64XORshiftRA_0(v *Value) bool {
 	// result: (XORconst [c] (SRAconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -9674,6 +10072,7 @@ func rewriteValueARM64_OpARM64XORshiftRA_0(v *Value) bool {
 	// result: (XORconst x [int64(int64(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -9690,6 +10089,7 @@ func rewriteValueARM64_OpARM64XORshiftRA_0(v *Value) bool {
 	// result: (MOVDconst [0])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64SRAconst {
@@ -9716,6 +10116,7 @@ func rewriteValueARM64_OpARM64XORshiftRL_0(v *Value) bool {
 	// result: (XORconst [c] (SRLconst <x.Type> x [d]))
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64MOVDconst {
 			break
@@ -9735,6 +10136,7 @@ func rewriteValueARM64_OpARM64XORshiftRL_0(v *Value) bool {
 	// result: (XORconst x [int64(uint64(c)>>uint64(d))])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -9751,6 +10153,7 @@ func rewriteValueARM64_OpARM64XORshiftRL_0(v *Value) bool {
 	// result: (MOVDconst [0])
 	for {
 		d := v.AuxInt
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64SRLconst {
@@ -9772,6 +10175,7 @@ func rewriteValueARM64_OpARM64XORshiftRL_0(v *Value) bool {
 	// result: (RORconst [   c] x)
 	for {
 		c := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64SLLconst {
 			break
@@ -9794,6 +10198,7 @@ func rewriteValueARM64_OpARM64XORshiftRL_0(v *Value) bool {
 	for {
 		t := v.Type
 		c := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpARM64SLLconst {
 			break
@@ -9824,6 +10229,7 @@ func rewriteValueARM64_OpAdd16_0(v *Value) bool {
 	// cond:
 	// result: (ADD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64ADD)
@@ -9837,6 +10243,7 @@ func rewriteValueARM64_OpAdd32_0(v *Value) bool {
 	// cond:
 	// result: (ADD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64ADD)
@@ -9850,6 +10257,7 @@ func rewriteValueARM64_OpAdd32F_0(v *Value) bool {
 	// cond:
 	// result: (FADDS x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64FADDS)
@@ -9863,6 +10271,7 @@ func rewriteValueARM64_OpAdd64_0(v *Value) bool {
 	// cond:
 	// result: (ADD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64ADD)
@@ -9876,6 +10285,7 @@ func rewriteValueARM64_OpAdd64F_0(v *Value) bool {
 	// cond:
 	// result: (FADDD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64FADDD)
@@ -9889,6 +10299,7 @@ func rewriteValueARM64_OpAdd8_0(v *Value) bool {
 	// cond:
 	// result: (ADD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64ADD)
@@ -9902,6 +10313,7 @@ func rewriteValueARM64_OpAddPtr_0(v *Value) bool {
 	// cond:
 	// result: (ADD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64ADD)
@@ -9928,6 +10340,7 @@ func rewriteValueARM64_OpAnd16_0(v *Value) bool {
 	// cond:
 	// result: (AND x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64AND)
@@ -9941,6 +10354,7 @@ func rewriteValueARM64_OpAnd32_0(v *Value) bool {
 	// cond:
 	// result: (AND x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64AND)
@@ -9954,6 +10368,7 @@ func rewriteValueARM64_OpAnd64_0(v *Value) bool {
 	// cond:
 	// result: (AND x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64AND)
@@ -9967,6 +10382,7 @@ func rewriteValueARM64_OpAnd8_0(v *Value) bool {
 	// cond:
 	// result: (AND x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64AND)
@@ -9980,6 +10396,7 @@ func rewriteValueARM64_OpAndB_0(v *Value) bool {
 	// cond:
 	// result: (AND x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64AND)
@@ -9993,6 +10410,7 @@ func rewriteValueARM64_OpAtomicAdd32_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicAdd32 ptr val mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -10008,6 +10426,7 @@ func rewriteValueARM64_OpAtomicAdd64_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicAdd64 ptr val mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -10023,6 +10442,7 @@ func rewriteValueARM64_OpAtomicAnd8_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicAnd8 ptr val mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -10038,6 +10458,7 @@ func rewriteValueARM64_OpAtomicCompareAndSwap32_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicCas32 ptr old new_ mem)
 	for {
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		old := v.Args[1]
 		new_ := v.Args[2]
@@ -10055,6 +10476,7 @@ func rewriteValueARM64_OpAtomicCompareAndSwap64_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicCas64 ptr old new_ mem)
 	for {
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		old := v.Args[1]
 		new_ := v.Args[2]
@@ -10072,6 +10494,7 @@ func rewriteValueARM64_OpAtomicExchange32_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicExchange32 ptr val mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -10087,6 +10510,7 @@ func rewriteValueARM64_OpAtomicExchange64_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicExchange64 ptr val mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -10102,6 +10526,7 @@ func rewriteValueARM64_OpAtomicLoad32_0(v *Value) bool {
 	// cond:
 	// result: (LDARW ptr mem)
 	for {
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpARM64LDARW)
@@ -10115,6 +10540,7 @@ func rewriteValueARM64_OpAtomicLoad64_0(v *Value) bool {
 	// cond:
 	// result: (LDAR  ptr mem)
 	for {
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpARM64LDAR)
@@ -10128,6 +10554,7 @@ func rewriteValueARM64_OpAtomicLoadPtr_0(v *Value) bool {
 	// cond:
 	// result: (LDAR  ptr mem)
 	for {
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpARM64LDAR)
@@ -10141,6 +10568,7 @@ func rewriteValueARM64_OpAtomicOr8_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicOr8  ptr val mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -10156,6 +10584,7 @@ func rewriteValueARM64_OpAtomicStore32_0(v *Value) bool {
 	// cond:
 	// result: (STLRW ptr val mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -10171,6 +10600,7 @@ func rewriteValueARM64_OpAtomicStore64_0(v *Value) bool {
 	// cond:
 	// result: (STLR  ptr val mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -10186,6 +10616,7 @@ func rewriteValueARM64_OpAtomicStorePtrNoWB_0(v *Value) bool {
 	// cond:
 	// result: (STLR  ptr val mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -10204,6 +10635,7 @@ func rewriteValueARM64_OpAvg64u_0(v *Value) bool {
 	// result: (ADD (SRLconst <t> (SUB <t> x y) [1]) y)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64ADD)
@@ -10324,6 +10756,7 @@ func rewriteValueARM64_OpClosureCall_0(v *Value) bool {
 	// result: (CALLclosure [argwid] entry closure mem)
 	for {
 		argwid := v.AuxInt
+		_ = v.Args[2]
 		entry := v.Args[0]
 		closure := v.Args[1]
 		mem := v.Args[2]
@@ -10471,6 +10904,7 @@ func rewriteValueARM64_OpConvert_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconvert x mem)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpARM64MOVDconvert)
@@ -10718,6 +11152,7 @@ func rewriteValueARM64_OpDiv16_0(v *Value) bool {
 	// cond:
 	// result: (DIVW (SignExt16to32 x) (SignExt16to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64DIVW)
@@ -10739,6 +11174,7 @@ func rewriteValueARM64_OpDiv16u_0(v *Value) bool {
 	// cond:
 	// result: (UDIVW (ZeroExt16to32 x) (ZeroExt16to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64UDIVW)
@@ -10756,6 +11192,7 @@ func rewriteValueARM64_OpDiv32_0(v *Value) bool {
 	// cond:
 	// result: (DIVW x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64DIVW)
@@ -10769,6 +11206,7 @@ func rewriteValueARM64_OpDiv32F_0(v *Value) bool {
 	// cond:
 	// result: (FDIVS x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64FDIVS)
@@ -10782,6 +11220,7 @@ func rewriteValueARM64_OpDiv32u_0(v *Value) bool {
 	// cond:
 	// result: (UDIVW x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64UDIVW)
@@ -10795,6 +11234,7 @@ func rewriteValueARM64_OpDiv64_0(v *Value) bool {
 	// cond:
 	// result: (DIV x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64DIV)
@@ -10808,6 +11248,7 @@ func rewriteValueARM64_OpDiv64F_0(v *Value) bool {
 	// cond:
 	// result: (FDIVD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64FDIVD)
@@ -10821,6 +11262,7 @@ func rewriteValueARM64_OpDiv64u_0(v *Value) bool {
 	// cond:
 	// result: (UDIV x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64UDIV)
@@ -10838,6 +11280,7 @@ func rewriteValueARM64_OpDiv8_0(v *Value) bool {
 	// cond:
 	// result: (DIVW (SignExt8to32 x) (SignExt8to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64DIVW)
@@ -10859,6 +11302,7 @@ func rewriteValueARM64_OpDiv8u_0(v *Value) bool {
 	// cond:
 	// result: (UDIVW (ZeroExt8to32 x) (ZeroExt8to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64UDIVW)
@@ -10880,6 +11324,7 @@ func rewriteValueARM64_OpEq16_0(v *Value) bool {
 	// cond:
 	// result: (Equal (CMPW (ZeroExt16to32 x) (ZeroExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64Equal)
@@ -10901,6 +11346,7 @@ func rewriteValueARM64_OpEq32_0(v *Value) bool {
 	// cond:
 	// result: (Equal (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64Equal)
@@ -10918,6 +11364,7 @@ func rewriteValueARM64_OpEq32F_0(v *Value) bool {
 	// cond:
 	// result: (Equal (FCMPS x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64Equal)
@@ -10935,6 +11382,7 @@ func rewriteValueARM64_OpEq64_0(v *Value) bool {
 	// cond:
 	// result: (Equal (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64Equal)
@@ -10952,6 +11400,7 @@ func rewriteValueARM64_OpEq64F_0(v *Value) bool {
 	// cond:
 	// result: (Equal (FCMPD x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64Equal)
@@ -10971,6 +11420,7 @@ func rewriteValueARM64_OpEq8_0(v *Value) bool {
 	// cond:
 	// result: (Equal (CMPW (ZeroExt8to32 x) (ZeroExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64Equal)
@@ -10994,6 +11444,7 @@ func rewriteValueARM64_OpEqB_0(v *Value) bool {
 	// cond:
 	// result: (XOR (MOVDconst [1]) (XOR <typ.Bool> x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64XOR)
@@ -11014,6 +11465,7 @@ func rewriteValueARM64_OpEqPtr_0(v *Value) bool {
 	// cond:
 	// result: (Equal (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64Equal)
@@ -11033,6 +11485,7 @@ func rewriteValueARM64_OpGeq16_0(v *Value) bool {
 	// cond:
 	// result: (GreaterEqual (CMPW (SignExt16to32 x) (SignExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64GreaterEqual)
@@ -11056,6 +11509,7 @@ func rewriteValueARM64_OpGeq16U_0(v *Value) bool {
 	// cond:
 	// result: (GreaterEqualU (CMPW (ZeroExt16to32 x) (ZeroExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64GreaterEqualU)
@@ -11077,6 +11531,7 @@ func rewriteValueARM64_OpGeq32_0(v *Value) bool {
 	// cond:
 	// result: (GreaterEqual (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64GreaterEqual)
@@ -11094,6 +11549,7 @@ func rewriteValueARM64_OpGeq32F_0(v *Value) bool {
 	// cond:
 	// result: (GreaterEqual (FCMPS x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64GreaterEqual)
@@ -11111,6 +11567,7 @@ func rewriteValueARM64_OpGeq32U_0(v *Value) bool {
 	// cond:
 	// result: (GreaterEqualU (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64GreaterEqualU)
@@ -11128,6 +11585,7 @@ func rewriteValueARM64_OpGeq64_0(v *Value) bool {
 	// cond:
 	// result: (GreaterEqual (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64GreaterEqual)
@@ -11145,6 +11603,7 @@ func rewriteValueARM64_OpGeq64F_0(v *Value) bool {
 	// cond:
 	// result: (GreaterEqual (FCMPD x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64GreaterEqual)
@@ -11162,6 +11621,7 @@ func rewriteValueARM64_OpGeq64U_0(v *Value) bool {
 	// cond:
 	// result: (GreaterEqualU (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64GreaterEqualU)
@@ -11181,6 +11641,7 @@ func rewriteValueARM64_OpGeq8_0(v *Value) bool {
 	// cond:
 	// result: (GreaterEqual (CMPW (SignExt8to32 x) (SignExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64GreaterEqual)
@@ -11204,6 +11665,7 @@ func rewriteValueARM64_OpGeq8U_0(v *Value) bool {
 	// cond:
 	// result: (GreaterEqualU (CMPW (ZeroExt8to32 x) (ZeroExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64GreaterEqualU)
@@ -11236,6 +11698,7 @@ func rewriteValueARM64_OpGreater16_0(v *Value) bool {
 	// cond:
 	// result: (GreaterThan (CMPW (SignExt16to32 x) (SignExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64GreaterThan)
@@ -11259,6 +11722,7 @@ func rewriteValueARM64_OpGreater16U_0(v *Value) bool {
 	// cond:
 	// result: (GreaterThanU (CMPW (ZeroExt16to32 x) (ZeroExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64GreaterThanU)
@@ -11280,6 +11744,7 @@ func rewriteValueARM64_OpGreater32_0(v *Value) bool {
 	// cond:
 	// result: (GreaterThan (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64GreaterThan)
@@ -11297,6 +11762,7 @@ func rewriteValueARM64_OpGreater32F_0(v *Value) bool {
 	// cond:
 	// result: (GreaterThan (FCMPS x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64GreaterThan)
@@ -11314,6 +11780,7 @@ func rewriteValueARM64_OpGreater32U_0(v *Value) bool {
 	// cond:
 	// result: (GreaterThanU (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64GreaterThanU)
@@ -11331,6 +11798,7 @@ func rewriteValueARM64_OpGreater64_0(v *Value) bool {
 	// cond:
 	// result: (GreaterThan (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64GreaterThan)
@@ -11348,6 +11816,7 @@ func rewriteValueARM64_OpGreater64F_0(v *Value) bool {
 	// cond:
 	// result: (GreaterThan (FCMPD x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64GreaterThan)
@@ -11365,6 +11834,7 @@ func rewriteValueARM64_OpGreater64U_0(v *Value) bool {
 	// cond:
 	// result: (GreaterThanU (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64GreaterThanU)
@@ -11384,6 +11854,7 @@ func rewriteValueARM64_OpGreater8_0(v *Value) bool {
 	// cond:
 	// result: (GreaterThan (CMPW (SignExt8to32 x) (SignExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64GreaterThan)
@@ -11407,6 +11878,7 @@ func rewriteValueARM64_OpGreater8U_0(v *Value) bool {
 	// cond:
 	// result: (GreaterThanU (CMPW (ZeroExt8to32 x) (ZeroExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64GreaterThanU)
@@ -11430,6 +11902,7 @@ func rewriteValueARM64_OpHmul32_0(v *Value) bool {
 	// cond:
 	// result: (SRAconst (MULL <typ.Int64> x y) [32])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64SRAconst)
@@ -11450,6 +11923,7 @@ func rewriteValueARM64_OpHmul32u_0(v *Value) bool {
 	// cond:
 	// result: (SRAconst (UMULL <typ.UInt64> x y) [32])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64SRAconst)
@@ -11466,6 +11940,7 @@ func rewriteValueARM64_OpHmul64_0(v *Value) bool {
 	// cond:
 	// result: (MULH x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64MULH)
@@ -11479,6 +11954,7 @@ func rewriteValueARM64_OpHmul64u_0(v *Value) bool {
 	// cond:
 	// result: (UMULH x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64UMULH)
@@ -11493,6 +11969,7 @@ func rewriteValueARM64_OpInterCall_0(v *Value) bool {
 	// result: (CALLinter [argwid] entry mem)
 	for {
 		argwid := v.AuxInt
+		_ = v.Args[1]
 		entry := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpARM64CALLinter)
@@ -11509,6 +11986,7 @@ func rewriteValueARM64_OpIsInBounds_0(v *Value) bool {
 	// cond:
 	// result: (LessThanU (CMP idx len))
 	for {
+		_ = v.Args[1]
 		idx := v.Args[0]
 		len := v.Args[1]
 		v.reset(OpARM64LessThanU)
@@ -11542,6 +12020,7 @@ func rewriteValueARM64_OpIsSliceInBounds_0(v *Value) bool {
 	// cond:
 	// result: (LessEqualU (CMP idx len))
 	for {
+		_ = v.Args[1]
 		idx := v.Args[0]
 		len := v.Args[1]
 		v.reset(OpARM64LessEqualU)
@@ -11561,6 +12040,7 @@ func rewriteValueARM64_OpLeq16_0(v *Value) bool {
 	// cond:
 	// result: (LessEqual (CMPW (SignExt16to32 x) (SignExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64LessEqual)
@@ -11584,6 +12064,7 @@ func rewriteValueARM64_OpLeq16U_0(v *Value) bool {
 	// cond:
 	// result: (LessEqualU (CMPW (ZeroExt16to32 x) (ZeroExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64LessEqualU)
@@ -11605,6 +12086,7 @@ func rewriteValueARM64_OpLeq32_0(v *Value) bool {
 	// cond:
 	// result: (LessEqual (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64LessEqual)
@@ -11622,6 +12104,7 @@ func rewriteValueARM64_OpLeq32F_0(v *Value) bool {
 	// cond:
 	// result: (GreaterEqual (FCMPS y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64GreaterEqual)
@@ -11639,6 +12122,7 @@ func rewriteValueARM64_OpLeq32U_0(v *Value) bool {
 	// cond:
 	// result: (LessEqualU (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64LessEqualU)
@@ -11656,6 +12140,7 @@ func rewriteValueARM64_OpLeq64_0(v *Value) bool {
 	// cond:
 	// result: (LessEqual (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64LessEqual)
@@ -11673,6 +12158,7 @@ func rewriteValueARM64_OpLeq64F_0(v *Value) bool {
 	// cond:
 	// result: (GreaterEqual (FCMPD y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64GreaterEqual)
@@ -11690,6 +12176,7 @@ func rewriteValueARM64_OpLeq64U_0(v *Value) bool {
 	// cond:
 	// result: (LessEqualU (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64LessEqualU)
@@ -11709,6 +12196,7 @@ func rewriteValueARM64_OpLeq8_0(v *Value) bool {
 	// cond:
 	// result: (LessEqual (CMPW (SignExt8to32 x) (SignExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64LessEqual)
@@ -11732,6 +12220,7 @@ func rewriteValueARM64_OpLeq8U_0(v *Value) bool {
 	// cond:
 	// result: (LessEqualU (CMPW (ZeroExt8to32 x) (ZeroExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64LessEqualU)
@@ -11755,6 +12244,7 @@ func rewriteValueARM64_OpLess16_0(v *Value) bool {
 	// cond:
 	// result: (LessThan (CMPW (SignExt16to32 x) (SignExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64LessThan)
@@ -11778,6 +12268,7 @@ func rewriteValueARM64_OpLess16U_0(v *Value) bool {
 	// cond:
 	// result: (LessThanU (CMPW (ZeroExt16to32 x) (ZeroExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64LessThanU)
@@ -11799,6 +12290,7 @@ func rewriteValueARM64_OpLess32_0(v *Value) bool {
 	// cond:
 	// result: (LessThan (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64LessThan)
@@ -11816,6 +12308,7 @@ func rewriteValueARM64_OpLess32F_0(v *Value) bool {
 	// cond:
 	// result: (GreaterThan (FCMPS y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64GreaterThan)
@@ -11833,6 +12326,7 @@ func rewriteValueARM64_OpLess32U_0(v *Value) bool {
 	// cond:
 	// result: (LessThanU (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64LessThanU)
@@ -11850,6 +12344,7 @@ func rewriteValueARM64_OpLess64_0(v *Value) bool {
 	// cond:
 	// result: (LessThan (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64LessThan)
@@ -11867,6 +12362,7 @@ func rewriteValueARM64_OpLess64F_0(v *Value) bool {
 	// cond:
 	// result: (GreaterThan (FCMPD y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64GreaterThan)
@@ -11884,6 +12380,7 @@ func rewriteValueARM64_OpLess64U_0(v *Value) bool {
 	// cond:
 	// result: (LessThanU (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64LessThanU)
@@ -11903,6 +12400,7 @@ func rewriteValueARM64_OpLess8_0(v *Value) bool {
 	// cond:
 	// result: (LessThan (CMPW (SignExt8to32 x) (SignExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64LessThan)
@@ -11926,6 +12424,7 @@ func rewriteValueARM64_OpLess8U_0(v *Value) bool {
 	// cond:
 	// result: (LessThanU (CMPW (ZeroExt8to32 x) (ZeroExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64LessThanU)
@@ -11946,6 +12445,7 @@ func rewriteValueARM64_OpLoad_0(v *Value) bool {
 	// result: (MOVBUload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.IsBoolean()) {
@@ -11961,6 +12461,7 @@ func rewriteValueARM64_OpLoad_0(v *Value) bool {
 	// result: (MOVBload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is8BitInt(t) && isSigned(t)) {
@@ -11976,6 +12477,7 @@ func rewriteValueARM64_OpLoad_0(v *Value) bool {
 	// result: (MOVBUload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is8BitInt(t) && !isSigned(t)) {
@@ -11991,6 +12493,7 @@ func rewriteValueARM64_OpLoad_0(v *Value) bool {
 	// result: (MOVHload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is16BitInt(t) && isSigned(t)) {
@@ -12006,6 +12509,7 @@ func rewriteValueARM64_OpLoad_0(v *Value) bool {
 	// result: (MOVHUload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is16BitInt(t) && !isSigned(t)) {
@@ -12021,6 +12525,7 @@ func rewriteValueARM64_OpLoad_0(v *Value) bool {
 	// result: (MOVWload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is32BitInt(t) && isSigned(t)) {
@@ -12036,6 +12541,7 @@ func rewriteValueARM64_OpLoad_0(v *Value) bool {
 	// result: (MOVWUload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is32BitInt(t) && !isSigned(t)) {
@@ -12051,6 +12557,7 @@ func rewriteValueARM64_OpLoad_0(v *Value) bool {
 	// result: (MOVDload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is64BitInt(t) || isPtr(t)) {
@@ -12066,6 +12573,7 @@ func rewriteValueARM64_OpLoad_0(v *Value) bool {
 	// result: (FMOVSload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is32BitFloat(t)) {
@@ -12081,6 +12589,7 @@ func rewriteValueARM64_OpLoad_0(v *Value) bool {
 	// result: (FMOVDload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is64BitFloat(t)) {
@@ -12103,6 +12612,7 @@ func rewriteValueARM64_OpLsh16x16_0(v *Value) bool {
 	// result: (CSELULT (SLL <t> x (ZeroExt16to64 y)) (Const64 <t> [0]) (CMPconst [64] (ZeroExt16to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -12134,6 +12644,7 @@ func rewriteValueARM64_OpLsh16x32_0(v *Value) bool {
 	// result: (CSELULT (SLL <t> x (ZeroExt32to64 y)) (Const64 <t> [0]) (CMPconst [64] (ZeroExt32to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -12162,6 +12673,7 @@ func rewriteValueARM64_OpLsh16x64_0(v *Value) bool {
 	// cond: uint64(c) < 16
 	// result: (SLLconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -12180,6 +12692,7 @@ func rewriteValueARM64_OpLsh16x64_0(v *Value) bool {
 	// cond: uint64(c) >= 16
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
 			break
@@ -12197,6 +12710,7 @@ func rewriteValueARM64_OpLsh16x64_0(v *Value) bool {
 	// result: (CSELULT (SLL <t> x y) (Const64 <t> [0]) (CMPconst [64] y))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -12224,6 +12738,7 @@ func rewriteValueARM64_OpLsh16x8_0(v *Value) bool {
 	// result: (CSELULT (SLL <t> x (ZeroExt8to64  y)) (Const64 <t> [0]) (CMPconst [64] (ZeroExt8to64  y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -12255,6 +12770,7 @@ func rewriteValueARM64_OpLsh32x16_0(v *Value) bool {
 	// result: (CSELULT (SLL <t> x (ZeroExt16to64 y)) (Const64 <t> [0]) (CMPconst [64] (ZeroExt16to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -12286,6 +12802,7 @@ func rewriteValueARM64_OpLsh32x32_0(v *Value) bool {
 	// result: (CSELULT (SLL <t> x (ZeroExt32to64 y)) (Const64 <t> [0]) (CMPconst [64] (ZeroExt32to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -12314,6 +12831,7 @@ func rewriteValueARM64_OpLsh32x64_0(v *Value) bool {
 	// cond: uint64(c) < 32
 	// result: (SLLconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -12332,6 +12850,7 @@ func rewriteValueARM64_OpLsh32x64_0(v *Value) bool {
 	// cond: uint64(c) >= 32
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
 			break
@@ -12349,6 +12868,7 @@ func rewriteValueARM64_OpLsh32x64_0(v *Value) bool {
 	// result: (CSELULT (SLL <t> x y) (Const64 <t> [0]) (CMPconst [64] y))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -12376,6 +12896,7 @@ func rewriteValueARM64_OpLsh32x8_0(v *Value) bool {
 	// result: (CSELULT (SLL <t> x (ZeroExt8to64  y)) (Const64 <t> [0]) (CMPconst [64] (ZeroExt8to64  y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -12407,6 +12928,7 @@ func rewriteValueARM64_OpLsh64x16_0(v *Value) bool {
 	// result: (CSELULT (SLL <t> x (ZeroExt16to64 y)) (Const64 <t> [0]) (CMPconst [64] (ZeroExt16to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -12438,6 +12960,7 @@ func rewriteValueARM64_OpLsh64x32_0(v *Value) bool {
 	// result: (CSELULT (SLL <t> x (ZeroExt32to64 y)) (Const64 <t> [0]) (CMPconst [64] (ZeroExt32to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -12466,6 +12989,7 @@ func rewriteValueARM64_OpLsh64x64_0(v *Value) bool {
 	// cond: uint64(c) < 64
 	// result: (SLLconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -12484,6 +13008,7 @@ func rewriteValueARM64_OpLsh64x64_0(v *Value) bool {
 	// cond: uint64(c) >= 64
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
 			break
@@ -12501,6 +13026,7 @@ func rewriteValueARM64_OpLsh64x64_0(v *Value) bool {
 	// result: (CSELULT (SLL <t> x y) (Const64 <t> [0]) (CMPconst [64] y))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -12528,6 +13054,7 @@ func rewriteValueARM64_OpLsh64x8_0(v *Value) bool {
 	// result: (CSELULT (SLL <t> x (ZeroExt8to64  y)) (Const64 <t> [0]) (CMPconst [64] (ZeroExt8to64  y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -12559,6 +13086,7 @@ func rewriteValueARM64_OpLsh8x16_0(v *Value) bool {
 	// result: (CSELULT (SLL <t> x (ZeroExt16to64 y)) (Const64 <t> [0]) (CMPconst [64] (ZeroExt16to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -12590,6 +13118,7 @@ func rewriteValueARM64_OpLsh8x32_0(v *Value) bool {
 	// result: (CSELULT (SLL <t> x (ZeroExt32to64 y)) (Const64 <t> [0]) (CMPconst [64] (ZeroExt32to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -12618,6 +13147,7 @@ func rewriteValueARM64_OpLsh8x64_0(v *Value) bool {
 	// cond: uint64(c) < 8
 	// result: (SLLconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -12636,6 +13166,7 @@ func rewriteValueARM64_OpLsh8x64_0(v *Value) bool {
 	// cond: uint64(c) >= 8
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
 			break
@@ -12653,6 +13184,7 @@ func rewriteValueARM64_OpLsh8x64_0(v *Value) bool {
 	// result: (CSELULT (SLL <t> x y) (Const64 <t> [0]) (CMPconst [64] y))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -12680,6 +13212,7 @@ func rewriteValueARM64_OpLsh8x8_0(v *Value) bool {
 	// result: (CSELULT (SLL <t> x (ZeroExt8to64  y)) (Const64 <t> [0]) (CMPconst [64] (ZeroExt8to64  y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -12710,6 +13243,7 @@ func rewriteValueARM64_OpMod16_0(v *Value) bool {
 	// cond:
 	// result: (MODW (SignExt16to32 x) (SignExt16to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64MODW)
@@ -12731,6 +13265,7 @@ func rewriteValueARM64_OpMod16u_0(v *Value) bool {
 	// cond:
 	// result: (UMODW (ZeroExt16to32 x) (ZeroExt16to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64UMODW)
@@ -12748,6 +13283,7 @@ func rewriteValueARM64_OpMod32_0(v *Value) bool {
 	// cond:
 	// result: (MODW x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64MODW)
@@ -12761,6 +13297,7 @@ func rewriteValueARM64_OpMod32u_0(v *Value) bool {
 	// cond:
 	// result: (UMODW x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64UMODW)
@@ -12774,6 +13311,7 @@ func rewriteValueARM64_OpMod64_0(v *Value) bool {
 	// cond:
 	// result: (MOD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64MOD)
@@ -12787,6 +13325,7 @@ func rewriteValueARM64_OpMod64u_0(v *Value) bool {
 	// cond:
 	// result: (UMOD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64UMOD)
@@ -12804,6 +13343,7 @@ func rewriteValueARM64_OpMod8_0(v *Value) bool {
 	// cond:
 	// result: (MODW (SignExt8to32 x) (SignExt8to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64MODW)
@@ -12825,6 +13365,7 @@ func rewriteValueARM64_OpMod8u_0(v *Value) bool {
 	// cond:
 	// result: (UMODW (ZeroExt8to32 x) (ZeroExt8to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64UMODW)
@@ -12849,6 +13390,7 @@ func rewriteValueARM64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 0 {
 			break
 		}
+		_ = v.Args[2]
 		mem := v.Args[2]
 		v.reset(OpCopy)
 		v.Type = mem.Type
@@ -12862,6 +13404,7 @@ func rewriteValueARM64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 1 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -12881,6 +13424,7 @@ func rewriteValueARM64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 2 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -12900,6 +13444,7 @@ func rewriteValueARM64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 4 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -12919,6 +13464,7 @@ func rewriteValueARM64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 8 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -12938,6 +13484,7 @@ func rewriteValueARM64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 3 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -12966,6 +13513,7 @@ func rewriteValueARM64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 5 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -12994,6 +13542,7 @@ func rewriteValueARM64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 6 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -13022,6 +13571,7 @@ func rewriteValueARM64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 7 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -13059,6 +13609,7 @@ func rewriteValueARM64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 12 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -13096,6 +13647,7 @@ func rewriteValueARM64_OpMove_10(v *Value) bool {
 		if v.AuxInt != 16 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -13124,6 +13676,7 @@ func rewriteValueARM64_OpMove_10(v *Value) bool {
 		if v.AuxInt != 24 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -13159,6 +13712,7 @@ func rewriteValueARM64_OpMove_10(v *Value) bool {
 	// result: (Move [s%8] 		(OffPtr <dst.Type> dst [s-s%8]) 		(OffPtr <src.Type> src [s-s%8]) 		(Move [s-s%8] dst src mem))
 	for {
 		s := v.AuxInt
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -13188,6 +13742,7 @@ func rewriteValueARM64_OpMove_10(v *Value) bool {
 	// result: (DUFFCOPY [8 * (128 - int64(s/8))] dst src mem)
 	for {
 		s := v.AuxInt
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -13206,6 +13761,7 @@ func rewriteValueARM64_OpMove_10(v *Value) bool {
 	// result: (LoweredMove 		dst 		src 		(ADDconst <src.Type> src [s-8]) 		mem)
 	for {
 		s := v.AuxInt
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -13229,6 +13785,7 @@ func rewriteValueARM64_OpMul16_0(v *Value) bool {
 	// cond:
 	// result: (MULW x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64MULW)
@@ -13242,6 +13799,7 @@ func rewriteValueARM64_OpMul32_0(v *Value) bool {
 	// cond:
 	// result: (MULW x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64MULW)
@@ -13255,6 +13813,7 @@ func rewriteValueARM64_OpMul32F_0(v *Value) bool {
 	// cond:
 	// result: (FMULS x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64FMULS)
@@ -13268,6 +13827,7 @@ func rewriteValueARM64_OpMul64_0(v *Value) bool {
 	// cond:
 	// result: (MUL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64MUL)
@@ -13281,6 +13841,7 @@ func rewriteValueARM64_OpMul64F_0(v *Value) bool {
 	// cond:
 	// result: (FMULD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64FMULD)
@@ -13294,6 +13855,7 @@ func rewriteValueARM64_OpMul8_0(v *Value) bool {
 	// cond:
 	// result: (MULW x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64MULW)
@@ -13377,6 +13939,7 @@ func rewriteValueARM64_OpNeq16_0(v *Value) bool {
 	// cond:
 	// result: (NotEqual (CMPW (ZeroExt16to32 x) (ZeroExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64NotEqual)
@@ -13398,6 +13961,7 @@ func rewriteValueARM64_OpNeq32_0(v *Value) bool {
 	// cond:
 	// result: (NotEqual (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64NotEqual)
@@ -13415,6 +13979,7 @@ func rewriteValueARM64_OpNeq32F_0(v *Value) bool {
 	// cond:
 	// result: (NotEqual (FCMPS x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64NotEqual)
@@ -13432,6 +13997,7 @@ func rewriteValueARM64_OpNeq64_0(v *Value) bool {
 	// cond:
 	// result: (NotEqual (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64NotEqual)
@@ -13449,6 +14015,7 @@ func rewriteValueARM64_OpNeq64F_0(v *Value) bool {
 	// cond:
 	// result: (NotEqual (FCMPD x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64NotEqual)
@@ -13468,6 +14035,7 @@ func rewriteValueARM64_OpNeq8_0(v *Value) bool {
 	// cond:
 	// result: (NotEqual (CMPW (ZeroExt8to32 x) (ZeroExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64NotEqual)
@@ -13487,6 +14055,7 @@ func rewriteValueARM64_OpNeqB_0(v *Value) bool {
 	// cond:
 	// result: (XOR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64XOR)
@@ -13502,6 +14071,7 @@ func rewriteValueARM64_OpNeqPtr_0(v *Value) bool {
 	// cond:
 	// result: (NotEqual (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64NotEqual)
@@ -13517,6 +14087,7 @@ func rewriteValueARM64_OpNilCheck_0(v *Value) bool {
 	// cond:
 	// result: (LoweredNilCheck ptr mem)
 	for {
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpARM64LoweredNilCheck)
@@ -13575,6 +14146,7 @@ func rewriteValueARM64_OpOr16_0(v *Value) bool {
 	// cond:
 	// result: (OR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64OR)
@@ -13588,6 +14160,7 @@ func rewriteValueARM64_OpOr32_0(v *Value) bool {
 	// cond:
 	// result: (OR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64OR)
@@ -13601,6 +14174,7 @@ func rewriteValueARM64_OpOr64_0(v *Value) bool {
 	// cond:
 	// result: (OR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64OR)
@@ -13614,6 +14188,7 @@ func rewriteValueARM64_OpOr8_0(v *Value) bool {
 	// cond:
 	// result: (OR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64OR)
@@ -13627,6 +14202,7 @@ func rewriteValueARM64_OpOrB_0(v *Value) bool {
 	// cond:
 	// result: (OR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64OR)
@@ -13669,6 +14245,7 @@ func rewriteValueARM64_OpRsh16Ux16_0(v *Value) bool {
 	// result: (CSELULT (SRL <t> (ZeroExt16to64 x) (ZeroExt16to64 y)) (Const64 <t> [0]) (CMPconst [64] (ZeroExt16to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -13702,6 +14279,7 @@ func rewriteValueARM64_OpRsh16Ux32_0(v *Value) bool {
 	// result: (CSELULT (SRL <t> (ZeroExt16to64 x) (ZeroExt32to64 y)) (Const64 <t> [0]) (CMPconst [64] (ZeroExt32to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -13734,6 +14312,7 @@ func rewriteValueARM64_OpRsh16Ux64_0(v *Value) bool {
 	// cond: uint64(c) < 16
 	// result: (SRLconst (ZeroExt16to64 x) [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -13754,6 +14333,7 @@ func rewriteValueARM64_OpRsh16Ux64_0(v *Value) bool {
 	// cond: uint64(c) >= 16
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
 			break
@@ -13771,6 +14351,7 @@ func rewriteValueARM64_OpRsh16Ux64_0(v *Value) bool {
 	// result: (CSELULT (SRL <t> (ZeroExt16to64 x) y) (Const64 <t> [0]) (CMPconst [64] y))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -13800,6 +14381,7 @@ func rewriteValueARM64_OpRsh16Ux8_0(v *Value) bool {
 	// result: (CSELULT (SRL <t> (ZeroExt16to64 x) (ZeroExt8to64  y)) (Const64 <t> [0]) (CMPconst [64] (ZeroExt8to64  y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -13832,6 +14414,7 @@ func rewriteValueARM64_OpRsh16x16_0(v *Value) bool {
 	// cond:
 	// result: (SRA (SignExt16to64 x) (CSELULT <y.Type> (ZeroExt16to64 y) (Const64 <y.Type> [63]) (CMPconst [64] (ZeroExt16to64 y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64SRA)
@@ -13864,6 +14447,7 @@ func rewriteValueARM64_OpRsh16x32_0(v *Value) bool {
 	// cond:
 	// result: (SRA (SignExt16to64 x) (CSELULT <y.Type> (ZeroExt32to64 y) (Const64 <y.Type> [63]) (CMPconst [64] (ZeroExt32to64 y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64SRA)
@@ -13896,6 +14480,7 @@ func rewriteValueARM64_OpRsh16x64_0(v *Value) bool {
 	// cond: uint64(c) < 16
 	// result: (SRAconst (SignExt16to64 x) [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -13916,6 +14501,7 @@ func rewriteValueARM64_OpRsh16x64_0(v *Value) bool {
 	// cond: uint64(c) >= 16
 	// result: (SRAconst (SignExt16to64 x) [63])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -13936,6 +14522,7 @@ func rewriteValueARM64_OpRsh16x64_0(v *Value) bool {
 	// cond:
 	// result: (SRA (SignExt16to64 x) (CSELULT <y.Type> y (Const64 <y.Type> [63]) (CMPconst [64] y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64SRA)
@@ -13964,6 +14551,7 @@ func rewriteValueARM64_OpRsh16x8_0(v *Value) bool {
 	// cond:
 	// result: (SRA (SignExt16to64 x) (CSELULT <y.Type> (ZeroExt8to64  y) (Const64 <y.Type> [63]) (CMPconst [64] (ZeroExt8to64  y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64SRA)
@@ -13997,6 +14585,7 @@ func rewriteValueARM64_OpRsh32Ux16_0(v *Value) bool {
 	// result: (CSELULT (SRL <t> (ZeroExt32to64 x) (ZeroExt16to64 y)) (Const64 <t> [0]) (CMPconst [64] (ZeroExt16to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -14030,6 +14619,7 @@ func rewriteValueARM64_OpRsh32Ux32_0(v *Value) bool {
 	// result: (CSELULT (SRL <t> (ZeroExt32to64 x) (ZeroExt32to64 y)) (Const64 <t> [0]) (CMPconst [64] (ZeroExt32to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -14062,6 +14652,7 @@ func rewriteValueARM64_OpRsh32Ux64_0(v *Value) bool {
 	// cond: uint64(c) < 32
 	// result: (SRLconst (ZeroExt32to64 x) [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -14082,6 +14673,7 @@ func rewriteValueARM64_OpRsh32Ux64_0(v *Value) bool {
 	// cond: uint64(c) >= 32
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
 			break
@@ -14099,6 +14691,7 @@ func rewriteValueARM64_OpRsh32Ux64_0(v *Value) bool {
 	// result: (CSELULT (SRL <t> (ZeroExt32to64 x) y) (Const64 <t> [0]) (CMPconst [64] y))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -14128,6 +14721,7 @@ func rewriteValueARM64_OpRsh32Ux8_0(v *Value) bool {
 	// result: (CSELULT (SRL <t> (ZeroExt32to64 x) (ZeroExt8to64  y)) (Const64 <t> [0]) (CMPconst [64] (ZeroExt8to64  y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -14160,6 +14754,7 @@ func rewriteValueARM64_OpRsh32x16_0(v *Value) bool {
 	// cond:
 	// result: (SRA (SignExt32to64 x) (CSELULT <y.Type> (ZeroExt16to64 y) (Const64 <y.Type> [63]) (CMPconst [64] (ZeroExt16to64 y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64SRA)
@@ -14192,6 +14787,7 @@ func rewriteValueARM64_OpRsh32x32_0(v *Value) bool {
 	// cond:
 	// result: (SRA (SignExt32to64 x) (CSELULT <y.Type> (ZeroExt32to64 y) (Const64 <y.Type> [63]) (CMPconst [64] (ZeroExt32to64 y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64SRA)
@@ -14224,6 +14820,7 @@ func rewriteValueARM64_OpRsh32x64_0(v *Value) bool {
 	// cond: uint64(c) < 32
 	// result: (SRAconst (SignExt32to64 x) [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -14244,6 +14841,7 @@ func rewriteValueARM64_OpRsh32x64_0(v *Value) bool {
 	// cond: uint64(c) >= 32
 	// result: (SRAconst (SignExt32to64 x) [63])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -14264,6 +14862,7 @@ func rewriteValueARM64_OpRsh32x64_0(v *Value) bool {
 	// cond:
 	// result: (SRA (SignExt32to64 x) (CSELULT <y.Type> y (Const64 <y.Type> [63]) (CMPconst [64] y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64SRA)
@@ -14292,6 +14891,7 @@ func rewriteValueARM64_OpRsh32x8_0(v *Value) bool {
 	// cond:
 	// result: (SRA (SignExt32to64 x) (CSELULT <y.Type> (ZeroExt8to64  y) (Const64 <y.Type> [63]) (CMPconst [64] (ZeroExt8to64  y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64SRA)
@@ -14325,6 +14925,7 @@ func rewriteValueARM64_OpRsh64Ux16_0(v *Value) bool {
 	// result: (CSELULT (SRL <t> x (ZeroExt16to64 y)) (Const64 <t> [0]) (CMPconst [64] (ZeroExt16to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -14356,6 +14957,7 @@ func rewriteValueARM64_OpRsh64Ux32_0(v *Value) bool {
 	// result: (CSELULT (SRL <t> x (ZeroExt32to64 y)) (Const64 <t> [0]) (CMPconst [64] (ZeroExt32to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -14384,6 +14986,7 @@ func rewriteValueARM64_OpRsh64Ux64_0(v *Value) bool {
 	// cond: uint64(c) < 64
 	// result: (SRLconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -14402,6 +15005,7 @@ func rewriteValueARM64_OpRsh64Ux64_0(v *Value) bool {
 	// cond: uint64(c) >= 64
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
 			break
@@ -14419,6 +15023,7 @@ func rewriteValueARM64_OpRsh64Ux64_0(v *Value) bool {
 	// result: (CSELULT (SRL <t> x y) (Const64 <t> [0]) (CMPconst [64] y))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -14446,6 +15051,7 @@ func rewriteValueARM64_OpRsh64Ux8_0(v *Value) bool {
 	// result: (CSELULT (SRL <t> x (ZeroExt8to64  y)) (Const64 <t> [0]) (CMPconst [64] (ZeroExt8to64  y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -14476,6 +15082,7 @@ func rewriteValueARM64_OpRsh64x16_0(v *Value) bool {
 	// cond:
 	// result: (SRA x (CSELULT <y.Type> (ZeroExt16to64 y) (Const64 <y.Type> [63]) (CMPconst [64] (ZeroExt16to64 y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64SRA)
@@ -14506,6 +15113,7 @@ func rewriteValueARM64_OpRsh64x32_0(v *Value) bool {
 	// cond:
 	// result: (SRA x (CSELULT <y.Type> (ZeroExt32to64 y) (Const64 <y.Type> [63]) (CMPconst [64] (ZeroExt32to64 y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64SRA)
@@ -14534,6 +15142,7 @@ func rewriteValueARM64_OpRsh64x64_0(v *Value) bool {
 	// cond: uint64(c) < 64
 	// result: (SRAconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -14552,6 +15161,7 @@ func rewriteValueARM64_OpRsh64x64_0(v *Value) bool {
 	// cond: uint64(c) >= 64
 	// result: (SRAconst x [63])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -14570,6 +15180,7 @@ func rewriteValueARM64_OpRsh64x64_0(v *Value) bool {
 	// cond:
 	// result: (SRA x (CSELULT <y.Type> y (Const64 <y.Type> [63]) (CMPconst [64] y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64SRA)
@@ -14596,6 +15207,7 @@ func rewriteValueARM64_OpRsh64x8_0(v *Value) bool {
 	// cond:
 	// result: (SRA x (CSELULT <y.Type> (ZeroExt8to64  y) (Const64 <y.Type> [63]) (CMPconst [64] (ZeroExt8to64  y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64SRA)
@@ -14627,6 +15239,7 @@ func rewriteValueARM64_OpRsh8Ux16_0(v *Value) bool {
 	// result: (CSELULT (SRL <t> (ZeroExt8to64 x) (ZeroExt16to64 y)) (Const64 <t> [0]) (CMPconst [64] (ZeroExt16to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -14660,6 +15273,7 @@ func rewriteValueARM64_OpRsh8Ux32_0(v *Value) bool {
 	// result: (CSELULT (SRL <t> (ZeroExt8to64 x) (ZeroExt32to64 y)) (Const64 <t> [0]) (CMPconst [64] (ZeroExt32to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -14692,6 +15306,7 @@ func rewriteValueARM64_OpRsh8Ux64_0(v *Value) bool {
 	// cond: uint64(c) < 8
 	// result: (SRLconst (ZeroExt8to64  x) [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -14712,6 +15327,7 @@ func rewriteValueARM64_OpRsh8Ux64_0(v *Value) bool {
 	// cond: uint64(c) >= 8
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
 			break
@@ -14729,6 +15345,7 @@ func rewriteValueARM64_OpRsh8Ux64_0(v *Value) bool {
 	// result: (CSELULT (SRL <t> (ZeroExt8to64 x) y) (Const64 <t> [0]) (CMPconst [64] y))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -14758,6 +15375,7 @@ func rewriteValueARM64_OpRsh8Ux8_0(v *Value) bool {
 	// result: (CSELULT (SRL <t> (ZeroExt8to64 x) (ZeroExt8to64  y)) (Const64 <t> [0]) (CMPconst [64] (ZeroExt8to64  y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64CSELULT)
@@ -14790,6 +15408,7 @@ func rewriteValueARM64_OpRsh8x16_0(v *Value) bool {
 	// cond:
 	// result: (SRA (SignExt8to64 x) (CSELULT <y.Type> (ZeroExt16to64 y) (Const64 <y.Type> [63]) (CMPconst [64] (ZeroExt16to64 y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64SRA)
@@ -14822,6 +15441,7 @@ func rewriteValueARM64_OpRsh8x32_0(v *Value) bool {
 	// cond:
 	// result: (SRA (SignExt8to64 x) (CSELULT <y.Type> (ZeroExt32to64 y) (Const64 <y.Type> [63]) (CMPconst [64] (ZeroExt32to64 y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64SRA)
@@ -14854,6 +15474,7 @@ func rewriteValueARM64_OpRsh8x64_0(v *Value) bool {
 	// cond: uint64(c) < 8
 	// result: (SRAconst (SignExt8to64  x) [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -14874,6 +15495,7 @@ func rewriteValueARM64_OpRsh8x64_0(v *Value) bool {
 	// cond: uint64(c) >= 8
 	// result: (SRAconst (SignExt8to64  x) [63])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpARM64MOVDconst {
@@ -14894,6 +15516,7 @@ func rewriteValueARM64_OpRsh8x64_0(v *Value) bool {
 	// cond:
 	// result: (SRA (SignExt8to64 x) (CSELULT <y.Type> y (Const64 <y.Type> [63]) (CMPconst [64] y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64SRA)
@@ -14922,6 +15545,7 @@ func rewriteValueARM64_OpRsh8x8_0(v *Value) bool {
 	// cond:
 	// result: (SRA (SignExt8to64 x) (CSELULT <y.Type> (ZeroExt8to64  y) (Const64 <y.Type> [63]) (CMPconst [64] (ZeroExt8to64  y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64SRA)
@@ -15060,6 +15684,7 @@ func rewriteValueARM64_OpStore_0(v *Value) bool {
 	// result: (MOVBstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -15077,6 +15702,7 @@ func rewriteValueARM64_OpStore_0(v *Value) bool {
 	// result: (MOVHstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -15094,6 +15720,7 @@ func rewriteValueARM64_OpStore_0(v *Value) bool {
 	// result: (MOVWstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -15111,6 +15738,7 @@ func rewriteValueARM64_OpStore_0(v *Value) bool {
 	// result: (MOVDstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -15128,6 +15756,7 @@ func rewriteValueARM64_OpStore_0(v *Value) bool {
 	// result: (FMOVSstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -15145,6 +15774,7 @@ func rewriteValueARM64_OpStore_0(v *Value) bool {
 	// result: (FMOVDstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -15164,6 +15794,7 @@ func rewriteValueARM64_OpSub16_0(v *Value) bool {
 	// cond:
 	// result: (SUB x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64SUB)
@@ -15177,6 +15808,7 @@ func rewriteValueARM64_OpSub32_0(v *Value) bool {
 	// cond:
 	// result: (SUB x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64SUB)
@@ -15190,6 +15822,7 @@ func rewriteValueARM64_OpSub32F_0(v *Value) bool {
 	// cond:
 	// result: (FSUBS x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64FSUBS)
@@ -15203,6 +15836,7 @@ func rewriteValueARM64_OpSub64_0(v *Value) bool {
 	// cond:
 	// result: (SUB x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64SUB)
@@ -15216,6 +15850,7 @@ func rewriteValueARM64_OpSub64F_0(v *Value) bool {
 	// cond:
 	// result: (FSUBD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64FSUBD)
@@ -15229,6 +15864,7 @@ func rewriteValueARM64_OpSub8_0(v *Value) bool {
 	// cond:
 	// result: (SUB x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64SUB)
@@ -15242,6 +15878,7 @@ func rewriteValueARM64_OpSubPtr_0(v *Value) bool {
 	// cond:
 	// result: (SUB x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64SUB)
@@ -15327,6 +15964,7 @@ func rewriteValueARM64_OpXor16_0(v *Value) bool {
 	// cond:
 	// result: (XOR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64XOR)
@@ -15340,6 +15978,7 @@ func rewriteValueARM64_OpXor32_0(v *Value) bool {
 	// cond:
 	// result: (XOR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64XOR)
@@ -15353,6 +15992,7 @@ func rewriteValueARM64_OpXor64_0(v *Value) bool {
 	// cond:
 	// result: (XOR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64XOR)
@@ -15366,6 +16006,7 @@ func rewriteValueARM64_OpXor8_0(v *Value) bool {
 	// cond:
 	// result: (XOR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpARM64XOR)
@@ -15386,6 +16027,7 @@ func rewriteValueARM64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 0 {
 			break
 		}
+		_ = v.Args[1]
 		mem := v.Args[1]
 		v.reset(OpCopy)
 		v.Type = mem.Type
@@ -15399,6 +16041,7 @@ func rewriteValueARM64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 1 {
 			break
 		}
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpARM64MOVBstore)
@@ -15416,6 +16059,7 @@ func rewriteValueARM64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 2 {
 			break
 		}
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpARM64MOVHstore)
@@ -15433,6 +16077,7 @@ func rewriteValueARM64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 4 {
 			break
 		}
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpARM64MOVWstore)
@@ -15450,6 +16095,7 @@ func rewriteValueARM64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 8 {
 			break
 		}
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpARM64MOVDstore)
@@ -15467,6 +16113,7 @@ func rewriteValueARM64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 3 {
 			break
 		}
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpARM64MOVBstore)
@@ -15491,6 +16138,7 @@ func rewriteValueARM64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 5 {
 			break
 		}
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpARM64MOVBstore)
@@ -15515,6 +16163,7 @@ func rewriteValueARM64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 6 {
 			break
 		}
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpARM64MOVHstore)
@@ -15539,6 +16188,7 @@ func rewriteValueARM64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 7 {
 			break
 		}
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpARM64MOVBstore)
@@ -15570,6 +16220,7 @@ func rewriteValueARM64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 12 {
 			break
 		}
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpARM64MOVWstore)
@@ -15603,6 +16254,7 @@ func rewriteValueARM64_OpZero_10(v *Value) bool {
 		if v.AuxInt != 16 {
 			break
 		}
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpARM64MOVDstore)
@@ -15627,6 +16279,7 @@ func rewriteValueARM64_OpZero_10(v *Value) bool {
 		if v.AuxInt != 24 {
 			break
 		}
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpARM64MOVDstore)
@@ -15656,6 +16309,7 @@ func rewriteValueARM64_OpZero_10(v *Value) bool {
 	// result: (Zero [s%8] 		(OffPtr <ptr.Type> ptr [s-s%8]) 		(Zero [s-s%8] ptr mem))
 	for {
 		s := v.AuxInt
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(s%8 != 0 && s > 8) {
@@ -15679,6 +16333,7 @@ func rewriteValueARM64_OpZero_10(v *Value) bool {
 	// result: (DUFFZERO [4 * (128 - int64(s/8))] ptr mem)
 	for {
 		s := v.AuxInt
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(s%8 == 0 && s > 24 && s <= 8*128 && !config.noDuffDevice) {
@@ -15695,6 +16350,7 @@ func rewriteValueARM64_OpZero_10(v *Value) bool {
 	// result: (LoweredZero 		ptr 		(ADDconst <ptr.Type> [s-8] ptr) 		mem)
 	for {
 		s := v.AuxInt
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(s%8 == 0 && (s > 8*128 || config.noDuffDevice)) {
diff --git a/src/cmd/compile/internal/ssa/rewriteMIPS.go b/src/cmd/compile/internal/ssa/rewriteMIPS.go
index 6c36976e26..77142aa83e 100644
--- a/src/cmd/compile/internal/ssa/rewriteMIPS.go
+++ b/src/cmd/compile/internal/ssa/rewriteMIPS.go
@@ -513,6 +513,7 @@ func rewriteValueMIPS_OpAdd16_0(v *Value) bool {
 	// cond:
 	// result: (ADD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSADD)
@@ -526,6 +527,7 @@ func rewriteValueMIPS_OpAdd32_0(v *Value) bool {
 	// cond:
 	// result: (ADD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSADD)
@@ -539,6 +541,7 @@ func rewriteValueMIPS_OpAdd32F_0(v *Value) bool {
 	// cond:
 	// result: (ADDF x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSADDF)
@@ -555,6 +558,7 @@ func rewriteValueMIPS_OpAdd32withcarry_0(v *Value) bool {
 	// result: (ADD c (ADD <t> x y))
 	for {
 		t := v.Type
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		c := v.Args[2]
@@ -572,6 +576,7 @@ func rewriteValueMIPS_OpAdd64F_0(v *Value) bool {
 	// cond:
 	// result: (ADDD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSADDD)
@@ -585,6 +590,7 @@ func rewriteValueMIPS_OpAdd8_0(v *Value) bool {
 	// cond:
 	// result: (ADD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSADD)
@@ -598,6 +604,7 @@ func rewriteValueMIPS_OpAddPtr_0(v *Value) bool {
 	// cond:
 	// result: (ADD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSADD)
@@ -624,6 +631,7 @@ func rewriteValueMIPS_OpAnd16_0(v *Value) bool {
 	// cond:
 	// result: (AND x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSAND)
@@ -637,6 +645,7 @@ func rewriteValueMIPS_OpAnd32_0(v *Value) bool {
 	// cond:
 	// result: (AND x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSAND)
@@ -650,6 +659,7 @@ func rewriteValueMIPS_OpAnd8_0(v *Value) bool {
 	// cond:
 	// result: (AND x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSAND)
@@ -663,6 +673,7 @@ func rewriteValueMIPS_OpAndB_0(v *Value) bool {
 	// cond:
 	// result: (AND x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSAND)
@@ -676,6 +687,7 @@ func rewriteValueMIPS_OpAtomicAdd32_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicAdd ptr val mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -697,6 +709,7 @@ func rewriteValueMIPS_OpAtomicAnd8_0(v *Value) bool {
 	// cond: !config.BigEndian
 	// result: (LoweredAtomicAnd (AND <typ.UInt32Ptr> (MOVWconst [^3]) ptr) 		(OR <typ.UInt32> (SLL <typ.UInt32> (ZeroExt8to32 val) 			(SLLconst <typ.UInt32> [3] 				(ANDconst  <typ.UInt32> [3] ptr))) 		(NORconst [0] <typ.UInt32> (SLL <typ.UInt32> 			(MOVWconst [0xff]) (SLLconst <typ.UInt32> [3] 				(ANDconst <typ.UInt32> [3] ptr))))) mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -746,6 +759,7 @@ func rewriteValueMIPS_OpAtomicAnd8_0(v *Value) bool {
 	// cond: config.BigEndian
 	// result: (LoweredAtomicAnd (AND <typ.UInt32Ptr> (MOVWconst [^3]) ptr) 		(OR <typ.UInt32> (SLL <typ.UInt32> (ZeroExt8to32 val) 			(SLLconst <typ.UInt32> [3] 				(ANDconst  <typ.UInt32> [3] 					(XORconst <typ.UInt32> [3] ptr)))) 		(NORconst [0] <typ.UInt32> (SLL <typ.UInt32> 			(MOVWconst [0xff]) (SLLconst <typ.UInt32> [3] 				(ANDconst <typ.UInt32> [3] 					(XORconst <typ.UInt32> [3] ptr)))))) mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -804,6 +818,7 @@ func rewriteValueMIPS_OpAtomicCompareAndSwap32_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicCas ptr old new_ mem)
 	for {
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		old := v.Args[1]
 		new_ := v.Args[2]
@@ -821,6 +836,7 @@ func rewriteValueMIPS_OpAtomicExchange32_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicExchange ptr val mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -836,6 +852,7 @@ func rewriteValueMIPS_OpAtomicLoad32_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicLoad ptr mem)
 	for {
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpMIPSLoweredAtomicLoad)
@@ -849,6 +866,7 @@ func rewriteValueMIPS_OpAtomicLoadPtr_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicLoad  ptr mem)
 	for {
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpMIPSLoweredAtomicLoad)
@@ -868,6 +886,7 @@ func rewriteValueMIPS_OpAtomicOr8_0(v *Value) bool {
 	// cond: !config.BigEndian
 	// result: (LoweredAtomicOr (AND <typ.UInt32Ptr> (MOVWconst [^3]) ptr) 		(SLL <typ.UInt32> (ZeroExt8to32 val) 			(SLLconst <typ.UInt32> [3] 				(ANDconst <typ.UInt32> [3] ptr))) mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -900,6 +919,7 @@ func rewriteValueMIPS_OpAtomicOr8_0(v *Value) bool {
 	// cond: config.BigEndian
 	// result: (LoweredAtomicOr (AND <typ.UInt32Ptr> (MOVWconst [^3]) ptr) 		(SLL <typ.UInt32> (ZeroExt8to32 val) 			(SLLconst <typ.UInt32> [3] 				(ANDconst <typ.UInt32> [3] 					(XORconst <typ.UInt32> [3] ptr)))) mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -938,6 +958,7 @@ func rewriteValueMIPS_OpAtomicStore32_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicStore ptr val mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -953,6 +974,7 @@ func rewriteValueMIPS_OpAtomicStorePtrNoWB_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicStore  ptr val mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -971,6 +993,7 @@ func rewriteValueMIPS_OpAvg32u_0(v *Value) bool {
 	// result: (ADD (SRLconst <t> (SUB <t> x y) [1]) y)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSADD)
@@ -1012,6 +1035,7 @@ func rewriteValueMIPS_OpClosureCall_0(v *Value) bool {
 	// result: (CALLclosure [argwid] entry closure mem)
 	for {
 		argwid := v.AuxInt
+		_ = v.Args[2]
 		entry := v.Args[0]
 		closure := v.Args[1]
 		mem := v.Args[2]
@@ -1140,6 +1164,7 @@ func rewriteValueMIPS_OpConvert_0(v *Value) bool {
 	// cond:
 	// result: (MOVWconvert x mem)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpMIPSMOVWconvert)
@@ -1252,6 +1277,7 @@ func rewriteValueMIPS_OpDiv16_0(v *Value) bool {
 	// cond:
 	// result: (Select1 (DIV (SignExt16to32 x) (SignExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect1)
@@ -1275,6 +1301,7 @@ func rewriteValueMIPS_OpDiv16u_0(v *Value) bool {
 	// cond:
 	// result: (Select1 (DIVU (ZeroExt16to32 x) (ZeroExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect1)
@@ -1298,6 +1325,7 @@ func rewriteValueMIPS_OpDiv32_0(v *Value) bool {
 	// cond:
 	// result: (Select1 (DIV x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect1)
@@ -1313,6 +1341,7 @@ func rewriteValueMIPS_OpDiv32F_0(v *Value) bool {
 	// cond:
 	// result: (DIVF x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSDIVF)
@@ -1330,6 +1359,7 @@ func rewriteValueMIPS_OpDiv32u_0(v *Value) bool {
 	// cond:
 	// result: (Select1 (DIVU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect1)
@@ -1345,6 +1375,7 @@ func rewriteValueMIPS_OpDiv64F_0(v *Value) bool {
 	// cond:
 	// result: (DIVD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSDIVD)
@@ -1362,6 +1393,7 @@ func rewriteValueMIPS_OpDiv8_0(v *Value) bool {
 	// cond:
 	// result: (Select1 (DIV (SignExt8to32 x) (SignExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect1)
@@ -1385,6 +1417,7 @@ func rewriteValueMIPS_OpDiv8u_0(v *Value) bool {
 	// cond:
 	// result: (Select1 (DIVU (ZeroExt8to32 x) (ZeroExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect1)
@@ -1408,6 +1441,7 @@ func rewriteValueMIPS_OpEq16_0(v *Value) bool {
 	// cond:
 	// result: (SGTUconst [1] (XOR (ZeroExt16to32 x) (ZeroExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSGTUconst)
@@ -1432,6 +1466,7 @@ func rewriteValueMIPS_OpEq32_0(v *Value) bool {
 	// cond:
 	// result: (SGTUconst [1] (XOR x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSGTUconst)
@@ -1450,6 +1485,7 @@ func rewriteValueMIPS_OpEq32F_0(v *Value) bool {
 	// cond:
 	// result: (FPFlagTrue (CMPEQF x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSFPFlagTrue)
@@ -1467,6 +1503,7 @@ func rewriteValueMIPS_OpEq64F_0(v *Value) bool {
 	// cond:
 	// result: (FPFlagTrue (CMPEQD x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSFPFlagTrue)
@@ -1486,6 +1523,7 @@ func rewriteValueMIPS_OpEq8_0(v *Value) bool {
 	// cond:
 	// result: (SGTUconst [1] (XOR (ZeroExt8to32 x) (ZeroExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSGTUconst)
@@ -1510,6 +1548,7 @@ func rewriteValueMIPS_OpEqB_0(v *Value) bool {
 	// cond:
 	// result: (XORconst [1] (XOR <typ.Bool> x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSXORconst)
@@ -1530,6 +1569,7 @@ func rewriteValueMIPS_OpEqPtr_0(v *Value) bool {
 	// cond:
 	// result: (SGTUconst [1] (XOR x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSGTUconst)
@@ -1550,6 +1590,7 @@ func rewriteValueMIPS_OpGeq16_0(v *Value) bool {
 	// cond:
 	// result: (XORconst [1] (SGT (SignExt16to32 y) (SignExt16to32 x)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSXORconst)
@@ -1574,6 +1615,7 @@ func rewriteValueMIPS_OpGeq16U_0(v *Value) bool {
 	// cond:
 	// result: (XORconst [1] (SGTU (ZeroExt16to32 y) (ZeroExt16to32 x)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSXORconst)
@@ -1598,6 +1640,7 @@ func rewriteValueMIPS_OpGeq32_0(v *Value) bool {
 	// cond:
 	// result: (XORconst [1] (SGT y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSXORconst)
@@ -1616,6 +1659,7 @@ func rewriteValueMIPS_OpGeq32F_0(v *Value) bool {
 	// cond:
 	// result: (FPFlagTrue (CMPGEF x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSFPFlagTrue)
@@ -1635,6 +1679,7 @@ func rewriteValueMIPS_OpGeq32U_0(v *Value) bool {
 	// cond:
 	// result: (XORconst [1] (SGTU y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSXORconst)
@@ -1653,6 +1698,7 @@ func rewriteValueMIPS_OpGeq64F_0(v *Value) bool {
 	// cond:
 	// result: (FPFlagTrue (CMPGED x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSFPFlagTrue)
@@ -1672,6 +1718,7 @@ func rewriteValueMIPS_OpGeq8_0(v *Value) bool {
 	// cond:
 	// result: (XORconst [1] (SGT (SignExt8to32 y) (SignExt8to32 x)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSXORconst)
@@ -1696,6 +1743,7 @@ func rewriteValueMIPS_OpGeq8U_0(v *Value) bool {
 	// cond:
 	// result: (XORconst [1] (SGTU (ZeroExt8to32 y) (ZeroExt8to32 x)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSXORconst)
@@ -1729,6 +1777,7 @@ func rewriteValueMIPS_OpGreater16_0(v *Value) bool {
 	// cond:
 	// result: (SGT (SignExt16to32 x) (SignExt16to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSGT)
@@ -1750,6 +1799,7 @@ func rewriteValueMIPS_OpGreater16U_0(v *Value) bool {
 	// cond:
 	// result: (SGTU (ZeroExt16to32 x) (ZeroExt16to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSGTU)
@@ -1767,6 +1817,7 @@ func rewriteValueMIPS_OpGreater32_0(v *Value) bool {
 	// cond:
 	// result: (SGT x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSGT)
@@ -1782,6 +1833,7 @@ func rewriteValueMIPS_OpGreater32F_0(v *Value) bool {
 	// cond:
 	// result: (FPFlagTrue (CMPGTF x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSFPFlagTrue)
@@ -1797,6 +1849,7 @@ func rewriteValueMIPS_OpGreater32U_0(v *Value) bool {
 	// cond:
 	// result: (SGTU x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSGTU)
@@ -1812,6 +1865,7 @@ func rewriteValueMIPS_OpGreater64F_0(v *Value) bool {
 	// cond:
 	// result: (FPFlagTrue (CMPGTD x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSFPFlagTrue)
@@ -1831,6 +1885,7 @@ func rewriteValueMIPS_OpGreater8_0(v *Value) bool {
 	// cond:
 	// result: (SGT (SignExt8to32 x) (SignExt8to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSGT)
@@ -1852,6 +1907,7 @@ func rewriteValueMIPS_OpGreater8U_0(v *Value) bool {
 	// cond:
 	// result: (SGTU (ZeroExt8to32 x) (ZeroExt8to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSGTU)
@@ -1873,6 +1929,7 @@ func rewriteValueMIPS_OpHmul32_0(v *Value) bool {
 	// cond:
 	// result: (Select0 (MULT x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect0)
@@ -1892,6 +1949,7 @@ func rewriteValueMIPS_OpHmul32u_0(v *Value) bool {
 	// cond:
 	// result: (Select0 (MULTU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect0)
@@ -1908,6 +1966,7 @@ func rewriteValueMIPS_OpInterCall_0(v *Value) bool {
 	// result: (CALLinter [argwid] entry mem)
 	for {
 		argwid := v.AuxInt
+		_ = v.Args[1]
 		entry := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpMIPSCALLinter)
@@ -1922,6 +1981,7 @@ func rewriteValueMIPS_OpIsInBounds_0(v *Value) bool {
 	// cond:
 	// result: (SGTU len idx)
 	for {
+		_ = v.Args[1]
 		idx := v.Args[0]
 		len := v.Args[1]
 		v.reset(OpMIPSSGTU)
@@ -1957,6 +2017,7 @@ func rewriteValueMIPS_OpIsSliceInBounds_0(v *Value) bool {
 	// cond:
 	// result: (XORconst [1] (SGTU idx len))
 	for {
+		_ = v.Args[1]
 		idx := v.Args[0]
 		len := v.Args[1]
 		v.reset(OpMIPSXORconst)
@@ -1977,6 +2038,7 @@ func rewriteValueMIPS_OpLeq16_0(v *Value) bool {
 	// cond:
 	// result: (XORconst [1] (SGT (SignExt16to32 x) (SignExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSXORconst)
@@ -2001,6 +2063,7 @@ func rewriteValueMIPS_OpLeq16U_0(v *Value) bool {
 	// cond:
 	// result: (XORconst [1] (SGTU (ZeroExt16to32 x) (ZeroExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSXORconst)
@@ -2025,6 +2088,7 @@ func rewriteValueMIPS_OpLeq32_0(v *Value) bool {
 	// cond:
 	// result: (XORconst [1] (SGT x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSXORconst)
@@ -2043,6 +2107,7 @@ func rewriteValueMIPS_OpLeq32F_0(v *Value) bool {
 	// cond:
 	// result: (FPFlagTrue (CMPGEF y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSFPFlagTrue)
@@ -2062,6 +2127,7 @@ func rewriteValueMIPS_OpLeq32U_0(v *Value) bool {
 	// cond:
 	// result: (XORconst [1] (SGTU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSXORconst)
@@ -2080,6 +2146,7 @@ func rewriteValueMIPS_OpLeq64F_0(v *Value) bool {
 	// cond:
 	// result: (FPFlagTrue (CMPGED y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSFPFlagTrue)
@@ -2099,6 +2166,7 @@ func rewriteValueMIPS_OpLeq8_0(v *Value) bool {
 	// cond:
 	// result: (XORconst [1] (SGT (SignExt8to32 x) (SignExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSXORconst)
@@ -2123,6 +2191,7 @@ func rewriteValueMIPS_OpLeq8U_0(v *Value) bool {
 	// cond:
 	// result: (XORconst [1] (SGTU (ZeroExt8to32 x) (ZeroExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSXORconst)
@@ -2147,6 +2216,7 @@ func rewriteValueMIPS_OpLess16_0(v *Value) bool {
 	// cond:
 	// result: (SGT (SignExt16to32 y) (SignExt16to32 x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSGT)
@@ -2168,6 +2238,7 @@ func rewriteValueMIPS_OpLess16U_0(v *Value) bool {
 	// cond:
 	// result: (SGTU (ZeroExt16to32 y) (ZeroExt16to32 x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSGTU)
@@ -2185,6 +2256,7 @@ func rewriteValueMIPS_OpLess32_0(v *Value) bool {
 	// cond:
 	// result: (SGT y x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSGT)
@@ -2200,6 +2272,7 @@ func rewriteValueMIPS_OpLess32F_0(v *Value) bool {
 	// cond:
 	// result: (FPFlagTrue (CMPGTF y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSFPFlagTrue)
@@ -2215,6 +2288,7 @@ func rewriteValueMIPS_OpLess32U_0(v *Value) bool {
 	// cond:
 	// result: (SGTU y x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSGTU)
@@ -2230,6 +2304,7 @@ func rewriteValueMIPS_OpLess64F_0(v *Value) bool {
 	// cond:
 	// result: (FPFlagTrue (CMPGTD y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSFPFlagTrue)
@@ -2249,6 +2324,7 @@ func rewriteValueMIPS_OpLess8_0(v *Value) bool {
 	// cond:
 	// result: (SGT (SignExt8to32 y) (SignExt8to32 x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSGT)
@@ -2270,6 +2346,7 @@ func rewriteValueMIPS_OpLess8U_0(v *Value) bool {
 	// cond:
 	// result: (SGTU (ZeroExt8to32 y) (ZeroExt8to32 x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSGTU)
@@ -2288,6 +2365,7 @@ func rewriteValueMIPS_OpLoad_0(v *Value) bool {
 	// result: (MOVBUload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.IsBoolean()) {
@@ -2303,6 +2381,7 @@ func rewriteValueMIPS_OpLoad_0(v *Value) bool {
 	// result: (MOVBload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is8BitInt(t) && isSigned(t)) {
@@ -2318,6 +2397,7 @@ func rewriteValueMIPS_OpLoad_0(v *Value) bool {
 	// result: (MOVBUload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is8BitInt(t) && !isSigned(t)) {
@@ -2333,6 +2413,7 @@ func rewriteValueMIPS_OpLoad_0(v *Value) bool {
 	// result: (MOVHload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is16BitInt(t) && isSigned(t)) {
@@ -2348,6 +2429,7 @@ func rewriteValueMIPS_OpLoad_0(v *Value) bool {
 	// result: (MOVHUload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is16BitInt(t) && !isSigned(t)) {
@@ -2363,6 +2445,7 @@ func rewriteValueMIPS_OpLoad_0(v *Value) bool {
 	// result: (MOVWload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is32BitInt(t) || isPtr(t)) {
@@ -2378,6 +2461,7 @@ func rewriteValueMIPS_OpLoad_0(v *Value) bool {
 	// result: (MOVFload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is32BitFloat(t)) {
@@ -2393,6 +2477,7 @@ func rewriteValueMIPS_OpLoad_0(v *Value) bool {
 	// result: (MOVDload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is64BitFloat(t)) {
@@ -2415,6 +2500,7 @@ func rewriteValueMIPS_OpLsh16x16_0(v *Value) bool {
 	// result: (CMOVZ (SLL <t> x (ZeroExt16to32 y) ) (MOVWconst [0]) (SGTUconst [32] (ZeroExt16to32 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSCMOVZ)
@@ -2446,6 +2532,7 @@ func rewriteValueMIPS_OpLsh16x32_0(v *Value) bool {
 	// result: (CMOVZ (SLL <t> x y) (MOVWconst [0]) (SGTUconst [32] y))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSCMOVZ)
@@ -2468,6 +2555,7 @@ func rewriteValueMIPS_OpLsh16x64_0(v *Value) bool {
 	// cond: uint32(c) < 16
 	// result: (SLLconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -2486,6 +2574,7 @@ func rewriteValueMIPS_OpLsh16x64_0(v *Value) bool {
 	// cond: uint32(c) >= 16
 	// result: (MOVWconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -2510,6 +2599,7 @@ func rewriteValueMIPS_OpLsh16x8_0(v *Value) bool {
 	// result: (CMOVZ (SLL <t> x (ZeroExt8to32 y) ) (MOVWconst [0]) (SGTUconst [32] (ZeroExt8to32 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSCMOVZ)
@@ -2541,6 +2631,7 @@ func rewriteValueMIPS_OpLsh32x16_0(v *Value) bool {
 	// result: (CMOVZ (SLL <t> x (ZeroExt16to32 y) ) (MOVWconst [0]) (SGTUconst [32] (ZeroExt16to32 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSCMOVZ)
@@ -2572,6 +2663,7 @@ func rewriteValueMIPS_OpLsh32x32_0(v *Value) bool {
 	// result: (CMOVZ (SLL <t> x y) (MOVWconst [0]) (SGTUconst [32] y))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSCMOVZ)
@@ -2594,6 +2686,7 @@ func rewriteValueMIPS_OpLsh32x64_0(v *Value) bool {
 	// cond: uint32(c) < 32
 	// result: (SLLconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -2612,6 +2705,7 @@ func rewriteValueMIPS_OpLsh32x64_0(v *Value) bool {
 	// cond: uint32(c) >= 32
 	// result: (MOVWconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -2636,6 +2730,7 @@ func rewriteValueMIPS_OpLsh32x8_0(v *Value) bool {
 	// result: (CMOVZ (SLL <t> x (ZeroExt8to32 y) ) (MOVWconst [0]) (SGTUconst [32] (ZeroExt8to32 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSCMOVZ)
@@ -2667,6 +2762,7 @@ func rewriteValueMIPS_OpLsh8x16_0(v *Value) bool {
 	// result: (CMOVZ (SLL <t> x (ZeroExt16to32 y) ) (MOVWconst [0]) (SGTUconst [32] (ZeroExt16to32 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSCMOVZ)
@@ -2698,6 +2794,7 @@ func rewriteValueMIPS_OpLsh8x32_0(v *Value) bool {
 	// result: (CMOVZ (SLL <t> x y) (MOVWconst [0]) (SGTUconst [32] y))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSCMOVZ)
@@ -2720,6 +2817,7 @@ func rewriteValueMIPS_OpLsh8x64_0(v *Value) bool {
 	// cond: uint32(c) < 8
 	// result: (SLLconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -2738,6 +2836,7 @@ func rewriteValueMIPS_OpLsh8x64_0(v *Value) bool {
 	// cond: uint32(c) >= 8
 	// result: (MOVWconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -2762,6 +2861,7 @@ func rewriteValueMIPS_OpLsh8x8_0(v *Value) bool {
 	// result: (CMOVZ (SLL <t> x (ZeroExt8to32 y) ) (MOVWconst [0]) (SGTUconst [32] (ZeroExt8to32 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSCMOVZ)
@@ -2788,6 +2888,7 @@ func rewriteValueMIPS_OpMIPSADD_0(v *Value) bool {
 	// cond:
 	// result: (ADDconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVWconst {
@@ -2803,6 +2904,7 @@ func rewriteValueMIPS_OpMIPSADD_0(v *Value) bool {
 	// cond:
 	// result: (ADDconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSMOVWconst {
 			break
@@ -2818,6 +2920,7 @@ func rewriteValueMIPS_OpMIPSADD_0(v *Value) bool {
 	// cond:
 	// result: (SUB x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSNEG {
@@ -2833,6 +2936,7 @@ func rewriteValueMIPS_OpMIPSADD_0(v *Value) bool {
 	// cond:
 	// result: (SUB x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSNEG {
 			break
@@ -2933,6 +3037,7 @@ func rewriteValueMIPS_OpMIPSAND_0(v *Value) bool {
 	// cond:
 	// result: (ANDconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVWconst {
@@ -2948,6 +3053,7 @@ func rewriteValueMIPS_OpMIPSAND_0(v *Value) bool {
 	// cond:
 	// result: (ANDconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSMOVWconst {
 			break
@@ -2963,6 +3069,7 @@ func rewriteValueMIPS_OpMIPSAND_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -2976,6 +3083,7 @@ func rewriteValueMIPS_OpMIPSAND_0(v *Value) bool {
 	// cond:
 	// result: (SGTUconst [1] (OR <x.Type> x y))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSSGTUconst {
 			break
@@ -3004,6 +3112,7 @@ func rewriteValueMIPS_OpMIPSAND_0(v *Value) bool {
 	// cond:
 	// result: (SGTUconst [1] (OR <x.Type> x y))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSSGTUconst {
 			break
@@ -3094,6 +3203,7 @@ func rewriteValueMIPS_OpMIPSCMOVZ_0(v *Value) bool {
 	// cond:
 	// result: b
 	for {
+		_ = v.Args[2]
 		b := v.Args[1]
 		v_2 := v.Args[2]
 		if v_2.Op != OpMIPSMOVWconst {
@@ -3111,6 +3221,7 @@ func rewriteValueMIPS_OpMIPSCMOVZ_0(v *Value) bool {
 	// cond: c!=0
 	// result: a
 	for {
+		_ = v.Args[2]
 		a := v.Args[0]
 		v_2 := v.Args[2]
 		if v_2.Op != OpMIPSMOVWconst {
@@ -3129,6 +3240,7 @@ func rewriteValueMIPS_OpMIPSCMOVZ_0(v *Value) bool {
 	// cond:
 	// result: (CMOVZzero a c)
 	for {
+		_ = v.Args[2]
 		a := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVWconst {
@@ -3150,6 +3262,7 @@ func rewriteValueMIPS_OpMIPSCMOVZzero_0(v *Value) bool {
 	// cond:
 	// result: (MOVWconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVWconst {
 			break
@@ -3165,6 +3278,7 @@ func rewriteValueMIPS_OpMIPSCMOVZzero_0(v *Value) bool {
 	// cond: c!=0
 	// result: a
 	for {
+		_ = v.Args[1]
 		a := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVWconst {
@@ -3186,6 +3300,7 @@ func rewriteValueMIPS_OpMIPSLoweredAtomicAdd_0(v *Value) bool {
 	// cond: is16Bit(c)
 	// result: (LoweredAtomicAddconst [c] ptr mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVWconst {
@@ -3209,6 +3324,7 @@ func rewriteValueMIPS_OpMIPSLoweredAtomicStore_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicStorezero ptr mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVWconst {
@@ -3232,6 +3348,7 @@ func rewriteValueMIPS_OpMIPSMOVBUload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x.Op != OpMIPSADDconst {
 			break
@@ -3255,6 +3372,7 @@ func rewriteValueMIPS_OpMIPSMOVBUload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSMOVWaddr {
 			break
@@ -3279,6 +3397,7 @@ func rewriteValueMIPS_OpMIPSMOVBUload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVBstore {
@@ -3286,6 +3405,7 @@ func rewriteValueMIPS_OpMIPSMOVBUload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2) && !isSigned(x.Type)) {
@@ -3309,6 +3429,7 @@ func rewriteValueMIPS_OpMIPSMOVBUreg_0(v *Value) bool {
 		if x.Op != OpMIPSMOVBUload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpMIPSMOVWreg)
 		v.AddArg(x)
 		return true
@@ -3336,6 +3457,7 @@ func rewriteValueMIPS_OpMIPSMOVBUreg_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -3388,6 +3510,7 @@ func rewriteValueMIPS_OpMIPSMOVBload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x.Op != OpMIPSADDconst {
 			break
@@ -3411,6 +3534,7 @@ func rewriteValueMIPS_OpMIPSMOVBload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSMOVWaddr {
 			break
@@ -3435,6 +3559,7 @@ func rewriteValueMIPS_OpMIPSMOVBload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVBstore {
@@ -3442,6 +3567,7 @@ func rewriteValueMIPS_OpMIPSMOVBload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2) && isSigned(x.Type)) {
@@ -3465,6 +3591,7 @@ func rewriteValueMIPS_OpMIPSMOVBreg_0(v *Value) bool {
 		if x.Op != OpMIPSMOVBload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpMIPSMOVWreg)
 		v.AddArg(x)
 		return true
@@ -3492,6 +3619,7 @@ func rewriteValueMIPS_OpMIPSMOVBreg_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -3547,6 +3675,7 @@ func rewriteValueMIPS_OpMIPSMOVBstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		x := v.Args[0]
 		if x.Op != OpMIPSADDconst {
 			break
@@ -3572,6 +3701,7 @@ func rewriteValueMIPS_OpMIPSMOVBstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSMOVWaddr {
 			break
@@ -3598,6 +3728,7 @@ func rewriteValueMIPS_OpMIPSMOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVWconst {
@@ -3620,6 +3751,7 @@ func rewriteValueMIPS_OpMIPSMOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVBreg {
@@ -3641,6 +3773,7 @@ func rewriteValueMIPS_OpMIPSMOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVBUreg {
@@ -3662,6 +3795,7 @@ func rewriteValueMIPS_OpMIPSMOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVHreg {
@@ -3683,6 +3817,7 @@ func rewriteValueMIPS_OpMIPSMOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVHUreg {
@@ -3704,6 +3839,7 @@ func rewriteValueMIPS_OpMIPSMOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVWreg {
@@ -3728,6 +3864,7 @@ func rewriteValueMIPS_OpMIPSMOVBstorezero_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x.Op != OpMIPSADDconst {
 			break
@@ -3751,6 +3888,7 @@ func rewriteValueMIPS_OpMIPSMOVBstorezero_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSMOVWaddr {
 			break
@@ -3778,6 +3916,7 @@ func rewriteValueMIPS_OpMIPSMOVDload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x.Op != OpMIPSADDconst {
 			break
@@ -3801,6 +3940,7 @@ func rewriteValueMIPS_OpMIPSMOVDload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSMOVWaddr {
 			break
@@ -3825,6 +3965,7 @@ func rewriteValueMIPS_OpMIPSMOVDload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVDstore {
@@ -3832,6 +3973,7 @@ func rewriteValueMIPS_OpMIPSMOVDload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2)) {
@@ -3851,6 +3993,7 @@ func rewriteValueMIPS_OpMIPSMOVDstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		x := v.Args[0]
 		if x.Op != OpMIPSADDconst {
 			break
@@ -3876,6 +4019,7 @@ func rewriteValueMIPS_OpMIPSMOVDstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSMOVWaddr {
 			break
@@ -3905,6 +4049,7 @@ func rewriteValueMIPS_OpMIPSMOVFload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x.Op != OpMIPSADDconst {
 			break
@@ -3928,6 +4073,7 @@ func rewriteValueMIPS_OpMIPSMOVFload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSMOVWaddr {
 			break
@@ -3952,6 +4098,7 @@ func rewriteValueMIPS_OpMIPSMOVFload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVFstore {
@@ -3959,6 +4106,7 @@ func rewriteValueMIPS_OpMIPSMOVFload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2)) {
@@ -3978,6 +4126,7 @@ func rewriteValueMIPS_OpMIPSMOVFstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		x := v.Args[0]
 		if x.Op != OpMIPSADDconst {
 			break
@@ -4003,6 +4152,7 @@ func rewriteValueMIPS_OpMIPSMOVFstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSMOVWaddr {
 			break
@@ -4032,6 +4182,7 @@ func rewriteValueMIPS_OpMIPSMOVHUload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x.Op != OpMIPSADDconst {
 			break
@@ -4055,6 +4206,7 @@ func rewriteValueMIPS_OpMIPSMOVHUload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSMOVWaddr {
 			break
@@ -4079,6 +4231,7 @@ func rewriteValueMIPS_OpMIPSMOVHUload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVHstore {
@@ -4086,6 +4239,7 @@ func rewriteValueMIPS_OpMIPSMOVHUload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2) && !isSigned(x.Type)) {
@@ -4109,6 +4263,7 @@ func rewriteValueMIPS_OpMIPSMOVHUreg_0(v *Value) bool {
 		if x.Op != OpMIPSMOVBUload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpMIPSMOVWreg)
 		v.AddArg(x)
 		return true
@@ -4121,6 +4276,7 @@ func rewriteValueMIPS_OpMIPSMOVHUreg_0(v *Value) bool {
 		if x.Op != OpMIPSMOVHUload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpMIPSMOVWreg)
 		v.AddArg(x)
 		return true
@@ -4160,6 +4316,7 @@ func rewriteValueMIPS_OpMIPSMOVHUreg_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -4212,6 +4369,7 @@ func rewriteValueMIPS_OpMIPSMOVHload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x.Op != OpMIPSADDconst {
 			break
@@ -4235,6 +4393,7 @@ func rewriteValueMIPS_OpMIPSMOVHload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSMOVWaddr {
 			break
@@ -4259,6 +4418,7 @@ func rewriteValueMIPS_OpMIPSMOVHload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVHstore {
@@ -4266,6 +4426,7 @@ func rewriteValueMIPS_OpMIPSMOVHload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2) && isSigned(x.Type)) {
@@ -4289,6 +4450,7 @@ func rewriteValueMIPS_OpMIPSMOVHreg_0(v *Value) bool {
 		if x.Op != OpMIPSMOVBload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpMIPSMOVWreg)
 		v.AddArg(x)
 		return true
@@ -4301,6 +4463,7 @@ func rewriteValueMIPS_OpMIPSMOVHreg_0(v *Value) bool {
 		if x.Op != OpMIPSMOVBUload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpMIPSMOVWreg)
 		v.AddArg(x)
 		return true
@@ -4313,6 +4476,7 @@ func rewriteValueMIPS_OpMIPSMOVHreg_0(v *Value) bool {
 		if x.Op != OpMIPSMOVHload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpMIPSMOVWreg)
 		v.AddArg(x)
 		return true
@@ -4364,6 +4528,7 @@ func rewriteValueMIPS_OpMIPSMOVHreg_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -4419,6 +4584,7 @@ func rewriteValueMIPS_OpMIPSMOVHstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		x := v.Args[0]
 		if x.Op != OpMIPSADDconst {
 			break
@@ -4444,6 +4610,7 @@ func rewriteValueMIPS_OpMIPSMOVHstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSMOVWaddr {
 			break
@@ -4470,6 +4637,7 @@ func rewriteValueMIPS_OpMIPSMOVHstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVWconst {
@@ -4492,6 +4660,7 @@ func rewriteValueMIPS_OpMIPSMOVHstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVHreg {
@@ -4513,6 +4682,7 @@ func rewriteValueMIPS_OpMIPSMOVHstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVHUreg {
@@ -4534,6 +4704,7 @@ func rewriteValueMIPS_OpMIPSMOVHstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVWreg {
@@ -4558,6 +4729,7 @@ func rewriteValueMIPS_OpMIPSMOVHstorezero_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x.Op != OpMIPSADDconst {
 			break
@@ -4581,6 +4753,7 @@ func rewriteValueMIPS_OpMIPSMOVHstorezero_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSMOVWaddr {
 			break
@@ -4608,6 +4781,7 @@ func rewriteValueMIPS_OpMIPSMOVWload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x.Op != OpMIPSADDconst {
 			break
@@ -4631,6 +4805,7 @@ func rewriteValueMIPS_OpMIPSMOVWload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSMOVWaddr {
 			break
@@ -4655,6 +4830,7 @@ func rewriteValueMIPS_OpMIPSMOVWload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVWstore {
@@ -4662,6 +4838,7 @@ func rewriteValueMIPS_OpMIPSMOVWload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2)) {
@@ -4709,6 +4886,7 @@ func rewriteValueMIPS_OpMIPSMOVWstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		x := v.Args[0]
 		if x.Op != OpMIPSADDconst {
 			break
@@ -4734,6 +4912,7 @@ func rewriteValueMIPS_OpMIPSMOVWstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSMOVWaddr {
 			break
@@ -4760,6 +4939,7 @@ func rewriteValueMIPS_OpMIPSMOVWstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVWconst {
@@ -4782,6 +4962,7 @@ func rewriteValueMIPS_OpMIPSMOVWstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVWreg {
@@ -4806,6 +4987,7 @@ func rewriteValueMIPS_OpMIPSMOVWstorezero_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x.Op != OpMIPSADDconst {
 			break
@@ -4829,6 +5011,7 @@ func rewriteValueMIPS_OpMIPSMOVWstorezero_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSMOVWaddr {
 			break
@@ -4854,6 +5037,7 @@ func rewriteValueMIPS_OpMIPSMUL_0(v *Value) bool {
 	// cond:
 	// result: (MOVWconst [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSMOVWconst {
 			break
@@ -4869,6 +5053,7 @@ func rewriteValueMIPS_OpMIPSMUL_0(v *Value) bool {
 	// cond:
 	// result: (MOVWconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVWconst {
 			break
@@ -4884,6 +5069,7 @@ func rewriteValueMIPS_OpMIPSMUL_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSMOVWconst {
 			break
@@ -4901,6 +5087,7 @@ func rewriteValueMIPS_OpMIPSMUL_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVWconst {
@@ -4918,6 +5105,7 @@ func rewriteValueMIPS_OpMIPSMUL_0(v *Value) bool {
 	// cond:
 	// result: (NEG x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSMOVWconst {
 			break
@@ -4934,6 +5122,7 @@ func rewriteValueMIPS_OpMIPSMUL_0(v *Value) bool {
 	// cond:
 	// result: (NEG x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVWconst {
@@ -4950,6 +5139,7 @@ func rewriteValueMIPS_OpMIPSMUL_0(v *Value) bool {
 	// cond: isPowerOfTwo(int64(uint32(c)))
 	// result: (SLLconst [log2(int64(uint32(c)))] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSMOVWconst {
 			break
@@ -4968,6 +5158,7 @@ func rewriteValueMIPS_OpMIPSMUL_0(v *Value) bool {
 	// cond: isPowerOfTwo(int64(uint32(c)))
 	// result: (SLLconst [log2(int64(uint32(c)))] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVWconst {
@@ -4986,6 +5177,7 @@ func rewriteValueMIPS_OpMIPSMUL_0(v *Value) bool {
 	// cond:
 	// result: (MOVWconst [int64(int32(c)*int32(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSMOVWconst {
 			break
@@ -5004,6 +5196,7 @@ func rewriteValueMIPS_OpMIPSMUL_0(v *Value) bool {
 	// cond:
 	// result: (MOVWconst [int64(int32(c)*int32(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSMOVWconst {
 			break
@@ -5041,6 +5234,7 @@ func rewriteValueMIPS_OpMIPSNOR_0(v *Value) bool {
 	// cond:
 	// result: (NORconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVWconst {
@@ -5056,6 +5250,7 @@ func rewriteValueMIPS_OpMIPSNOR_0(v *Value) bool {
 	// cond:
 	// result: (NORconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSMOVWconst {
 			break
@@ -5093,6 +5288,7 @@ func rewriteValueMIPS_OpMIPSOR_0(v *Value) bool {
 	// cond:
 	// result: (ORconst  [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVWconst {
@@ -5108,6 +5304,7 @@ func rewriteValueMIPS_OpMIPSOR_0(v *Value) bool {
 	// cond:
 	// result: (ORconst  [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSMOVWconst {
 			break
@@ -5123,6 +5320,7 @@ func rewriteValueMIPS_OpMIPSOR_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -5136,6 +5334,7 @@ func rewriteValueMIPS_OpMIPSOR_0(v *Value) bool {
 	// cond:
 	// result: (SGTUzero (OR <x.Type> x y))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSSGTUzero {
 			break
@@ -5157,6 +5356,7 @@ func rewriteValueMIPS_OpMIPSOR_0(v *Value) bool {
 	// cond:
 	// result: (SGTUzero (OR <x.Type> x y))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSSGTUzero {
 			break
@@ -5238,6 +5438,7 @@ func rewriteValueMIPS_OpMIPSSGT_0(v *Value) bool {
 	// cond:
 	// result: (SGTconst  [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSMOVWconst {
 			break
@@ -5253,6 +5454,7 @@ func rewriteValueMIPS_OpMIPSSGT_0(v *Value) bool {
 	// cond:
 	// result: (SGTzero x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVWconst {
@@ -5272,6 +5474,7 @@ func rewriteValueMIPS_OpMIPSSGTU_0(v *Value) bool {
 	// cond:
 	// result: (SGTUconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSMOVWconst {
 			break
@@ -5287,6 +5490,7 @@ func rewriteValueMIPS_OpMIPSSGTU_0(v *Value) bool {
 	// cond:
 	// result: (SGTUzero x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVWconst {
@@ -5681,6 +5885,7 @@ func rewriteValueMIPS_OpMIPSSLL_0(v *Value) bool {
 	// cond: uint32(c)>=32
 	// result: (MOVWconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVWconst {
 			break
@@ -5697,6 +5902,7 @@ func rewriteValueMIPS_OpMIPSSLL_0(v *Value) bool {
 	// cond:
 	// result: (SLLconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVWconst {
@@ -5732,6 +5938,7 @@ func rewriteValueMIPS_OpMIPSSRA_0(v *Value) bool {
 	// cond: uint32(c)>=32
 	// result: (SRAconst x [31])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVWconst {
@@ -5750,6 +5957,7 @@ func rewriteValueMIPS_OpMIPSSRA_0(v *Value) bool {
 	// cond:
 	// result: (SRAconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVWconst {
@@ -5785,6 +5993,7 @@ func rewriteValueMIPS_OpMIPSSRL_0(v *Value) bool {
 	// cond: uint32(c)>=32
 	// result: (MOVWconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVWconst {
 			break
@@ -5801,6 +6010,7 @@ func rewriteValueMIPS_OpMIPSSRL_0(v *Value) bool {
 	// cond:
 	// result: (SRLconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVWconst {
@@ -5836,6 +6046,7 @@ func rewriteValueMIPS_OpMIPSSUB_0(v *Value) bool {
 	// cond:
 	// result: (SUBconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVWconst {
@@ -5851,6 +6062,7 @@ func rewriteValueMIPS_OpMIPSSUB_0(v *Value) bool {
 	// cond:
 	// result: (MOVWconst [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -5863,6 +6075,7 @@ func rewriteValueMIPS_OpMIPSSUB_0(v *Value) bool {
 	// cond:
 	// result: (NEG x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSMOVWconst {
 			break
@@ -5944,6 +6157,7 @@ func rewriteValueMIPS_OpMIPSXOR_0(v *Value) bool {
 	// cond:
 	// result: (XORconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPSMOVWconst {
@@ -5959,6 +6173,7 @@ func rewriteValueMIPS_OpMIPSXOR_0(v *Value) bool {
 	// cond:
 	// result: (XORconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPSMOVWconst {
 			break
@@ -5974,6 +6189,7 @@ func rewriteValueMIPS_OpMIPSXOR_0(v *Value) bool {
 	// cond:
 	// result: (MOVWconst [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -6052,6 +6268,7 @@ func rewriteValueMIPS_OpMod16_0(v *Value) bool {
 	// cond:
 	// result: (Select0 (DIV (SignExt16to32 x) (SignExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect0)
@@ -6075,6 +6292,7 @@ func rewriteValueMIPS_OpMod16u_0(v *Value) bool {
 	// cond:
 	// result: (Select0 (DIVU (ZeroExt16to32 x) (ZeroExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect0)
@@ -6098,6 +6316,7 @@ func rewriteValueMIPS_OpMod32_0(v *Value) bool {
 	// cond:
 	// result: (Select0 (DIV x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect0)
@@ -6117,6 +6336,7 @@ func rewriteValueMIPS_OpMod32u_0(v *Value) bool {
 	// cond:
 	// result: (Select0 (DIVU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect0)
@@ -6136,6 +6356,7 @@ func rewriteValueMIPS_OpMod8_0(v *Value) bool {
 	// cond:
 	// result: (Select0 (DIV (SignExt8to32 x) (SignExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect0)
@@ -6159,6 +6380,7 @@ func rewriteValueMIPS_OpMod8u_0(v *Value) bool {
 	// cond:
 	// result: (Select0 (DIVU (ZeroExt8to32 x) (ZeroExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect0)
@@ -6185,6 +6407,7 @@ func rewriteValueMIPS_OpMove_0(v *Value) bool {
 		if v.AuxInt != 0 {
 			break
 		}
+		_ = v.Args[2]
 		mem := v.Args[2]
 		v.reset(OpCopy)
 		v.Type = mem.Type
@@ -6198,6 +6421,7 @@ func rewriteValueMIPS_OpMove_0(v *Value) bool {
 		if v.AuxInt != 1 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -6218,6 +6442,7 @@ func rewriteValueMIPS_OpMove_0(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -6240,6 +6465,7 @@ func rewriteValueMIPS_OpMove_0(v *Value) bool {
 		if v.AuxInt != 2 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -6269,6 +6495,7 @@ func rewriteValueMIPS_OpMove_0(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -6292,6 +6519,7 @@ func rewriteValueMIPS_OpMove_0(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -6323,6 +6551,7 @@ func rewriteValueMIPS_OpMove_0(v *Value) bool {
 		if v.AuxInt != 4 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -6369,6 +6598,7 @@ func rewriteValueMIPS_OpMove_0(v *Value) bool {
 		if v.AuxInt != 3 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -6407,6 +6637,7 @@ func rewriteValueMIPS_OpMove_0(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -6439,6 +6670,7 @@ func rewriteValueMIPS_OpMove_0(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -6498,6 +6730,7 @@ func rewriteValueMIPS_OpMove_10(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -6539,6 +6772,7 @@ func rewriteValueMIPS_OpMove_10(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -6580,6 +6814,7 @@ func rewriteValueMIPS_OpMove_10(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -6628,6 +6863,7 @@ func rewriteValueMIPS_OpMove_10(v *Value) bool {
 	for {
 		s := v.AuxInt
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -6652,6 +6888,7 @@ func rewriteValueMIPS_OpMul16_0(v *Value) bool {
 	// cond:
 	// result: (MUL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSMUL)
@@ -6665,6 +6902,7 @@ func rewriteValueMIPS_OpMul32_0(v *Value) bool {
 	// cond:
 	// result: (MUL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSMUL)
@@ -6678,6 +6916,7 @@ func rewriteValueMIPS_OpMul32F_0(v *Value) bool {
 	// cond:
 	// result: (MULF x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSMULF)
@@ -6691,6 +6930,7 @@ func rewriteValueMIPS_OpMul32uhilo_0(v *Value) bool {
 	// cond:
 	// result: (MULTU x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSMULTU)
@@ -6704,6 +6944,7 @@ func rewriteValueMIPS_OpMul64F_0(v *Value) bool {
 	// cond:
 	// result: (MULD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSMULD)
@@ -6717,6 +6958,7 @@ func rewriteValueMIPS_OpMul8_0(v *Value) bool {
 	// cond:
 	// result: (MUL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSMUL)
@@ -6789,6 +7031,7 @@ func rewriteValueMIPS_OpNeq16_0(v *Value) bool {
 	// cond:
 	// result: (SGTU (XOR (ZeroExt16to32 x) (ZeroExt16to32 y)) (MOVWconst [0]))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSGTU)
@@ -6815,6 +7058,7 @@ func rewriteValueMIPS_OpNeq32_0(v *Value) bool {
 	// cond:
 	// result: (SGTU (XOR x y) (MOVWconst [0]))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSGTU)
@@ -6835,6 +7079,7 @@ func rewriteValueMIPS_OpNeq32F_0(v *Value) bool {
 	// cond:
 	// result: (FPFlagFalse (CMPEQF x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSFPFlagFalse)
@@ -6852,6 +7097,7 @@ func rewriteValueMIPS_OpNeq64F_0(v *Value) bool {
 	// cond:
 	// result: (FPFlagFalse (CMPEQD x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSFPFlagFalse)
@@ -6871,6 +7117,7 @@ func rewriteValueMIPS_OpNeq8_0(v *Value) bool {
 	// cond:
 	// result: (SGTU (XOR (ZeroExt8to32 x) (ZeroExt8to32 y)) (MOVWconst [0]))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSGTU)
@@ -6893,6 +7140,7 @@ func rewriteValueMIPS_OpNeqB_0(v *Value) bool {
 	// cond:
 	// result: (XOR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSXOR)
@@ -6910,6 +7158,7 @@ func rewriteValueMIPS_OpNeqPtr_0(v *Value) bool {
 	// cond:
 	// result: (SGTU (XOR x y) (MOVWconst [0]))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSGTU)
@@ -6928,6 +7177,7 @@ func rewriteValueMIPS_OpNilCheck_0(v *Value) bool {
 	// cond:
 	// result: (LoweredNilCheck ptr mem)
 	for {
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpMIPSLoweredNilCheck)
@@ -6980,6 +7230,7 @@ func rewriteValueMIPS_OpOr16_0(v *Value) bool {
 	// cond:
 	// result: (OR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSOR)
@@ -6993,6 +7244,7 @@ func rewriteValueMIPS_OpOr32_0(v *Value) bool {
 	// cond:
 	// result: (OR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSOR)
@@ -7006,6 +7258,7 @@ func rewriteValueMIPS_OpOr8_0(v *Value) bool {
 	// cond:
 	// result: (OR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSOR)
@@ -7019,6 +7272,7 @@ func rewriteValueMIPS_OpOrB_0(v *Value) bool {
 	// cond:
 	// result: (OR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSOR)
@@ -7061,6 +7315,7 @@ func rewriteValueMIPS_OpRsh16Ux16_0(v *Value) bool {
 	// result: (CMOVZ (SRL <t> (ZeroExt16to32 x) (ZeroExt16to32 y) ) (MOVWconst [0]) (SGTUconst [32] (ZeroExt16to32 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSCMOVZ)
@@ -7094,6 +7349,7 @@ func rewriteValueMIPS_OpRsh16Ux32_0(v *Value) bool {
 	// result: (CMOVZ (SRL <t> (ZeroExt16to32 x) y) (MOVWconst [0]) (SGTUconst [32] y))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSCMOVZ)
@@ -7122,6 +7378,7 @@ func rewriteValueMIPS_OpRsh16Ux64_0(v *Value) bool {
 	// cond: uint32(c) < 16
 	// result: (SRLconst (SLLconst <typ.UInt32> x [16]) [c+16])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -7143,6 +7400,7 @@ func rewriteValueMIPS_OpRsh16Ux64_0(v *Value) bool {
 	// cond: uint32(c) >= 16
 	// result: (MOVWconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -7167,6 +7425,7 @@ func rewriteValueMIPS_OpRsh16Ux8_0(v *Value) bool {
 	// result: (CMOVZ (SRL <t> (ZeroExt16to32 x) (ZeroExt8to32 y) ) (MOVWconst [0]) (SGTUconst [32] (ZeroExt8to32 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSCMOVZ)
@@ -7199,6 +7458,7 @@ func rewriteValueMIPS_OpRsh16x16_0(v *Value) bool {
 	// cond:
 	// result: (SRA (SignExt16to32 x) ( CMOVZ <typ.UInt32> (ZeroExt16to32 y) (MOVWconst [-1]) (SGTUconst [32] (ZeroExt16to32 y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSRA)
@@ -7231,6 +7491,7 @@ func rewriteValueMIPS_OpRsh16x32_0(v *Value) bool {
 	// cond:
 	// result: (SRA (SignExt16to32 x) ( CMOVZ <typ.UInt32> y (MOVWconst [-1]) (SGTUconst [32] y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSRA)
@@ -7259,6 +7520,7 @@ func rewriteValueMIPS_OpRsh16x64_0(v *Value) bool {
 	// cond: uint32(c) < 16
 	// result: (SRAconst (SLLconst <typ.UInt32> x [16]) [c+16])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -7280,6 +7542,7 @@ func rewriteValueMIPS_OpRsh16x64_0(v *Value) bool {
 	// cond: uint32(c) >= 16
 	// result: (SRAconst (SLLconst <typ.UInt32> x [16]) [31])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -7308,6 +7571,7 @@ func rewriteValueMIPS_OpRsh16x8_0(v *Value) bool {
 	// cond:
 	// result: (SRA (SignExt16to32 x) ( CMOVZ <typ.UInt32> (ZeroExt8to32 y) (MOVWconst [-1]) (SGTUconst [32] (ZeroExt8to32 y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSRA)
@@ -7341,6 +7605,7 @@ func rewriteValueMIPS_OpRsh32Ux16_0(v *Value) bool {
 	// result: (CMOVZ (SRL <t> x (ZeroExt16to32 y) ) (MOVWconst [0]) (SGTUconst [32] (ZeroExt16to32 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSCMOVZ)
@@ -7372,6 +7637,7 @@ func rewriteValueMIPS_OpRsh32Ux32_0(v *Value) bool {
 	// result: (CMOVZ (SRL <t> x y) (MOVWconst [0]) (SGTUconst [32] y))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSCMOVZ)
@@ -7394,6 +7660,7 @@ func rewriteValueMIPS_OpRsh32Ux64_0(v *Value) bool {
 	// cond: uint32(c) < 32
 	// result: (SRLconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -7412,6 +7679,7 @@ func rewriteValueMIPS_OpRsh32Ux64_0(v *Value) bool {
 	// cond: uint32(c) >= 32
 	// result: (MOVWconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -7436,6 +7704,7 @@ func rewriteValueMIPS_OpRsh32Ux8_0(v *Value) bool {
 	// result: (CMOVZ (SRL <t> x (ZeroExt8to32 y) ) (MOVWconst [0]) (SGTUconst [32] (ZeroExt8to32 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSCMOVZ)
@@ -7466,6 +7735,7 @@ func rewriteValueMIPS_OpRsh32x16_0(v *Value) bool {
 	// cond:
 	// result: (SRA x ( CMOVZ <typ.UInt32> (ZeroExt16to32 y) (MOVWconst [-1]) (SGTUconst [32] (ZeroExt16to32 y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSRA)
@@ -7496,6 +7766,7 @@ func rewriteValueMIPS_OpRsh32x32_0(v *Value) bool {
 	// cond:
 	// result: (SRA x ( CMOVZ <typ.UInt32> y (MOVWconst [-1]) (SGTUconst [32] y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSRA)
@@ -7518,6 +7789,7 @@ func rewriteValueMIPS_OpRsh32x64_0(v *Value) bool {
 	// cond: uint32(c) < 32
 	// result: (SRAconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -7536,6 +7808,7 @@ func rewriteValueMIPS_OpRsh32x64_0(v *Value) bool {
 	// cond: uint32(c) >= 32
 	// result: (SRAconst x [31])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -7561,6 +7834,7 @@ func rewriteValueMIPS_OpRsh32x8_0(v *Value) bool {
 	// cond:
 	// result: (SRA x ( CMOVZ <typ.UInt32> (ZeroExt8to32 y) (MOVWconst [-1]) (SGTUconst [32] (ZeroExt8to32 y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSRA)
@@ -7592,6 +7866,7 @@ func rewriteValueMIPS_OpRsh8Ux16_0(v *Value) bool {
 	// result: (CMOVZ (SRL <t> (ZeroExt8to32 x) (ZeroExt16to32 y) ) (MOVWconst [0]) (SGTUconst [32] (ZeroExt16to32 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSCMOVZ)
@@ -7625,6 +7900,7 @@ func rewriteValueMIPS_OpRsh8Ux32_0(v *Value) bool {
 	// result: (CMOVZ (SRL <t> (ZeroExt8to32 x) y) (MOVWconst [0]) (SGTUconst [32] y))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSCMOVZ)
@@ -7653,6 +7929,7 @@ func rewriteValueMIPS_OpRsh8Ux64_0(v *Value) bool {
 	// cond: uint32(c) < 8
 	// result: (SRLconst (SLLconst <typ.UInt32> x [24]) [c+24])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -7674,6 +7951,7 @@ func rewriteValueMIPS_OpRsh8Ux64_0(v *Value) bool {
 	// cond: uint32(c) >= 8
 	// result: (MOVWconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -7698,6 +7976,7 @@ func rewriteValueMIPS_OpRsh8Ux8_0(v *Value) bool {
 	// result: (CMOVZ (SRL <t> (ZeroExt8to32 x) (ZeroExt8to32 y) ) (MOVWconst [0]) (SGTUconst [32] (ZeroExt8to32 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSCMOVZ)
@@ -7730,6 +8009,7 @@ func rewriteValueMIPS_OpRsh8x16_0(v *Value) bool {
 	// cond:
 	// result: (SRA (SignExt16to32 x) ( CMOVZ <typ.UInt32> (ZeroExt16to32 y) (MOVWconst [-1]) (SGTUconst [32] (ZeroExt16to32 y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSRA)
@@ -7762,6 +8042,7 @@ func rewriteValueMIPS_OpRsh8x32_0(v *Value) bool {
 	// cond:
 	// result: (SRA (SignExt16to32 x) ( CMOVZ <typ.UInt32> y (MOVWconst [-1]) (SGTUconst [32] y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSRA)
@@ -7790,6 +8071,7 @@ func rewriteValueMIPS_OpRsh8x64_0(v *Value) bool {
 	// cond: uint32(c) < 8
 	// result: (SRAconst (SLLconst <typ.UInt32> x [24]) [c+24])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -7811,6 +8093,7 @@ func rewriteValueMIPS_OpRsh8x64_0(v *Value) bool {
 	// cond: uint32(c) >= 8
 	// result: (SRAconst (SLLconst <typ.UInt32> x [24]) [31])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -7839,6 +8122,7 @@ func rewriteValueMIPS_OpRsh8x8_0(v *Value) bool {
 	// cond:
 	// result: (SRA (SignExt16to32 x) ( CMOVZ <typ.UInt32> (ZeroExt8to32 y) (MOVWconst [-1]) (SGTUconst [32] (ZeroExt8to32 y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSRA)
@@ -7876,6 +8160,7 @@ func rewriteValueMIPS_OpSelect0_0(v *Value) bool {
 			break
 		}
 		t := v_0.Type
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpMIPSADD)
@@ -7893,6 +8178,7 @@ func rewriteValueMIPS_OpSelect0_0(v *Value) bool {
 			break
 		}
 		t := v_0.Type
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpMIPSSUB)
@@ -7909,6 +8195,7 @@ func rewriteValueMIPS_OpSelect0_0(v *Value) bool {
 		if v_0.Op != OpMIPSMULTU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpMIPSMOVWconst {
 			break
@@ -7928,6 +8215,7 @@ func rewriteValueMIPS_OpSelect0_0(v *Value) bool {
 		if v_0.Op != OpMIPSMULTU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpMIPSMOVWconst {
 			break
@@ -7947,6 +8235,7 @@ func rewriteValueMIPS_OpSelect0_0(v *Value) bool {
 		if v_0.Op != OpMIPSMULTU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpMIPSMOVWconst {
 			break
@@ -7966,6 +8255,7 @@ func rewriteValueMIPS_OpSelect0_0(v *Value) bool {
 		if v_0.Op != OpMIPSMULTU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpMIPSMOVWconst {
 			break
@@ -7985,6 +8275,7 @@ func rewriteValueMIPS_OpSelect0_0(v *Value) bool {
 		if v_0.Op != OpMIPSMULTU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpMIPSMOVWconst {
 			break
@@ -8012,6 +8303,7 @@ func rewriteValueMIPS_OpSelect0_0(v *Value) bool {
 		if v_0.Op != OpMIPSMULTU {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpMIPSMOVWconst {
@@ -8039,6 +8331,7 @@ func rewriteValueMIPS_OpSelect0_0(v *Value) bool {
 		if v_0.Op != OpMIPSMULTU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpMIPSMOVWconst {
 			break
@@ -8061,6 +8354,7 @@ func rewriteValueMIPS_OpSelect0_0(v *Value) bool {
 		if v_0.Op != OpMIPSMULTU {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpMIPSMOVWconst {
@@ -8086,6 +8380,7 @@ func rewriteValueMIPS_OpSelect0_10(v *Value) bool {
 		if v_0.Op != OpMIPSMULTU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpMIPSMOVWconst {
 			break
@@ -8108,6 +8403,7 @@ func rewriteValueMIPS_OpSelect0_10(v *Value) bool {
 		if v_0.Op != OpMIPSMULTU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpMIPSMOVWconst {
 			break
@@ -8130,6 +8426,7 @@ func rewriteValueMIPS_OpSelect0_10(v *Value) bool {
 		if v_0.Op != OpMIPSDIV {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpMIPSMOVWconst {
 			break
@@ -8152,6 +8449,7 @@ func rewriteValueMIPS_OpSelect0_10(v *Value) bool {
 		if v_0.Op != OpMIPSDIVU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpMIPSMOVWconst {
 			break
@@ -8182,6 +8480,7 @@ func rewriteValueMIPS_OpSelect1_0(v *Value) bool {
 			break
 		}
 		t := v_0.Type
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpMIPSSGTU)
@@ -8202,6 +8501,7 @@ func rewriteValueMIPS_OpSelect1_0(v *Value) bool {
 			break
 		}
 		t := v_0.Type
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpMIPSSGTU)
@@ -8221,6 +8521,7 @@ func rewriteValueMIPS_OpSelect1_0(v *Value) bool {
 		if v_0.Op != OpMIPSMULTU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpMIPSMOVWconst {
 			break
@@ -8240,6 +8541,7 @@ func rewriteValueMIPS_OpSelect1_0(v *Value) bool {
 		if v_0.Op != OpMIPSMULTU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpMIPSMOVWconst {
 			break
@@ -8259,6 +8561,7 @@ func rewriteValueMIPS_OpSelect1_0(v *Value) bool {
 		if v_0.Op != OpMIPSMULTU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpMIPSMOVWconst {
 			break
@@ -8280,6 +8583,7 @@ func rewriteValueMIPS_OpSelect1_0(v *Value) bool {
 		if v_0.Op != OpMIPSMULTU {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpMIPSMOVWconst {
@@ -8301,6 +8605,7 @@ func rewriteValueMIPS_OpSelect1_0(v *Value) bool {
 		if v_0.Op != OpMIPSMULTU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpMIPSMOVWconst {
 			break
@@ -8322,6 +8627,7 @@ func rewriteValueMIPS_OpSelect1_0(v *Value) bool {
 		if v_0.Op != OpMIPSMULTU {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpMIPSMOVWconst {
@@ -8343,6 +8649,7 @@ func rewriteValueMIPS_OpSelect1_0(v *Value) bool {
 		if v_0.Op != OpMIPSMULTU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpMIPSMOVWconst {
 			break
@@ -8365,6 +8672,7 @@ func rewriteValueMIPS_OpSelect1_0(v *Value) bool {
 		if v_0.Op != OpMIPSMULTU {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpMIPSMOVWconst {
@@ -8390,6 +8698,7 @@ func rewriteValueMIPS_OpSelect1_10(v *Value) bool {
 		if v_0.Op != OpMIPSMULTU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpMIPSMOVWconst {
 			break
@@ -8412,6 +8721,7 @@ func rewriteValueMIPS_OpSelect1_10(v *Value) bool {
 		if v_0.Op != OpMIPSMULTU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpMIPSMOVWconst {
 			break
@@ -8434,6 +8744,7 @@ func rewriteValueMIPS_OpSelect1_10(v *Value) bool {
 		if v_0.Op != OpMIPSDIV {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpMIPSMOVWconst {
 			break
@@ -8456,6 +8767,7 @@ func rewriteValueMIPS_OpSelect1_10(v *Value) bool {
 		if v_0.Op != OpMIPSDIVU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpMIPSMOVWconst {
 			break
@@ -8566,6 +8878,7 @@ func rewriteValueMIPS_OpStore_0(v *Value) bool {
 	// result: (MOVBstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -8583,6 +8896,7 @@ func rewriteValueMIPS_OpStore_0(v *Value) bool {
 	// result: (MOVHstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -8600,6 +8914,7 @@ func rewriteValueMIPS_OpStore_0(v *Value) bool {
 	// result: (MOVWstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -8617,6 +8932,7 @@ func rewriteValueMIPS_OpStore_0(v *Value) bool {
 	// result: (MOVFstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -8634,6 +8950,7 @@ func rewriteValueMIPS_OpStore_0(v *Value) bool {
 	// result: (MOVDstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -8653,6 +8970,7 @@ func rewriteValueMIPS_OpSub16_0(v *Value) bool {
 	// cond:
 	// result: (SUB x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSUB)
@@ -8666,6 +8984,7 @@ func rewriteValueMIPS_OpSub32_0(v *Value) bool {
 	// cond:
 	// result: (SUB x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSUB)
@@ -8679,6 +8998,7 @@ func rewriteValueMIPS_OpSub32F_0(v *Value) bool {
 	// cond:
 	// result: (SUBF x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSUBF)
@@ -8695,6 +9015,7 @@ func rewriteValueMIPS_OpSub32withcarry_0(v *Value) bool {
 	// result: (SUB (SUB <t> x y) c)
 	for {
 		t := v.Type
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		c := v.Args[2]
@@ -8712,6 +9033,7 @@ func rewriteValueMIPS_OpSub64F_0(v *Value) bool {
 	// cond:
 	// result: (SUBD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSUBD)
@@ -8725,6 +9047,7 @@ func rewriteValueMIPS_OpSub8_0(v *Value) bool {
 	// cond:
 	// result: (SUB x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSUB)
@@ -8738,6 +9061,7 @@ func rewriteValueMIPS_OpSubPtr_0(v *Value) bool {
 	// cond:
 	// result: (SUB x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSSUB)
@@ -8787,6 +9111,7 @@ func rewriteValueMIPS_OpXor16_0(v *Value) bool {
 	// cond:
 	// result: (XOR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSXOR)
@@ -8800,6 +9125,7 @@ func rewriteValueMIPS_OpXor32_0(v *Value) bool {
 	// cond:
 	// result: (XOR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSXOR)
@@ -8813,6 +9139,7 @@ func rewriteValueMIPS_OpXor8_0(v *Value) bool {
 	// cond:
 	// result: (XOR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPSXOR)
@@ -8833,6 +9160,7 @@ func rewriteValueMIPS_OpZero_0(v *Value) bool {
 		if v.AuxInt != 0 {
 			break
 		}
+		_ = v.Args[1]
 		mem := v.Args[1]
 		v.reset(OpCopy)
 		v.Type = mem.Type
@@ -8846,6 +9174,7 @@ func rewriteValueMIPS_OpZero_0(v *Value) bool {
 		if v.AuxInt != 1 {
 			break
 		}
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpMIPSMOVBstore)
@@ -8864,6 +9193,7 @@ func rewriteValueMIPS_OpZero_0(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.(*types.Type).Alignment()%2 == 0) {
@@ -8884,6 +9214,7 @@ func rewriteValueMIPS_OpZero_0(v *Value) bool {
 		if v.AuxInt != 2 {
 			break
 		}
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpMIPSMOVBstore)
@@ -8910,6 +9241,7 @@ func rewriteValueMIPS_OpZero_0(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.(*types.Type).Alignment()%4 == 0) {
@@ -8931,6 +9263,7 @@ func rewriteValueMIPS_OpZero_0(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.(*types.Type).Alignment()%2 == 0) {
@@ -8959,6 +9292,7 @@ func rewriteValueMIPS_OpZero_0(v *Value) bool {
 		if v.AuxInt != 4 {
 			break
 		}
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpMIPSMOVBstore)
@@ -8998,6 +9332,7 @@ func rewriteValueMIPS_OpZero_0(v *Value) bool {
 		if v.AuxInt != 3 {
 			break
 		}
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpMIPSMOVBstore)
@@ -9031,6 +9366,7 @@ func rewriteValueMIPS_OpZero_0(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.(*types.Type).Alignment()%2 == 0) {
@@ -9067,6 +9403,7 @@ func rewriteValueMIPS_OpZero_0(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.(*types.Type).Alignment()%4 == 0) {
@@ -9105,6 +9442,7 @@ func rewriteValueMIPS_OpZero_10(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.(*types.Type).Alignment()%4 == 0) {
@@ -9141,6 +9479,7 @@ func rewriteValueMIPS_OpZero_10(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.(*types.Type).Alignment()%4 == 0) {
@@ -9182,6 +9521,7 @@ func rewriteValueMIPS_OpZero_10(v *Value) bool {
 	for {
 		s := v.AuxInt
 		t := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(s > 16 || t.(*types.Type).Alignment()%4 != 0) {
@@ -9302,6 +9642,7 @@ func rewriteBlockMIPS(b *Block) bool {
 			if cmp.Op != OpMIPSSGT {
 				break
 			}
+			_ = cmp.Args[1]
 			b.Kind = BlockMIPSNE
 			b.SetControl(cmp)
 			return true
@@ -9321,6 +9662,7 @@ func rewriteBlockMIPS(b *Block) bool {
 			if cmp.Op != OpMIPSSGTU {
 				break
 			}
+			_ = cmp.Args[1]
 			b.Kind = BlockMIPSNE
 			b.SetControl(cmp)
 			return true
@@ -9681,6 +10023,7 @@ func rewriteBlockMIPS(b *Block) bool {
 			if cmp.Op != OpMIPSSGT {
 				break
 			}
+			_ = cmp.Args[1]
 			b.Kind = BlockMIPSEQ
 			b.SetControl(cmp)
 			return true
@@ -9700,6 +10043,7 @@ func rewriteBlockMIPS(b *Block) bool {
 			if cmp.Op != OpMIPSSGTU {
 				break
 			}
+			_ = cmp.Args[1]
 			b.Kind = BlockMIPSEQ
 			b.SetControl(cmp)
 			return true
diff --git a/src/cmd/compile/internal/ssa/rewriteMIPS64.go b/src/cmd/compile/internal/ssa/rewriteMIPS64.go
index 59f4659164..82919a1d31 100644
--- a/src/cmd/compile/internal/ssa/rewriteMIPS64.go
+++ b/src/cmd/compile/internal/ssa/rewriteMIPS64.go
@@ -577,6 +577,7 @@ func rewriteValueMIPS64_OpAdd16_0(v *Value) bool {
 	// cond:
 	// result: (ADDV x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64ADDV)
@@ -590,6 +591,7 @@ func rewriteValueMIPS64_OpAdd32_0(v *Value) bool {
 	// cond:
 	// result: (ADDV x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64ADDV)
@@ -603,6 +605,7 @@ func rewriteValueMIPS64_OpAdd32F_0(v *Value) bool {
 	// cond:
 	// result: (ADDF x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64ADDF)
@@ -616,6 +619,7 @@ func rewriteValueMIPS64_OpAdd64_0(v *Value) bool {
 	// cond:
 	// result: (ADDV x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64ADDV)
@@ -629,6 +633,7 @@ func rewriteValueMIPS64_OpAdd64F_0(v *Value) bool {
 	// cond:
 	// result: (ADDD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64ADDD)
@@ -642,6 +647,7 @@ func rewriteValueMIPS64_OpAdd8_0(v *Value) bool {
 	// cond:
 	// result: (ADDV x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64ADDV)
@@ -655,6 +661,7 @@ func rewriteValueMIPS64_OpAddPtr_0(v *Value) bool {
 	// cond:
 	// result: (ADDV x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64ADDV)
@@ -681,6 +688,7 @@ func rewriteValueMIPS64_OpAnd16_0(v *Value) bool {
 	// cond:
 	// result: (AND x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -694,6 +702,7 @@ func rewriteValueMIPS64_OpAnd32_0(v *Value) bool {
 	// cond:
 	// result: (AND x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -707,6 +716,7 @@ func rewriteValueMIPS64_OpAnd64_0(v *Value) bool {
 	// cond:
 	// result: (AND x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -720,6 +730,7 @@ func rewriteValueMIPS64_OpAnd8_0(v *Value) bool {
 	// cond:
 	// result: (AND x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -733,6 +744,7 @@ func rewriteValueMIPS64_OpAndB_0(v *Value) bool {
 	// cond:
 	// result: (AND x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -749,6 +761,7 @@ func rewriteValueMIPS64_OpAvg64u_0(v *Value) bool {
 	// result: (ADDV (SRLVconst <t> (SUBV <t> x y) [1]) y)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64ADDV)
@@ -769,6 +782,7 @@ func rewriteValueMIPS64_OpClosureCall_0(v *Value) bool {
 	// result: (CALLclosure [argwid] entry closure mem)
 	for {
 		argwid := v.AuxInt
+		_ = v.Args[2]
 		entry := v.Args[0]
 		closure := v.Args[1]
 		mem := v.Args[2]
@@ -944,6 +958,7 @@ func rewriteValueMIPS64_OpConvert_0(v *Value) bool {
 	// cond:
 	// result: (MOVVconvert x mem)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpMIPS64MOVVconvert)
@@ -1071,6 +1086,7 @@ func rewriteValueMIPS64_OpDiv16_0(v *Value) bool {
 	// cond:
 	// result: (Select1 (DIVV (SignExt16to64 x) (SignExt16to64 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect1)
@@ -1094,6 +1110,7 @@ func rewriteValueMIPS64_OpDiv16u_0(v *Value) bool {
 	// cond:
 	// result: (Select1 (DIVVU (ZeroExt16to64 x) (ZeroExt16to64 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect1)
@@ -1117,6 +1134,7 @@ func rewriteValueMIPS64_OpDiv32_0(v *Value) bool {
 	// cond:
 	// result: (Select1 (DIVV (SignExt32to64 x) (SignExt32to64 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect1)
@@ -1136,6 +1154,7 @@ func rewriteValueMIPS64_OpDiv32F_0(v *Value) bool {
 	// cond:
 	// result: (DIVF x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64DIVF)
@@ -1153,6 +1172,7 @@ func rewriteValueMIPS64_OpDiv32u_0(v *Value) bool {
 	// cond:
 	// result: (Select1 (DIVVU (ZeroExt32to64 x) (ZeroExt32to64 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect1)
@@ -1176,6 +1196,7 @@ func rewriteValueMIPS64_OpDiv64_0(v *Value) bool {
 	// cond:
 	// result: (Select1 (DIVV x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect1)
@@ -1191,6 +1212,7 @@ func rewriteValueMIPS64_OpDiv64F_0(v *Value) bool {
 	// cond:
 	// result: (DIVD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64DIVD)
@@ -1208,6 +1230,7 @@ func rewriteValueMIPS64_OpDiv64u_0(v *Value) bool {
 	// cond:
 	// result: (Select1 (DIVVU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect1)
@@ -1227,6 +1250,7 @@ func rewriteValueMIPS64_OpDiv8_0(v *Value) bool {
 	// cond:
 	// result: (Select1 (DIVV (SignExt8to64 x) (SignExt8to64 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect1)
@@ -1250,6 +1274,7 @@ func rewriteValueMIPS64_OpDiv8u_0(v *Value) bool {
 	// cond:
 	// result: (Select1 (DIVVU (ZeroExt8to64 x) (ZeroExt8to64 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect1)
@@ -1273,6 +1298,7 @@ func rewriteValueMIPS64_OpEq16_0(v *Value) bool {
 	// cond:
 	// result: (SGTU (MOVVconst [1]) (XOR (ZeroExt16to64 x) (ZeroExt16to64 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SGTU)
@@ -1299,6 +1325,7 @@ func rewriteValueMIPS64_OpEq32_0(v *Value) bool {
 	// cond:
 	// result: (SGTU (MOVVconst [1]) (XOR (ZeroExt32to64 x) (ZeroExt32to64 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SGTU)
@@ -1323,6 +1350,7 @@ func rewriteValueMIPS64_OpEq32F_0(v *Value) bool {
 	// cond:
 	// result: (FPFlagTrue (CMPEQF x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64FPFlagTrue)
@@ -1342,6 +1370,7 @@ func rewriteValueMIPS64_OpEq64_0(v *Value) bool {
 	// cond:
 	// result: (SGTU (MOVVconst [1]) (XOR x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SGTU)
@@ -1362,6 +1391,7 @@ func rewriteValueMIPS64_OpEq64F_0(v *Value) bool {
 	// cond:
 	// result: (FPFlagTrue (CMPEQD x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64FPFlagTrue)
@@ -1381,6 +1411,7 @@ func rewriteValueMIPS64_OpEq8_0(v *Value) bool {
 	// cond:
 	// result: (SGTU (MOVVconst [1]) (XOR (ZeroExt8to64 x) (ZeroExt8to64 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SGTU)
@@ -1407,6 +1438,7 @@ func rewriteValueMIPS64_OpEqB_0(v *Value) bool {
 	// cond:
 	// result: (XOR (MOVVconst [1]) (XOR <typ.Bool> x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64XOR)
@@ -1429,6 +1461,7 @@ func rewriteValueMIPS64_OpEqPtr_0(v *Value) bool {
 	// cond:
 	// result: (SGTU (MOVVconst [1]) (XOR x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SGTU)
@@ -1451,6 +1484,7 @@ func rewriteValueMIPS64_OpGeq16_0(v *Value) bool {
 	// cond:
 	// result: (XOR (MOVVconst [1]) (SGT (SignExt16to64 y) (SignExt16to64 x)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64XOR)
@@ -1477,6 +1511,7 @@ func rewriteValueMIPS64_OpGeq16U_0(v *Value) bool {
 	// cond:
 	// result: (XOR (MOVVconst [1]) (SGTU (ZeroExt16to64 y) (ZeroExt16to64 x)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64XOR)
@@ -1503,6 +1538,7 @@ func rewriteValueMIPS64_OpGeq32_0(v *Value) bool {
 	// cond:
 	// result: (XOR (MOVVconst [1]) (SGT (SignExt32to64 y) (SignExt32to64 x)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64XOR)
@@ -1527,6 +1563,7 @@ func rewriteValueMIPS64_OpGeq32F_0(v *Value) bool {
 	// cond:
 	// result: (FPFlagTrue (CMPGEF x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64FPFlagTrue)
@@ -1546,6 +1583,7 @@ func rewriteValueMIPS64_OpGeq32U_0(v *Value) bool {
 	// cond:
 	// result: (XOR (MOVVconst [1]) (SGTU (ZeroExt32to64 y) (ZeroExt32to64 x)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64XOR)
@@ -1572,6 +1610,7 @@ func rewriteValueMIPS64_OpGeq64_0(v *Value) bool {
 	// cond:
 	// result: (XOR (MOVVconst [1]) (SGT y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64XOR)
@@ -1592,6 +1631,7 @@ func rewriteValueMIPS64_OpGeq64F_0(v *Value) bool {
 	// cond:
 	// result: (FPFlagTrue (CMPGED x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64FPFlagTrue)
@@ -1611,6 +1651,7 @@ func rewriteValueMIPS64_OpGeq64U_0(v *Value) bool {
 	// cond:
 	// result: (XOR (MOVVconst [1]) (SGTU y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64XOR)
@@ -1633,6 +1674,7 @@ func rewriteValueMIPS64_OpGeq8_0(v *Value) bool {
 	// cond:
 	// result: (XOR (MOVVconst [1]) (SGT (SignExt8to64 y) (SignExt8to64 x)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64XOR)
@@ -1659,6 +1701,7 @@ func rewriteValueMIPS64_OpGeq8U_0(v *Value) bool {
 	// cond:
 	// result: (XOR (MOVVconst [1]) (SGTU (ZeroExt8to64 y) (ZeroExt8to64 x)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64XOR)
@@ -1694,6 +1737,7 @@ func rewriteValueMIPS64_OpGreater16_0(v *Value) bool {
 	// cond:
 	// result: (SGT (SignExt16to64 x) (SignExt16to64 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SGT)
@@ -1715,6 +1759,7 @@ func rewriteValueMIPS64_OpGreater16U_0(v *Value) bool {
 	// cond:
 	// result: (SGTU (ZeroExt16to64 x) (ZeroExt16to64 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SGTU)
@@ -1736,6 +1781,7 @@ func rewriteValueMIPS64_OpGreater32_0(v *Value) bool {
 	// cond:
 	// result: (SGT (SignExt32to64 x) (SignExt32to64 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SGT)
@@ -1755,6 +1801,7 @@ func rewriteValueMIPS64_OpGreater32F_0(v *Value) bool {
 	// cond:
 	// result: (FPFlagTrue (CMPGTF x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64FPFlagTrue)
@@ -1774,6 +1821,7 @@ func rewriteValueMIPS64_OpGreater32U_0(v *Value) bool {
 	// cond:
 	// result: (SGTU (ZeroExt32to64 x) (ZeroExt32to64 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SGTU)
@@ -1791,6 +1839,7 @@ func rewriteValueMIPS64_OpGreater64_0(v *Value) bool {
 	// cond:
 	// result: (SGT x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SGT)
@@ -1806,6 +1855,7 @@ func rewriteValueMIPS64_OpGreater64F_0(v *Value) bool {
 	// cond:
 	// result: (FPFlagTrue (CMPGTD x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64FPFlagTrue)
@@ -1821,6 +1871,7 @@ func rewriteValueMIPS64_OpGreater64U_0(v *Value) bool {
 	// cond:
 	// result: (SGTU x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SGTU)
@@ -1838,6 +1889,7 @@ func rewriteValueMIPS64_OpGreater8_0(v *Value) bool {
 	// cond:
 	// result: (SGT (SignExt8to64 x) (SignExt8to64 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SGT)
@@ -1859,6 +1911,7 @@ func rewriteValueMIPS64_OpGreater8U_0(v *Value) bool {
 	// cond:
 	// result: (SGTU (ZeroExt8to64 x) (ZeroExt8to64 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SGTU)
@@ -1880,6 +1933,7 @@ func rewriteValueMIPS64_OpHmul32_0(v *Value) bool {
 	// cond:
 	// result: (SRAVconst (Select1 <typ.Int64> (MULV (SignExt32to64 x) (SignExt32to64 y))) [32])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SRAVconst)
@@ -1906,6 +1960,7 @@ func rewriteValueMIPS64_OpHmul32u_0(v *Value) bool {
 	// cond:
 	// result: (SRLVconst (Select1 <typ.UInt64> (MULVU (ZeroExt32to64 x) (ZeroExt32to64 y))) [32])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SRLVconst)
@@ -1932,6 +1987,7 @@ func rewriteValueMIPS64_OpHmul64_0(v *Value) bool {
 	// cond:
 	// result: (Select0 (MULV x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect0)
@@ -1951,6 +2007,7 @@ func rewriteValueMIPS64_OpHmul64u_0(v *Value) bool {
 	// cond:
 	// result: (Select0 (MULVU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect0)
@@ -1967,6 +2024,7 @@ func rewriteValueMIPS64_OpInterCall_0(v *Value) bool {
 	// result: (CALLinter [argwid] entry mem)
 	for {
 		argwid := v.AuxInt
+		_ = v.Args[1]
 		entry := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpMIPS64CALLinter)
@@ -1981,6 +2039,7 @@ func rewriteValueMIPS64_OpIsInBounds_0(v *Value) bool {
 	// cond:
 	// result: (SGTU len idx)
 	for {
+		_ = v.Args[1]
 		idx := v.Args[0]
 		len := v.Args[1]
 		v.reset(OpMIPS64SGTU)
@@ -2016,6 +2075,7 @@ func rewriteValueMIPS64_OpIsSliceInBounds_0(v *Value) bool {
 	// cond:
 	// result: (XOR (MOVVconst [1]) (SGTU idx len))
 	for {
+		_ = v.Args[1]
 		idx := v.Args[0]
 		len := v.Args[1]
 		v.reset(OpMIPS64XOR)
@@ -2038,6 +2098,7 @@ func rewriteValueMIPS64_OpLeq16_0(v *Value) bool {
 	// cond:
 	// result: (XOR (MOVVconst [1]) (SGT (SignExt16to64 x) (SignExt16to64 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64XOR)
@@ -2064,6 +2125,7 @@ func rewriteValueMIPS64_OpLeq16U_0(v *Value) bool {
 	// cond:
 	// result: (XOR (MOVVconst [1]) (SGTU (ZeroExt16to64 x) (ZeroExt16to64 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64XOR)
@@ -2090,6 +2152,7 @@ func rewriteValueMIPS64_OpLeq32_0(v *Value) bool {
 	// cond:
 	// result: (XOR (MOVVconst [1]) (SGT (SignExt32to64 x) (SignExt32to64 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64XOR)
@@ -2114,6 +2177,7 @@ func rewriteValueMIPS64_OpLeq32F_0(v *Value) bool {
 	// cond:
 	// result: (FPFlagTrue (CMPGEF y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64FPFlagTrue)
@@ -2133,6 +2197,7 @@ func rewriteValueMIPS64_OpLeq32U_0(v *Value) bool {
 	// cond:
 	// result: (XOR (MOVVconst [1]) (SGTU (ZeroExt32to64 x) (ZeroExt32to64 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64XOR)
@@ -2159,6 +2224,7 @@ func rewriteValueMIPS64_OpLeq64_0(v *Value) bool {
 	// cond:
 	// result: (XOR (MOVVconst [1]) (SGT x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64XOR)
@@ -2179,6 +2245,7 @@ func rewriteValueMIPS64_OpLeq64F_0(v *Value) bool {
 	// cond:
 	// result: (FPFlagTrue (CMPGED y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64FPFlagTrue)
@@ -2198,6 +2265,7 @@ func rewriteValueMIPS64_OpLeq64U_0(v *Value) bool {
 	// cond:
 	// result: (XOR (MOVVconst [1]) (SGTU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64XOR)
@@ -2220,6 +2288,7 @@ func rewriteValueMIPS64_OpLeq8_0(v *Value) bool {
 	// cond:
 	// result: (XOR (MOVVconst [1]) (SGT (SignExt8to64 x) (SignExt8to64 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64XOR)
@@ -2246,6 +2315,7 @@ func rewriteValueMIPS64_OpLeq8U_0(v *Value) bool {
 	// cond:
 	// result: (XOR (MOVVconst [1]) (SGTU (ZeroExt8to64 x) (ZeroExt8to64 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64XOR)
@@ -2272,6 +2342,7 @@ func rewriteValueMIPS64_OpLess16_0(v *Value) bool {
 	// cond:
 	// result: (SGT (SignExt16to64 y) (SignExt16to64 x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SGT)
@@ -2293,6 +2364,7 @@ func rewriteValueMIPS64_OpLess16U_0(v *Value) bool {
 	// cond:
 	// result: (SGTU (ZeroExt16to64 y) (ZeroExt16to64 x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SGTU)
@@ -2314,6 +2386,7 @@ func rewriteValueMIPS64_OpLess32_0(v *Value) bool {
 	// cond:
 	// result: (SGT (SignExt32to64 y) (SignExt32to64 x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SGT)
@@ -2333,6 +2406,7 @@ func rewriteValueMIPS64_OpLess32F_0(v *Value) bool {
 	// cond:
 	// result: (FPFlagTrue (CMPGTF y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64FPFlagTrue)
@@ -2352,6 +2426,7 @@ func rewriteValueMIPS64_OpLess32U_0(v *Value) bool {
 	// cond:
 	// result: (SGTU (ZeroExt32to64 y) (ZeroExt32to64 x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SGTU)
@@ -2369,6 +2444,7 @@ func rewriteValueMIPS64_OpLess64_0(v *Value) bool {
 	// cond:
 	// result: (SGT y x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SGT)
@@ -2384,6 +2460,7 @@ func rewriteValueMIPS64_OpLess64F_0(v *Value) bool {
 	// cond:
 	// result: (FPFlagTrue (CMPGTD y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64FPFlagTrue)
@@ -2399,6 +2476,7 @@ func rewriteValueMIPS64_OpLess64U_0(v *Value) bool {
 	// cond:
 	// result: (SGTU y x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SGTU)
@@ -2416,6 +2494,7 @@ func rewriteValueMIPS64_OpLess8_0(v *Value) bool {
 	// cond:
 	// result: (SGT (SignExt8to64 y) (SignExt8to64 x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SGT)
@@ -2437,6 +2516,7 @@ func rewriteValueMIPS64_OpLess8U_0(v *Value) bool {
 	// cond:
 	// result: (SGTU (ZeroExt8to64 y) (ZeroExt8to64 x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SGTU)
@@ -2455,6 +2535,7 @@ func rewriteValueMIPS64_OpLoad_0(v *Value) bool {
 	// result: (MOVBUload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.IsBoolean()) {
@@ -2470,6 +2551,7 @@ func rewriteValueMIPS64_OpLoad_0(v *Value) bool {
 	// result: (MOVBload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is8BitInt(t) && isSigned(t)) {
@@ -2485,6 +2567,7 @@ func rewriteValueMIPS64_OpLoad_0(v *Value) bool {
 	// result: (MOVBUload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is8BitInt(t) && !isSigned(t)) {
@@ -2500,6 +2583,7 @@ func rewriteValueMIPS64_OpLoad_0(v *Value) bool {
 	// result: (MOVHload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is16BitInt(t) && isSigned(t)) {
@@ -2515,6 +2599,7 @@ func rewriteValueMIPS64_OpLoad_0(v *Value) bool {
 	// result: (MOVHUload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is16BitInt(t) && !isSigned(t)) {
@@ -2530,6 +2615,7 @@ func rewriteValueMIPS64_OpLoad_0(v *Value) bool {
 	// result: (MOVWload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is32BitInt(t) && isSigned(t)) {
@@ -2545,6 +2631,7 @@ func rewriteValueMIPS64_OpLoad_0(v *Value) bool {
 	// result: (MOVWUload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is32BitInt(t) && !isSigned(t)) {
@@ -2560,6 +2647,7 @@ func rewriteValueMIPS64_OpLoad_0(v *Value) bool {
 	// result: (MOVVload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is64BitInt(t) || isPtr(t)) {
@@ -2575,6 +2663,7 @@ func rewriteValueMIPS64_OpLoad_0(v *Value) bool {
 	// result: (MOVFload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is32BitFloat(t)) {
@@ -2590,6 +2679,7 @@ func rewriteValueMIPS64_OpLoad_0(v *Value) bool {
 	// result: (MOVDload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is64BitFloat(t)) {
@@ -2612,6 +2702,7 @@ func rewriteValueMIPS64_OpLsh16x16_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) (ZeroExt16to64 y))) (SLLV <t> x (ZeroExt16to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -2644,6 +2735,7 @@ func rewriteValueMIPS64_OpLsh16x32_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) (ZeroExt32to64 y))) (SLLV <t> x (ZeroExt32to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -2676,6 +2768,7 @@ func rewriteValueMIPS64_OpLsh16x64_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) y)) (SLLV <t> x y))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -2704,6 +2797,7 @@ func rewriteValueMIPS64_OpLsh16x8_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) (ZeroExt8to64  y))) (SLLV <t> x (ZeroExt8to64  y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -2736,6 +2830,7 @@ func rewriteValueMIPS64_OpLsh32x16_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) (ZeroExt16to64 y))) (SLLV <t> x (ZeroExt16to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -2768,6 +2863,7 @@ func rewriteValueMIPS64_OpLsh32x32_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) (ZeroExt32to64 y))) (SLLV <t> x (ZeroExt32to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -2800,6 +2896,7 @@ func rewriteValueMIPS64_OpLsh32x64_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) y)) (SLLV <t> x y))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -2828,6 +2925,7 @@ func rewriteValueMIPS64_OpLsh32x8_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) (ZeroExt8to64  y))) (SLLV <t> x (ZeroExt8to64  y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -2860,6 +2958,7 @@ func rewriteValueMIPS64_OpLsh64x16_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) (ZeroExt16to64 y))) (SLLV <t> x (ZeroExt16to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -2892,6 +2991,7 @@ func rewriteValueMIPS64_OpLsh64x32_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) (ZeroExt32to64 y))) (SLLV <t> x (ZeroExt32to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -2924,6 +3024,7 @@ func rewriteValueMIPS64_OpLsh64x64_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) y)) (SLLV <t> x y))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -2952,6 +3053,7 @@ func rewriteValueMIPS64_OpLsh64x8_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) (ZeroExt8to64  y))) (SLLV <t> x (ZeroExt8to64  y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -2984,6 +3086,7 @@ func rewriteValueMIPS64_OpLsh8x16_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) (ZeroExt16to64 y))) (SLLV <t> x (ZeroExt16to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -3016,6 +3119,7 @@ func rewriteValueMIPS64_OpLsh8x32_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) (ZeroExt32to64 y))) (SLLV <t> x (ZeroExt32to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -3048,6 +3152,7 @@ func rewriteValueMIPS64_OpLsh8x64_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) y)) (SLLV <t> x y))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -3076,6 +3181,7 @@ func rewriteValueMIPS64_OpLsh8x8_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) (ZeroExt8to64  y))) (SLLV <t> x (ZeroExt8to64  y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -3103,6 +3209,7 @@ func rewriteValueMIPS64_OpMIPS64ADDV_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (ADDVconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPS64MOVVconst {
@@ -3121,6 +3228,7 @@ func rewriteValueMIPS64_OpMIPS64ADDV_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (ADDVconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64MOVVconst {
 			break
@@ -3139,6 +3247,7 @@ func rewriteValueMIPS64_OpMIPS64ADDV_0(v *Value) bool {
 	// cond:
 	// result: (SUBV x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPS64NEGV {
@@ -3154,6 +3263,7 @@ func rewriteValueMIPS64_OpMIPS64ADDV_0(v *Value) bool {
 	// cond:
 	// result: (SUBV x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64NEGV {
 			break
@@ -3258,6 +3368,7 @@ func rewriteValueMIPS64_OpMIPS64AND_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (ANDconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPS64MOVVconst {
@@ -3276,6 +3387,7 @@ func rewriteValueMIPS64_OpMIPS64AND_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (ANDconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64MOVVconst {
 			break
@@ -3294,6 +3406,7 @@ func rewriteValueMIPS64_OpMIPS64AND_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -3369,6 +3482,7 @@ func rewriteValueMIPS64_OpMIPS64MOVBUload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64ADDVconst {
 			break
@@ -3392,6 +3506,7 @@ func rewriteValueMIPS64_OpMIPS64MOVBUload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64MOVVaddr {
 			break
@@ -3421,6 +3536,7 @@ func rewriteValueMIPS64_OpMIPS64MOVBUreg_0(v *Value) bool {
 		if x.Op != OpMIPS64MOVBUload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpMIPS64MOVVreg)
 		v.AddArg(x)
 		return true
@@ -3459,6 +3575,7 @@ func rewriteValueMIPS64_OpMIPS64MOVBload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64ADDVconst {
 			break
@@ -3482,6 +3599,7 @@ func rewriteValueMIPS64_OpMIPS64MOVBload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64MOVVaddr {
 			break
@@ -3511,6 +3629,7 @@ func rewriteValueMIPS64_OpMIPS64MOVBreg_0(v *Value) bool {
 		if x.Op != OpMIPS64MOVBload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpMIPS64MOVVreg)
 		v.AddArg(x)
 		return true
@@ -3549,6 +3668,7 @@ func rewriteValueMIPS64_OpMIPS64MOVBstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64ADDVconst {
 			break
@@ -3574,6 +3694,7 @@ func rewriteValueMIPS64_OpMIPS64MOVBstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64MOVVaddr {
 			break
@@ -3600,6 +3721,7 @@ func rewriteValueMIPS64_OpMIPS64MOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPS64MOVVconst {
@@ -3622,6 +3744,7 @@ func rewriteValueMIPS64_OpMIPS64MOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPS64MOVBreg {
@@ -3643,6 +3766,7 @@ func rewriteValueMIPS64_OpMIPS64MOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPS64MOVBUreg {
@@ -3664,6 +3788,7 @@ func rewriteValueMIPS64_OpMIPS64MOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPS64MOVHreg {
@@ -3685,6 +3810,7 @@ func rewriteValueMIPS64_OpMIPS64MOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPS64MOVHUreg {
@@ -3706,6 +3832,7 @@ func rewriteValueMIPS64_OpMIPS64MOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPS64MOVWreg {
@@ -3727,6 +3854,7 @@ func rewriteValueMIPS64_OpMIPS64MOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPS64MOVWUreg {
@@ -3751,6 +3879,7 @@ func rewriteValueMIPS64_OpMIPS64MOVBstorezero_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64ADDVconst {
 			break
@@ -3774,6 +3903,7 @@ func rewriteValueMIPS64_OpMIPS64MOVBstorezero_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64MOVVaddr {
 			break
@@ -3801,6 +3931,7 @@ func rewriteValueMIPS64_OpMIPS64MOVDload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64ADDVconst {
 			break
@@ -3824,6 +3955,7 @@ func rewriteValueMIPS64_OpMIPS64MOVDload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64MOVVaddr {
 			break
@@ -3851,6 +3983,7 @@ func rewriteValueMIPS64_OpMIPS64MOVDstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64ADDVconst {
 			break
@@ -3876,6 +4009,7 @@ func rewriteValueMIPS64_OpMIPS64MOVDstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64MOVVaddr {
 			break
@@ -3905,6 +4039,7 @@ func rewriteValueMIPS64_OpMIPS64MOVFload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64ADDVconst {
 			break
@@ -3928,6 +4063,7 @@ func rewriteValueMIPS64_OpMIPS64MOVFload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64MOVVaddr {
 			break
@@ -3955,6 +4091,7 @@ func rewriteValueMIPS64_OpMIPS64MOVFstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64ADDVconst {
 			break
@@ -3980,6 +4117,7 @@ func rewriteValueMIPS64_OpMIPS64MOVFstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64MOVVaddr {
 			break
@@ -4009,6 +4147,7 @@ func rewriteValueMIPS64_OpMIPS64MOVHUload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64ADDVconst {
 			break
@@ -4032,6 +4171,7 @@ func rewriteValueMIPS64_OpMIPS64MOVHUload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64MOVVaddr {
 			break
@@ -4061,6 +4201,7 @@ func rewriteValueMIPS64_OpMIPS64MOVHUreg_0(v *Value) bool {
 		if x.Op != OpMIPS64MOVBUload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpMIPS64MOVVreg)
 		v.AddArg(x)
 		return true
@@ -4073,6 +4214,7 @@ func rewriteValueMIPS64_OpMIPS64MOVHUreg_0(v *Value) bool {
 		if x.Op != OpMIPS64MOVHUload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpMIPS64MOVVreg)
 		v.AddArg(x)
 		return true
@@ -4123,6 +4265,7 @@ func rewriteValueMIPS64_OpMIPS64MOVHload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64ADDVconst {
 			break
@@ -4146,6 +4289,7 @@ func rewriteValueMIPS64_OpMIPS64MOVHload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64MOVVaddr {
 			break
@@ -4175,6 +4319,7 @@ func rewriteValueMIPS64_OpMIPS64MOVHreg_0(v *Value) bool {
 		if x.Op != OpMIPS64MOVBload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpMIPS64MOVVreg)
 		v.AddArg(x)
 		return true
@@ -4187,6 +4332,7 @@ func rewriteValueMIPS64_OpMIPS64MOVHreg_0(v *Value) bool {
 		if x.Op != OpMIPS64MOVBUload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpMIPS64MOVVreg)
 		v.AddArg(x)
 		return true
@@ -4199,6 +4345,7 @@ func rewriteValueMIPS64_OpMIPS64MOVHreg_0(v *Value) bool {
 		if x.Op != OpMIPS64MOVHload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpMIPS64MOVVreg)
 		v.AddArg(x)
 		return true
@@ -4261,6 +4408,7 @@ func rewriteValueMIPS64_OpMIPS64MOVHstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64ADDVconst {
 			break
@@ -4286,6 +4434,7 @@ func rewriteValueMIPS64_OpMIPS64MOVHstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64MOVVaddr {
 			break
@@ -4312,6 +4461,7 @@ func rewriteValueMIPS64_OpMIPS64MOVHstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPS64MOVVconst {
@@ -4334,6 +4484,7 @@ func rewriteValueMIPS64_OpMIPS64MOVHstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPS64MOVHreg {
@@ -4355,6 +4506,7 @@ func rewriteValueMIPS64_OpMIPS64MOVHstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPS64MOVHUreg {
@@ -4376,6 +4528,7 @@ func rewriteValueMIPS64_OpMIPS64MOVHstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPS64MOVWreg {
@@ -4397,6 +4550,7 @@ func rewriteValueMIPS64_OpMIPS64MOVHstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPS64MOVWUreg {
@@ -4421,6 +4575,7 @@ func rewriteValueMIPS64_OpMIPS64MOVHstorezero_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64ADDVconst {
 			break
@@ -4444,6 +4599,7 @@ func rewriteValueMIPS64_OpMIPS64MOVHstorezero_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64MOVVaddr {
 			break
@@ -4471,6 +4627,7 @@ func rewriteValueMIPS64_OpMIPS64MOVVload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64ADDVconst {
 			break
@@ -4494,6 +4651,7 @@ func rewriteValueMIPS64_OpMIPS64MOVVload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64MOVVaddr {
 			break
@@ -4549,6 +4707,7 @@ func rewriteValueMIPS64_OpMIPS64MOVVstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64ADDVconst {
 			break
@@ -4574,6 +4733,7 @@ func rewriteValueMIPS64_OpMIPS64MOVVstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64MOVVaddr {
 			break
@@ -4600,6 +4760,7 @@ func rewriteValueMIPS64_OpMIPS64MOVVstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPS64MOVVconst {
@@ -4625,6 +4786,7 @@ func rewriteValueMIPS64_OpMIPS64MOVVstorezero_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64ADDVconst {
 			break
@@ -4648,6 +4810,7 @@ func rewriteValueMIPS64_OpMIPS64MOVVstorezero_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64MOVVaddr {
 			break
@@ -4675,6 +4838,7 @@ func rewriteValueMIPS64_OpMIPS64MOVWUload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64ADDVconst {
 			break
@@ -4698,6 +4862,7 @@ func rewriteValueMIPS64_OpMIPS64MOVWUload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64MOVVaddr {
 			break
@@ -4727,6 +4892,7 @@ func rewriteValueMIPS64_OpMIPS64MOVWUreg_0(v *Value) bool {
 		if x.Op != OpMIPS64MOVBUload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpMIPS64MOVVreg)
 		v.AddArg(x)
 		return true
@@ -4739,6 +4905,7 @@ func rewriteValueMIPS64_OpMIPS64MOVWUreg_0(v *Value) bool {
 		if x.Op != OpMIPS64MOVHUload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpMIPS64MOVVreg)
 		v.AddArg(x)
 		return true
@@ -4751,6 +4918,7 @@ func rewriteValueMIPS64_OpMIPS64MOVWUreg_0(v *Value) bool {
 		if x.Op != OpMIPS64MOVWUload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpMIPS64MOVVreg)
 		v.AddArg(x)
 		return true
@@ -4813,6 +4981,7 @@ func rewriteValueMIPS64_OpMIPS64MOVWload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64ADDVconst {
 			break
@@ -4836,6 +5005,7 @@ func rewriteValueMIPS64_OpMIPS64MOVWload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64MOVVaddr {
 			break
@@ -4865,6 +5035,7 @@ func rewriteValueMIPS64_OpMIPS64MOVWreg_0(v *Value) bool {
 		if x.Op != OpMIPS64MOVBload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpMIPS64MOVVreg)
 		v.AddArg(x)
 		return true
@@ -4877,6 +5048,7 @@ func rewriteValueMIPS64_OpMIPS64MOVWreg_0(v *Value) bool {
 		if x.Op != OpMIPS64MOVBUload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpMIPS64MOVVreg)
 		v.AddArg(x)
 		return true
@@ -4889,6 +5061,7 @@ func rewriteValueMIPS64_OpMIPS64MOVWreg_0(v *Value) bool {
 		if x.Op != OpMIPS64MOVHload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpMIPS64MOVVreg)
 		v.AddArg(x)
 		return true
@@ -4901,6 +5074,7 @@ func rewriteValueMIPS64_OpMIPS64MOVWreg_0(v *Value) bool {
 		if x.Op != OpMIPS64MOVHUload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpMIPS64MOVVreg)
 		v.AddArg(x)
 		return true
@@ -4913,6 +5087,7 @@ func rewriteValueMIPS64_OpMIPS64MOVWreg_0(v *Value) bool {
 		if x.Op != OpMIPS64MOVWload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpMIPS64MOVVreg)
 		v.AddArg(x)
 		return true
@@ -5002,6 +5177,7 @@ func rewriteValueMIPS64_OpMIPS64MOVWstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64ADDVconst {
 			break
@@ -5027,6 +5203,7 @@ func rewriteValueMIPS64_OpMIPS64MOVWstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64MOVVaddr {
 			break
@@ -5053,6 +5230,7 @@ func rewriteValueMIPS64_OpMIPS64MOVWstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPS64MOVVconst {
@@ -5075,6 +5253,7 @@ func rewriteValueMIPS64_OpMIPS64MOVWstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPS64MOVWreg {
@@ -5096,6 +5275,7 @@ func rewriteValueMIPS64_OpMIPS64MOVWstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPS64MOVWUreg {
@@ -5120,6 +5300,7 @@ func rewriteValueMIPS64_OpMIPS64MOVWstorezero_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64ADDVconst {
 			break
@@ -5143,6 +5324,7 @@ func rewriteValueMIPS64_OpMIPS64MOVWstorezero_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64MOVVaddr {
 			break
@@ -5184,6 +5366,7 @@ func rewriteValueMIPS64_OpMIPS64NOR_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (NORconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPS64MOVVconst {
@@ -5202,6 +5385,7 @@ func rewriteValueMIPS64_OpMIPS64NOR_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (NORconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64MOVVconst {
 			break
@@ -5240,6 +5424,7 @@ func rewriteValueMIPS64_OpMIPS64OR_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (ORconst  [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPS64MOVVconst {
@@ -5258,6 +5443,7 @@ func rewriteValueMIPS64_OpMIPS64OR_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (ORconst  [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64MOVVconst {
 			break
@@ -5276,6 +5462,7 @@ func rewriteValueMIPS64_OpMIPS64OR_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -5352,6 +5539,7 @@ func rewriteValueMIPS64_OpMIPS64SGT_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (SGTconst  [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64MOVVconst {
 			break
@@ -5373,6 +5561,7 @@ func rewriteValueMIPS64_OpMIPS64SGTU_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (SGTUconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64MOVVconst {
 			break
@@ -5715,6 +5904,7 @@ func rewriteValueMIPS64_OpMIPS64SLLV_0(v *Value) bool {
 	// cond: uint64(c)>=64
 	// result: (MOVVconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPS64MOVVconst {
 			break
@@ -5731,6 +5921,7 @@ func rewriteValueMIPS64_OpMIPS64SLLV_0(v *Value) bool {
 	// cond:
 	// result: (SLLVconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPS64MOVVconst {
@@ -5766,6 +5957,7 @@ func rewriteValueMIPS64_OpMIPS64SRAV_0(v *Value) bool {
 	// cond: uint64(c)>=64
 	// result: (SRAVconst x [63])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPS64MOVVconst {
@@ -5784,6 +5976,7 @@ func rewriteValueMIPS64_OpMIPS64SRAV_0(v *Value) bool {
 	// cond:
 	// result: (SRAVconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPS64MOVVconst {
@@ -5819,6 +6012,7 @@ func rewriteValueMIPS64_OpMIPS64SRLV_0(v *Value) bool {
 	// cond: uint64(c)>=64
 	// result: (MOVVconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPS64MOVVconst {
 			break
@@ -5835,6 +6029,7 @@ func rewriteValueMIPS64_OpMIPS64SRLV_0(v *Value) bool {
 	// cond:
 	// result: (SRLVconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPS64MOVVconst {
@@ -5870,6 +6065,7 @@ func rewriteValueMIPS64_OpMIPS64SUBV_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (SUBVconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPS64MOVVconst {
@@ -5888,6 +6084,7 @@ func rewriteValueMIPS64_OpMIPS64SUBV_0(v *Value) bool {
 	// cond:
 	// result: (MOVVconst [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -5900,6 +6097,7 @@ func rewriteValueMIPS64_OpMIPS64SUBV_0(v *Value) bool {
 	// cond:
 	// result: (NEGV x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64MOVVconst {
 			break
@@ -5987,6 +6185,7 @@ func rewriteValueMIPS64_OpMIPS64XOR_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (XORconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpMIPS64MOVVconst {
@@ -6005,6 +6204,7 @@ func rewriteValueMIPS64_OpMIPS64XOR_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (XORconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMIPS64MOVVconst {
 			break
@@ -6023,6 +6223,7 @@ func rewriteValueMIPS64_OpMIPS64XOR_0(v *Value) bool {
 	// cond:
 	// result: (MOVVconst [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -6104,6 +6305,7 @@ func rewriteValueMIPS64_OpMod16_0(v *Value) bool {
 	// cond:
 	// result: (Select0 (DIVV (SignExt16to64 x) (SignExt16to64 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect0)
@@ -6127,6 +6329,7 @@ func rewriteValueMIPS64_OpMod16u_0(v *Value) bool {
 	// cond:
 	// result: (Select0 (DIVVU (ZeroExt16to64 x) (ZeroExt16to64 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect0)
@@ -6150,6 +6353,7 @@ func rewriteValueMIPS64_OpMod32_0(v *Value) bool {
 	// cond:
 	// result: (Select0 (DIVV (SignExt32to64 x) (SignExt32to64 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect0)
@@ -6173,6 +6377,7 @@ func rewriteValueMIPS64_OpMod32u_0(v *Value) bool {
 	// cond:
 	// result: (Select0 (DIVVU (ZeroExt32to64 x) (ZeroExt32to64 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect0)
@@ -6196,6 +6401,7 @@ func rewriteValueMIPS64_OpMod64_0(v *Value) bool {
 	// cond:
 	// result: (Select0 (DIVV x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect0)
@@ -6215,6 +6421,7 @@ func rewriteValueMIPS64_OpMod64u_0(v *Value) bool {
 	// cond:
 	// result: (Select0 (DIVVU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect0)
@@ -6234,6 +6441,7 @@ func rewriteValueMIPS64_OpMod8_0(v *Value) bool {
 	// cond:
 	// result: (Select0 (DIVV (SignExt8to64 x) (SignExt8to64 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect0)
@@ -6257,6 +6465,7 @@ func rewriteValueMIPS64_OpMod8u_0(v *Value) bool {
 	// cond:
 	// result: (Select0 (DIVVU (ZeroExt8to64 x) (ZeroExt8to64 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect0)
@@ -6283,6 +6492,7 @@ func rewriteValueMIPS64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 0 {
 			break
 		}
+		_ = v.Args[2]
 		mem := v.Args[2]
 		v.reset(OpCopy)
 		v.Type = mem.Type
@@ -6296,6 +6506,7 @@ func rewriteValueMIPS64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 1 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -6316,6 +6527,7 @@ func rewriteValueMIPS64_OpMove_0(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -6338,6 +6550,7 @@ func rewriteValueMIPS64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 2 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -6367,6 +6580,7 @@ func rewriteValueMIPS64_OpMove_0(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -6390,6 +6604,7 @@ func rewriteValueMIPS64_OpMove_0(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -6421,6 +6636,7 @@ func rewriteValueMIPS64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 4 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -6468,6 +6684,7 @@ func rewriteValueMIPS64_OpMove_0(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -6491,6 +6708,7 @@ func rewriteValueMIPS64_OpMove_0(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -6523,6 +6741,7 @@ func rewriteValueMIPS64_OpMove_0(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -6581,6 +6800,7 @@ func rewriteValueMIPS64_OpMove_10(v *Value) bool {
 		if v.AuxInt != 3 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -6619,6 +6839,7 @@ func rewriteValueMIPS64_OpMove_10(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -6660,6 +6881,7 @@ func rewriteValueMIPS64_OpMove_10(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -6701,6 +6923,7 @@ func rewriteValueMIPS64_OpMove_10(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -6733,6 +6956,7 @@ func rewriteValueMIPS64_OpMove_10(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -6772,6 +6996,7 @@ func rewriteValueMIPS64_OpMove_10(v *Value) bool {
 	for {
 		s := v.AuxInt
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -6800,6 +7025,7 @@ func rewriteValueMIPS64_OpMul16_0(v *Value) bool {
 	// cond:
 	// result: (Select1 (MULVU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect1)
@@ -6819,6 +7045,7 @@ func rewriteValueMIPS64_OpMul32_0(v *Value) bool {
 	// cond:
 	// result: (Select1 (MULVU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect1)
@@ -6834,6 +7061,7 @@ func rewriteValueMIPS64_OpMul32F_0(v *Value) bool {
 	// cond:
 	// result: (MULF x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64MULF)
@@ -6851,6 +7079,7 @@ func rewriteValueMIPS64_OpMul64_0(v *Value) bool {
 	// cond:
 	// result: (Select1 (MULVU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect1)
@@ -6866,6 +7095,7 @@ func rewriteValueMIPS64_OpMul64F_0(v *Value) bool {
 	// cond:
 	// result: (MULD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64MULD)
@@ -6883,6 +7113,7 @@ func rewriteValueMIPS64_OpMul8_0(v *Value) bool {
 	// cond:
 	// result: (Select1 (MULVU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpSelect1)
@@ -6968,6 +7199,7 @@ func rewriteValueMIPS64_OpNeq16_0(v *Value) bool {
 	// cond:
 	// result: (SGTU (XOR (ZeroExt16to32 x) (ZeroExt16to64 y)) (MOVVconst [0]))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SGTU)
@@ -6994,6 +7226,7 @@ func rewriteValueMIPS64_OpNeq32_0(v *Value) bool {
 	// cond:
 	// result: (SGTU (XOR (ZeroExt32to64 x) (ZeroExt32to64 y)) (MOVVconst [0]))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SGTU)
@@ -7018,6 +7251,7 @@ func rewriteValueMIPS64_OpNeq32F_0(v *Value) bool {
 	// cond:
 	// result: (FPFlagFalse (CMPEQF x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64FPFlagFalse)
@@ -7037,6 +7271,7 @@ func rewriteValueMIPS64_OpNeq64_0(v *Value) bool {
 	// cond:
 	// result: (SGTU (XOR x y) (MOVVconst [0]))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SGTU)
@@ -7057,6 +7292,7 @@ func rewriteValueMIPS64_OpNeq64F_0(v *Value) bool {
 	// cond:
 	// result: (FPFlagFalse (CMPEQD x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64FPFlagFalse)
@@ -7076,6 +7312,7 @@ func rewriteValueMIPS64_OpNeq8_0(v *Value) bool {
 	// cond:
 	// result: (SGTU (XOR (ZeroExt8to64 x) (ZeroExt8to64 y)) (MOVVconst [0]))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SGTU)
@@ -7098,6 +7335,7 @@ func rewriteValueMIPS64_OpNeqB_0(v *Value) bool {
 	// cond:
 	// result: (XOR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64XOR)
@@ -7115,6 +7353,7 @@ func rewriteValueMIPS64_OpNeqPtr_0(v *Value) bool {
 	// cond:
 	// result: (SGTU (XOR x y) (MOVVconst [0]))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SGTU)
@@ -7133,6 +7372,7 @@ func rewriteValueMIPS64_OpNilCheck_0(v *Value) bool {
 	// cond:
 	// result: (LoweredNilCheck ptr mem)
 	for {
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpMIPS64LoweredNilCheck)
@@ -7185,6 +7425,7 @@ func rewriteValueMIPS64_OpOr16_0(v *Value) bool {
 	// cond:
 	// result: (OR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64OR)
@@ -7198,6 +7439,7 @@ func rewriteValueMIPS64_OpOr32_0(v *Value) bool {
 	// cond:
 	// result: (OR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64OR)
@@ -7211,6 +7453,7 @@ func rewriteValueMIPS64_OpOr64_0(v *Value) bool {
 	// cond:
 	// result: (OR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64OR)
@@ -7224,6 +7467,7 @@ func rewriteValueMIPS64_OpOr8_0(v *Value) bool {
 	// cond:
 	// result: (OR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64OR)
@@ -7237,6 +7481,7 @@ func rewriteValueMIPS64_OpOrB_0(v *Value) bool {
 	// cond:
 	// result: (OR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64OR)
@@ -7279,6 +7524,7 @@ func rewriteValueMIPS64_OpRsh16Ux16_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) (ZeroExt16to64 y))) (SRLV <t> (ZeroExt16to64 x) (ZeroExt16to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -7313,6 +7559,7 @@ func rewriteValueMIPS64_OpRsh16Ux32_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) (ZeroExt32to64 y))) (SRLV <t> (ZeroExt16to64 x) (ZeroExt32to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -7347,6 +7594,7 @@ func rewriteValueMIPS64_OpRsh16Ux64_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) y)) (SRLV <t> (ZeroExt16to64 x) y))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -7377,6 +7625,7 @@ func rewriteValueMIPS64_OpRsh16Ux8_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) (ZeroExt8to64  y))) (SRLV <t> (ZeroExt16to64 x) (ZeroExt8to64  y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -7411,6 +7660,7 @@ func rewriteValueMIPS64_OpRsh16x16_0(v *Value) bool {
 	// result: (SRAV (SignExt16to64 x) (OR <t> (NEGV <t> (SGTU (ZeroExt16to64 y) (Const64 <typ.UInt64> [63]))) (ZeroExt16to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SRAV)
@@ -7445,6 +7695,7 @@ func rewriteValueMIPS64_OpRsh16x32_0(v *Value) bool {
 	// result: (SRAV (SignExt16to64 x) (OR <t> (NEGV <t> (SGTU (ZeroExt32to64 y) (Const64 <typ.UInt64> [63]))) (ZeroExt32to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SRAV)
@@ -7479,6 +7730,7 @@ func rewriteValueMIPS64_OpRsh16x64_0(v *Value) bool {
 	// result: (SRAV (SignExt16to64 x) (OR <t> (NEGV <t> (SGTU y (Const64 <typ.UInt64> [63]))) y))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SRAV)
@@ -7509,6 +7761,7 @@ func rewriteValueMIPS64_OpRsh16x8_0(v *Value) bool {
 	// result: (SRAV (SignExt16to64 x) (OR <t> (NEGV <t> (SGTU (ZeroExt8to64  y) (Const64 <typ.UInt64> [63]))) (ZeroExt8to64  y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SRAV)
@@ -7543,6 +7796,7 @@ func rewriteValueMIPS64_OpRsh32Ux16_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) (ZeroExt16to64 y))) (SRLV <t> (ZeroExt32to64 x) (ZeroExt16to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -7577,6 +7831,7 @@ func rewriteValueMIPS64_OpRsh32Ux32_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) (ZeroExt32to64 y))) (SRLV <t> (ZeroExt32to64 x) (ZeroExt32to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -7611,6 +7866,7 @@ func rewriteValueMIPS64_OpRsh32Ux64_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) y)) (SRLV <t> (ZeroExt32to64 x) y))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -7641,6 +7897,7 @@ func rewriteValueMIPS64_OpRsh32Ux8_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) (ZeroExt8to64  y))) (SRLV <t> (ZeroExt32to64 x) (ZeroExt8to64  y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -7675,6 +7932,7 @@ func rewriteValueMIPS64_OpRsh32x16_0(v *Value) bool {
 	// result: (SRAV (SignExt32to64 x) (OR <t> (NEGV <t> (SGTU (ZeroExt16to64 y) (Const64 <typ.UInt64> [63]))) (ZeroExt16to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SRAV)
@@ -7709,6 +7967,7 @@ func rewriteValueMIPS64_OpRsh32x32_0(v *Value) bool {
 	// result: (SRAV (SignExt32to64 x) (OR <t> (NEGV <t> (SGTU (ZeroExt32to64 y) (Const64 <typ.UInt64> [63]))) (ZeroExt32to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SRAV)
@@ -7743,6 +8002,7 @@ func rewriteValueMIPS64_OpRsh32x64_0(v *Value) bool {
 	// result: (SRAV (SignExt32to64 x) (OR <t> (NEGV <t> (SGTU y (Const64 <typ.UInt64> [63]))) y))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SRAV)
@@ -7773,6 +8033,7 @@ func rewriteValueMIPS64_OpRsh32x8_0(v *Value) bool {
 	// result: (SRAV (SignExt32to64 x) (OR <t> (NEGV <t> (SGTU (ZeroExt8to64  y) (Const64 <typ.UInt64> [63]))) (ZeroExt8to64  y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SRAV)
@@ -7807,6 +8068,7 @@ func rewriteValueMIPS64_OpRsh64Ux16_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) (ZeroExt16to64 y))) (SRLV <t> x (ZeroExt16to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -7839,6 +8101,7 @@ func rewriteValueMIPS64_OpRsh64Ux32_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) (ZeroExt32to64 y))) (SRLV <t> x (ZeroExt32to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -7871,6 +8134,7 @@ func rewriteValueMIPS64_OpRsh64Ux64_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) y)) (SRLV <t> x y))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -7899,6 +8163,7 @@ func rewriteValueMIPS64_OpRsh64Ux8_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) (ZeroExt8to64  y))) (SRLV <t> x (ZeroExt8to64  y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -7931,6 +8196,7 @@ func rewriteValueMIPS64_OpRsh64x16_0(v *Value) bool {
 	// result: (SRAV x (OR <t> (NEGV <t> (SGTU (ZeroExt16to64 y) (Const64 <typ.UInt64> [63]))) (ZeroExt16to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SRAV)
@@ -7963,6 +8229,7 @@ func rewriteValueMIPS64_OpRsh64x32_0(v *Value) bool {
 	// result: (SRAV x (OR <t> (NEGV <t> (SGTU (ZeroExt32to64 y) (Const64 <typ.UInt64> [63]))) (ZeroExt32to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SRAV)
@@ -7995,6 +8262,7 @@ func rewriteValueMIPS64_OpRsh64x64_0(v *Value) bool {
 	// result: (SRAV x (OR <t> (NEGV <t> (SGTU y (Const64 <typ.UInt64> [63]))) y))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SRAV)
@@ -8023,6 +8291,7 @@ func rewriteValueMIPS64_OpRsh64x8_0(v *Value) bool {
 	// result: (SRAV x (OR <t> (NEGV <t> (SGTU (ZeroExt8to64  y) (Const64 <typ.UInt64> [63]))) (ZeroExt8to64  y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SRAV)
@@ -8055,6 +8324,7 @@ func rewriteValueMIPS64_OpRsh8Ux16_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) (ZeroExt16to64 y))) (SRLV <t> (ZeroExt8to64 x) (ZeroExt16to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -8089,6 +8359,7 @@ func rewriteValueMIPS64_OpRsh8Ux32_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) (ZeroExt32to64 y))) (SRLV <t> (ZeroExt8to64 x) (ZeroExt32to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -8123,6 +8394,7 @@ func rewriteValueMIPS64_OpRsh8Ux64_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) y)) (SRLV <t> (ZeroExt8to64 x) y))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -8153,6 +8425,7 @@ func rewriteValueMIPS64_OpRsh8Ux8_0(v *Value) bool {
 	// result: (AND (NEGV <t> (SGTU (Const64 <typ.UInt64> [64]) (ZeroExt8to64  y))) (SRLV <t> (ZeroExt8to64 x) (ZeroExt8to64  y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64AND)
@@ -8187,6 +8460,7 @@ func rewriteValueMIPS64_OpRsh8x16_0(v *Value) bool {
 	// result: (SRAV (SignExt8to64 x) (OR <t> (NEGV <t> (SGTU (ZeroExt16to64 y) (Const64 <typ.UInt64> [63]))) (ZeroExt16to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SRAV)
@@ -8221,6 +8495,7 @@ func rewriteValueMIPS64_OpRsh8x32_0(v *Value) bool {
 	// result: (SRAV (SignExt8to64 x) (OR <t> (NEGV <t> (SGTU (ZeroExt32to64 y) (Const64 <typ.UInt64> [63]))) (ZeroExt32to64 y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SRAV)
@@ -8255,6 +8530,7 @@ func rewriteValueMIPS64_OpRsh8x64_0(v *Value) bool {
 	// result: (SRAV (SignExt8to64 x) (OR <t> (NEGV <t> (SGTU y (Const64 <typ.UInt64> [63]))) y))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SRAV)
@@ -8285,6 +8561,7 @@ func rewriteValueMIPS64_OpRsh8x8_0(v *Value) bool {
 	// result: (SRAV (SignExt8to64 x) (OR <t> (NEGV <t> (SGTU (ZeroExt8to64  y) (Const64 <typ.UInt64> [63]))) (ZeroExt8to64  y)))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SRAV)
@@ -8318,6 +8595,7 @@ func rewriteValueMIPS64_OpSelect0_0(v *Value) bool {
 		if v_0.Op != OpMIPS64DIVVU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpMIPS64MOVVconst {
 			break
@@ -8337,6 +8615,7 @@ func rewriteValueMIPS64_OpSelect0_0(v *Value) bool {
 		if v_0.Op != OpMIPS64DIVVU {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpMIPS64MOVVconst {
@@ -8359,6 +8638,7 @@ func rewriteValueMIPS64_OpSelect0_0(v *Value) bool {
 		if v_0.Op != OpMIPS64DIVV {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpMIPS64MOVVconst {
 			break
@@ -8381,6 +8661,7 @@ func rewriteValueMIPS64_OpSelect0_0(v *Value) bool {
 		if v_0.Op != OpMIPS64DIVVU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpMIPS64MOVVconst {
 			break
@@ -8406,6 +8687,7 @@ func rewriteValueMIPS64_OpSelect1_0(v *Value) bool {
 		if v_0.Op != OpMIPS64MULVU {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpMIPS64MOVVconst {
@@ -8426,6 +8708,7 @@ func rewriteValueMIPS64_OpSelect1_0(v *Value) bool {
 		if v_0.Op != OpMIPS64MULVU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpMIPS64MOVVconst {
 			break
@@ -8446,6 +8729,7 @@ func rewriteValueMIPS64_OpSelect1_0(v *Value) bool {
 		if v_0.Op != OpMIPS64MULVU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpMIPS64MOVVconst {
 			break
@@ -8465,6 +8749,7 @@ func rewriteValueMIPS64_OpSelect1_0(v *Value) bool {
 		if v_0.Op != OpMIPS64MULVU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpMIPS64MOVVconst {
 			break
@@ -8484,6 +8769,7 @@ func rewriteValueMIPS64_OpSelect1_0(v *Value) bool {
 		if v_0.Op != OpMIPS64MULVU {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpMIPS64MOVVconst {
@@ -8505,6 +8791,7 @@ func rewriteValueMIPS64_OpSelect1_0(v *Value) bool {
 		if v_0.Op != OpMIPS64MULVU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpMIPS64MOVVconst {
 			break
@@ -8526,6 +8813,7 @@ func rewriteValueMIPS64_OpSelect1_0(v *Value) bool {
 		if v_0.Op != OpMIPS64MULVU {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpMIPS64MOVVconst {
@@ -8548,6 +8836,7 @@ func rewriteValueMIPS64_OpSelect1_0(v *Value) bool {
 		if v_0.Op != OpMIPS64MULVU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpMIPS64MOVVconst {
 			break
@@ -8570,6 +8859,7 @@ func rewriteValueMIPS64_OpSelect1_0(v *Value) bool {
 		if v_0.Op != OpMIPS64MULVU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpMIPS64MOVVconst {
 			break
@@ -8590,6 +8880,7 @@ func rewriteValueMIPS64_OpSelect1_0(v *Value) bool {
 		if v_0.Op != OpMIPS64MULVU {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpMIPS64MOVVconst {
@@ -8613,6 +8904,7 @@ func rewriteValueMIPS64_OpSelect1_10(v *Value) bool {
 		if v_0.Op != OpMIPS64MULVU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpMIPS64MOVVconst {
 			break
@@ -8632,6 +8924,7 @@ func rewriteValueMIPS64_OpSelect1_10(v *Value) bool {
 		if v_0.Op != OpMIPS64MULVU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpMIPS64MOVVconst {
 			break
@@ -8651,6 +8944,7 @@ func rewriteValueMIPS64_OpSelect1_10(v *Value) bool {
 		if v_0.Op != OpMIPS64MULVU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpMIPS64MOVVconst {
 			break
@@ -8672,6 +8966,7 @@ func rewriteValueMIPS64_OpSelect1_10(v *Value) bool {
 		if v_0.Op != OpMIPS64MULVU {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpMIPS64MOVVconst {
@@ -8693,6 +8988,7 @@ func rewriteValueMIPS64_OpSelect1_10(v *Value) bool {
 		if v_0.Op != OpMIPS64MULVU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpMIPS64MOVVconst {
 			break
@@ -8715,6 +9011,7 @@ func rewriteValueMIPS64_OpSelect1_10(v *Value) bool {
 		if v_0.Op != OpMIPS64MULVU {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpMIPS64MOVVconst {
@@ -8737,6 +9034,7 @@ func rewriteValueMIPS64_OpSelect1_10(v *Value) bool {
 		if v_0.Op != OpMIPS64DIVVU {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpMIPS64MOVVconst {
@@ -8758,6 +9056,7 @@ func rewriteValueMIPS64_OpSelect1_10(v *Value) bool {
 		if v_0.Op != OpMIPS64DIVVU {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpMIPS64MOVVconst {
@@ -8780,6 +9079,7 @@ func rewriteValueMIPS64_OpSelect1_10(v *Value) bool {
 		if v_0.Op != OpMIPS64MULVU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpMIPS64MOVVconst {
 			break
@@ -8802,6 +9102,7 @@ func rewriteValueMIPS64_OpSelect1_10(v *Value) bool {
 		if v_0.Op != OpMIPS64MULVU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpMIPS64MOVVconst {
 			break
@@ -8827,6 +9128,7 @@ func rewriteValueMIPS64_OpSelect1_20(v *Value) bool {
 		if v_0.Op != OpMIPS64DIVV {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpMIPS64MOVVconst {
 			break
@@ -8849,6 +9151,7 @@ func rewriteValueMIPS64_OpSelect1_20(v *Value) bool {
 		if v_0.Op != OpMIPS64DIVVU {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpMIPS64MOVVconst {
 			break
@@ -8969,6 +9272,7 @@ func rewriteValueMIPS64_OpStore_0(v *Value) bool {
 	// result: (MOVBstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -8986,6 +9290,7 @@ func rewriteValueMIPS64_OpStore_0(v *Value) bool {
 	// result: (MOVHstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -9003,6 +9308,7 @@ func rewriteValueMIPS64_OpStore_0(v *Value) bool {
 	// result: (MOVWstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -9020,6 +9326,7 @@ func rewriteValueMIPS64_OpStore_0(v *Value) bool {
 	// result: (MOVVstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -9037,6 +9344,7 @@ func rewriteValueMIPS64_OpStore_0(v *Value) bool {
 	// result: (MOVFstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -9054,6 +9362,7 @@ func rewriteValueMIPS64_OpStore_0(v *Value) bool {
 	// result: (MOVDstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -9073,6 +9382,7 @@ func rewriteValueMIPS64_OpSub16_0(v *Value) bool {
 	// cond:
 	// result: (SUBV x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SUBV)
@@ -9086,6 +9396,7 @@ func rewriteValueMIPS64_OpSub32_0(v *Value) bool {
 	// cond:
 	// result: (SUBV x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SUBV)
@@ -9099,6 +9410,7 @@ func rewriteValueMIPS64_OpSub32F_0(v *Value) bool {
 	// cond:
 	// result: (SUBF x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SUBF)
@@ -9112,6 +9424,7 @@ func rewriteValueMIPS64_OpSub64_0(v *Value) bool {
 	// cond:
 	// result: (SUBV x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SUBV)
@@ -9125,6 +9438,7 @@ func rewriteValueMIPS64_OpSub64F_0(v *Value) bool {
 	// cond:
 	// result: (SUBD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SUBD)
@@ -9138,6 +9452,7 @@ func rewriteValueMIPS64_OpSub8_0(v *Value) bool {
 	// cond:
 	// result: (SUBV x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SUBV)
@@ -9151,6 +9466,7 @@ func rewriteValueMIPS64_OpSubPtr_0(v *Value) bool {
 	// cond:
 	// result: (SUBV x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64SUBV)
@@ -9236,6 +9552,7 @@ func rewriteValueMIPS64_OpXor16_0(v *Value) bool {
 	// cond:
 	// result: (XOR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64XOR)
@@ -9249,6 +9566,7 @@ func rewriteValueMIPS64_OpXor32_0(v *Value) bool {
 	// cond:
 	// result: (XOR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64XOR)
@@ -9262,6 +9580,7 @@ func rewriteValueMIPS64_OpXor64_0(v *Value) bool {
 	// cond:
 	// result: (XOR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64XOR)
@@ -9275,6 +9594,7 @@ func rewriteValueMIPS64_OpXor8_0(v *Value) bool {
 	// cond:
 	// result: (XOR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMIPS64XOR)
@@ -9295,6 +9615,7 @@ func rewriteValueMIPS64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 0 {
 			break
 		}
+		_ = v.Args[1]
 		mem := v.Args[1]
 		v.reset(OpCopy)
 		v.Type = mem.Type
@@ -9308,6 +9629,7 @@ func rewriteValueMIPS64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 1 {
 			break
 		}
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpMIPS64MOVBstore)
@@ -9326,6 +9648,7 @@ func rewriteValueMIPS64_OpZero_0(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.(*types.Type).Alignment()%2 == 0) {
@@ -9346,6 +9669,7 @@ func rewriteValueMIPS64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 2 {
 			break
 		}
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpMIPS64MOVBstore)
@@ -9372,6 +9696,7 @@ func rewriteValueMIPS64_OpZero_0(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.(*types.Type).Alignment()%4 == 0) {
@@ -9393,6 +9718,7 @@ func rewriteValueMIPS64_OpZero_0(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.(*types.Type).Alignment()%2 == 0) {
@@ -9421,6 +9747,7 @@ func rewriteValueMIPS64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 4 {
 			break
 		}
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpMIPS64MOVBstore)
@@ -9461,6 +9788,7 @@ func rewriteValueMIPS64_OpZero_0(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.(*types.Type).Alignment()%8 == 0) {
@@ -9482,6 +9810,7 @@ func rewriteValueMIPS64_OpZero_0(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.(*types.Type).Alignment()%4 == 0) {
@@ -9511,6 +9840,7 @@ func rewriteValueMIPS64_OpZero_0(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.(*types.Type).Alignment()%2 == 0) {
@@ -9562,6 +9892,7 @@ func rewriteValueMIPS64_OpZero_10(v *Value) bool {
 		if v.AuxInt != 3 {
 			break
 		}
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpMIPS64MOVBstore)
@@ -9595,6 +9926,7 @@ func rewriteValueMIPS64_OpZero_10(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.(*types.Type).Alignment()%2 == 0) {
@@ -9631,6 +9963,7 @@ func rewriteValueMIPS64_OpZero_10(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.(*types.Type).Alignment()%4 == 0) {
@@ -9667,6 +10000,7 @@ func rewriteValueMIPS64_OpZero_10(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.(*types.Type).Alignment()%8 == 0) {
@@ -9696,6 +10030,7 @@ func rewriteValueMIPS64_OpZero_10(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.(*types.Type).Alignment()%8 == 0) {
@@ -9730,6 +10065,7 @@ func rewriteValueMIPS64_OpZero_10(v *Value) bool {
 	for {
 		s := v.AuxInt
 		t := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(s%8 == 0 && s > 24 && s <= 8*128 && t.(*types.Type).Alignment()%8 == 0 && !config.noDuffDevice) {
@@ -9747,6 +10083,7 @@ func rewriteValueMIPS64_OpZero_10(v *Value) bool {
 	for {
 		s := v.AuxInt
 		t := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !((s > 8*128 || config.noDuffDevice) || t.(*types.Type).Alignment()%8 != 0) {
@@ -9880,6 +10217,7 @@ func rewriteBlockMIPS64(b *Block) bool {
 			if cmp.Op != OpMIPS64SGT {
 				break
 			}
+			_ = cmp.Args[1]
 			b.Kind = BlockMIPS64NE
 			b.SetControl(cmp)
 			return true
@@ -9899,6 +10237,7 @@ func rewriteBlockMIPS64(b *Block) bool {
 			if cmp.Op != OpMIPS64SGTU {
 				break
 			}
+			_ = cmp.Args[1]
 			b.Kind = BlockMIPS64NE
 			b.SetControl(cmp)
 			return true
@@ -9965,6 +10304,7 @@ func rewriteBlockMIPS64(b *Block) bool {
 			if v.Op != OpMIPS64SGTU {
 				break
 			}
+			_ = v.Args[1]
 			x := v.Args[0]
 			v_1 := v.Args[1]
 			if v_1.Op != OpMIPS64MOVVconst {
@@ -10001,6 +10341,7 @@ func rewriteBlockMIPS64(b *Block) bool {
 			if v.Op != OpMIPS64SGT {
 				break
 			}
+			_ = v.Args[1]
 			x := v.Args[0]
 			v_1 := v.Args[1]
 			if v_1.Op != OpMIPS64MOVVconst {
@@ -10235,6 +10576,7 @@ func rewriteBlockMIPS64(b *Block) bool {
 			if cmp.Op != OpMIPS64SGT {
 				break
 			}
+			_ = cmp.Args[1]
 			b.Kind = BlockMIPS64EQ
 			b.SetControl(cmp)
 			return true
@@ -10254,6 +10596,7 @@ func rewriteBlockMIPS64(b *Block) bool {
 			if cmp.Op != OpMIPS64SGTU {
 				break
 			}
+			_ = cmp.Args[1]
 			b.Kind = BlockMIPS64EQ
 			b.SetControl(cmp)
 			return true
@@ -10320,6 +10663,7 @@ func rewriteBlockMIPS64(b *Block) bool {
 			if v.Op != OpMIPS64SGTU {
 				break
 			}
+			_ = v.Args[1]
 			x := v.Args[0]
 			v_1 := v.Args[1]
 			if v_1.Op != OpMIPS64MOVVconst {
@@ -10356,6 +10700,7 @@ func rewriteBlockMIPS64(b *Block) bool {
 			if v.Op != OpMIPS64SGT {
 				break
 			}
+			_ = v.Args[1]
 			x := v.Args[0]
 			v_1 := v.Args[1]
 			if v_1.Op != OpMIPS64MOVVconst {
diff --git a/src/cmd/compile/internal/ssa/rewritePPC64.go b/src/cmd/compile/internal/ssa/rewritePPC64.go
index 9e52b2291c..20e354cb4a 100644
--- a/src/cmd/compile/internal/ssa/rewritePPC64.go
+++ b/src/cmd/compile/internal/ssa/rewritePPC64.go
@@ -625,6 +625,7 @@ func rewriteValuePPC64_OpAdd16_0(v *Value) bool {
 	// cond:
 	// result: (ADD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64ADD)
@@ -638,6 +639,7 @@ func rewriteValuePPC64_OpAdd32_0(v *Value) bool {
 	// cond:
 	// result: (ADD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64ADD)
@@ -651,6 +653,7 @@ func rewriteValuePPC64_OpAdd32F_0(v *Value) bool {
 	// cond:
 	// result: (FADDS x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64FADDS)
@@ -664,6 +667,7 @@ func rewriteValuePPC64_OpAdd64_0(v *Value) bool {
 	// cond:
 	// result: (ADD  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64ADD)
@@ -677,6 +681,7 @@ func rewriteValuePPC64_OpAdd64F_0(v *Value) bool {
 	// cond:
 	// result: (FADD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64FADD)
@@ -690,6 +695,7 @@ func rewriteValuePPC64_OpAdd8_0(v *Value) bool {
 	// cond:
 	// result: (ADD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64ADD)
@@ -703,6 +709,7 @@ func rewriteValuePPC64_OpAddPtr_0(v *Value) bool {
 	// cond:
 	// result: (ADD  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64ADD)
@@ -729,6 +736,7 @@ func rewriteValuePPC64_OpAnd16_0(v *Value) bool {
 	// cond:
 	// result: (AND x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64AND)
@@ -742,6 +750,7 @@ func rewriteValuePPC64_OpAnd32_0(v *Value) bool {
 	// cond:
 	// result: (AND x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64AND)
@@ -755,6 +764,7 @@ func rewriteValuePPC64_OpAnd64_0(v *Value) bool {
 	// cond:
 	// result: (AND x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64AND)
@@ -768,6 +778,7 @@ func rewriteValuePPC64_OpAnd8_0(v *Value) bool {
 	// cond:
 	// result: (AND x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64AND)
@@ -781,6 +792,7 @@ func rewriteValuePPC64_OpAndB_0(v *Value) bool {
 	// cond:
 	// result: (AND x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64AND)
@@ -794,6 +806,7 @@ func rewriteValuePPC64_OpAtomicAdd32_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicAdd32 ptr val mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -809,6 +822,7 @@ func rewriteValuePPC64_OpAtomicAdd64_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicAdd64 ptr val mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -824,6 +838,7 @@ func rewriteValuePPC64_OpAtomicAnd8_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicAnd8 ptr val mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -839,6 +854,7 @@ func rewriteValuePPC64_OpAtomicCompareAndSwap32_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicCas32 ptr old new_ mem)
 	for {
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		old := v.Args[1]
 		new_ := v.Args[2]
@@ -856,6 +872,7 @@ func rewriteValuePPC64_OpAtomicCompareAndSwap64_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicCas64 ptr old new_ mem)
 	for {
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		old := v.Args[1]
 		new_ := v.Args[2]
@@ -873,6 +890,7 @@ func rewriteValuePPC64_OpAtomicExchange32_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicExchange32 ptr val mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -888,6 +906,7 @@ func rewriteValuePPC64_OpAtomicExchange64_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicExchange64 ptr val mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -903,6 +922,7 @@ func rewriteValuePPC64_OpAtomicLoad32_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicLoad32 ptr mem)
 	for {
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpPPC64LoweredAtomicLoad32)
@@ -916,6 +936,7 @@ func rewriteValuePPC64_OpAtomicLoad64_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicLoad64 ptr mem)
 	for {
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpPPC64LoweredAtomicLoad64)
@@ -929,6 +950,7 @@ func rewriteValuePPC64_OpAtomicLoadPtr_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicLoadPtr ptr mem)
 	for {
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpPPC64LoweredAtomicLoadPtr)
@@ -942,6 +964,7 @@ func rewriteValuePPC64_OpAtomicOr8_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicOr8  ptr val mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -957,6 +980,7 @@ func rewriteValuePPC64_OpAtomicStore32_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicStore32 ptr val mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -972,6 +996,7 @@ func rewriteValuePPC64_OpAtomicStore64_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicStore64 ptr val mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -990,6 +1015,7 @@ func rewriteValuePPC64_OpAvg64u_0(v *Value) bool {
 	// result: (ADD (SRDconst <t> (SUB <t> x y) [1]) y)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64ADD)
@@ -1050,6 +1076,7 @@ func rewriteValuePPC64_OpClosureCall_0(v *Value) bool {
 	// result: (CALLclosure [argwid] entry closure mem)
 	for {
 		argwid := v.AuxInt
+		_ = v.Args[2]
 		entry := v.Args[0]
 		closure := v.Args[1]
 		mem := v.Args[2]
@@ -1202,6 +1229,7 @@ func rewriteValuePPC64_OpConvert_0(v *Value) bool {
 	// result: (MOVDconvert <t> x mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpPPC64MOVDconvert)
@@ -1431,6 +1459,7 @@ func rewriteValuePPC64_OpDiv16_0(v *Value) bool {
 	// cond:
 	// result: (DIVW  (SignExt16to32 x) (SignExt16to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64DIVW)
@@ -1452,6 +1481,7 @@ func rewriteValuePPC64_OpDiv16u_0(v *Value) bool {
 	// cond:
 	// result: (DIVWU (ZeroExt16to32 x) (ZeroExt16to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64DIVWU)
@@ -1469,6 +1499,7 @@ func rewriteValuePPC64_OpDiv32_0(v *Value) bool {
 	// cond:
 	// result: (DIVW  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64DIVW)
@@ -1482,6 +1513,7 @@ func rewriteValuePPC64_OpDiv32F_0(v *Value) bool {
 	// cond:
 	// result: (FDIVS x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64FDIVS)
@@ -1495,6 +1527,7 @@ func rewriteValuePPC64_OpDiv32u_0(v *Value) bool {
 	// cond:
 	// result: (DIVWU x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64DIVWU)
@@ -1508,6 +1541,7 @@ func rewriteValuePPC64_OpDiv64_0(v *Value) bool {
 	// cond:
 	// result: (DIVD  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64DIVD)
@@ -1521,6 +1555,7 @@ func rewriteValuePPC64_OpDiv64F_0(v *Value) bool {
 	// cond:
 	// result: (FDIV x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64FDIV)
@@ -1534,6 +1569,7 @@ func rewriteValuePPC64_OpDiv64u_0(v *Value) bool {
 	// cond:
 	// result: (DIVDU x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64DIVDU)
@@ -1551,6 +1587,7 @@ func rewriteValuePPC64_OpDiv8_0(v *Value) bool {
 	// cond:
 	// result: (DIVW  (SignExt8to32 x) (SignExt8to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64DIVW)
@@ -1572,6 +1609,7 @@ func rewriteValuePPC64_OpDiv8u_0(v *Value) bool {
 	// cond:
 	// result: (DIVWU (ZeroExt8to32 x) (ZeroExt8to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64DIVWU)
@@ -1593,6 +1631,7 @@ func rewriteValuePPC64_OpEq16_0(v *Value) bool {
 	// cond: isSigned(x.Type) && isSigned(y.Type)
 	// result: (Equal (CMPW (SignExt16to32 x) (SignExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		if !(isSigned(x.Type) && isSigned(y.Type)) {
@@ -1613,6 +1652,7 @@ func rewriteValuePPC64_OpEq16_0(v *Value) bool {
 	// cond:
 	// result: (Equal (CMPW (ZeroExt16to32 x) (ZeroExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64Equal)
@@ -1634,6 +1674,7 @@ func rewriteValuePPC64_OpEq32_0(v *Value) bool {
 	// cond:
 	// result: (Equal (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64Equal)
@@ -1651,6 +1692,7 @@ func rewriteValuePPC64_OpEq32F_0(v *Value) bool {
 	// cond:
 	// result: (Equal (FCMPU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64Equal)
@@ -1668,6 +1710,7 @@ func rewriteValuePPC64_OpEq64_0(v *Value) bool {
 	// cond:
 	// result: (Equal (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64Equal)
@@ -1685,6 +1728,7 @@ func rewriteValuePPC64_OpEq64F_0(v *Value) bool {
 	// cond:
 	// result: (Equal (FCMPU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64Equal)
@@ -1704,6 +1748,7 @@ func rewriteValuePPC64_OpEq8_0(v *Value) bool {
 	// cond: isSigned(x.Type) && isSigned(y.Type)
 	// result: (Equal (CMPW (SignExt8to32 x) (SignExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		if !(isSigned(x.Type) && isSigned(y.Type)) {
@@ -1724,6 +1769,7 @@ func rewriteValuePPC64_OpEq8_0(v *Value) bool {
 	// cond:
 	// result: (Equal (CMPW (ZeroExt8to32 x) (ZeroExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64Equal)
@@ -1747,6 +1793,7 @@ func rewriteValuePPC64_OpEqB_0(v *Value) bool {
 	// cond:
 	// result: (ANDconst [1] (EQV x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64ANDconst)
@@ -1765,6 +1812,7 @@ func rewriteValuePPC64_OpEqPtr_0(v *Value) bool {
 	// cond:
 	// result: (Equal (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64Equal)
@@ -1784,6 +1832,7 @@ func rewriteValuePPC64_OpGeq16_0(v *Value) bool {
 	// cond:
 	// result: (GreaterEqual (CMPW (SignExt16to32 x) (SignExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64GreaterEqual)
@@ -1807,6 +1856,7 @@ func rewriteValuePPC64_OpGeq16U_0(v *Value) bool {
 	// cond:
 	// result: (GreaterEqual (CMPWU (ZeroExt16to32 x) (ZeroExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64GreaterEqual)
@@ -1828,6 +1878,7 @@ func rewriteValuePPC64_OpGeq32_0(v *Value) bool {
 	// cond:
 	// result: (GreaterEqual (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64GreaterEqual)
@@ -1845,6 +1896,7 @@ func rewriteValuePPC64_OpGeq32F_0(v *Value) bool {
 	// cond:
 	// result: (FGreaterEqual (FCMPU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64FGreaterEqual)
@@ -1862,6 +1914,7 @@ func rewriteValuePPC64_OpGeq32U_0(v *Value) bool {
 	// cond:
 	// result: (GreaterEqual (CMPWU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64GreaterEqual)
@@ -1879,6 +1932,7 @@ func rewriteValuePPC64_OpGeq64_0(v *Value) bool {
 	// cond:
 	// result: (GreaterEqual (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64GreaterEqual)
@@ -1896,6 +1950,7 @@ func rewriteValuePPC64_OpGeq64F_0(v *Value) bool {
 	// cond:
 	// result: (FGreaterEqual (FCMPU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64FGreaterEqual)
@@ -1913,6 +1968,7 @@ func rewriteValuePPC64_OpGeq64U_0(v *Value) bool {
 	// cond:
 	// result: (GreaterEqual (CMPU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64GreaterEqual)
@@ -1932,6 +1988,7 @@ func rewriteValuePPC64_OpGeq8_0(v *Value) bool {
 	// cond:
 	// result: (GreaterEqual (CMPW (SignExt8to32 x) (SignExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64GreaterEqual)
@@ -1955,6 +2012,7 @@ func rewriteValuePPC64_OpGeq8U_0(v *Value) bool {
 	// cond:
 	// result: (GreaterEqual (CMPWU (ZeroExt8to32 x) (ZeroExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64GreaterEqual)
@@ -1987,6 +2045,7 @@ func rewriteValuePPC64_OpGreater16_0(v *Value) bool {
 	// cond:
 	// result: (GreaterThan (CMPW (SignExt16to32 x) (SignExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64GreaterThan)
@@ -2010,6 +2069,7 @@ func rewriteValuePPC64_OpGreater16U_0(v *Value) bool {
 	// cond:
 	// result: (GreaterThan (CMPWU (ZeroExt16to32 x) (ZeroExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64GreaterThan)
@@ -2031,6 +2091,7 @@ func rewriteValuePPC64_OpGreater32_0(v *Value) bool {
 	// cond:
 	// result: (GreaterThan (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64GreaterThan)
@@ -2048,6 +2109,7 @@ func rewriteValuePPC64_OpGreater32F_0(v *Value) bool {
 	// cond:
 	// result: (FGreaterThan (FCMPU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64FGreaterThan)
@@ -2065,6 +2127,7 @@ func rewriteValuePPC64_OpGreater32U_0(v *Value) bool {
 	// cond:
 	// result: (GreaterThan (CMPWU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64GreaterThan)
@@ -2082,6 +2145,7 @@ func rewriteValuePPC64_OpGreater64_0(v *Value) bool {
 	// cond:
 	// result: (GreaterThan (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64GreaterThan)
@@ -2099,6 +2163,7 @@ func rewriteValuePPC64_OpGreater64F_0(v *Value) bool {
 	// cond:
 	// result: (FGreaterThan (FCMPU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64FGreaterThan)
@@ -2116,6 +2181,7 @@ func rewriteValuePPC64_OpGreater64U_0(v *Value) bool {
 	// cond:
 	// result: (GreaterThan (CMPU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64GreaterThan)
@@ -2135,6 +2201,7 @@ func rewriteValuePPC64_OpGreater8_0(v *Value) bool {
 	// cond:
 	// result: (GreaterThan (CMPW (SignExt8to32 x) (SignExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64GreaterThan)
@@ -2158,6 +2225,7 @@ func rewriteValuePPC64_OpGreater8U_0(v *Value) bool {
 	// cond:
 	// result: (GreaterThan (CMPWU (ZeroExt8to32 x) (ZeroExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64GreaterThan)
@@ -2177,6 +2245,7 @@ func rewriteValuePPC64_OpHmul32_0(v *Value) bool {
 	// cond:
 	// result: (MULHW  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64MULHW)
@@ -2190,6 +2259,7 @@ func rewriteValuePPC64_OpHmul32u_0(v *Value) bool {
 	// cond:
 	// result: (MULHWU x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64MULHWU)
@@ -2203,6 +2273,7 @@ func rewriteValuePPC64_OpHmul64_0(v *Value) bool {
 	// cond:
 	// result: (MULHD  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64MULHD)
@@ -2216,6 +2287,7 @@ func rewriteValuePPC64_OpHmul64u_0(v *Value) bool {
 	// cond:
 	// result: (MULHDU x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64MULHDU)
@@ -2230,6 +2302,7 @@ func rewriteValuePPC64_OpInterCall_0(v *Value) bool {
 	// result: (CALLinter [argwid] entry mem)
 	for {
 		argwid := v.AuxInt
+		_ = v.Args[1]
 		entry := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpPPC64CALLinter)
@@ -2246,6 +2319,7 @@ func rewriteValuePPC64_OpIsInBounds_0(v *Value) bool {
 	// cond:
 	// result: (LessThan (CMPU idx len))
 	for {
+		_ = v.Args[1]
 		idx := v.Args[0]
 		len := v.Args[1]
 		v.reset(OpPPC64LessThan)
@@ -2279,6 +2353,7 @@ func rewriteValuePPC64_OpIsSliceInBounds_0(v *Value) bool {
 	// cond:
 	// result: (LessEqual (CMPU idx len))
 	for {
+		_ = v.Args[1]
 		idx := v.Args[0]
 		len := v.Args[1]
 		v.reset(OpPPC64LessEqual)
@@ -2298,6 +2373,7 @@ func rewriteValuePPC64_OpLeq16_0(v *Value) bool {
 	// cond:
 	// result: (LessEqual (CMPW (SignExt16to32 x) (SignExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64LessEqual)
@@ -2321,6 +2397,7 @@ func rewriteValuePPC64_OpLeq16U_0(v *Value) bool {
 	// cond:
 	// result: (LessEqual (CMPWU (ZeroExt16to32 x) (ZeroExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64LessEqual)
@@ -2342,6 +2419,7 @@ func rewriteValuePPC64_OpLeq32_0(v *Value) bool {
 	// cond:
 	// result: (LessEqual (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64LessEqual)
@@ -2359,6 +2437,7 @@ func rewriteValuePPC64_OpLeq32F_0(v *Value) bool {
 	// cond:
 	// result: (FLessEqual (FCMPU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64FLessEqual)
@@ -2376,6 +2455,7 @@ func rewriteValuePPC64_OpLeq32U_0(v *Value) bool {
 	// cond:
 	// result: (LessEqual (CMPWU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64LessEqual)
@@ -2393,6 +2473,7 @@ func rewriteValuePPC64_OpLeq64_0(v *Value) bool {
 	// cond:
 	// result: (LessEqual (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64LessEqual)
@@ -2410,6 +2491,7 @@ func rewriteValuePPC64_OpLeq64F_0(v *Value) bool {
 	// cond:
 	// result: (FLessEqual (FCMPU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64FLessEqual)
@@ -2427,6 +2509,7 @@ func rewriteValuePPC64_OpLeq64U_0(v *Value) bool {
 	// cond:
 	// result: (LessEqual (CMPU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64LessEqual)
@@ -2446,6 +2529,7 @@ func rewriteValuePPC64_OpLeq8_0(v *Value) bool {
 	// cond:
 	// result: (LessEqual (CMPW (SignExt8to32 x) (SignExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64LessEqual)
@@ -2469,6 +2553,7 @@ func rewriteValuePPC64_OpLeq8U_0(v *Value) bool {
 	// cond:
 	// result: (LessEqual (CMPWU (ZeroExt8to32 x) (ZeroExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64LessEqual)
@@ -2492,6 +2577,7 @@ func rewriteValuePPC64_OpLess16_0(v *Value) bool {
 	// cond:
 	// result: (LessThan (CMPW (SignExt16to32 x) (SignExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64LessThan)
@@ -2515,6 +2601,7 @@ func rewriteValuePPC64_OpLess16U_0(v *Value) bool {
 	// cond:
 	// result: (LessThan (CMPWU (ZeroExt16to32 x) (ZeroExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64LessThan)
@@ -2536,6 +2623,7 @@ func rewriteValuePPC64_OpLess32_0(v *Value) bool {
 	// cond:
 	// result: (LessThan (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64LessThan)
@@ -2553,6 +2641,7 @@ func rewriteValuePPC64_OpLess32F_0(v *Value) bool {
 	// cond:
 	// result: (FLessThan (FCMPU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64FLessThan)
@@ -2570,6 +2659,7 @@ func rewriteValuePPC64_OpLess32U_0(v *Value) bool {
 	// cond:
 	// result: (LessThan (CMPWU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64LessThan)
@@ -2587,6 +2677,7 @@ func rewriteValuePPC64_OpLess64_0(v *Value) bool {
 	// cond:
 	// result: (LessThan (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64LessThan)
@@ -2604,6 +2695,7 @@ func rewriteValuePPC64_OpLess64F_0(v *Value) bool {
 	// cond:
 	// result: (FLessThan (FCMPU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64FLessThan)
@@ -2621,6 +2713,7 @@ func rewriteValuePPC64_OpLess64U_0(v *Value) bool {
 	// cond:
 	// result: (LessThan (CMPU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64LessThan)
@@ -2640,6 +2733,7 @@ func rewriteValuePPC64_OpLess8_0(v *Value) bool {
 	// cond:
 	// result: (LessThan (CMPW (SignExt8to32 x) (SignExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64LessThan)
@@ -2663,6 +2757,7 @@ func rewriteValuePPC64_OpLess8U_0(v *Value) bool {
 	// cond:
 	// result: (LessThan (CMPWU (ZeroExt8to32 x) (ZeroExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64LessThan)
@@ -2687,6 +2782,7 @@ func rewriteValuePPC64_OpLoad_0(v *Value) bool {
 	// result: (MOVDload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is64BitInt(t) || isPtr(t)) {
@@ -2702,6 +2798,7 @@ func rewriteValuePPC64_OpLoad_0(v *Value) bool {
 	// result: (MOVWload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is32BitInt(t) && isSigned(t)) {
@@ -2717,6 +2814,7 @@ func rewriteValuePPC64_OpLoad_0(v *Value) bool {
 	// result: (MOVWZload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is32BitInt(t) && !isSigned(t)) {
@@ -2732,6 +2830,7 @@ func rewriteValuePPC64_OpLoad_0(v *Value) bool {
 	// result: (MOVHload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is16BitInt(t) && isSigned(t)) {
@@ -2747,6 +2846,7 @@ func rewriteValuePPC64_OpLoad_0(v *Value) bool {
 	// result: (MOVHZload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is16BitInt(t) && !isSigned(t)) {
@@ -2762,6 +2862,7 @@ func rewriteValuePPC64_OpLoad_0(v *Value) bool {
 	// result: (MOVBZload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.IsBoolean()) {
@@ -2777,6 +2878,7 @@ func rewriteValuePPC64_OpLoad_0(v *Value) bool {
 	// result: (MOVBreg (MOVBZload ptr mem))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is8BitInt(t) && isSigned(t)) {
@@ -2794,6 +2896,7 @@ func rewriteValuePPC64_OpLoad_0(v *Value) bool {
 	// result: (MOVBZload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is8BitInt(t) && !isSigned(t)) {
@@ -2809,6 +2912,7 @@ func rewriteValuePPC64_OpLoad_0(v *Value) bool {
 	// result: (FMOVSload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is32BitFloat(t)) {
@@ -2824,6 +2928,7 @@ func rewriteValuePPC64_OpLoad_0(v *Value) bool {
 	// result: (FMOVDload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is64BitFloat(t)) {
@@ -2845,6 +2950,7 @@ func rewriteValuePPC64_OpLsh16x16_0(v *Value) bool {
 	// cond:
 	// result: (SLW  x                 (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-16] (ZeroExt16to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SLW)
@@ -2872,6 +2978,7 @@ func rewriteValuePPC64_OpLsh16x32_0(v *Value) bool {
 	// cond: uint32(c) < 16
 	// result: (SLWconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -2890,6 +2997,7 @@ func rewriteValuePPC64_OpLsh16x32_0(v *Value) bool {
 	// cond: uint32(c) < 16
 	// result: (SLWconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -2908,6 +3016,7 @@ func rewriteValuePPC64_OpLsh16x32_0(v *Value) bool {
 	// cond:
 	// result: (SLW  x                 (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-16] (ZeroExt32to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SLW)
@@ -2935,6 +3044,7 @@ func rewriteValuePPC64_OpLsh16x64_0(v *Value) bool {
 	// cond: uint64(c) < 16
 	// result: (SLWconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -2953,6 +3063,7 @@ func rewriteValuePPC64_OpLsh16x64_0(v *Value) bool {
 	// cond: uint64(c) >= 16
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -2969,6 +3080,7 @@ func rewriteValuePPC64_OpLsh16x64_0(v *Value) bool {
 	// cond: uint64(c) < 16
 	// result: (SLWconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -2987,6 +3099,7 @@ func rewriteValuePPC64_OpLsh16x64_0(v *Value) bool {
 	// cond:
 	// result: (SLW  x                 (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-16] y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SLW)
@@ -3012,6 +3125,7 @@ func rewriteValuePPC64_OpLsh16x8_0(v *Value) bool {
 	// cond:
 	// result: (SLW  x                 (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-16] (ZeroExt8to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SLW)
@@ -3039,6 +3153,7 @@ func rewriteValuePPC64_OpLsh32x16_0(v *Value) bool {
 	// cond:
 	// result: (SLW x  (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-32] (ZeroExt16to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SLW)
@@ -3066,6 +3181,7 @@ func rewriteValuePPC64_OpLsh32x32_0(v *Value) bool {
 	// cond: uint32(c) < 32
 	// result: (SLWconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -3084,6 +3200,7 @@ func rewriteValuePPC64_OpLsh32x32_0(v *Value) bool {
 	// cond: uint32(c) < 32
 	// result: (SLWconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -3102,6 +3219,7 @@ func rewriteValuePPC64_OpLsh32x32_0(v *Value) bool {
 	// cond:
 	// result: (SLW x  (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-32] (ZeroExt32to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SLW)
@@ -3129,6 +3247,7 @@ func rewriteValuePPC64_OpLsh32x64_0(v *Value) bool {
 	// cond: uint64(c) < 32
 	// result: (SLWconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -3147,6 +3266,7 @@ func rewriteValuePPC64_OpLsh32x64_0(v *Value) bool {
 	// cond: uint64(c) >= 32
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -3163,6 +3283,7 @@ func rewriteValuePPC64_OpLsh32x64_0(v *Value) bool {
 	// cond: uint64(c) < 32
 	// result: (SLWconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -3181,6 +3302,7 @@ func rewriteValuePPC64_OpLsh32x64_0(v *Value) bool {
 	// cond:
 	// result: (SLW  x (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-32] y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SLW)
@@ -3206,6 +3328,7 @@ func rewriteValuePPC64_OpLsh32x8_0(v *Value) bool {
 	// cond:
 	// result: (SLW x  (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-32] (ZeroExt8to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SLW)
@@ -3233,6 +3356,7 @@ func rewriteValuePPC64_OpLsh64x16_0(v *Value) bool {
 	// cond:
 	// result: (SLD x  (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-64] (ZeroExt16to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SLD)
@@ -3260,6 +3384,7 @@ func rewriteValuePPC64_OpLsh64x32_0(v *Value) bool {
 	// cond: uint32(c) < 64
 	// result: (SLDconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -3278,6 +3403,7 @@ func rewriteValuePPC64_OpLsh64x32_0(v *Value) bool {
 	// cond: uint32(c) < 64
 	// result: (SLDconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -3296,6 +3422,7 @@ func rewriteValuePPC64_OpLsh64x32_0(v *Value) bool {
 	// cond:
 	// result: (SLD x  (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-64] (ZeroExt32to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SLD)
@@ -3323,6 +3450,7 @@ func rewriteValuePPC64_OpLsh64x64_0(v *Value) bool {
 	// cond: uint64(c) < 64
 	// result: (SLDconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -3341,6 +3469,7 @@ func rewriteValuePPC64_OpLsh64x64_0(v *Value) bool {
 	// cond: uint64(c) >= 64
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -3357,6 +3486,7 @@ func rewriteValuePPC64_OpLsh64x64_0(v *Value) bool {
 	// cond: uint64(c) < 64
 	// result: (SLDconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -3375,6 +3505,7 @@ func rewriteValuePPC64_OpLsh64x64_0(v *Value) bool {
 	// cond:
 	// result: (SLD  x (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-64] y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SLD)
@@ -3400,6 +3531,7 @@ func rewriteValuePPC64_OpLsh64x8_0(v *Value) bool {
 	// cond:
 	// result: (SLD x  (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-64] (ZeroExt8to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SLD)
@@ -3427,6 +3559,7 @@ func rewriteValuePPC64_OpLsh8x16_0(v *Value) bool {
 	// cond:
 	// result: (SLW  x                (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-8] (ZeroExt16to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SLW)
@@ -3454,6 +3587,7 @@ func rewriteValuePPC64_OpLsh8x32_0(v *Value) bool {
 	// cond: uint32(c) < 8
 	// result: (SLWconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -3472,6 +3606,7 @@ func rewriteValuePPC64_OpLsh8x32_0(v *Value) bool {
 	// cond: uint32(c) < 8
 	// result: (SLWconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -3490,6 +3625,7 @@ func rewriteValuePPC64_OpLsh8x32_0(v *Value) bool {
 	// cond:
 	// result: (SLW  x                (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-8] (ZeroExt32to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SLW)
@@ -3517,6 +3653,7 @@ func rewriteValuePPC64_OpLsh8x64_0(v *Value) bool {
 	// cond: uint64(c) < 8
 	// result: (SLWconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -3535,6 +3672,7 @@ func rewriteValuePPC64_OpLsh8x64_0(v *Value) bool {
 	// cond: uint64(c) >= 8
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -3551,6 +3689,7 @@ func rewriteValuePPC64_OpLsh8x64_0(v *Value) bool {
 	// cond: uint64(c) < 8
 	// result: (SLWconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -3569,6 +3708,7 @@ func rewriteValuePPC64_OpLsh8x64_0(v *Value) bool {
 	// cond:
 	// result: (SLW  x                (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-8] y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SLW)
@@ -3594,6 +3734,7 @@ func rewriteValuePPC64_OpLsh8x8_0(v *Value) bool {
 	// cond:
 	// result: (SLW  x                (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-8] (ZeroExt8to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SLW)
@@ -3621,6 +3762,7 @@ func rewriteValuePPC64_OpMod16_0(v *Value) bool {
 	// cond:
 	// result: (Mod32 (SignExt16to32 x) (SignExt16to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMod32)
@@ -3642,6 +3784,7 @@ func rewriteValuePPC64_OpMod16u_0(v *Value) bool {
 	// cond:
 	// result: (Mod32u (ZeroExt16to32 x) (ZeroExt16to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMod32u)
@@ -3663,6 +3806,7 @@ func rewriteValuePPC64_OpMod32_0(v *Value) bool {
 	// cond:
 	// result: (SUB x (MULLW y (DIVW x y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SUB)
@@ -3686,6 +3830,7 @@ func rewriteValuePPC64_OpMod32u_0(v *Value) bool {
 	// cond:
 	// result: (SUB x (MULLW y (DIVWU x y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SUB)
@@ -3709,6 +3854,7 @@ func rewriteValuePPC64_OpMod64_0(v *Value) bool {
 	// cond:
 	// result: (SUB x (MULLD y (DIVD x y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SUB)
@@ -3732,6 +3878,7 @@ func rewriteValuePPC64_OpMod64u_0(v *Value) bool {
 	// cond:
 	// result: (SUB x (MULLD y (DIVDU x y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SUB)
@@ -3755,6 +3902,7 @@ func rewriteValuePPC64_OpMod8_0(v *Value) bool {
 	// cond:
 	// result: (Mod32 (SignExt8to32 x) (SignExt8to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMod32)
@@ -3776,6 +3924,7 @@ func rewriteValuePPC64_OpMod8u_0(v *Value) bool {
 	// cond:
 	// result: (Mod32u (ZeroExt8to32 x) (ZeroExt8to32 y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpMod32u)
@@ -3800,6 +3949,7 @@ func rewriteValuePPC64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 0 {
 			break
 		}
+		_ = v.Args[2]
 		mem := v.Args[2]
 		v.reset(OpCopy)
 		v.Type = mem.Type
@@ -3813,6 +3963,7 @@ func rewriteValuePPC64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 1 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -3832,6 +3983,7 @@ func rewriteValuePPC64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 2 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -3851,6 +4003,7 @@ func rewriteValuePPC64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 4 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -3871,6 +4024,7 @@ func rewriteValuePPC64_OpMove_0(v *Value) bool {
 			break
 		}
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -3893,6 +4047,7 @@ func rewriteValuePPC64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 8 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -3921,6 +4076,7 @@ func rewriteValuePPC64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 3 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -3949,6 +4105,7 @@ func rewriteValuePPC64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 5 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -3977,6 +4134,7 @@ func rewriteValuePPC64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 6 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -4005,6 +4163,7 @@ func rewriteValuePPC64_OpMove_0(v *Value) bool {
 		if v.AuxInt != 7 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -4043,6 +4202,7 @@ func rewriteValuePPC64_OpMove_10(v *Value) bool {
 	// result: (LoweredMove [s] dst src mem)
 	for {
 		s := v.AuxInt
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -4063,6 +4223,7 @@ func rewriteValuePPC64_OpMul16_0(v *Value) bool {
 	// cond:
 	// result: (MULLW x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64MULLW)
@@ -4076,6 +4237,7 @@ func rewriteValuePPC64_OpMul32_0(v *Value) bool {
 	// cond:
 	// result: (MULLW  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64MULLW)
@@ -4089,6 +4251,7 @@ func rewriteValuePPC64_OpMul32F_0(v *Value) bool {
 	// cond:
 	// result: (FMULS x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64FMULS)
@@ -4102,6 +4265,7 @@ func rewriteValuePPC64_OpMul64_0(v *Value) bool {
 	// cond:
 	// result: (MULLD  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64MULLD)
@@ -4115,6 +4279,7 @@ func rewriteValuePPC64_OpMul64F_0(v *Value) bool {
 	// cond:
 	// result: (FMUL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64FMUL)
@@ -4128,6 +4293,7 @@ func rewriteValuePPC64_OpMul8_0(v *Value) bool {
 	// cond:
 	// result: (MULLW x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64MULLW)
@@ -4211,6 +4377,7 @@ func rewriteValuePPC64_OpNeq16_0(v *Value) bool {
 	// cond: isSigned(x.Type) && isSigned(y.Type)
 	// result: (NotEqual (CMPW (SignExt16to32 x) (SignExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		if !(isSigned(x.Type) && isSigned(y.Type)) {
@@ -4231,6 +4398,7 @@ func rewriteValuePPC64_OpNeq16_0(v *Value) bool {
 	// cond:
 	// result: (NotEqual (CMPW (ZeroExt16to32 x) (ZeroExt16to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64NotEqual)
@@ -4252,6 +4420,7 @@ func rewriteValuePPC64_OpNeq32_0(v *Value) bool {
 	// cond:
 	// result: (NotEqual (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64NotEqual)
@@ -4269,6 +4438,7 @@ func rewriteValuePPC64_OpNeq32F_0(v *Value) bool {
 	// cond:
 	// result: (NotEqual (FCMPU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64NotEqual)
@@ -4286,6 +4456,7 @@ func rewriteValuePPC64_OpNeq64_0(v *Value) bool {
 	// cond:
 	// result: (NotEqual (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64NotEqual)
@@ -4303,6 +4474,7 @@ func rewriteValuePPC64_OpNeq64F_0(v *Value) bool {
 	// cond:
 	// result: (NotEqual (FCMPU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64NotEqual)
@@ -4322,6 +4494,7 @@ func rewriteValuePPC64_OpNeq8_0(v *Value) bool {
 	// cond: isSigned(x.Type) && isSigned(y.Type)
 	// result: (NotEqual (CMPW (SignExt8to32 x) (SignExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		if !(isSigned(x.Type) && isSigned(y.Type)) {
@@ -4342,6 +4515,7 @@ func rewriteValuePPC64_OpNeq8_0(v *Value) bool {
 	// cond:
 	// result: (NotEqual (CMPW (ZeroExt8to32 x) (ZeroExt8to32 y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64NotEqual)
@@ -4361,6 +4535,7 @@ func rewriteValuePPC64_OpNeqB_0(v *Value) bool {
 	// cond:
 	// result: (XOR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64XOR)
@@ -4376,6 +4551,7 @@ func rewriteValuePPC64_OpNeqPtr_0(v *Value) bool {
 	// cond:
 	// result: (NotEqual (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64NotEqual)
@@ -4391,6 +4567,7 @@ func rewriteValuePPC64_OpNilCheck_0(v *Value) bool {
 	// cond:
 	// result: (LoweredNilCheck ptr mem)
 	for {
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpPPC64LoweredNilCheck)
@@ -4435,6 +4612,7 @@ func rewriteValuePPC64_OpOr16_0(v *Value) bool {
 	// cond:
 	// result: (OR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64OR)
@@ -4448,6 +4626,7 @@ func rewriteValuePPC64_OpOr32_0(v *Value) bool {
 	// cond:
 	// result: (OR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64OR)
@@ -4461,6 +4640,7 @@ func rewriteValuePPC64_OpOr64_0(v *Value) bool {
 	// cond:
 	// result: (OR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64OR)
@@ -4474,6 +4654,7 @@ func rewriteValuePPC64_OpOr8_0(v *Value) bool {
 	// cond:
 	// result: (OR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64OR)
@@ -4487,6 +4668,7 @@ func rewriteValuePPC64_OpOrB_0(v *Value) bool {
 	// cond:
 	// result: (OR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64OR)
@@ -4500,6 +4682,7 @@ func rewriteValuePPC64_OpPPC64ADD_0(v *Value) bool {
 	// cond: d == 64-c
 	// result: (ROTLconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64SLDconst {
 			break
@@ -4526,6 +4709,7 @@ func rewriteValuePPC64_OpPPC64ADD_0(v *Value) bool {
 	// cond: d == 64-c
 	// result: (ROTLconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64SRDconst {
 			break
@@ -4552,6 +4736,7 @@ func rewriteValuePPC64_OpPPC64ADD_0(v *Value) bool {
 	// cond: d == 32-c
 	// result: (ROTLWconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64SLWconst {
 			break
@@ -4578,6 +4763,7 @@ func rewriteValuePPC64_OpPPC64ADD_0(v *Value) bool {
 	// cond: d == 32-c
 	// result: (ROTLWconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64SRWconst {
 			break
@@ -4604,6 +4790,7 @@ func rewriteValuePPC64_OpPPC64ADD_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (ADDconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -4622,6 +4809,7 @@ func rewriteValuePPC64_OpPPC64ADD_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (ADDconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDconst {
 			break
@@ -4696,11 +4884,13 @@ func rewriteValuePPC64_OpPPC64AND_0(v *Value) bool {
 	// cond:
 	// result: (ANDN x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64NOR {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		if y != v_1.Args[1] {
 			break
@@ -4714,10 +4904,12 @@ func rewriteValuePPC64_OpPPC64AND_0(v *Value) bool {
 	// cond:
 	// result: (ANDN x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64NOR {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		if y != v_0.Args[1] {
 			break
@@ -4732,6 +4924,7 @@ func rewriteValuePPC64_OpPPC64AND_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [c&d])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDconst {
 			break
@@ -4750,6 +4943,7 @@ func rewriteValuePPC64_OpPPC64AND_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [c&d])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDconst {
 			break
@@ -4768,6 +4962,7 @@ func rewriteValuePPC64_OpPPC64AND_0(v *Value) bool {
 	// cond: isU16Bit(c)
 	// result: (ANDconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -4786,6 +4981,7 @@ func rewriteValuePPC64_OpPPC64AND_0(v *Value) bool {
 	// cond: isU16Bit(c)
 	// result: (ANDconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDconst {
 			break
@@ -4804,6 +5000,7 @@ func rewriteValuePPC64_OpPPC64AND_0(v *Value) bool {
 	// cond:
 	// result: (ANDconst [c&0xFF] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDconst {
 			break
@@ -4813,6 +5010,7 @@ func rewriteValuePPC64_OpPPC64AND_0(v *Value) bool {
 		if x.Op != OpPPC64MOVBZload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpPPC64ANDconst)
 		v.AuxInt = c & 0xFF
 		v.AddArg(x)
@@ -4822,10 +5020,12 @@ func rewriteValuePPC64_OpPPC64AND_0(v *Value) bool {
 	// cond:
 	// result: (ANDconst [c&0xFF] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x.Op != OpPPC64MOVBZload {
 			break
 		}
+		_ = x.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
 			break
@@ -4840,10 +5040,12 @@ func rewriteValuePPC64_OpPPC64AND_0(v *Value) bool {
 	// cond:
 	// result: (ANDconst [c&0xFF] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x.Op != OpPPC64MOVBZload {
 			break
 		}
+		_ = x.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
 			break
@@ -4858,6 +5060,7 @@ func rewriteValuePPC64_OpPPC64AND_0(v *Value) bool {
 	// cond:
 	// result: (ANDconst [c&0xFF] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDconst {
 			break
@@ -4867,6 +5070,7 @@ func rewriteValuePPC64_OpPPC64AND_0(v *Value) bool {
 		if x.Op != OpPPC64MOVBZload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpPPC64ANDconst)
 		v.AuxInt = c & 0xFF
 		v.AddArg(x)
@@ -5020,6 +5224,7 @@ func rewriteValuePPC64_OpPPC64CMP_0(v *Value) bool {
 	// cond: is16Bit(c)
 	// result: (CMPconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -5038,6 +5243,7 @@ func rewriteValuePPC64_OpPPC64CMP_0(v *Value) bool {
 	// cond: is16Bit(c)
 	// result: (InvertFlags (CMPconst y [c]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDconst {
 			break
@@ -5063,6 +5269,7 @@ func rewriteValuePPC64_OpPPC64CMPU_0(v *Value) bool {
 	// cond: isU16Bit(c)
 	// result: (CMPUconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -5081,6 +5288,7 @@ func rewriteValuePPC64_OpPPC64CMPU_0(v *Value) bool {
 	// cond: isU16Bit(c)
 	// result: (InvertFlags (CMPUconst y [c]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDconst {
 			break
@@ -5157,6 +5365,7 @@ func rewriteValuePPC64_OpPPC64CMPW_0(v *Value) bool {
 	// cond:
 	// result: (CMPW x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVWreg {
@@ -5172,6 +5381,7 @@ func rewriteValuePPC64_OpPPC64CMPW_0(v *Value) bool {
 	// cond:
 	// result: (CMPW x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVWreg {
 			break
@@ -5187,6 +5397,7 @@ func rewriteValuePPC64_OpPPC64CMPW_0(v *Value) bool {
 	// cond: is16Bit(c)
 	// result: (CMPWconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -5205,6 +5416,7 @@ func rewriteValuePPC64_OpPPC64CMPW_0(v *Value) bool {
 	// cond: is16Bit(c)
 	// result: (InvertFlags (CMPWconst y [c]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDconst {
 			break
@@ -5230,6 +5442,7 @@ func rewriteValuePPC64_OpPPC64CMPWU_0(v *Value) bool {
 	// cond:
 	// result: (CMPWU x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVWZreg {
@@ -5245,6 +5458,7 @@ func rewriteValuePPC64_OpPPC64CMPWU_0(v *Value) bool {
 	// cond:
 	// result: (CMPWU x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVWZreg {
 			break
@@ -5260,6 +5474,7 @@ func rewriteValuePPC64_OpPPC64CMPWU_0(v *Value) bool {
 	// cond: isU16Bit(c)
 	// result: (CMPWUconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -5278,6 +5493,7 @@ func rewriteValuePPC64_OpPPC64CMPWU_0(v *Value) bool {
 	// cond: isU16Bit(c)
 	// result: (InvertFlags (CMPWUconst y [c]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDconst {
 			break
@@ -5506,10 +5722,12 @@ func rewriteValuePPC64_OpPPC64FADD_0(v *Value) bool {
 	// cond:
 	// result: (FMADD x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64FMUL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		z := v.Args[1]
@@ -5523,11 +5741,13 @@ func rewriteValuePPC64_OpPPC64FADD_0(v *Value) bool {
 	// cond:
 	// result: (FMADD x y z)
 	for {
+		_ = v.Args[1]
 		z := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64FMUL {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		y := v_1.Args[1]
 		v.reset(OpPPC64FMADD)
@@ -5543,10 +5763,12 @@ func rewriteValuePPC64_OpPPC64FADDS_0(v *Value) bool {
 	// cond:
 	// result: (FMADDS x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64FMULS {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		z := v.Args[1]
@@ -5560,11 +5782,13 @@ func rewriteValuePPC64_OpPPC64FADDS_0(v *Value) bool {
 	// cond:
 	// result: (FMADDS x y z)
 	for {
+		_ = v.Args[1]
 		z := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64FMULS {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		y := v_1.Args[1]
 		v.reset(OpPPC64FMADDS)
@@ -5582,6 +5806,7 @@ func rewriteValuePPC64_OpPPC64FMOVDload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDaddr {
 			break
@@ -5606,6 +5831,7 @@ func rewriteValuePPC64_OpPPC64FMOVDload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64ADDconst {
 			break
@@ -5632,6 +5858,7 @@ func rewriteValuePPC64_OpPPC64FMOVDstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64ADDconst {
 			break
@@ -5657,6 +5884,7 @@ func rewriteValuePPC64_OpPPC64FMOVDstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDaddr {
 			break
@@ -5686,6 +5914,7 @@ func rewriteValuePPC64_OpPPC64FMOVSload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDaddr {
 			break
@@ -5710,6 +5939,7 @@ func rewriteValuePPC64_OpPPC64FMOVSload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64ADDconst {
 			break
@@ -5736,6 +5966,7 @@ func rewriteValuePPC64_OpPPC64FMOVSstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64ADDconst {
 			break
@@ -5761,6 +5992,7 @@ func rewriteValuePPC64_OpPPC64FMOVSstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDaddr {
 			break
@@ -5788,10 +6020,12 @@ func rewriteValuePPC64_OpPPC64FSUB_0(v *Value) bool {
 	// cond:
 	// result: (FMSUB x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64FMUL {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		z := v.Args[1]
@@ -5808,10 +6042,12 @@ func rewriteValuePPC64_OpPPC64FSUBS_0(v *Value) bool {
 	// cond:
 	// result: (FMSUBS x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64FMULS {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		z := v.Args[1]
@@ -6038,6 +6274,7 @@ func rewriteValuePPC64_OpPPC64MOVBZload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDaddr {
 			break
@@ -6062,6 +6299,7 @@ func rewriteValuePPC64_OpPPC64MOVBZload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64ADDconst {
 			break
@@ -6133,6 +6371,7 @@ func rewriteValuePPC64_OpPPC64MOVBZreg_0(v *Value) bool {
 		if x.Op != OpPPC64MOVBZload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpCopy)
 		v.Type = x.Type
 		v.AddArg(x)
@@ -6219,6 +6458,7 @@ func rewriteValuePPC64_OpPPC64MOVBstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64ADDconst {
 			break
@@ -6244,6 +6484,7 @@ func rewriteValuePPC64_OpPPC64MOVBstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDaddr {
 			break
@@ -6270,6 +6511,7 @@ func rewriteValuePPC64_OpPPC64MOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -6293,6 +6535,7 @@ func rewriteValuePPC64_OpPPC64MOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVBreg {
@@ -6314,6 +6557,7 @@ func rewriteValuePPC64_OpPPC64MOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVBZreg {
@@ -6338,6 +6582,7 @@ func rewriteValuePPC64_OpPPC64MOVBstorezero_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64ADDconst {
 			break
@@ -6361,6 +6606,7 @@ func rewriteValuePPC64_OpPPC64MOVBstorezero_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDaddr {
 			break
@@ -6388,6 +6634,7 @@ func rewriteValuePPC64_OpPPC64MOVDload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDaddr {
 			break
@@ -6412,6 +6659,7 @@ func rewriteValuePPC64_OpPPC64MOVDload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64ADDconst {
 			break
@@ -6438,6 +6686,7 @@ func rewriteValuePPC64_OpPPC64MOVDstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64ADDconst {
 			break
@@ -6463,6 +6712,7 @@ func rewriteValuePPC64_OpPPC64MOVDstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDaddr {
 			break
@@ -6489,6 +6739,7 @@ func rewriteValuePPC64_OpPPC64MOVDstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -6515,6 +6766,7 @@ func rewriteValuePPC64_OpPPC64MOVDstorezero_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64ADDconst {
 			break
@@ -6538,6 +6790,7 @@ func rewriteValuePPC64_OpPPC64MOVDstorezero_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDaddr {
 			break
@@ -6565,6 +6818,7 @@ func rewriteValuePPC64_OpPPC64MOVHZload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDaddr {
 			break
@@ -6589,6 +6843,7 @@ func rewriteValuePPC64_OpPPC64MOVHZload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64ADDconst {
 			break
@@ -6673,6 +6928,7 @@ func rewriteValuePPC64_OpPPC64MOVHZreg_0(v *Value) bool {
 		if x.Op != OpPPC64MOVHZload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpCopy)
 		v.Type = x.Type
 		v.AddArg(x)
@@ -6700,6 +6956,7 @@ func rewriteValuePPC64_OpPPC64MOVHload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDaddr {
 			break
@@ -6724,6 +6981,7 @@ func rewriteValuePPC64_OpPPC64MOVHload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64ADDconst {
 			break
@@ -6808,6 +7066,7 @@ func rewriteValuePPC64_OpPPC64MOVHreg_0(v *Value) bool {
 		if x.Op != OpPPC64MOVHload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpCopy)
 		v.Type = x.Type
 		v.AddArg(x)
@@ -6835,6 +7094,7 @@ func rewriteValuePPC64_OpPPC64MOVHstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64ADDconst {
 			break
@@ -6860,6 +7120,7 @@ func rewriteValuePPC64_OpPPC64MOVHstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDaddr {
 			break
@@ -6886,6 +7147,7 @@ func rewriteValuePPC64_OpPPC64MOVHstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -6909,6 +7171,7 @@ func rewriteValuePPC64_OpPPC64MOVHstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVHreg {
@@ -6930,6 +7193,7 @@ func rewriteValuePPC64_OpPPC64MOVHstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVHZreg {
@@ -6954,6 +7218,7 @@ func rewriteValuePPC64_OpPPC64MOVHstorezero_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64ADDconst {
 			break
@@ -6977,6 +7242,7 @@ func rewriteValuePPC64_OpPPC64MOVHstorezero_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDaddr {
 			break
@@ -7004,6 +7270,7 @@ func rewriteValuePPC64_OpPPC64MOVWZload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDaddr {
 			break
@@ -7028,6 +7295,7 @@ func rewriteValuePPC64_OpPPC64MOVWZload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64ADDconst {
 			break
@@ -7073,6 +7341,7 @@ func rewriteValuePPC64_OpPPC64MOVWZreg_0(v *Value) bool {
 		if y.Op != OpPPC64AND {
 			break
 		}
+		_ = y.Args[1]
 		y_0 := y.Args[0]
 		if y_0.Op != OpPPC64MOVDconst {
 			break
@@ -7094,6 +7363,7 @@ func rewriteValuePPC64_OpPPC64MOVWZreg_0(v *Value) bool {
 		if y.Op != OpPPC64AND {
 			break
 		}
+		_ = y.Args[1]
 		y_1 := y.Args[1]
 		if y_1.Op != OpPPC64MOVDconst {
 			break
@@ -7168,6 +7438,7 @@ func rewriteValuePPC64_OpPPC64MOVWload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDaddr {
 			break
@@ -7192,6 +7463,7 @@ func rewriteValuePPC64_OpPPC64MOVWload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64ADDconst {
 			break
@@ -7237,6 +7509,7 @@ func rewriteValuePPC64_OpPPC64MOVWreg_0(v *Value) bool {
 		if y.Op != OpPPC64AND {
 			break
 		}
+		_ = y.Args[1]
 		y_0 := y.Args[0]
 		if y_0.Op != OpPPC64MOVDconst {
 			break
@@ -7258,6 +7531,7 @@ func rewriteValuePPC64_OpPPC64MOVWreg_0(v *Value) bool {
 		if y.Op != OpPPC64AND {
 			break
 		}
+		_ = y.Args[1]
 		y_1 := y.Args[1]
 		if y_1.Op != OpPPC64MOVDconst {
 			break
@@ -7332,6 +7606,7 @@ func rewriteValuePPC64_OpPPC64MOVWstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64ADDconst {
 			break
@@ -7357,6 +7632,7 @@ func rewriteValuePPC64_OpPPC64MOVWstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDaddr {
 			break
@@ -7383,6 +7659,7 @@ func rewriteValuePPC64_OpPPC64MOVWstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -7406,6 +7683,7 @@ func rewriteValuePPC64_OpPPC64MOVWstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVWreg {
@@ -7427,6 +7705,7 @@ func rewriteValuePPC64_OpPPC64MOVWstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVWZreg {
@@ -7451,6 +7730,7 @@ func rewriteValuePPC64_OpPPC64MOVWstorezero_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64ADDconst {
 			break
@@ -7474,6 +7754,7 @@ func rewriteValuePPC64_OpPPC64MOVWstorezero_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDaddr {
 			break
@@ -7575,6 +7856,7 @@ func rewriteValuePPC64_OpPPC64OR_0(v *Value) bool {
 	// cond: d == 64-c
 	// result: (ROTLconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64SLDconst {
 			break
@@ -7601,6 +7883,7 @@ func rewriteValuePPC64_OpPPC64OR_0(v *Value) bool {
 	// cond: d == 64-c
 	// result: (ROTLconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64SRDconst {
 			break
@@ -7627,6 +7910,7 @@ func rewriteValuePPC64_OpPPC64OR_0(v *Value) bool {
 	// cond: d == 32-c
 	// result: (ROTLWconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64SLWconst {
 			break
@@ -7653,6 +7937,7 @@ func rewriteValuePPC64_OpPPC64OR_0(v *Value) bool {
 	// cond: d == 32-c
 	// result: (ROTLWconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64SRWconst {
 			break
@@ -7679,6 +7964,7 @@ func rewriteValuePPC64_OpPPC64OR_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [c|d])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDconst {
 			break
@@ -7697,6 +7983,7 @@ func rewriteValuePPC64_OpPPC64OR_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [c|d])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDconst {
 			break
@@ -7715,6 +8002,7 @@ func rewriteValuePPC64_OpPPC64OR_0(v *Value) bool {
 	// cond: isU32Bit(c)
 	// result: (ORconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -7733,6 +8021,7 @@ func rewriteValuePPC64_OpPPC64OR_0(v *Value) bool {
 	// cond: isU32Bit(c)
 	// result: (ORconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDconst {
 			break
@@ -7754,6 +8043,7 @@ func rewriteValuePPC64_OpPPC64ORN_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -7817,6 +8107,7 @@ func rewriteValuePPC64_OpPPC64SUB_0(v *Value) bool {
 	// cond: is32Bit(-c)
 	// result: (ADDconst [-c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -7838,6 +8129,7 @@ func rewriteValuePPC64_OpPPC64XOR_0(v *Value) bool {
 	// cond: d == 64-c
 	// result: (ROTLconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64SLDconst {
 			break
@@ -7864,6 +8156,7 @@ func rewriteValuePPC64_OpPPC64XOR_0(v *Value) bool {
 	// cond: d == 64-c
 	// result: (ROTLconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64SRDconst {
 			break
@@ -7890,6 +8183,7 @@ func rewriteValuePPC64_OpPPC64XOR_0(v *Value) bool {
 	// cond: d == 32-c
 	// result: (ROTLWconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64SLWconst {
 			break
@@ -7916,6 +8210,7 @@ func rewriteValuePPC64_OpPPC64XOR_0(v *Value) bool {
 	// cond: d == 32-c
 	// result: (ROTLWconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64SRWconst {
 			break
@@ -7942,6 +8237,7 @@ func rewriteValuePPC64_OpPPC64XOR_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [c^d])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDconst {
 			break
@@ -7960,6 +8256,7 @@ func rewriteValuePPC64_OpPPC64XOR_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [c^d])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDconst {
 			break
@@ -7978,6 +8275,7 @@ func rewriteValuePPC64_OpPPC64XOR_0(v *Value) bool {
 	// cond: isU32Bit(c)
 	// result: (XORconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -7996,6 +8294,7 @@ func rewriteValuePPC64_OpPPC64XOR_0(v *Value) bool {
 	// cond: isU32Bit(c)
 	// result: (XORconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpPPC64MOVDconst {
 			break
@@ -8137,6 +8436,7 @@ func rewriteValuePPC64_OpRsh16Ux16_0(v *Value) bool {
 	// cond:
 	// result: (SRW  (ZeroExt16to32 x) (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-16] (ZeroExt16to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRW)
@@ -8166,6 +8466,7 @@ func rewriteValuePPC64_OpRsh16Ux32_0(v *Value) bool {
 	// cond: uint32(c) < 16
 	// result: (SRWconst (ZeroExt16to32 x) [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -8186,6 +8487,7 @@ func rewriteValuePPC64_OpRsh16Ux32_0(v *Value) bool {
 	// cond: uint32(c) < 16
 	// result: (SRWconst (ZeroExt16to32 x) [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -8206,6 +8508,7 @@ func rewriteValuePPC64_OpRsh16Ux32_0(v *Value) bool {
 	// cond:
 	// result: (SRW  (ZeroExt16to32 x) (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-16] (ZeroExt32to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRW)
@@ -8235,6 +8538,7 @@ func rewriteValuePPC64_OpRsh16Ux64_0(v *Value) bool {
 	// cond: uint64(c) < 16
 	// result: (SRWconst (ZeroExt16to32 x) [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -8255,6 +8559,7 @@ func rewriteValuePPC64_OpRsh16Ux64_0(v *Value) bool {
 	// cond: uint64(c) >= 16
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -8271,6 +8576,7 @@ func rewriteValuePPC64_OpRsh16Ux64_0(v *Value) bool {
 	// cond: uint64(c) < 16
 	// result: (SRWconst (ZeroExt16to32 x) [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -8291,6 +8597,7 @@ func rewriteValuePPC64_OpRsh16Ux64_0(v *Value) bool {
 	// cond:
 	// result: (SRW  (ZeroExt16to32 x) (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-16] y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRW)
@@ -8318,6 +8625,7 @@ func rewriteValuePPC64_OpRsh16Ux8_0(v *Value) bool {
 	// cond:
 	// result: (SRW  (ZeroExt16to32 x) (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-16] (ZeroExt8to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRW)
@@ -8347,6 +8655,7 @@ func rewriteValuePPC64_OpRsh16x16_0(v *Value) bool {
 	// cond:
 	// result: (SRAW (SignExt16to32 x) (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-16] (ZeroExt16to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRAW)
@@ -8376,6 +8685,7 @@ func rewriteValuePPC64_OpRsh16x32_0(v *Value) bool {
 	// cond: uint32(c) < 16
 	// result: (SRAWconst (SignExt16to32 x) [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -8396,6 +8706,7 @@ func rewriteValuePPC64_OpRsh16x32_0(v *Value) bool {
 	// cond: uint32(c) < 16
 	// result: (SRAWconst (SignExt16to32 x) [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -8416,6 +8727,7 @@ func rewriteValuePPC64_OpRsh16x32_0(v *Value) bool {
 	// cond:
 	// result: (SRAW (SignExt16to32 x) (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-16] (ZeroExt32to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRAW)
@@ -8445,6 +8757,7 @@ func rewriteValuePPC64_OpRsh16x64_0(v *Value) bool {
 	// cond: uint64(c) < 16
 	// result: (SRAWconst (SignExt16to32 x) [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -8465,6 +8778,7 @@ func rewriteValuePPC64_OpRsh16x64_0(v *Value) bool {
 	// cond: uint64(c) >= 16
 	// result: (SRAWconst (SignExt16to32 x) [63])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -8485,6 +8799,7 @@ func rewriteValuePPC64_OpRsh16x64_0(v *Value) bool {
 	// cond: uint64(c) < 16
 	// result: (SRAWconst (SignExt16to32 x) [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -8505,6 +8820,7 @@ func rewriteValuePPC64_OpRsh16x64_0(v *Value) bool {
 	// cond:
 	// result: (SRAW (SignExt16to32 x) (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-16] y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRAW)
@@ -8532,6 +8848,7 @@ func rewriteValuePPC64_OpRsh16x8_0(v *Value) bool {
 	// cond:
 	// result: (SRAW (SignExt16to32 x) (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-16] (ZeroExt8to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRAW)
@@ -8561,6 +8878,7 @@ func rewriteValuePPC64_OpRsh32Ux16_0(v *Value) bool {
 	// cond:
 	// result: (SRW x  (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-32] (ZeroExt16to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRW)
@@ -8588,6 +8906,7 @@ func rewriteValuePPC64_OpRsh32Ux32_0(v *Value) bool {
 	// cond: uint32(c) < 32
 	// result: (SRWconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -8606,6 +8925,7 @@ func rewriteValuePPC64_OpRsh32Ux32_0(v *Value) bool {
 	// cond: uint32(c) < 32
 	// result: (SRWconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -8624,6 +8944,7 @@ func rewriteValuePPC64_OpRsh32Ux32_0(v *Value) bool {
 	// cond:
 	// result: (SRW x  (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-32] (ZeroExt32to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRW)
@@ -8651,6 +8972,7 @@ func rewriteValuePPC64_OpRsh32Ux64_0(v *Value) bool {
 	// cond: uint64(c) < 32
 	// result: (SRWconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -8669,6 +8991,7 @@ func rewriteValuePPC64_OpRsh32Ux64_0(v *Value) bool {
 	// cond: uint64(c) >= 32
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -8685,6 +9008,7 @@ func rewriteValuePPC64_OpRsh32Ux64_0(v *Value) bool {
 	// cond: uint64(c) < 32
 	// result: (SRWconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -8703,6 +9027,7 @@ func rewriteValuePPC64_OpRsh32Ux64_0(v *Value) bool {
 	// cond:
 	// result: (SRW  x (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-32] y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRW)
@@ -8728,6 +9053,7 @@ func rewriteValuePPC64_OpRsh32Ux8_0(v *Value) bool {
 	// cond:
 	// result: (SRW x  (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-32] (ZeroExt8to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRW)
@@ -8755,6 +9081,7 @@ func rewriteValuePPC64_OpRsh32x16_0(v *Value) bool {
 	// cond:
 	// result: (SRAW x (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-32] (ZeroExt16to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRAW)
@@ -8782,6 +9109,7 @@ func rewriteValuePPC64_OpRsh32x32_0(v *Value) bool {
 	// cond: uint32(c) < 32
 	// result: (SRAWconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -8800,6 +9128,7 @@ func rewriteValuePPC64_OpRsh32x32_0(v *Value) bool {
 	// cond: uint32(c) < 32
 	// result: (SRAWconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -8818,6 +9147,7 @@ func rewriteValuePPC64_OpRsh32x32_0(v *Value) bool {
 	// cond:
 	// result: (SRAW x (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-32] (ZeroExt32to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRAW)
@@ -8845,6 +9175,7 @@ func rewriteValuePPC64_OpRsh32x64_0(v *Value) bool {
 	// cond: uint64(c) < 32
 	// result: (SRAWconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -8863,6 +9194,7 @@ func rewriteValuePPC64_OpRsh32x64_0(v *Value) bool {
 	// cond: uint64(c) >= 32
 	// result: (SRAWconst x [63])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -8881,6 +9213,7 @@ func rewriteValuePPC64_OpRsh32x64_0(v *Value) bool {
 	// cond: uint64(c) < 32
 	// result: (SRAWconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -8899,6 +9232,7 @@ func rewriteValuePPC64_OpRsh32x64_0(v *Value) bool {
 	// cond:
 	// result: (SRAW x (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-32] y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRAW)
@@ -8924,6 +9258,7 @@ func rewriteValuePPC64_OpRsh32x8_0(v *Value) bool {
 	// cond:
 	// result: (SRAW x (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-32] (ZeroExt8to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRAW)
@@ -8951,6 +9286,7 @@ func rewriteValuePPC64_OpRsh64Ux16_0(v *Value) bool {
 	// cond:
 	// result: (SRD x  (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-64] (ZeroExt16to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRD)
@@ -8978,6 +9314,7 @@ func rewriteValuePPC64_OpRsh64Ux32_0(v *Value) bool {
 	// cond: uint32(c) < 64
 	// result: (SRDconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -8996,6 +9333,7 @@ func rewriteValuePPC64_OpRsh64Ux32_0(v *Value) bool {
 	// cond: uint32(c) < 64
 	// result: (SRDconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -9014,6 +9352,7 @@ func rewriteValuePPC64_OpRsh64Ux32_0(v *Value) bool {
 	// cond:
 	// result: (SRD x  (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-64] (ZeroExt32to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRD)
@@ -9041,6 +9380,7 @@ func rewriteValuePPC64_OpRsh64Ux64_0(v *Value) bool {
 	// cond: uint64(c) < 64
 	// result: (SRDconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -9059,6 +9399,7 @@ func rewriteValuePPC64_OpRsh64Ux64_0(v *Value) bool {
 	// cond: uint64(c) >= 64
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -9075,6 +9416,7 @@ func rewriteValuePPC64_OpRsh64Ux64_0(v *Value) bool {
 	// cond: uint64(c) < 64
 	// result: (SRDconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -9093,6 +9435,7 @@ func rewriteValuePPC64_OpRsh64Ux64_0(v *Value) bool {
 	// cond:
 	// result: (SRD  x (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-64] y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRD)
@@ -9118,6 +9461,7 @@ func rewriteValuePPC64_OpRsh64Ux8_0(v *Value) bool {
 	// cond:
 	// result: (SRD x  (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-64] (ZeroExt8to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRD)
@@ -9145,6 +9489,7 @@ func rewriteValuePPC64_OpRsh64x16_0(v *Value) bool {
 	// cond:
 	// result: (SRAD x (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-64] (ZeroExt16to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRAD)
@@ -9172,6 +9517,7 @@ func rewriteValuePPC64_OpRsh64x32_0(v *Value) bool {
 	// cond: uint32(c) < 64
 	// result: (SRADconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -9190,6 +9536,7 @@ func rewriteValuePPC64_OpRsh64x32_0(v *Value) bool {
 	// cond: uint32(c) < 64
 	// result: (SRADconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -9208,6 +9555,7 @@ func rewriteValuePPC64_OpRsh64x32_0(v *Value) bool {
 	// cond:
 	// result: (SRAD x (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-64] (ZeroExt32to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRAD)
@@ -9235,6 +9583,7 @@ func rewriteValuePPC64_OpRsh64x64_0(v *Value) bool {
 	// cond: uint64(c) < 64
 	// result: (SRADconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -9253,6 +9602,7 @@ func rewriteValuePPC64_OpRsh64x64_0(v *Value) bool {
 	// cond: uint64(c) >= 64
 	// result: (SRADconst x [63])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -9271,6 +9621,7 @@ func rewriteValuePPC64_OpRsh64x64_0(v *Value) bool {
 	// cond: uint64(c) < 64
 	// result: (SRADconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -9289,6 +9640,7 @@ func rewriteValuePPC64_OpRsh64x64_0(v *Value) bool {
 	// cond:
 	// result: (SRAD x (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-64] y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRAD)
@@ -9314,6 +9666,7 @@ func rewriteValuePPC64_OpRsh64x8_0(v *Value) bool {
 	// cond:
 	// result: (SRAD x (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-64] (ZeroExt8to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRAD)
@@ -9341,6 +9694,7 @@ func rewriteValuePPC64_OpRsh8Ux16_0(v *Value) bool {
 	// cond:
 	// result: (SRW  (ZeroExt8to32 x) (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-8] (ZeroExt16to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRW)
@@ -9370,6 +9724,7 @@ func rewriteValuePPC64_OpRsh8Ux32_0(v *Value) bool {
 	// cond: uint32(c) < 8
 	// result: (SRWconst (ZeroExt8to32  x) [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -9390,6 +9745,7 @@ func rewriteValuePPC64_OpRsh8Ux32_0(v *Value) bool {
 	// cond: uint32(c) < 8
 	// result: (SRWconst (ZeroExt8to32  x) [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -9410,6 +9766,7 @@ func rewriteValuePPC64_OpRsh8Ux32_0(v *Value) bool {
 	// cond:
 	// result: (SRW  (ZeroExt8to32 x) (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-8] (ZeroExt32to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRW)
@@ -9439,6 +9796,7 @@ func rewriteValuePPC64_OpRsh8Ux64_0(v *Value) bool {
 	// cond: uint64(c) < 8
 	// result: (SRWconst (ZeroExt8to32  x) [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -9459,6 +9817,7 @@ func rewriteValuePPC64_OpRsh8Ux64_0(v *Value) bool {
 	// cond: uint64(c) >= 8
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -9475,6 +9834,7 @@ func rewriteValuePPC64_OpRsh8Ux64_0(v *Value) bool {
 	// cond: uint64(c) < 8
 	// result: (SRWconst (ZeroExt8to32  x) [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -9495,6 +9855,7 @@ func rewriteValuePPC64_OpRsh8Ux64_0(v *Value) bool {
 	// cond:
 	// result: (SRW  (ZeroExt8to32 x) (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-8] y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRW)
@@ -9522,6 +9883,7 @@ func rewriteValuePPC64_OpRsh8Ux8_0(v *Value) bool {
 	// cond:
 	// result: (SRW  (ZeroExt8to32 x) (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-8] (ZeroExt8to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRW)
@@ -9551,6 +9913,7 @@ func rewriteValuePPC64_OpRsh8x16_0(v *Value) bool {
 	// cond:
 	// result: (SRAW (SignExt8to32 x) (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-8] (ZeroExt16to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRAW)
@@ -9580,6 +9943,7 @@ func rewriteValuePPC64_OpRsh8x32_0(v *Value) bool {
 	// cond: uint32(c) < 8
 	// result: (SRAWconst (SignExt8to32  x) [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -9600,6 +9964,7 @@ func rewriteValuePPC64_OpRsh8x32_0(v *Value) bool {
 	// cond: uint32(c) < 8
 	// result: (SRAWconst (SignExt8to32  x) [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -9620,6 +9985,7 @@ func rewriteValuePPC64_OpRsh8x32_0(v *Value) bool {
 	// cond:
 	// result: (SRAW (SignExt8to32 x) (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-8] (ZeroExt32to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRAW)
@@ -9649,6 +10015,7 @@ func rewriteValuePPC64_OpRsh8x64_0(v *Value) bool {
 	// cond: uint64(c) < 8
 	// result: (SRAWconst (SignExt8to32  x) [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -9669,6 +10036,7 @@ func rewriteValuePPC64_OpRsh8x64_0(v *Value) bool {
 	// cond: uint64(c) >= 8
 	// result: (SRAWconst (SignExt8to32  x) [63])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -9689,6 +10057,7 @@ func rewriteValuePPC64_OpRsh8x64_0(v *Value) bool {
 	// cond: uint64(c) < 8
 	// result: (SRAWconst (SignExt8to32  x) [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpPPC64MOVDconst {
@@ -9709,6 +10078,7 @@ func rewriteValuePPC64_OpRsh8x64_0(v *Value) bool {
 	// cond:
 	// result: (SRAW (SignExt8to32 x) (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-8] y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRAW)
@@ -9736,6 +10106,7 @@ func rewriteValuePPC64_OpRsh8x8_0(v *Value) bool {
 	// cond:
 	// result: (SRAW (SignExt8to32 x) (ORN y <typ.Int64> (MaskIfNotCarry (ADDconstForCarry [-8] (ZeroExt8to64 y)))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SRAW)
@@ -9871,6 +10242,7 @@ func rewriteValuePPC64_OpStore_0(v *Value) bool {
 	// result: (FMOVDstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -9888,6 +10260,7 @@ func rewriteValuePPC64_OpStore_0(v *Value) bool {
 	// result: (FMOVDstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -9905,6 +10278,7 @@ func rewriteValuePPC64_OpStore_0(v *Value) bool {
 	// result: (FMOVSstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -9922,6 +10296,7 @@ func rewriteValuePPC64_OpStore_0(v *Value) bool {
 	// result: (MOVDstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -9939,6 +10314,7 @@ func rewriteValuePPC64_OpStore_0(v *Value) bool {
 	// result: (MOVWstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -9956,6 +10332,7 @@ func rewriteValuePPC64_OpStore_0(v *Value) bool {
 	// result: (MOVHstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -9973,6 +10350,7 @@ func rewriteValuePPC64_OpStore_0(v *Value) bool {
 	// result: (MOVBstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -9992,6 +10370,7 @@ func rewriteValuePPC64_OpSub16_0(v *Value) bool {
 	// cond:
 	// result: (SUB x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SUB)
@@ -10005,6 +10384,7 @@ func rewriteValuePPC64_OpSub32_0(v *Value) bool {
 	// cond:
 	// result: (SUB x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SUB)
@@ -10018,6 +10398,7 @@ func rewriteValuePPC64_OpSub32F_0(v *Value) bool {
 	// cond:
 	// result: (FSUBS x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64FSUBS)
@@ -10031,6 +10412,7 @@ func rewriteValuePPC64_OpSub64_0(v *Value) bool {
 	// cond:
 	// result: (SUB  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SUB)
@@ -10044,6 +10426,7 @@ func rewriteValuePPC64_OpSub64F_0(v *Value) bool {
 	// cond:
 	// result: (FSUB x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64FSUB)
@@ -10057,6 +10440,7 @@ func rewriteValuePPC64_OpSub8_0(v *Value) bool {
 	// cond:
 	// result: (SUB x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SUB)
@@ -10070,6 +10454,7 @@ func rewriteValuePPC64_OpSubPtr_0(v *Value) bool {
 	// cond:
 	// result: (SUB  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64SUB)
@@ -10149,6 +10534,7 @@ func rewriteValuePPC64_OpXor16_0(v *Value) bool {
 	// cond:
 	// result: (XOR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64XOR)
@@ -10162,6 +10548,7 @@ func rewriteValuePPC64_OpXor32_0(v *Value) bool {
 	// cond:
 	// result: (XOR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64XOR)
@@ -10175,6 +10562,7 @@ func rewriteValuePPC64_OpXor64_0(v *Value) bool {
 	// cond:
 	// result: (XOR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64XOR)
@@ -10188,6 +10576,7 @@ func rewriteValuePPC64_OpXor8_0(v *Value) bool {
 	// cond:
 	// result: (XOR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpPPC64XOR)
@@ -10206,6 +10595,7 @@ func rewriteValuePPC64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 0 {
 			break
 		}
+		_ = v.Args[1]
 		mem := v.Args[1]
 		v.reset(OpCopy)
 		v.Type = mem.Type
@@ -10219,6 +10609,7 @@ func rewriteValuePPC64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 1 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpPPC64MOVBstorezero)
@@ -10233,6 +10624,7 @@ func rewriteValuePPC64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 2 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpPPC64MOVHstorezero)
@@ -10247,6 +10639,7 @@ func rewriteValuePPC64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 3 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpPPC64MOVBstorezero)
@@ -10265,6 +10658,7 @@ func rewriteValuePPC64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 4 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpPPC64MOVWstorezero)
@@ -10279,6 +10673,7 @@ func rewriteValuePPC64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 5 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpPPC64MOVBstorezero)
@@ -10297,6 +10692,7 @@ func rewriteValuePPC64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 6 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpPPC64MOVHstorezero)
@@ -10315,6 +10711,7 @@ func rewriteValuePPC64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 7 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpPPC64MOVBstorezero)
@@ -10337,6 +10734,7 @@ func rewriteValuePPC64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 8 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpPPC64MOVDstorezero)
@@ -10351,6 +10749,7 @@ func rewriteValuePPC64_OpZero_0(v *Value) bool {
 		if v.AuxInt != 12 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpPPC64MOVWstorezero)
@@ -10375,6 +10774,7 @@ func rewriteValuePPC64_OpZero_10(v *Value) bool {
 		if v.AuxInt != 16 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpPPC64MOVDstorezero)
@@ -10394,6 +10794,7 @@ func rewriteValuePPC64_OpZero_10(v *Value) bool {
 		if v.AuxInt != 24 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpPPC64MOVDstorezero)
@@ -10417,6 +10818,7 @@ func rewriteValuePPC64_OpZero_10(v *Value) bool {
 		if v.AuxInt != 32 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpPPC64MOVDstorezero)
@@ -10444,6 +10846,7 @@ func rewriteValuePPC64_OpZero_10(v *Value) bool {
 		if v.AuxInt != 40 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpPPC64MOVDstorezero)
@@ -10475,6 +10878,7 @@ func rewriteValuePPC64_OpZero_10(v *Value) bool {
 		if v.AuxInt != 48 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpPPC64MOVDstorezero)
@@ -10510,6 +10914,7 @@ func rewriteValuePPC64_OpZero_10(v *Value) bool {
 		if v.AuxInt != 56 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpPPC64MOVDstorezero)
@@ -10547,6 +10952,7 @@ func rewriteValuePPC64_OpZero_10(v *Value) bool {
 	// result: (LoweredZero [s] ptr mem)
 	for {
 		s := v.AuxInt
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpPPC64LoweredZero)
diff --git a/src/cmd/compile/internal/ssa/rewriteS390X.go b/src/cmd/compile/internal/ssa/rewriteS390X.go
index f07ca9a568..2254674048 100644
--- a/src/cmd/compile/internal/ssa/rewriteS390X.go
+++ b/src/cmd/compile/internal/ssa/rewriteS390X.go
@@ -727,6 +727,7 @@ func rewriteValueS390X_OpAdd16_0(v *Value) bool {
 	// cond:
 	// result: (ADDW  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XADDW)
@@ -740,6 +741,7 @@ func rewriteValueS390X_OpAdd32_0(v *Value) bool {
 	// cond:
 	// result: (ADDW  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XADDW)
@@ -753,6 +755,7 @@ func rewriteValueS390X_OpAdd32F_0(v *Value) bool {
 	// cond:
 	// result: (FADDS x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XFADDS)
@@ -766,6 +769,7 @@ func rewriteValueS390X_OpAdd64_0(v *Value) bool {
 	// cond:
 	// result: (ADD  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XADD)
@@ -779,6 +783,7 @@ func rewriteValueS390X_OpAdd64F_0(v *Value) bool {
 	// cond:
 	// result: (FADD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XFADD)
@@ -792,6 +797,7 @@ func rewriteValueS390X_OpAdd8_0(v *Value) bool {
 	// cond:
 	// result: (ADDW  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XADDW)
@@ -805,6 +811,7 @@ func rewriteValueS390X_OpAddPtr_0(v *Value) bool {
 	// cond:
 	// result: (ADD  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XADD)
@@ -831,6 +838,7 @@ func rewriteValueS390X_OpAnd16_0(v *Value) bool {
 	// cond:
 	// result: (ANDW x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XANDW)
@@ -844,6 +852,7 @@ func rewriteValueS390X_OpAnd32_0(v *Value) bool {
 	// cond:
 	// result: (ANDW x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XANDW)
@@ -857,6 +866,7 @@ func rewriteValueS390X_OpAnd64_0(v *Value) bool {
 	// cond:
 	// result: (AND x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XAND)
@@ -870,6 +880,7 @@ func rewriteValueS390X_OpAnd8_0(v *Value) bool {
 	// cond:
 	// result: (ANDW x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XANDW)
@@ -883,6 +894,7 @@ func rewriteValueS390X_OpAndB_0(v *Value) bool {
 	// cond:
 	// result: (ANDW x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XANDW)
@@ -900,6 +912,7 @@ func rewriteValueS390X_OpAtomicAdd32_0(v *Value) bool {
 	// cond:
 	// result: (AddTupleFirst32 val (LAA ptr val mem))
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -922,6 +935,7 @@ func rewriteValueS390X_OpAtomicAdd64_0(v *Value) bool {
 	// cond:
 	// result: (AddTupleFirst64 val (LAAG ptr val mem))
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -940,6 +954,7 @@ func rewriteValueS390X_OpAtomicCompareAndSwap32_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicCas32 ptr old new_ mem)
 	for {
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		old := v.Args[1]
 		new_ := v.Args[2]
@@ -957,6 +972,7 @@ func rewriteValueS390X_OpAtomicCompareAndSwap64_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicCas64 ptr old new_ mem)
 	for {
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		old := v.Args[1]
 		new_ := v.Args[2]
@@ -974,6 +990,7 @@ func rewriteValueS390X_OpAtomicExchange32_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicExchange32 ptr val mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -989,6 +1006,7 @@ func rewriteValueS390X_OpAtomicExchange64_0(v *Value) bool {
 	// cond:
 	// result: (LoweredAtomicExchange64 ptr val mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -1004,6 +1022,7 @@ func rewriteValueS390X_OpAtomicLoad32_0(v *Value) bool {
 	// cond:
 	// result: (MOVWZatomicload ptr mem)
 	for {
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpS390XMOVWZatomicload)
@@ -1017,6 +1036,7 @@ func rewriteValueS390X_OpAtomicLoad64_0(v *Value) bool {
 	// cond:
 	// result: (MOVDatomicload ptr mem)
 	for {
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpS390XMOVDatomicload)
@@ -1030,6 +1050,7 @@ func rewriteValueS390X_OpAtomicLoadPtr_0(v *Value) bool {
 	// cond:
 	// result: (MOVDatomicload ptr mem)
 	for {
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpS390XMOVDatomicload)
@@ -1043,6 +1064,7 @@ func rewriteValueS390X_OpAtomicStore32_0(v *Value) bool {
 	// cond:
 	// result: (MOVWatomicstore ptr val mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -1058,6 +1080,7 @@ func rewriteValueS390X_OpAtomicStore64_0(v *Value) bool {
 	// cond:
 	// result: (MOVDatomicstore ptr val mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -1073,6 +1096,7 @@ func rewriteValueS390X_OpAtomicStorePtrNoWB_0(v *Value) bool {
 	// cond:
 	// result: (MOVDatomicstore ptr val mem)
 	for {
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -1091,6 +1115,7 @@ func rewriteValueS390X_OpAvg64u_0(v *Value) bool {
 	// result: (ADD (SRDconst <t> (SUB <t> x y) [1]) y)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XADD)
@@ -1153,6 +1178,7 @@ func rewriteValueS390X_OpClosureCall_0(v *Value) bool {
 	// result: (CALLclosure [argwid] entry closure mem)
 	for {
 		argwid := v.AuxInt
+		_ = v.Args[2]
 		entry := v.Args[0]
 		closure := v.Args[1]
 		mem := v.Args[2]
@@ -1301,6 +1327,7 @@ func rewriteValueS390X_OpConvert_0(v *Value) bool {
 	// result: (MOVDconvert <t> x mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpS390XMOVDconvert)
@@ -1489,6 +1516,7 @@ func rewriteValueS390X_OpDiv16_0(v *Value) bool {
 	// cond:
 	// result: (DIVW  (MOVHreg x) (MOVHreg y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XDIVW)
@@ -1510,6 +1538,7 @@ func rewriteValueS390X_OpDiv16u_0(v *Value) bool {
 	// cond:
 	// result: (DIVWU (MOVHZreg x) (MOVHZreg y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XDIVWU)
@@ -1531,6 +1560,7 @@ func rewriteValueS390X_OpDiv32_0(v *Value) bool {
 	// cond:
 	// result: (DIVW  (MOVWreg x) y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XDIVW)
@@ -1546,6 +1576,7 @@ func rewriteValueS390X_OpDiv32F_0(v *Value) bool {
 	// cond:
 	// result: (FDIVS x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XFDIVS)
@@ -1563,6 +1594,7 @@ func rewriteValueS390X_OpDiv32u_0(v *Value) bool {
 	// cond:
 	// result: (DIVWU (MOVWZreg x) y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XDIVWU)
@@ -1578,6 +1610,7 @@ func rewriteValueS390X_OpDiv64_0(v *Value) bool {
 	// cond:
 	// result: (DIVD  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XDIVD)
@@ -1591,6 +1624,7 @@ func rewriteValueS390X_OpDiv64F_0(v *Value) bool {
 	// cond:
 	// result: (FDIV x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XFDIV)
@@ -1604,6 +1638,7 @@ func rewriteValueS390X_OpDiv64u_0(v *Value) bool {
 	// cond:
 	// result: (DIVDU x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XDIVDU)
@@ -1621,6 +1656,7 @@ func rewriteValueS390X_OpDiv8_0(v *Value) bool {
 	// cond:
 	// result: (DIVW  (MOVBreg x) (MOVBreg y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XDIVW)
@@ -1642,6 +1678,7 @@ func rewriteValueS390X_OpDiv8u_0(v *Value) bool {
 	// cond:
 	// result: (DIVWU (MOVBZreg x) (MOVBZreg y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XDIVWU)
@@ -1663,6 +1700,7 @@ func rewriteValueS390X_OpEq16_0(v *Value) bool {
 	// cond:
 	// result: (MOVDEQ (MOVDconst [0]) (MOVDconst [1]) (CMP (MOVHreg x) (MOVHreg y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDEQ)
@@ -1692,6 +1730,7 @@ func rewriteValueS390X_OpEq32_0(v *Value) bool {
 	// cond:
 	// result: (MOVDEQ (MOVDconst [0]) (MOVDconst [1]) (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDEQ)
@@ -1717,6 +1756,7 @@ func rewriteValueS390X_OpEq32F_0(v *Value) bool {
 	// cond:
 	// result: (MOVDEQ (MOVDconst [0]) (MOVDconst [1]) (FCMPS x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDEQ)
@@ -1742,6 +1782,7 @@ func rewriteValueS390X_OpEq64_0(v *Value) bool {
 	// cond:
 	// result: (MOVDEQ (MOVDconst [0]) (MOVDconst [1]) (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDEQ)
@@ -1767,6 +1808,7 @@ func rewriteValueS390X_OpEq64F_0(v *Value) bool {
 	// cond:
 	// result: (MOVDEQ (MOVDconst [0]) (MOVDconst [1]) (FCMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDEQ)
@@ -1792,6 +1834,7 @@ func rewriteValueS390X_OpEq8_0(v *Value) bool {
 	// cond:
 	// result: (MOVDEQ (MOVDconst [0]) (MOVDconst [1]) (CMP (MOVBreg x) (MOVBreg y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDEQ)
@@ -1821,6 +1864,7 @@ func rewriteValueS390X_OpEqB_0(v *Value) bool {
 	// cond:
 	// result: (MOVDEQ (MOVDconst [0]) (MOVDconst [1]) (CMP (MOVBreg x) (MOVBreg y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDEQ)
@@ -1850,6 +1894,7 @@ func rewriteValueS390X_OpEqPtr_0(v *Value) bool {
 	// cond:
 	// result: (MOVDEQ (MOVDconst [0]) (MOVDconst [1]) (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDEQ)
@@ -1875,6 +1920,7 @@ func rewriteValueS390X_OpGeq16_0(v *Value) bool {
 	// cond:
 	// result: (MOVDGE (MOVDconst [0]) (MOVDconst [1]) (CMP (MOVHreg x) (MOVHreg y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDGE)
@@ -1904,6 +1950,7 @@ func rewriteValueS390X_OpGeq16U_0(v *Value) bool {
 	// cond:
 	// result: (MOVDGE (MOVDconst [0]) (MOVDconst [1]) (CMPU (MOVHZreg x) (MOVHZreg y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDGE)
@@ -1933,6 +1980,7 @@ func rewriteValueS390X_OpGeq32_0(v *Value) bool {
 	// cond:
 	// result: (MOVDGE (MOVDconst [0]) (MOVDconst [1]) (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDGE)
@@ -1958,6 +2006,7 @@ func rewriteValueS390X_OpGeq32F_0(v *Value) bool {
 	// cond:
 	// result: (MOVDGEnoinv (MOVDconst [0]) (MOVDconst [1]) (FCMPS x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDGEnoinv)
@@ -1983,6 +2032,7 @@ func rewriteValueS390X_OpGeq32U_0(v *Value) bool {
 	// cond:
 	// result: (MOVDGE (MOVDconst [0]) (MOVDconst [1]) (CMPWU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDGE)
@@ -2008,6 +2058,7 @@ func rewriteValueS390X_OpGeq64_0(v *Value) bool {
 	// cond:
 	// result: (MOVDGE (MOVDconst [0]) (MOVDconst [1]) (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDGE)
@@ -2033,6 +2084,7 @@ func rewriteValueS390X_OpGeq64F_0(v *Value) bool {
 	// cond:
 	// result: (MOVDGEnoinv (MOVDconst [0]) (MOVDconst [1]) (FCMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDGEnoinv)
@@ -2058,6 +2110,7 @@ func rewriteValueS390X_OpGeq64U_0(v *Value) bool {
 	// cond:
 	// result: (MOVDGE (MOVDconst [0]) (MOVDconst [1]) (CMPU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDGE)
@@ -2083,6 +2136,7 @@ func rewriteValueS390X_OpGeq8_0(v *Value) bool {
 	// cond:
 	// result: (MOVDGE (MOVDconst [0]) (MOVDconst [1]) (CMP (MOVBreg x) (MOVBreg y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDGE)
@@ -2112,6 +2166,7 @@ func rewriteValueS390X_OpGeq8U_0(v *Value) bool {
 	// cond:
 	// result: (MOVDGE (MOVDconst [0]) (MOVDconst [1]) (CMPU (MOVBZreg x) (MOVBZreg y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDGE)
@@ -2161,6 +2216,7 @@ func rewriteValueS390X_OpGreater16_0(v *Value) bool {
 	// cond:
 	// result: (MOVDGT (MOVDconst [0]) (MOVDconst [1]) (CMP (MOVHreg x) (MOVHreg y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDGT)
@@ -2190,6 +2246,7 @@ func rewriteValueS390X_OpGreater16U_0(v *Value) bool {
 	// cond:
 	// result: (MOVDGT (MOVDconst [0]) (MOVDconst [1]) (CMPU (MOVHZreg x) (MOVHZreg y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDGT)
@@ -2219,6 +2276,7 @@ func rewriteValueS390X_OpGreater32_0(v *Value) bool {
 	// cond:
 	// result: (MOVDGT (MOVDconst [0]) (MOVDconst [1]) (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDGT)
@@ -2244,6 +2302,7 @@ func rewriteValueS390X_OpGreater32F_0(v *Value) bool {
 	// cond:
 	// result: (MOVDGTnoinv (MOVDconst [0]) (MOVDconst [1]) (FCMPS x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDGTnoinv)
@@ -2269,6 +2328,7 @@ func rewriteValueS390X_OpGreater32U_0(v *Value) bool {
 	// cond:
 	// result: (MOVDGT (MOVDconst [0]) (MOVDconst [1]) (CMPWU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDGT)
@@ -2294,6 +2354,7 @@ func rewriteValueS390X_OpGreater64_0(v *Value) bool {
 	// cond:
 	// result: (MOVDGT (MOVDconst [0]) (MOVDconst [1]) (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDGT)
@@ -2319,6 +2380,7 @@ func rewriteValueS390X_OpGreater64F_0(v *Value) bool {
 	// cond:
 	// result: (MOVDGTnoinv (MOVDconst [0]) (MOVDconst [1]) (FCMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDGTnoinv)
@@ -2344,6 +2406,7 @@ func rewriteValueS390X_OpGreater64U_0(v *Value) bool {
 	// cond:
 	// result: (MOVDGT (MOVDconst [0]) (MOVDconst [1]) (CMPU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDGT)
@@ -2369,6 +2432,7 @@ func rewriteValueS390X_OpGreater8_0(v *Value) bool {
 	// cond:
 	// result: (MOVDGT (MOVDconst [0]) (MOVDconst [1]) (CMP (MOVBreg x) (MOVBreg y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDGT)
@@ -2398,6 +2462,7 @@ func rewriteValueS390X_OpGreater8U_0(v *Value) bool {
 	// cond:
 	// result: (MOVDGT (MOVDconst [0]) (MOVDconst [1]) (CMPU (MOVBZreg x) (MOVBZreg y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDGT)
@@ -2427,6 +2492,7 @@ func rewriteValueS390X_OpHmul32_0(v *Value) bool {
 	// cond:
 	// result: (SRDconst [32] (MULLD (MOVWreg x) (MOVWreg y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XSRDconst)
@@ -2451,6 +2517,7 @@ func rewriteValueS390X_OpHmul32u_0(v *Value) bool {
 	// cond:
 	// result: (SRDconst [32] (MULLD (MOVWZreg x) (MOVWZreg y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XSRDconst)
@@ -2471,6 +2538,7 @@ func rewriteValueS390X_OpHmul64_0(v *Value) bool {
 	// cond:
 	// result: (MULHD  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMULHD)
@@ -2484,6 +2552,7 @@ func rewriteValueS390X_OpHmul64u_0(v *Value) bool {
 	// cond:
 	// result: (MULHDU x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMULHDU)
@@ -2501,6 +2570,7 @@ func rewriteValueS390X_OpITab_0(v *Value) bool {
 		if v_0.Op != OpLoad {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		mem := v_0.Args[1]
 		v.reset(OpS390XMOVDload)
@@ -2516,6 +2586,7 @@ func rewriteValueS390X_OpInterCall_0(v *Value) bool {
 	// result: (CALLinter [argwid] entry mem)
 	for {
 		argwid := v.AuxInt
+		_ = v.Args[1]
 		entry := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpS390XCALLinter)
@@ -2534,6 +2605,7 @@ func rewriteValueS390X_OpIsInBounds_0(v *Value) bool {
 	// cond:
 	// result: (MOVDLT (MOVDconst [0]) (MOVDconst [1]) (CMPU idx len))
 	for {
+		_ = v.Args[1]
 		idx := v.Args[0]
 		len := v.Args[1]
 		v.reset(OpS390XMOVDLT)
@@ -2583,6 +2655,7 @@ func rewriteValueS390X_OpIsSliceInBounds_0(v *Value) bool {
 	// cond:
 	// result: (MOVDLE (MOVDconst [0]) (MOVDconst [1]) (CMPU idx len))
 	for {
+		_ = v.Args[1]
 		idx := v.Args[0]
 		len := v.Args[1]
 		v.reset(OpS390XMOVDLE)
@@ -2608,6 +2681,7 @@ func rewriteValueS390X_OpLeq16_0(v *Value) bool {
 	// cond:
 	// result: (MOVDLE (MOVDconst [0]) (MOVDconst [1]) (CMP (MOVHreg x) (MOVHreg y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDLE)
@@ -2637,6 +2711,7 @@ func rewriteValueS390X_OpLeq16U_0(v *Value) bool {
 	// cond:
 	// result: (MOVDLE (MOVDconst [0]) (MOVDconst [1]) (CMPU (MOVHZreg x) (MOVHZreg y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDLE)
@@ -2666,6 +2741,7 @@ func rewriteValueS390X_OpLeq32_0(v *Value) bool {
 	// cond:
 	// result: (MOVDLE (MOVDconst [0]) (MOVDconst [1]) (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDLE)
@@ -2691,6 +2767,7 @@ func rewriteValueS390X_OpLeq32F_0(v *Value) bool {
 	// cond:
 	// result: (MOVDGEnoinv (MOVDconst [0]) (MOVDconst [1]) (FCMPS y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDGEnoinv)
@@ -2716,6 +2793,7 @@ func rewriteValueS390X_OpLeq32U_0(v *Value) bool {
 	// cond:
 	// result: (MOVDLE (MOVDconst [0]) (MOVDconst [1]) (CMPWU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDLE)
@@ -2741,6 +2819,7 @@ func rewriteValueS390X_OpLeq64_0(v *Value) bool {
 	// cond:
 	// result: (MOVDLE (MOVDconst [0]) (MOVDconst [1]) (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDLE)
@@ -2766,6 +2845,7 @@ func rewriteValueS390X_OpLeq64F_0(v *Value) bool {
 	// cond:
 	// result: (MOVDGEnoinv (MOVDconst [0]) (MOVDconst [1]) (FCMP y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDGEnoinv)
@@ -2791,6 +2871,7 @@ func rewriteValueS390X_OpLeq64U_0(v *Value) bool {
 	// cond:
 	// result: (MOVDLE (MOVDconst [0]) (MOVDconst [1]) (CMPU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDLE)
@@ -2816,6 +2897,7 @@ func rewriteValueS390X_OpLeq8_0(v *Value) bool {
 	// cond:
 	// result: (MOVDLE (MOVDconst [0]) (MOVDconst [1]) (CMP (MOVBreg x) (MOVBreg y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDLE)
@@ -2845,6 +2927,7 @@ func rewriteValueS390X_OpLeq8U_0(v *Value) bool {
 	// cond:
 	// result: (MOVDLE (MOVDconst [0]) (MOVDconst [1]) (CMPU (MOVBZreg x) (MOVBZreg y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDLE)
@@ -2874,6 +2957,7 @@ func rewriteValueS390X_OpLess16_0(v *Value) bool {
 	// cond:
 	// result: (MOVDLT (MOVDconst [0]) (MOVDconst [1]) (CMP (MOVHreg x) (MOVHreg y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDLT)
@@ -2903,6 +2987,7 @@ func rewriteValueS390X_OpLess16U_0(v *Value) bool {
 	// cond:
 	// result: (MOVDLT (MOVDconst [0]) (MOVDconst [1]) (CMPU (MOVHZreg x) (MOVHZreg y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDLT)
@@ -2932,6 +3017,7 @@ func rewriteValueS390X_OpLess32_0(v *Value) bool {
 	// cond:
 	// result: (MOVDLT (MOVDconst [0]) (MOVDconst [1]) (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDLT)
@@ -2957,6 +3043,7 @@ func rewriteValueS390X_OpLess32F_0(v *Value) bool {
 	// cond:
 	// result: (MOVDGTnoinv (MOVDconst [0]) (MOVDconst [1]) (FCMPS y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDGTnoinv)
@@ -2982,6 +3069,7 @@ func rewriteValueS390X_OpLess32U_0(v *Value) bool {
 	// cond:
 	// result: (MOVDLT (MOVDconst [0]) (MOVDconst [1]) (CMPWU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDLT)
@@ -3007,6 +3095,7 @@ func rewriteValueS390X_OpLess64_0(v *Value) bool {
 	// cond:
 	// result: (MOVDLT (MOVDconst [0]) (MOVDconst [1]) (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDLT)
@@ -3032,6 +3121,7 @@ func rewriteValueS390X_OpLess64F_0(v *Value) bool {
 	// cond:
 	// result: (MOVDGTnoinv (MOVDconst [0]) (MOVDconst [1]) (FCMP y x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDGTnoinv)
@@ -3057,6 +3147,7 @@ func rewriteValueS390X_OpLess64U_0(v *Value) bool {
 	// cond:
 	// result: (MOVDLT (MOVDconst [0]) (MOVDconst [1]) (CMPU x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDLT)
@@ -3082,6 +3173,7 @@ func rewriteValueS390X_OpLess8_0(v *Value) bool {
 	// cond:
 	// result: (MOVDLT (MOVDconst [0]) (MOVDconst [1]) (CMP (MOVBreg x) (MOVBreg y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDLT)
@@ -3111,6 +3203,7 @@ func rewriteValueS390X_OpLess8U_0(v *Value) bool {
 	// cond:
 	// result: (MOVDLT (MOVDconst [0]) (MOVDconst [1]) (CMPU (MOVBZreg x) (MOVBZreg y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDLT)
@@ -3137,6 +3230,7 @@ func rewriteValueS390X_OpLoad_0(v *Value) bool {
 	// result: (MOVDload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is64BitInt(t) || isPtr(t)) {
@@ -3152,6 +3246,7 @@ func rewriteValueS390X_OpLoad_0(v *Value) bool {
 	// result: (MOVWload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is32BitInt(t) && isSigned(t)) {
@@ -3167,6 +3262,7 @@ func rewriteValueS390X_OpLoad_0(v *Value) bool {
 	// result: (MOVWZload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is32BitInt(t) && !isSigned(t)) {
@@ -3182,6 +3278,7 @@ func rewriteValueS390X_OpLoad_0(v *Value) bool {
 	// result: (MOVHload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is16BitInt(t) && isSigned(t)) {
@@ -3197,6 +3294,7 @@ func rewriteValueS390X_OpLoad_0(v *Value) bool {
 	// result: (MOVHZload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is16BitInt(t) && !isSigned(t)) {
@@ -3212,6 +3310,7 @@ func rewriteValueS390X_OpLoad_0(v *Value) bool {
 	// result: (MOVBload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is8BitInt(t) && isSigned(t)) {
@@ -3227,6 +3326,7 @@ func rewriteValueS390X_OpLoad_0(v *Value) bool {
 	// result: (MOVBZload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.IsBoolean() || (is8BitInt(t) && !isSigned(t))) {
@@ -3242,6 +3342,7 @@ func rewriteValueS390X_OpLoad_0(v *Value) bool {
 	// result: (FMOVSload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is32BitFloat(t)) {
@@ -3257,6 +3358,7 @@ func rewriteValueS390X_OpLoad_0(v *Value) bool {
 	// result: (FMOVDload ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is64BitFloat(t)) {
@@ -3279,6 +3381,7 @@ func rewriteValueS390X_OpLsh16x16_0(v *Value) bool {
 	// result: (ANDW (SLW <t> x y) (SUBEWcarrymask <t> (CMPWUconst (MOVHZreg y) [31])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XANDW)
@@ -3305,6 +3408,7 @@ func rewriteValueS390X_OpLsh16x32_0(v *Value) bool {
 	// result: (ANDW (SLW <t> x y) (SUBEWcarrymask <t> (CMPWUconst y [31])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XANDW)
@@ -3329,6 +3433,7 @@ func rewriteValueS390X_OpLsh16x64_0(v *Value) bool {
 	// result: (ANDW (SLW <t> x y) (SUBEWcarrymask <t> (CMPUconst y [31])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XANDW)
@@ -3355,6 +3460,7 @@ func rewriteValueS390X_OpLsh16x8_0(v *Value) bool {
 	// result: (ANDW (SLW <t> x y) (SUBEWcarrymask <t> (CMPWUconst (MOVBZreg y) [31])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XANDW)
@@ -3383,6 +3489,7 @@ func rewriteValueS390X_OpLsh32x16_0(v *Value) bool {
 	// result: (ANDW (SLW <t> x y) (SUBEWcarrymask <t> (CMPWUconst (MOVHZreg y) [31])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XANDW)
@@ -3409,6 +3516,7 @@ func rewriteValueS390X_OpLsh32x32_0(v *Value) bool {
 	// result: (ANDW (SLW <t> x y) (SUBEWcarrymask <t> (CMPWUconst y [31])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XANDW)
@@ -3433,6 +3541,7 @@ func rewriteValueS390X_OpLsh32x64_0(v *Value) bool {
 	// result: (ANDW (SLW <t> x y) (SUBEWcarrymask <t> (CMPUconst y [31])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XANDW)
@@ -3459,6 +3568,7 @@ func rewriteValueS390X_OpLsh32x8_0(v *Value) bool {
 	// result: (ANDW (SLW <t> x y) (SUBEWcarrymask <t> (CMPWUconst (MOVBZreg y) [31])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XANDW)
@@ -3487,6 +3597,7 @@ func rewriteValueS390X_OpLsh64x16_0(v *Value) bool {
 	// result: (AND (SLD <t> x y) (SUBEcarrymask <t> (CMPWUconst (MOVHZreg y) [63])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XAND)
@@ -3513,6 +3624,7 @@ func rewriteValueS390X_OpLsh64x32_0(v *Value) bool {
 	// result: (AND (SLD <t> x y) (SUBEcarrymask <t> (CMPWUconst y [63])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XAND)
@@ -3537,6 +3649,7 @@ func rewriteValueS390X_OpLsh64x64_0(v *Value) bool {
 	// result: (AND (SLD <t> x y) (SUBEcarrymask <t> (CMPUconst y [63])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XAND)
@@ -3563,6 +3676,7 @@ func rewriteValueS390X_OpLsh64x8_0(v *Value) bool {
 	// result: (AND (SLD <t> x y) (SUBEcarrymask <t> (CMPWUconst (MOVBZreg y) [63])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XAND)
@@ -3591,6 +3705,7 @@ func rewriteValueS390X_OpLsh8x16_0(v *Value) bool {
 	// result: (ANDW (SLW <t> x y) (SUBEWcarrymask <t> (CMPWUconst (MOVHZreg y) [31])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XANDW)
@@ -3617,6 +3732,7 @@ func rewriteValueS390X_OpLsh8x32_0(v *Value) bool {
 	// result: (ANDW (SLW <t> x y) (SUBEWcarrymask <t> (CMPWUconst y [31])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XANDW)
@@ -3641,6 +3757,7 @@ func rewriteValueS390X_OpLsh8x64_0(v *Value) bool {
 	// result: (ANDW (SLW <t> x y) (SUBEWcarrymask <t> (CMPUconst y [31])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XANDW)
@@ -3667,6 +3784,7 @@ func rewriteValueS390X_OpLsh8x8_0(v *Value) bool {
 	// result: (ANDW (SLW <t> x y) (SUBEWcarrymask <t> (CMPWUconst (MOVBZreg y) [31])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XANDW)
@@ -3694,6 +3812,7 @@ func rewriteValueS390X_OpMod16_0(v *Value) bool {
 	// cond:
 	// result: (MODW  (MOVHreg x) (MOVHreg y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMODW)
@@ -3715,6 +3834,7 @@ func rewriteValueS390X_OpMod16u_0(v *Value) bool {
 	// cond:
 	// result: (MODWU (MOVHZreg x) (MOVHZreg y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMODWU)
@@ -3736,6 +3856,7 @@ func rewriteValueS390X_OpMod32_0(v *Value) bool {
 	// cond:
 	// result: (MODW  (MOVWreg x) y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMODW)
@@ -3755,6 +3876,7 @@ func rewriteValueS390X_OpMod32u_0(v *Value) bool {
 	// cond:
 	// result: (MODWU (MOVWZreg x) y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMODWU)
@@ -3770,6 +3892,7 @@ func rewriteValueS390X_OpMod64_0(v *Value) bool {
 	// cond:
 	// result: (MODD  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMODD)
@@ -3783,6 +3906,7 @@ func rewriteValueS390X_OpMod64u_0(v *Value) bool {
 	// cond:
 	// result: (MODDU x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMODDU)
@@ -3800,6 +3924,7 @@ func rewriteValueS390X_OpMod8_0(v *Value) bool {
 	// cond:
 	// result: (MODW  (MOVBreg x) (MOVBreg y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMODW)
@@ -3821,6 +3946,7 @@ func rewriteValueS390X_OpMod8u_0(v *Value) bool {
 	// cond:
 	// result: (MODWU (MOVBZreg x) (MOVBZreg y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMODWU)
@@ -3845,6 +3971,7 @@ func rewriteValueS390X_OpMove_0(v *Value) bool {
 		if v.AuxInt != 0 {
 			break
 		}
+		_ = v.Args[2]
 		mem := v.Args[2]
 		v.reset(OpCopy)
 		v.Type = mem.Type
@@ -3858,6 +3985,7 @@ func rewriteValueS390X_OpMove_0(v *Value) bool {
 		if v.AuxInt != 1 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -3877,6 +4005,7 @@ func rewriteValueS390X_OpMove_0(v *Value) bool {
 		if v.AuxInt != 2 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -3896,6 +4025,7 @@ func rewriteValueS390X_OpMove_0(v *Value) bool {
 		if v.AuxInt != 4 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -3915,6 +4045,7 @@ func rewriteValueS390X_OpMove_0(v *Value) bool {
 		if v.AuxInt != 8 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -3934,6 +4065,7 @@ func rewriteValueS390X_OpMove_0(v *Value) bool {
 		if v.AuxInt != 16 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -3962,6 +4094,7 @@ func rewriteValueS390X_OpMove_0(v *Value) bool {
 		if v.AuxInt != 24 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -3999,6 +4132,7 @@ func rewriteValueS390X_OpMove_0(v *Value) bool {
 		if v.AuxInt != 3 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -4027,6 +4161,7 @@ func rewriteValueS390X_OpMove_0(v *Value) bool {
 		if v.AuxInt != 5 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -4055,6 +4190,7 @@ func rewriteValueS390X_OpMove_0(v *Value) bool {
 		if v.AuxInt != 6 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -4090,6 +4226,7 @@ func rewriteValueS390X_OpMove_10(v *Value) bool {
 		if v.AuxInt != 7 {
 			break
 		}
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -4125,6 +4262,7 @@ func rewriteValueS390X_OpMove_10(v *Value) bool {
 	// result: (MVC [makeValAndOff(s, 0)] dst src mem)
 	for {
 		s := v.AuxInt
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -4143,6 +4281,7 @@ func rewriteValueS390X_OpMove_10(v *Value) bool {
 	// result: (MVC [makeValAndOff(s-256, 256)] dst src (MVC [makeValAndOff(256, 0)] dst src mem))
 	for {
 		s := v.AuxInt
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -4166,6 +4305,7 @@ func rewriteValueS390X_OpMove_10(v *Value) bool {
 	// result: (MVC [makeValAndOff(s-512, 512)] dst src (MVC [makeValAndOff(256, 256)] dst src (MVC [makeValAndOff(256, 0)] dst src mem)))
 	for {
 		s := v.AuxInt
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -4194,6 +4334,7 @@ func rewriteValueS390X_OpMove_10(v *Value) bool {
 	// result: (MVC [makeValAndOff(s-768, 768)] dst src (MVC [makeValAndOff(256, 512)] dst src (MVC [makeValAndOff(256, 256)] dst src (MVC [makeValAndOff(256, 0)] dst src mem))))
 	for {
 		s := v.AuxInt
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -4227,6 +4368,7 @@ func rewriteValueS390X_OpMove_10(v *Value) bool {
 	// result: (LoweredMove [s%256] dst src (ADDconst <src.Type> src [(s/256)*256]) mem)
 	for {
 		s := v.AuxInt
+		_ = v.Args[2]
 		dst := v.Args[0]
 		src := v.Args[1]
 		mem := v.Args[2]
@@ -4251,6 +4393,7 @@ func rewriteValueS390X_OpMul16_0(v *Value) bool {
 	// cond:
 	// result: (MULLW  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMULLW)
@@ -4264,6 +4407,7 @@ func rewriteValueS390X_OpMul32_0(v *Value) bool {
 	// cond:
 	// result: (MULLW  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMULLW)
@@ -4277,6 +4421,7 @@ func rewriteValueS390X_OpMul32F_0(v *Value) bool {
 	// cond:
 	// result: (FMULS x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XFMULS)
@@ -4290,6 +4435,7 @@ func rewriteValueS390X_OpMul64_0(v *Value) bool {
 	// cond:
 	// result: (MULLD  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMULLD)
@@ -4303,6 +4449,7 @@ func rewriteValueS390X_OpMul64F_0(v *Value) bool {
 	// cond:
 	// result: (FMUL x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XFMUL)
@@ -4316,6 +4463,7 @@ func rewriteValueS390X_OpMul8_0(v *Value) bool {
 	// cond:
 	// result: (MULLW  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMULLW)
@@ -4411,6 +4559,7 @@ func rewriteValueS390X_OpNeq16_0(v *Value) bool {
 	// cond:
 	// result: (MOVDNE (MOVDconst [0]) (MOVDconst [1]) (CMP (MOVHreg x) (MOVHreg y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDNE)
@@ -4440,6 +4589,7 @@ func rewriteValueS390X_OpNeq32_0(v *Value) bool {
 	// cond:
 	// result: (MOVDNE (MOVDconst [0]) (MOVDconst [1]) (CMPW x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDNE)
@@ -4465,6 +4615,7 @@ func rewriteValueS390X_OpNeq32F_0(v *Value) bool {
 	// cond:
 	// result: (MOVDNE (MOVDconst [0]) (MOVDconst [1]) (FCMPS x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDNE)
@@ -4490,6 +4641,7 @@ func rewriteValueS390X_OpNeq64_0(v *Value) bool {
 	// cond:
 	// result: (MOVDNE (MOVDconst [0]) (MOVDconst [1]) (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDNE)
@@ -4515,6 +4667,7 @@ func rewriteValueS390X_OpNeq64F_0(v *Value) bool {
 	// cond:
 	// result: (MOVDNE (MOVDconst [0]) (MOVDconst [1]) (FCMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDNE)
@@ -4540,6 +4693,7 @@ func rewriteValueS390X_OpNeq8_0(v *Value) bool {
 	// cond:
 	// result: (MOVDNE (MOVDconst [0]) (MOVDconst [1]) (CMP (MOVBreg x) (MOVBreg y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDNE)
@@ -4569,6 +4723,7 @@ func rewriteValueS390X_OpNeqB_0(v *Value) bool {
 	// cond:
 	// result: (MOVDNE (MOVDconst [0]) (MOVDconst [1]) (CMP (MOVBreg x) (MOVBreg y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDNE)
@@ -4598,6 +4753,7 @@ func rewriteValueS390X_OpNeqPtr_0(v *Value) bool {
 	// cond:
 	// result: (MOVDNE (MOVDconst [0]) (MOVDconst [1]) (CMP x y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XMOVDNE)
@@ -4619,6 +4775,7 @@ func rewriteValueS390X_OpNilCheck_0(v *Value) bool {
 	// cond:
 	// result: (LoweredNilCheck ptr mem)
 	for {
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpS390XLoweredNilCheck)
@@ -4691,6 +4848,7 @@ func rewriteValueS390X_OpOr16_0(v *Value) bool {
 	// cond:
 	// result: (ORW x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XORW)
@@ -4704,6 +4862,7 @@ func rewriteValueS390X_OpOr32_0(v *Value) bool {
 	// cond:
 	// result: (ORW x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XORW)
@@ -4717,6 +4876,7 @@ func rewriteValueS390X_OpOr64_0(v *Value) bool {
 	// cond:
 	// result: (OR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XOR)
@@ -4730,6 +4890,7 @@ func rewriteValueS390X_OpOr8_0(v *Value) bool {
 	// cond:
 	// result: (ORW x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XORW)
@@ -4743,6 +4904,7 @@ func rewriteValueS390X_OpOrB_0(v *Value) bool {
 	// cond:
 	// result: (ORW x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XORW)
@@ -4783,6 +4945,7 @@ func rewriteValueS390X_OpRsh16Ux16_0(v *Value) bool {
 	// result: (ANDW (SRW <t> (MOVHZreg x) y) (SUBEWcarrymask <t> (CMPWUconst (MOVHZreg y) [15])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XANDW)
@@ -4813,6 +4976,7 @@ func rewriteValueS390X_OpRsh16Ux32_0(v *Value) bool {
 	// result: (ANDW (SRW <t> (MOVHZreg x) y) (SUBEWcarrymask <t> (CMPWUconst y [15])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XANDW)
@@ -4841,6 +5005,7 @@ func rewriteValueS390X_OpRsh16Ux64_0(v *Value) bool {
 	// result: (ANDW (SRW <t> (MOVHZreg x) y) (SUBEWcarrymask <t> (CMPUconst y [15])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XANDW)
@@ -4869,6 +5034,7 @@ func rewriteValueS390X_OpRsh16Ux8_0(v *Value) bool {
 	// result: (ANDW (SRW <t> (MOVHZreg x) y) (SUBEWcarrymask <t> (CMPWUconst (MOVBZreg y) [15])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XANDW)
@@ -4899,6 +5065,7 @@ func rewriteValueS390X_OpRsh16x16_0(v *Value) bool {
 	// result: (SRAW <t> (MOVHreg x) (ORW <y.Type> y (NOTW <y.Type> (SUBEWcarrymask <y.Type> (CMPWUconst (MOVHZreg y) [15])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XSRAW)
@@ -4932,6 +5099,7 @@ func rewriteValueS390X_OpRsh16x32_0(v *Value) bool {
 	// result: (SRAW <t> (MOVHreg x) (ORW <y.Type> y (NOTW <y.Type> (SUBEWcarrymask <y.Type> (CMPWUconst y [15])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XSRAW)
@@ -4963,6 +5131,7 @@ func rewriteValueS390X_OpRsh16x64_0(v *Value) bool {
 	// result: (SRAW <t> (MOVHreg x) (OR <y.Type> y (NOT <y.Type> (SUBEcarrymask <y.Type> (CMPUconst y [15])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XSRAW)
@@ -4994,6 +5163,7 @@ func rewriteValueS390X_OpRsh16x8_0(v *Value) bool {
 	// result: (SRAW <t> (MOVHreg x) (ORW <y.Type> y (NOTW <y.Type> (SUBEWcarrymask <y.Type> (CMPWUconst (MOVBZreg y) [15])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XSRAW)
@@ -5027,6 +5197,7 @@ func rewriteValueS390X_OpRsh32Ux16_0(v *Value) bool {
 	// result: (ANDW (SRW <t> x y) (SUBEWcarrymask <t> (CMPWUconst (MOVHZreg y) [31])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XANDW)
@@ -5053,6 +5224,7 @@ func rewriteValueS390X_OpRsh32Ux32_0(v *Value) bool {
 	// result: (ANDW (SRW <t> x y) (SUBEWcarrymask <t> (CMPWUconst y [31])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XANDW)
@@ -5077,6 +5249,7 @@ func rewriteValueS390X_OpRsh32Ux64_0(v *Value) bool {
 	// result: (ANDW (SRW <t> x y) (SUBEWcarrymask <t> (CMPUconst y [31])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XANDW)
@@ -5103,6 +5276,7 @@ func rewriteValueS390X_OpRsh32Ux8_0(v *Value) bool {
 	// result: (ANDW (SRW <t> x y) (SUBEWcarrymask <t> (CMPWUconst (MOVBZreg y) [31])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XANDW)
@@ -5131,6 +5305,7 @@ func rewriteValueS390X_OpRsh32x16_0(v *Value) bool {
 	// result: (SRAW <t> x (ORW <y.Type> y (NOTW <y.Type> (SUBEWcarrymask <y.Type> (CMPWUconst (MOVHZreg y) [31])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XSRAW)
@@ -5160,6 +5335,7 @@ func rewriteValueS390X_OpRsh32x32_0(v *Value) bool {
 	// result: (SRAW <t> x (ORW <y.Type> y (NOTW <y.Type> (SUBEWcarrymask <y.Type> (CMPWUconst y [31])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XSRAW)
@@ -5187,6 +5363,7 @@ func rewriteValueS390X_OpRsh32x64_0(v *Value) bool {
 	// result: (SRAW <t> x (OR <y.Type> y (NOT <y.Type> (SUBEcarrymask <y.Type> (CMPUconst y [31])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XSRAW)
@@ -5216,6 +5393,7 @@ func rewriteValueS390X_OpRsh32x8_0(v *Value) bool {
 	// result: (SRAW <t> x (ORW <y.Type> y (NOTW <y.Type> (SUBEWcarrymask <y.Type> (CMPWUconst (MOVBZreg y) [31])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XSRAW)
@@ -5247,6 +5425,7 @@ func rewriteValueS390X_OpRsh64Ux16_0(v *Value) bool {
 	// result: (AND (SRD <t> x y) (SUBEcarrymask <t> (CMPWUconst (MOVHZreg y) [63])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XAND)
@@ -5273,6 +5452,7 @@ func rewriteValueS390X_OpRsh64Ux32_0(v *Value) bool {
 	// result: (AND (SRD <t> x y) (SUBEcarrymask <t> (CMPWUconst y [63])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XAND)
@@ -5297,6 +5477,7 @@ func rewriteValueS390X_OpRsh64Ux64_0(v *Value) bool {
 	// result: (AND (SRD <t> x y) (SUBEcarrymask <t> (CMPUconst y [63])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XAND)
@@ -5323,6 +5504,7 @@ func rewriteValueS390X_OpRsh64Ux8_0(v *Value) bool {
 	// result: (AND (SRD <t> x y) (SUBEcarrymask <t> (CMPWUconst (MOVBZreg y) [63])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XAND)
@@ -5351,6 +5533,7 @@ func rewriteValueS390X_OpRsh64x16_0(v *Value) bool {
 	// result: (SRAD <t> x (ORW <y.Type> y (NOTW <y.Type> (SUBEWcarrymask <y.Type> (CMPWUconst (MOVHZreg y) [63])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XSRAD)
@@ -5380,6 +5563,7 @@ func rewriteValueS390X_OpRsh64x32_0(v *Value) bool {
 	// result: (SRAD <t> x (ORW <y.Type> y (NOTW <y.Type> (SUBEWcarrymask <y.Type> (CMPWUconst y [63])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XSRAD)
@@ -5407,6 +5591,7 @@ func rewriteValueS390X_OpRsh64x64_0(v *Value) bool {
 	// result: (SRAD <t> x (OR <y.Type> y (NOT <y.Type> (SUBEcarrymask <y.Type> (CMPUconst y [63])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XSRAD)
@@ -5436,6 +5621,7 @@ func rewriteValueS390X_OpRsh64x8_0(v *Value) bool {
 	// result: (SRAD <t> x (ORW <y.Type> y (NOTW <y.Type> (SUBEWcarrymask <y.Type> (CMPWUconst (MOVBZreg y) [63])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XSRAD)
@@ -5467,6 +5653,7 @@ func rewriteValueS390X_OpRsh8Ux16_0(v *Value) bool {
 	// result: (ANDW (SRW <t> (MOVBZreg x) y) (SUBEWcarrymask <t> (CMPWUconst (MOVHZreg y) [7])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XANDW)
@@ -5497,6 +5684,7 @@ func rewriteValueS390X_OpRsh8Ux32_0(v *Value) bool {
 	// result: (ANDW (SRW <t> (MOVBZreg x) y) (SUBEWcarrymask <t> (CMPWUconst y [7])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XANDW)
@@ -5525,6 +5713,7 @@ func rewriteValueS390X_OpRsh8Ux64_0(v *Value) bool {
 	// result: (ANDW (SRW <t> (MOVBZreg x) y) (SUBEWcarrymask <t> (CMPUconst y [7])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XANDW)
@@ -5553,6 +5742,7 @@ func rewriteValueS390X_OpRsh8Ux8_0(v *Value) bool {
 	// result: (ANDW (SRW <t> (MOVBZreg x) y) (SUBEWcarrymask <t> (CMPWUconst (MOVBZreg y) [7])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XANDW)
@@ -5583,6 +5773,7 @@ func rewriteValueS390X_OpRsh8x16_0(v *Value) bool {
 	// result: (SRAW <t> (MOVBreg x) (ORW <y.Type> y (NOTW <y.Type> (SUBEWcarrymask <y.Type> (CMPWUconst (MOVHZreg y) [7])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XSRAW)
@@ -5616,6 +5807,7 @@ func rewriteValueS390X_OpRsh8x32_0(v *Value) bool {
 	// result: (SRAW <t> (MOVBreg x) (ORW <y.Type> y (NOTW <y.Type> (SUBEWcarrymask <y.Type> (CMPWUconst y [7])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XSRAW)
@@ -5647,6 +5839,7 @@ func rewriteValueS390X_OpRsh8x64_0(v *Value) bool {
 	// result: (SRAW <t> (MOVBreg x) (OR <y.Type> y (NOT <y.Type> (SUBEcarrymask <y.Type> (CMPUconst y [7])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XSRAW)
@@ -5678,6 +5871,7 @@ func rewriteValueS390X_OpRsh8x8_0(v *Value) bool {
 	// result: (SRAW <t> (MOVBreg x) (ORW <y.Type> y (NOTW <y.Type> (SUBEWcarrymask <y.Type> (CMPWUconst (MOVBZreg y) [7])))))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XSRAW)
@@ -5706,6 +5900,7 @@ func rewriteValueS390X_OpS390XADD_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (ADDconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDconst {
@@ -5724,6 +5919,7 @@ func rewriteValueS390X_OpS390XADD_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (ADDconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDconst {
 			break
@@ -5742,6 +5938,7 @@ func rewriteValueS390X_OpS390XADD_0(v *Value) bool {
 	// cond: d == 64-c
 	// result: (RLLGconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XSLDconst {
 			break
@@ -5768,6 +5965,7 @@ func rewriteValueS390X_OpS390XADD_0(v *Value) bool {
 	// cond: d == 64-c
 	// result: (RLLGconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XSRDconst {
 			break
@@ -5794,6 +5992,7 @@ func rewriteValueS390X_OpS390XADD_0(v *Value) bool {
 	// cond: ptr.Op != OpSB && idx.Op != OpSB
 	// result: (MOVDaddridx [c] {s} ptr idx)
 	for {
+		_ = v.Args[1]
 		idx := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDaddr {
@@ -5816,6 +6015,7 @@ func rewriteValueS390X_OpS390XADD_0(v *Value) bool {
 	// cond: ptr.Op != OpSB && idx.Op != OpSB
 	// result: (MOVDaddridx [c] {s} ptr idx)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddr {
 			break
@@ -5838,6 +6038,7 @@ func rewriteValueS390X_OpS390XADD_0(v *Value) bool {
 	// cond:
 	// result: (SUB x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XNEG {
@@ -5853,6 +6054,7 @@ func rewriteValueS390X_OpS390XADD_0(v *Value) bool {
 	// cond:
 	// result: (SUB x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XNEG {
 			break
@@ -5869,6 +6071,7 @@ func rewriteValueS390X_OpS390XADD_0(v *Value) bool {
 	// result: (ADDload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVDload {
@@ -5876,6 +6079,7 @@ func rewriteValueS390X_OpS390XADD_0(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -5895,12 +6099,14 @@ func rewriteValueS390X_OpS390XADD_0(v *Value) bool {
 	// result: (ADDload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		g := v.Args[0]
 		if g.Op != OpS390XMOVDload {
 			break
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		x := v.Args[1]
@@ -5924,12 +6130,14 @@ func rewriteValueS390X_OpS390XADD_10(v *Value) bool {
 	// result: (ADDload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		g := v.Args[0]
 		if g.Op != OpS390XMOVDload {
 			break
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		x := v.Args[1]
@@ -5950,6 +6158,7 @@ func rewriteValueS390X_OpS390XADD_10(v *Value) bool {
 	// result: (ADDload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVDload {
@@ -5957,6 +6166,7 @@ func rewriteValueS390X_OpS390XADD_10(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -5978,6 +6188,7 @@ func rewriteValueS390X_OpS390XADDW_0(v *Value) bool {
 	// cond:
 	// result: (ADDWconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDconst {
@@ -5993,6 +6204,7 @@ func rewriteValueS390X_OpS390XADDW_0(v *Value) bool {
 	// cond:
 	// result: (ADDWconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDconst {
 			break
@@ -6008,6 +6220,7 @@ func rewriteValueS390X_OpS390XADDW_0(v *Value) bool {
 	// cond: d == 32-c
 	// result: (RLLconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XSLWconst {
 			break
@@ -6034,6 +6247,7 @@ func rewriteValueS390X_OpS390XADDW_0(v *Value) bool {
 	// cond: d == 32-c
 	// result: (RLLconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XSRWconst {
 			break
@@ -6060,6 +6274,7 @@ func rewriteValueS390X_OpS390XADDW_0(v *Value) bool {
 	// cond:
 	// result: (SUBW x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XNEGW {
@@ -6075,6 +6290,7 @@ func rewriteValueS390X_OpS390XADDW_0(v *Value) bool {
 	// cond:
 	// result: (SUBW x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XNEGW {
 			break
@@ -6091,6 +6307,7 @@ func rewriteValueS390X_OpS390XADDW_0(v *Value) bool {
 	// result: (ADDWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVWload {
@@ -6098,6 +6315,7 @@ func rewriteValueS390X_OpS390XADDW_0(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -6117,12 +6335,14 @@ func rewriteValueS390X_OpS390XADDW_0(v *Value) bool {
 	// result: (ADDWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		g := v.Args[0]
 		if g.Op != OpS390XMOVWload {
 			break
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		x := v.Args[1]
@@ -6143,12 +6363,14 @@ func rewriteValueS390X_OpS390XADDW_0(v *Value) bool {
 	// result: (ADDWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		g := v.Args[0]
 		if g.Op != OpS390XMOVWload {
 			break
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		x := v.Args[1]
@@ -6169,6 +6391,7 @@ func rewriteValueS390X_OpS390XADDW_0(v *Value) bool {
 	// result: (ADDWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVWload {
@@ -6176,6 +6399,7 @@ func rewriteValueS390X_OpS390XADDW_0(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -6198,6 +6422,7 @@ func rewriteValueS390X_OpS390XADDW_10(v *Value) bool {
 	// result: (ADDWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVWZload {
@@ -6205,6 +6430,7 @@ func rewriteValueS390X_OpS390XADDW_10(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -6224,12 +6450,14 @@ func rewriteValueS390X_OpS390XADDW_10(v *Value) bool {
 	// result: (ADDWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		g := v.Args[0]
 		if g.Op != OpS390XMOVWZload {
 			break
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		x := v.Args[1]
@@ -6250,12 +6478,14 @@ func rewriteValueS390X_OpS390XADDW_10(v *Value) bool {
 	// result: (ADDWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		g := v.Args[0]
 		if g.Op != OpS390XMOVWZload {
 			break
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		x := v.Args[1]
@@ -6276,6 +6506,7 @@ func rewriteValueS390X_OpS390XADDW_10(v *Value) bool {
 	// result: (ADDWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVWZload {
@@ -6283,6 +6514,7 @@ func rewriteValueS390X_OpS390XADDW_10(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -6403,6 +6635,7 @@ func rewriteValueS390X_OpS390XADDconst_0(v *Value) bool {
 		}
 		d := v_0.AuxInt
 		s := v_0.Aux
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if !(is20Bit(c + d)) {
@@ -6468,6 +6701,7 @@ func rewriteValueS390X_OpS390XAND_0(v *Value) bool {
 	// cond: is32Bit(c) && c < 0
 	// result: (ANDconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDconst {
@@ -6486,6 +6720,7 @@ func rewriteValueS390X_OpS390XAND_0(v *Value) bool {
 	// cond: is32Bit(c) && c < 0
 	// result: (ANDconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDconst {
 			break
@@ -6504,6 +6739,7 @@ func rewriteValueS390X_OpS390XAND_0(v *Value) bool {
 	// cond:
 	// result: (MOVBZreg x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDconst {
@@ -6520,6 +6756,7 @@ func rewriteValueS390X_OpS390XAND_0(v *Value) bool {
 	// cond:
 	// result: (MOVBZreg x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDconst {
 			break
@@ -6536,6 +6773,7 @@ func rewriteValueS390X_OpS390XAND_0(v *Value) bool {
 	// cond:
 	// result: (MOVHZreg x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDconst {
@@ -6552,6 +6790,7 @@ func rewriteValueS390X_OpS390XAND_0(v *Value) bool {
 	// cond:
 	// result: (MOVHZreg x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDconst {
 			break
@@ -6568,6 +6807,7 @@ func rewriteValueS390X_OpS390XAND_0(v *Value) bool {
 	// cond:
 	// result: (MOVWZreg x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDconst {
@@ -6584,6 +6824,7 @@ func rewriteValueS390X_OpS390XAND_0(v *Value) bool {
 	// cond:
 	// result: (MOVWZreg x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDconst {
 			break
@@ -6600,6 +6841,7 @@ func rewriteValueS390X_OpS390XAND_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [c&d])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDconst {
 			break
@@ -6618,6 +6860,7 @@ func rewriteValueS390X_OpS390XAND_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [c&d])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDconst {
 			break
@@ -6639,6 +6882,7 @@ func rewriteValueS390X_OpS390XAND_10(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -6653,6 +6897,7 @@ func rewriteValueS390X_OpS390XAND_10(v *Value) bool {
 	// result: (ANDload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVDload {
@@ -6660,6 +6905,7 @@ func rewriteValueS390X_OpS390XAND_10(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -6679,12 +6925,14 @@ func rewriteValueS390X_OpS390XAND_10(v *Value) bool {
 	// result: (ANDload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		g := v.Args[0]
 		if g.Op != OpS390XMOVDload {
 			break
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		x := v.Args[1]
@@ -6705,12 +6953,14 @@ func rewriteValueS390X_OpS390XAND_10(v *Value) bool {
 	// result: (ANDload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		g := v.Args[0]
 		if g.Op != OpS390XMOVDload {
 			break
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		x := v.Args[1]
@@ -6731,6 +6981,7 @@ func rewriteValueS390X_OpS390XAND_10(v *Value) bool {
 	// result: (ANDload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVDload {
@@ -6738,6 +6989,7 @@ func rewriteValueS390X_OpS390XAND_10(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -6759,6 +7011,7 @@ func rewriteValueS390X_OpS390XANDW_0(v *Value) bool {
 	// cond:
 	// result: (ANDWconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDconst {
@@ -6774,6 +7027,7 @@ func rewriteValueS390X_OpS390XANDW_0(v *Value) bool {
 	// cond:
 	// result: (ANDWconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDconst {
 			break
@@ -6789,6 +7043,7 @@ func rewriteValueS390X_OpS390XANDW_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -6803,6 +7058,7 @@ func rewriteValueS390X_OpS390XANDW_0(v *Value) bool {
 	// result: (ANDWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVWload {
@@ -6810,6 +7066,7 @@ func rewriteValueS390X_OpS390XANDW_0(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -6829,12 +7086,14 @@ func rewriteValueS390X_OpS390XANDW_0(v *Value) bool {
 	// result: (ANDWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		g := v.Args[0]
 		if g.Op != OpS390XMOVWload {
 			break
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		x := v.Args[1]
@@ -6855,12 +7114,14 @@ func rewriteValueS390X_OpS390XANDW_0(v *Value) bool {
 	// result: (ANDWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		g := v.Args[0]
 		if g.Op != OpS390XMOVWload {
 			break
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		x := v.Args[1]
@@ -6881,6 +7142,7 @@ func rewriteValueS390X_OpS390XANDW_0(v *Value) bool {
 	// result: (ANDWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVWload {
@@ -6888,6 +7150,7 @@ func rewriteValueS390X_OpS390XANDW_0(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -6907,6 +7170,7 @@ func rewriteValueS390X_OpS390XANDW_0(v *Value) bool {
 	// result: (ANDWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVWZload {
@@ -6914,6 +7178,7 @@ func rewriteValueS390X_OpS390XANDW_0(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -6933,12 +7198,14 @@ func rewriteValueS390X_OpS390XANDW_0(v *Value) bool {
 	// result: (ANDWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		g := v.Args[0]
 		if g.Op != OpS390XMOVWZload {
 			break
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		x := v.Args[1]
@@ -6959,12 +7226,14 @@ func rewriteValueS390X_OpS390XANDW_0(v *Value) bool {
 	// result: (ANDWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		g := v.Args[0]
 		if g.Op != OpS390XMOVWZload {
 			break
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		x := v.Args[1]
@@ -6988,6 +7257,7 @@ func rewriteValueS390X_OpS390XANDW_10(v *Value) bool {
 	// result: (ANDWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVWZload {
@@ -6995,6 +7265,7 @@ func rewriteValueS390X_OpS390XANDW_10(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -7158,6 +7429,7 @@ func rewriteValueS390X_OpS390XCMP_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (CMPconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDconst {
@@ -7176,6 +7448,7 @@ func rewriteValueS390X_OpS390XCMP_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (InvertFlags (CMPconst x [c]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDconst {
 			break
@@ -7201,6 +7474,7 @@ func rewriteValueS390X_OpS390XCMPU_0(v *Value) bool {
 	// cond: isU32Bit(c)
 	// result: (CMPUconst x [int64(uint32(c))])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDconst {
@@ -7219,6 +7493,7 @@ func rewriteValueS390X_OpS390XCMPU_0(v *Value) bool {
 	// cond: isU32Bit(c)
 	// result: (InvertFlags (CMPUconst x [int64(uint32(c))]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDconst {
 			break
@@ -7295,6 +7570,7 @@ func rewriteValueS390X_OpS390XCMPW_0(v *Value) bool {
 	// cond:
 	// result: (CMPWconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDconst {
@@ -7310,6 +7586,7 @@ func rewriteValueS390X_OpS390XCMPW_0(v *Value) bool {
 	// cond:
 	// result: (InvertFlags (CMPWconst x [c]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDconst {
 			break
@@ -7332,6 +7609,7 @@ func rewriteValueS390X_OpS390XCMPWU_0(v *Value) bool {
 	// cond:
 	// result: (CMPWUconst x [int64(uint32(c))])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDconst {
@@ -7347,6 +7625,7 @@ func rewriteValueS390X_OpS390XCMPWU_0(v *Value) bool {
 	// cond:
 	// result: (InvertFlags (CMPWUconst x [int64(uint32(c))]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDconst {
 			break
@@ -7629,10 +7908,12 @@ func rewriteValueS390X_OpS390XFADD_0(v *Value) bool {
 	// cond:
 	// result: (FMADD x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XFMUL {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -7646,11 +7927,13 @@ func rewriteValueS390X_OpS390XFADD_0(v *Value) bool {
 	// cond:
 	// result: (FMADD x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XFMUL {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpS390XFMADD)
@@ -7666,10 +7949,12 @@ func rewriteValueS390X_OpS390XFADDS_0(v *Value) bool {
 	// cond:
 	// result: (FMADDS x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XFMULS {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -7683,11 +7968,13 @@ func rewriteValueS390X_OpS390XFADDS_0(v *Value) bool {
 	// cond:
 	// result: (FMADDS x y z)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XFMULS {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		z := v_1.Args[1]
 		v.reset(OpS390XFMADDS)
@@ -7705,6 +7992,7 @@ func rewriteValueS390X_OpS390XFMOVDload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -7728,6 +8016,7 @@ func rewriteValueS390X_OpS390XFMOVDload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddr {
 			break
@@ -7752,12 +8041,14 @@ func rewriteValueS390X_OpS390XFMOVDload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddridx {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -7778,10 +8069,12 @@ func rewriteValueS390X_OpS390XFMOVDload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADD {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -7805,6 +8098,7 @@ func rewriteValueS390X_OpS390XFMOVDloadidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -7827,6 +8121,7 @@ func rewriteValueS390X_OpS390XFMOVDloadidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XADDconst {
@@ -7852,6 +8147,7 @@ func rewriteValueS390X_OpS390XFMOVDstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -7877,6 +8173,7 @@ func rewriteValueS390X_OpS390XFMOVDstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddr {
 			break
@@ -7903,12 +8200,14 @@ func rewriteValueS390X_OpS390XFMOVDstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddridx {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -7931,10 +8230,12 @@ func rewriteValueS390X_OpS390XFMOVDstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADD {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -7960,6 +8261,7 @@ func rewriteValueS390X_OpS390XFMOVDstoreidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -7984,6 +8286,7 @@ func rewriteValueS390X_OpS390XFMOVDstoreidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XADDconst {
@@ -8011,6 +8314,7 @@ func rewriteValueS390X_OpS390XFMOVSload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -8034,6 +8338,7 @@ func rewriteValueS390X_OpS390XFMOVSload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddr {
 			break
@@ -8058,12 +8363,14 @@ func rewriteValueS390X_OpS390XFMOVSload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddridx {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -8084,10 +8391,12 @@ func rewriteValueS390X_OpS390XFMOVSload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADD {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -8111,6 +8420,7 @@ func rewriteValueS390X_OpS390XFMOVSloadidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -8133,6 +8443,7 @@ func rewriteValueS390X_OpS390XFMOVSloadidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XADDconst {
@@ -8158,6 +8469,7 @@ func rewriteValueS390X_OpS390XFMOVSstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -8183,6 +8495,7 @@ func rewriteValueS390X_OpS390XFMOVSstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddr {
 			break
@@ -8209,12 +8522,14 @@ func rewriteValueS390X_OpS390XFMOVSstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddridx {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -8237,10 +8552,12 @@ func rewriteValueS390X_OpS390XFMOVSstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADD {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -8266,6 +8583,7 @@ func rewriteValueS390X_OpS390XFMOVSstoreidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -8290,6 +8608,7 @@ func rewriteValueS390X_OpS390XFMOVSstoreidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XADDconst {
@@ -8315,10 +8634,12 @@ func rewriteValueS390X_OpS390XFSUB_0(v *Value) bool {
 	// cond:
 	// result: (FMSUB x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XFMUL {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -8335,10 +8656,12 @@ func rewriteValueS390X_OpS390XFSUBS_0(v *Value) bool {
 	// cond:
 	// result: (FMSUBS x y z)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XFMULS {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		z := v_0.Args[1]
 		x := v.Args[1]
@@ -8389,6 +8712,7 @@ func rewriteValueS390X_OpS390XMOVBZload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVBstore {
@@ -8396,6 +8720,7 @@ func rewriteValueS390X_OpS390XMOVBZload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2)) {
@@ -8411,6 +8736,7 @@ func rewriteValueS390X_OpS390XMOVBZload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -8434,6 +8760,7 @@ func rewriteValueS390X_OpS390XMOVBZload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddr {
 			break
@@ -8458,12 +8785,14 @@ func rewriteValueS390X_OpS390XMOVBZload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddridx {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -8484,10 +8813,12 @@ func rewriteValueS390X_OpS390XMOVBZload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADD {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -8511,6 +8842,7 @@ func rewriteValueS390X_OpS390XMOVBZloadidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -8533,6 +8865,7 @@ func rewriteValueS390X_OpS390XMOVBZloadidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		idx := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XADDconst {
@@ -8555,6 +8888,7 @@ func rewriteValueS390X_OpS390XMOVBZloadidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XADDconst {
@@ -8577,6 +8911,7 @@ func rewriteValueS390X_OpS390XMOVBZloadidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -8604,6 +8939,7 @@ func rewriteValueS390X_OpS390XMOVBZreg_0(v *Value) bool {
 		if x.Op != OpS390XMOVDLT {
 			break
 		}
+		_ = x.Args[2]
 		x_0 := x.Args[0]
 		if x_0.Op != OpS390XMOVDconst {
 			break
@@ -8629,6 +8965,7 @@ func rewriteValueS390X_OpS390XMOVBZreg_0(v *Value) bool {
 		if x.Op != OpS390XMOVDLE {
 			break
 		}
+		_ = x.Args[2]
 		x_0 := x.Args[0]
 		if x_0.Op != OpS390XMOVDconst {
 			break
@@ -8654,6 +8991,7 @@ func rewriteValueS390X_OpS390XMOVBZreg_0(v *Value) bool {
 		if x.Op != OpS390XMOVDGT {
 			break
 		}
+		_ = x.Args[2]
 		x_0 := x.Args[0]
 		if x_0.Op != OpS390XMOVDconst {
 			break
@@ -8679,6 +9017,7 @@ func rewriteValueS390X_OpS390XMOVBZreg_0(v *Value) bool {
 		if x.Op != OpS390XMOVDGE {
 			break
 		}
+		_ = x.Args[2]
 		x_0 := x.Args[0]
 		if x_0.Op != OpS390XMOVDconst {
 			break
@@ -8704,6 +9043,7 @@ func rewriteValueS390X_OpS390XMOVBZreg_0(v *Value) bool {
 		if x.Op != OpS390XMOVDEQ {
 			break
 		}
+		_ = x.Args[2]
 		x_0 := x.Args[0]
 		if x_0.Op != OpS390XMOVDconst {
 			break
@@ -8729,6 +9069,7 @@ func rewriteValueS390X_OpS390XMOVBZreg_0(v *Value) bool {
 		if x.Op != OpS390XMOVDNE {
 			break
 		}
+		_ = x.Args[2]
 		x_0 := x.Args[0]
 		if x_0.Op != OpS390XMOVDconst {
 			break
@@ -8754,6 +9095,7 @@ func rewriteValueS390X_OpS390XMOVBZreg_0(v *Value) bool {
 		if x.Op != OpS390XMOVDGTnoinv {
 			break
 		}
+		_ = x.Args[2]
 		x_0 := x.Args[0]
 		if x_0.Op != OpS390XMOVDconst {
 			break
@@ -8779,6 +9121,7 @@ func rewriteValueS390X_OpS390XMOVBZreg_0(v *Value) bool {
 		if x.Op != OpS390XMOVDGEnoinv {
 			break
 		}
+		_ = x.Args[2]
 		x_0 := x.Args[0]
 		if x_0.Op != OpS390XMOVDconst {
 			break
@@ -8804,6 +9147,7 @@ func rewriteValueS390X_OpS390XMOVBZreg_0(v *Value) bool {
 		if x.Op != OpS390XMOVBZload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpS390XMOVDreg)
 		v.AddArg(x)
 		return true
@@ -8864,6 +9208,7 @@ func rewriteValueS390X_OpS390XMOVBZreg_10(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -8889,6 +9234,7 @@ func rewriteValueS390X_OpS390XMOVBZreg_10(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[2]
 		ptr := x.Args[0]
 		idx := x.Args[1]
 		mem := x.Args[2]
@@ -8915,6 +9261,7 @@ func rewriteValueS390X_OpS390XMOVBload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -8938,6 +9285,7 @@ func rewriteValueS390X_OpS390XMOVBload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddr {
 			break
@@ -8969,6 +9317,7 @@ func rewriteValueS390X_OpS390XMOVBreg_0(v *Value) bool {
 		if x.Op != OpS390XMOVBload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpS390XMOVDreg)
 		v.AddArg(x)
 		return true
@@ -9024,6 +9373,7 @@ func rewriteValueS390X_OpS390XMOVBreg_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -9048,6 +9398,7 @@ func rewriteValueS390X_OpS390XMOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVBreg {
@@ -9069,6 +9420,7 @@ func rewriteValueS390X_OpS390XMOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVBZreg {
@@ -9090,6 +9442,7 @@ func rewriteValueS390X_OpS390XMOVBstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -9115,6 +9468,7 @@ func rewriteValueS390X_OpS390XMOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDconst {
@@ -9138,6 +9492,7 @@ func rewriteValueS390X_OpS390XMOVBstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddr {
 			break
@@ -9164,12 +9519,14 @@ func rewriteValueS390X_OpS390XMOVBstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddridx {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -9192,10 +9549,12 @@ func rewriteValueS390X_OpS390XMOVBstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADD {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -9218,6 +9577,7 @@ func rewriteValueS390X_OpS390XMOVBstore_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		w := v.Args[1]
 		x := v.Args[2]
@@ -9230,6 +9590,7 @@ func rewriteValueS390X_OpS390XMOVBstore_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -9261,6 +9622,7 @@ func rewriteValueS390X_OpS390XMOVBstore_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		w0 := v.Args[1]
 		if w0.Op != OpS390XSRDconst {
@@ -9278,6 +9640,7 @@ func rewriteValueS390X_OpS390XMOVBstore_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -9309,6 +9672,7 @@ func rewriteValueS390X_OpS390XMOVBstore_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		w := v.Args[1]
 		x := v.Args[2]
@@ -9321,6 +9685,7 @@ func rewriteValueS390X_OpS390XMOVBstore_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -9355,6 +9720,7 @@ func rewriteValueS390X_OpS390XMOVBstore_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		w0 := v.Args[1]
 		if w0.Op != OpS390XSRWconst {
@@ -9372,6 +9738,7 @@ func rewriteValueS390X_OpS390XMOVBstore_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -9403,6 +9770,7 @@ func rewriteValueS390X_OpS390XMOVBstore_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XSRDconst {
@@ -9422,6 +9790,7 @@ func rewriteValueS390X_OpS390XMOVBstore_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -9446,6 +9815,7 @@ func rewriteValueS390X_OpS390XMOVBstore_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XSRDconst {
@@ -9463,6 +9833,7 @@ func rewriteValueS390X_OpS390XMOVBstore_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -9494,6 +9865,7 @@ func rewriteValueS390X_OpS390XMOVBstore_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XSRWconst {
@@ -9513,6 +9885,7 @@ func rewriteValueS390X_OpS390XMOVBstore_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -9537,6 +9910,7 @@ func rewriteValueS390X_OpS390XMOVBstore_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XSRWconst {
@@ -9554,6 +9928,7 @@ func rewriteValueS390X_OpS390XMOVBstore_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -9588,6 +9963,7 @@ func rewriteValueS390X_OpS390XMOVBstoreconst_0(v *Value) bool {
 	for {
 		sc := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -9611,6 +9987,7 @@ func rewriteValueS390X_OpS390XMOVBstoreconst_0(v *Value) bool {
 	for {
 		sc := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddr {
 			break
@@ -9635,6 +10012,7 @@ func rewriteValueS390X_OpS390XMOVBstoreconst_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		p := v.Args[0]
 		x := v.Args[1]
 		if x.Op != OpS390XMOVBstoreconst {
@@ -9644,6 +10022,7 @@ func rewriteValueS390X_OpS390XMOVBstoreconst_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[1]
 		if p != x.Args[0] {
 			break
 		}
@@ -9667,6 +10046,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -9691,6 +10071,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XADDconst {
@@ -9715,6 +10096,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XADDconst {
@@ -9739,6 +10121,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -9763,6 +10146,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		w := v.Args[2]
@@ -9776,6 +10160,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -9811,6 +10196,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		w := v.Args[2]
@@ -9824,6 +10210,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -9859,6 +10246,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		w := v.Args[2]
@@ -9872,6 +10260,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -9907,6 +10296,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		w := v.Args[2]
@@ -9920,6 +10310,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -9955,6 +10346,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		w0 := v.Args[2]
@@ -9973,6 +10365,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -10008,6 +10401,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		w0 := v.Args[2]
@@ -10026,6 +10420,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -10064,6 +10459,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		w0 := v.Args[2]
@@ -10082,6 +10478,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -10117,6 +10514,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		w0 := v.Args[2]
@@ -10135,6 +10533,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -10170,6 +10569,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		w := v.Args[2]
@@ -10183,6 +10583,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -10218,6 +10619,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		w := v.Args[2]
@@ -10231,6 +10633,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -10266,6 +10669,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		w := v.Args[2]
@@ -10279,6 +10683,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -10314,6 +10719,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		w := v.Args[2]
@@ -10327,6 +10733,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -10362,6 +10769,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		w0 := v.Args[2]
@@ -10380,6 +10788,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -10415,6 +10824,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		w0 := v.Args[2]
@@ -10433,6 +10843,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -10468,6 +10879,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		w0 := v.Args[2]
@@ -10486,6 +10898,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -10521,6 +10934,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		w0 := v.Args[2]
@@ -10539,6 +10953,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -10577,6 +10992,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_20(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -10597,6 +11013,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_20(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -10625,6 +11042,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_20(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -10645,6 +11063,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_20(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -10673,6 +11092,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_20(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		v_2 := v.Args[2]
@@ -10693,6 +11113,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_20(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -10721,6 +11142,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_20(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		v_2 := v.Args[2]
@@ -10741,6 +11163,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_20(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -10769,6 +11192,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_20(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -10787,6 +11211,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_20(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -10822,6 +11247,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_20(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -10840,6 +11266,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_20(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -10875,6 +11302,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_20(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		v_2 := v.Args[2]
@@ -10893,6 +11321,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_20(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -10928,6 +11357,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_20(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		v_2 := v.Args[2]
@@ -10946,6 +11376,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_20(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -10981,6 +11412,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_20(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -11001,6 +11433,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_20(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -11029,6 +11462,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_20(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -11049,6 +11483,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_20(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -11080,6 +11515,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_30(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		v_2 := v.Args[2]
@@ -11100,6 +11536,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_30(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -11128,6 +11565,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_30(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		v_2 := v.Args[2]
@@ -11148,6 +11586,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_30(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -11176,6 +11615,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_30(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -11194,6 +11634,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_30(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -11229,6 +11670,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_30(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -11247,6 +11689,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_30(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -11282,6 +11725,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_30(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		v_2 := v.Args[2]
@@ -11300,6 +11744,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_30(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -11335,6 +11780,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_30(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		v_2 := v.Args[2]
@@ -11353,6 +11799,7 @@ func rewriteValueS390X_OpS390XMOVBstoreidx_30(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -11389,6 +11836,7 @@ func rewriteValueS390X_OpS390XMOVDEQ_0(v *Value) bool {
 	// cond:
 	// result: (MOVDEQ x y cmp)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -11406,6 +11854,7 @@ func rewriteValueS390X_OpS390XMOVDEQ_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[2]
 		x := v.Args[1]
 		v_2 := v.Args[2]
 		if v_2.Op != OpS390XFlagEQ {
@@ -11420,6 +11869,7 @@ func rewriteValueS390X_OpS390XMOVDEQ_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[2]
 		y := v.Args[0]
 		v_2 := v.Args[2]
 		if v_2.Op != OpS390XFlagLT {
@@ -11434,6 +11884,7 @@ func rewriteValueS390X_OpS390XMOVDEQ_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[2]
 		y := v.Args[0]
 		v_2 := v.Args[2]
 		if v_2.Op != OpS390XFlagGT {
@@ -11451,6 +11902,7 @@ func rewriteValueS390X_OpS390XMOVDGE_0(v *Value) bool {
 	// cond:
 	// result: (MOVDLE x y cmp)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -11468,6 +11920,7 @@ func rewriteValueS390X_OpS390XMOVDGE_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[2]
 		x := v.Args[1]
 		v_2 := v.Args[2]
 		if v_2.Op != OpS390XFlagEQ {
@@ -11482,6 +11935,7 @@ func rewriteValueS390X_OpS390XMOVDGE_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[2]
 		y := v.Args[0]
 		v_2 := v.Args[2]
 		if v_2.Op != OpS390XFlagLT {
@@ -11496,6 +11950,7 @@ func rewriteValueS390X_OpS390XMOVDGE_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[2]
 		x := v.Args[1]
 		v_2 := v.Args[2]
 		if v_2.Op != OpS390XFlagGT {
@@ -11513,6 +11968,7 @@ func rewriteValueS390X_OpS390XMOVDGT_0(v *Value) bool {
 	// cond:
 	// result: (MOVDLT x y cmp)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -11530,6 +11986,7 @@ func rewriteValueS390X_OpS390XMOVDGT_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[2]
 		y := v.Args[0]
 		v_2 := v.Args[2]
 		if v_2.Op != OpS390XFlagEQ {
@@ -11544,6 +12001,7 @@ func rewriteValueS390X_OpS390XMOVDGT_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[2]
 		y := v.Args[0]
 		v_2 := v.Args[2]
 		if v_2.Op != OpS390XFlagLT {
@@ -11558,6 +12016,7 @@ func rewriteValueS390X_OpS390XMOVDGT_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[2]
 		x := v.Args[1]
 		v_2 := v.Args[2]
 		if v_2.Op != OpS390XFlagGT {
@@ -11575,6 +12034,7 @@ func rewriteValueS390X_OpS390XMOVDLE_0(v *Value) bool {
 	// cond:
 	// result: (MOVDGE x y cmp)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -11592,6 +12052,7 @@ func rewriteValueS390X_OpS390XMOVDLE_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[2]
 		x := v.Args[1]
 		v_2 := v.Args[2]
 		if v_2.Op != OpS390XFlagEQ {
@@ -11606,6 +12067,7 @@ func rewriteValueS390X_OpS390XMOVDLE_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[2]
 		x := v.Args[1]
 		v_2 := v.Args[2]
 		if v_2.Op != OpS390XFlagLT {
@@ -11620,6 +12082,7 @@ func rewriteValueS390X_OpS390XMOVDLE_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[2]
 		y := v.Args[0]
 		v_2 := v.Args[2]
 		if v_2.Op != OpS390XFlagGT {
@@ -11637,6 +12100,7 @@ func rewriteValueS390X_OpS390XMOVDLT_0(v *Value) bool {
 	// cond:
 	// result: (MOVDGT x y cmp)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -11654,6 +12118,7 @@ func rewriteValueS390X_OpS390XMOVDLT_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[2]
 		y := v.Args[0]
 		v_2 := v.Args[2]
 		if v_2.Op != OpS390XFlagEQ {
@@ -11668,6 +12133,7 @@ func rewriteValueS390X_OpS390XMOVDLT_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[2]
 		x := v.Args[1]
 		v_2 := v.Args[2]
 		if v_2.Op != OpS390XFlagLT {
@@ -11682,6 +12148,7 @@ func rewriteValueS390X_OpS390XMOVDLT_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[2]
 		y := v.Args[0]
 		v_2 := v.Args[2]
 		if v_2.Op != OpS390XFlagGT {
@@ -11699,6 +12166,7 @@ func rewriteValueS390X_OpS390XMOVDNE_0(v *Value) bool {
 	// cond:
 	// result: (MOVDNE x y cmp)
 	for {
+		_ = v.Args[2]
 		x := v.Args[0]
 		y := v.Args[1]
 		v_2 := v.Args[2]
@@ -11716,6 +12184,7 @@ func rewriteValueS390X_OpS390XMOVDNE_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[2]
 		y := v.Args[0]
 		v_2 := v.Args[2]
 		if v_2.Op != OpS390XFlagEQ {
@@ -11730,6 +12199,7 @@ func rewriteValueS390X_OpS390XMOVDNE_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[2]
 		x := v.Args[1]
 		v_2 := v.Args[2]
 		if v_2.Op != OpS390XFlagLT {
@@ -11744,6 +12214,7 @@ func rewriteValueS390X_OpS390XMOVDNE_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[2]
 		x := v.Args[1]
 		v_2 := v.Args[2]
 		if v_2.Op != OpS390XFlagGT {
@@ -11763,6 +12234,7 @@ func rewriteValueS390X_OpS390XMOVDaddridx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -11786,6 +12258,7 @@ func rewriteValueS390X_OpS390XMOVDaddridx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XADDconst {
@@ -11809,6 +12282,7 @@ func rewriteValueS390X_OpS390XMOVDaddridx_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddr {
 			break
@@ -11833,6 +12307,7 @@ func rewriteValueS390X_OpS390XMOVDaddridx_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDaddr {
@@ -11860,6 +12335,7 @@ func rewriteValueS390X_OpS390XMOVDload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDstore {
@@ -11867,6 +12343,7 @@ func rewriteValueS390X_OpS390XMOVDload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2)) {
@@ -11882,6 +12359,7 @@ func rewriteValueS390X_OpS390XMOVDload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -11905,6 +12383,7 @@ func rewriteValueS390X_OpS390XMOVDload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddr {
 			break
@@ -11929,12 +12408,14 @@ func rewriteValueS390X_OpS390XMOVDload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddridx {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -11955,10 +12436,12 @@ func rewriteValueS390X_OpS390XMOVDload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADD {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -11982,6 +12465,7 @@ func rewriteValueS390X_OpS390XMOVDloadidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -12004,6 +12488,7 @@ func rewriteValueS390X_OpS390XMOVDloadidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		idx := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XADDconst {
@@ -12026,6 +12511,7 @@ func rewriteValueS390X_OpS390XMOVDloadidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XADDconst {
@@ -12048,6 +12534,7 @@ func rewriteValueS390X_OpS390XMOVDloadidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -12107,6 +12594,7 @@ func rewriteValueS390X_OpS390XMOVDnop_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -12133,6 +12621,7 @@ func rewriteValueS390X_OpS390XMOVDnop_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -12159,6 +12648,7 @@ func rewriteValueS390X_OpS390XMOVDnop_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -12185,6 +12675,7 @@ func rewriteValueS390X_OpS390XMOVDnop_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -12211,6 +12702,7 @@ func rewriteValueS390X_OpS390XMOVDnop_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -12237,6 +12729,7 @@ func rewriteValueS390X_OpS390XMOVDnop_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -12263,6 +12756,7 @@ func rewriteValueS390X_OpS390XMOVDnop_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -12289,6 +12783,7 @@ func rewriteValueS390X_OpS390XMOVDnop_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[2]
 		ptr := x.Args[0]
 		idx := x.Args[1]
 		mem := x.Args[2]
@@ -12322,6 +12817,7 @@ func rewriteValueS390X_OpS390XMOVDnop_10(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[2]
 		ptr := x.Args[0]
 		idx := x.Args[1]
 		mem := x.Args[2]
@@ -12350,6 +12846,7 @@ func rewriteValueS390X_OpS390XMOVDnop_10(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[2]
 		ptr := x.Args[0]
 		idx := x.Args[1]
 		mem := x.Args[2]
@@ -12378,6 +12875,7 @@ func rewriteValueS390X_OpS390XMOVDnop_10(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[2]
 		ptr := x.Args[0]
 		idx := x.Args[1]
 		mem := x.Args[2]
@@ -12450,6 +12948,7 @@ func rewriteValueS390X_OpS390XMOVDreg_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -12476,6 +12975,7 @@ func rewriteValueS390X_OpS390XMOVDreg_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -12502,6 +13002,7 @@ func rewriteValueS390X_OpS390XMOVDreg_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -12528,6 +13029,7 @@ func rewriteValueS390X_OpS390XMOVDreg_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -12554,6 +13056,7 @@ func rewriteValueS390X_OpS390XMOVDreg_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -12580,6 +13083,7 @@ func rewriteValueS390X_OpS390XMOVDreg_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -12606,6 +13110,7 @@ func rewriteValueS390X_OpS390XMOVDreg_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -12637,6 +13142,7 @@ func rewriteValueS390X_OpS390XMOVDreg_10(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[2]
 		ptr := x.Args[0]
 		idx := x.Args[1]
 		mem := x.Args[2]
@@ -12665,6 +13171,7 @@ func rewriteValueS390X_OpS390XMOVDreg_10(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[2]
 		ptr := x.Args[0]
 		idx := x.Args[1]
 		mem := x.Args[2]
@@ -12693,6 +13200,7 @@ func rewriteValueS390X_OpS390XMOVDreg_10(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[2]
 		ptr := x.Args[0]
 		idx := x.Args[1]
 		mem := x.Args[2]
@@ -12721,6 +13229,7 @@ func rewriteValueS390X_OpS390XMOVDreg_10(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[2]
 		ptr := x.Args[0]
 		idx := x.Args[1]
 		mem := x.Args[2]
@@ -12747,6 +13256,7 @@ func rewriteValueS390X_OpS390XMOVDstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -12772,6 +13282,7 @@ func rewriteValueS390X_OpS390XMOVDstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDconst {
@@ -12795,6 +13306,7 @@ func rewriteValueS390X_OpS390XMOVDstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddr {
 			break
@@ -12821,12 +13333,14 @@ func rewriteValueS390X_OpS390XMOVDstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddridx {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -12849,10 +13363,12 @@ func rewriteValueS390X_OpS390XMOVDstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADD {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -12875,6 +13391,7 @@ func rewriteValueS390X_OpS390XMOVDstore_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		w1 := v.Args[1]
 		x := v.Args[2]
@@ -12887,6 +13404,7 @@ func rewriteValueS390X_OpS390XMOVDstore_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -12910,6 +13428,7 @@ func rewriteValueS390X_OpS390XMOVDstore_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		w2 := v.Args[1]
 		x := v.Args[2]
@@ -12922,6 +13441,7 @@ func rewriteValueS390X_OpS390XMOVDstore_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -12947,6 +13467,7 @@ func rewriteValueS390X_OpS390XMOVDstore_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		w3 := v.Args[1]
 		x := v.Args[2]
@@ -12959,6 +13480,7 @@ func rewriteValueS390X_OpS390XMOVDstore_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[4]
 		if p != x.Args[0] {
 			break
 		}
@@ -12989,6 +13511,7 @@ func rewriteValueS390X_OpS390XMOVDstoreconst_0(v *Value) bool {
 	for {
 		sc := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -13012,6 +13535,7 @@ func rewriteValueS390X_OpS390XMOVDstoreconst_0(v *Value) bool {
 	for {
 		sc := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddr {
 			break
@@ -13039,6 +13563,7 @@ func rewriteValueS390X_OpS390XMOVDstoreidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -13063,6 +13588,7 @@ func rewriteValueS390X_OpS390XMOVDstoreidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XADDconst {
@@ -13087,6 +13613,7 @@ func rewriteValueS390X_OpS390XMOVDstoreidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XADDconst {
@@ -13111,6 +13638,7 @@ func rewriteValueS390X_OpS390XMOVDstoreidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -13138,6 +13666,7 @@ func rewriteValueS390X_OpS390XMOVHBRstore_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XSRDconst {
@@ -13157,6 +13686,7 @@ func rewriteValueS390X_OpS390XMOVHBRstore_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -13181,6 +13711,7 @@ func rewriteValueS390X_OpS390XMOVHBRstore_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XSRDconst {
@@ -13198,6 +13729,7 @@ func rewriteValueS390X_OpS390XMOVHBRstore_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -13229,6 +13761,7 @@ func rewriteValueS390X_OpS390XMOVHBRstore_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XSRWconst {
@@ -13248,6 +13781,7 @@ func rewriteValueS390X_OpS390XMOVHBRstore_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -13272,6 +13806,7 @@ func rewriteValueS390X_OpS390XMOVHBRstore_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XSRWconst {
@@ -13289,6 +13824,7 @@ func rewriteValueS390X_OpS390XMOVHBRstore_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -13323,6 +13859,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -13343,6 +13880,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -13371,6 +13909,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -13391,6 +13930,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -13419,6 +13959,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		v_2 := v.Args[2]
@@ -13439,6 +13980,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -13467,6 +14009,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		v_2 := v.Args[2]
@@ -13487,6 +14030,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -13515,6 +14059,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -13533,6 +14078,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -13568,6 +14114,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -13586,6 +14133,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -13621,6 +14169,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		v_2 := v.Args[2]
@@ -13639,6 +14188,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -13674,6 +14224,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		v_2 := v.Args[2]
@@ -13692,6 +14243,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -13727,6 +14279,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -13747,6 +14300,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -13775,6 +14329,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -13795,6 +14350,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -13826,6 +14382,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		v_2 := v.Args[2]
@@ -13846,6 +14403,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -13874,6 +14432,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		v_2 := v.Args[2]
@@ -13894,6 +14453,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -13922,6 +14482,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -13940,6 +14501,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -13975,6 +14537,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -13993,6 +14556,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -14028,6 +14592,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		v_2 := v.Args[2]
@@ -14046,6 +14611,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -14081,6 +14647,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		v_2 := v.Args[2]
@@ -14099,6 +14666,7 @@ func rewriteValueS390X_OpS390XMOVHBRstoreidx_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -14137,6 +14705,7 @@ func rewriteValueS390X_OpS390XMOVHZload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVHstore {
@@ -14144,6 +14713,7 @@ func rewriteValueS390X_OpS390XMOVHZload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2)) {
@@ -14159,6 +14729,7 @@ func rewriteValueS390X_OpS390XMOVHZload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -14182,6 +14753,7 @@ func rewriteValueS390X_OpS390XMOVHZload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddr {
 			break
@@ -14206,12 +14778,14 @@ func rewriteValueS390X_OpS390XMOVHZload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddridx {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -14232,10 +14806,12 @@ func rewriteValueS390X_OpS390XMOVHZload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADD {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -14259,6 +14835,7 @@ func rewriteValueS390X_OpS390XMOVHZloadidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -14281,6 +14858,7 @@ func rewriteValueS390X_OpS390XMOVHZloadidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		idx := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XADDconst {
@@ -14303,6 +14881,7 @@ func rewriteValueS390X_OpS390XMOVHZloadidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XADDconst {
@@ -14325,6 +14904,7 @@ func rewriteValueS390X_OpS390XMOVHZloadidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -14354,6 +14934,7 @@ func rewriteValueS390X_OpS390XMOVHZreg_0(v *Value) bool {
 		if x.Op != OpS390XMOVBZload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpS390XMOVDreg)
 		v.AddArg(x)
 		return true
@@ -14366,6 +14947,7 @@ func rewriteValueS390X_OpS390XMOVHZreg_0(v *Value) bool {
 		if x.Op != OpS390XMOVHZload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpS390XMOVDreg)
 		v.AddArg(x)
 		return true
@@ -14433,6 +15015,7 @@ func rewriteValueS390X_OpS390XMOVHZreg_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -14458,6 +15041,7 @@ func rewriteValueS390X_OpS390XMOVHZreg_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[2]
 		ptr := x.Args[0]
 		idx := x.Args[1]
 		mem := x.Args[2]
@@ -14484,6 +15068,7 @@ func rewriteValueS390X_OpS390XMOVHload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -14507,6 +15092,7 @@ func rewriteValueS390X_OpS390XMOVHload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddr {
 			break
@@ -14538,6 +15124,7 @@ func rewriteValueS390X_OpS390XMOVHreg_0(v *Value) bool {
 		if x.Op != OpS390XMOVBload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpS390XMOVDreg)
 		v.AddArg(x)
 		return true
@@ -14550,6 +15137,7 @@ func rewriteValueS390X_OpS390XMOVHreg_0(v *Value) bool {
 		if x.Op != OpS390XMOVBZload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpS390XMOVDreg)
 		v.AddArg(x)
 		return true
@@ -14562,6 +15150,7 @@ func rewriteValueS390X_OpS390XMOVHreg_0(v *Value) bool {
 		if x.Op != OpS390XMOVHload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpS390XMOVDreg)
 		v.AddArg(x)
 		return true
@@ -14641,6 +15230,7 @@ func rewriteValueS390X_OpS390XMOVHreg_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -14665,6 +15255,7 @@ func rewriteValueS390X_OpS390XMOVHstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVHreg {
@@ -14686,6 +15277,7 @@ func rewriteValueS390X_OpS390XMOVHstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVHZreg {
@@ -14707,6 +15299,7 @@ func rewriteValueS390X_OpS390XMOVHstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -14732,6 +15325,7 @@ func rewriteValueS390X_OpS390XMOVHstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDconst {
@@ -14755,6 +15349,7 @@ func rewriteValueS390X_OpS390XMOVHstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddr {
 			break
@@ -14781,12 +15376,14 @@ func rewriteValueS390X_OpS390XMOVHstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddridx {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -14809,10 +15406,12 @@ func rewriteValueS390X_OpS390XMOVHstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADD {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -14835,6 +15434,7 @@ func rewriteValueS390X_OpS390XMOVHstore_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		w := v.Args[1]
 		x := v.Args[2]
@@ -14847,6 +15447,7 @@ func rewriteValueS390X_OpS390XMOVHstore_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -14878,6 +15479,7 @@ func rewriteValueS390X_OpS390XMOVHstore_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		w0 := v.Args[1]
 		if w0.Op != OpS390XSRDconst {
@@ -14895,6 +15497,7 @@ func rewriteValueS390X_OpS390XMOVHstore_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -14926,6 +15529,7 @@ func rewriteValueS390X_OpS390XMOVHstore_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		w := v.Args[1]
 		x := v.Args[2]
@@ -14938,6 +15542,7 @@ func rewriteValueS390X_OpS390XMOVHstore_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -14972,6 +15577,7 @@ func rewriteValueS390X_OpS390XMOVHstore_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		w0 := v.Args[1]
 		if w0.Op != OpS390XSRWconst {
@@ -14989,6 +15595,7 @@ func rewriteValueS390X_OpS390XMOVHstore_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -15027,6 +15634,7 @@ func rewriteValueS390X_OpS390XMOVHstoreconst_0(v *Value) bool {
 	for {
 		sc := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -15050,6 +15658,7 @@ func rewriteValueS390X_OpS390XMOVHstoreconst_0(v *Value) bool {
 	for {
 		sc := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddr {
 			break
@@ -15074,6 +15683,7 @@ func rewriteValueS390X_OpS390XMOVHstoreconst_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		p := v.Args[0]
 		x := v.Args[1]
 		if x.Op != OpS390XMOVHstoreconst {
@@ -15083,6 +15693,7 @@ func rewriteValueS390X_OpS390XMOVHstoreconst_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[1]
 		if p != x.Args[0] {
 			break
 		}
@@ -15109,6 +15720,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -15133,6 +15745,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XADDconst {
@@ -15157,6 +15770,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XADDconst {
@@ -15181,6 +15795,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -15205,6 +15820,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		w := v.Args[2]
@@ -15218,6 +15834,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -15253,6 +15870,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		w := v.Args[2]
@@ -15266,6 +15884,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -15301,6 +15920,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		w := v.Args[2]
@@ -15314,6 +15934,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -15349,6 +15970,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		w := v.Args[2]
@@ -15362,6 +15984,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -15397,6 +16020,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		w0 := v.Args[2]
@@ -15415,6 +16039,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -15450,6 +16075,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		w0 := v.Args[2]
@@ -15468,6 +16094,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -15506,6 +16133,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		w0 := v.Args[2]
@@ -15524,6 +16152,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -15559,6 +16188,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		w0 := v.Args[2]
@@ -15577,6 +16207,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -15612,6 +16243,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		w := v.Args[2]
@@ -15625,6 +16257,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -15660,6 +16293,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		w := v.Args[2]
@@ -15673,6 +16307,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -15708,6 +16343,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		w := v.Args[2]
@@ -15721,6 +16357,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -15756,6 +16393,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		w := v.Args[2]
@@ -15769,6 +16407,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -15804,6 +16443,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		w0 := v.Args[2]
@@ -15822,6 +16462,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -15857,6 +16498,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		w0 := v.Args[2]
@@ -15875,6 +16517,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -15910,6 +16553,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		w0 := v.Args[2]
@@ -15928,6 +16572,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -15963,6 +16608,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		w0 := v.Args[2]
@@ -15981,6 +16627,7 @@ func rewriteValueS390X_OpS390XMOVHstoreidx_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -16019,6 +16666,7 @@ func rewriteValueS390X_OpS390XMOVWBRstore_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XSRDconst {
@@ -16038,6 +16686,7 @@ func rewriteValueS390X_OpS390XMOVWBRstore_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -16062,6 +16711,7 @@ func rewriteValueS390X_OpS390XMOVWBRstore_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XSRDconst {
@@ -16079,6 +16729,7 @@ func rewriteValueS390X_OpS390XMOVWBRstore_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -16113,6 +16764,7 @@ func rewriteValueS390X_OpS390XMOVWBRstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -16133,6 +16785,7 @@ func rewriteValueS390X_OpS390XMOVWBRstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -16161,6 +16814,7 @@ func rewriteValueS390X_OpS390XMOVWBRstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -16181,6 +16835,7 @@ func rewriteValueS390X_OpS390XMOVWBRstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -16209,6 +16864,7 @@ func rewriteValueS390X_OpS390XMOVWBRstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		v_2 := v.Args[2]
@@ -16229,6 +16885,7 @@ func rewriteValueS390X_OpS390XMOVWBRstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -16257,6 +16914,7 @@ func rewriteValueS390X_OpS390XMOVWBRstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		v_2 := v.Args[2]
@@ -16277,6 +16935,7 @@ func rewriteValueS390X_OpS390XMOVWBRstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -16305,6 +16964,7 @@ func rewriteValueS390X_OpS390XMOVWBRstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -16323,6 +16983,7 @@ func rewriteValueS390X_OpS390XMOVWBRstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -16358,6 +17019,7 @@ func rewriteValueS390X_OpS390XMOVWBRstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		v_2 := v.Args[2]
@@ -16376,6 +17038,7 @@ func rewriteValueS390X_OpS390XMOVWBRstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -16411,6 +17074,7 @@ func rewriteValueS390X_OpS390XMOVWBRstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		v_2 := v.Args[2]
@@ -16429,6 +17093,7 @@ func rewriteValueS390X_OpS390XMOVWBRstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -16464,6 +17129,7 @@ func rewriteValueS390X_OpS390XMOVWBRstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		v_2 := v.Args[2]
@@ -16482,6 +17148,7 @@ func rewriteValueS390X_OpS390XMOVWBRstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -16520,6 +17187,7 @@ func rewriteValueS390X_OpS390XMOVWZload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVWstore {
@@ -16527,6 +17195,7 @@ func rewriteValueS390X_OpS390XMOVWZload_0(v *Value) bool {
 		}
 		off2 := v_1.AuxInt
 		sym2 := v_1.Aux
+		_ = v_1.Args[2]
 		ptr2 := v_1.Args[0]
 		x := v_1.Args[1]
 		if !(sym == sym2 && off == off2 && isSamePtr(ptr, ptr2)) {
@@ -16542,6 +17211,7 @@ func rewriteValueS390X_OpS390XMOVWZload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -16565,6 +17235,7 @@ func rewriteValueS390X_OpS390XMOVWZload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddr {
 			break
@@ -16589,12 +17260,14 @@ func rewriteValueS390X_OpS390XMOVWZload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddridx {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -16615,10 +17288,12 @@ func rewriteValueS390X_OpS390XMOVWZload_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADD {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		mem := v.Args[1]
@@ -16642,6 +17317,7 @@ func rewriteValueS390X_OpS390XMOVWZloadidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -16664,6 +17340,7 @@ func rewriteValueS390X_OpS390XMOVWZloadidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		idx := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XADDconst {
@@ -16686,6 +17363,7 @@ func rewriteValueS390X_OpS390XMOVWZloadidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XADDconst {
@@ -16708,6 +17386,7 @@ func rewriteValueS390X_OpS390XMOVWZloadidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -16737,6 +17416,7 @@ func rewriteValueS390X_OpS390XMOVWZreg_0(v *Value) bool {
 		if x.Op != OpS390XMOVBZload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpS390XMOVDreg)
 		v.AddArg(x)
 		return true
@@ -16749,6 +17429,7 @@ func rewriteValueS390X_OpS390XMOVWZreg_0(v *Value) bool {
 		if x.Op != OpS390XMOVHZload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpS390XMOVDreg)
 		v.AddArg(x)
 		return true
@@ -16761,6 +17442,7 @@ func rewriteValueS390X_OpS390XMOVWZreg_0(v *Value) bool {
 		if x.Op != OpS390XMOVWZload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpS390XMOVDreg)
 		v.AddArg(x)
 		return true
@@ -16840,6 +17522,7 @@ func rewriteValueS390X_OpS390XMOVWZreg_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -16865,6 +17548,7 @@ func rewriteValueS390X_OpS390XMOVWZreg_0(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[2]
 		ptr := x.Args[0]
 		idx := x.Args[1]
 		mem := x.Args[2]
@@ -16891,6 +17575,7 @@ func rewriteValueS390X_OpS390XMOVWload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -16914,6 +17599,7 @@ func rewriteValueS390X_OpS390XMOVWload_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddr {
 			break
@@ -16943,6 +17629,7 @@ func rewriteValueS390X_OpS390XMOVWreg_0(v *Value) bool {
 		if x.Op != OpS390XMOVBload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpS390XMOVDreg)
 		v.AddArg(x)
 		return true
@@ -16955,6 +17642,7 @@ func rewriteValueS390X_OpS390XMOVWreg_0(v *Value) bool {
 		if x.Op != OpS390XMOVBZload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpS390XMOVDreg)
 		v.AddArg(x)
 		return true
@@ -16967,6 +17655,7 @@ func rewriteValueS390X_OpS390XMOVWreg_0(v *Value) bool {
 		if x.Op != OpS390XMOVHload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpS390XMOVDreg)
 		v.AddArg(x)
 		return true
@@ -16979,6 +17668,7 @@ func rewriteValueS390X_OpS390XMOVWreg_0(v *Value) bool {
 		if x.Op != OpS390XMOVHZload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpS390XMOVDreg)
 		v.AddArg(x)
 		return true
@@ -16991,6 +17681,7 @@ func rewriteValueS390X_OpS390XMOVWreg_0(v *Value) bool {
 		if x.Op != OpS390XMOVWload {
 			break
 		}
+		_ = x.Args[1]
 		v.reset(OpS390XMOVDreg)
 		v.AddArg(x)
 		return true
@@ -17099,6 +17790,7 @@ func rewriteValueS390X_OpS390XMOVWreg_10(v *Value) bool {
 		}
 		off := x.AuxInt
 		sym := x.Aux
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(x.Uses == 1 && clobber(x)) {
@@ -17123,6 +17815,7 @@ func rewriteValueS390X_OpS390XMOVWstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVWreg {
@@ -17144,6 +17837,7 @@ func rewriteValueS390X_OpS390XMOVWstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVWZreg {
@@ -17165,6 +17859,7 @@ func rewriteValueS390X_OpS390XMOVWstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -17190,6 +17885,7 @@ func rewriteValueS390X_OpS390XMOVWstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDconst {
@@ -17213,6 +17909,7 @@ func rewriteValueS390X_OpS390XMOVWstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddr {
 			break
@@ -17239,12 +17936,14 @@ func rewriteValueS390X_OpS390XMOVWstore_0(v *Value) bool {
 	for {
 		off1 := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddridx {
 			break
 		}
 		off2 := v_0.AuxInt
 		sym2 := v_0.Aux
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -17267,10 +17966,12 @@ func rewriteValueS390X_OpS390XMOVWstore_0(v *Value) bool {
 	for {
 		off := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADD {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		idx := v_0.Args[1]
 		val := v.Args[1]
@@ -17293,6 +17994,7 @@ func rewriteValueS390X_OpS390XMOVWstore_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XSRDconst {
@@ -17312,6 +18014,7 @@ func rewriteValueS390X_OpS390XMOVWstore_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -17336,6 +18039,7 @@ func rewriteValueS390X_OpS390XMOVWstore_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		w0 := v.Args[1]
 		if w0.Op != OpS390XSRDconst {
@@ -17353,6 +18057,7 @@ func rewriteValueS390X_OpS390XMOVWstore_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -17384,6 +18089,7 @@ func rewriteValueS390X_OpS390XMOVWstore_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		w1 := v.Args[1]
 		x := v.Args[2]
@@ -17396,6 +18102,7 @@ func rewriteValueS390X_OpS390XMOVWstore_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[2]
 		if p != x.Args[0] {
 			break
 		}
@@ -17422,6 +18129,7 @@ func rewriteValueS390X_OpS390XMOVWstore_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		w2 := v.Args[1]
 		x := v.Args[2]
@@ -17434,6 +18142,7 @@ func rewriteValueS390X_OpS390XMOVWstore_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -17459,6 +18168,7 @@ func rewriteValueS390X_OpS390XMOVWstore_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[2]
 		p := v.Args[0]
 		w3 := v.Args[1]
 		x := v.Args[2]
@@ -17471,6 +18181,7 @@ func rewriteValueS390X_OpS390XMOVWstore_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[4]
 		if p != x.Args[0] {
 			break
 		}
@@ -17505,6 +18216,7 @@ func rewriteValueS390X_OpS390XMOVWstoreconst_0(v *Value) bool {
 	for {
 		sc := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -17528,6 +18240,7 @@ func rewriteValueS390X_OpS390XMOVWstoreconst_0(v *Value) bool {
 	for {
 		sc := v.AuxInt
 		sym1 := v.Aux
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDaddr {
 			break
@@ -17552,6 +18265,7 @@ func rewriteValueS390X_OpS390XMOVWstoreconst_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		s := v.Aux
+		_ = v.Args[1]
 		p := v.Args[0]
 		x := v.Args[1]
 		if x.Op != OpS390XMOVWstoreconst {
@@ -17561,6 +18275,7 @@ func rewriteValueS390X_OpS390XMOVWstoreconst_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[1]
 		if p != x.Args[0] {
 			break
 		}
@@ -17587,6 +18302,7 @@ func rewriteValueS390X_OpS390XMOVWstoreidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -17611,6 +18327,7 @@ func rewriteValueS390X_OpS390XMOVWstoreidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XADDconst {
@@ -17635,6 +18352,7 @@ func rewriteValueS390X_OpS390XMOVWstoreidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		ptr := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XADDconst {
@@ -17659,6 +18377,7 @@ func rewriteValueS390X_OpS390XMOVWstoreidx_0(v *Value) bool {
 	for {
 		c := v.AuxInt
 		sym := v.Aux
+		_ = v.Args[3]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XADDconst {
 			break
@@ -17683,6 +18402,7 @@ func rewriteValueS390X_OpS390XMOVWstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		w := v.Args[2]
@@ -17696,6 +18416,7 @@ func rewriteValueS390X_OpS390XMOVWstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -17731,6 +18452,7 @@ func rewriteValueS390X_OpS390XMOVWstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		w := v.Args[2]
@@ -17744,6 +18466,7 @@ func rewriteValueS390X_OpS390XMOVWstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -17779,6 +18502,7 @@ func rewriteValueS390X_OpS390XMOVWstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		w := v.Args[2]
@@ -17792,6 +18516,7 @@ func rewriteValueS390X_OpS390XMOVWstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -17827,6 +18552,7 @@ func rewriteValueS390X_OpS390XMOVWstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		w := v.Args[2]
@@ -17840,6 +18566,7 @@ func rewriteValueS390X_OpS390XMOVWstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -17875,6 +18602,7 @@ func rewriteValueS390X_OpS390XMOVWstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		w0 := v.Args[2]
@@ -17893,6 +18621,7 @@ func rewriteValueS390X_OpS390XMOVWstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -17928,6 +18657,7 @@ func rewriteValueS390X_OpS390XMOVWstoreidx_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		idx := v.Args[1]
 		w0 := v.Args[2]
@@ -17946,6 +18676,7 @@ func rewriteValueS390X_OpS390XMOVWstoreidx_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -17984,6 +18715,7 @@ func rewriteValueS390X_OpS390XMOVWstoreidx_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		w0 := v.Args[2]
@@ -18002,6 +18734,7 @@ func rewriteValueS390X_OpS390XMOVWstoreidx_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -18037,6 +18770,7 @@ func rewriteValueS390X_OpS390XMOVWstoreidx_10(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		idx := v.Args[0]
 		p := v.Args[1]
 		w0 := v.Args[2]
@@ -18055,6 +18789,7 @@ func rewriteValueS390X_OpS390XMOVWstoreidx_10(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if idx != x.Args[0] {
 			break
 		}
@@ -18091,6 +18826,7 @@ func rewriteValueS390X_OpS390XMULLD_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (MULLDconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDconst {
@@ -18109,6 +18845,7 @@ func rewriteValueS390X_OpS390XMULLD_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (MULLDconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDconst {
 			break
@@ -18128,6 +18865,7 @@ func rewriteValueS390X_OpS390XMULLD_0(v *Value) bool {
 	// result: (MULLDload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVDload {
@@ -18135,6 +18873,7 @@ func rewriteValueS390X_OpS390XMULLD_0(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -18154,12 +18893,14 @@ func rewriteValueS390X_OpS390XMULLD_0(v *Value) bool {
 	// result: (MULLDload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		g := v.Args[0]
 		if g.Op != OpS390XMOVDload {
 			break
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		x := v.Args[1]
@@ -18180,12 +18921,14 @@ func rewriteValueS390X_OpS390XMULLD_0(v *Value) bool {
 	// result: (MULLDload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		g := v.Args[0]
 		if g.Op != OpS390XMOVDload {
 			break
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		x := v.Args[1]
@@ -18206,6 +18949,7 @@ func rewriteValueS390X_OpS390XMULLD_0(v *Value) bool {
 	// result: (MULLDload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVDload {
@@ -18213,6 +18957,7 @@ func rewriteValueS390X_OpS390XMULLD_0(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -18337,6 +19082,7 @@ func rewriteValueS390X_OpS390XMULLW_0(v *Value) bool {
 	// cond:
 	// result: (MULLWconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDconst {
@@ -18352,6 +19098,7 @@ func rewriteValueS390X_OpS390XMULLW_0(v *Value) bool {
 	// cond:
 	// result: (MULLWconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDconst {
 			break
@@ -18368,6 +19115,7 @@ func rewriteValueS390X_OpS390XMULLW_0(v *Value) bool {
 	// result: (MULLWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVWload {
@@ -18375,6 +19123,7 @@ func rewriteValueS390X_OpS390XMULLW_0(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -18394,12 +19143,14 @@ func rewriteValueS390X_OpS390XMULLW_0(v *Value) bool {
 	// result: (MULLWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		g := v.Args[0]
 		if g.Op != OpS390XMOVWload {
 			break
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		x := v.Args[1]
@@ -18420,12 +19171,14 @@ func rewriteValueS390X_OpS390XMULLW_0(v *Value) bool {
 	// result: (MULLWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		g := v.Args[0]
 		if g.Op != OpS390XMOVWload {
 			break
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		x := v.Args[1]
@@ -18446,6 +19199,7 @@ func rewriteValueS390X_OpS390XMULLW_0(v *Value) bool {
 	// result: (MULLWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVWload {
@@ -18453,6 +19207,7 @@ func rewriteValueS390X_OpS390XMULLW_0(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -18472,6 +19227,7 @@ func rewriteValueS390X_OpS390XMULLW_0(v *Value) bool {
 	// result: (MULLWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVWZload {
@@ -18479,6 +19235,7 @@ func rewriteValueS390X_OpS390XMULLW_0(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -18498,12 +19255,14 @@ func rewriteValueS390X_OpS390XMULLW_0(v *Value) bool {
 	// result: (MULLWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		g := v.Args[0]
 		if g.Op != OpS390XMOVWZload {
 			break
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		x := v.Args[1]
@@ -18524,12 +19283,14 @@ func rewriteValueS390X_OpS390XMULLW_0(v *Value) bool {
 	// result: (MULLWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		g := v.Args[0]
 		if g.Op != OpS390XMOVWZload {
 			break
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		x := v.Args[1]
@@ -18550,6 +19311,7 @@ func rewriteValueS390X_OpS390XMULLW_0(v *Value) bool {
 	// result: (MULLWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVWZload {
@@ -18557,6 +19319,7 @@ func rewriteValueS390X_OpS390XMULLW_0(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -18773,6 +19536,7 @@ func rewriteValueS390X_OpS390XOR_0(v *Value) bool {
 	// cond: isU32Bit(c)
 	// result: (ORconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDconst {
@@ -18791,6 +19555,7 @@ func rewriteValueS390X_OpS390XOR_0(v *Value) bool {
 	// cond: isU32Bit(c)
 	// result: (ORconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDconst {
 			break
@@ -18809,6 +19574,7 @@ func rewriteValueS390X_OpS390XOR_0(v *Value) bool {
 	// cond: d == 64-c
 	// result: (RLLGconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XSLDconst {
 			break
@@ -18835,6 +19601,7 @@ func rewriteValueS390X_OpS390XOR_0(v *Value) bool {
 	// cond: d == 64-c
 	// result: (RLLGconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XSRDconst {
 			break
@@ -18861,6 +19628,7 @@ func rewriteValueS390X_OpS390XOR_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [c|d])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDconst {
 			break
@@ -18879,6 +19647,7 @@ func rewriteValueS390X_OpS390XOR_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [c|d])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDconst {
 			break
@@ -18897,6 +19666,7 @@ func rewriteValueS390X_OpS390XOR_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -18911,6 +19681,7 @@ func rewriteValueS390X_OpS390XOR_0(v *Value) bool {
 	// result: (ORload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVDload {
@@ -18918,6 +19689,7 @@ func rewriteValueS390X_OpS390XOR_0(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -18937,12 +19709,14 @@ func rewriteValueS390X_OpS390XOR_0(v *Value) bool {
 	// result: (ORload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		g := v.Args[0]
 		if g.Op != OpS390XMOVDload {
 			break
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		x := v.Args[1]
@@ -18963,12 +19737,14 @@ func rewriteValueS390X_OpS390XOR_0(v *Value) bool {
 	// result: (ORload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		g := v.Args[0]
 		if g.Op != OpS390XMOVDload {
 			break
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		x := v.Args[1]
@@ -18996,6 +19772,7 @@ func rewriteValueS390X_OpS390XOR_10(v *Value) bool {
 	// result: (ORload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVDload {
@@ -19003,6 +19780,7 @@ func rewriteValueS390X_OpS390XOR_10(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -19021,12 +19799,14 @@ func rewriteValueS390X_OpS390XOR_10(v *Value) bool {
 	// cond: i1 == i0+1   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZload [i0] {s} p mem)
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpS390XMOVBZload {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		sh := v.Args[1]
@@ -19044,6 +19824,7 @@ func rewriteValueS390X_OpS390XOR_10(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -19067,6 +19848,7 @@ func rewriteValueS390X_OpS390XOR_10(v *Value) bool {
 	// cond: i1 == i0+1   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZload [i0] {s} p mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLDconst {
 			break
@@ -19080,6 +19862,7 @@ func rewriteValueS390X_OpS390XOR_10(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		x1 := v.Args[1]
@@ -19090,6 +19873,7 @@ func rewriteValueS390X_OpS390XOR_10(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -19113,12 +19897,14 @@ func rewriteValueS390X_OpS390XOR_10(v *Value) bool {
 	// cond: i1 == i0+2   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWZload [i0] {s} p mem)
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpS390XMOVHZload {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		sh := v.Args[1]
@@ -19136,6 +19922,7 @@ func rewriteValueS390X_OpS390XOR_10(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -19159,6 +19946,7 @@ func rewriteValueS390X_OpS390XOR_10(v *Value) bool {
 	// cond: i1 == i0+2   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWZload [i0] {s} p mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLDconst {
 			break
@@ -19172,6 +19960,7 @@ func rewriteValueS390X_OpS390XOR_10(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		x1 := v.Args[1]
@@ -19182,6 +19971,7 @@ func rewriteValueS390X_OpS390XOR_10(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -19205,12 +19995,14 @@ func rewriteValueS390X_OpS390XOR_10(v *Value) bool {
 	// cond: i1 == i0+4   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVDload [i0] {s} p mem)
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpS390XMOVWZload {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		sh := v.Args[1]
@@ -19228,6 +20020,7 @@ func rewriteValueS390X_OpS390XOR_10(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -19251,6 +20044,7 @@ func rewriteValueS390X_OpS390XOR_10(v *Value) bool {
 	// cond: i1 == i0+4   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVDload [i0] {s} p mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLDconst {
 			break
@@ -19264,6 +20058,7 @@ func rewriteValueS390X_OpS390XOR_10(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		x1 := v.Args[1]
@@ -19274,6 +20069,7 @@ func rewriteValueS390X_OpS390XOR_10(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -19297,6 +20093,7 @@ func rewriteValueS390X_OpS390XOR_10(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVHZload [i0] {s} p mem)) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -19308,12 +20105,14 @@ func rewriteValueS390X_OpS390XOR_10(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		or := v.Args[1]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -19327,6 +20126,7 @@ func rewriteValueS390X_OpS390XOR_10(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -19357,6 +20157,7 @@ func rewriteValueS390X_OpS390XOR_10(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVHZload [i0] {s} p mem)) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -19368,12 +20169,14 @@ func rewriteValueS390X_OpS390XOR_10(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		or := v.Args[1]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpS390XSLDconst {
@@ -19388,6 +20191,7 @@ func rewriteValueS390X_OpS390XOR_10(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -19417,10 +20221,12 @@ func rewriteValueS390X_OpS390XOR_10(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVHZload [i0] {s} p mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -19432,6 +20238,7 @@ func rewriteValueS390X_OpS390XOR_10(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		y := or.Args[1]
@@ -19448,6 +20255,7 @@ func rewriteValueS390X_OpS390XOR_10(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -19484,10 +20292,12 @@ func rewriteValueS390X_OpS390XOR_20(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVHZload [i0] {s} p mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpS390XSLDconst {
@@ -19500,6 +20310,7 @@ func rewriteValueS390X_OpS390XOR_20(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		s0 := v.Args[1]
@@ -19515,6 +20326,7 @@ func rewriteValueS390X_OpS390XOR_20(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -19544,6 +20356,7 @@ func rewriteValueS390X_OpS390XOR_20(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVWZload [i0] {s} p mem)) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -19555,12 +20368,14 @@ func rewriteValueS390X_OpS390XOR_20(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		or := v.Args[1]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -19574,6 +20389,7 @@ func rewriteValueS390X_OpS390XOR_20(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -19604,6 +20420,7 @@ func rewriteValueS390X_OpS390XOR_20(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVWZload [i0] {s} p mem)) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -19615,12 +20432,14 @@ func rewriteValueS390X_OpS390XOR_20(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		or := v.Args[1]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpS390XSLDconst {
@@ -19635,6 +20454,7 @@ func rewriteValueS390X_OpS390XOR_20(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -19664,10 +20484,12 @@ func rewriteValueS390X_OpS390XOR_20(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVWZload [i0] {s} p mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -19679,6 +20501,7 @@ func rewriteValueS390X_OpS390XOR_20(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		y := or.Args[1]
@@ -19695,6 +20518,7 @@ func rewriteValueS390X_OpS390XOR_20(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -19724,10 +20548,12 @@ func rewriteValueS390X_OpS390XOR_20(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVWZload [i0] {s} p mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpS390XSLDconst {
@@ -19740,6 +20566,7 @@ func rewriteValueS390X_OpS390XOR_20(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		s0 := v.Args[1]
@@ -19755,6 +20582,7 @@ func rewriteValueS390X_OpS390XOR_20(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -19784,12 +20612,14 @@ func rewriteValueS390X_OpS390XOR_20(v *Value) bool {
 	// cond: i1 == i0+1   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpS390XMOVBZloadidx {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -19808,6 +20638,7 @@ func rewriteValueS390X_OpS390XOR_20(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -19835,12 +20666,14 @@ func rewriteValueS390X_OpS390XOR_20(v *Value) bool {
 	// cond: i1 == i0+1   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpS390XMOVBZloadidx {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -19859,6 +20692,7 @@ func rewriteValueS390X_OpS390XOR_20(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -19886,12 +20720,14 @@ func rewriteValueS390X_OpS390XOR_20(v *Value) bool {
 	// cond: i1 == i0+1   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpS390XMOVBZloadidx {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -19910,6 +20746,7 @@ func rewriteValueS390X_OpS390XOR_20(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -19937,12 +20774,14 @@ func rewriteValueS390X_OpS390XOR_20(v *Value) bool {
 	// cond: i1 == i0+1   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpS390XMOVBZloadidx {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -19961,6 +20800,7 @@ func rewriteValueS390X_OpS390XOR_20(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -19988,6 +20828,7 @@ func rewriteValueS390X_OpS390XOR_20(v *Value) bool {
 	// cond: i1 == i0+1   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLDconst {
 			break
@@ -20001,6 +20842,7 @@ func rewriteValueS390X_OpS390XOR_20(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -20012,6 +20854,7 @@ func rewriteValueS390X_OpS390XOR_20(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -20046,6 +20889,7 @@ func rewriteValueS390X_OpS390XOR_30(v *Value) bool {
 	// cond: i1 == i0+1   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLDconst {
 			break
@@ -20059,6 +20903,7 @@ func rewriteValueS390X_OpS390XOR_30(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -20070,6 +20915,7 @@ func rewriteValueS390X_OpS390XOR_30(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -20097,6 +20943,7 @@ func rewriteValueS390X_OpS390XOR_30(v *Value) bool {
 	// cond: i1 == i0+1   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLDconst {
 			break
@@ -20110,6 +20957,7 @@ func rewriteValueS390X_OpS390XOR_30(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -20121,6 +20969,7 @@ func rewriteValueS390X_OpS390XOR_30(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -20148,6 +20997,7 @@ func rewriteValueS390X_OpS390XOR_30(v *Value) bool {
 	// cond: i1 == i0+1   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLDconst {
 			break
@@ -20161,6 +21011,7 @@ func rewriteValueS390X_OpS390XOR_30(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -20172,6 +21023,7 @@ func rewriteValueS390X_OpS390XOR_30(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -20199,12 +21051,14 @@ func rewriteValueS390X_OpS390XOR_30(v *Value) bool {
 	// cond: i1 == i0+2   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpS390XMOVHZloadidx {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -20223,6 +21077,7 @@ func rewriteValueS390X_OpS390XOR_30(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -20250,12 +21105,14 @@ func rewriteValueS390X_OpS390XOR_30(v *Value) bool {
 	// cond: i1 == i0+2   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpS390XMOVHZloadidx {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -20274,6 +21131,7 @@ func rewriteValueS390X_OpS390XOR_30(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -20301,12 +21159,14 @@ func rewriteValueS390X_OpS390XOR_30(v *Value) bool {
 	// cond: i1 == i0+2   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpS390XMOVHZloadidx {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -20325,6 +21185,7 @@ func rewriteValueS390X_OpS390XOR_30(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -20352,12 +21213,14 @@ func rewriteValueS390X_OpS390XOR_30(v *Value) bool {
 	// cond: i1 == i0+2   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpS390XMOVHZloadidx {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -20376,6 +21239,7 @@ func rewriteValueS390X_OpS390XOR_30(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -20403,6 +21267,7 @@ func rewriteValueS390X_OpS390XOR_30(v *Value) bool {
 	// cond: i1 == i0+2   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLDconst {
 			break
@@ -20416,6 +21281,7 @@ func rewriteValueS390X_OpS390XOR_30(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -20427,6 +21293,7 @@ func rewriteValueS390X_OpS390XOR_30(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -20454,6 +21321,7 @@ func rewriteValueS390X_OpS390XOR_30(v *Value) bool {
 	// cond: i1 == i0+2   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLDconst {
 			break
@@ -20467,6 +21335,7 @@ func rewriteValueS390X_OpS390XOR_30(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -20478,6 +21347,7 @@ func rewriteValueS390X_OpS390XOR_30(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -20505,6 +21375,7 @@ func rewriteValueS390X_OpS390XOR_30(v *Value) bool {
 	// cond: i1 == i0+2   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLDconst {
 			break
@@ -20518,6 +21389,7 @@ func rewriteValueS390X_OpS390XOR_30(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -20529,6 +21401,7 @@ func rewriteValueS390X_OpS390XOR_30(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -20563,6 +21436,7 @@ func rewriteValueS390X_OpS390XOR_40(v *Value) bool {
 	// cond: i1 == i0+2   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLDconst {
 			break
@@ -20576,6 +21450,7 @@ func rewriteValueS390X_OpS390XOR_40(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -20587,6 +21462,7 @@ func rewriteValueS390X_OpS390XOR_40(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -20614,12 +21490,14 @@ func rewriteValueS390X_OpS390XOR_40(v *Value) bool {
 	// cond: i1 == i0+4   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVDloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpS390XMOVWZloadidx {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -20638,6 +21516,7 @@ func rewriteValueS390X_OpS390XOR_40(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -20665,12 +21544,14 @@ func rewriteValueS390X_OpS390XOR_40(v *Value) bool {
 	// cond: i1 == i0+4   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVDloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpS390XMOVWZloadidx {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -20689,6 +21570,7 @@ func rewriteValueS390X_OpS390XOR_40(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -20716,12 +21598,14 @@ func rewriteValueS390X_OpS390XOR_40(v *Value) bool {
 	// cond: i1 == i0+4   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVDloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpS390XMOVWZloadidx {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -20740,6 +21624,7 @@ func rewriteValueS390X_OpS390XOR_40(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -20767,12 +21652,14 @@ func rewriteValueS390X_OpS390XOR_40(v *Value) bool {
 	// cond: i1 == i0+4   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVDloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpS390XMOVWZloadidx {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -20791,6 +21678,7 @@ func rewriteValueS390X_OpS390XOR_40(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -20818,6 +21706,7 @@ func rewriteValueS390X_OpS390XOR_40(v *Value) bool {
 	// cond: i1 == i0+4   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVDloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLDconst {
 			break
@@ -20831,6 +21720,7 @@ func rewriteValueS390X_OpS390XOR_40(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -20842,6 +21732,7 @@ func rewriteValueS390X_OpS390XOR_40(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -20869,6 +21760,7 @@ func rewriteValueS390X_OpS390XOR_40(v *Value) bool {
 	// cond: i1 == i0+4   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVDloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLDconst {
 			break
@@ -20882,6 +21774,7 @@ func rewriteValueS390X_OpS390XOR_40(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -20893,6 +21786,7 @@ func rewriteValueS390X_OpS390XOR_40(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -20920,6 +21814,7 @@ func rewriteValueS390X_OpS390XOR_40(v *Value) bool {
 	// cond: i1 == i0+4   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVDloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLDconst {
 			break
@@ -20933,6 +21828,7 @@ func rewriteValueS390X_OpS390XOR_40(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -20944,6 +21840,7 @@ func rewriteValueS390X_OpS390XOR_40(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -20971,6 +21868,7 @@ func rewriteValueS390X_OpS390XOR_40(v *Value) bool {
 	// cond: i1 == i0+4   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVDloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLDconst {
 			break
@@ -20984,6 +21882,7 @@ func rewriteValueS390X_OpS390XOR_40(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -20995,6 +21894,7 @@ func rewriteValueS390X_OpS390XOR_40(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -21022,6 +21922,7 @@ func rewriteValueS390X_OpS390XOR_40(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -21033,6 +21934,7 @@ func rewriteValueS390X_OpS390XOR_40(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -21040,6 +21942,7 @@ func rewriteValueS390X_OpS390XOR_40(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -21053,6 +21956,7 @@ func rewriteValueS390X_OpS390XOR_40(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -21094,6 +21998,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -21105,6 +22010,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -21112,6 +22018,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -21125,6 +22032,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -21159,6 +22067,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -21170,6 +22079,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -21177,6 +22087,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -21190,6 +22101,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -21224,6 +22136,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -21235,6 +22148,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -21242,6 +22156,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -21255,6 +22170,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -21289,6 +22205,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -21300,6 +22217,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -21307,6 +22225,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpS390XSLDconst {
@@ -21321,6 +22240,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -21354,6 +22274,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -21365,6 +22286,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -21372,6 +22294,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpS390XSLDconst {
@@ -21386,6 +22309,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -21419,6 +22343,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -21430,6 +22355,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -21437,6 +22363,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpS390XSLDconst {
@@ -21451,6 +22378,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -21484,6 +22412,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -21495,6 +22424,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -21502,6 +22432,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpS390XSLDconst {
@@ -21516,6 +22447,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -21549,10 +22481,12 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -21564,6 +22498,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -21581,6 +22516,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -21614,10 +22550,12 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -21629,6 +22567,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -21646,6 +22585,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -21679,10 +22619,12 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpS390XSLDconst {
@@ -21695,6 +22637,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -21711,6 +22654,7 @@ func rewriteValueS390X_OpS390XOR_50(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -21751,10 +22695,12 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpS390XSLDconst {
@@ -21767,6 +22713,7 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -21783,6 +22730,7 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -21816,10 +22764,12 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -21831,6 +22781,7 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -21848,6 +22799,7 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -21881,10 +22833,12 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -21896,6 +22850,7 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -21913,6 +22868,7 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -21946,10 +22902,12 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpS390XSLDconst {
@@ -21962,6 +22920,7 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -21978,6 +22937,7 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -22011,10 +22971,12 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpS390XSLDconst {
@@ -22027,6 +22989,7 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -22043,6 +23006,7 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -22076,6 +23040,7 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVWZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -22087,6 +23052,7 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -22094,6 +23060,7 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -22107,6 +23074,7 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -22141,6 +23109,7 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVWZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -22152,6 +23121,7 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -22159,6 +23129,7 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -22172,6 +23143,7 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -22206,6 +23178,7 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVWZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -22217,6 +23190,7 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -22224,6 +23198,7 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -22237,6 +23212,7 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -22271,6 +23247,7 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVWZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -22282,6 +23259,7 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -22289,6 +23267,7 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -22302,6 +23281,7 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -22336,6 +23316,7 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVWZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -22347,6 +23328,7 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -22354,6 +23336,7 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpS390XSLDconst {
@@ -22368,6 +23351,7 @@ func rewriteValueS390X_OpS390XOR_60(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -22408,6 +23392,7 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVWZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -22419,6 +23404,7 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -22426,6 +23412,7 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpS390XSLDconst {
@@ -22440,6 +23427,7 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -22473,6 +23461,7 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVWZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -22484,6 +23473,7 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -22491,6 +23481,7 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpS390XSLDconst {
@@ -22505,6 +23496,7 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -22538,6 +23530,7 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVWZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -22549,6 +23542,7 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -22556,6 +23550,7 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpS390XSLDconst {
@@ -22570,6 +23565,7 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -22603,10 +23599,12 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVWZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -22618,6 +23616,7 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -22635,6 +23634,7 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -22668,10 +23668,12 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVWZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -22683,6 +23685,7 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -22700,6 +23703,7 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -22733,10 +23737,12 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVWZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpS390XSLDconst {
@@ -22749,6 +23755,7 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -22765,6 +23772,7 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -22798,10 +23806,12 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVWZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpS390XSLDconst {
@@ -22814,6 +23824,7 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -22830,6 +23841,7 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -22863,10 +23875,12 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVWZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -22878,6 +23892,7 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -22895,6 +23910,7 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -22928,10 +23944,12 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVWZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -22943,6 +23961,7 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -22960,6 +23979,7 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -22993,10 +24013,12 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVWZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpS390XSLDconst {
@@ -23009,6 +24031,7 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -23025,6 +24048,7 @@ func rewriteValueS390X_OpS390XOR_70(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -23065,10 +24089,12 @@ func rewriteValueS390X_OpS390XOR_80(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0-16   && j1 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j1] (MOVWZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpS390XSLDconst {
@@ -23081,6 +24107,7 @@ func rewriteValueS390X_OpS390XOR_80(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -23097,6 +24124,7 @@ func rewriteValueS390X_OpS390XOR_80(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -23130,12 +24158,14 @@ func rewriteValueS390X_OpS390XOR_80(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZreg (MOVHBRload [i0] {s} p mem))
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpS390XMOVBZload {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		sh := v.Args[1]
@@ -23153,6 +24183,7 @@ func rewriteValueS390X_OpS390XOR_80(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -23178,6 +24209,7 @@ func rewriteValueS390X_OpS390XOR_80(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZreg (MOVHBRload [i0] {s} p mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLDconst {
 			break
@@ -23191,6 +24223,7 @@ func rewriteValueS390X_OpS390XOR_80(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		x0 := v.Args[1]
@@ -23201,6 +24234,7 @@ func rewriteValueS390X_OpS390XOR_80(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -23226,6 +24260,7 @@ func rewriteValueS390X_OpS390XOR_80(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWZreg (MOVWBRload [i0] {s} p mem))
 	for {
+		_ = v.Args[1]
 		r0 := v.Args[0]
 		if r0.Op != OpS390XMOVHZreg {
 			break
@@ -23236,6 +24271,7 @@ func rewriteValueS390X_OpS390XOR_80(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		sh := v.Args[1]
@@ -23257,6 +24293,7 @@ func rewriteValueS390X_OpS390XOR_80(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -23282,6 +24319,7 @@ func rewriteValueS390X_OpS390XOR_80(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWZreg (MOVWBRload [i0] {s} p mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLDconst {
 			break
@@ -23299,6 +24337,7 @@ func rewriteValueS390X_OpS390XOR_80(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		r0 := v.Args[1]
@@ -23313,6 +24352,7 @@ func rewriteValueS390X_OpS390XOR_80(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -23338,6 +24378,7 @@ func rewriteValueS390X_OpS390XOR_80(v *Value) bool {
 	// cond: i1 == i0+4   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVDBRload [i0] {s} p mem)
 	for {
+		_ = v.Args[1]
 		r0 := v.Args[0]
 		if r0.Op != OpS390XMOVWZreg {
 			break
@@ -23348,6 +24389,7 @@ func rewriteValueS390X_OpS390XOR_80(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		sh := v.Args[1]
@@ -23369,6 +24411,7 @@ func rewriteValueS390X_OpS390XOR_80(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -23392,6 +24435,7 @@ func rewriteValueS390X_OpS390XOR_80(v *Value) bool {
 	// cond: i1 == i0+4   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVDBRload [i0] {s} p mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLDconst {
 			break
@@ -23409,6 +24453,7 @@ func rewriteValueS390X_OpS390XOR_80(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		r0 := v.Args[1]
@@ -23423,6 +24468,7 @@ func rewriteValueS390X_OpS390XOR_80(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -23446,6 +24492,7 @@ func rewriteValueS390X_OpS390XOR_80(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVHZreg (MOVHBRload [i0] {s} p mem))) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -23457,12 +24504,14 @@ func rewriteValueS390X_OpS390XOR_80(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		or := v.Args[1]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -23476,6 +24525,7 @@ func rewriteValueS390X_OpS390XOR_80(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -23508,6 +24558,7 @@ func rewriteValueS390X_OpS390XOR_80(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVHZreg (MOVHBRload [i0] {s} p mem))) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -23519,12 +24570,14 @@ func rewriteValueS390X_OpS390XOR_80(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		or := v.Args[1]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpS390XSLDconst {
@@ -23539,6 +24592,7 @@ func rewriteValueS390X_OpS390XOR_80(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -23570,10 +24624,12 @@ func rewriteValueS390X_OpS390XOR_80(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVHZreg (MOVHBRload [i0] {s} p mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -23585,6 +24641,7 @@ func rewriteValueS390X_OpS390XOR_80(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		y := or.Args[1]
@@ -23601,6 +24658,7 @@ func rewriteValueS390X_OpS390XOR_80(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -23639,10 +24697,12 @@ func rewriteValueS390X_OpS390XOR_90(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVHZreg (MOVHBRload [i0] {s} p mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpS390XSLDconst {
@@ -23655,6 +24715,7 @@ func rewriteValueS390X_OpS390XOR_90(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		s1 := v.Args[1]
@@ -23670,6 +24731,7 @@ func rewriteValueS390X_OpS390XOR_90(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -23701,6 +24763,7 @@ func rewriteValueS390X_OpS390XOR_90(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVWZreg (MOVWBRload [i0] {s} p mem))) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -23716,12 +24779,14 @@ func rewriteValueS390X_OpS390XOR_90(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		or := v.Args[1]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -23739,6 +24804,7 @@ func rewriteValueS390X_OpS390XOR_90(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -23771,6 +24837,7 @@ func rewriteValueS390X_OpS390XOR_90(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVWZreg (MOVWBRload [i0] {s} p mem))) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -23786,12 +24853,14 @@ func rewriteValueS390X_OpS390XOR_90(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		or := v.Args[1]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpS390XSLDconst {
@@ -23810,6 +24879,7 @@ func rewriteValueS390X_OpS390XOR_90(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -23841,10 +24911,12 @@ func rewriteValueS390X_OpS390XOR_90(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVWZreg (MOVWBRload [i0] {s} p mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -23860,6 +24932,7 @@ func rewriteValueS390X_OpS390XOR_90(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		y := or.Args[1]
@@ -23880,6 +24953,7 @@ func rewriteValueS390X_OpS390XOR_90(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -23911,10 +24985,12 @@ func rewriteValueS390X_OpS390XOR_90(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVWZreg (MOVWBRload [i0] {s} p mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpS390XSLDconst {
@@ -23931,6 +25007,7 @@ func rewriteValueS390X_OpS390XOR_90(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		s1 := v.Args[1]
@@ -23950,6 +25027,7 @@ func rewriteValueS390X_OpS390XOR_90(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -23981,12 +25059,14 @@ func rewriteValueS390X_OpS390XOR_90(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpS390XMOVBZloadidx {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -24005,6 +25085,7 @@ func rewriteValueS390X_OpS390XOR_90(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -24034,12 +25115,14 @@ func rewriteValueS390X_OpS390XOR_90(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpS390XMOVBZloadidx {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -24058,6 +25141,7 @@ func rewriteValueS390X_OpS390XOR_90(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -24087,12 +25171,14 @@ func rewriteValueS390X_OpS390XOR_90(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpS390XMOVBZloadidx {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -24111,6 +25197,7 @@ func rewriteValueS390X_OpS390XOR_90(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -24140,12 +25227,14 @@ func rewriteValueS390X_OpS390XOR_90(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpS390XMOVBZloadidx {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -24164,6 +25253,7 @@ func rewriteValueS390X_OpS390XOR_90(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -24193,6 +25283,7 @@ func rewriteValueS390X_OpS390XOR_90(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLDconst {
 			break
@@ -24206,6 +25297,7 @@ func rewriteValueS390X_OpS390XOR_90(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -24217,6 +25309,7 @@ func rewriteValueS390X_OpS390XOR_90(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -24253,6 +25346,7 @@ func rewriteValueS390X_OpS390XOR_100(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLDconst {
 			break
@@ -24266,6 +25360,7 @@ func rewriteValueS390X_OpS390XOR_100(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -24277,6 +25372,7 @@ func rewriteValueS390X_OpS390XOR_100(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -24306,6 +25402,7 @@ func rewriteValueS390X_OpS390XOR_100(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLDconst {
 			break
@@ -24319,6 +25416,7 @@ func rewriteValueS390X_OpS390XOR_100(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -24330,6 +25428,7 @@ func rewriteValueS390X_OpS390XOR_100(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -24359,6 +25458,7 @@ func rewriteValueS390X_OpS390XOR_100(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLDconst {
 			break
@@ -24372,6 +25472,7 @@ func rewriteValueS390X_OpS390XOR_100(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -24383,6 +25484,7 @@ func rewriteValueS390X_OpS390XOR_100(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -24412,6 +25514,7 @@ func rewriteValueS390X_OpS390XOR_100(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWZreg (MOVWBRloadidx [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		r0 := v.Args[0]
 		if r0.Op != OpS390XMOVHZreg {
 			break
@@ -24422,6 +25525,7 @@ func rewriteValueS390X_OpS390XOR_100(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -24444,6 +25548,7 @@ func rewriteValueS390X_OpS390XOR_100(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -24473,6 +25578,7 @@ func rewriteValueS390X_OpS390XOR_100(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWZreg (MOVWBRloadidx [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		r0 := v.Args[0]
 		if r0.Op != OpS390XMOVHZreg {
 			break
@@ -24483,6 +25589,7 @@ func rewriteValueS390X_OpS390XOR_100(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -24505,6 +25612,7 @@ func rewriteValueS390X_OpS390XOR_100(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -24534,6 +25642,7 @@ func rewriteValueS390X_OpS390XOR_100(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWZreg (MOVWBRloadidx [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		r0 := v.Args[0]
 		if r0.Op != OpS390XMOVHZreg {
 			break
@@ -24544,6 +25653,7 @@ func rewriteValueS390X_OpS390XOR_100(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -24566,6 +25676,7 @@ func rewriteValueS390X_OpS390XOR_100(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -24595,6 +25706,7 @@ func rewriteValueS390X_OpS390XOR_100(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWZreg (MOVWBRloadidx [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		r0 := v.Args[0]
 		if r0.Op != OpS390XMOVHZreg {
 			break
@@ -24605,6 +25717,7 @@ func rewriteValueS390X_OpS390XOR_100(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -24627,6 +25740,7 @@ func rewriteValueS390X_OpS390XOR_100(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -24656,6 +25770,7 @@ func rewriteValueS390X_OpS390XOR_100(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWZreg (MOVWBRloadidx [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLDconst {
 			break
@@ -24673,6 +25788,7 @@ func rewriteValueS390X_OpS390XOR_100(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -24688,6 +25804,7 @@ func rewriteValueS390X_OpS390XOR_100(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -24717,6 +25834,7 @@ func rewriteValueS390X_OpS390XOR_100(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWZreg (MOVWBRloadidx [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLDconst {
 			break
@@ -24734,6 +25852,7 @@ func rewriteValueS390X_OpS390XOR_100(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -24749,6 +25868,7 @@ func rewriteValueS390X_OpS390XOR_100(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -24778,6 +25898,7 @@ func rewriteValueS390X_OpS390XOR_100(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWZreg (MOVWBRloadidx [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLDconst {
 			break
@@ -24795,6 +25916,7 @@ func rewriteValueS390X_OpS390XOR_100(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -24810,6 +25932,7 @@ func rewriteValueS390X_OpS390XOR_100(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -24846,6 +25969,7 @@ func rewriteValueS390X_OpS390XOR_110(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWZreg (MOVWBRloadidx [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLDconst {
 			break
@@ -24863,6 +25987,7 @@ func rewriteValueS390X_OpS390XOR_110(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -24878,6 +26003,7 @@ func rewriteValueS390X_OpS390XOR_110(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -24907,6 +26033,7 @@ func rewriteValueS390X_OpS390XOR_110(v *Value) bool {
 	// cond: i1 == i0+4   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVDBRloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		r0 := v.Args[0]
 		if r0.Op != OpS390XMOVWZreg {
 			break
@@ -24917,6 +26044,7 @@ func rewriteValueS390X_OpS390XOR_110(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -24939,6 +26067,7 @@ func rewriteValueS390X_OpS390XOR_110(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -24966,6 +26095,7 @@ func rewriteValueS390X_OpS390XOR_110(v *Value) bool {
 	// cond: i1 == i0+4   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVDBRloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		r0 := v.Args[0]
 		if r0.Op != OpS390XMOVWZreg {
 			break
@@ -24976,6 +26106,7 @@ func rewriteValueS390X_OpS390XOR_110(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -24998,6 +26129,7 @@ func rewriteValueS390X_OpS390XOR_110(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -25025,6 +26157,7 @@ func rewriteValueS390X_OpS390XOR_110(v *Value) bool {
 	// cond: i1 == i0+4   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVDBRloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		r0 := v.Args[0]
 		if r0.Op != OpS390XMOVWZreg {
 			break
@@ -25035,6 +26168,7 @@ func rewriteValueS390X_OpS390XOR_110(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -25057,6 +26191,7 @@ func rewriteValueS390X_OpS390XOR_110(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -25084,6 +26219,7 @@ func rewriteValueS390X_OpS390XOR_110(v *Value) bool {
 	// cond: i1 == i0+4   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVDBRloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		r0 := v.Args[0]
 		if r0.Op != OpS390XMOVWZreg {
 			break
@@ -25094,6 +26230,7 @@ func rewriteValueS390X_OpS390XOR_110(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -25116,6 +26253,7 @@ func rewriteValueS390X_OpS390XOR_110(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -25143,6 +26281,7 @@ func rewriteValueS390X_OpS390XOR_110(v *Value) bool {
 	// cond: i1 == i0+4   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVDBRloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLDconst {
 			break
@@ -25160,6 +26299,7 @@ func rewriteValueS390X_OpS390XOR_110(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -25175,6 +26315,7 @@ func rewriteValueS390X_OpS390XOR_110(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -25202,6 +26343,7 @@ func rewriteValueS390X_OpS390XOR_110(v *Value) bool {
 	// cond: i1 == i0+4   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVDBRloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLDconst {
 			break
@@ -25219,6 +26361,7 @@ func rewriteValueS390X_OpS390XOR_110(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -25234,6 +26377,7 @@ func rewriteValueS390X_OpS390XOR_110(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -25261,6 +26405,7 @@ func rewriteValueS390X_OpS390XOR_110(v *Value) bool {
 	// cond: i1 == i0+4   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVDBRloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLDconst {
 			break
@@ -25278,6 +26423,7 @@ func rewriteValueS390X_OpS390XOR_110(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -25293,6 +26439,7 @@ func rewriteValueS390X_OpS390XOR_110(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -25320,6 +26467,7 @@ func rewriteValueS390X_OpS390XOR_110(v *Value) bool {
 	// cond: i1 == i0+4   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVDBRloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLDconst {
 			break
@@ -25337,6 +26485,7 @@ func rewriteValueS390X_OpS390XOR_110(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -25352,6 +26501,7 @@ func rewriteValueS390X_OpS390XOR_110(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -25379,6 +26529,7 @@ func rewriteValueS390X_OpS390XOR_110(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -25390,6 +26541,7 @@ func rewriteValueS390X_OpS390XOR_110(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -25397,6 +26549,7 @@ func rewriteValueS390X_OpS390XOR_110(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -25410,6 +26563,7 @@ func rewriteValueS390X_OpS390XOR_110(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -25453,6 +26607,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -25464,6 +26619,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -25471,6 +26627,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -25484,6 +26641,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -25520,6 +26678,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -25531,6 +26690,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -25538,6 +26698,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -25551,6 +26712,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -25587,6 +26749,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -25598,6 +26761,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -25605,6 +26769,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -25618,6 +26783,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -25654,6 +26820,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -25665,6 +26832,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -25672,6 +26840,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpS390XSLDconst {
@@ -25686,6 +26855,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -25721,6 +26891,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -25732,6 +26903,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -25739,6 +26911,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpS390XSLDconst {
@@ -25753,6 +26926,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -25788,6 +26962,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -25799,6 +26974,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -25806,6 +26982,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpS390XSLDconst {
@@ -25820,6 +26997,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -25855,6 +27033,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -25866,6 +27045,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -25873,6 +27053,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpS390XSLDconst {
@@ -25887,6 +27068,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -25922,10 +27104,12 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -25937,6 +27121,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -25954,6 +27139,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -25989,10 +27175,12 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -26004,6 +27192,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -26021,6 +27210,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -26056,10 +27246,12 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpS390XSLDconst {
@@ -26072,6 +27264,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -26088,6 +27281,7 @@ func rewriteValueS390X_OpS390XOR_120(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -26130,10 +27324,12 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpS390XSLDconst {
@@ -26146,6 +27342,7 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -26162,6 +27359,7 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -26197,10 +27395,12 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -26212,6 +27412,7 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -26229,6 +27430,7 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -26264,10 +27466,12 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -26279,6 +27483,7 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -26296,6 +27501,7 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -26331,10 +27537,12 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpS390XSLDconst {
@@ -26347,6 +27555,7 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -26363,6 +27572,7 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -26398,10 +27608,12 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpS390XSLDconst {
@@ -26414,6 +27626,7 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -26430,6 +27643,7 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -26465,6 +27679,7 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVWZreg (MOVWBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -26480,6 +27695,7 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -26487,6 +27703,7 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -26504,6 +27721,7 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -26540,6 +27758,7 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVWZreg (MOVWBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -26555,6 +27774,7 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -26562,6 +27782,7 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -26579,6 +27800,7 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -26615,6 +27837,7 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVWZreg (MOVWBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -26630,6 +27853,7 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -26637,6 +27861,7 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -26654,6 +27879,7 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -26690,6 +27916,7 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVWZreg (MOVWBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -26705,6 +27932,7 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -26712,6 +27940,7 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -26729,6 +27958,7 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -26765,6 +27995,7 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVWZreg (MOVWBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -26780,6 +28011,7 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -26787,6 +28019,7 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpS390XSLDconst {
@@ -26805,6 +28038,7 @@ func rewriteValueS390X_OpS390XOR_130(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -26847,6 +28081,7 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVWZreg (MOVWBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -26862,6 +28097,7 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -26869,6 +28105,7 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpS390XSLDconst {
@@ -26887,6 +28124,7 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -26922,6 +28160,7 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVWZreg (MOVWBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -26937,6 +28176,7 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -26944,6 +28184,7 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpS390XSLDconst {
@@ -26962,6 +28203,7 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -26997,6 +28239,7 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVWZreg (MOVWBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpS390XSLDconst {
 			break
@@ -27012,6 +28255,7 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -27019,6 +28263,7 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpS390XSLDconst {
@@ -27037,6 +28282,7 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -27072,10 +28318,12 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVWZreg (MOVWBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -27091,6 +28339,7 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -27112,6 +28361,7 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -27147,10 +28397,12 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVWZreg (MOVWBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -27166,6 +28418,7 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -27187,6 +28440,7 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -27222,10 +28476,12 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVWZreg (MOVWBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpS390XSLDconst {
@@ -27242,6 +28498,7 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -27262,6 +28519,7 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -27297,10 +28555,12 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVWZreg (MOVWBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpS390XSLDconst {
@@ -27317,6 +28577,7 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -27337,6 +28598,7 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -27372,10 +28634,12 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVWZreg (MOVWBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -27391,6 +28655,7 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -27412,6 +28677,7 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -27447,10 +28713,12 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVWZreg (MOVWBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpS390XSLDconst {
 			break
@@ -27466,6 +28734,7 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -27487,6 +28756,7 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -27522,10 +28792,12 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVWZreg (MOVWBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpS390XSLDconst {
@@ -27542,6 +28814,7 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -27562,6 +28835,7 @@ func rewriteValueS390X_OpS390XOR_140(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -27604,10 +28878,12 @@ func rewriteValueS390X_OpS390XOR_150(v *Value) bool {
 	// cond: i1 == i0+2   && j1 == j0+16   && j0 % 32 == 0   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (OR <v.Type> (SLDconst <v.Type> [j0] (MOVWZreg (MOVWBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XOR {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpS390XSLDconst {
@@ -27624,6 +28900,7 @@ func rewriteValueS390X_OpS390XOR_150(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -27644,6 +28921,7 @@ func rewriteValueS390X_OpS390XOR_150(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -27682,6 +28960,7 @@ func rewriteValueS390X_OpS390XORW_0(v *Value) bool {
 	// cond:
 	// result: (ORWconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDconst {
@@ -27697,6 +28976,7 @@ func rewriteValueS390X_OpS390XORW_0(v *Value) bool {
 	// cond:
 	// result: (ORWconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDconst {
 			break
@@ -27712,6 +28992,7 @@ func rewriteValueS390X_OpS390XORW_0(v *Value) bool {
 	// cond: d == 32-c
 	// result: (RLLconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XSLWconst {
 			break
@@ -27738,6 +29019,7 @@ func rewriteValueS390X_OpS390XORW_0(v *Value) bool {
 	// cond: d == 32-c
 	// result: (RLLconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XSRWconst {
 			break
@@ -27764,6 +29046,7 @@ func rewriteValueS390X_OpS390XORW_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -27778,6 +29061,7 @@ func rewriteValueS390X_OpS390XORW_0(v *Value) bool {
 	// result: (ORWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVWload {
@@ -27785,6 +29069,7 @@ func rewriteValueS390X_OpS390XORW_0(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -27804,12 +29089,14 @@ func rewriteValueS390X_OpS390XORW_0(v *Value) bool {
 	// result: (ORWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		g := v.Args[0]
 		if g.Op != OpS390XMOVWload {
 			break
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		x := v.Args[1]
@@ -27830,12 +29117,14 @@ func rewriteValueS390X_OpS390XORW_0(v *Value) bool {
 	// result: (ORWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		g := v.Args[0]
 		if g.Op != OpS390XMOVWload {
 			break
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		x := v.Args[1]
@@ -27856,6 +29145,7 @@ func rewriteValueS390X_OpS390XORW_0(v *Value) bool {
 	// result: (ORWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVWload {
@@ -27863,6 +29153,7 @@ func rewriteValueS390X_OpS390XORW_0(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -27882,6 +29173,7 @@ func rewriteValueS390X_OpS390XORW_0(v *Value) bool {
 	// result: (ORWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVWZload {
@@ -27889,6 +29181,7 @@ func rewriteValueS390X_OpS390XORW_0(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -27915,12 +29208,14 @@ func rewriteValueS390X_OpS390XORW_10(v *Value) bool {
 	// result: (ORWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		g := v.Args[0]
 		if g.Op != OpS390XMOVWZload {
 			break
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		x := v.Args[1]
@@ -27941,12 +29236,14 @@ func rewriteValueS390X_OpS390XORW_10(v *Value) bool {
 	// result: (ORWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		g := v.Args[0]
 		if g.Op != OpS390XMOVWZload {
 			break
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		x := v.Args[1]
@@ -27967,6 +29264,7 @@ func rewriteValueS390X_OpS390XORW_10(v *Value) bool {
 	// result: (ORWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVWZload {
@@ -27974,6 +29272,7 @@ func rewriteValueS390X_OpS390XORW_10(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -27992,12 +29291,14 @@ func rewriteValueS390X_OpS390XORW_10(v *Value) bool {
 	// cond: i1 == i0+1   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZload [i0] {s} p mem)
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpS390XMOVBZload {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		sh := v.Args[1]
@@ -28015,6 +29316,7 @@ func rewriteValueS390X_OpS390XORW_10(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -28038,6 +29340,7 @@ func rewriteValueS390X_OpS390XORW_10(v *Value) bool {
 	// cond: i1 == i0+1   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZload [i0] {s} p mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLWconst {
 			break
@@ -28051,6 +29354,7 @@ func rewriteValueS390X_OpS390XORW_10(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		x1 := v.Args[1]
@@ -28061,6 +29365,7 @@ func rewriteValueS390X_OpS390XORW_10(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -28084,12 +29389,14 @@ func rewriteValueS390X_OpS390XORW_10(v *Value) bool {
 	// cond: i1 == i0+2   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWZload [i0] {s} p mem)
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpS390XMOVHZload {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		sh := v.Args[1]
@@ -28107,6 +29414,7 @@ func rewriteValueS390X_OpS390XORW_10(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -28130,6 +29438,7 @@ func rewriteValueS390X_OpS390XORW_10(v *Value) bool {
 	// cond: i1 == i0+2   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWZload [i0] {s} p mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLWconst {
 			break
@@ -28143,6 +29452,7 @@ func rewriteValueS390X_OpS390XORW_10(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		x1 := v.Args[1]
@@ -28153,6 +29463,7 @@ func rewriteValueS390X_OpS390XORW_10(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -28176,6 +29487,7 @@ func rewriteValueS390X_OpS390XORW_10(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j1] (MOVHZload [i0] {s} p mem)) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpS390XSLWconst {
 			break
@@ -28187,12 +29499,14 @@ func rewriteValueS390X_OpS390XORW_10(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		or := v.Args[1]
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpS390XSLWconst {
 			break
@@ -28206,6 +29520,7 @@ func rewriteValueS390X_OpS390XORW_10(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -28236,6 +29551,7 @@ func rewriteValueS390X_OpS390XORW_10(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j1] (MOVHZload [i0] {s} p mem)) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpS390XSLWconst {
 			break
@@ -28247,12 +29563,14 @@ func rewriteValueS390X_OpS390XORW_10(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		or := v.Args[1]
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpS390XSLWconst {
@@ -28267,6 +29585,7 @@ func rewriteValueS390X_OpS390XORW_10(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -28296,10 +29615,12 @@ func rewriteValueS390X_OpS390XORW_10(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j1] (MOVHZload [i0] {s} p mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpS390XSLWconst {
 			break
@@ -28311,6 +29632,7 @@ func rewriteValueS390X_OpS390XORW_10(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		y := or.Args[1]
@@ -28327,6 +29649,7 @@ func rewriteValueS390X_OpS390XORW_10(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -28363,10 +29686,12 @@ func rewriteValueS390X_OpS390XORW_20(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j1] (MOVHZload [i0] {s} p mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpS390XSLWconst {
@@ -28379,6 +29704,7 @@ func rewriteValueS390X_OpS390XORW_20(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		s0 := v.Args[1]
@@ -28394,6 +29720,7 @@ func rewriteValueS390X_OpS390XORW_20(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -28423,12 +29750,14 @@ func rewriteValueS390X_OpS390XORW_20(v *Value) bool {
 	// cond: i1 == i0+1   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpS390XMOVBZloadidx {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -28447,6 +29776,7 @@ func rewriteValueS390X_OpS390XORW_20(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -28474,12 +29804,14 @@ func rewriteValueS390X_OpS390XORW_20(v *Value) bool {
 	// cond: i1 == i0+1   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpS390XMOVBZloadidx {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -28498,6 +29830,7 @@ func rewriteValueS390X_OpS390XORW_20(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -28525,12 +29858,14 @@ func rewriteValueS390X_OpS390XORW_20(v *Value) bool {
 	// cond: i1 == i0+1   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpS390XMOVBZloadidx {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -28549,6 +29884,7 @@ func rewriteValueS390X_OpS390XORW_20(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -28576,12 +29912,14 @@ func rewriteValueS390X_OpS390XORW_20(v *Value) bool {
 	// cond: i1 == i0+1   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpS390XMOVBZloadidx {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -28600,6 +29938,7 @@ func rewriteValueS390X_OpS390XORW_20(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -28627,6 +29966,7 @@ func rewriteValueS390X_OpS390XORW_20(v *Value) bool {
 	// cond: i1 == i0+1   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLWconst {
 			break
@@ -28640,6 +29980,7 @@ func rewriteValueS390X_OpS390XORW_20(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -28651,6 +29992,7 @@ func rewriteValueS390X_OpS390XORW_20(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -28678,6 +30020,7 @@ func rewriteValueS390X_OpS390XORW_20(v *Value) bool {
 	// cond: i1 == i0+1   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLWconst {
 			break
@@ -28691,6 +30034,7 @@ func rewriteValueS390X_OpS390XORW_20(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -28702,6 +30046,7 @@ func rewriteValueS390X_OpS390XORW_20(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -28729,6 +30074,7 @@ func rewriteValueS390X_OpS390XORW_20(v *Value) bool {
 	// cond: i1 == i0+1   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLWconst {
 			break
@@ -28742,6 +30088,7 @@ func rewriteValueS390X_OpS390XORW_20(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -28753,6 +30100,7 @@ func rewriteValueS390X_OpS390XORW_20(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -28780,6 +30128,7 @@ func rewriteValueS390X_OpS390XORW_20(v *Value) bool {
 	// cond: i1 == i0+1   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLWconst {
 			break
@@ -28793,6 +30142,7 @@ func rewriteValueS390X_OpS390XORW_20(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -28804,6 +30154,7 @@ func rewriteValueS390X_OpS390XORW_20(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -28831,12 +30182,14 @@ func rewriteValueS390X_OpS390XORW_20(v *Value) bool {
 	// cond: i1 == i0+2   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpS390XMOVHZloadidx {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -28855,6 +30208,7 @@ func rewriteValueS390X_OpS390XORW_20(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -28889,12 +30243,14 @@ func rewriteValueS390X_OpS390XORW_30(v *Value) bool {
 	// cond: i1 == i0+2   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpS390XMOVHZloadidx {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -28913,6 +30269,7 @@ func rewriteValueS390X_OpS390XORW_30(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -28940,12 +30297,14 @@ func rewriteValueS390X_OpS390XORW_30(v *Value) bool {
 	// cond: i1 == i0+2   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpS390XMOVHZloadidx {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -28964,6 +30323,7 @@ func rewriteValueS390X_OpS390XORW_30(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -28991,12 +30351,14 @@ func rewriteValueS390X_OpS390XORW_30(v *Value) bool {
 	// cond: i1 == i0+2   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		x1 := v.Args[0]
 		if x1.Op != OpS390XMOVHZloadidx {
 			break
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -29015,6 +30377,7 @@ func rewriteValueS390X_OpS390XORW_30(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -29042,6 +30405,7 @@ func rewriteValueS390X_OpS390XORW_30(v *Value) bool {
 	// cond: i1 == i0+2   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLWconst {
 			break
@@ -29055,6 +30419,7 @@ func rewriteValueS390X_OpS390XORW_30(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -29066,6 +30431,7 @@ func rewriteValueS390X_OpS390XORW_30(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -29093,6 +30459,7 @@ func rewriteValueS390X_OpS390XORW_30(v *Value) bool {
 	// cond: i1 == i0+2   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLWconst {
 			break
@@ -29106,6 +30473,7 @@ func rewriteValueS390X_OpS390XORW_30(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -29117,6 +30485,7 @@ func rewriteValueS390X_OpS390XORW_30(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -29144,6 +30513,7 @@ func rewriteValueS390X_OpS390XORW_30(v *Value) bool {
 	// cond: i1 == i0+2   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLWconst {
 			break
@@ -29157,6 +30527,7 @@ func rewriteValueS390X_OpS390XORW_30(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -29168,6 +30539,7 @@ func rewriteValueS390X_OpS390XORW_30(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -29195,6 +30567,7 @@ func rewriteValueS390X_OpS390XORW_30(v *Value) bool {
 	// cond: i1 == i0+2   && p.Op != OpSB   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWZloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLWconst {
 			break
@@ -29208,6 +30581,7 @@ func rewriteValueS390X_OpS390XORW_30(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -29219,6 +30593,7 @@ func rewriteValueS390X_OpS390XORW_30(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -29246,6 +30621,7 @@ func rewriteValueS390X_OpS390XORW_30(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpS390XSLWconst {
 			break
@@ -29257,6 +30633,7 @@ func rewriteValueS390X_OpS390XORW_30(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -29264,6 +30641,7 @@ func rewriteValueS390X_OpS390XORW_30(v *Value) bool {
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpS390XSLWconst {
 			break
@@ -29277,6 +30655,7 @@ func rewriteValueS390X_OpS390XORW_30(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -29311,6 +30690,7 @@ func rewriteValueS390X_OpS390XORW_30(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpS390XSLWconst {
 			break
@@ -29322,6 +30702,7 @@ func rewriteValueS390X_OpS390XORW_30(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -29329,6 +30710,7 @@ func rewriteValueS390X_OpS390XORW_30(v *Value) bool {
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpS390XSLWconst {
 			break
@@ -29342,6 +30724,7 @@ func rewriteValueS390X_OpS390XORW_30(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -29376,6 +30759,7 @@ func rewriteValueS390X_OpS390XORW_30(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpS390XSLWconst {
 			break
@@ -29387,6 +30771,7 @@ func rewriteValueS390X_OpS390XORW_30(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -29394,6 +30779,7 @@ func rewriteValueS390X_OpS390XORW_30(v *Value) bool {
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpS390XSLWconst {
 			break
@@ -29407,6 +30793,7 @@ func rewriteValueS390X_OpS390XORW_30(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -29448,6 +30835,7 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpS390XSLWconst {
 			break
@@ -29459,6 +30847,7 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -29466,6 +30855,7 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpS390XSLWconst {
 			break
@@ -29479,6 +30869,7 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -29513,6 +30904,7 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpS390XSLWconst {
 			break
@@ -29524,6 +30916,7 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -29531,6 +30924,7 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpS390XSLWconst {
@@ -29545,6 +30939,7 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -29578,6 +30973,7 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpS390XSLWconst {
 			break
@@ -29589,6 +30985,7 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -29596,6 +30993,7 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpS390XSLWconst {
@@ -29610,6 +31008,7 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -29643,6 +31042,7 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpS390XSLWconst {
 			break
@@ -29654,6 +31054,7 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -29661,6 +31062,7 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpS390XSLWconst {
@@ -29675,6 +31077,7 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -29708,6 +31111,7 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		s0 := v.Args[0]
 		if s0.Op != OpS390XSLWconst {
 			break
@@ -29719,6 +31123,7 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -29726,6 +31131,7 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpS390XSLWconst {
@@ -29740,6 +31146,7 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -29773,10 +31180,12 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpS390XSLWconst {
 			break
@@ -29788,6 +31197,7 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -29805,6 +31215,7 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -29838,10 +31249,12 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpS390XSLWconst {
 			break
@@ -29853,6 +31266,7 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -29870,6 +31284,7 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -29903,10 +31318,12 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpS390XSLWconst {
@@ -29919,6 +31336,7 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -29935,6 +31353,7 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -29968,10 +31387,12 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpS390XSLWconst {
@@ -29984,6 +31405,7 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -30000,6 +31422,7 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -30033,10 +31456,12 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpS390XSLWconst {
 			break
@@ -30048,6 +31473,7 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -30065,6 +31491,7 @@ func rewriteValueS390X_OpS390XORW_40(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -30105,10 +31532,12 @@ func rewriteValueS390X_OpS390XORW_50(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		s1 := or.Args[0]
 		if s1.Op != OpS390XSLWconst {
 			break
@@ -30120,6 +31549,7 @@ func rewriteValueS390X_OpS390XORW_50(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -30137,6 +31567,7 @@ func rewriteValueS390X_OpS390XORW_50(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -30170,10 +31601,12 @@ func rewriteValueS390X_OpS390XORW_50(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpS390XSLWconst {
@@ -30186,6 +31619,7 @@ func rewriteValueS390X_OpS390XORW_50(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -30202,6 +31636,7 @@ func rewriteValueS390X_OpS390XORW_50(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -30235,10 +31670,12 @@ func rewriteValueS390X_OpS390XORW_50(v *Value) bool {
 	// cond: i1 == i0+1   && j1 == j0-8   && j1 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j1] (MOVHZloadidx [i0] {s} p idx mem)) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s1 := or.Args[1]
 		if s1.Op != OpS390XSLWconst {
@@ -30251,6 +31688,7 @@ func rewriteValueS390X_OpS390XORW_50(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -30267,6 +31705,7 @@ func rewriteValueS390X_OpS390XORW_50(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -30300,12 +31739,14 @@ func rewriteValueS390X_OpS390XORW_50(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZreg (MOVHBRload [i0] {s} p mem))
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpS390XMOVBZload {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		sh := v.Args[1]
@@ -30323,6 +31764,7 @@ func rewriteValueS390X_OpS390XORW_50(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -30348,6 +31790,7 @@ func rewriteValueS390X_OpS390XORW_50(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZreg (MOVHBRload [i0] {s} p mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLWconst {
 			break
@@ -30361,6 +31804,7 @@ func rewriteValueS390X_OpS390XORW_50(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		x0 := v.Args[1]
@@ -30371,6 +31815,7 @@ func rewriteValueS390X_OpS390XORW_50(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -30396,6 +31841,7 @@ func rewriteValueS390X_OpS390XORW_50(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWBRload [i0] {s} p mem)
 	for {
+		_ = v.Args[1]
 		r0 := v.Args[0]
 		if r0.Op != OpS390XMOVHZreg {
 			break
@@ -30406,6 +31852,7 @@ func rewriteValueS390X_OpS390XORW_50(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		sh := v.Args[1]
@@ -30427,6 +31874,7 @@ func rewriteValueS390X_OpS390XORW_50(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -30450,6 +31898,7 @@ func rewriteValueS390X_OpS390XORW_50(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWBRload [i0] {s} p mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLWconst {
 			break
@@ -30467,6 +31916,7 @@ func rewriteValueS390X_OpS390XORW_50(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		r0 := v.Args[1]
@@ -30481,6 +31931,7 @@ func rewriteValueS390X_OpS390XORW_50(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -30504,6 +31955,7 @@ func rewriteValueS390X_OpS390XORW_50(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j0] (MOVHZreg (MOVHBRload [i0] {s} p mem))) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpS390XSLWconst {
 			break
@@ -30515,12 +31967,14 @@ func rewriteValueS390X_OpS390XORW_50(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		or := v.Args[1]
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpS390XSLWconst {
 			break
@@ -30534,6 +31988,7 @@ func rewriteValueS390X_OpS390XORW_50(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -30566,6 +32021,7 @@ func rewriteValueS390X_OpS390XORW_50(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j0] (MOVHZreg (MOVHBRload [i0] {s} p mem))) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpS390XSLWconst {
 			break
@@ -30577,12 +32033,14 @@ func rewriteValueS390X_OpS390XORW_50(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[1]
 		p := x1.Args[0]
 		mem := x1.Args[1]
 		or := v.Args[1]
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpS390XSLWconst {
@@ -30597,6 +32055,7 @@ func rewriteValueS390X_OpS390XORW_50(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[1]
 		if p != x0.Args[0] {
 			break
 		}
@@ -30628,10 +32087,12 @@ func rewriteValueS390X_OpS390XORW_50(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j0] (MOVHZreg (MOVHBRload [i0] {s} p mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpS390XSLWconst {
 			break
@@ -30643,6 +32104,7 @@ func rewriteValueS390X_OpS390XORW_50(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		y := or.Args[1]
@@ -30659,6 +32121,7 @@ func rewriteValueS390X_OpS390XORW_50(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -30697,10 +32160,12 @@ func rewriteValueS390X_OpS390XORW_60(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j0] (MOVHZreg (MOVHBRload [i0] {s} p mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpS390XSLWconst {
@@ -30713,6 +32178,7 @@ func rewriteValueS390X_OpS390XORW_60(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[1]
 		p := x0.Args[0]
 		mem := x0.Args[1]
 		s1 := v.Args[1]
@@ -30728,6 +32194,7 @@ func rewriteValueS390X_OpS390XORW_60(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[1]
 		if p != x1.Args[0] {
 			break
 		}
@@ -30759,12 +32226,14 @@ func rewriteValueS390X_OpS390XORW_60(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpS390XMOVBZloadidx {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -30783,6 +32252,7 @@ func rewriteValueS390X_OpS390XORW_60(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -30812,12 +32282,14 @@ func rewriteValueS390X_OpS390XORW_60(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpS390XMOVBZloadidx {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -30836,6 +32308,7 @@ func rewriteValueS390X_OpS390XORW_60(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -30865,12 +32338,14 @@ func rewriteValueS390X_OpS390XORW_60(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpS390XMOVBZloadidx {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -30889,6 +32364,7 @@ func rewriteValueS390X_OpS390XORW_60(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -30918,12 +32394,14 @@ func rewriteValueS390X_OpS390XORW_60(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		x0 := v.Args[0]
 		if x0.Op != OpS390XMOVBZloadidx {
 			break
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -30942,6 +32420,7 @@ func rewriteValueS390X_OpS390XORW_60(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -30971,6 +32450,7 @@ func rewriteValueS390X_OpS390XORW_60(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLWconst {
 			break
@@ -30984,6 +32464,7 @@ func rewriteValueS390X_OpS390XORW_60(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -30995,6 +32476,7 @@ func rewriteValueS390X_OpS390XORW_60(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -31024,6 +32506,7 @@ func rewriteValueS390X_OpS390XORW_60(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLWconst {
 			break
@@ -31037,6 +32520,7 @@ func rewriteValueS390X_OpS390XORW_60(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -31048,6 +32532,7 @@ func rewriteValueS390X_OpS390XORW_60(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -31077,6 +32562,7 @@ func rewriteValueS390X_OpS390XORW_60(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLWconst {
 			break
@@ -31090,6 +32576,7 @@ func rewriteValueS390X_OpS390XORW_60(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -31101,6 +32588,7 @@ func rewriteValueS390X_OpS390XORW_60(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -31130,6 +32618,7 @@ func rewriteValueS390X_OpS390XORW_60(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && x0.Uses == 1   && x1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLWconst {
 			break
@@ -31143,6 +32632,7 @@ func rewriteValueS390X_OpS390XORW_60(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -31154,6 +32644,7 @@ func rewriteValueS390X_OpS390XORW_60(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -31183,6 +32674,7 @@ func rewriteValueS390X_OpS390XORW_60(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWBRloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		r0 := v.Args[0]
 		if r0.Op != OpS390XMOVHZreg {
 			break
@@ -31193,6 +32685,7 @@ func rewriteValueS390X_OpS390XORW_60(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -31215,6 +32708,7 @@ func rewriteValueS390X_OpS390XORW_60(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -31249,6 +32743,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWBRloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		r0 := v.Args[0]
 		if r0.Op != OpS390XMOVHZreg {
 			break
@@ -31259,6 +32754,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -31281,6 +32777,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -31308,6 +32805,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWBRloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		r0 := v.Args[0]
 		if r0.Op != OpS390XMOVHZreg {
 			break
@@ -31318,6 +32816,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -31340,6 +32839,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -31367,6 +32867,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWBRloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		r0 := v.Args[0]
 		if r0.Op != OpS390XMOVHZreg {
 			break
@@ -31377,6 +32878,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -31399,6 +32901,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -31426,6 +32929,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWBRloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLWconst {
 			break
@@ -31443,6 +32947,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -31458,6 +32963,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -31485,6 +32991,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWBRloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLWconst {
 			break
@@ -31502,6 +33009,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -31517,6 +33025,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -31544,6 +33053,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWBRloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLWconst {
 			break
@@ -31561,6 +33071,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -31576,6 +33087,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -31603,6 +33115,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 	// cond: i1 == i0+2   && x0.Uses == 1   && x1.Uses == 1   && r0.Uses == 1   && r1.Uses == 1   && sh.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(r0)   && clobber(r1)   && clobber(sh)
 	// result: @mergePoint(b,x0,x1) (MOVWBRloadidx [i0] {s} p idx mem)
 	for {
+		_ = v.Args[1]
 		sh := v.Args[0]
 		if sh.Op != OpS390XSLWconst {
 			break
@@ -31620,6 +33133,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -31635,6 +33149,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -31662,6 +33177,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpS390XSLWconst {
 			break
@@ -31673,6 +33189,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -31680,6 +33197,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpS390XSLWconst {
 			break
@@ -31693,6 +33211,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -31729,6 +33248,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpS390XSLWconst {
 			break
@@ -31740,6 +33260,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -31747,6 +33268,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpS390XSLWconst {
 			break
@@ -31760,6 +33282,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -31796,6 +33319,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpS390XSLWconst {
 			break
@@ -31807,6 +33331,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -31814,6 +33339,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpS390XSLWconst {
 			break
@@ -31827,6 +33353,7 @@ func rewriteValueS390X_OpS390XORW_70(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -31870,6 +33397,7 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpS390XSLWconst {
 			break
@@ -31881,6 +33409,7 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -31888,6 +33417,7 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpS390XSLWconst {
 			break
@@ -31901,6 +33431,7 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -31937,6 +33468,7 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpS390XSLWconst {
 			break
@@ -31948,6 +33480,7 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -31955,6 +33488,7 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpS390XSLWconst {
@@ -31969,6 +33503,7 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -32004,6 +33539,7 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpS390XSLWconst {
 			break
@@ -32015,6 +33551,7 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -32022,6 +33559,7 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpS390XSLWconst {
@@ -32036,6 +33574,7 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if p != x0.Args[0] {
 			break
 		}
@@ -32071,6 +33610,7 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpS390XSLWconst {
 			break
@@ -32082,6 +33622,7 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		p := x1.Args[0]
 		idx := x1.Args[1]
 		mem := x1.Args[2]
@@ -32089,6 +33630,7 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpS390XSLWconst {
@@ -32103,6 +33645,7 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -32138,6 +33681,7 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		s1 := v.Args[0]
 		if s1.Op != OpS390XSLWconst {
 			break
@@ -32149,6 +33693,7 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 		}
 		i1 := x1.AuxInt
 		s := x1.Aux
+		_ = x1.Args[2]
 		idx := x1.Args[0]
 		p := x1.Args[1]
 		mem := x1.Args[2]
@@ -32156,6 +33701,7 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpS390XSLWconst {
@@ -32170,6 +33716,7 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 		if x0.Aux != s {
 			break
 		}
+		_ = x0.Args[2]
 		if idx != x0.Args[0] {
 			break
 		}
@@ -32205,10 +33752,12 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpS390XSLWconst {
 			break
@@ -32220,6 +33769,7 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -32237,6 +33787,7 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -32272,10 +33823,12 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpS390XSLWconst {
 			break
@@ -32287,6 +33840,7 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -32304,6 +33858,7 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -32339,10 +33894,12 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpS390XSLWconst {
@@ -32355,6 +33912,7 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -32371,6 +33929,7 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -32406,10 +33965,12 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpS390XSLWconst {
@@ -32422,6 +33983,7 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -32438,6 +34000,7 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if p != x1.Args[0] {
 			break
 		}
@@ -32473,10 +34036,12 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpS390XSLWconst {
 			break
@@ -32488,6 +34053,7 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -32505,6 +34071,7 @@ func rewriteValueS390X_OpS390XORW_80(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -32547,10 +34114,12 @@ func rewriteValueS390X_OpS390XORW_90(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		s0 := or.Args[0]
 		if s0.Op != OpS390XSLWconst {
 			break
@@ -32562,6 +34131,7 @@ func rewriteValueS390X_OpS390XORW_90(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -32579,6 +34149,7 @@ func rewriteValueS390X_OpS390XORW_90(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -32614,10 +34185,12 @@ func rewriteValueS390X_OpS390XORW_90(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpS390XSLWconst {
@@ -32630,6 +34203,7 @@ func rewriteValueS390X_OpS390XORW_90(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		p := x0.Args[0]
 		idx := x0.Args[1]
 		mem := x0.Args[2]
@@ -32646,6 +34220,7 @@ func rewriteValueS390X_OpS390XORW_90(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -32681,10 +34256,12 @@ func rewriteValueS390X_OpS390XORW_90(v *Value) bool {
 	// cond: p.Op != OpSB   && i1 == i0+1   && j1 == j0+8   && j0 % 16 == 0   && x0.Uses == 1   && x1.Uses == 1   && s0.Uses == 1   && s1.Uses == 1   && or.Uses == 1   && mergePoint(b,x0,x1) != nil   && clobber(x0)   && clobber(x1)   && clobber(s0)   && clobber(s1)   && clobber(or)
 	// result: @mergePoint(b,x0,x1) (ORW <v.Type> (SLWconst <v.Type> [j0] (MOVHZreg (MOVHBRloadidx [i0] {s} p idx mem))) y)
 	for {
+		_ = v.Args[1]
 		or := v.Args[0]
 		if or.Op != OpS390XORW {
 			break
 		}
+		_ = or.Args[1]
 		y := or.Args[0]
 		s0 := or.Args[1]
 		if s0.Op != OpS390XSLWconst {
@@ -32697,6 +34274,7 @@ func rewriteValueS390X_OpS390XORW_90(v *Value) bool {
 		}
 		i0 := x0.AuxInt
 		s := x0.Aux
+		_ = x0.Args[2]
 		idx := x0.Args[0]
 		p := x0.Args[1]
 		mem := x0.Args[2]
@@ -32713,6 +34291,7 @@ func rewriteValueS390X_OpS390XORW_90(v *Value) bool {
 		if x1.Aux != s {
 			break
 		}
+		_ = x1.Args[2]
 		if idx != x1.Args[0] {
 			break
 		}
@@ -32835,6 +34414,7 @@ func rewriteValueS390X_OpS390XSLD_0(v *Value) bool {
 	// cond:
 	// result: (SLDconst [c&63] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDconst {
@@ -32850,6 +34430,7 @@ func rewriteValueS390X_OpS390XSLD_0(v *Value) bool {
 	// cond:
 	// result: (SLD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XANDconst {
@@ -32871,6 +34452,7 @@ func rewriteValueS390X_OpS390XSLW_0(v *Value) bool {
 	// cond:
 	// result: (SLWconst [c&63] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDconst {
@@ -32886,6 +34468,7 @@ func rewriteValueS390X_OpS390XSLW_0(v *Value) bool {
 	// cond:
 	// result: (SLW x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XANDWconst {
@@ -32907,6 +34490,7 @@ func rewriteValueS390X_OpS390XSRAD_0(v *Value) bool {
 	// cond:
 	// result: (SRADconst [c&63] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDconst {
@@ -32922,6 +34506,7 @@ func rewriteValueS390X_OpS390XSRAD_0(v *Value) bool {
 	// cond:
 	// result: (SRAD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XANDconst {
@@ -32960,6 +34545,7 @@ func rewriteValueS390X_OpS390XSRAW_0(v *Value) bool {
 	// cond:
 	// result: (SRAWconst [c&63] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDconst {
@@ -32975,6 +34561,7 @@ func rewriteValueS390X_OpS390XSRAW_0(v *Value) bool {
 	// cond:
 	// result: (SRAW x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XANDWconst {
@@ -33013,6 +34600,7 @@ func rewriteValueS390X_OpS390XSRD_0(v *Value) bool {
 	// cond:
 	// result: (SRDconst [c&63] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDconst {
@@ -33028,6 +34616,7 @@ func rewriteValueS390X_OpS390XSRD_0(v *Value) bool {
 	// cond:
 	// result: (SRD x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XANDconst {
@@ -33049,6 +34638,7 @@ func rewriteValueS390X_OpS390XSRW_0(v *Value) bool {
 	// cond:
 	// result: (SRWconst [c&63] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDconst {
@@ -33064,6 +34654,7 @@ func rewriteValueS390X_OpS390XSRW_0(v *Value) bool {
 	// cond:
 	// result: (SRW x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XANDWconst {
@@ -33087,6 +34678,7 @@ func rewriteValueS390X_OpS390XSTM2_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		w2 := v.Args[1]
 		w3 := v.Args[2]
@@ -33100,6 +34692,7 @@ func rewriteValueS390X_OpS390XSTM2_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -33126,6 +34719,7 @@ func rewriteValueS390X_OpS390XSTM2_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XSRDconst {
@@ -33156,6 +34750,7 @@ func rewriteValueS390X_OpS390XSTMG2_0(v *Value) bool {
 	for {
 		i := v.AuxInt
 		s := v.Aux
+		_ = v.Args[3]
 		p := v.Args[0]
 		w2 := v.Args[1]
 		w3 := v.Args[2]
@@ -33169,6 +34764,7 @@ func rewriteValueS390X_OpS390XSTMG2_0(v *Value) bool {
 		if x.Aux != s {
 			break
 		}
+		_ = x.Args[3]
 		if p != x.Args[0] {
 			break
 		}
@@ -33198,6 +34794,7 @@ func rewriteValueS390X_OpS390XSUB_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (SUBconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDconst {
@@ -33216,6 +34813,7 @@ func rewriteValueS390X_OpS390XSUB_0(v *Value) bool {
 	// cond: is32Bit(c)
 	// result: (NEG (SUBconst <v.Type> x [c]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDconst {
 			break
@@ -33236,6 +34834,7 @@ func rewriteValueS390X_OpS390XSUB_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -33249,6 +34848,7 @@ func rewriteValueS390X_OpS390XSUB_0(v *Value) bool {
 	// result: (SUBload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVDload {
@@ -33256,6 +34856,7 @@ func rewriteValueS390X_OpS390XSUB_0(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -33357,6 +34958,7 @@ func rewriteValueS390X_OpS390XSUBW_0(v *Value) bool {
 	// cond:
 	// result: (SUBWconst x [c])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDconst {
@@ -33372,6 +34974,7 @@ func rewriteValueS390X_OpS390XSUBW_0(v *Value) bool {
 	// cond:
 	// result: (NEGW (SUBWconst <v.Type> x [c]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDconst {
 			break
@@ -33389,6 +34992,7 @@ func rewriteValueS390X_OpS390XSUBW_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -33402,6 +35006,7 @@ func rewriteValueS390X_OpS390XSUBW_0(v *Value) bool {
 	// result: (SUBWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVWload {
@@ -33409,6 +35014,7 @@ func rewriteValueS390X_OpS390XSUBW_0(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -33428,6 +35034,7 @@ func rewriteValueS390X_OpS390XSUBW_0(v *Value) bool {
 	// result: (SUBWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVWZload {
@@ -33435,6 +35042,7 @@ func rewriteValueS390X_OpS390XSUBW_0(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -33546,6 +35154,7 @@ func rewriteValueS390X_OpS390XXOR_0(v *Value) bool {
 	// cond: isU32Bit(c)
 	// result: (XORconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDconst {
@@ -33564,6 +35173,7 @@ func rewriteValueS390X_OpS390XXOR_0(v *Value) bool {
 	// cond: isU32Bit(c)
 	// result: (XORconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDconst {
 			break
@@ -33582,6 +35192,7 @@ func rewriteValueS390X_OpS390XXOR_0(v *Value) bool {
 	// cond: d == 64-c
 	// result: (RLLGconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XSLDconst {
 			break
@@ -33608,6 +35219,7 @@ func rewriteValueS390X_OpS390XXOR_0(v *Value) bool {
 	// cond: d == 64-c
 	// result: (RLLGconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XSRDconst {
 			break
@@ -33634,6 +35246,7 @@ func rewriteValueS390X_OpS390XXOR_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [c^d])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDconst {
 			break
@@ -33652,6 +35265,7 @@ func rewriteValueS390X_OpS390XXOR_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [c^d])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDconst {
 			break
@@ -33670,6 +35284,7 @@ func rewriteValueS390X_OpS390XXOR_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -33683,6 +35298,7 @@ func rewriteValueS390X_OpS390XXOR_0(v *Value) bool {
 	// result: (XORload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVDload {
@@ -33690,6 +35306,7 @@ func rewriteValueS390X_OpS390XXOR_0(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -33709,12 +35326,14 @@ func rewriteValueS390X_OpS390XXOR_0(v *Value) bool {
 	// result: (XORload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		g := v.Args[0]
 		if g.Op != OpS390XMOVDload {
 			break
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		x := v.Args[1]
@@ -33735,12 +35354,14 @@ func rewriteValueS390X_OpS390XXOR_0(v *Value) bool {
 	// result: (XORload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		g := v.Args[0]
 		if g.Op != OpS390XMOVDload {
 			break
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		x := v.Args[1]
@@ -33764,6 +35385,7 @@ func rewriteValueS390X_OpS390XXOR_10(v *Value) bool {
 	// result: (XORload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVDload {
@@ -33771,6 +35393,7 @@ func rewriteValueS390X_OpS390XXOR_10(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -33792,6 +35415,7 @@ func rewriteValueS390X_OpS390XXORW_0(v *Value) bool {
 	// cond:
 	// result: (XORWconst [c] x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpS390XMOVDconst {
@@ -33807,6 +35431,7 @@ func rewriteValueS390X_OpS390XXORW_0(v *Value) bool {
 	// cond:
 	// result: (XORWconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XMOVDconst {
 			break
@@ -33822,6 +35447,7 @@ func rewriteValueS390X_OpS390XXORW_0(v *Value) bool {
 	// cond: d == 32-c
 	// result: (RLLconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XSLWconst {
 			break
@@ -33848,6 +35474,7 @@ func rewriteValueS390X_OpS390XXORW_0(v *Value) bool {
 	// cond: d == 32-c
 	// result: (RLLconst [c] x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpS390XSRWconst {
 			break
@@ -33874,6 +35501,7 @@ func rewriteValueS390X_OpS390XXORW_0(v *Value) bool {
 	// cond:
 	// result: (MOVDconst [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -33887,6 +35515,7 @@ func rewriteValueS390X_OpS390XXORW_0(v *Value) bool {
 	// result: (XORWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVWload {
@@ -33894,6 +35523,7 @@ func rewriteValueS390X_OpS390XXORW_0(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -33913,12 +35543,14 @@ func rewriteValueS390X_OpS390XXORW_0(v *Value) bool {
 	// result: (XORWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		g := v.Args[0]
 		if g.Op != OpS390XMOVWload {
 			break
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		x := v.Args[1]
@@ -33939,12 +35571,14 @@ func rewriteValueS390X_OpS390XXORW_0(v *Value) bool {
 	// result: (XORWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		g := v.Args[0]
 		if g.Op != OpS390XMOVWload {
 			break
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		x := v.Args[1]
@@ -33965,6 +35599,7 @@ func rewriteValueS390X_OpS390XXORW_0(v *Value) bool {
 	// result: (XORWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVWload {
@@ -33972,6 +35607,7 @@ func rewriteValueS390X_OpS390XXORW_0(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -33991,6 +35627,7 @@ func rewriteValueS390X_OpS390XXORW_0(v *Value) bool {
 	// result: (XORWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVWZload {
@@ -33998,6 +35635,7 @@ func rewriteValueS390X_OpS390XXORW_0(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -34020,12 +35658,14 @@ func rewriteValueS390X_OpS390XXORW_10(v *Value) bool {
 	// result: (XORWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		g := v.Args[0]
 		if g.Op != OpS390XMOVWZload {
 			break
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		x := v.Args[1]
@@ -34046,12 +35686,14 @@ func rewriteValueS390X_OpS390XXORW_10(v *Value) bool {
 	// result: (XORWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		g := v.Args[0]
 		if g.Op != OpS390XMOVWZload {
 			break
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		x := v.Args[1]
@@ -34072,6 +35714,7 @@ func rewriteValueS390X_OpS390XXORW_10(v *Value) bool {
 	// result: (XORWload <t> [off] {sym} x ptr mem)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		g := v.Args[1]
 		if g.Op != OpS390XMOVWZload {
@@ -34079,6 +35722,7 @@ func rewriteValueS390X_OpS390XXORW_10(v *Value) bool {
 		}
 		off := g.AuxInt
 		sym := g.Aux
+		_ = g.Args[1]
 		ptr := g.Args[0]
 		mem := g.Args[1]
 		if !(ptr.Op != OpSB && is20Bit(off) && canMergeLoad(v, g, x) && clobber(g)) {
@@ -34168,6 +35812,7 @@ func rewriteValueS390X_OpSelect0_0(v *Value) bool {
 		if v_0.Op != OpS390XAddTupleFirst32 {
 			break
 		}
+		_ = v_0.Args[1]
 		val := v_0.Args[0]
 		tuple := v_0.Args[1]
 		v.reset(OpS390XADDW)
@@ -34186,6 +35831,7 @@ func rewriteValueS390X_OpSelect0_0(v *Value) bool {
 		if v_0.Op != OpS390XAddTupleFirst64 {
 			break
 		}
+		_ = v_0.Args[1]
 		val := v_0.Args[0]
 		tuple := v_0.Args[1]
 		v.reset(OpS390XADD)
@@ -34206,6 +35852,7 @@ func rewriteValueS390X_OpSelect1_0(v *Value) bool {
 		if v_0.Op != OpS390XAddTupleFirst32 {
 			break
 		}
+		_ = v_0.Args[1]
 		tuple := v_0.Args[1]
 		v.reset(OpSelect1)
 		v.AddArg(tuple)
@@ -34219,6 +35866,7 @@ func rewriteValueS390X_OpSelect1_0(v *Value) bool {
 		if v_0.Op != OpS390XAddTupleFirst64 {
 			break
 		}
+		_ = v_0.Args[1]
 		tuple := v_0.Args[1]
 		v.reset(OpSelect1)
 		v.AddArg(tuple)
@@ -34341,6 +35989,7 @@ func rewriteValueS390X_OpStore_0(v *Value) bool {
 	// result: (FMOVDstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -34358,6 +36007,7 @@ func rewriteValueS390X_OpStore_0(v *Value) bool {
 	// result: (FMOVSstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -34375,6 +36025,7 @@ func rewriteValueS390X_OpStore_0(v *Value) bool {
 	// result: (MOVDstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -34392,6 +36043,7 @@ func rewriteValueS390X_OpStore_0(v *Value) bool {
 	// result: (MOVWstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -34409,6 +36061,7 @@ func rewriteValueS390X_OpStore_0(v *Value) bool {
 	// result: (MOVHstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -34426,6 +36079,7 @@ func rewriteValueS390X_OpStore_0(v *Value) bool {
 	// result: (MOVBstore ptr val mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		ptr := v.Args[0]
 		val := v.Args[1]
 		mem := v.Args[2]
@@ -34445,6 +36099,7 @@ func rewriteValueS390X_OpSub16_0(v *Value) bool {
 	// cond:
 	// result: (SUBW  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XSUBW)
@@ -34458,6 +36113,7 @@ func rewriteValueS390X_OpSub32_0(v *Value) bool {
 	// cond:
 	// result: (SUBW  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XSUBW)
@@ -34471,6 +36127,7 @@ func rewriteValueS390X_OpSub32F_0(v *Value) bool {
 	// cond:
 	// result: (FSUBS x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XFSUBS)
@@ -34484,6 +36141,7 @@ func rewriteValueS390X_OpSub64_0(v *Value) bool {
 	// cond:
 	// result: (SUB  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XSUB)
@@ -34497,6 +36155,7 @@ func rewriteValueS390X_OpSub64F_0(v *Value) bool {
 	// cond:
 	// result: (FSUB x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XFSUB)
@@ -34510,6 +36169,7 @@ func rewriteValueS390X_OpSub8_0(v *Value) bool {
 	// cond:
 	// result: (SUBW  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XSUBW)
@@ -34523,6 +36183,7 @@ func rewriteValueS390X_OpSubPtr_0(v *Value) bool {
 	// cond:
 	// result: (SUB  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XSUB)
@@ -34608,6 +36269,7 @@ func rewriteValueS390X_OpXor16_0(v *Value) bool {
 	// cond:
 	// result: (XORW x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XXORW)
@@ -34621,6 +36283,7 @@ func rewriteValueS390X_OpXor32_0(v *Value) bool {
 	// cond:
 	// result: (XORW x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XXORW)
@@ -34634,6 +36297,7 @@ func rewriteValueS390X_OpXor64_0(v *Value) bool {
 	// cond:
 	// result: (XOR x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XXOR)
@@ -34647,6 +36311,7 @@ func rewriteValueS390X_OpXor8_0(v *Value) bool {
 	// cond:
 	// result: (XORW x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpS390XXORW)
@@ -34665,6 +36330,7 @@ func rewriteValueS390X_OpZero_0(v *Value) bool {
 		if v.AuxInt != 0 {
 			break
 		}
+		_ = v.Args[1]
 		mem := v.Args[1]
 		v.reset(OpCopy)
 		v.Type = mem.Type
@@ -34678,6 +36344,7 @@ func rewriteValueS390X_OpZero_0(v *Value) bool {
 		if v.AuxInt != 1 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpS390XMOVBstoreconst)
@@ -34693,6 +36360,7 @@ func rewriteValueS390X_OpZero_0(v *Value) bool {
 		if v.AuxInt != 2 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpS390XMOVHstoreconst)
@@ -34708,6 +36376,7 @@ func rewriteValueS390X_OpZero_0(v *Value) bool {
 		if v.AuxInt != 4 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpS390XMOVWstoreconst)
@@ -34723,6 +36392,7 @@ func rewriteValueS390X_OpZero_0(v *Value) bool {
 		if v.AuxInt != 8 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpS390XMOVDstoreconst)
@@ -34738,6 +36408,7 @@ func rewriteValueS390X_OpZero_0(v *Value) bool {
 		if v.AuxInt != 3 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpS390XMOVBstoreconst)
@@ -34757,6 +36428,7 @@ func rewriteValueS390X_OpZero_0(v *Value) bool {
 		if v.AuxInt != 5 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpS390XMOVBstoreconst)
@@ -34776,6 +36448,7 @@ func rewriteValueS390X_OpZero_0(v *Value) bool {
 		if v.AuxInt != 6 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpS390XMOVHstoreconst)
@@ -34795,6 +36468,7 @@ func rewriteValueS390X_OpZero_0(v *Value) bool {
 		if v.AuxInt != 7 {
 			break
 		}
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		v.reset(OpS390XMOVWstoreconst)
@@ -34812,6 +36486,7 @@ func rewriteValueS390X_OpZero_0(v *Value) bool {
 	// result: (CLEAR [makeValAndOff(s, 0)] destptr mem)
 	for {
 		s := v.AuxInt
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		if !(s > 0 && s <= 1024) {
@@ -34833,6 +36508,7 @@ func rewriteValueS390X_OpZero_10(v *Value) bool {
 	// result: (LoweredZero [s%256] destptr (ADDconst <destptr.Type> destptr [(s/256)*256]) mem)
 	for {
 		s := v.AuxInt
+		_ = v.Args[1]
 		destptr := v.Args[0]
 		mem := v.Args[1]
 		if !(s > 1024) {
@@ -35088,6 +36764,7 @@ func rewriteBlockS390X(b *Block) bool {
 			if v.Op != OpS390XMOVDLT {
 				break
 			}
+			_ = v.Args[2]
 			v_0 := v.Args[0]
 			if v_0.Op != OpS390XMOVDconst {
 				break
@@ -35115,6 +36792,7 @@ func rewriteBlockS390X(b *Block) bool {
 			if v.Op != OpS390XMOVDLE {
 				break
 			}
+			_ = v.Args[2]
 			v_0 := v.Args[0]
 			if v_0.Op != OpS390XMOVDconst {
 				break
@@ -35142,6 +36820,7 @@ func rewriteBlockS390X(b *Block) bool {
 			if v.Op != OpS390XMOVDGT {
 				break
 			}
+			_ = v.Args[2]
 			v_0 := v.Args[0]
 			if v_0.Op != OpS390XMOVDconst {
 				break
@@ -35169,6 +36848,7 @@ func rewriteBlockS390X(b *Block) bool {
 			if v.Op != OpS390XMOVDGE {
 				break
 			}
+			_ = v.Args[2]
 			v_0 := v.Args[0]
 			if v_0.Op != OpS390XMOVDconst {
 				break
@@ -35196,6 +36876,7 @@ func rewriteBlockS390X(b *Block) bool {
 			if v.Op != OpS390XMOVDEQ {
 				break
 			}
+			_ = v.Args[2]
 			v_0 := v.Args[0]
 			if v_0.Op != OpS390XMOVDconst {
 				break
@@ -35223,6 +36904,7 @@ func rewriteBlockS390X(b *Block) bool {
 			if v.Op != OpS390XMOVDNE {
 				break
 			}
+			_ = v.Args[2]
 			v_0 := v.Args[0]
 			if v_0.Op != OpS390XMOVDconst {
 				break
@@ -35250,6 +36932,7 @@ func rewriteBlockS390X(b *Block) bool {
 			if v.Op != OpS390XMOVDGTnoinv {
 				break
 			}
+			_ = v.Args[2]
 			v_0 := v.Args[0]
 			if v_0.Op != OpS390XMOVDconst {
 				break
@@ -35277,6 +36960,7 @@ func rewriteBlockS390X(b *Block) bool {
 			if v.Op != OpS390XMOVDGEnoinv {
 				break
 			}
+			_ = v.Args[2]
 			v_0 := v.Args[0]
 			if v_0.Op != OpS390XMOVDconst {
 				break
@@ -35431,6 +37115,7 @@ func rewriteBlockS390X(b *Block) bool {
 			if v_0.Op != OpS390XMOVDLT {
 				break
 			}
+			_ = v_0.Args[2]
 			v_0_0 := v_0.Args[0]
 			if v_0_0.Op != OpS390XMOVDconst {
 				break
@@ -35465,6 +37150,7 @@ func rewriteBlockS390X(b *Block) bool {
 			if v_0.Op != OpS390XMOVDLE {
 				break
 			}
+			_ = v_0.Args[2]
 			v_0_0 := v_0.Args[0]
 			if v_0_0.Op != OpS390XMOVDconst {
 				break
@@ -35499,6 +37185,7 @@ func rewriteBlockS390X(b *Block) bool {
 			if v_0.Op != OpS390XMOVDGT {
 				break
 			}
+			_ = v_0.Args[2]
 			v_0_0 := v_0.Args[0]
 			if v_0_0.Op != OpS390XMOVDconst {
 				break
@@ -35533,6 +37220,7 @@ func rewriteBlockS390X(b *Block) bool {
 			if v_0.Op != OpS390XMOVDGE {
 				break
 			}
+			_ = v_0.Args[2]
 			v_0_0 := v_0.Args[0]
 			if v_0_0.Op != OpS390XMOVDconst {
 				break
@@ -35567,6 +37255,7 @@ func rewriteBlockS390X(b *Block) bool {
 			if v_0.Op != OpS390XMOVDEQ {
 				break
 			}
+			_ = v_0.Args[2]
 			v_0_0 := v_0.Args[0]
 			if v_0_0.Op != OpS390XMOVDconst {
 				break
@@ -35601,6 +37290,7 @@ func rewriteBlockS390X(b *Block) bool {
 			if v_0.Op != OpS390XMOVDNE {
 				break
 			}
+			_ = v_0.Args[2]
 			v_0_0 := v_0.Args[0]
 			if v_0_0.Op != OpS390XMOVDconst {
 				break
@@ -35635,6 +37325,7 @@ func rewriteBlockS390X(b *Block) bool {
 			if v_0.Op != OpS390XMOVDGTnoinv {
 				break
 			}
+			_ = v_0.Args[2]
 			v_0_0 := v_0.Args[0]
 			if v_0_0.Op != OpS390XMOVDconst {
 				break
@@ -35669,6 +37360,7 @@ func rewriteBlockS390X(b *Block) bool {
 			if v_0.Op != OpS390XMOVDGEnoinv {
 				break
 			}
+			_ = v_0.Args[2]
 			v_0_0 := v_0.Args[0]
 			if v_0_0.Op != OpS390XMOVDconst {
 				break
diff --git a/src/cmd/compile/internal/ssa/rewritedec.go b/src/cmd/compile/internal/ssa/rewritedec.go
index 710170cec8..5ace63b52b 100644
--- a/src/cmd/compile/internal/ssa/rewritedec.go
+++ b/src/cmd/compile/internal/ssa/rewritedec.go
@@ -49,6 +49,7 @@ func rewriteValuedec_OpComplexImag_0(v *Value) bool {
 		if v_0.Op != OpComplexMake {
 			break
 		}
+		_ = v_0.Args[1]
 		imag := v_0.Args[1]
 		v.reset(OpCopy)
 		v.Type = imag.Type
@@ -66,6 +67,7 @@ func rewriteValuedec_OpComplexReal_0(v *Value) bool {
 		if v_0.Op != OpComplexMake {
 			break
 		}
+		_ = v_0.Args[1]
 		real := v_0.Args[0]
 		v.reset(OpCopy)
 		v.Type = real.Type
@@ -83,6 +85,7 @@ func rewriteValuedec_OpIData_0(v *Value) bool {
 		if v_0.Op != OpIMake {
 			break
 		}
+		_ = v_0.Args[1]
 		data := v_0.Args[1]
 		v.reset(OpCopy)
 		v.Type = data.Type
@@ -102,6 +105,7 @@ func rewriteValuedec_OpITab_0(v *Value) bool {
 		if v_0.Op != OpIMake {
 			break
 		}
+		_ = v_0.Args[1]
 		itab := v_0.Args[0]
 		v.reset(OpCopy)
 		v.Type = itab.Type
@@ -122,6 +126,7 @@ func rewriteValuedec_OpLoad_0(v *Value) bool {
 	// result: (ComplexMake     (Load <typ.Float32> ptr mem)     (Load <typ.Float32>       (OffPtr <typ.Float32Ptr> [4] ptr)       mem)     )
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.IsComplex() && t.Size() == 8) {
@@ -146,6 +151,7 @@ func rewriteValuedec_OpLoad_0(v *Value) bool {
 	// result: (ComplexMake     (Load <typ.Float64> ptr mem)     (Load <typ.Float64>       (OffPtr <typ.Float64Ptr> [8] ptr)       mem)     )
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.IsComplex() && t.Size() == 16) {
@@ -170,6 +176,7 @@ func rewriteValuedec_OpLoad_0(v *Value) bool {
 	// result: (StringMake     (Load <typ.BytePtr> ptr mem)     (Load <typ.Int>       (OffPtr <typ.IntPtr> [config.PtrSize] ptr)       mem))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.IsString()) {
@@ -194,6 +201,7 @@ func rewriteValuedec_OpLoad_0(v *Value) bool {
 	// result: (SliceMake     (Load <t.ElemType().PtrTo()> ptr mem)     (Load <typ.Int>       (OffPtr <typ.IntPtr> [config.PtrSize] ptr)       mem)     (Load <typ.Int>       (OffPtr <typ.IntPtr> [2*config.PtrSize] ptr)       mem))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.IsSlice()) {
@@ -225,6 +233,7 @@ func rewriteValuedec_OpLoad_0(v *Value) bool {
 	// result: (IMake     (Load <typ.BytePtr> ptr mem)     (Load <typ.BytePtr>       (OffPtr <typ.BytePtrPtr> [config.PtrSize] ptr)       mem))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.IsInterface()) {
@@ -255,6 +264,7 @@ func rewriteValuedec_OpSliceCap_0(v *Value) bool {
 		if v_0.Op != OpSliceMake {
 			break
 		}
+		_ = v_0.Args[2]
 		cap := v_0.Args[2]
 		v.reset(OpCopy)
 		v.Type = cap.Type
@@ -272,6 +282,7 @@ func rewriteValuedec_OpSliceLen_0(v *Value) bool {
 		if v_0.Op != OpSliceMake {
 			break
 		}
+		_ = v_0.Args[2]
 		len := v_0.Args[1]
 		v.reset(OpCopy)
 		v.Type = len.Type
@@ -289,6 +300,7 @@ func rewriteValuedec_OpSlicePtr_0(v *Value) bool {
 		if v_0.Op != OpSliceMake {
 			break
 		}
+		_ = v_0.Args[2]
 		ptr := v_0.Args[0]
 		v.reset(OpCopy)
 		v.Type = ptr.Type
@@ -309,11 +321,13 @@ func rewriteValuedec_OpStore_0(v *Value) bool {
 	// result: (Store {typ.Float32}     (OffPtr <typ.Float32Ptr> [4] dst)     imag     (Store {typ.Float32} dst real mem))
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpComplexMake {
 			break
 		}
+		_ = v_1.Args[1]
 		real := v_1.Args[0]
 		imag := v_1.Args[1]
 		mem := v.Args[2]
@@ -340,11 +354,13 @@ func rewriteValuedec_OpStore_0(v *Value) bool {
 	// result: (Store {typ.Float64}     (OffPtr <typ.Float64Ptr> [8] dst)     imag     (Store {typ.Float64} dst real mem))
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpComplexMake {
 			break
 		}
+		_ = v_1.Args[1]
 		real := v_1.Args[0]
 		imag := v_1.Args[1]
 		mem := v.Args[2]
@@ -370,11 +386,13 @@ func rewriteValuedec_OpStore_0(v *Value) bool {
 	// cond:
 	// result: (Store {typ.Int}     (OffPtr <typ.IntPtr> [config.PtrSize] dst)     len     (Store {typ.BytePtr} dst ptr mem))
 	for {
+		_ = v.Args[2]
 		dst := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpStringMake {
 			break
 		}
+		_ = v_1.Args[1]
 		ptr := v_1.Args[0]
 		len := v_1.Args[1]
 		mem := v.Args[2]
@@ -397,11 +415,13 @@ func rewriteValuedec_OpStore_0(v *Value) bool {
 	// cond:
 	// result: (Store {typ.Int}     (OffPtr <typ.IntPtr> [2*config.PtrSize] dst)     cap     (Store {typ.Int}       (OffPtr <typ.IntPtr> [config.PtrSize] dst)       len       (Store {typ.BytePtr} dst ptr mem)))
 	for {
+		_ = v.Args[2]
 		dst := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpSliceMake {
 			break
 		}
+		_ = v_1.Args[2]
 		ptr := v_1.Args[0]
 		len := v_1.Args[1]
 		cap := v_1.Args[2]
@@ -433,11 +453,13 @@ func rewriteValuedec_OpStore_0(v *Value) bool {
 	// cond:
 	// result: (Store {typ.BytePtr}     (OffPtr <typ.BytePtrPtr> [config.PtrSize] dst)     data     (Store {typ.Uintptr} dst itab mem))
 	for {
+		_ = v.Args[2]
 		dst := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpIMake {
 			break
 		}
+		_ = v_1.Args[1]
 		itab := v_1.Args[0]
 		data := v_1.Args[1]
 		mem := v.Args[2]
@@ -467,6 +489,7 @@ func rewriteValuedec_OpStringLen_0(v *Value) bool {
 		if v_0.Op != OpStringMake {
 			break
 		}
+		_ = v_0.Args[1]
 		len := v_0.Args[1]
 		v.reset(OpCopy)
 		v.Type = len.Type
@@ -484,6 +507,7 @@ func rewriteValuedec_OpStringPtr_0(v *Value) bool {
 		if v_0.Op != OpStringMake {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		v.reset(OpCopy)
 		v.Type = ptr.Type
diff --git a/src/cmd/compile/internal/ssa/rewritedec64.go b/src/cmd/compile/internal/ssa/rewritedec64.go
index c0f54597f3..5666b1f21a 100644
--- a/src/cmd/compile/internal/ssa/rewritedec64.go
+++ b/src/cmd/compile/internal/ssa/rewritedec64.go
@@ -141,6 +141,7 @@ func rewriteValuedec64_OpAdd64_0(v *Value) bool {
 	// cond:
 	// result: (Int64Make 		(Add32withcarry <typ.Int32> 			(Int64Hi x) 			(Int64Hi y) 			(Select1 <types.TypeFlags> (Add32carry (Int64Lo x) (Int64Lo y)))) 		(Select0 <typ.UInt32> (Add32carry (Int64Lo x) (Int64Lo y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpInt64Make)
@@ -184,6 +185,7 @@ func rewriteValuedec64_OpAnd64_0(v *Value) bool {
 	// cond:
 	// result: (Int64Make 		(And32 <typ.UInt32> (Int64Hi x) (Int64Hi y)) 		(And32 <typ.UInt32> (Int64Lo x) (Int64Lo y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpInt64Make)
@@ -461,6 +463,7 @@ func rewriteValuedec64_OpEq64_0(v *Value) bool {
 	// cond:
 	// result: (AndB 		(Eq32 (Int64Hi x) (Int64Hi y)) 		(Eq32 (Int64Lo x) (Int64Lo y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpAndB)
@@ -492,6 +495,7 @@ func rewriteValuedec64_OpGeq64_0(v *Value) bool {
 	// cond:
 	// result: (OrB 		(Greater32 (Int64Hi x) (Int64Hi y)) 		(AndB 			(Eq32 (Int64Hi x) (Int64Hi y)) 			(Geq32U (Int64Lo x) (Int64Lo y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpOrB)
@@ -533,6 +537,7 @@ func rewriteValuedec64_OpGeq64U_0(v *Value) bool {
 	// cond:
 	// result: (OrB 		(Greater32U (Int64Hi x) (Int64Hi y)) 		(AndB 			(Eq32 (Int64Hi x) (Int64Hi y)) 			(Geq32U (Int64Lo x) (Int64Lo y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpOrB)
@@ -574,6 +579,7 @@ func rewriteValuedec64_OpGreater64_0(v *Value) bool {
 	// cond:
 	// result: (OrB 		(Greater32 (Int64Hi x) (Int64Hi y)) 		(AndB 			(Eq32 (Int64Hi x) (Int64Hi y)) 			(Greater32U (Int64Lo x) (Int64Lo y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpOrB)
@@ -615,6 +621,7 @@ func rewriteValuedec64_OpGreater64U_0(v *Value) bool {
 	// cond:
 	// result: (OrB 		(Greater32U (Int64Hi x) (Int64Hi y)) 		(AndB 			(Eq32 (Int64Hi x) (Int64Hi y)) 			(Greater32U (Int64Lo x) (Int64Lo y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpOrB)
@@ -656,6 +663,7 @@ func rewriteValuedec64_OpInt64Hi_0(v *Value) bool {
 		if v_0.Op != OpInt64Make {
 			break
 		}
+		_ = v_0.Args[1]
 		hi := v_0.Args[0]
 		v.reset(OpCopy)
 		v.Type = hi.Type
@@ -673,6 +681,7 @@ func rewriteValuedec64_OpInt64Lo_0(v *Value) bool {
 		if v_0.Op != OpInt64Make {
 			break
 		}
+		_ = v_0.Args[1]
 		lo := v_0.Args[1]
 		v.reset(OpCopy)
 		v.Type = lo.Type
@@ -690,6 +699,7 @@ func rewriteValuedec64_OpLeq64_0(v *Value) bool {
 	// cond:
 	// result: (OrB 		(Less32 (Int64Hi x) (Int64Hi y)) 		(AndB 			(Eq32 (Int64Hi x) (Int64Hi y)) 			(Leq32U (Int64Lo x) (Int64Lo y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpOrB)
@@ -731,6 +741,7 @@ func rewriteValuedec64_OpLeq64U_0(v *Value) bool {
 	// cond:
 	// result: (OrB 		(Less32U (Int64Hi x) (Int64Hi y)) 		(AndB 			(Eq32 (Int64Hi x) (Int64Hi y)) 			(Leq32U (Int64Lo x) (Int64Lo y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpOrB)
@@ -772,6 +783,7 @@ func rewriteValuedec64_OpLess64_0(v *Value) bool {
 	// cond:
 	// result: (OrB 		(Less32 (Int64Hi x) (Int64Hi y)) 		(AndB 			(Eq32 (Int64Hi x) (Int64Hi y)) 			(Less32U (Int64Lo x) (Int64Lo y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpOrB)
@@ -813,6 +825,7 @@ func rewriteValuedec64_OpLess64U_0(v *Value) bool {
 	// cond:
 	// result: (OrB 		(Less32U (Int64Hi x) (Int64Hi y)) 		(AndB 			(Eq32 (Int64Hi x) (Int64Hi y)) 			(Less32U (Int64Lo x) (Int64Lo y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpOrB)
@@ -857,6 +870,7 @@ func rewriteValuedec64_OpLoad_0(v *Value) bool {
 	// result: (Int64Make 		(Load <typ.Int32> (OffPtr <typ.Int32Ptr> [4] ptr) mem) 		(Load <typ.UInt32> ptr mem))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is64BitInt(t) && !config.BigEndian && t.IsSigned()) {
@@ -881,6 +895,7 @@ func rewriteValuedec64_OpLoad_0(v *Value) bool {
 	// result: (Int64Make 		(Load <typ.UInt32> (OffPtr <typ.UInt32Ptr> [4] ptr) mem) 		(Load <typ.UInt32> ptr mem))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is64BitInt(t) && !config.BigEndian && !t.IsSigned()) {
@@ -905,6 +920,7 @@ func rewriteValuedec64_OpLoad_0(v *Value) bool {
 	// result: (Int64Make 		(Load <typ.Int32> ptr mem) 		(Load <typ.UInt32> (OffPtr <typ.UInt32Ptr> [4] ptr) mem))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is64BitInt(t) && config.BigEndian && t.IsSigned()) {
@@ -929,6 +945,7 @@ func rewriteValuedec64_OpLoad_0(v *Value) bool {
 	// result: (Int64Make 		(Load <typ.UInt32> ptr mem) 		(Load <typ.UInt32> (OffPtr <typ.UInt32Ptr> [4] ptr) mem))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(is64BitInt(t) && config.BigEndian && !t.IsSigned()) {
@@ -959,10 +976,12 @@ func rewriteValuedec64_OpLsh16x64_0(v *Value) bool {
 	// cond: c != 0
 	// result: (Const32 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -979,11 +998,13 @@ func rewriteValuedec64_OpLsh16x64_0(v *Value) bool {
 	// cond:
 	// result: (Lsh16x32 x lo)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -1001,11 +1022,13 @@ func rewriteValuedec64_OpLsh16x64_0(v *Value) bool {
 	// cond: hi.Op != OpConst32
 	// result: (Lsh16x32 x (Or32 <typ.UInt32> (Zeromask hi) lo))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		hi := v_1.Args[0]
 		lo := v_1.Args[1]
 		if !(hi.Op != OpConst32) {
@@ -1032,10 +1055,12 @@ func rewriteValuedec64_OpLsh32x64_0(v *Value) bool {
 	// cond: c != 0
 	// result: (Const32 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -1052,11 +1077,13 @@ func rewriteValuedec64_OpLsh32x64_0(v *Value) bool {
 	// cond:
 	// result: (Lsh32x32 x lo)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -1074,11 +1101,13 @@ func rewriteValuedec64_OpLsh32x64_0(v *Value) bool {
 	// cond: hi.Op != OpConst32
 	// result: (Lsh32x32 x (Or32 <typ.UInt32> (Zeromask hi) lo))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		hi := v_1.Args[0]
 		lo := v_1.Args[1]
 		if !(hi.Op != OpConst32) {
@@ -1105,10 +1134,12 @@ func rewriteValuedec64_OpLsh64x16_0(v *Value) bool {
 	// cond:
 	// result: (Int64Make 		(Or32 <typ.UInt32> 			(Or32 <typ.UInt32> 				(Lsh32x16 <typ.UInt32> hi s) 				(Rsh32Ux16 <typ.UInt32> 					lo 					(Sub16 <typ.UInt16> (Const16 <typ.UInt16> [32]) s))) 			(Lsh32x16 <typ.UInt32> 				lo 				(Sub16 <typ.UInt16> s (Const16 <typ.UInt16> [32])))) 		(Lsh32x16 <typ.UInt32> lo s))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpInt64Make {
 			break
 		}
+		_ = v_0.Args[1]
 		hi := v_0.Args[0]
 		lo := v_0.Args[1]
 		s := v.Args[1]
@@ -1156,10 +1187,12 @@ func rewriteValuedec64_OpLsh64x32_0(v *Value) bool {
 	// cond:
 	// result: (Int64Make 		(Or32 <typ.UInt32> 			(Or32 <typ.UInt32> 				(Lsh32x32 <typ.UInt32> hi s) 				(Rsh32Ux32 <typ.UInt32> 					lo 					(Sub32 <typ.UInt32> (Const32 <typ.UInt32> [32]) s))) 			(Lsh32x32 <typ.UInt32> 				lo 				(Sub32 <typ.UInt32> s (Const32 <typ.UInt32> [32])))) 		(Lsh32x32 <typ.UInt32> lo s))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpInt64Make {
 			break
 		}
+		_ = v_0.Args[1]
 		hi := v_0.Args[0]
 		lo := v_0.Args[1]
 		s := v.Args[1]
@@ -1207,10 +1240,12 @@ func rewriteValuedec64_OpLsh64x64_0(v *Value) bool {
 	// cond: c != 0
 	// result: (Const64 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -1227,11 +1262,13 @@ func rewriteValuedec64_OpLsh64x64_0(v *Value) bool {
 	// cond:
 	// result: (Lsh64x32 x lo)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -1249,11 +1286,13 @@ func rewriteValuedec64_OpLsh64x64_0(v *Value) bool {
 	// cond: hi.Op != OpConst32
 	// result: (Lsh64x32 x (Or32 <typ.UInt32> (Zeromask hi) lo))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		hi := v_1.Args[0]
 		lo := v_1.Args[1]
 		if !(hi.Op != OpConst32) {
@@ -1280,10 +1319,12 @@ func rewriteValuedec64_OpLsh64x8_0(v *Value) bool {
 	// cond:
 	// result: (Int64Make 		(Or32 <typ.UInt32> 			(Or32 <typ.UInt32> 				(Lsh32x8 <typ.UInt32> hi s) 				(Rsh32Ux8 <typ.UInt32> 					lo 					(Sub8 <typ.UInt8> (Const8 <typ.UInt8> [32]) s))) 			(Lsh32x8 <typ.UInt32> 				lo 				(Sub8 <typ.UInt8> s (Const8 <typ.UInt8> [32])))) 		(Lsh32x8 <typ.UInt32> lo s))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpInt64Make {
 			break
 		}
+		_ = v_0.Args[1]
 		hi := v_0.Args[0]
 		lo := v_0.Args[1]
 		s := v.Args[1]
@@ -1331,10 +1372,12 @@ func rewriteValuedec64_OpLsh8x64_0(v *Value) bool {
 	// cond: c != 0
 	// result: (Const32 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -1351,11 +1394,13 @@ func rewriteValuedec64_OpLsh8x64_0(v *Value) bool {
 	// cond:
 	// result: (Lsh8x32 x lo)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -1373,11 +1418,13 @@ func rewriteValuedec64_OpLsh8x64_0(v *Value) bool {
 	// cond: hi.Op != OpConst32
 	// result: (Lsh8x32 x (Or32 <typ.UInt32> (Zeromask hi) lo))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		hi := v_1.Args[0]
 		lo := v_1.Args[1]
 		if !(hi.Op != OpConst32) {
@@ -1404,6 +1451,7 @@ func rewriteValuedec64_OpMul64_0(v *Value) bool {
 	// cond:
 	// result: (Int64Make 		(Add32 <typ.UInt32> 			(Mul32 <typ.UInt32> (Int64Lo x) (Int64Hi y)) 			(Add32 <typ.UInt32> 				(Mul32 <typ.UInt32> (Int64Hi x) (Int64Lo y)) 				(Select0 <typ.UInt32> (Mul32uhilo (Int64Lo x) (Int64Lo y))))) 		(Select1 <typ.UInt32> (Mul32uhilo (Int64Lo x) (Int64Lo y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpInt64Make)
@@ -1476,6 +1524,7 @@ func rewriteValuedec64_OpNeq64_0(v *Value) bool {
 	// cond:
 	// result: (OrB 		(Neq32 (Int64Hi x) (Int64Hi y)) 		(Neq32 (Int64Lo x) (Int64Lo y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpOrB)
@@ -1507,6 +1556,7 @@ func rewriteValuedec64_OpOr64_0(v *Value) bool {
 	// cond:
 	// result: (Int64Make 		(Or32 <typ.UInt32> (Int64Hi x) (Int64Hi y)) 		(Or32 <typ.UInt32> (Int64Lo x) (Int64Lo y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpInt64Make)
@@ -1538,10 +1588,12 @@ func rewriteValuedec64_OpRsh16Ux64_0(v *Value) bool {
 	// cond: c != 0
 	// result: (Const32 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -1558,11 +1610,13 @@ func rewriteValuedec64_OpRsh16Ux64_0(v *Value) bool {
 	// cond:
 	// result: (Rsh16Ux32 x lo)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -1580,11 +1634,13 @@ func rewriteValuedec64_OpRsh16Ux64_0(v *Value) bool {
 	// cond: hi.Op != OpConst32
 	// result: (Rsh16Ux32 x (Or32 <typ.UInt32> (Zeromask hi) lo))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		hi := v_1.Args[0]
 		lo := v_1.Args[1]
 		if !(hi.Op != OpConst32) {
@@ -1611,11 +1667,13 @@ func rewriteValuedec64_OpRsh16x64_0(v *Value) bool {
 	// cond: c != 0
 	// result: (Signmask (SignExt16to32 x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -1634,11 +1692,13 @@ func rewriteValuedec64_OpRsh16x64_0(v *Value) bool {
 	// cond:
 	// result: (Rsh16x32 x lo)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -1656,11 +1716,13 @@ func rewriteValuedec64_OpRsh16x64_0(v *Value) bool {
 	// cond: hi.Op != OpConst32
 	// result: (Rsh16x32 x (Or32 <typ.UInt32> (Zeromask hi) lo))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		hi := v_1.Args[0]
 		lo := v_1.Args[1]
 		if !(hi.Op != OpConst32) {
@@ -1687,10 +1749,12 @@ func rewriteValuedec64_OpRsh32Ux64_0(v *Value) bool {
 	// cond: c != 0
 	// result: (Const32 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -1707,11 +1771,13 @@ func rewriteValuedec64_OpRsh32Ux64_0(v *Value) bool {
 	// cond:
 	// result: (Rsh32Ux32 x lo)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -1729,11 +1795,13 @@ func rewriteValuedec64_OpRsh32Ux64_0(v *Value) bool {
 	// cond: hi.Op != OpConst32
 	// result: (Rsh32Ux32 x (Or32 <typ.UInt32> (Zeromask hi) lo))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		hi := v_1.Args[0]
 		lo := v_1.Args[1]
 		if !(hi.Op != OpConst32) {
@@ -1760,11 +1828,13 @@ func rewriteValuedec64_OpRsh32x64_0(v *Value) bool {
 	// cond: c != 0
 	// result: (Signmask x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -1781,11 +1851,13 @@ func rewriteValuedec64_OpRsh32x64_0(v *Value) bool {
 	// cond:
 	// result: (Rsh32x32 x lo)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -1803,11 +1875,13 @@ func rewriteValuedec64_OpRsh32x64_0(v *Value) bool {
 	// cond: hi.Op != OpConst32
 	// result: (Rsh32x32 x (Or32 <typ.UInt32> (Zeromask hi) lo))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		hi := v_1.Args[0]
 		lo := v_1.Args[1]
 		if !(hi.Op != OpConst32) {
@@ -1834,10 +1908,12 @@ func rewriteValuedec64_OpRsh64Ux16_0(v *Value) bool {
 	// cond:
 	// result: (Int64Make 		(Rsh32Ux16 <typ.UInt32> hi s) 		(Or32 <typ.UInt32> 			(Or32 <typ.UInt32> 				(Rsh32Ux16 <typ.UInt32> lo s) 				(Lsh32x16 <typ.UInt32> 					hi 					(Sub16 <typ.UInt16> (Const16 <typ.UInt16> [32]) s))) 			(Rsh32Ux16 <typ.UInt32> 				hi 				(Sub16 <typ.UInt16> s (Const16 <typ.UInt16> [32])))))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpInt64Make {
 			break
 		}
+		_ = v_0.Args[1]
 		hi := v_0.Args[0]
 		lo := v_0.Args[1]
 		s := v.Args[1]
@@ -1885,10 +1961,12 @@ func rewriteValuedec64_OpRsh64Ux32_0(v *Value) bool {
 	// cond:
 	// result: (Int64Make 		(Rsh32Ux32 <typ.UInt32> hi s) 		(Or32 <typ.UInt32> 			(Or32 <typ.UInt32> 				(Rsh32Ux32 <typ.UInt32> lo s) 				(Lsh32x32 <typ.UInt32> 					hi 					(Sub32 <typ.UInt32> (Const32 <typ.UInt32> [32]) s))) 			(Rsh32Ux32 <typ.UInt32> 				hi 				(Sub32 <typ.UInt32> s (Const32 <typ.UInt32> [32])))))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpInt64Make {
 			break
 		}
+		_ = v_0.Args[1]
 		hi := v_0.Args[0]
 		lo := v_0.Args[1]
 		s := v.Args[1]
@@ -1936,10 +2014,12 @@ func rewriteValuedec64_OpRsh64Ux64_0(v *Value) bool {
 	// cond: c != 0
 	// result: (Const64 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -1956,11 +2036,13 @@ func rewriteValuedec64_OpRsh64Ux64_0(v *Value) bool {
 	// cond:
 	// result: (Rsh64Ux32 x lo)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -1978,11 +2060,13 @@ func rewriteValuedec64_OpRsh64Ux64_0(v *Value) bool {
 	// cond: hi.Op != OpConst32
 	// result: (Rsh64Ux32 x (Or32 <typ.UInt32> (Zeromask hi) lo))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		hi := v_1.Args[0]
 		lo := v_1.Args[1]
 		if !(hi.Op != OpConst32) {
@@ -2009,10 +2093,12 @@ func rewriteValuedec64_OpRsh64Ux8_0(v *Value) bool {
 	// cond:
 	// result: (Int64Make 		(Rsh32Ux8 <typ.UInt32> hi s) 		(Or32 <typ.UInt32> 			(Or32 <typ.UInt32> 				(Rsh32Ux8 <typ.UInt32> lo s) 				(Lsh32x8 <typ.UInt32> 					hi 					(Sub8 <typ.UInt8> (Const8 <typ.UInt8> [32]) s))) 			(Rsh32Ux8 <typ.UInt32> 				hi 				(Sub8 <typ.UInt8> s (Const8 <typ.UInt8> [32])))))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpInt64Make {
 			break
 		}
+		_ = v_0.Args[1]
 		hi := v_0.Args[0]
 		lo := v_0.Args[1]
 		s := v.Args[1]
@@ -2060,10 +2146,12 @@ func rewriteValuedec64_OpRsh64x16_0(v *Value) bool {
 	// cond:
 	// result: (Int64Make 		(Rsh32x16 <typ.UInt32> hi s) 		(Or32 <typ.UInt32> 			(Or32 <typ.UInt32> 				(Rsh32Ux16 <typ.UInt32> lo s) 				(Lsh32x16 <typ.UInt32> 					hi 					(Sub16 <typ.UInt16> (Const16 <typ.UInt16> [32]) s))) 			(And32 <typ.UInt32> 				(Rsh32x16 <typ.UInt32> 					hi 					(Sub16 <typ.UInt16> s (Const16 <typ.UInt16> [32]))) 				(Zeromask 					(ZeroExt16to32 						(Rsh16Ux32 <typ.UInt16> s (Const32 <typ.UInt32> [5])))))))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpInt64Make {
 			break
 		}
+		_ = v_0.Args[1]
 		hi := v_0.Args[0]
 		lo := v_0.Args[1]
 		s := v.Args[1]
@@ -2123,10 +2211,12 @@ func rewriteValuedec64_OpRsh64x32_0(v *Value) bool {
 	// cond:
 	// result: (Int64Make 		(Rsh32x32 <typ.UInt32> hi s) 		(Or32 <typ.UInt32> 			(Or32 <typ.UInt32> 				(Rsh32Ux32 <typ.UInt32> lo s) 				(Lsh32x32 <typ.UInt32> 					hi 					(Sub32 <typ.UInt32> (Const32 <typ.UInt32> [32]) s))) 			(And32 <typ.UInt32> 				(Rsh32x32 <typ.UInt32> 					hi 					(Sub32 <typ.UInt32> s (Const32 <typ.UInt32> [32]))) 				(Zeromask 					(Rsh32Ux32 <typ.UInt32> s (Const32 <typ.UInt32> [5]))))))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpInt64Make {
 			break
 		}
+		_ = v_0.Args[1]
 		hi := v_0.Args[0]
 		lo := v_0.Args[1]
 		s := v.Args[1]
@@ -2184,11 +2274,13 @@ func rewriteValuedec64_OpRsh64x64_0(v *Value) bool {
 	// cond: c != 0
 	// result: (Int64Make (Signmask (Int64Hi x)) (Signmask (Int64Hi x)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -2214,11 +2306,13 @@ func rewriteValuedec64_OpRsh64x64_0(v *Value) bool {
 	// cond:
 	// result: (Rsh64x32 x lo)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -2236,11 +2330,13 @@ func rewriteValuedec64_OpRsh64x64_0(v *Value) bool {
 	// cond: hi.Op != OpConst32
 	// result: (Rsh64x32 x (Or32 <typ.UInt32> (Zeromask hi) lo))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		hi := v_1.Args[0]
 		lo := v_1.Args[1]
 		if !(hi.Op != OpConst32) {
@@ -2267,10 +2363,12 @@ func rewriteValuedec64_OpRsh64x8_0(v *Value) bool {
 	// cond:
 	// result: (Int64Make 		(Rsh32x8 <typ.UInt32> hi s) 		(Or32 <typ.UInt32> 			(Or32 <typ.UInt32> 				(Rsh32Ux8 <typ.UInt32> lo s) 				(Lsh32x8 <typ.UInt32> 					hi 					(Sub8 <typ.UInt8> (Const8 <typ.UInt8> [32]) s))) 			(And32 <typ.UInt32> 				(Rsh32x8 <typ.UInt32> 					hi 					(Sub8 <typ.UInt8> s (Const8 <typ.UInt8> [32]))) 				(Zeromask 					(ZeroExt8to32 						(Rsh8Ux32 <typ.UInt8> s (Const32 <typ.UInt32> [5])))))))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpInt64Make {
 			break
 		}
+		_ = v_0.Args[1]
 		hi := v_0.Args[0]
 		lo := v_0.Args[1]
 		s := v.Args[1]
@@ -2330,10 +2428,12 @@ func rewriteValuedec64_OpRsh8Ux64_0(v *Value) bool {
 	// cond: c != 0
 	// result: (Const32 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -2350,11 +2450,13 @@ func rewriteValuedec64_OpRsh8Ux64_0(v *Value) bool {
 	// cond:
 	// result: (Rsh8Ux32 x lo)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -2372,11 +2474,13 @@ func rewriteValuedec64_OpRsh8Ux64_0(v *Value) bool {
 	// cond: hi.Op != OpConst32
 	// result: (Rsh8Ux32 x (Or32 <typ.UInt32> (Zeromask hi) lo))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		hi := v_1.Args[0]
 		lo := v_1.Args[1]
 		if !(hi.Op != OpConst32) {
@@ -2403,11 +2507,13 @@ func rewriteValuedec64_OpRsh8x64_0(v *Value) bool {
 	// cond: c != 0
 	// result: (Signmask (SignExt8to32 x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -2426,11 +2532,13 @@ func rewriteValuedec64_OpRsh8x64_0(v *Value) bool {
 	// cond:
 	// result: (Rsh8x32 x lo)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -2448,11 +2556,13 @@ func rewriteValuedec64_OpRsh8x64_0(v *Value) bool {
 	// cond: hi.Op != OpConst32
 	// result: (Rsh8x32 x (Or32 <typ.UInt32> (Zeromask hi) lo))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		hi := v_1.Args[0]
 		lo := v_1.Args[1]
 		if !(hi.Op != OpConst32) {
@@ -2532,11 +2642,13 @@ func rewriteValuedec64_OpStore_0(v *Value) bool {
 	// result: (Store {hi.Type} 		(OffPtr <hi.Type.PtrTo()> [4] dst) 		hi 		(Store {lo.Type} dst lo mem))
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		hi := v_1.Args[0]
 		lo := v_1.Args[1]
 		mem := v.Args[2]
@@ -2563,11 +2675,13 @@ func rewriteValuedec64_OpStore_0(v *Value) bool {
 	// result: (Store {lo.Type} 		(OffPtr <lo.Type.PtrTo()> [4] dst) 		lo 		(Store {hi.Type} dst hi mem))
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpInt64Make {
 			break
 		}
+		_ = v_1.Args[1]
 		hi := v_1.Args[0]
 		lo := v_1.Args[1]
 		mem := v.Args[2]
@@ -2600,6 +2714,7 @@ func rewriteValuedec64_OpSub64_0(v *Value) bool {
 	// cond:
 	// result: (Int64Make 		(Sub32withcarry <typ.Int32> 			(Int64Hi x) 			(Int64Hi y) 			(Select1 <types.TypeFlags> (Sub32carry (Int64Lo x) (Int64Lo y)))) 		(Select0 <typ.UInt32> (Sub32carry (Int64Lo x) (Int64Lo y))))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpInt64Make)
@@ -2643,6 +2758,7 @@ func rewriteValuedec64_OpTrunc64to16_0(v *Value) bool {
 		if v_0.Op != OpInt64Make {
 			break
 		}
+		_ = v_0.Args[1]
 		lo := v_0.Args[1]
 		v.reset(OpTrunc32to16)
 		v.AddArg(lo)
@@ -2659,6 +2775,7 @@ func rewriteValuedec64_OpTrunc64to32_0(v *Value) bool {
 		if v_0.Op != OpInt64Make {
 			break
 		}
+		_ = v_0.Args[1]
 		lo := v_0.Args[1]
 		v.reset(OpCopy)
 		v.Type = lo.Type
@@ -2676,6 +2793,7 @@ func rewriteValuedec64_OpTrunc64to8_0(v *Value) bool {
 		if v_0.Op != OpInt64Make {
 			break
 		}
+		_ = v_0.Args[1]
 		lo := v_0.Args[1]
 		v.reset(OpTrunc32to8)
 		v.AddArg(lo)
@@ -2692,6 +2810,7 @@ func rewriteValuedec64_OpXor64_0(v *Value) bool {
 	// cond:
 	// result: (Int64Make 		(Xor32 <typ.UInt32> (Int64Hi x) (Int64Hi y)) 		(Xor32 <typ.UInt32> (Int64Lo x) (Int64Lo y)))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpInt64Make)
diff --git a/src/cmd/compile/internal/ssa/rewritegeneric.go b/src/cmd/compile/internal/ssa/rewritegeneric.go
index 9f67d00404..95b2c62f07 100644
--- a/src/cmd/compile/internal/ssa/rewritegeneric.go
+++ b/src/cmd/compile/internal/ssa/rewritegeneric.go
@@ -433,6 +433,7 @@ func rewriteValuegeneric_OpAdd16_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [int64(int16(c+d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -451,6 +452,7 @@ func rewriteValuegeneric_OpAdd16_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [int64(int16(c+d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -469,6 +471,7 @@ func rewriteValuegeneric_OpAdd16_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -486,6 +489,7 @@ func rewriteValuegeneric_OpAdd16_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -503,6 +507,7 @@ func rewriteValuegeneric_OpAdd16_0(v *Value) bool {
 	// cond:
 	// result: (Neg16 x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -523,6 +528,7 @@ func rewriteValuegeneric_OpAdd16_0(v *Value) bool {
 	// cond:
 	// result: (Neg16 x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpCom16 {
 			break
@@ -543,10 +549,12 @@ func rewriteValuegeneric_OpAdd16_0(v *Value) bool {
 	// cond: (z.Op != OpConst16 && x.Op != OpConst16)
 	// result: (Add16 i (Add16 <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd16 {
 			break
 		}
+		_ = v_0.Args[1]
 		i := v_0.Args[0]
 		if i.Op != OpConst16 {
 			break
@@ -569,10 +577,12 @@ func rewriteValuegeneric_OpAdd16_0(v *Value) bool {
 	// cond: (z.Op != OpConst16 && x.Op != OpConst16)
 	// result: (Add16 i (Add16 <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd16 {
 			break
 		}
+		_ = v_0.Args[1]
 		z := v_0.Args[0]
 		i := v_0.Args[1]
 		if i.Op != OpConst16 {
@@ -595,11 +605,13 @@ func rewriteValuegeneric_OpAdd16_0(v *Value) bool {
 	// cond: (z.Op != OpConst16 && x.Op != OpConst16)
 	// result: (Add16 i (Add16 <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAdd16 {
 			break
 		}
+		_ = v_1.Args[1]
 		i := v_1.Args[0]
 		if i.Op != OpConst16 {
 			break
@@ -621,11 +633,13 @@ func rewriteValuegeneric_OpAdd16_0(v *Value) bool {
 	// cond: (z.Op != OpConst16 && x.Op != OpConst16)
 	// result: (Add16 i (Add16 <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAdd16 {
 			break
 		}
+		_ = v_1.Args[1]
 		z := v_1.Args[0]
 		i := v_1.Args[1]
 		if i.Op != OpConst16 {
@@ -652,10 +666,12 @@ func rewriteValuegeneric_OpAdd16_10(v *Value) bool {
 	// cond: (z.Op != OpConst16 && x.Op != OpConst16)
 	// result: (Add16 i (Sub16 <t> x z))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpSub16 {
 			break
 		}
+		_ = v_0.Args[1]
 		i := v_0.Args[0]
 		if i.Op != OpConst16 {
 			break
@@ -678,11 +694,13 @@ func rewriteValuegeneric_OpAdd16_10(v *Value) bool {
 	// cond: (z.Op != OpConst16 && x.Op != OpConst16)
 	// result: (Add16 i (Sub16 <t> x z))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpSub16 {
 			break
 		}
+		_ = v_1.Args[1]
 		i := v_1.Args[0]
 		if i.Op != OpConst16 {
 			break
@@ -704,11 +722,13 @@ func rewriteValuegeneric_OpAdd16_10(v *Value) bool {
 	// cond: (z.Op != OpConst16 && x.Op != OpConst16)
 	// result: (Add16 i (Sub16 <t> x z))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpSub16 {
 			break
 		}
+		_ = v_1.Args[1]
 		i := v_1.Args[0]
 		if i.Op != OpConst16 {
 			break
@@ -730,10 +750,12 @@ func rewriteValuegeneric_OpAdd16_10(v *Value) bool {
 	// cond: (z.Op != OpConst16 && x.Op != OpConst16)
 	// result: (Add16 i (Sub16 <t> x z))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpSub16 {
 			break
 		}
+		_ = v_0.Args[1]
 		i := v_0.Args[0]
 		if i.Op != OpConst16 {
 			break
@@ -756,10 +778,12 @@ func rewriteValuegeneric_OpAdd16_10(v *Value) bool {
 	// cond: (z.Op != OpConst16 && x.Op != OpConst16)
 	// result: (Sub16 (Add16 <t> x z) i)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpSub16 {
 			break
 		}
+		_ = v_0.Args[1]
 		z := v_0.Args[0]
 		i := v_0.Args[1]
 		if i.Op != OpConst16 {
@@ -782,11 +806,13 @@ func rewriteValuegeneric_OpAdd16_10(v *Value) bool {
 	// cond: (z.Op != OpConst16 && x.Op != OpConst16)
 	// result: (Sub16 (Add16 <t> x z) i)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpSub16 {
 			break
 		}
+		_ = v_1.Args[1]
 		z := v_1.Args[0]
 		i := v_1.Args[1]
 		if i.Op != OpConst16 {
@@ -808,11 +834,13 @@ func rewriteValuegeneric_OpAdd16_10(v *Value) bool {
 	// cond: (z.Op != OpConst16 && x.Op != OpConst16)
 	// result: (Sub16 (Add16 <t> x z) i)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpSub16 {
 			break
 		}
+		_ = v_1.Args[1]
 		z := v_1.Args[0]
 		i := v_1.Args[1]
 		if i.Op != OpConst16 {
@@ -834,10 +862,12 @@ func rewriteValuegeneric_OpAdd16_10(v *Value) bool {
 	// cond: (z.Op != OpConst16 && x.Op != OpConst16)
 	// result: (Sub16 (Add16 <t> x z) i)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpSub16 {
 			break
 		}
+		_ = v_0.Args[1]
 		z := v_0.Args[0]
 		i := v_0.Args[1]
 		if i.Op != OpConst16 {
@@ -860,6 +890,7 @@ func rewriteValuegeneric_OpAdd16_10(v *Value) bool {
 	// cond:
 	// result: (Add16 (Const16 <t> [int64(int16(c+d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -870,6 +901,7 @@ func rewriteValuegeneric_OpAdd16_10(v *Value) bool {
 		if v_1.Op != OpAdd16 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst16 {
 			break
@@ -890,6 +922,7 @@ func rewriteValuegeneric_OpAdd16_10(v *Value) bool {
 	// cond:
 	// result: (Add16 (Const16 <t> [int64(int16(c+d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -900,6 +933,7 @@ func rewriteValuegeneric_OpAdd16_10(v *Value) bool {
 		if v_1.Op != OpAdd16 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst16 {
@@ -925,10 +959,12 @@ func rewriteValuegeneric_OpAdd16_20(v *Value) bool {
 	// cond:
 	// result: (Add16 (Const16 <t> [int64(int16(c+d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd16 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst16 {
 			break
@@ -955,10 +991,12 @@ func rewriteValuegeneric_OpAdd16_20(v *Value) bool {
 	// cond:
 	// result: (Add16 (Const16 <t> [int64(int16(c+d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd16 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst16 {
@@ -985,6 +1023,7 @@ func rewriteValuegeneric_OpAdd16_20(v *Value) bool {
 	// cond:
 	// result: (Sub16 (Const16 <t> [int64(int16(c+d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -995,6 +1034,7 @@ func rewriteValuegeneric_OpAdd16_20(v *Value) bool {
 		if v_1.Op != OpSub16 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst16 {
 			break
@@ -1015,10 +1055,12 @@ func rewriteValuegeneric_OpAdd16_20(v *Value) bool {
 	// cond:
 	// result: (Sub16 (Const16 <t> [int64(int16(c+d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpSub16 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst16 {
 			break
@@ -1045,6 +1087,7 @@ func rewriteValuegeneric_OpAdd16_20(v *Value) bool {
 	// cond:
 	// result: (Add16 (Const16 <t> [int64(int16(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -1055,6 +1098,7 @@ func rewriteValuegeneric_OpAdd16_20(v *Value) bool {
 		if v_1.Op != OpSub16 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst16 {
@@ -1075,10 +1119,12 @@ func rewriteValuegeneric_OpAdd16_20(v *Value) bool {
 	// cond:
 	// result: (Add16 (Const16 <t> [int64(int16(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpSub16 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst16 {
@@ -1110,6 +1156,7 @@ func rewriteValuegeneric_OpAdd32_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [int64(int32(c+d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -1128,6 +1175,7 @@ func rewriteValuegeneric_OpAdd32_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [int64(int32(c+d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -1146,6 +1194,7 @@ func rewriteValuegeneric_OpAdd32_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -1163,6 +1212,7 @@ func rewriteValuegeneric_OpAdd32_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -1180,6 +1230,7 @@ func rewriteValuegeneric_OpAdd32_0(v *Value) bool {
 	// cond:
 	// result: (Neg32 x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -1200,6 +1251,7 @@ func rewriteValuegeneric_OpAdd32_0(v *Value) bool {
 	// cond:
 	// result: (Neg32 x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpCom32 {
 			break
@@ -1220,10 +1272,12 @@ func rewriteValuegeneric_OpAdd32_0(v *Value) bool {
 	// cond: (z.Op != OpConst32 && x.Op != OpConst32)
 	// result: (Add32 i (Add32 <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd32 {
 			break
 		}
+		_ = v_0.Args[1]
 		i := v_0.Args[0]
 		if i.Op != OpConst32 {
 			break
@@ -1246,10 +1300,12 @@ func rewriteValuegeneric_OpAdd32_0(v *Value) bool {
 	// cond: (z.Op != OpConst32 && x.Op != OpConst32)
 	// result: (Add32 i (Add32 <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd32 {
 			break
 		}
+		_ = v_0.Args[1]
 		z := v_0.Args[0]
 		i := v_0.Args[1]
 		if i.Op != OpConst32 {
@@ -1272,11 +1328,13 @@ func rewriteValuegeneric_OpAdd32_0(v *Value) bool {
 	// cond: (z.Op != OpConst32 && x.Op != OpConst32)
 	// result: (Add32 i (Add32 <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAdd32 {
 			break
 		}
+		_ = v_1.Args[1]
 		i := v_1.Args[0]
 		if i.Op != OpConst32 {
 			break
@@ -1298,11 +1356,13 @@ func rewriteValuegeneric_OpAdd32_0(v *Value) bool {
 	// cond: (z.Op != OpConst32 && x.Op != OpConst32)
 	// result: (Add32 i (Add32 <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAdd32 {
 			break
 		}
+		_ = v_1.Args[1]
 		z := v_1.Args[0]
 		i := v_1.Args[1]
 		if i.Op != OpConst32 {
@@ -1329,10 +1389,12 @@ func rewriteValuegeneric_OpAdd32_10(v *Value) bool {
 	// cond: (z.Op != OpConst32 && x.Op != OpConst32)
 	// result: (Add32 i (Sub32 <t> x z))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpSub32 {
 			break
 		}
+		_ = v_0.Args[1]
 		i := v_0.Args[0]
 		if i.Op != OpConst32 {
 			break
@@ -1355,11 +1417,13 @@ func rewriteValuegeneric_OpAdd32_10(v *Value) bool {
 	// cond: (z.Op != OpConst32 && x.Op != OpConst32)
 	// result: (Add32 i (Sub32 <t> x z))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpSub32 {
 			break
 		}
+		_ = v_1.Args[1]
 		i := v_1.Args[0]
 		if i.Op != OpConst32 {
 			break
@@ -1381,11 +1445,13 @@ func rewriteValuegeneric_OpAdd32_10(v *Value) bool {
 	// cond: (z.Op != OpConst32 && x.Op != OpConst32)
 	// result: (Add32 i (Sub32 <t> x z))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpSub32 {
 			break
 		}
+		_ = v_1.Args[1]
 		i := v_1.Args[0]
 		if i.Op != OpConst32 {
 			break
@@ -1407,10 +1473,12 @@ func rewriteValuegeneric_OpAdd32_10(v *Value) bool {
 	// cond: (z.Op != OpConst32 && x.Op != OpConst32)
 	// result: (Add32 i (Sub32 <t> x z))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpSub32 {
 			break
 		}
+		_ = v_0.Args[1]
 		i := v_0.Args[0]
 		if i.Op != OpConst32 {
 			break
@@ -1433,10 +1501,12 @@ func rewriteValuegeneric_OpAdd32_10(v *Value) bool {
 	// cond: (z.Op != OpConst32 && x.Op != OpConst32)
 	// result: (Sub32 (Add32 <t> x z) i)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpSub32 {
 			break
 		}
+		_ = v_0.Args[1]
 		z := v_0.Args[0]
 		i := v_0.Args[1]
 		if i.Op != OpConst32 {
@@ -1459,11 +1529,13 @@ func rewriteValuegeneric_OpAdd32_10(v *Value) bool {
 	// cond: (z.Op != OpConst32 && x.Op != OpConst32)
 	// result: (Sub32 (Add32 <t> x z) i)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpSub32 {
 			break
 		}
+		_ = v_1.Args[1]
 		z := v_1.Args[0]
 		i := v_1.Args[1]
 		if i.Op != OpConst32 {
@@ -1485,11 +1557,13 @@ func rewriteValuegeneric_OpAdd32_10(v *Value) bool {
 	// cond: (z.Op != OpConst32 && x.Op != OpConst32)
 	// result: (Sub32 (Add32 <t> x z) i)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpSub32 {
 			break
 		}
+		_ = v_1.Args[1]
 		z := v_1.Args[0]
 		i := v_1.Args[1]
 		if i.Op != OpConst32 {
@@ -1511,10 +1585,12 @@ func rewriteValuegeneric_OpAdd32_10(v *Value) bool {
 	// cond: (z.Op != OpConst32 && x.Op != OpConst32)
 	// result: (Sub32 (Add32 <t> x z) i)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpSub32 {
 			break
 		}
+		_ = v_0.Args[1]
 		z := v_0.Args[0]
 		i := v_0.Args[1]
 		if i.Op != OpConst32 {
@@ -1537,6 +1613,7 @@ func rewriteValuegeneric_OpAdd32_10(v *Value) bool {
 	// cond:
 	// result: (Add32 (Const32 <t> [int64(int32(c+d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -1547,6 +1624,7 @@ func rewriteValuegeneric_OpAdd32_10(v *Value) bool {
 		if v_1.Op != OpAdd32 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -1567,6 +1645,7 @@ func rewriteValuegeneric_OpAdd32_10(v *Value) bool {
 	// cond:
 	// result: (Add32 (Const32 <t> [int64(int32(c+d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -1577,6 +1656,7 @@ func rewriteValuegeneric_OpAdd32_10(v *Value) bool {
 		if v_1.Op != OpAdd32 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst32 {
@@ -1602,10 +1682,12 @@ func rewriteValuegeneric_OpAdd32_20(v *Value) bool {
 	// cond:
 	// result: (Add32 (Const32 <t> [int64(int32(c+d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd32 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst32 {
 			break
@@ -1632,10 +1714,12 @@ func rewriteValuegeneric_OpAdd32_20(v *Value) bool {
 	// cond:
 	// result: (Add32 (Const32 <t> [int64(int32(c+d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd32 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst32 {
@@ -1662,6 +1746,7 @@ func rewriteValuegeneric_OpAdd32_20(v *Value) bool {
 	// cond:
 	// result: (Sub32 (Const32 <t> [int64(int32(c+d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -1672,6 +1757,7 @@ func rewriteValuegeneric_OpAdd32_20(v *Value) bool {
 		if v_1.Op != OpSub32 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -1692,10 +1778,12 @@ func rewriteValuegeneric_OpAdd32_20(v *Value) bool {
 	// cond:
 	// result: (Sub32 (Const32 <t> [int64(int32(c+d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpSub32 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst32 {
 			break
@@ -1722,6 +1810,7 @@ func rewriteValuegeneric_OpAdd32_20(v *Value) bool {
 	// cond:
 	// result: (Add32 (Const32 <t> [int64(int32(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -1732,6 +1821,7 @@ func rewriteValuegeneric_OpAdd32_20(v *Value) bool {
 		if v_1.Op != OpSub32 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst32 {
@@ -1752,10 +1842,12 @@ func rewriteValuegeneric_OpAdd32_20(v *Value) bool {
 	// cond:
 	// result: (Add32 (Const32 <t> [int64(int32(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpSub32 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst32 {
@@ -1785,6 +1877,7 @@ func rewriteValuegeneric_OpAdd32F_0(v *Value) bool {
 	// cond:
 	// result: (Const32F [f2i(float64(i2f32(c) + i2f32(d)))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32F {
 			break
@@ -1803,6 +1896,7 @@ func rewriteValuegeneric_OpAdd32F_0(v *Value) bool {
 	// cond:
 	// result: (Const32F [f2i(float64(i2f32(c) + i2f32(d)))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32F {
 			break
@@ -1821,6 +1915,7 @@ func rewriteValuegeneric_OpAdd32F_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32F {
@@ -1838,6 +1933,7 @@ func rewriteValuegeneric_OpAdd32F_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32F {
 			break
@@ -1860,6 +1956,7 @@ func rewriteValuegeneric_OpAdd64_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [c+d])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -1878,6 +1975,7 @@ func rewriteValuegeneric_OpAdd64_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [c+d])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -1896,6 +1994,7 @@ func rewriteValuegeneric_OpAdd64_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -1913,6 +2012,7 @@ func rewriteValuegeneric_OpAdd64_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -1930,6 +2030,7 @@ func rewriteValuegeneric_OpAdd64_0(v *Value) bool {
 	// cond:
 	// result: (Neg64 x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -1950,6 +2051,7 @@ func rewriteValuegeneric_OpAdd64_0(v *Value) bool {
 	// cond:
 	// result: (Neg64 x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpCom64 {
 			break
@@ -1970,10 +2072,12 @@ func rewriteValuegeneric_OpAdd64_0(v *Value) bool {
 	// cond: (z.Op != OpConst64 && x.Op != OpConst64)
 	// result: (Add64 i (Add64 <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		i := v_0.Args[0]
 		if i.Op != OpConst64 {
 			break
@@ -1996,10 +2100,12 @@ func rewriteValuegeneric_OpAdd64_0(v *Value) bool {
 	// cond: (z.Op != OpConst64 && x.Op != OpConst64)
 	// result: (Add64 i (Add64 <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		z := v_0.Args[0]
 		i := v_0.Args[1]
 		if i.Op != OpConst64 {
@@ -2022,11 +2128,13 @@ func rewriteValuegeneric_OpAdd64_0(v *Value) bool {
 	// cond: (z.Op != OpConst64 && x.Op != OpConst64)
 	// result: (Add64 i (Add64 <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAdd64 {
 			break
 		}
+		_ = v_1.Args[1]
 		i := v_1.Args[0]
 		if i.Op != OpConst64 {
 			break
@@ -2048,11 +2156,13 @@ func rewriteValuegeneric_OpAdd64_0(v *Value) bool {
 	// cond: (z.Op != OpConst64 && x.Op != OpConst64)
 	// result: (Add64 i (Add64 <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAdd64 {
 			break
 		}
+		_ = v_1.Args[1]
 		z := v_1.Args[0]
 		i := v_1.Args[1]
 		if i.Op != OpConst64 {
@@ -2079,10 +2189,12 @@ func rewriteValuegeneric_OpAdd64_10(v *Value) bool {
 	// cond: (z.Op != OpConst64 && x.Op != OpConst64)
 	// result: (Add64 i (Sub64 <t> x z))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpSub64 {
 			break
 		}
+		_ = v_0.Args[1]
 		i := v_0.Args[0]
 		if i.Op != OpConst64 {
 			break
@@ -2105,11 +2217,13 @@ func rewriteValuegeneric_OpAdd64_10(v *Value) bool {
 	// cond: (z.Op != OpConst64 && x.Op != OpConst64)
 	// result: (Add64 i (Sub64 <t> x z))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpSub64 {
 			break
 		}
+		_ = v_1.Args[1]
 		i := v_1.Args[0]
 		if i.Op != OpConst64 {
 			break
@@ -2131,11 +2245,13 @@ func rewriteValuegeneric_OpAdd64_10(v *Value) bool {
 	// cond: (z.Op != OpConst64 && x.Op != OpConst64)
 	// result: (Add64 i (Sub64 <t> x z))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpSub64 {
 			break
 		}
+		_ = v_1.Args[1]
 		i := v_1.Args[0]
 		if i.Op != OpConst64 {
 			break
@@ -2157,10 +2273,12 @@ func rewriteValuegeneric_OpAdd64_10(v *Value) bool {
 	// cond: (z.Op != OpConst64 && x.Op != OpConst64)
 	// result: (Add64 i (Sub64 <t> x z))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpSub64 {
 			break
 		}
+		_ = v_0.Args[1]
 		i := v_0.Args[0]
 		if i.Op != OpConst64 {
 			break
@@ -2183,10 +2301,12 @@ func rewriteValuegeneric_OpAdd64_10(v *Value) bool {
 	// cond: (z.Op != OpConst64 && x.Op != OpConst64)
 	// result: (Sub64 (Add64 <t> x z) i)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpSub64 {
 			break
 		}
+		_ = v_0.Args[1]
 		z := v_0.Args[0]
 		i := v_0.Args[1]
 		if i.Op != OpConst64 {
@@ -2209,11 +2329,13 @@ func rewriteValuegeneric_OpAdd64_10(v *Value) bool {
 	// cond: (z.Op != OpConst64 && x.Op != OpConst64)
 	// result: (Sub64 (Add64 <t> x z) i)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpSub64 {
 			break
 		}
+		_ = v_1.Args[1]
 		z := v_1.Args[0]
 		i := v_1.Args[1]
 		if i.Op != OpConst64 {
@@ -2235,11 +2357,13 @@ func rewriteValuegeneric_OpAdd64_10(v *Value) bool {
 	// cond: (z.Op != OpConst64 && x.Op != OpConst64)
 	// result: (Sub64 (Add64 <t> x z) i)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpSub64 {
 			break
 		}
+		_ = v_1.Args[1]
 		z := v_1.Args[0]
 		i := v_1.Args[1]
 		if i.Op != OpConst64 {
@@ -2261,10 +2385,12 @@ func rewriteValuegeneric_OpAdd64_10(v *Value) bool {
 	// cond: (z.Op != OpConst64 && x.Op != OpConst64)
 	// result: (Sub64 (Add64 <t> x z) i)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpSub64 {
 			break
 		}
+		_ = v_0.Args[1]
 		z := v_0.Args[0]
 		i := v_0.Args[1]
 		if i.Op != OpConst64 {
@@ -2287,6 +2413,7 @@ func rewriteValuegeneric_OpAdd64_10(v *Value) bool {
 	// cond:
 	// result: (Add64 (Const64 <t> [c+d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -2297,6 +2424,7 @@ func rewriteValuegeneric_OpAdd64_10(v *Value) bool {
 		if v_1.Op != OpAdd64 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst64 {
 			break
@@ -2317,6 +2445,7 @@ func rewriteValuegeneric_OpAdd64_10(v *Value) bool {
 	// cond:
 	// result: (Add64 (Const64 <t> [c+d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -2327,6 +2456,7 @@ func rewriteValuegeneric_OpAdd64_10(v *Value) bool {
 		if v_1.Op != OpAdd64 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst64 {
@@ -2352,10 +2482,12 @@ func rewriteValuegeneric_OpAdd64_20(v *Value) bool {
 	// cond:
 	// result: (Add64 (Const64 <t> [c+d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst64 {
 			break
@@ -2382,10 +2514,12 @@ func rewriteValuegeneric_OpAdd64_20(v *Value) bool {
 	// cond:
 	// result: (Add64 (Const64 <t> [c+d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -2412,6 +2546,7 @@ func rewriteValuegeneric_OpAdd64_20(v *Value) bool {
 	// cond:
 	// result: (Sub64 (Const64 <t> [c+d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -2422,6 +2557,7 @@ func rewriteValuegeneric_OpAdd64_20(v *Value) bool {
 		if v_1.Op != OpSub64 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst64 {
 			break
@@ -2442,10 +2578,12 @@ func rewriteValuegeneric_OpAdd64_20(v *Value) bool {
 	// cond:
 	// result: (Sub64 (Const64 <t> [c+d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpSub64 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst64 {
 			break
@@ -2472,6 +2610,7 @@ func rewriteValuegeneric_OpAdd64_20(v *Value) bool {
 	// cond:
 	// result: (Add64 (Const64 <t> [c-d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -2482,6 +2621,7 @@ func rewriteValuegeneric_OpAdd64_20(v *Value) bool {
 		if v_1.Op != OpSub64 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst64 {
@@ -2502,10 +2642,12 @@ func rewriteValuegeneric_OpAdd64_20(v *Value) bool {
 	// cond:
 	// result: (Add64 (Const64 <t> [c-d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpSub64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -2535,6 +2677,7 @@ func rewriteValuegeneric_OpAdd64F_0(v *Value) bool {
 	// cond:
 	// result: (Const64F [f2i(i2f(c) + i2f(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64F {
 			break
@@ -2553,6 +2696,7 @@ func rewriteValuegeneric_OpAdd64F_0(v *Value) bool {
 	// cond:
 	// result: (Const64F [f2i(i2f(c) + i2f(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64F {
 			break
@@ -2571,6 +2715,7 @@ func rewriteValuegeneric_OpAdd64F_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64F {
@@ -2588,6 +2733,7 @@ func rewriteValuegeneric_OpAdd64F_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64F {
 			break
@@ -2610,6 +2756,7 @@ func rewriteValuegeneric_OpAdd8_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [int64(int8(c+d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -2628,6 +2775,7 @@ func rewriteValuegeneric_OpAdd8_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [int64(int8(c+d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -2646,6 +2794,7 @@ func rewriteValuegeneric_OpAdd8_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -2663,6 +2812,7 @@ func rewriteValuegeneric_OpAdd8_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
@@ -2680,6 +2830,7 @@ func rewriteValuegeneric_OpAdd8_0(v *Value) bool {
 	// cond:
 	// result: (Neg8  x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -2700,6 +2851,7 @@ func rewriteValuegeneric_OpAdd8_0(v *Value) bool {
 	// cond:
 	// result: (Neg8  x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpCom8 {
 			break
@@ -2720,10 +2872,12 @@ func rewriteValuegeneric_OpAdd8_0(v *Value) bool {
 	// cond: (z.Op != OpConst8  && x.Op != OpConst8)
 	// result: (Add8  i (Add8  <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd8 {
 			break
 		}
+		_ = v_0.Args[1]
 		i := v_0.Args[0]
 		if i.Op != OpConst8 {
 			break
@@ -2746,10 +2900,12 @@ func rewriteValuegeneric_OpAdd8_0(v *Value) bool {
 	// cond: (z.Op != OpConst8  && x.Op != OpConst8)
 	// result: (Add8  i (Add8  <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd8 {
 			break
 		}
+		_ = v_0.Args[1]
 		z := v_0.Args[0]
 		i := v_0.Args[1]
 		if i.Op != OpConst8 {
@@ -2772,11 +2928,13 @@ func rewriteValuegeneric_OpAdd8_0(v *Value) bool {
 	// cond: (z.Op != OpConst8  && x.Op != OpConst8)
 	// result: (Add8  i (Add8  <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAdd8 {
 			break
 		}
+		_ = v_1.Args[1]
 		i := v_1.Args[0]
 		if i.Op != OpConst8 {
 			break
@@ -2798,11 +2956,13 @@ func rewriteValuegeneric_OpAdd8_0(v *Value) bool {
 	// cond: (z.Op != OpConst8  && x.Op != OpConst8)
 	// result: (Add8  i (Add8  <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAdd8 {
 			break
 		}
+		_ = v_1.Args[1]
 		z := v_1.Args[0]
 		i := v_1.Args[1]
 		if i.Op != OpConst8 {
@@ -2829,10 +2989,12 @@ func rewriteValuegeneric_OpAdd8_10(v *Value) bool {
 	// cond: (z.Op != OpConst8  && x.Op != OpConst8)
 	// result: (Add8  i (Sub8  <t> x z))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpSub8 {
 			break
 		}
+		_ = v_0.Args[1]
 		i := v_0.Args[0]
 		if i.Op != OpConst8 {
 			break
@@ -2855,11 +3017,13 @@ func rewriteValuegeneric_OpAdd8_10(v *Value) bool {
 	// cond: (z.Op != OpConst8  && x.Op != OpConst8)
 	// result: (Add8  i (Sub8  <t> x z))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpSub8 {
 			break
 		}
+		_ = v_1.Args[1]
 		i := v_1.Args[0]
 		if i.Op != OpConst8 {
 			break
@@ -2881,11 +3045,13 @@ func rewriteValuegeneric_OpAdd8_10(v *Value) bool {
 	// cond: (z.Op != OpConst8  && x.Op != OpConst8)
 	// result: (Add8  i (Sub8  <t> x z))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpSub8 {
 			break
 		}
+		_ = v_1.Args[1]
 		i := v_1.Args[0]
 		if i.Op != OpConst8 {
 			break
@@ -2907,10 +3073,12 @@ func rewriteValuegeneric_OpAdd8_10(v *Value) bool {
 	// cond: (z.Op != OpConst8  && x.Op != OpConst8)
 	// result: (Add8  i (Sub8  <t> x z))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpSub8 {
 			break
 		}
+		_ = v_0.Args[1]
 		i := v_0.Args[0]
 		if i.Op != OpConst8 {
 			break
@@ -2933,10 +3101,12 @@ func rewriteValuegeneric_OpAdd8_10(v *Value) bool {
 	// cond: (z.Op != OpConst8  && x.Op != OpConst8)
 	// result: (Sub8  (Add8  <t> x z) i)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpSub8 {
 			break
 		}
+		_ = v_0.Args[1]
 		z := v_0.Args[0]
 		i := v_0.Args[1]
 		if i.Op != OpConst8 {
@@ -2959,11 +3129,13 @@ func rewriteValuegeneric_OpAdd8_10(v *Value) bool {
 	// cond: (z.Op != OpConst8  && x.Op != OpConst8)
 	// result: (Sub8  (Add8  <t> x z) i)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpSub8 {
 			break
 		}
+		_ = v_1.Args[1]
 		z := v_1.Args[0]
 		i := v_1.Args[1]
 		if i.Op != OpConst8 {
@@ -2985,11 +3157,13 @@ func rewriteValuegeneric_OpAdd8_10(v *Value) bool {
 	// cond: (z.Op != OpConst8  && x.Op != OpConst8)
 	// result: (Sub8  (Add8  <t> x z) i)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpSub8 {
 			break
 		}
+		_ = v_1.Args[1]
 		z := v_1.Args[0]
 		i := v_1.Args[1]
 		if i.Op != OpConst8 {
@@ -3011,10 +3185,12 @@ func rewriteValuegeneric_OpAdd8_10(v *Value) bool {
 	// cond: (z.Op != OpConst8  && x.Op != OpConst8)
 	// result: (Sub8  (Add8  <t> x z) i)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpSub8 {
 			break
 		}
+		_ = v_0.Args[1]
 		z := v_0.Args[0]
 		i := v_0.Args[1]
 		if i.Op != OpConst8 {
@@ -3037,6 +3213,7 @@ func rewriteValuegeneric_OpAdd8_10(v *Value) bool {
 	// cond:
 	// result: (Add8  (Const8  <t> [int64(int8(c+d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -3047,6 +3224,7 @@ func rewriteValuegeneric_OpAdd8_10(v *Value) bool {
 		if v_1.Op != OpAdd8 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst8 {
 			break
@@ -3067,6 +3245,7 @@ func rewriteValuegeneric_OpAdd8_10(v *Value) bool {
 	// cond:
 	// result: (Add8  (Const8  <t> [int64(int8(c+d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -3077,6 +3256,7 @@ func rewriteValuegeneric_OpAdd8_10(v *Value) bool {
 		if v_1.Op != OpAdd8 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst8 {
@@ -3102,10 +3282,12 @@ func rewriteValuegeneric_OpAdd8_20(v *Value) bool {
 	// cond:
 	// result: (Add8  (Const8  <t> [int64(int8(c+d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd8 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst8 {
 			break
@@ -3132,10 +3314,12 @@ func rewriteValuegeneric_OpAdd8_20(v *Value) bool {
 	// cond:
 	// result: (Add8  (Const8  <t> [int64(int8(c+d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd8 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst8 {
@@ -3162,6 +3346,7 @@ func rewriteValuegeneric_OpAdd8_20(v *Value) bool {
 	// cond:
 	// result: (Sub8  (Const8  <t> [int64(int8(c+d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -3172,6 +3357,7 @@ func rewriteValuegeneric_OpAdd8_20(v *Value) bool {
 		if v_1.Op != OpSub8 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst8 {
 			break
@@ -3192,10 +3378,12 @@ func rewriteValuegeneric_OpAdd8_20(v *Value) bool {
 	// cond:
 	// result: (Sub8  (Const8  <t> [int64(int8(c+d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpSub8 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst8 {
 			break
@@ -3222,6 +3410,7 @@ func rewriteValuegeneric_OpAdd8_20(v *Value) bool {
 	// cond:
 	// result: (Add8  (Const8  <t> [int64(int8(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -3232,6 +3421,7 @@ func rewriteValuegeneric_OpAdd8_20(v *Value) bool {
 		if v_1.Op != OpSub8 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst8 {
@@ -3252,10 +3442,12 @@ func rewriteValuegeneric_OpAdd8_20(v *Value) bool {
 	// cond:
 	// result: (Add8  (Const8  <t> [int64(int8(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpSub8 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst8 {
@@ -3286,6 +3478,7 @@ func rewriteValuegeneric_OpAddPtr_0(v *Value) bool {
 	// result: (OffPtr <t> x [c])
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -3303,6 +3496,7 @@ func rewriteValuegeneric_OpAddPtr_0(v *Value) bool {
 	// result: (OffPtr <t> x [c])
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -3322,6 +3516,7 @@ func rewriteValuegeneric_OpAnd16_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [int64(int16(c&d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -3340,6 +3535,7 @@ func rewriteValuegeneric_OpAnd16_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [int64(int16(c&d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -3358,6 +3554,7 @@ func rewriteValuegeneric_OpAnd16_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -3371,6 +3568,7 @@ func rewriteValuegeneric_OpAnd16_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -3388,6 +3586,7 @@ func rewriteValuegeneric_OpAnd16_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -3405,6 +3604,7 @@ func rewriteValuegeneric_OpAnd16_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -3420,6 +3620,7 @@ func rewriteValuegeneric_OpAnd16_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
 			break
@@ -3435,11 +3636,13 @@ func rewriteValuegeneric_OpAnd16_0(v *Value) bool {
 	// cond:
 	// result: (And16 x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAnd16 {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -3453,11 +3656,13 @@ func rewriteValuegeneric_OpAnd16_0(v *Value) bool {
 	// cond:
 	// result: (And16 x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAnd16 {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		if x != v_1.Args[1] {
 			break
@@ -3471,10 +3676,12 @@ func rewriteValuegeneric_OpAnd16_0(v *Value) bool {
 	// cond:
 	// result: (And16 x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd16 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if x != v.Args[1] {
@@ -3494,10 +3701,12 @@ func rewriteValuegeneric_OpAnd16_10(v *Value) bool {
 	// cond:
 	// result: (And16 x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd16 {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		x := v_0.Args[1]
 		if x != v.Args[1] {
@@ -3512,10 +3721,12 @@ func rewriteValuegeneric_OpAnd16_10(v *Value) bool {
 	// cond: (z.Op != OpConst16 && x.Op != OpConst16)
 	// result: (And16 i (And16 <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd16 {
 			break
 		}
+		_ = v_0.Args[1]
 		i := v_0.Args[0]
 		if i.Op != OpConst16 {
 			break
@@ -3538,10 +3749,12 @@ func rewriteValuegeneric_OpAnd16_10(v *Value) bool {
 	// cond: (z.Op != OpConst16 && x.Op != OpConst16)
 	// result: (And16 i (And16 <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd16 {
 			break
 		}
+		_ = v_0.Args[1]
 		z := v_0.Args[0]
 		i := v_0.Args[1]
 		if i.Op != OpConst16 {
@@ -3564,11 +3777,13 @@ func rewriteValuegeneric_OpAnd16_10(v *Value) bool {
 	// cond: (z.Op != OpConst16 && x.Op != OpConst16)
 	// result: (And16 i (And16 <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAnd16 {
 			break
 		}
+		_ = v_1.Args[1]
 		i := v_1.Args[0]
 		if i.Op != OpConst16 {
 			break
@@ -3590,11 +3805,13 @@ func rewriteValuegeneric_OpAnd16_10(v *Value) bool {
 	// cond: (z.Op != OpConst16 && x.Op != OpConst16)
 	// result: (And16 i (And16 <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAnd16 {
 			break
 		}
+		_ = v_1.Args[1]
 		z := v_1.Args[0]
 		i := v_1.Args[1]
 		if i.Op != OpConst16 {
@@ -3616,6 +3833,7 @@ func rewriteValuegeneric_OpAnd16_10(v *Value) bool {
 	// cond:
 	// result: (And16 (Const16 <t> [int64(int16(c&d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -3626,6 +3844,7 @@ func rewriteValuegeneric_OpAnd16_10(v *Value) bool {
 		if v_1.Op != OpAnd16 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst16 {
 			break
@@ -3646,6 +3865,7 @@ func rewriteValuegeneric_OpAnd16_10(v *Value) bool {
 	// cond:
 	// result: (And16 (Const16 <t> [int64(int16(c&d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -3656,6 +3876,7 @@ func rewriteValuegeneric_OpAnd16_10(v *Value) bool {
 		if v_1.Op != OpAnd16 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst16 {
@@ -3676,10 +3897,12 @@ func rewriteValuegeneric_OpAnd16_10(v *Value) bool {
 	// cond:
 	// result: (And16 (Const16 <t> [int64(int16(c&d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd16 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst16 {
 			break
@@ -3706,10 +3929,12 @@ func rewriteValuegeneric_OpAnd16_10(v *Value) bool {
 	// cond:
 	// result: (And16 (Const16 <t> [int64(int16(c&d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd16 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst16 {
@@ -3739,6 +3964,7 @@ func rewriteValuegeneric_OpAnd32_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [int64(int32(c&d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -3757,6 +3983,7 @@ func rewriteValuegeneric_OpAnd32_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [int64(int32(c&d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -3775,6 +4002,7 @@ func rewriteValuegeneric_OpAnd32_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -3788,6 +4016,7 @@ func rewriteValuegeneric_OpAnd32_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -3805,6 +4034,7 @@ func rewriteValuegeneric_OpAnd32_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -3822,6 +4052,7 @@ func rewriteValuegeneric_OpAnd32_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -3837,6 +4068,7 @@ func rewriteValuegeneric_OpAnd32_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
 			break
@@ -3852,11 +4084,13 @@ func rewriteValuegeneric_OpAnd32_0(v *Value) bool {
 	// cond:
 	// result: (And32 x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAnd32 {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -3870,11 +4104,13 @@ func rewriteValuegeneric_OpAnd32_0(v *Value) bool {
 	// cond:
 	// result: (And32 x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAnd32 {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		if x != v_1.Args[1] {
 			break
@@ -3888,10 +4124,12 @@ func rewriteValuegeneric_OpAnd32_0(v *Value) bool {
 	// cond:
 	// result: (And32 x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd32 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if x != v.Args[1] {
@@ -3911,10 +4149,12 @@ func rewriteValuegeneric_OpAnd32_10(v *Value) bool {
 	// cond:
 	// result: (And32 x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd32 {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		x := v_0.Args[1]
 		if x != v.Args[1] {
@@ -3929,10 +4169,12 @@ func rewriteValuegeneric_OpAnd32_10(v *Value) bool {
 	// cond: (z.Op != OpConst32 && x.Op != OpConst32)
 	// result: (And32 i (And32 <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd32 {
 			break
 		}
+		_ = v_0.Args[1]
 		i := v_0.Args[0]
 		if i.Op != OpConst32 {
 			break
@@ -3955,10 +4197,12 @@ func rewriteValuegeneric_OpAnd32_10(v *Value) bool {
 	// cond: (z.Op != OpConst32 && x.Op != OpConst32)
 	// result: (And32 i (And32 <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd32 {
 			break
 		}
+		_ = v_0.Args[1]
 		z := v_0.Args[0]
 		i := v_0.Args[1]
 		if i.Op != OpConst32 {
@@ -3981,11 +4225,13 @@ func rewriteValuegeneric_OpAnd32_10(v *Value) bool {
 	// cond: (z.Op != OpConst32 && x.Op != OpConst32)
 	// result: (And32 i (And32 <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAnd32 {
 			break
 		}
+		_ = v_1.Args[1]
 		i := v_1.Args[0]
 		if i.Op != OpConst32 {
 			break
@@ -4007,11 +4253,13 @@ func rewriteValuegeneric_OpAnd32_10(v *Value) bool {
 	// cond: (z.Op != OpConst32 && x.Op != OpConst32)
 	// result: (And32 i (And32 <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAnd32 {
 			break
 		}
+		_ = v_1.Args[1]
 		z := v_1.Args[0]
 		i := v_1.Args[1]
 		if i.Op != OpConst32 {
@@ -4033,6 +4281,7 @@ func rewriteValuegeneric_OpAnd32_10(v *Value) bool {
 	// cond:
 	// result: (And32 (Const32 <t> [int64(int32(c&d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -4043,6 +4292,7 @@ func rewriteValuegeneric_OpAnd32_10(v *Value) bool {
 		if v_1.Op != OpAnd32 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -4063,6 +4313,7 @@ func rewriteValuegeneric_OpAnd32_10(v *Value) bool {
 	// cond:
 	// result: (And32 (Const32 <t> [int64(int32(c&d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -4073,6 +4324,7 @@ func rewriteValuegeneric_OpAnd32_10(v *Value) bool {
 		if v_1.Op != OpAnd32 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst32 {
@@ -4093,10 +4345,12 @@ func rewriteValuegeneric_OpAnd32_10(v *Value) bool {
 	// cond:
 	// result: (And32 (Const32 <t> [int64(int32(c&d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd32 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst32 {
 			break
@@ -4123,10 +4377,12 @@ func rewriteValuegeneric_OpAnd32_10(v *Value) bool {
 	// cond:
 	// result: (And32 (Const32 <t> [int64(int32(c&d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd32 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst32 {
@@ -4156,6 +4412,7 @@ func rewriteValuegeneric_OpAnd64_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [c&d])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -4174,6 +4431,7 @@ func rewriteValuegeneric_OpAnd64_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [c&d])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -4192,6 +4450,7 @@ func rewriteValuegeneric_OpAnd64_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -4205,6 +4464,7 @@ func rewriteValuegeneric_OpAnd64_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -4222,6 +4482,7 @@ func rewriteValuegeneric_OpAnd64_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -4239,6 +4500,7 @@ func rewriteValuegeneric_OpAnd64_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -4254,6 +4516,7 @@ func rewriteValuegeneric_OpAnd64_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -4269,11 +4532,13 @@ func rewriteValuegeneric_OpAnd64_0(v *Value) bool {
 	// cond:
 	// result: (And64 x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAnd64 {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -4287,11 +4552,13 @@ func rewriteValuegeneric_OpAnd64_0(v *Value) bool {
 	// cond:
 	// result: (And64 x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAnd64 {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		if x != v_1.Args[1] {
 			break
@@ -4305,10 +4572,12 @@ func rewriteValuegeneric_OpAnd64_0(v *Value) bool {
 	// cond:
 	// result: (And64 x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if x != v.Args[1] {
@@ -4328,10 +4597,12 @@ func rewriteValuegeneric_OpAnd64_10(v *Value) bool {
 	// cond:
 	// result: (And64 x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		x := v_0.Args[1]
 		if x != v.Args[1] {
@@ -4347,6 +4618,7 @@ func rewriteValuegeneric_OpAnd64_10(v *Value) bool {
 	// result: (Rsh64Ux64 (Lsh64x64 <t> x (Const64 <t> [nlz(y)])) (Const64 <t> [nlz(y)]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -4373,6 +4645,7 @@ func rewriteValuegeneric_OpAnd64_10(v *Value) bool {
 	// result: (Rsh64Ux64 (Lsh64x64 <t> x (Const64 <t> [nlz(y)])) (Const64 <t> [nlz(y)]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -4399,6 +4672,7 @@ func rewriteValuegeneric_OpAnd64_10(v *Value) bool {
 	// result: (Lsh64x64 (Rsh64Ux64 <t> x (Const64 <t> [ntz(y)])) (Const64 <t> [ntz(y)]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -4425,6 +4699,7 @@ func rewriteValuegeneric_OpAnd64_10(v *Value) bool {
 	// result: (Lsh64x64 (Rsh64Ux64 <t> x (Const64 <t> [ntz(y)])) (Const64 <t> [ntz(y)]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -4450,10 +4725,12 @@ func rewriteValuegeneric_OpAnd64_10(v *Value) bool {
 	// cond: (z.Op != OpConst64 && x.Op != OpConst64)
 	// result: (And64 i (And64 <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		i := v_0.Args[0]
 		if i.Op != OpConst64 {
 			break
@@ -4476,10 +4753,12 @@ func rewriteValuegeneric_OpAnd64_10(v *Value) bool {
 	// cond: (z.Op != OpConst64 && x.Op != OpConst64)
 	// result: (And64 i (And64 <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		z := v_0.Args[0]
 		i := v_0.Args[1]
 		if i.Op != OpConst64 {
@@ -4502,11 +4781,13 @@ func rewriteValuegeneric_OpAnd64_10(v *Value) bool {
 	// cond: (z.Op != OpConst64 && x.Op != OpConst64)
 	// result: (And64 i (And64 <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAnd64 {
 			break
 		}
+		_ = v_1.Args[1]
 		i := v_1.Args[0]
 		if i.Op != OpConst64 {
 			break
@@ -4528,11 +4809,13 @@ func rewriteValuegeneric_OpAnd64_10(v *Value) bool {
 	// cond: (z.Op != OpConst64 && x.Op != OpConst64)
 	// result: (And64 i (And64 <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAnd64 {
 			break
 		}
+		_ = v_1.Args[1]
 		z := v_1.Args[0]
 		i := v_1.Args[1]
 		if i.Op != OpConst64 {
@@ -4554,6 +4837,7 @@ func rewriteValuegeneric_OpAnd64_10(v *Value) bool {
 	// cond:
 	// result: (And64 (Const64 <t> [c&d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -4564,6 +4848,7 @@ func rewriteValuegeneric_OpAnd64_10(v *Value) bool {
 		if v_1.Op != OpAnd64 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst64 {
 			break
@@ -4589,6 +4874,7 @@ func rewriteValuegeneric_OpAnd64_20(v *Value) bool {
 	// cond:
 	// result: (And64 (Const64 <t> [c&d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -4599,6 +4885,7 @@ func rewriteValuegeneric_OpAnd64_20(v *Value) bool {
 		if v_1.Op != OpAnd64 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst64 {
@@ -4619,10 +4906,12 @@ func rewriteValuegeneric_OpAnd64_20(v *Value) bool {
 	// cond:
 	// result: (And64 (Const64 <t> [c&d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst64 {
 			break
@@ -4649,10 +4938,12 @@ func rewriteValuegeneric_OpAnd64_20(v *Value) bool {
 	// cond:
 	// result: (And64 (Const64 <t> [c&d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -4682,6 +4973,7 @@ func rewriteValuegeneric_OpAnd8_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [int64(int8(c&d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -4700,6 +4992,7 @@ func rewriteValuegeneric_OpAnd8_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [int64(int8(c&d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -4718,6 +5011,7 @@ func rewriteValuegeneric_OpAnd8_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -4731,6 +5025,7 @@ func rewriteValuegeneric_OpAnd8_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -4748,6 +5043,7 @@ func rewriteValuegeneric_OpAnd8_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
@@ -4765,6 +5061,7 @@ func rewriteValuegeneric_OpAnd8_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -4780,6 +5077,7 @@ func rewriteValuegeneric_OpAnd8_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
 			break
@@ -4795,11 +5093,13 @@ func rewriteValuegeneric_OpAnd8_0(v *Value) bool {
 	// cond:
 	// result: (And8  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAnd8 {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -4813,11 +5113,13 @@ func rewriteValuegeneric_OpAnd8_0(v *Value) bool {
 	// cond:
 	// result: (And8  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAnd8 {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		if x != v_1.Args[1] {
 			break
@@ -4831,10 +5133,12 @@ func rewriteValuegeneric_OpAnd8_0(v *Value) bool {
 	// cond:
 	// result: (And8  x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd8 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if x != v.Args[1] {
@@ -4854,10 +5158,12 @@ func rewriteValuegeneric_OpAnd8_10(v *Value) bool {
 	// cond:
 	// result: (And8  x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd8 {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		x := v_0.Args[1]
 		if x != v.Args[1] {
@@ -4872,10 +5178,12 @@ func rewriteValuegeneric_OpAnd8_10(v *Value) bool {
 	// cond: (z.Op != OpConst8  && x.Op != OpConst8)
 	// result: (And8  i (And8  <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd8 {
 			break
 		}
+		_ = v_0.Args[1]
 		i := v_0.Args[0]
 		if i.Op != OpConst8 {
 			break
@@ -4898,10 +5206,12 @@ func rewriteValuegeneric_OpAnd8_10(v *Value) bool {
 	// cond: (z.Op != OpConst8  && x.Op != OpConst8)
 	// result: (And8  i (And8  <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd8 {
 			break
 		}
+		_ = v_0.Args[1]
 		z := v_0.Args[0]
 		i := v_0.Args[1]
 		if i.Op != OpConst8 {
@@ -4924,11 +5234,13 @@ func rewriteValuegeneric_OpAnd8_10(v *Value) bool {
 	// cond: (z.Op != OpConst8  && x.Op != OpConst8)
 	// result: (And8  i (And8  <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAnd8 {
 			break
 		}
+		_ = v_1.Args[1]
 		i := v_1.Args[0]
 		if i.Op != OpConst8 {
 			break
@@ -4950,11 +5262,13 @@ func rewriteValuegeneric_OpAnd8_10(v *Value) bool {
 	// cond: (z.Op != OpConst8  && x.Op != OpConst8)
 	// result: (And8  i (And8  <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpAnd8 {
 			break
 		}
+		_ = v_1.Args[1]
 		z := v_1.Args[0]
 		i := v_1.Args[1]
 		if i.Op != OpConst8 {
@@ -4976,6 +5290,7 @@ func rewriteValuegeneric_OpAnd8_10(v *Value) bool {
 	// cond:
 	// result: (And8  (Const8  <t> [int64(int8(c&d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -4986,6 +5301,7 @@ func rewriteValuegeneric_OpAnd8_10(v *Value) bool {
 		if v_1.Op != OpAnd8 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst8 {
 			break
@@ -5006,6 +5322,7 @@ func rewriteValuegeneric_OpAnd8_10(v *Value) bool {
 	// cond:
 	// result: (And8  (Const8  <t> [int64(int8(c&d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -5016,6 +5333,7 @@ func rewriteValuegeneric_OpAnd8_10(v *Value) bool {
 		if v_1.Op != OpAnd8 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst8 {
@@ -5036,10 +5354,12 @@ func rewriteValuegeneric_OpAnd8_10(v *Value) bool {
 	// cond:
 	// result: (And8  (Const8  <t> [int64(int8(c&d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd8 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst8 {
 			break
@@ -5066,10 +5386,12 @@ func rewriteValuegeneric_OpAnd8_10(v *Value) bool {
 	// cond:
 	// result: (And8  (Const8  <t> [int64(int8(c&d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd8 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst8 {
@@ -5373,6 +5695,7 @@ func rewriteValuegeneric_OpArraySelect_0(v *Value) bool {
 		if v_0.Op != OpLoad {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		mem := v_0.Args[1]
 		v.reset(OpLoad)
@@ -5666,14 +5989,17 @@ func rewriteValuegeneric_OpConvert_0(v *Value) bool {
 	// cond:
 	// result: (Add64 ptr off)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConvert {
 			break
 		}
+		_ = v_0_0.Args[1]
 		ptr := v_0_0.Args[0]
 		mem := v_0_0.Args[1]
 		off := v_0.Args[1]
@@ -5689,15 +6015,18 @@ func rewriteValuegeneric_OpConvert_0(v *Value) bool {
 	// cond:
 	// result: (Add64 ptr off)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		off := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConvert {
 			break
 		}
+		_ = v_0_1.Args[1]
 		ptr := v_0_1.Args[0]
 		mem := v_0_1.Args[1]
 		if mem != v.Args[1] {
@@ -5712,10 +6041,12 @@ func rewriteValuegeneric_OpConvert_0(v *Value) bool {
 	// cond:
 	// result: ptr
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConvert {
 			break
 		}
+		_ = v_0.Args[1]
 		ptr := v_0.Args[0]
 		mem := v_0.Args[1]
 		if mem != v.Args[1] {
@@ -5769,6 +6100,7 @@ func rewriteValuegeneric_OpDiv16_0(v *Value) bool {
 	// cond: d != 0
 	// result: (Const16 [int64(int16(c)/int16(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -5791,6 +6123,7 @@ func rewriteValuegeneric_OpDiv16_0(v *Value) bool {
 	// result: (Neg16 (Div16 <t> n (Const16 <t> [-c])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		n := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -5814,6 +6147,7 @@ func rewriteValuegeneric_OpDiv16_0(v *Value) bool {
 	// result: (Rsh16Ux64 (And16 <t> x (Neg16 <t> x)) (Const64 <typ.UInt64> [15]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -5839,6 +6173,7 @@ func rewriteValuegeneric_OpDiv16_0(v *Value) bool {
 	// result: (Rsh16x64     (Add16 <t> n (Rsh16Ux64 <t> (Rsh16x64 <t> n (Const64 <typ.UInt64> [15])) (Const64 <typ.UInt64> [16-log2(c)])))     (Const64 <typ.UInt64> [log2(c)]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		n := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -5873,6 +6208,7 @@ func rewriteValuegeneric_OpDiv16_0(v *Value) bool {
 	// result: (Sub16 <t>     (Rsh32x64 <t>       (Mul32 <typ.UInt32>         (Const32 <typ.UInt32> [int64(smagic(16,c).m)])         (SignExt16to32 x))       (Const64 <typ.UInt64> [16+smagic(16,c).s]))     (Rsh32x64 <t>       (SignExt16to32 x)       (Const64 <typ.UInt64> [31])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -5920,6 +6256,7 @@ func rewriteValuegeneric_OpDiv16u_0(v *Value) bool {
 	// cond: d != 0
 	// result: (Const16 [int64(int16(uint16(c)/uint16(d)))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -5941,6 +6278,7 @@ func rewriteValuegeneric_OpDiv16u_0(v *Value) bool {
 	// cond: isPowerOfTwo(c&0xffff)
 	// result: (Rsh16Ux64 n (Const64 <typ.UInt64> [log2(c&0xffff)]))
 	for {
+		_ = v.Args[1]
 		n := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -5961,6 +6299,7 @@ func rewriteValuegeneric_OpDiv16u_0(v *Value) bool {
 	// cond: umagicOK(16, c) && config.RegSize == 8
 	// result: (Trunc64to16     (Rsh64Ux64 <typ.UInt64>       (Mul64 <typ.UInt64>         (Const64 <typ.UInt64> [int64(1<<16+umagic(16,c).m)])         (ZeroExt16to64 x))       (Const64 <typ.UInt64> [16+umagic(16,c).s])))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -5990,6 +6329,7 @@ func rewriteValuegeneric_OpDiv16u_0(v *Value) bool {
 	// cond: umagicOK(16, c) && config.RegSize == 4 && umagic(16,c).m&1 == 0
 	// result: (Trunc32to16     (Rsh32Ux64 <typ.UInt32>       (Mul32 <typ.UInt32>         (Const32 <typ.UInt32> [int64(1<<15+umagic(16,c).m/2)])         (ZeroExt16to32 x))       (Const64 <typ.UInt64> [16+umagic(16,c).s-1])))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -6019,6 +6359,7 @@ func rewriteValuegeneric_OpDiv16u_0(v *Value) bool {
 	// cond: umagicOK(16, c) && config.RegSize == 4 && c&1 == 0
 	// result: (Trunc32to16     (Rsh32Ux64 <typ.UInt32>       (Mul32 <typ.UInt32>         (Const32 <typ.UInt32> [int64(1<<15+(umagic(16,c).m+1)/2)])         (Rsh32Ux64 <typ.UInt32> (ZeroExt16to32 x) (Const64 <typ.UInt64> [1])))       (Const64 <typ.UInt64> [16+umagic(16,c).s-2])))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -6053,6 +6394,7 @@ func rewriteValuegeneric_OpDiv16u_0(v *Value) bool {
 	// cond: umagicOK(16, c) && config.RegSize == 4
 	// result: (Trunc32to16     (Rsh32Ux64 <typ.UInt32>       (Avg32u         (Lsh32x64 <typ.UInt32> (ZeroExt16to32 x) (Const64 <typ.UInt64> [16]))         (Mul32 <typ.UInt32>           (Const32 <typ.UInt32> [int64(umagic(16,c).m)])           (ZeroExt16to32 x)))       (Const64 <typ.UInt64> [16+umagic(16,c).s-1])))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -6101,6 +6443,7 @@ func rewriteValuegeneric_OpDiv32_0(v *Value) bool {
 	// cond: d != 0
 	// result: (Const32 [int64(int32(c)/int32(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -6123,6 +6466,7 @@ func rewriteValuegeneric_OpDiv32_0(v *Value) bool {
 	// result: (Neg32 (Div32 <t> n (Const32 <t> [-c])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		n := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -6146,6 +6490,7 @@ func rewriteValuegeneric_OpDiv32_0(v *Value) bool {
 	// result: (Rsh32Ux64 (And32 <t> x (Neg32 <t> x)) (Const64 <typ.UInt64> [31]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -6171,6 +6516,7 @@ func rewriteValuegeneric_OpDiv32_0(v *Value) bool {
 	// result: (Rsh32x64     (Add32 <t> n (Rsh32Ux64 <t> (Rsh32x64 <t> n (Const64 <typ.UInt64> [31])) (Const64 <typ.UInt64> [32-log2(c)])))     (Const64 <typ.UInt64> [log2(c)]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		n := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -6205,6 +6551,7 @@ func rewriteValuegeneric_OpDiv32_0(v *Value) bool {
 	// result: (Sub32 <t>     (Rsh64x64 <t>       (Mul64 <typ.UInt64>         (Const64 <typ.UInt64> [int64(smagic(32,c).m)])         (SignExt32to64 x))       (Const64 <typ.UInt64> [32+smagic(32,c).s]))     (Rsh64x64 <t>       (SignExt32to64 x)       (Const64 <typ.UInt64> [63])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -6244,6 +6591,7 @@ func rewriteValuegeneric_OpDiv32_0(v *Value) bool {
 	// result: (Sub32 <t>     (Rsh32x64 <t>       (Hmul32 <t>         (Const32 <typ.UInt32> [int64(int32(smagic(32,c).m/2))])         x)       (Const64 <typ.UInt64> [smagic(32,c).s-1]))     (Rsh32x64 <t>       x       (Const64 <typ.UInt64> [31])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -6279,6 +6627,7 @@ func rewriteValuegeneric_OpDiv32_0(v *Value) bool {
 	// result: (Sub32 <t>     (Rsh32x64 <t>       (Add32 <t>         (Hmul32 <t>           (Const32 <typ.UInt32> [int64(int32(smagic(32,c).m))])           x)         x)       (Const64 <typ.UInt64> [smagic(32,c).s]))     (Rsh32x64 <t>       x       (Const64 <typ.UInt64> [31])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -6321,6 +6670,7 @@ func rewriteValuegeneric_OpDiv32F_0(v *Value) bool {
 	// cond:
 	// result: (Const32F [f2i(float64(i2f32(c) / i2f32(d)))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32F {
 			break
@@ -6339,6 +6689,7 @@ func rewriteValuegeneric_OpDiv32F_0(v *Value) bool {
 	// cond: reciprocalExact32(float32(i2f(c)))
 	// result: (Mul32F x (Const32F <t> [f2i(1/i2f(c))]))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32F {
@@ -6369,6 +6720,7 @@ func rewriteValuegeneric_OpDiv32u_0(v *Value) bool {
 	// cond: d != 0
 	// result: (Const32 [int64(int32(uint32(c)/uint32(d)))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -6390,6 +6742,7 @@ func rewriteValuegeneric_OpDiv32u_0(v *Value) bool {
 	// cond: isPowerOfTwo(c&0xffffffff)
 	// result: (Rsh32Ux64 n (Const64 <typ.UInt64> [log2(c&0xffffffff)]))
 	for {
+		_ = v.Args[1]
 		n := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -6410,6 +6763,7 @@ func rewriteValuegeneric_OpDiv32u_0(v *Value) bool {
 	// cond: umagicOK(32, c) && config.RegSize == 4 && umagic(32,c).m&1 == 0
 	// result: (Rsh32Ux64 <typ.UInt32>     (Hmul32u <typ.UInt32>       (Const32 <typ.UInt32> [int64(int32(1<<31+umagic(32,c).m/2))])       x)     (Const64 <typ.UInt64> [umagic(32,c).s-1]))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -6436,6 +6790,7 @@ func rewriteValuegeneric_OpDiv32u_0(v *Value) bool {
 	// cond: umagicOK(32, c) && config.RegSize == 4 && c&1 == 0
 	// result: (Rsh32Ux64 <typ.UInt32>     (Hmul32u <typ.UInt32>       (Const32 <typ.UInt32> [int64(int32(1<<31+(umagic(32,c).m+1)/2))])       (Rsh32Ux64 <typ.UInt32> x (Const64 <typ.UInt64> [1])))     (Const64 <typ.UInt64> [umagic(32,c).s-2]))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -6467,6 +6822,7 @@ func rewriteValuegeneric_OpDiv32u_0(v *Value) bool {
 	// cond: umagicOK(32, c) && config.RegSize == 4
 	// result: (Rsh32Ux64 <typ.UInt32>     (Avg32u       x       (Hmul32u <typ.UInt32>         (Const32 <typ.UInt32> [int64(int32(umagic(32,c).m))])         x))     (Const64 <typ.UInt64> [umagic(32,c).s-1]))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -6496,6 +6852,7 @@ func rewriteValuegeneric_OpDiv32u_0(v *Value) bool {
 	// cond: umagicOK(32, c) && config.RegSize == 8 && umagic(32,c).m&1 == 0
 	// result: (Trunc64to32     (Rsh64Ux64 <typ.UInt64>       (Mul64 <typ.UInt64>         (Const64 <typ.UInt64> [int64(1<<31+umagic(32,c).m/2)])         (ZeroExt32to64 x))       (Const64 <typ.UInt64> [32+umagic(32,c).s-1])))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -6525,6 +6882,7 @@ func rewriteValuegeneric_OpDiv32u_0(v *Value) bool {
 	// cond: umagicOK(32, c) && config.RegSize == 8 && c&1 == 0
 	// result: (Trunc64to32     (Rsh64Ux64 <typ.UInt64>       (Mul64 <typ.UInt64>         (Const64 <typ.UInt64> [int64(1<<31+(umagic(32,c).m+1)/2)])         (Rsh64Ux64 <typ.UInt64> (ZeroExt32to64 x) (Const64 <typ.UInt64> [1])))       (Const64 <typ.UInt64> [32+umagic(32,c).s-2])))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -6559,6 +6917,7 @@ func rewriteValuegeneric_OpDiv32u_0(v *Value) bool {
 	// cond: umagicOK(32, c) && config.RegSize == 8
 	// result: (Trunc64to32     (Rsh64Ux64 <typ.UInt64>       (Avg64u         (Lsh64x64 <typ.UInt64> (ZeroExt32to64 x) (Const64 <typ.UInt64> [32]))         (Mul64 <typ.UInt64>           (Const64 <typ.UInt32> [int64(umagic(32,c).m)])           (ZeroExt32to64 x)))       (Const64 <typ.UInt64> [32+umagic(32,c).s-1])))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -6605,6 +6964,7 @@ func rewriteValuegeneric_OpDiv64_0(v *Value) bool {
 	// cond: d != 0
 	// result: (Const64 [c/d])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -6627,6 +6987,7 @@ func rewriteValuegeneric_OpDiv64_0(v *Value) bool {
 	// result: (Neg64 (Div64 <t> n (Const64 <t> [-c])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		n := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -6650,6 +7011,7 @@ func rewriteValuegeneric_OpDiv64_0(v *Value) bool {
 	// result: (Rsh64Ux64 (And64 <t> x (Neg64 <t> x)) (Const64 <typ.UInt64> [63]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -6675,6 +7037,7 @@ func rewriteValuegeneric_OpDiv64_0(v *Value) bool {
 	// result: (Rsh64x64     (Add64 <t> n (Rsh64Ux64 <t> (Rsh64x64 <t> n (Const64 <typ.UInt64> [63])) (Const64 <typ.UInt64> [64-log2(c)])))     (Const64 <typ.UInt64> [log2(c)]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		n := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -6709,6 +7072,7 @@ func rewriteValuegeneric_OpDiv64_0(v *Value) bool {
 	// result: (Sub64 <t>     (Rsh64x64 <t>       (Hmul64 <t>         (Const64 <typ.UInt64> [int64(smagic(64,c).m/2)])         x)       (Const64 <typ.UInt64> [smagic(64,c).s-1]))     (Rsh64x64 <t>       x       (Const64 <typ.UInt64> [63])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -6744,6 +7108,7 @@ func rewriteValuegeneric_OpDiv64_0(v *Value) bool {
 	// result: (Sub64 <t>     (Rsh64x64 <t>       (Add64 <t>         (Hmul64 <t>           (Const64 <typ.UInt64> [int64(smagic(64,c).m)])           x)         x)       (Const64 <typ.UInt64> [smagic(64,c).s]))     (Rsh64x64 <t>       x       (Const64 <typ.UInt64> [63])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -6786,6 +7151,7 @@ func rewriteValuegeneric_OpDiv64F_0(v *Value) bool {
 	// cond:
 	// result: (Const64F [f2i(i2f(c) / i2f(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64F {
 			break
@@ -6804,6 +7170,7 @@ func rewriteValuegeneric_OpDiv64F_0(v *Value) bool {
 	// cond: reciprocalExact64(i2f(c))
 	// result: (Mul64F x (Const64F <t> [f2i(1/i2f(c))]))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64F {
@@ -6834,6 +7201,7 @@ func rewriteValuegeneric_OpDiv64u_0(v *Value) bool {
 	// cond: d != 0
 	// result: (Const64 [int64(uint64(c)/uint64(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -6855,6 +7223,7 @@ func rewriteValuegeneric_OpDiv64u_0(v *Value) bool {
 	// cond: isPowerOfTwo(c)
 	// result: (Rsh64Ux64 n (Const64 <typ.UInt64> [log2(c)]))
 	for {
+		_ = v.Args[1]
 		n := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -6875,6 +7244,7 @@ func rewriteValuegeneric_OpDiv64u_0(v *Value) bool {
 	// cond: umagicOK(64, c) && config.RegSize == 8 && umagic(64,c).m&1 == 0
 	// result: (Rsh64Ux64 <typ.UInt64>     (Hmul64u <typ.UInt64>       (Const64 <typ.UInt64> [int64(1<<63+umagic(64,c).m/2)])       x)     (Const64 <typ.UInt64> [umagic(64,c).s-1]))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -6901,6 +7271,7 @@ func rewriteValuegeneric_OpDiv64u_0(v *Value) bool {
 	// cond: umagicOK(64, c) && config.RegSize == 8 && c&1 == 0
 	// result: (Rsh64Ux64 <typ.UInt64>     (Hmul64u <typ.UInt64>       (Const64 <typ.UInt64> [int64(1<<63+(umagic(64,c).m+1)/2)])       (Rsh64Ux64 <typ.UInt64> x (Const64 <typ.UInt64> [1])))     (Const64 <typ.UInt64> [umagic(64,c).s-2]))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -6932,6 +7303,7 @@ func rewriteValuegeneric_OpDiv64u_0(v *Value) bool {
 	// cond: umagicOK(64, c) && config.RegSize == 8
 	// result: (Rsh64Ux64 <typ.UInt64>     (Avg64u       x       (Hmul64u <typ.UInt64>         (Const64 <typ.UInt64> [int64(umagic(64,c).m)])         x))     (Const64 <typ.UInt64> [umagic(64,c).s-1]))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -6968,6 +7340,7 @@ func rewriteValuegeneric_OpDiv8_0(v *Value) bool {
 	// cond: d != 0
 	// result: (Const8  [int64(int8(c)/int8(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -6990,6 +7363,7 @@ func rewriteValuegeneric_OpDiv8_0(v *Value) bool {
 	// result: (Neg8  (Div8  <t> n (Const8  <t> [-c])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		n := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
@@ -7013,6 +7387,7 @@ func rewriteValuegeneric_OpDiv8_0(v *Value) bool {
 	// result: (Rsh8Ux64  (And8  <t> x (Neg8  <t> x)) (Const64 <typ.UInt64> [7 ]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
@@ -7038,6 +7413,7 @@ func rewriteValuegeneric_OpDiv8_0(v *Value) bool {
 	// result: (Rsh8x64     (Add8  <t> n (Rsh8Ux64  <t> (Rsh8x64  <t> n (Const64 <typ.UInt64> [ 7])) (Const64 <typ.UInt64> [ 8-log2(c)])))     (Const64 <typ.UInt64> [log2(c)]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		n := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
@@ -7072,6 +7448,7 @@ func rewriteValuegeneric_OpDiv8_0(v *Value) bool {
 	// result: (Sub8 <t>     (Rsh32x64 <t>       (Mul32 <typ.UInt32>         (Const32 <typ.UInt32> [int64(smagic(8,c).m)])         (SignExt8to32 x))       (Const64 <typ.UInt64> [8+smagic(8,c).s]))     (Rsh32x64 <t>       (SignExt8to32 x)       (Const64 <typ.UInt64> [31])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
@@ -7117,6 +7494,7 @@ func rewriteValuegeneric_OpDiv8u_0(v *Value) bool {
 	// cond: d != 0
 	// result: (Const8  [int64(int8(uint8(c)/uint8(d)))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -7138,6 +7516,7 @@ func rewriteValuegeneric_OpDiv8u_0(v *Value) bool {
 	// cond: isPowerOfTwo(c&0xff)
 	// result: (Rsh8Ux64 n  (Const64 <typ.UInt64> [log2(c&0xff)]))
 	for {
+		_ = v.Args[1]
 		n := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
@@ -7158,6 +7537,7 @@ func rewriteValuegeneric_OpDiv8u_0(v *Value) bool {
 	// cond: umagicOK(8, c)
 	// result: (Trunc32to8     (Rsh32Ux64 <typ.UInt32>       (Mul32 <typ.UInt32>         (Const32 <typ.UInt32> [int64(1<<8+umagic(8,c).m)])         (ZeroExt8to32 x))       (Const64 <typ.UInt64> [8+umagic(8,c).s])))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
@@ -7192,6 +7572,7 @@ func rewriteValuegeneric_OpEq16_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -7204,6 +7585,7 @@ func rewriteValuegeneric_OpEq16_0(v *Value) bool {
 	// cond:
 	// result: (Eq16 (Const16 <t> [int64(int16(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -7214,6 +7596,7 @@ func rewriteValuegeneric_OpEq16_0(v *Value) bool {
 		if v_1.Op != OpAdd16 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst16 {
 			break
@@ -7234,6 +7617,7 @@ func rewriteValuegeneric_OpEq16_0(v *Value) bool {
 	// cond:
 	// result: (Eq16 (Const16 <t> [int64(int16(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -7244,6 +7628,7 @@ func rewriteValuegeneric_OpEq16_0(v *Value) bool {
 		if v_1.Op != OpAdd16 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst16 {
@@ -7264,10 +7649,12 @@ func rewriteValuegeneric_OpEq16_0(v *Value) bool {
 	// cond:
 	// result: (Eq16 (Const16 <t> [int64(int16(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd16 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst16 {
 			break
@@ -7294,10 +7681,12 @@ func rewriteValuegeneric_OpEq16_0(v *Value) bool {
 	// cond:
 	// result: (Eq16 (Const16 <t> [int64(int16(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd16 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst16 {
@@ -7324,6 +7713,7 @@ func rewriteValuegeneric_OpEq16_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c == d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -7342,6 +7732,7 @@ func rewriteValuegeneric_OpEq16_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c == d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -7365,6 +7756,7 @@ func rewriteValuegeneric_OpEq32_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -7377,6 +7769,7 @@ func rewriteValuegeneric_OpEq32_0(v *Value) bool {
 	// cond:
 	// result: (Eq32 (Const32 <t> [int64(int32(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -7387,6 +7780,7 @@ func rewriteValuegeneric_OpEq32_0(v *Value) bool {
 		if v_1.Op != OpAdd32 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -7407,6 +7801,7 @@ func rewriteValuegeneric_OpEq32_0(v *Value) bool {
 	// cond:
 	// result: (Eq32 (Const32 <t> [int64(int32(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -7417,6 +7812,7 @@ func rewriteValuegeneric_OpEq32_0(v *Value) bool {
 		if v_1.Op != OpAdd32 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst32 {
@@ -7437,10 +7833,12 @@ func rewriteValuegeneric_OpEq32_0(v *Value) bool {
 	// cond:
 	// result: (Eq32 (Const32 <t> [int64(int32(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd32 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst32 {
 			break
@@ -7467,10 +7865,12 @@ func rewriteValuegeneric_OpEq32_0(v *Value) bool {
 	// cond:
 	// result: (Eq32 (Const32 <t> [int64(int32(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd32 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst32 {
@@ -7497,6 +7897,7 @@ func rewriteValuegeneric_OpEq32_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c == d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -7515,6 +7916,7 @@ func rewriteValuegeneric_OpEq32_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c == d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -7538,6 +7940,7 @@ func rewriteValuegeneric_OpEq64_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -7550,6 +7953,7 @@ func rewriteValuegeneric_OpEq64_0(v *Value) bool {
 	// cond:
 	// result: (Eq64 (Const64 <t> [c-d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -7560,6 +7964,7 @@ func rewriteValuegeneric_OpEq64_0(v *Value) bool {
 		if v_1.Op != OpAdd64 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst64 {
 			break
@@ -7580,6 +7985,7 @@ func rewriteValuegeneric_OpEq64_0(v *Value) bool {
 	// cond:
 	// result: (Eq64 (Const64 <t> [c-d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -7590,6 +7996,7 @@ func rewriteValuegeneric_OpEq64_0(v *Value) bool {
 		if v_1.Op != OpAdd64 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst64 {
@@ -7610,10 +8017,12 @@ func rewriteValuegeneric_OpEq64_0(v *Value) bool {
 	// cond:
 	// result: (Eq64 (Const64 <t> [c-d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst64 {
 			break
@@ -7640,10 +8049,12 @@ func rewriteValuegeneric_OpEq64_0(v *Value) bool {
 	// cond:
 	// result: (Eq64 (Const64 <t> [c-d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -7670,6 +8081,7 @@ func rewriteValuegeneric_OpEq64_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c == d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -7688,6 +8100,7 @@ func rewriteValuegeneric_OpEq64_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c == d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -7711,6 +8124,7 @@ func rewriteValuegeneric_OpEq8_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -7723,6 +8137,7 @@ func rewriteValuegeneric_OpEq8_0(v *Value) bool {
 	// cond:
 	// result: (Eq8  (Const8 <t> [int64(int8(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -7733,6 +8148,7 @@ func rewriteValuegeneric_OpEq8_0(v *Value) bool {
 		if v_1.Op != OpAdd8 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst8 {
 			break
@@ -7753,6 +8169,7 @@ func rewriteValuegeneric_OpEq8_0(v *Value) bool {
 	// cond:
 	// result: (Eq8  (Const8 <t> [int64(int8(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -7763,6 +8180,7 @@ func rewriteValuegeneric_OpEq8_0(v *Value) bool {
 		if v_1.Op != OpAdd8 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst8 {
@@ -7783,10 +8201,12 @@ func rewriteValuegeneric_OpEq8_0(v *Value) bool {
 	// cond:
 	// result: (Eq8  (Const8 <t> [int64(int8(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd8 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst8 {
 			break
@@ -7813,10 +8233,12 @@ func rewriteValuegeneric_OpEq8_0(v *Value) bool {
 	// cond:
 	// result: (Eq8  (Const8 <t> [int64(int8(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd8 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst8 {
@@ -7843,6 +8265,7 @@ func rewriteValuegeneric_OpEq8_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c == d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -7861,6 +8284,7 @@ func rewriteValuegeneric_OpEq8_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c == d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -7882,6 +8306,7 @@ func rewriteValuegeneric_OpEqB_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c == d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConstBool {
 			break
@@ -7900,6 +8325,7 @@ func rewriteValuegeneric_OpEqB_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c == d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConstBool {
 			break
@@ -7918,6 +8344,7 @@ func rewriteValuegeneric_OpEqB_0(v *Value) bool {
 	// cond:
 	// result: (Not x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConstBool {
 			break
@@ -7934,6 +8361,7 @@ func rewriteValuegeneric_OpEqB_0(v *Value) bool {
 	// cond:
 	// result: (Not x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConstBool {
@@ -7950,6 +8378,7 @@ func rewriteValuegeneric_OpEqB_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConstBool {
 			break
@@ -7967,6 +8396,7 @@ func rewriteValuegeneric_OpEqB_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConstBool {
@@ -7991,6 +8421,7 @@ func rewriteValuegeneric_OpEqInter_0(v *Value) bool {
 	// cond:
 	// result: (EqPtr  (ITab x) (ITab y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpEqPtr)
@@ -8012,6 +8443,7 @@ func rewriteValuegeneric_OpEqPtr_0(v *Value) bool {
 	// cond:
 	// result: (Not (IsNonNil p))
 	for {
+		_ = v.Args[1]
 		p := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConstNil {
@@ -8027,6 +8459,7 @@ func rewriteValuegeneric_OpEqPtr_0(v *Value) bool {
 	// cond:
 	// result: (Not (IsNonNil p))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConstNil {
 			break
@@ -8042,6 +8475,7 @@ func rewriteValuegeneric_OpEqPtr_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -8054,6 +8488,7 @@ func rewriteValuegeneric_OpEqPtr_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(a == b)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAddr {
 			break
@@ -8076,6 +8511,7 @@ func rewriteValuegeneric_OpEqPtr_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(a == b)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAddr {
 			break
@@ -8105,6 +8541,7 @@ func rewriteValuegeneric_OpEqSlice_0(v *Value) bool {
 	// cond:
 	// result: (EqPtr  (SlicePtr x) (SlicePtr y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpEqPtr)
@@ -8122,6 +8559,7 @@ func rewriteValuegeneric_OpGeq16_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c >= d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -8143,6 +8581,7 @@ func rewriteValuegeneric_OpGeq16U_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(uint16(c) >= uint16(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -8164,6 +8603,7 @@ func rewriteValuegeneric_OpGeq32_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c >= d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -8185,6 +8625,7 @@ func rewriteValuegeneric_OpGeq32U_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(uint32(c) >= uint32(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -8206,6 +8647,7 @@ func rewriteValuegeneric_OpGeq64_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c >= d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -8227,6 +8669,7 @@ func rewriteValuegeneric_OpGeq64U_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(uint64(c) >= uint64(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -8248,6 +8691,7 @@ func rewriteValuegeneric_OpGeq8_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c >= d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -8269,6 +8713,7 @@ func rewriteValuegeneric_OpGeq8U_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(uint8(c)  >= uint8(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -8290,6 +8735,7 @@ func rewriteValuegeneric_OpGreater16_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c > d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -8311,6 +8757,7 @@ func rewriteValuegeneric_OpGreater16U_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(uint16(c) > uint16(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -8332,6 +8779,7 @@ func rewriteValuegeneric_OpGreater32_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c > d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -8353,6 +8801,7 @@ func rewriteValuegeneric_OpGreater32U_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(uint32(c) > uint32(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -8374,6 +8823,7 @@ func rewriteValuegeneric_OpGreater64_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c > d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -8395,6 +8845,7 @@ func rewriteValuegeneric_OpGreater64U_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(uint64(c) > uint64(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -8416,6 +8867,7 @@ func rewriteValuegeneric_OpGreater8_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c > d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -8437,6 +8889,7 @@ func rewriteValuegeneric_OpGreater8U_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(uint8(c)  > uint8(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -8458,6 +8911,7 @@ func rewriteValuegeneric_OpIMake_0(v *Value) bool {
 	// cond:
 	// result: (IMake typ val)
 	for {
+		_ = v.Args[1]
 		typ := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpStructMake1 {
@@ -8473,6 +8927,7 @@ func rewriteValuegeneric_OpIMake_0(v *Value) bool {
 	// cond:
 	// result: (IMake typ val)
 	for {
+		_ = v.Args[1]
 		typ := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpArrayMake1 {
@@ -8492,10 +8947,12 @@ func rewriteValuegeneric_OpInterCall_0(v *Value) bool {
 	// result: (StaticCall [argsize] {devirt(v, itab, off)} mem)
 	for {
 		argsize := v.AuxInt
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpLoad {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpOffPtr {
 			break
@@ -8509,6 +8966,7 @@ func rewriteValuegeneric_OpInterCall_0(v *Value) bool {
 		if v_0_0_0_0.Op != OpIMake {
 			break
 		}
+		_ = v_0_0_0_0.Args[1]
 		v_0_0_0_0_0 := v_0_0_0_0.Args[0]
 		if v_0_0_0_0_0.Op != OpAddr {
 			break
@@ -8535,6 +8993,7 @@ func rewriteValuegeneric_OpIsInBounds_0(v *Value) bool {
 	// cond: (1 << 8)  <= c
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpZeroExt8to32 {
 			break
@@ -8555,6 +9014,7 @@ func rewriteValuegeneric_OpIsInBounds_0(v *Value) bool {
 	// cond: (1 << 8)  <= c
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpZeroExt8to64 {
 			break
@@ -8575,6 +9035,7 @@ func rewriteValuegeneric_OpIsInBounds_0(v *Value) bool {
 	// cond: (1 << 16) <= c
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpZeroExt16to32 {
 			break
@@ -8595,6 +9056,7 @@ func rewriteValuegeneric_OpIsInBounds_0(v *Value) bool {
 	// cond: (1 << 16) <= c
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpZeroExt16to64 {
 			break
@@ -8615,6 +9077,7 @@ func rewriteValuegeneric_OpIsInBounds_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -8627,10 +9090,12 @@ func rewriteValuegeneric_OpIsInBounds_0(v *Value) bool {
 	// cond: 0 <= c && c < d
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd8 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst8 {
 			break
@@ -8652,10 +9117,12 @@ func rewriteValuegeneric_OpIsInBounds_0(v *Value) bool {
 	// cond: 0 <= c && c < d
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd8 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst8 {
 			break
@@ -8677,6 +9144,7 @@ func rewriteValuegeneric_OpIsInBounds_0(v *Value) bool {
 	// cond: 0 <= c && c < d
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpZeroExt8to16 {
 			break
@@ -8685,6 +9153,7 @@ func rewriteValuegeneric_OpIsInBounds_0(v *Value) bool {
 		if v_0_0.Op != OpAnd8 {
 			break
 		}
+		_ = v_0_0.Args[1]
 		v_0_0_0 := v_0_0.Args[0]
 		if v_0_0_0.Op != OpConst8 {
 			break
@@ -8706,6 +9175,7 @@ func rewriteValuegeneric_OpIsInBounds_0(v *Value) bool {
 	// cond: 0 <= c && c < d
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpZeroExt8to16 {
 			break
@@ -8714,6 +9184,7 @@ func rewriteValuegeneric_OpIsInBounds_0(v *Value) bool {
 		if v_0_0.Op != OpAnd8 {
 			break
 		}
+		_ = v_0_0.Args[1]
 		v_0_0_1 := v_0_0.Args[1]
 		if v_0_0_1.Op != OpConst8 {
 			break
@@ -8735,6 +9206,7 @@ func rewriteValuegeneric_OpIsInBounds_0(v *Value) bool {
 	// cond: 0 <= c && c < d
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpZeroExt8to32 {
 			break
@@ -8743,6 +9215,7 @@ func rewriteValuegeneric_OpIsInBounds_0(v *Value) bool {
 		if v_0_0.Op != OpAnd8 {
 			break
 		}
+		_ = v_0_0.Args[1]
 		v_0_0_0 := v_0_0.Args[0]
 		if v_0_0_0.Op != OpConst8 {
 			break
@@ -8767,6 +9240,7 @@ func rewriteValuegeneric_OpIsInBounds_10(v *Value) bool {
 	// cond: 0 <= c && c < d
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpZeroExt8to32 {
 			break
@@ -8775,6 +9249,7 @@ func rewriteValuegeneric_OpIsInBounds_10(v *Value) bool {
 		if v_0_0.Op != OpAnd8 {
 			break
 		}
+		_ = v_0_0.Args[1]
 		v_0_0_1 := v_0_0.Args[1]
 		if v_0_0_1.Op != OpConst8 {
 			break
@@ -8796,6 +9271,7 @@ func rewriteValuegeneric_OpIsInBounds_10(v *Value) bool {
 	// cond: 0 <= c && c < d
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpZeroExt8to64 {
 			break
@@ -8804,6 +9280,7 @@ func rewriteValuegeneric_OpIsInBounds_10(v *Value) bool {
 		if v_0_0.Op != OpAnd8 {
 			break
 		}
+		_ = v_0_0.Args[1]
 		v_0_0_0 := v_0_0.Args[0]
 		if v_0_0_0.Op != OpConst8 {
 			break
@@ -8825,6 +9302,7 @@ func rewriteValuegeneric_OpIsInBounds_10(v *Value) bool {
 	// cond: 0 <= c && c < d
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpZeroExt8to64 {
 			break
@@ -8833,6 +9311,7 @@ func rewriteValuegeneric_OpIsInBounds_10(v *Value) bool {
 		if v_0_0.Op != OpAnd8 {
 			break
 		}
+		_ = v_0_0.Args[1]
 		v_0_0_1 := v_0_0.Args[1]
 		if v_0_0_1.Op != OpConst8 {
 			break
@@ -8854,10 +9333,12 @@ func rewriteValuegeneric_OpIsInBounds_10(v *Value) bool {
 	// cond: 0 <= c && c < d
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd16 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst16 {
 			break
@@ -8879,10 +9360,12 @@ func rewriteValuegeneric_OpIsInBounds_10(v *Value) bool {
 	// cond: 0 <= c && c < d
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd16 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst16 {
 			break
@@ -8904,6 +9387,7 @@ func rewriteValuegeneric_OpIsInBounds_10(v *Value) bool {
 	// cond: 0 <= c && c < d
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpZeroExt16to32 {
 			break
@@ -8912,6 +9396,7 @@ func rewriteValuegeneric_OpIsInBounds_10(v *Value) bool {
 		if v_0_0.Op != OpAnd16 {
 			break
 		}
+		_ = v_0_0.Args[1]
 		v_0_0_0 := v_0_0.Args[0]
 		if v_0_0_0.Op != OpConst16 {
 			break
@@ -8933,6 +9418,7 @@ func rewriteValuegeneric_OpIsInBounds_10(v *Value) bool {
 	// cond: 0 <= c && c < d
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpZeroExt16to32 {
 			break
@@ -8941,6 +9427,7 @@ func rewriteValuegeneric_OpIsInBounds_10(v *Value) bool {
 		if v_0_0.Op != OpAnd16 {
 			break
 		}
+		_ = v_0_0.Args[1]
 		v_0_0_1 := v_0_0.Args[1]
 		if v_0_0_1.Op != OpConst16 {
 			break
@@ -8962,6 +9449,7 @@ func rewriteValuegeneric_OpIsInBounds_10(v *Value) bool {
 	// cond: 0 <= c && c < d
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpZeroExt16to64 {
 			break
@@ -8970,6 +9458,7 @@ func rewriteValuegeneric_OpIsInBounds_10(v *Value) bool {
 		if v_0_0.Op != OpAnd16 {
 			break
 		}
+		_ = v_0_0.Args[1]
 		v_0_0_0 := v_0_0.Args[0]
 		if v_0_0_0.Op != OpConst16 {
 			break
@@ -8991,6 +9480,7 @@ func rewriteValuegeneric_OpIsInBounds_10(v *Value) bool {
 	// cond: 0 <= c && c < d
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpZeroExt16to64 {
 			break
@@ -8999,6 +9489,7 @@ func rewriteValuegeneric_OpIsInBounds_10(v *Value) bool {
 		if v_0_0.Op != OpAnd16 {
 			break
 		}
+		_ = v_0_0.Args[1]
 		v_0_0_1 := v_0_0.Args[1]
 		if v_0_0_1.Op != OpConst16 {
 			break
@@ -9020,10 +9511,12 @@ func rewriteValuegeneric_OpIsInBounds_10(v *Value) bool {
 	// cond: 0 <= c && c < d
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd32 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst32 {
 			break
@@ -9048,10 +9541,12 @@ func rewriteValuegeneric_OpIsInBounds_20(v *Value) bool {
 	// cond: 0 <= c && c < d
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd32 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst32 {
 			break
@@ -9073,6 +9568,7 @@ func rewriteValuegeneric_OpIsInBounds_20(v *Value) bool {
 	// cond: 0 <= c && c < d
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpZeroExt32to64 {
 			break
@@ -9081,6 +9577,7 @@ func rewriteValuegeneric_OpIsInBounds_20(v *Value) bool {
 		if v_0_0.Op != OpAnd32 {
 			break
 		}
+		_ = v_0_0.Args[1]
 		v_0_0_0 := v_0_0.Args[0]
 		if v_0_0_0.Op != OpConst32 {
 			break
@@ -9102,6 +9599,7 @@ func rewriteValuegeneric_OpIsInBounds_20(v *Value) bool {
 	// cond: 0 <= c && c < d
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpZeroExt32to64 {
 			break
@@ -9110,6 +9608,7 @@ func rewriteValuegeneric_OpIsInBounds_20(v *Value) bool {
 		if v_0_0.Op != OpAnd32 {
 			break
 		}
+		_ = v_0_0.Args[1]
 		v_0_0_1 := v_0_0.Args[1]
 		if v_0_0_1.Op != OpConst32 {
 			break
@@ -9131,10 +9630,12 @@ func rewriteValuegeneric_OpIsInBounds_20(v *Value) bool {
 	// cond: 0 <= c && c < d
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst64 {
 			break
@@ -9156,10 +9657,12 @@ func rewriteValuegeneric_OpIsInBounds_20(v *Value) bool {
 	// cond: 0 <= c && c < d
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
 			break
@@ -9181,6 +9684,7 @@ func rewriteValuegeneric_OpIsInBounds_20(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(0 <= c && c < d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -9199,6 +9703,7 @@ func rewriteValuegeneric_OpIsInBounds_20(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(0 <= c && c < d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -9217,10 +9722,12 @@ func rewriteValuegeneric_OpIsInBounds_20(v *Value) bool {
 	// cond:
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMod32u {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[1]
 		if y != v.Args[1] {
 			break
@@ -9233,10 +9740,12 @@ func rewriteValuegeneric_OpIsInBounds_20(v *Value) bool {
 	// cond:
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMod64u {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[1]
 		if y != v.Args[1] {
 			break
@@ -9267,6 +9776,7 @@ func rewriteValuegeneric_OpIsSliceInBounds_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -9279,10 +9789,12 @@ func rewriteValuegeneric_OpIsSliceInBounds_0(v *Value) bool {
 	// cond: 0 <= c && c <= d
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd32 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst32 {
 			break
@@ -9304,10 +9816,12 @@ func rewriteValuegeneric_OpIsSliceInBounds_0(v *Value) bool {
 	// cond: 0 <= c && c <= d
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd32 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst32 {
 			break
@@ -9329,10 +9843,12 @@ func rewriteValuegeneric_OpIsSliceInBounds_0(v *Value) bool {
 	// cond: 0 <= c && c <= d
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst64 {
 			break
@@ -9354,10 +9870,12 @@ func rewriteValuegeneric_OpIsSliceInBounds_0(v *Value) bool {
 	// cond: 0 <= c && c <= d
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
 			break
@@ -9379,6 +9897,7 @@ func rewriteValuegeneric_OpIsSliceInBounds_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -9394,6 +9913,7 @@ func rewriteValuegeneric_OpIsSliceInBounds_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -9409,6 +9929,7 @@ func rewriteValuegeneric_OpIsSliceInBounds_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(0 <= c && c <= d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -9427,6 +9948,7 @@ func rewriteValuegeneric_OpIsSliceInBounds_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(0 <= c && c <= d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -9445,6 +9967,7 @@ func rewriteValuegeneric_OpIsSliceInBounds_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpSliceLen {
 			break
@@ -9468,6 +9991,7 @@ func rewriteValuegeneric_OpLeq16_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c <= d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -9489,6 +10013,7 @@ func rewriteValuegeneric_OpLeq16U_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(uint16(c) <= uint16(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -9510,6 +10035,7 @@ func rewriteValuegeneric_OpLeq32_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c <= d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -9531,6 +10057,7 @@ func rewriteValuegeneric_OpLeq32U_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(uint32(c) <= uint32(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -9552,6 +10079,7 @@ func rewriteValuegeneric_OpLeq64_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c <= d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -9573,6 +10101,7 @@ func rewriteValuegeneric_OpLeq64U_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(uint64(c) <= uint64(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -9594,6 +10123,7 @@ func rewriteValuegeneric_OpLeq8_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c <= d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -9615,6 +10145,7 @@ func rewriteValuegeneric_OpLeq8U_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(uint8(c)  <= uint8(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -9636,6 +10167,7 @@ func rewriteValuegeneric_OpLess16_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c < d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -9657,6 +10189,7 @@ func rewriteValuegeneric_OpLess16U_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(uint16(c) < uint16(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -9678,6 +10211,7 @@ func rewriteValuegeneric_OpLess32_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c < d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -9699,6 +10233,7 @@ func rewriteValuegeneric_OpLess32U_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(uint32(c) < uint32(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -9720,6 +10255,7 @@ func rewriteValuegeneric_OpLess64_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c < d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -9741,6 +10277,7 @@ func rewriteValuegeneric_OpLess64U_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(uint64(c) < uint64(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -9762,6 +10299,7 @@ func rewriteValuegeneric_OpLess8_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c < d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -9783,6 +10321,7 @@ func rewriteValuegeneric_OpLess8U_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(uint8(c)  < uint8(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -9809,12 +10348,14 @@ func rewriteValuegeneric_OpLoad_0(v *Value) bool {
 	// result: x
 	for {
 		t1 := v.Type
+		_ = v.Args[1]
 		p1 := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpStore {
 			break
 		}
 		t2 := v_1.Aux
+		_ = v_1.Args[2]
 		p2 := v_1.Args[0]
 		x := v_1.Args[1]
 		if !(isSamePtr(p1, p2) && t1.Compare(x.Type) == types.CMPeq && t1.Size() == t2.(*types.Type).Size()) {
@@ -9830,6 +10371,7 @@ func rewriteValuegeneric_OpLoad_0(v *Value) bool {
 	// result: (StructMake0)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		if !(t.IsStruct() && t.NumFields() == 0 && fe.CanSSA(t)) {
 			break
 		}
@@ -9841,6 +10383,7 @@ func rewriteValuegeneric_OpLoad_0(v *Value) bool {
 	// result: (StructMake1     (Load <t.FieldType(0)> (OffPtr <t.FieldType(0).PtrTo()> [0] ptr) mem))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.IsStruct() && t.NumFields() == 1 && fe.CanSSA(t)) {
@@ -9861,6 +10404,7 @@ func rewriteValuegeneric_OpLoad_0(v *Value) bool {
 	// result: (StructMake2     (Load <t.FieldType(0)> (OffPtr <t.FieldType(0).PtrTo()> [0]             ptr) mem)     (Load <t.FieldType(1)> (OffPtr <t.FieldType(1).PtrTo()> [t.FieldOff(1)] ptr) mem))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.IsStruct() && t.NumFields() == 2 && fe.CanSSA(t)) {
@@ -9888,6 +10432,7 @@ func rewriteValuegeneric_OpLoad_0(v *Value) bool {
 	// result: (StructMake3     (Load <t.FieldType(0)> (OffPtr <t.FieldType(0).PtrTo()> [0]             ptr) mem)     (Load <t.FieldType(1)> (OffPtr <t.FieldType(1).PtrTo()> [t.FieldOff(1)] ptr) mem)     (Load <t.FieldType(2)> (OffPtr <t.FieldType(2).PtrTo()> [t.FieldOff(2)] ptr) mem))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.IsStruct() && t.NumFields() == 3 && fe.CanSSA(t)) {
@@ -9922,6 +10467,7 @@ func rewriteValuegeneric_OpLoad_0(v *Value) bool {
 	// result: (StructMake4     (Load <t.FieldType(0)> (OffPtr <t.FieldType(0).PtrTo()> [0]             ptr) mem)     (Load <t.FieldType(1)> (OffPtr <t.FieldType(1).PtrTo()> [t.FieldOff(1)] ptr) mem)     (Load <t.FieldType(2)> (OffPtr <t.FieldType(2).PtrTo()> [t.FieldOff(2)] ptr) mem)     (Load <t.FieldType(3)> (OffPtr <t.FieldType(3).PtrTo()> [t.FieldOff(3)] ptr) mem))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.IsStruct() && t.NumFields() == 4 && fe.CanSSA(t)) {
@@ -9963,6 +10509,7 @@ func rewriteValuegeneric_OpLoad_0(v *Value) bool {
 	// result: (ArrayMake0)
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		if !(t.IsArray() && t.NumElem() == 0) {
 			break
 		}
@@ -9974,6 +10521,7 @@ func rewriteValuegeneric_OpLoad_0(v *Value) bool {
 	// result: (ArrayMake1 (Load <t.ElemType()> ptr mem))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		mem := v.Args[1]
 		if !(t.IsArray() && t.NumElem() == 1 && fe.CanSSA(t)) {
@@ -9996,6 +10544,7 @@ func rewriteValuegeneric_OpLsh16x16_0(v *Value) bool {
 	// result: (Lsh16x64  x (Const64 <t> [int64(uint16(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -10013,6 +10562,7 @@ func rewriteValuegeneric_OpLsh16x16_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -10034,6 +10584,7 @@ func rewriteValuegeneric_OpLsh16x32_0(v *Value) bool {
 	// result: (Lsh16x64  x (Const64 <t> [int64(uint32(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -10051,6 +10602,7 @@ func rewriteValuegeneric_OpLsh16x32_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -10073,6 +10625,7 @@ func rewriteValuegeneric_OpLsh16x64_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [int64(int16(c) << uint64(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -10091,6 +10644,7 @@ func rewriteValuegeneric_OpLsh16x64_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -10108,6 +10662,7 @@ func rewriteValuegeneric_OpLsh16x64_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -10123,6 +10678,7 @@ func rewriteValuegeneric_OpLsh16x64_0(v *Value) bool {
 	// cond: uint64(c) >= 16
 	// result: (Const16 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -10140,10 +10696,12 @@ func rewriteValuegeneric_OpLsh16x64_0(v *Value) bool {
 	// result: (Lsh16x64 x (Const64 <t> [c+d]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpLsh16x64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -10169,14 +10727,17 @@ func rewriteValuegeneric_OpLsh16x64_0(v *Value) bool {
 	// cond: uint64(c1) >= uint64(c2) && uint64(c3) >= uint64(c2) && !uaddOvf(c1-c2, c3)
 	// result: (Lsh16x64 x (Const64 <typ.UInt64> [c1-c2+c3]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpRsh16Ux64 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpLsh16x64 {
 			break
 		}
+		_ = v_0_0.Args[1]
 		x := v_0_0.Args[0]
 		v_0_0_1 := v_0_0.Args[1]
 		if v_0_0_1.Op != OpConst64 {
@@ -10213,6 +10774,7 @@ func rewriteValuegeneric_OpLsh16x8_0(v *Value) bool {
 	// result: (Lsh16x64  x (Const64 <t> [int64(uint8(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
@@ -10230,6 +10792,7 @@ func rewriteValuegeneric_OpLsh16x8_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -10251,6 +10814,7 @@ func rewriteValuegeneric_OpLsh32x16_0(v *Value) bool {
 	// result: (Lsh32x64  x (Const64 <t> [int64(uint16(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -10268,6 +10832,7 @@ func rewriteValuegeneric_OpLsh32x16_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -10289,6 +10854,7 @@ func rewriteValuegeneric_OpLsh32x32_0(v *Value) bool {
 	// result: (Lsh32x64  x (Const64 <t> [int64(uint32(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -10306,6 +10872,7 @@ func rewriteValuegeneric_OpLsh32x32_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -10328,6 +10895,7 @@ func rewriteValuegeneric_OpLsh32x64_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [int64(int32(c) << uint64(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -10346,6 +10914,7 @@ func rewriteValuegeneric_OpLsh32x64_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -10363,6 +10932,7 @@ func rewriteValuegeneric_OpLsh32x64_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -10378,6 +10948,7 @@ func rewriteValuegeneric_OpLsh32x64_0(v *Value) bool {
 	// cond: uint64(c) >= 32
 	// result: (Const32 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -10395,10 +10966,12 @@ func rewriteValuegeneric_OpLsh32x64_0(v *Value) bool {
 	// result: (Lsh32x64 x (Const64 <t> [c+d]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpLsh32x64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -10424,14 +10997,17 @@ func rewriteValuegeneric_OpLsh32x64_0(v *Value) bool {
 	// cond: uint64(c1) >= uint64(c2) && uint64(c3) >= uint64(c2) && !uaddOvf(c1-c2, c3)
 	// result: (Lsh32x64 x (Const64 <typ.UInt64> [c1-c2+c3]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpRsh32Ux64 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpLsh32x64 {
 			break
 		}
+		_ = v_0_0.Args[1]
 		x := v_0_0.Args[0]
 		v_0_0_1 := v_0_0.Args[1]
 		if v_0_0_1.Op != OpConst64 {
@@ -10468,6 +11044,7 @@ func rewriteValuegeneric_OpLsh32x8_0(v *Value) bool {
 	// result: (Lsh32x64  x (Const64 <t> [int64(uint8(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
@@ -10485,6 +11062,7 @@ func rewriteValuegeneric_OpLsh32x8_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -10506,6 +11084,7 @@ func rewriteValuegeneric_OpLsh64x16_0(v *Value) bool {
 	// result: (Lsh64x64  x (Const64 <t> [int64(uint16(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -10523,6 +11102,7 @@ func rewriteValuegeneric_OpLsh64x16_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -10544,6 +11124,7 @@ func rewriteValuegeneric_OpLsh64x32_0(v *Value) bool {
 	// result: (Lsh64x64  x (Const64 <t> [int64(uint32(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -10561,6 +11142,7 @@ func rewriteValuegeneric_OpLsh64x32_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -10583,6 +11165,7 @@ func rewriteValuegeneric_OpLsh64x64_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [c << uint64(d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -10601,6 +11184,7 @@ func rewriteValuegeneric_OpLsh64x64_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -10618,6 +11202,7 @@ func rewriteValuegeneric_OpLsh64x64_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -10633,6 +11218,7 @@ func rewriteValuegeneric_OpLsh64x64_0(v *Value) bool {
 	// cond: uint64(c) >= 64
 	// result: (Const64 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -10650,10 +11236,12 @@ func rewriteValuegeneric_OpLsh64x64_0(v *Value) bool {
 	// result: (Lsh64x64 x (Const64 <t> [c+d]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpLsh64x64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -10679,14 +11267,17 @@ func rewriteValuegeneric_OpLsh64x64_0(v *Value) bool {
 	// cond: uint64(c1) >= uint64(c2) && uint64(c3) >= uint64(c2) && !uaddOvf(c1-c2, c3)
 	// result: (Lsh64x64 x (Const64 <typ.UInt64> [c1-c2+c3]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpRsh64Ux64 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpLsh64x64 {
 			break
 		}
+		_ = v_0_0.Args[1]
 		x := v_0_0.Args[0]
 		v_0_0_1 := v_0_0.Args[1]
 		if v_0_0_1.Op != OpConst64 {
@@ -10723,6 +11314,7 @@ func rewriteValuegeneric_OpLsh64x8_0(v *Value) bool {
 	// result: (Lsh64x64  x (Const64 <t> [int64(uint8(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
@@ -10740,6 +11332,7 @@ func rewriteValuegeneric_OpLsh64x8_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -10761,6 +11354,7 @@ func rewriteValuegeneric_OpLsh8x16_0(v *Value) bool {
 	// result: (Lsh8x64  x (Const64 <t> [int64(uint16(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -10778,6 +11372,7 @@ func rewriteValuegeneric_OpLsh8x16_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -10799,6 +11394,7 @@ func rewriteValuegeneric_OpLsh8x32_0(v *Value) bool {
 	// result: (Lsh8x64  x (Const64 <t> [int64(uint32(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -10816,6 +11412,7 @@ func rewriteValuegeneric_OpLsh8x32_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -10838,6 +11435,7 @@ func rewriteValuegeneric_OpLsh8x64_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [int64(int8(c) << uint64(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -10856,6 +11454,7 @@ func rewriteValuegeneric_OpLsh8x64_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -10873,6 +11472,7 @@ func rewriteValuegeneric_OpLsh8x64_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -10888,6 +11488,7 @@ func rewriteValuegeneric_OpLsh8x64_0(v *Value) bool {
 	// cond: uint64(c) >= 8
 	// result: (Const8  [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -10905,10 +11506,12 @@ func rewriteValuegeneric_OpLsh8x64_0(v *Value) bool {
 	// result: (Lsh8x64  x (Const64 <t> [c+d]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpLsh8x64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -10934,14 +11537,17 @@ func rewriteValuegeneric_OpLsh8x64_0(v *Value) bool {
 	// cond: uint64(c1) >= uint64(c2) && uint64(c3) >= uint64(c2) && !uaddOvf(c1-c2, c3)
 	// result: (Lsh8x64 x (Const64 <typ.UInt64> [c1-c2+c3]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpRsh8Ux64 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpLsh8x64 {
 			break
 		}
+		_ = v_0_0.Args[1]
 		x := v_0_0.Args[0]
 		v_0_0_1 := v_0_0.Args[1]
 		if v_0_0_1.Op != OpConst64 {
@@ -10978,6 +11584,7 @@ func rewriteValuegeneric_OpLsh8x8_0(v *Value) bool {
 	// result: (Lsh8x64  x (Const64 <t> [int64(uint8(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
@@ -10995,6 +11602,7 @@ func rewriteValuegeneric_OpLsh8x8_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -11015,6 +11623,7 @@ func rewriteValuegeneric_OpMod16_0(v *Value) bool {
 	// cond: d != 0
 	// result: (Const16 [int64(int16(c % d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -11037,6 +11646,7 @@ func rewriteValuegeneric_OpMod16_0(v *Value) bool {
 	// result: (Mod16 <t> n (Const16 <t> [-c]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		n := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -11059,6 +11669,7 @@ func rewriteValuegeneric_OpMod16_0(v *Value) bool {
 	// result: (Sub16 x (Mul16 <t> (Div16  <t> x (Const16 <t> [c])) (Const16 <t> [c])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -11092,6 +11703,7 @@ func rewriteValuegeneric_OpMod16u_0(v *Value) bool {
 	// cond: d != 0
 	// result: (Const16 [int64(uint16(c) % uint16(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -11114,6 +11726,7 @@ func rewriteValuegeneric_OpMod16u_0(v *Value) bool {
 	// result: (And16 n (Const16 <t> [(c&0xffff)-1]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		n := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -11135,6 +11748,7 @@ func rewriteValuegeneric_OpMod16u_0(v *Value) bool {
 	// result: (Sub16 x (Mul16 <t> (Div16u <t> x (Const16 <t> [c])) (Const16 <t> [c])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -11168,6 +11782,7 @@ func rewriteValuegeneric_OpMod32_0(v *Value) bool {
 	// cond: d != 0
 	// result: (Const32 [int64(int32(c % d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -11190,6 +11805,7 @@ func rewriteValuegeneric_OpMod32_0(v *Value) bool {
 	// result: (Mod32 <t> n (Const32 <t> [-c]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		n := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -11212,6 +11828,7 @@ func rewriteValuegeneric_OpMod32_0(v *Value) bool {
 	// result: (Sub32 x (Mul32 <t> (Div32  <t> x (Const32 <t> [c])) (Const32 <t> [c])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -11245,6 +11862,7 @@ func rewriteValuegeneric_OpMod32u_0(v *Value) bool {
 	// cond: d != 0
 	// result: (Const32 [int64(uint32(c) % uint32(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -11267,6 +11885,7 @@ func rewriteValuegeneric_OpMod32u_0(v *Value) bool {
 	// result: (And32 n (Const32 <t> [(c&0xffffffff)-1]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		n := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -11288,6 +11907,7 @@ func rewriteValuegeneric_OpMod32u_0(v *Value) bool {
 	// result: (Sub32 x (Mul32 <t> (Div32u <t> x (Const32 <t> [c])) (Const32 <t> [c])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -11321,6 +11941,7 @@ func rewriteValuegeneric_OpMod64_0(v *Value) bool {
 	// cond: d != 0
 	// result: (Const64 [c % d])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -11343,6 +11964,7 @@ func rewriteValuegeneric_OpMod64_0(v *Value) bool {
 	// result: (Mod64 <t> n (Const64 <t> [-c]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		n := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -11365,6 +11987,7 @@ func rewriteValuegeneric_OpMod64_0(v *Value) bool {
 	// result: (Sub64 x (Mul64 <t> (Div64  <t> x (Const64 <t> [c])) (Const64 <t> [c])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -11398,6 +12021,7 @@ func rewriteValuegeneric_OpMod64u_0(v *Value) bool {
 	// cond: d != 0
 	// result: (Const64 [int64(uint64(c) % uint64(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -11420,6 +12044,7 @@ func rewriteValuegeneric_OpMod64u_0(v *Value) bool {
 	// result: (And64 n (Const64 <t> [c-1]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		n := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -11441,6 +12066,7 @@ func rewriteValuegeneric_OpMod64u_0(v *Value) bool {
 	// result: (Sub64 x (Mul64 <t> (Div64u <t> x (Const64 <t> [c])) (Const64 <t> [c])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -11474,6 +12100,7 @@ func rewriteValuegeneric_OpMod8_0(v *Value) bool {
 	// cond: d != 0
 	// result: (Const8  [int64(int8(c % d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -11496,6 +12123,7 @@ func rewriteValuegeneric_OpMod8_0(v *Value) bool {
 	// result: (Mod8  <t> n (Const8  <t> [-c]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		n := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
@@ -11518,6 +12146,7 @@ func rewriteValuegeneric_OpMod8_0(v *Value) bool {
 	// result: (Sub8  x (Mul8  <t> (Div8   <t> x (Const8  <t> [c])) (Const8  <t> [c])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
@@ -11551,6 +12180,7 @@ func rewriteValuegeneric_OpMod8u_0(v *Value) bool {
 	// cond: d != 0
 	// result: (Const8  [int64(uint8(c) % uint8(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -11573,6 +12203,7 @@ func rewriteValuegeneric_OpMod8u_0(v *Value) bool {
 	// result: (And8 n (Const8 <t> [(c&0xff)-1]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		n := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
@@ -11594,6 +12225,7 @@ func rewriteValuegeneric_OpMod8u_0(v *Value) bool {
 	// result: (Sub8  x (Mul8  <t> (Div8u  <t> x (Const8  <t> [c])) (Const8  <t> [c])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
@@ -11629,6 +12261,7 @@ func rewriteValuegeneric_OpMul16_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [int64(int16(c*d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -11647,6 +12280,7 @@ func rewriteValuegeneric_OpMul16_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [int64(int16(c*d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -11665,6 +12299,7 @@ func rewriteValuegeneric_OpMul16_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -11682,6 +12317,7 @@ func rewriteValuegeneric_OpMul16_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -11699,6 +12335,7 @@ func rewriteValuegeneric_OpMul16_0(v *Value) bool {
 	// cond:
 	// result: (Neg16 x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -11715,6 +12352,7 @@ func rewriteValuegeneric_OpMul16_0(v *Value) bool {
 	// cond:
 	// result: (Neg16 x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -11732,6 +12370,7 @@ func rewriteValuegeneric_OpMul16_0(v *Value) bool {
 	// result: (Lsh16x64 <t> n (Const64 <typ.UInt64> [log2(c)]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		n := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -11754,6 +12393,7 @@ func rewriteValuegeneric_OpMul16_0(v *Value) bool {
 	// result: (Lsh16x64 <t> n (Const64 <typ.UInt64> [log2(c)]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -11776,6 +12416,7 @@ func rewriteValuegeneric_OpMul16_0(v *Value) bool {
 	// result: (Neg16 (Lsh16x64 <t> n (Const64 <typ.UInt64> [log2(-c)])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		n := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -11799,6 +12440,7 @@ func rewriteValuegeneric_OpMul16_0(v *Value) bool {
 	// result: (Neg16 (Lsh16x64 <t> n (Const64 <typ.UInt64> [log2(-c)])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -11826,6 +12468,7 @@ func rewriteValuegeneric_OpMul16_10(v *Value) bool {
 	// cond:
 	// result: (Const16 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -11841,6 +12484,7 @@ func rewriteValuegeneric_OpMul16_10(v *Value) bool {
 	// cond:
 	// result: (Const16 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
 			break
@@ -11856,6 +12500,7 @@ func rewriteValuegeneric_OpMul16_10(v *Value) bool {
 	// cond:
 	// result: (Mul16 (Const16 <t> [int64(int16(c*d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -11866,6 +12511,7 @@ func rewriteValuegeneric_OpMul16_10(v *Value) bool {
 		if v_1.Op != OpMul16 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst16 {
 			break
@@ -11886,6 +12532,7 @@ func rewriteValuegeneric_OpMul16_10(v *Value) bool {
 	// cond:
 	// result: (Mul16 (Const16 <t> [int64(int16(c*d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -11896,6 +12543,7 @@ func rewriteValuegeneric_OpMul16_10(v *Value) bool {
 		if v_1.Op != OpMul16 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst16 {
@@ -11916,10 +12564,12 @@ func rewriteValuegeneric_OpMul16_10(v *Value) bool {
 	// cond:
 	// result: (Mul16 (Const16 <t> [int64(int16(c*d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMul16 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst16 {
 			break
@@ -11946,10 +12596,12 @@ func rewriteValuegeneric_OpMul16_10(v *Value) bool {
 	// cond:
 	// result: (Mul16 (Const16 <t> [int64(int16(c*d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMul16 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst16 {
@@ -11983,6 +12635,7 @@ func rewriteValuegeneric_OpMul32_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [int64(int32(c*d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -12001,6 +12654,7 @@ func rewriteValuegeneric_OpMul32_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [int64(int32(c*d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -12019,6 +12673,7 @@ func rewriteValuegeneric_OpMul32_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -12036,6 +12691,7 @@ func rewriteValuegeneric_OpMul32_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -12053,6 +12709,7 @@ func rewriteValuegeneric_OpMul32_0(v *Value) bool {
 	// cond:
 	// result: (Neg32 x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -12069,6 +12726,7 @@ func rewriteValuegeneric_OpMul32_0(v *Value) bool {
 	// cond:
 	// result: (Neg32 x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -12086,6 +12744,7 @@ func rewriteValuegeneric_OpMul32_0(v *Value) bool {
 	// result: (Lsh32x64 <t> n (Const64 <typ.UInt64> [log2(c)]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		n := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -12108,6 +12767,7 @@ func rewriteValuegeneric_OpMul32_0(v *Value) bool {
 	// result: (Lsh32x64 <t> n (Const64 <typ.UInt64> [log2(c)]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -12130,6 +12790,7 @@ func rewriteValuegeneric_OpMul32_0(v *Value) bool {
 	// result: (Neg32 (Lsh32x64 <t> n (Const64 <typ.UInt64> [log2(-c)])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		n := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -12153,6 +12814,7 @@ func rewriteValuegeneric_OpMul32_0(v *Value) bool {
 	// result: (Neg32 (Lsh32x64 <t> n (Const64 <typ.UInt64> [log2(-c)])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -12180,6 +12842,7 @@ func rewriteValuegeneric_OpMul32_10(v *Value) bool {
 	// cond:
 	// result: (Add32 (Const32 <t> [int64(int32(c*d))]) (Mul32 <t> (Const32 <t> [c]) x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -12193,6 +12856,7 @@ func rewriteValuegeneric_OpMul32_10(v *Value) bool {
 		if v_1.Type != t {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -12218,6 +12882,7 @@ func rewriteValuegeneric_OpMul32_10(v *Value) bool {
 	// cond:
 	// result: (Add32 (Const32 <t> [int64(int32(c*d))]) (Mul32 <t> (Const32 <t> [c]) x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -12231,6 +12896,7 @@ func rewriteValuegeneric_OpMul32_10(v *Value) bool {
 		if v_1.Type != t {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst32 {
@@ -12256,11 +12922,13 @@ func rewriteValuegeneric_OpMul32_10(v *Value) bool {
 	// cond:
 	// result: (Add32 (Const32 <t> [int64(int32(c*d))]) (Mul32 <t> (Const32 <t> [c]) x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd32 {
 			break
 		}
 		t := v_0.Type
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst32 {
 			break
@@ -12294,11 +12962,13 @@ func rewriteValuegeneric_OpMul32_10(v *Value) bool {
 	// cond:
 	// result: (Add32 (Const32 <t> [int64(int32(c*d))]) (Mul32 <t> (Const32 <t> [c]) x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd32 {
 			break
 		}
 		t := v_0.Type
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst32 {
@@ -12332,6 +13002,7 @@ func rewriteValuegeneric_OpMul32_10(v *Value) bool {
 	// cond:
 	// result: (Const32 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -12347,6 +13018,7 @@ func rewriteValuegeneric_OpMul32_10(v *Value) bool {
 	// cond:
 	// result: (Const32 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
 			break
@@ -12362,6 +13034,7 @@ func rewriteValuegeneric_OpMul32_10(v *Value) bool {
 	// cond:
 	// result: (Mul32 (Const32 <t> [int64(int32(c*d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -12372,6 +13045,7 @@ func rewriteValuegeneric_OpMul32_10(v *Value) bool {
 		if v_1.Op != OpMul32 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -12392,6 +13066,7 @@ func rewriteValuegeneric_OpMul32_10(v *Value) bool {
 	// cond:
 	// result: (Mul32 (Const32 <t> [int64(int32(c*d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -12402,6 +13077,7 @@ func rewriteValuegeneric_OpMul32_10(v *Value) bool {
 		if v_1.Op != OpMul32 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst32 {
@@ -12422,10 +13098,12 @@ func rewriteValuegeneric_OpMul32_10(v *Value) bool {
 	// cond:
 	// result: (Mul32 (Const32 <t> [int64(int32(c*d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMul32 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst32 {
 			break
@@ -12452,10 +13130,12 @@ func rewriteValuegeneric_OpMul32_10(v *Value) bool {
 	// cond:
 	// result: (Mul32 (Const32 <t> [int64(int32(c*d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMul32 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst32 {
@@ -12485,6 +13165,7 @@ func rewriteValuegeneric_OpMul32F_0(v *Value) bool {
 	// cond:
 	// result: (Const32F [f2i(float64(i2f32(c) * i2f32(d)))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32F {
 			break
@@ -12503,6 +13184,7 @@ func rewriteValuegeneric_OpMul32F_0(v *Value) bool {
 	// cond:
 	// result: (Const32F [f2i(float64(i2f32(c) * i2f32(d)))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32F {
 			break
@@ -12521,6 +13203,7 @@ func rewriteValuegeneric_OpMul32F_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32F {
@@ -12538,6 +13221,7 @@ func rewriteValuegeneric_OpMul32F_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32F {
 			break
@@ -12555,6 +13239,7 @@ func rewriteValuegeneric_OpMul32F_0(v *Value) bool {
 	// cond:
 	// result: (Neg32F x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32F {
@@ -12571,6 +13256,7 @@ func rewriteValuegeneric_OpMul32F_0(v *Value) bool {
 	// cond:
 	// result: (Neg32F x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32F {
 			break
@@ -12587,6 +13273,7 @@ func rewriteValuegeneric_OpMul32F_0(v *Value) bool {
 	// cond:
 	// result: (Add32F x x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32F {
@@ -12604,6 +13291,7 @@ func rewriteValuegeneric_OpMul32F_0(v *Value) bool {
 	// cond:
 	// result: (Add32F x x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32F {
 			break
@@ -12628,6 +13316,7 @@ func rewriteValuegeneric_OpMul64_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [c*d])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -12646,6 +13335,7 @@ func rewriteValuegeneric_OpMul64_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [c*d])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -12664,6 +13354,7 @@ func rewriteValuegeneric_OpMul64_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -12681,6 +13372,7 @@ func rewriteValuegeneric_OpMul64_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -12698,6 +13390,7 @@ func rewriteValuegeneric_OpMul64_0(v *Value) bool {
 	// cond:
 	// result: (Neg64 x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -12714,6 +13407,7 @@ func rewriteValuegeneric_OpMul64_0(v *Value) bool {
 	// cond:
 	// result: (Neg64 x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -12731,6 +13425,7 @@ func rewriteValuegeneric_OpMul64_0(v *Value) bool {
 	// result: (Lsh64x64 <t> n (Const64 <typ.UInt64> [log2(c)]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		n := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -12753,6 +13448,7 @@ func rewriteValuegeneric_OpMul64_0(v *Value) bool {
 	// result: (Lsh64x64 <t> n (Const64 <typ.UInt64> [log2(c)]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -12775,6 +13471,7 @@ func rewriteValuegeneric_OpMul64_0(v *Value) bool {
 	// result: (Neg64 (Lsh64x64 <t> n (Const64 <typ.UInt64> [log2(-c)])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		n := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -12798,6 +13495,7 @@ func rewriteValuegeneric_OpMul64_0(v *Value) bool {
 	// result: (Neg64 (Lsh64x64 <t> n (Const64 <typ.UInt64> [log2(-c)])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -12825,6 +13523,7 @@ func rewriteValuegeneric_OpMul64_10(v *Value) bool {
 	// cond:
 	// result: (Add64 (Const64 <t> [c*d]) (Mul64 <t> (Const64 <t> [c]) x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -12838,6 +13537,7 @@ func rewriteValuegeneric_OpMul64_10(v *Value) bool {
 		if v_1.Type != t {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst64 {
 			break
@@ -12863,6 +13563,7 @@ func rewriteValuegeneric_OpMul64_10(v *Value) bool {
 	// cond:
 	// result: (Add64 (Const64 <t> [c*d]) (Mul64 <t> (Const64 <t> [c]) x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -12876,6 +13577,7 @@ func rewriteValuegeneric_OpMul64_10(v *Value) bool {
 		if v_1.Type != t {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst64 {
@@ -12901,11 +13603,13 @@ func rewriteValuegeneric_OpMul64_10(v *Value) bool {
 	// cond:
 	// result: (Add64 (Const64 <t> [c*d]) (Mul64 <t> (Const64 <t> [c]) x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd64 {
 			break
 		}
 		t := v_0.Type
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst64 {
 			break
@@ -12939,11 +13643,13 @@ func rewriteValuegeneric_OpMul64_10(v *Value) bool {
 	// cond:
 	// result: (Add64 (Const64 <t> [c*d]) (Mul64 <t> (Const64 <t> [c]) x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd64 {
 			break
 		}
 		t := v_0.Type
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -12977,6 +13683,7 @@ func rewriteValuegeneric_OpMul64_10(v *Value) bool {
 	// cond:
 	// result: (Const64 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -12992,6 +13699,7 @@ func rewriteValuegeneric_OpMul64_10(v *Value) bool {
 	// cond:
 	// result: (Const64 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -13007,6 +13715,7 @@ func rewriteValuegeneric_OpMul64_10(v *Value) bool {
 	// cond:
 	// result: (Mul64 (Const64 <t> [c*d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -13017,6 +13726,7 @@ func rewriteValuegeneric_OpMul64_10(v *Value) bool {
 		if v_1.Op != OpMul64 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst64 {
 			break
@@ -13037,6 +13747,7 @@ func rewriteValuegeneric_OpMul64_10(v *Value) bool {
 	// cond:
 	// result: (Mul64 (Const64 <t> [c*d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -13047,6 +13758,7 @@ func rewriteValuegeneric_OpMul64_10(v *Value) bool {
 		if v_1.Op != OpMul64 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst64 {
@@ -13067,10 +13779,12 @@ func rewriteValuegeneric_OpMul64_10(v *Value) bool {
 	// cond:
 	// result: (Mul64 (Const64 <t> [c*d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMul64 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst64 {
 			break
@@ -13097,10 +13811,12 @@ func rewriteValuegeneric_OpMul64_10(v *Value) bool {
 	// cond:
 	// result: (Mul64 (Const64 <t> [c*d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMul64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -13130,6 +13846,7 @@ func rewriteValuegeneric_OpMul64F_0(v *Value) bool {
 	// cond:
 	// result: (Const64F [f2i(i2f(c) * i2f(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64F {
 			break
@@ -13148,6 +13865,7 @@ func rewriteValuegeneric_OpMul64F_0(v *Value) bool {
 	// cond:
 	// result: (Const64F [f2i(i2f(c) * i2f(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64F {
 			break
@@ -13166,6 +13884,7 @@ func rewriteValuegeneric_OpMul64F_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64F {
@@ -13183,6 +13902,7 @@ func rewriteValuegeneric_OpMul64F_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64F {
 			break
@@ -13200,6 +13920,7 @@ func rewriteValuegeneric_OpMul64F_0(v *Value) bool {
 	// cond:
 	// result: (Neg64F x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64F {
@@ -13216,6 +13937,7 @@ func rewriteValuegeneric_OpMul64F_0(v *Value) bool {
 	// cond:
 	// result: (Neg64F x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64F {
 			break
@@ -13232,6 +13954,7 @@ func rewriteValuegeneric_OpMul64F_0(v *Value) bool {
 	// cond:
 	// result: (Add64F x x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64F {
@@ -13249,6 +13972,7 @@ func rewriteValuegeneric_OpMul64F_0(v *Value) bool {
 	// cond:
 	// result: (Add64F x x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64F {
 			break
@@ -13273,6 +13997,7 @@ func rewriteValuegeneric_OpMul8_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [int64(int8(c*d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -13291,6 +14016,7 @@ func rewriteValuegeneric_OpMul8_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [int64(int8(c*d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -13309,6 +14035,7 @@ func rewriteValuegeneric_OpMul8_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -13326,6 +14053,7 @@ func rewriteValuegeneric_OpMul8_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
@@ -13343,6 +14071,7 @@ func rewriteValuegeneric_OpMul8_0(v *Value) bool {
 	// cond:
 	// result: (Neg8  x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -13359,6 +14088,7 @@ func rewriteValuegeneric_OpMul8_0(v *Value) bool {
 	// cond:
 	// result: (Neg8  x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
@@ -13376,6 +14106,7 @@ func rewriteValuegeneric_OpMul8_0(v *Value) bool {
 	// result: (Lsh8x64  <t> n (Const64 <typ.UInt64> [log2(c)]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		n := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
@@ -13398,6 +14129,7 @@ func rewriteValuegeneric_OpMul8_0(v *Value) bool {
 	// result: (Lsh8x64  <t> n (Const64 <typ.UInt64> [log2(c)]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -13420,6 +14152,7 @@ func rewriteValuegeneric_OpMul8_0(v *Value) bool {
 	// result: (Neg8  (Lsh8x64  <t> n (Const64 <typ.UInt64> [log2(-c)])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		n := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
@@ -13443,6 +14176,7 @@ func rewriteValuegeneric_OpMul8_0(v *Value) bool {
 	// result: (Neg8  (Lsh8x64  <t> n (Const64 <typ.UInt64> [log2(-c)])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -13470,6 +14204,7 @@ func rewriteValuegeneric_OpMul8_10(v *Value) bool {
 	// cond:
 	// result: (Const8  [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -13485,6 +14220,7 @@ func rewriteValuegeneric_OpMul8_10(v *Value) bool {
 	// cond:
 	// result: (Const8  [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
 			break
@@ -13500,6 +14236,7 @@ func rewriteValuegeneric_OpMul8_10(v *Value) bool {
 	// cond:
 	// result: (Mul8  (Const8  <t> [int64(int8(c*d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -13510,6 +14247,7 @@ func rewriteValuegeneric_OpMul8_10(v *Value) bool {
 		if v_1.Op != OpMul8 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst8 {
 			break
@@ -13530,6 +14268,7 @@ func rewriteValuegeneric_OpMul8_10(v *Value) bool {
 	// cond:
 	// result: (Mul8  (Const8  <t> [int64(int8(c*d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -13540,6 +14279,7 @@ func rewriteValuegeneric_OpMul8_10(v *Value) bool {
 		if v_1.Op != OpMul8 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst8 {
@@ -13560,10 +14300,12 @@ func rewriteValuegeneric_OpMul8_10(v *Value) bool {
 	// cond:
 	// result: (Mul8  (Const8  <t> [int64(int8(c*d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMul8 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst8 {
 			break
@@ -13590,10 +14332,12 @@ func rewriteValuegeneric_OpMul8_10(v *Value) bool {
 	// cond:
 	// result: (Mul8  (Const8  <t> [int64(int8(c*d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpMul8 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst8 {
@@ -13640,6 +14384,7 @@ func rewriteValuegeneric_OpNeg16_0(v *Value) bool {
 		if v_0.Op != OpSub16 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpSub16)
@@ -13671,6 +14416,7 @@ func rewriteValuegeneric_OpNeg32_0(v *Value) bool {
 		if v_0.Op != OpSub32 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpSub32)
@@ -13721,6 +14467,7 @@ func rewriteValuegeneric_OpNeg64_0(v *Value) bool {
 		if v_0.Op != OpSub64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpSub64)
@@ -13771,6 +14518,7 @@ func rewriteValuegeneric_OpNeg8_0(v *Value) bool {
 		if v_0.Op != OpSub8 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpSub8)
@@ -13787,6 +14535,7 @@ func rewriteValuegeneric_OpNeq16_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -13799,6 +14548,7 @@ func rewriteValuegeneric_OpNeq16_0(v *Value) bool {
 	// cond:
 	// result: (Neq16 (Const16 <t> [int64(int16(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -13809,6 +14559,7 @@ func rewriteValuegeneric_OpNeq16_0(v *Value) bool {
 		if v_1.Op != OpAdd16 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst16 {
 			break
@@ -13829,6 +14580,7 @@ func rewriteValuegeneric_OpNeq16_0(v *Value) bool {
 	// cond:
 	// result: (Neq16 (Const16 <t> [int64(int16(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -13839,6 +14591,7 @@ func rewriteValuegeneric_OpNeq16_0(v *Value) bool {
 		if v_1.Op != OpAdd16 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst16 {
@@ -13859,10 +14612,12 @@ func rewriteValuegeneric_OpNeq16_0(v *Value) bool {
 	// cond:
 	// result: (Neq16 (Const16 <t> [int64(int16(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd16 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst16 {
 			break
@@ -13889,10 +14644,12 @@ func rewriteValuegeneric_OpNeq16_0(v *Value) bool {
 	// cond:
 	// result: (Neq16 (Const16 <t> [int64(int16(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd16 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst16 {
@@ -13919,6 +14676,7 @@ func rewriteValuegeneric_OpNeq16_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c != d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -13937,6 +14695,7 @@ func rewriteValuegeneric_OpNeq16_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c != d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -13960,6 +14719,7 @@ func rewriteValuegeneric_OpNeq32_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -13972,6 +14732,7 @@ func rewriteValuegeneric_OpNeq32_0(v *Value) bool {
 	// cond:
 	// result: (Neq32 (Const32 <t> [int64(int32(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -13982,6 +14743,7 @@ func rewriteValuegeneric_OpNeq32_0(v *Value) bool {
 		if v_1.Op != OpAdd32 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -14002,6 +14764,7 @@ func rewriteValuegeneric_OpNeq32_0(v *Value) bool {
 	// cond:
 	// result: (Neq32 (Const32 <t> [int64(int32(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -14012,6 +14775,7 @@ func rewriteValuegeneric_OpNeq32_0(v *Value) bool {
 		if v_1.Op != OpAdd32 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst32 {
@@ -14032,10 +14796,12 @@ func rewriteValuegeneric_OpNeq32_0(v *Value) bool {
 	// cond:
 	// result: (Neq32 (Const32 <t> [int64(int32(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd32 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst32 {
 			break
@@ -14062,10 +14828,12 @@ func rewriteValuegeneric_OpNeq32_0(v *Value) bool {
 	// cond:
 	// result: (Neq32 (Const32 <t> [int64(int32(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd32 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst32 {
@@ -14092,6 +14860,7 @@ func rewriteValuegeneric_OpNeq32_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c != d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -14110,6 +14879,7 @@ func rewriteValuegeneric_OpNeq32_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c != d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -14133,6 +14903,7 @@ func rewriteValuegeneric_OpNeq64_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -14145,6 +14916,7 @@ func rewriteValuegeneric_OpNeq64_0(v *Value) bool {
 	// cond:
 	// result: (Neq64 (Const64 <t> [c-d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -14155,6 +14927,7 @@ func rewriteValuegeneric_OpNeq64_0(v *Value) bool {
 		if v_1.Op != OpAdd64 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst64 {
 			break
@@ -14175,6 +14948,7 @@ func rewriteValuegeneric_OpNeq64_0(v *Value) bool {
 	// cond:
 	// result: (Neq64 (Const64 <t> [c-d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -14185,6 +14959,7 @@ func rewriteValuegeneric_OpNeq64_0(v *Value) bool {
 		if v_1.Op != OpAdd64 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst64 {
@@ -14205,10 +14980,12 @@ func rewriteValuegeneric_OpNeq64_0(v *Value) bool {
 	// cond:
 	// result: (Neq64 (Const64 <t> [c-d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst64 {
 			break
@@ -14235,10 +15012,12 @@ func rewriteValuegeneric_OpNeq64_0(v *Value) bool {
 	// cond:
 	// result: (Neq64 (Const64 <t> [c-d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -14265,6 +15044,7 @@ func rewriteValuegeneric_OpNeq64_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c != d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -14283,6 +15063,7 @@ func rewriteValuegeneric_OpNeq64_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c != d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -14306,6 +15087,7 @@ func rewriteValuegeneric_OpNeq8_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -14318,6 +15100,7 @@ func rewriteValuegeneric_OpNeq8_0(v *Value) bool {
 	// cond:
 	// result: (Neq8 (Const8 <t> [int64(int8(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -14328,6 +15111,7 @@ func rewriteValuegeneric_OpNeq8_0(v *Value) bool {
 		if v_1.Op != OpAdd8 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst8 {
 			break
@@ -14348,6 +15132,7 @@ func rewriteValuegeneric_OpNeq8_0(v *Value) bool {
 	// cond:
 	// result: (Neq8 (Const8 <t> [int64(int8(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -14358,6 +15143,7 @@ func rewriteValuegeneric_OpNeq8_0(v *Value) bool {
 		if v_1.Op != OpAdd8 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst8 {
@@ -14378,10 +15164,12 @@ func rewriteValuegeneric_OpNeq8_0(v *Value) bool {
 	// cond:
 	// result: (Neq8 (Const8 <t> [int64(int8(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd8 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst8 {
 			break
@@ -14408,10 +15196,12 @@ func rewriteValuegeneric_OpNeq8_0(v *Value) bool {
 	// cond:
 	// result: (Neq8 (Const8 <t> [int64(int8(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd8 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst8 {
@@ -14438,6 +15228,7 @@ func rewriteValuegeneric_OpNeq8_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c != d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -14456,6 +15247,7 @@ func rewriteValuegeneric_OpNeq8_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c != d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -14477,6 +15269,7 @@ func rewriteValuegeneric_OpNeqB_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c != d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConstBool {
 			break
@@ -14495,6 +15288,7 @@ func rewriteValuegeneric_OpNeqB_0(v *Value) bool {
 	// cond:
 	// result: (ConstBool [b2i(c != d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConstBool {
 			break
@@ -14513,6 +15307,7 @@ func rewriteValuegeneric_OpNeqB_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConstBool {
 			break
@@ -14530,6 +15325,7 @@ func rewriteValuegeneric_OpNeqB_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConstBool {
@@ -14547,6 +15343,7 @@ func rewriteValuegeneric_OpNeqB_0(v *Value) bool {
 	// cond:
 	// result: (Not x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConstBool {
 			break
@@ -14563,6 +15360,7 @@ func rewriteValuegeneric_OpNeqB_0(v *Value) bool {
 	// cond:
 	// result: (Not x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConstBool {
@@ -14579,6 +15377,7 @@ func rewriteValuegeneric_OpNeqB_0(v *Value) bool {
 	// cond:
 	// result: (NeqB x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpNot {
 			break
@@ -14598,6 +15397,7 @@ func rewriteValuegeneric_OpNeqB_0(v *Value) bool {
 	// cond:
 	// result: (NeqB x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpNot {
 			break
@@ -14624,6 +15424,7 @@ func rewriteValuegeneric_OpNeqInter_0(v *Value) bool {
 	// cond:
 	// result: (NeqPtr (ITab x) (ITab y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpNeqPtr)
@@ -14641,6 +15442,7 @@ func rewriteValuegeneric_OpNeqPtr_0(v *Value) bool {
 	// cond:
 	// result: (IsNonNil p)
 	for {
+		_ = v.Args[1]
 		p := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConstNil {
@@ -14654,6 +15456,7 @@ func rewriteValuegeneric_OpNeqPtr_0(v *Value) bool {
 	// cond:
 	// result: (IsNonNil p)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConstNil {
 			break
@@ -14674,6 +15477,7 @@ func rewriteValuegeneric_OpNeqSlice_0(v *Value) bool {
 	// cond:
 	// result: (NeqPtr (SlicePtr x) (SlicePtr y))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		y := v.Args[1]
 		v.reset(OpNeqPtr)
@@ -14697,6 +15501,7 @@ func rewriteValuegeneric_OpNilCheck_0(v *Value) bool {
 	// cond:
 	// result: mem
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpGetG {
 			break
@@ -14714,10 +15519,12 @@ func rewriteValuegeneric_OpNilCheck_0(v *Value) bool {
 	// cond: mem.Op == OpStaticCall 	&& isSameSym(mem.Aux, "runtime.newobject") 	&& c == config.ctxt.FixedFrameSize() + config.RegSize 	&& warnRule(fe.Debug_checknil() && v.Pos.Line() > 1, v, "removed nil check")
 	// result: (Invalid)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpLoad {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpOffPtr {
 			break
@@ -14741,6 +15548,7 @@ func rewriteValuegeneric_OpNilCheck_0(v *Value) bool {
 	// cond: mem.Op == OpStaticCall 	&& isSameSym(mem.Aux, "runtime.newobject") 	&& c == config.ctxt.FixedFrameSize() + config.RegSize 	&& warnRule(fe.Debug_checknil() && v.Pos.Line() > 1, v, "removed nil check")
 	// result: (Invalid)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpOffPtr {
 			break
@@ -14749,6 +15557,7 @@ func rewriteValuegeneric_OpNilCheck_0(v *Value) bool {
 		if v_0_0.Op != OpLoad {
 			break
 		}
+		_ = v_0_0.Args[1]
 		v_0_0_0 := v_0_0.Args[0]
 		if v_0_0_0.Op != OpOffPtr {
 			break
@@ -14779,6 +15588,7 @@ func rewriteValuegeneric_OpNot_0(v *Value) bool {
 		if v_0.Op != OpEq64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpNeq64)
@@ -14794,6 +15604,7 @@ func rewriteValuegeneric_OpNot_0(v *Value) bool {
 		if v_0.Op != OpEq32 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpNeq32)
@@ -14809,6 +15620,7 @@ func rewriteValuegeneric_OpNot_0(v *Value) bool {
 		if v_0.Op != OpEq16 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpNeq16)
@@ -14824,6 +15636,7 @@ func rewriteValuegeneric_OpNot_0(v *Value) bool {
 		if v_0.Op != OpEq8 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpNeq8)
@@ -14839,6 +15652,7 @@ func rewriteValuegeneric_OpNot_0(v *Value) bool {
 		if v_0.Op != OpEqB {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpNeqB)
@@ -14854,6 +15668,7 @@ func rewriteValuegeneric_OpNot_0(v *Value) bool {
 		if v_0.Op != OpNeq64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpEq64)
@@ -14869,6 +15684,7 @@ func rewriteValuegeneric_OpNot_0(v *Value) bool {
 		if v_0.Op != OpNeq32 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpEq32)
@@ -14884,6 +15700,7 @@ func rewriteValuegeneric_OpNot_0(v *Value) bool {
 		if v_0.Op != OpNeq16 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpEq16)
@@ -14899,6 +15716,7 @@ func rewriteValuegeneric_OpNot_0(v *Value) bool {
 		if v_0.Op != OpNeq8 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpEq8)
@@ -14914,6 +15732,7 @@ func rewriteValuegeneric_OpNot_0(v *Value) bool {
 		if v_0.Op != OpNeqB {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpEqB)
@@ -14932,6 +15751,7 @@ func rewriteValuegeneric_OpNot_10(v *Value) bool {
 		if v_0.Op != OpGreater64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpLeq64)
@@ -14947,6 +15767,7 @@ func rewriteValuegeneric_OpNot_10(v *Value) bool {
 		if v_0.Op != OpGreater32 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpLeq32)
@@ -14962,6 +15783,7 @@ func rewriteValuegeneric_OpNot_10(v *Value) bool {
 		if v_0.Op != OpGreater16 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpLeq16)
@@ -14977,6 +15799,7 @@ func rewriteValuegeneric_OpNot_10(v *Value) bool {
 		if v_0.Op != OpGreater8 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpLeq8)
@@ -14992,6 +15815,7 @@ func rewriteValuegeneric_OpNot_10(v *Value) bool {
 		if v_0.Op != OpGreater64U {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpLeq64U)
@@ -15007,6 +15831,7 @@ func rewriteValuegeneric_OpNot_10(v *Value) bool {
 		if v_0.Op != OpGreater32U {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpLeq32U)
@@ -15022,6 +15847,7 @@ func rewriteValuegeneric_OpNot_10(v *Value) bool {
 		if v_0.Op != OpGreater16U {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpLeq16U)
@@ -15037,6 +15863,7 @@ func rewriteValuegeneric_OpNot_10(v *Value) bool {
 		if v_0.Op != OpGreater8U {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpLeq8U)
@@ -15052,6 +15879,7 @@ func rewriteValuegeneric_OpNot_10(v *Value) bool {
 		if v_0.Op != OpGeq64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpLess64)
@@ -15067,6 +15895,7 @@ func rewriteValuegeneric_OpNot_10(v *Value) bool {
 		if v_0.Op != OpGeq32 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpLess32)
@@ -15085,6 +15914,7 @@ func rewriteValuegeneric_OpNot_20(v *Value) bool {
 		if v_0.Op != OpGeq16 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpLess16)
@@ -15100,6 +15930,7 @@ func rewriteValuegeneric_OpNot_20(v *Value) bool {
 		if v_0.Op != OpGeq8 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpLess8)
@@ -15115,6 +15946,7 @@ func rewriteValuegeneric_OpNot_20(v *Value) bool {
 		if v_0.Op != OpGeq64U {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpLess64U)
@@ -15130,6 +15962,7 @@ func rewriteValuegeneric_OpNot_20(v *Value) bool {
 		if v_0.Op != OpGeq32U {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpLess32U)
@@ -15145,6 +15978,7 @@ func rewriteValuegeneric_OpNot_20(v *Value) bool {
 		if v_0.Op != OpGeq16U {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpLess16U)
@@ -15160,6 +15994,7 @@ func rewriteValuegeneric_OpNot_20(v *Value) bool {
 		if v_0.Op != OpGeq8U {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpLess8U)
@@ -15175,6 +16010,7 @@ func rewriteValuegeneric_OpNot_20(v *Value) bool {
 		if v_0.Op != OpLess64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpGeq64)
@@ -15190,6 +16026,7 @@ func rewriteValuegeneric_OpNot_20(v *Value) bool {
 		if v_0.Op != OpLess32 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpGeq32)
@@ -15205,6 +16042,7 @@ func rewriteValuegeneric_OpNot_20(v *Value) bool {
 		if v_0.Op != OpLess16 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpGeq16)
@@ -15220,6 +16058,7 @@ func rewriteValuegeneric_OpNot_20(v *Value) bool {
 		if v_0.Op != OpLess8 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpGeq8)
@@ -15238,6 +16077,7 @@ func rewriteValuegeneric_OpNot_30(v *Value) bool {
 		if v_0.Op != OpLess64U {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpGeq64U)
@@ -15253,6 +16093,7 @@ func rewriteValuegeneric_OpNot_30(v *Value) bool {
 		if v_0.Op != OpLess32U {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpGeq32U)
@@ -15268,6 +16109,7 @@ func rewriteValuegeneric_OpNot_30(v *Value) bool {
 		if v_0.Op != OpLess16U {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpGeq16U)
@@ -15283,6 +16125,7 @@ func rewriteValuegeneric_OpNot_30(v *Value) bool {
 		if v_0.Op != OpLess8U {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpGeq8U)
@@ -15298,6 +16141,7 @@ func rewriteValuegeneric_OpNot_30(v *Value) bool {
 		if v_0.Op != OpLeq64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpGreater64)
@@ -15313,6 +16157,7 @@ func rewriteValuegeneric_OpNot_30(v *Value) bool {
 		if v_0.Op != OpLeq32 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpGreater32)
@@ -15328,6 +16173,7 @@ func rewriteValuegeneric_OpNot_30(v *Value) bool {
 		if v_0.Op != OpLeq16 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpGreater16)
@@ -15343,6 +16189,7 @@ func rewriteValuegeneric_OpNot_30(v *Value) bool {
 		if v_0.Op != OpLeq8 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpGreater8)
@@ -15358,6 +16205,7 @@ func rewriteValuegeneric_OpNot_30(v *Value) bool {
 		if v_0.Op != OpLeq64U {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpGreater64U)
@@ -15373,6 +16221,7 @@ func rewriteValuegeneric_OpNot_30(v *Value) bool {
 		if v_0.Op != OpLeq32U {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpGreater32U)
@@ -15391,6 +16240,7 @@ func rewriteValuegeneric_OpNot_40(v *Value) bool {
 		if v_0.Op != OpLeq16U {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpGreater16U)
@@ -15406,6 +16256,7 @@ func rewriteValuegeneric_OpNot_40(v *Value) bool {
 		if v_0.Op != OpLeq8U {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		v.reset(OpGreater8U)
@@ -15455,6 +16306,7 @@ func rewriteValuegeneric_OpOr16_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [int64(int16(c|d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -15473,6 +16325,7 @@ func rewriteValuegeneric_OpOr16_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [int64(int16(c|d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -15491,6 +16344,7 @@ func rewriteValuegeneric_OpOr16_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -15504,6 +16358,7 @@ func rewriteValuegeneric_OpOr16_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -15521,6 +16376,7 @@ func rewriteValuegeneric_OpOr16_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -15538,6 +16394,7 @@ func rewriteValuegeneric_OpOr16_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [-1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -15553,6 +16410,7 @@ func rewriteValuegeneric_OpOr16_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [-1])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
 			break
@@ -15568,11 +16426,13 @@ func rewriteValuegeneric_OpOr16_0(v *Value) bool {
 	// cond:
 	// result: (Or16 x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpOr16 {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -15586,11 +16446,13 @@ func rewriteValuegeneric_OpOr16_0(v *Value) bool {
 	// cond:
 	// result: (Or16 x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpOr16 {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		if x != v_1.Args[1] {
 			break
@@ -15604,10 +16466,12 @@ func rewriteValuegeneric_OpOr16_0(v *Value) bool {
 	// cond:
 	// result: (Or16 x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpOr16 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if x != v.Args[1] {
@@ -15627,10 +16491,12 @@ func rewriteValuegeneric_OpOr16_10(v *Value) bool {
 	// cond:
 	// result: (Or16 x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpOr16 {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		x := v_0.Args[1]
 		if x != v.Args[1] {
@@ -15645,10 +16511,12 @@ func rewriteValuegeneric_OpOr16_10(v *Value) bool {
 	// cond: ^(c1 | c2) == 0
 	// result: (Or16 (Const16 <t> [c1]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd16 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst16 {
@@ -15675,10 +16543,12 @@ func rewriteValuegeneric_OpOr16_10(v *Value) bool {
 	// cond: ^(c1 | c2) == 0
 	// result: (Or16 (Const16 <t> [c1]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd16 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst16 {
 			break
@@ -15705,6 +16575,7 @@ func rewriteValuegeneric_OpOr16_10(v *Value) bool {
 	// cond: ^(c1 | c2) == 0
 	// result: (Or16 (Const16 <t> [c1]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -15715,6 +16586,7 @@ func rewriteValuegeneric_OpOr16_10(v *Value) bool {
 		if v_1.Op != OpAnd16 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst16 {
@@ -15735,6 +16607,7 @@ func rewriteValuegeneric_OpOr16_10(v *Value) bool {
 	// cond: ^(c1 | c2) == 0
 	// result: (Or16 (Const16 <t> [c1]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -15745,6 +16618,7 @@ func rewriteValuegeneric_OpOr16_10(v *Value) bool {
 		if v_1.Op != OpAnd16 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst16 {
 			break
@@ -15765,10 +16639,12 @@ func rewriteValuegeneric_OpOr16_10(v *Value) bool {
 	// cond: (z.Op != OpConst16 && x.Op != OpConst16)
 	// result: (Or16 i (Or16 <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpOr16 {
 			break
 		}
+		_ = v_0.Args[1]
 		i := v_0.Args[0]
 		if i.Op != OpConst16 {
 			break
@@ -15791,10 +16667,12 @@ func rewriteValuegeneric_OpOr16_10(v *Value) bool {
 	// cond: (z.Op != OpConst16 && x.Op != OpConst16)
 	// result: (Or16 i (Or16 <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpOr16 {
 			break
 		}
+		_ = v_0.Args[1]
 		z := v_0.Args[0]
 		i := v_0.Args[1]
 		if i.Op != OpConst16 {
@@ -15817,11 +16695,13 @@ func rewriteValuegeneric_OpOr16_10(v *Value) bool {
 	// cond: (z.Op != OpConst16 && x.Op != OpConst16)
 	// result: (Or16 i (Or16 <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpOr16 {
 			break
 		}
+		_ = v_1.Args[1]
 		i := v_1.Args[0]
 		if i.Op != OpConst16 {
 			break
@@ -15843,11 +16723,13 @@ func rewriteValuegeneric_OpOr16_10(v *Value) bool {
 	// cond: (z.Op != OpConst16 && x.Op != OpConst16)
 	// result: (Or16 i (Or16 <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpOr16 {
 			break
 		}
+		_ = v_1.Args[1]
 		z := v_1.Args[0]
 		i := v_1.Args[1]
 		if i.Op != OpConst16 {
@@ -15869,6 +16751,7 @@ func rewriteValuegeneric_OpOr16_10(v *Value) bool {
 	// cond:
 	// result: (Or16 (Const16 <t> [int64(int16(c|d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -15879,6 +16762,7 @@ func rewriteValuegeneric_OpOr16_10(v *Value) bool {
 		if v_1.Op != OpOr16 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst16 {
 			break
@@ -15904,6 +16788,7 @@ func rewriteValuegeneric_OpOr16_20(v *Value) bool {
 	// cond:
 	// result: (Or16 (Const16 <t> [int64(int16(c|d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -15914,6 +16799,7 @@ func rewriteValuegeneric_OpOr16_20(v *Value) bool {
 		if v_1.Op != OpOr16 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst16 {
@@ -15934,10 +16820,12 @@ func rewriteValuegeneric_OpOr16_20(v *Value) bool {
 	// cond:
 	// result: (Or16 (Const16 <t> [int64(int16(c|d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpOr16 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst16 {
 			break
@@ -15964,10 +16852,12 @@ func rewriteValuegeneric_OpOr16_20(v *Value) bool {
 	// cond:
 	// result: (Or16 (Const16 <t> [int64(int16(c|d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpOr16 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst16 {
@@ -15997,6 +16887,7 @@ func rewriteValuegeneric_OpOr32_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [int64(int32(c|d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -16015,6 +16906,7 @@ func rewriteValuegeneric_OpOr32_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [int64(int32(c|d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -16033,6 +16925,7 @@ func rewriteValuegeneric_OpOr32_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -16046,6 +16939,7 @@ func rewriteValuegeneric_OpOr32_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -16063,6 +16957,7 @@ func rewriteValuegeneric_OpOr32_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -16080,6 +16975,7 @@ func rewriteValuegeneric_OpOr32_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [-1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -16095,6 +16991,7 @@ func rewriteValuegeneric_OpOr32_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [-1])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
 			break
@@ -16110,11 +17007,13 @@ func rewriteValuegeneric_OpOr32_0(v *Value) bool {
 	// cond:
 	// result: (Or32 x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpOr32 {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -16128,11 +17027,13 @@ func rewriteValuegeneric_OpOr32_0(v *Value) bool {
 	// cond:
 	// result: (Or32 x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpOr32 {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		if x != v_1.Args[1] {
 			break
@@ -16146,10 +17047,12 @@ func rewriteValuegeneric_OpOr32_0(v *Value) bool {
 	// cond:
 	// result: (Or32 x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpOr32 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if x != v.Args[1] {
@@ -16169,10 +17072,12 @@ func rewriteValuegeneric_OpOr32_10(v *Value) bool {
 	// cond:
 	// result: (Or32 x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpOr32 {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		x := v_0.Args[1]
 		if x != v.Args[1] {
@@ -16187,10 +17092,12 @@ func rewriteValuegeneric_OpOr32_10(v *Value) bool {
 	// cond: ^(c1 | c2) == 0
 	// result: (Or32 (Const32 <t> [c1]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd32 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst32 {
@@ -16217,10 +17124,12 @@ func rewriteValuegeneric_OpOr32_10(v *Value) bool {
 	// cond: ^(c1 | c2) == 0
 	// result: (Or32 (Const32 <t> [c1]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd32 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst32 {
 			break
@@ -16247,6 +17156,7 @@ func rewriteValuegeneric_OpOr32_10(v *Value) bool {
 	// cond: ^(c1 | c2) == 0
 	// result: (Or32 (Const32 <t> [c1]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -16257,6 +17167,7 @@ func rewriteValuegeneric_OpOr32_10(v *Value) bool {
 		if v_1.Op != OpAnd32 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst32 {
@@ -16277,6 +17188,7 @@ func rewriteValuegeneric_OpOr32_10(v *Value) bool {
 	// cond: ^(c1 | c2) == 0
 	// result: (Or32 (Const32 <t> [c1]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -16287,6 +17199,7 @@ func rewriteValuegeneric_OpOr32_10(v *Value) bool {
 		if v_1.Op != OpAnd32 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -16307,10 +17220,12 @@ func rewriteValuegeneric_OpOr32_10(v *Value) bool {
 	// cond: (z.Op != OpConst32 && x.Op != OpConst32)
 	// result: (Or32 i (Or32 <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpOr32 {
 			break
 		}
+		_ = v_0.Args[1]
 		i := v_0.Args[0]
 		if i.Op != OpConst32 {
 			break
@@ -16333,10 +17248,12 @@ func rewriteValuegeneric_OpOr32_10(v *Value) bool {
 	// cond: (z.Op != OpConst32 && x.Op != OpConst32)
 	// result: (Or32 i (Or32 <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpOr32 {
 			break
 		}
+		_ = v_0.Args[1]
 		z := v_0.Args[0]
 		i := v_0.Args[1]
 		if i.Op != OpConst32 {
@@ -16359,11 +17276,13 @@ func rewriteValuegeneric_OpOr32_10(v *Value) bool {
 	// cond: (z.Op != OpConst32 && x.Op != OpConst32)
 	// result: (Or32 i (Or32 <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpOr32 {
 			break
 		}
+		_ = v_1.Args[1]
 		i := v_1.Args[0]
 		if i.Op != OpConst32 {
 			break
@@ -16385,11 +17304,13 @@ func rewriteValuegeneric_OpOr32_10(v *Value) bool {
 	// cond: (z.Op != OpConst32 && x.Op != OpConst32)
 	// result: (Or32 i (Or32 <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpOr32 {
 			break
 		}
+		_ = v_1.Args[1]
 		z := v_1.Args[0]
 		i := v_1.Args[1]
 		if i.Op != OpConst32 {
@@ -16411,6 +17332,7 @@ func rewriteValuegeneric_OpOr32_10(v *Value) bool {
 	// cond:
 	// result: (Or32 (Const32 <t> [int64(int32(c|d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -16421,6 +17343,7 @@ func rewriteValuegeneric_OpOr32_10(v *Value) bool {
 		if v_1.Op != OpOr32 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -16446,6 +17369,7 @@ func rewriteValuegeneric_OpOr32_20(v *Value) bool {
 	// cond:
 	// result: (Or32 (Const32 <t> [int64(int32(c|d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -16456,6 +17380,7 @@ func rewriteValuegeneric_OpOr32_20(v *Value) bool {
 		if v_1.Op != OpOr32 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst32 {
@@ -16476,10 +17401,12 @@ func rewriteValuegeneric_OpOr32_20(v *Value) bool {
 	// cond:
 	// result: (Or32 (Const32 <t> [int64(int32(c|d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpOr32 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst32 {
 			break
@@ -16506,10 +17433,12 @@ func rewriteValuegeneric_OpOr32_20(v *Value) bool {
 	// cond:
 	// result: (Or32 (Const32 <t> [int64(int32(c|d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpOr32 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst32 {
@@ -16539,6 +17468,7 @@ func rewriteValuegeneric_OpOr64_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [c|d])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -16557,6 +17487,7 @@ func rewriteValuegeneric_OpOr64_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [c|d])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -16575,6 +17506,7 @@ func rewriteValuegeneric_OpOr64_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -16588,6 +17520,7 @@ func rewriteValuegeneric_OpOr64_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -16605,6 +17538,7 @@ func rewriteValuegeneric_OpOr64_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -16622,6 +17556,7 @@ func rewriteValuegeneric_OpOr64_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [-1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -16637,6 +17572,7 @@ func rewriteValuegeneric_OpOr64_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [-1])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -16652,11 +17588,13 @@ func rewriteValuegeneric_OpOr64_0(v *Value) bool {
 	// cond:
 	// result: (Or64 x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpOr64 {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -16670,11 +17608,13 @@ func rewriteValuegeneric_OpOr64_0(v *Value) bool {
 	// cond:
 	// result: (Or64 x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpOr64 {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		if x != v_1.Args[1] {
 			break
@@ -16688,10 +17628,12 @@ func rewriteValuegeneric_OpOr64_0(v *Value) bool {
 	// cond:
 	// result: (Or64 x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpOr64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if x != v.Args[1] {
@@ -16711,10 +17653,12 @@ func rewriteValuegeneric_OpOr64_10(v *Value) bool {
 	// cond:
 	// result: (Or64 x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpOr64 {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		x := v_0.Args[1]
 		if x != v.Args[1] {
@@ -16729,10 +17673,12 @@ func rewriteValuegeneric_OpOr64_10(v *Value) bool {
 	// cond: ^(c1 | c2) == 0
 	// result: (Or64 (Const64 <t> [c1]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -16759,10 +17705,12 @@ func rewriteValuegeneric_OpOr64_10(v *Value) bool {
 	// cond: ^(c1 | c2) == 0
 	// result: (Or64 (Const64 <t> [c1]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst64 {
 			break
@@ -16789,6 +17737,7 @@ func rewriteValuegeneric_OpOr64_10(v *Value) bool {
 	// cond: ^(c1 | c2) == 0
 	// result: (Or64 (Const64 <t> [c1]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -16799,6 +17748,7 @@ func rewriteValuegeneric_OpOr64_10(v *Value) bool {
 		if v_1.Op != OpAnd64 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst64 {
@@ -16819,6 +17769,7 @@ func rewriteValuegeneric_OpOr64_10(v *Value) bool {
 	// cond: ^(c1 | c2) == 0
 	// result: (Or64 (Const64 <t> [c1]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -16829,6 +17780,7 @@ func rewriteValuegeneric_OpOr64_10(v *Value) bool {
 		if v_1.Op != OpAnd64 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst64 {
 			break
@@ -16849,10 +17801,12 @@ func rewriteValuegeneric_OpOr64_10(v *Value) bool {
 	// cond: (z.Op != OpConst64 && x.Op != OpConst64)
 	// result: (Or64 i (Or64 <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpOr64 {
 			break
 		}
+		_ = v_0.Args[1]
 		i := v_0.Args[0]
 		if i.Op != OpConst64 {
 			break
@@ -16875,10 +17829,12 @@ func rewriteValuegeneric_OpOr64_10(v *Value) bool {
 	// cond: (z.Op != OpConst64 && x.Op != OpConst64)
 	// result: (Or64 i (Or64 <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpOr64 {
 			break
 		}
+		_ = v_0.Args[1]
 		z := v_0.Args[0]
 		i := v_0.Args[1]
 		if i.Op != OpConst64 {
@@ -16901,11 +17857,13 @@ func rewriteValuegeneric_OpOr64_10(v *Value) bool {
 	// cond: (z.Op != OpConst64 && x.Op != OpConst64)
 	// result: (Or64 i (Or64 <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpOr64 {
 			break
 		}
+		_ = v_1.Args[1]
 		i := v_1.Args[0]
 		if i.Op != OpConst64 {
 			break
@@ -16927,11 +17885,13 @@ func rewriteValuegeneric_OpOr64_10(v *Value) bool {
 	// cond: (z.Op != OpConst64 && x.Op != OpConst64)
 	// result: (Or64 i (Or64 <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpOr64 {
 			break
 		}
+		_ = v_1.Args[1]
 		z := v_1.Args[0]
 		i := v_1.Args[1]
 		if i.Op != OpConst64 {
@@ -16953,6 +17913,7 @@ func rewriteValuegeneric_OpOr64_10(v *Value) bool {
 	// cond:
 	// result: (Or64 (Const64 <t> [c|d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -16963,6 +17924,7 @@ func rewriteValuegeneric_OpOr64_10(v *Value) bool {
 		if v_1.Op != OpOr64 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst64 {
 			break
@@ -16988,6 +17950,7 @@ func rewriteValuegeneric_OpOr64_20(v *Value) bool {
 	// cond:
 	// result: (Or64 (Const64 <t> [c|d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -16998,6 +17961,7 @@ func rewriteValuegeneric_OpOr64_20(v *Value) bool {
 		if v_1.Op != OpOr64 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst64 {
@@ -17018,10 +17982,12 @@ func rewriteValuegeneric_OpOr64_20(v *Value) bool {
 	// cond:
 	// result: (Or64 (Const64 <t> [c|d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpOr64 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst64 {
 			break
@@ -17048,10 +18014,12 @@ func rewriteValuegeneric_OpOr64_20(v *Value) bool {
 	// cond:
 	// result: (Or64 (Const64 <t> [c|d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpOr64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -17081,6 +18049,7 @@ func rewriteValuegeneric_OpOr8_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [int64(int8(c|d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -17099,6 +18068,7 @@ func rewriteValuegeneric_OpOr8_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [int64(int8(c|d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -17117,6 +18087,7 @@ func rewriteValuegeneric_OpOr8_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -17130,6 +18101,7 @@ func rewriteValuegeneric_OpOr8_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -17147,6 +18119,7 @@ func rewriteValuegeneric_OpOr8_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
@@ -17164,6 +18137,7 @@ func rewriteValuegeneric_OpOr8_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [-1])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -17179,6 +18153,7 @@ func rewriteValuegeneric_OpOr8_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [-1])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
 			break
@@ -17194,11 +18169,13 @@ func rewriteValuegeneric_OpOr8_0(v *Value) bool {
 	// cond:
 	// result: (Or8  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpOr8 {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -17212,11 +18189,13 @@ func rewriteValuegeneric_OpOr8_0(v *Value) bool {
 	// cond:
 	// result: (Or8  x y)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpOr8 {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		if x != v_1.Args[1] {
 			break
@@ -17230,10 +18209,12 @@ func rewriteValuegeneric_OpOr8_0(v *Value) bool {
 	// cond:
 	// result: (Or8  x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpOr8 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if x != v.Args[1] {
@@ -17253,10 +18234,12 @@ func rewriteValuegeneric_OpOr8_10(v *Value) bool {
 	// cond:
 	// result: (Or8  x y)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpOr8 {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		x := v_0.Args[1]
 		if x != v.Args[1] {
@@ -17271,10 +18254,12 @@ func rewriteValuegeneric_OpOr8_10(v *Value) bool {
 	// cond: ^(c1 | c2) == 0
 	// result: (Or8  (Const8  <t> [c1]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd8 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst8 {
@@ -17301,10 +18286,12 @@ func rewriteValuegeneric_OpOr8_10(v *Value) bool {
 	// cond: ^(c1 | c2) == 0
 	// result: (Or8  (Const8  <t> [c1]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAnd8 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst8 {
 			break
@@ -17331,6 +18318,7 @@ func rewriteValuegeneric_OpOr8_10(v *Value) bool {
 	// cond: ^(c1 | c2) == 0
 	// result: (Or8  (Const8  <t> [c1]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -17341,6 +18329,7 @@ func rewriteValuegeneric_OpOr8_10(v *Value) bool {
 		if v_1.Op != OpAnd8 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst8 {
@@ -17361,6 +18350,7 @@ func rewriteValuegeneric_OpOr8_10(v *Value) bool {
 	// cond: ^(c1 | c2) == 0
 	// result: (Or8  (Const8  <t> [c1]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -17371,6 +18361,7 @@ func rewriteValuegeneric_OpOr8_10(v *Value) bool {
 		if v_1.Op != OpAnd8 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst8 {
 			break
@@ -17391,10 +18382,12 @@ func rewriteValuegeneric_OpOr8_10(v *Value) bool {
 	// cond: (z.Op != OpConst8  && x.Op != OpConst8)
 	// result: (Or8  i (Or8  <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpOr8 {
 			break
 		}
+		_ = v_0.Args[1]
 		i := v_0.Args[0]
 		if i.Op != OpConst8 {
 			break
@@ -17417,10 +18410,12 @@ func rewriteValuegeneric_OpOr8_10(v *Value) bool {
 	// cond: (z.Op != OpConst8  && x.Op != OpConst8)
 	// result: (Or8  i (Or8  <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpOr8 {
 			break
 		}
+		_ = v_0.Args[1]
 		z := v_0.Args[0]
 		i := v_0.Args[1]
 		if i.Op != OpConst8 {
@@ -17443,11 +18438,13 @@ func rewriteValuegeneric_OpOr8_10(v *Value) bool {
 	// cond: (z.Op != OpConst8  && x.Op != OpConst8)
 	// result: (Or8  i (Or8  <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpOr8 {
 			break
 		}
+		_ = v_1.Args[1]
 		i := v_1.Args[0]
 		if i.Op != OpConst8 {
 			break
@@ -17469,11 +18466,13 @@ func rewriteValuegeneric_OpOr8_10(v *Value) bool {
 	// cond: (z.Op != OpConst8  && x.Op != OpConst8)
 	// result: (Or8  i (Or8  <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpOr8 {
 			break
 		}
+		_ = v_1.Args[1]
 		z := v_1.Args[0]
 		i := v_1.Args[1]
 		if i.Op != OpConst8 {
@@ -17495,6 +18494,7 @@ func rewriteValuegeneric_OpOr8_10(v *Value) bool {
 	// cond:
 	// result: (Or8  (Const8  <t> [int64(int8(c|d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -17505,6 +18505,7 @@ func rewriteValuegeneric_OpOr8_10(v *Value) bool {
 		if v_1.Op != OpOr8 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst8 {
 			break
@@ -17530,6 +18531,7 @@ func rewriteValuegeneric_OpOr8_20(v *Value) bool {
 	// cond:
 	// result: (Or8  (Const8  <t> [int64(int8(c|d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -17540,6 +18542,7 @@ func rewriteValuegeneric_OpOr8_20(v *Value) bool {
 		if v_1.Op != OpOr8 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst8 {
@@ -17560,10 +18563,12 @@ func rewriteValuegeneric_OpOr8_20(v *Value) bool {
 	// cond:
 	// result: (Or8  (Const8  <t> [int64(int8(c|d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpOr8 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst8 {
 			break
@@ -17590,10 +18595,12 @@ func rewriteValuegeneric_OpOr8_20(v *Value) bool {
 	// cond:
 	// result: (Or8  (Const8  <t> [int64(int8(c|d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpOr8 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst8 {
@@ -17623,6 +18630,7 @@ func rewriteValuegeneric_OpPhi_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -17646,6 +18654,7 @@ func rewriteValuegeneric_OpPhi_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -17669,6 +18678,7 @@ func rewriteValuegeneric_OpPhi_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -17692,6 +18702,7 @@ func rewriteValuegeneric_OpPhi_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [c])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -17725,6 +18736,7 @@ func rewriteValuegeneric_OpPtrIndex_0(v *Value) bool {
 	// result: (AddPtr ptr (Mul32 <typ.Int> idx (Const32 <typ.Int> [t.ElemType().Size()])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		idx := v.Args[1]
 		if !(config.PtrSize == 4) {
@@ -17745,6 +18757,7 @@ func rewriteValuegeneric_OpPtrIndex_0(v *Value) bool {
 	// result: (AddPtr ptr (Mul64 <typ.Int> idx (Const64 <typ.Int> [t.ElemType().Size()])))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		ptr := v.Args[0]
 		idx := v.Args[1]
 		if !(config.PtrSize == 8) {
@@ -17802,6 +18815,7 @@ func rewriteValuegeneric_OpRsh16Ux16_0(v *Value) bool {
 	// result: (Rsh16Ux64 x (Const64 <t> [int64(uint16(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -17819,6 +18833,7 @@ func rewriteValuegeneric_OpRsh16Ux16_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -17840,6 +18855,7 @@ func rewriteValuegeneric_OpRsh16Ux32_0(v *Value) bool {
 	// result: (Rsh16Ux64 x (Const64 <t> [int64(uint32(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -17857,6 +18873,7 @@ func rewriteValuegeneric_OpRsh16Ux32_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -17879,6 +18896,7 @@ func rewriteValuegeneric_OpRsh16Ux64_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [int64(int16(uint16(c) >> uint64(d)))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -17897,6 +18915,7 @@ func rewriteValuegeneric_OpRsh16Ux64_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -17914,6 +18933,7 @@ func rewriteValuegeneric_OpRsh16Ux64_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -17929,6 +18949,7 @@ func rewriteValuegeneric_OpRsh16Ux64_0(v *Value) bool {
 	// cond: uint64(c) >= 16
 	// result: (Const16 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -17946,10 +18967,12 @@ func rewriteValuegeneric_OpRsh16Ux64_0(v *Value) bool {
 	// result: (Rsh16Ux64 x (Const64 <t> [c+d]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpRsh16Ux64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -17975,14 +18998,17 @@ func rewriteValuegeneric_OpRsh16Ux64_0(v *Value) bool {
 	// cond: uint64(c1) >= uint64(c2) && uint64(c3) >= uint64(c2) && !uaddOvf(c1-c2, c3)
 	// result: (Rsh16Ux64 x (Const64 <typ.UInt64> [c1-c2+c3]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpLsh16x64 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpRsh16Ux64 {
 			break
 		}
+		_ = v_0_0.Args[1]
 		x := v_0_0.Args[0]
 		v_0_0_1 := v_0_0.Args[1]
 		if v_0_0_1.Op != OpConst64 {
@@ -18013,10 +19039,12 @@ func rewriteValuegeneric_OpRsh16Ux64_0(v *Value) bool {
 	// cond:
 	// result: (ZeroExt8to16  (Trunc16to8  <typ.UInt8>  x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpLsh16x64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -18048,6 +19076,7 @@ func rewriteValuegeneric_OpRsh16Ux8_0(v *Value) bool {
 	// result: (Rsh16Ux64 x (Const64 <t> [int64(uint8(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
@@ -18065,6 +19094,7 @@ func rewriteValuegeneric_OpRsh16Ux8_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -18086,6 +19116,7 @@ func rewriteValuegeneric_OpRsh16x16_0(v *Value) bool {
 	// result: (Rsh16x64  x (Const64 <t> [int64(uint16(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -18103,6 +19134,7 @@ func rewriteValuegeneric_OpRsh16x16_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -18124,6 +19156,7 @@ func rewriteValuegeneric_OpRsh16x32_0(v *Value) bool {
 	// result: (Rsh16x64  x (Const64 <t> [int64(uint32(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -18141,6 +19174,7 @@ func rewriteValuegeneric_OpRsh16x32_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -18163,6 +19197,7 @@ func rewriteValuegeneric_OpRsh16x64_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [int64(int16(c) >> uint64(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -18181,6 +19216,7 @@ func rewriteValuegeneric_OpRsh16x64_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -18198,6 +19234,7 @@ func rewriteValuegeneric_OpRsh16x64_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -18214,10 +19251,12 @@ func rewriteValuegeneric_OpRsh16x64_0(v *Value) bool {
 	// result: (Rsh16x64 x (Const64 <t> [c+d]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpRsh16x64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -18243,10 +19282,12 @@ func rewriteValuegeneric_OpRsh16x64_0(v *Value) bool {
 	// cond:
 	// result: (SignExt8to16  (Trunc16to8  <typ.Int8>  x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpLsh16x64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -18278,6 +19319,7 @@ func rewriteValuegeneric_OpRsh16x8_0(v *Value) bool {
 	// result: (Rsh16x64  x (Const64 <t> [int64(uint8(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
@@ -18295,6 +19337,7 @@ func rewriteValuegeneric_OpRsh16x8_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -18316,6 +19359,7 @@ func rewriteValuegeneric_OpRsh32Ux16_0(v *Value) bool {
 	// result: (Rsh32Ux64 x (Const64 <t> [int64(uint16(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -18333,6 +19377,7 @@ func rewriteValuegeneric_OpRsh32Ux16_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -18354,6 +19399,7 @@ func rewriteValuegeneric_OpRsh32Ux32_0(v *Value) bool {
 	// result: (Rsh32Ux64 x (Const64 <t> [int64(uint32(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -18371,6 +19417,7 @@ func rewriteValuegeneric_OpRsh32Ux32_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -18393,6 +19440,7 @@ func rewriteValuegeneric_OpRsh32Ux64_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [int64(int32(uint32(c) >> uint64(d)))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -18411,6 +19459,7 @@ func rewriteValuegeneric_OpRsh32Ux64_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -18428,6 +19477,7 @@ func rewriteValuegeneric_OpRsh32Ux64_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -18443,6 +19493,7 @@ func rewriteValuegeneric_OpRsh32Ux64_0(v *Value) bool {
 	// cond: uint64(c) >= 32
 	// result: (Const32 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -18460,10 +19511,12 @@ func rewriteValuegeneric_OpRsh32Ux64_0(v *Value) bool {
 	// result: (Rsh32Ux64 x (Const64 <t> [c+d]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpRsh32Ux64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -18489,14 +19542,17 @@ func rewriteValuegeneric_OpRsh32Ux64_0(v *Value) bool {
 	// cond: uint64(c1) >= uint64(c2) && uint64(c3) >= uint64(c2) && !uaddOvf(c1-c2, c3)
 	// result: (Rsh32Ux64 x (Const64 <typ.UInt64> [c1-c2+c3]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpLsh32x64 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpRsh32Ux64 {
 			break
 		}
+		_ = v_0_0.Args[1]
 		x := v_0_0.Args[0]
 		v_0_0_1 := v_0_0.Args[1]
 		if v_0_0_1.Op != OpConst64 {
@@ -18527,10 +19583,12 @@ func rewriteValuegeneric_OpRsh32Ux64_0(v *Value) bool {
 	// cond:
 	// result: (ZeroExt8to32  (Trunc32to8  <typ.UInt8>  x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpLsh32x64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -18556,10 +19614,12 @@ func rewriteValuegeneric_OpRsh32Ux64_0(v *Value) bool {
 	// cond:
 	// result: (ZeroExt16to32 (Trunc32to16 <typ.UInt16> x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpLsh32x64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -18591,6 +19651,7 @@ func rewriteValuegeneric_OpRsh32Ux8_0(v *Value) bool {
 	// result: (Rsh32Ux64 x (Const64 <t> [int64(uint8(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
@@ -18608,6 +19669,7 @@ func rewriteValuegeneric_OpRsh32Ux8_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -18629,6 +19691,7 @@ func rewriteValuegeneric_OpRsh32x16_0(v *Value) bool {
 	// result: (Rsh32x64  x (Const64 <t> [int64(uint16(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -18646,6 +19709,7 @@ func rewriteValuegeneric_OpRsh32x16_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -18667,6 +19731,7 @@ func rewriteValuegeneric_OpRsh32x32_0(v *Value) bool {
 	// result: (Rsh32x64  x (Const64 <t> [int64(uint32(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -18684,6 +19749,7 @@ func rewriteValuegeneric_OpRsh32x32_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -18706,6 +19772,7 @@ func rewriteValuegeneric_OpRsh32x64_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [int64(int32(c) >> uint64(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -18724,6 +19791,7 @@ func rewriteValuegeneric_OpRsh32x64_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -18741,6 +19809,7 @@ func rewriteValuegeneric_OpRsh32x64_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -18757,10 +19826,12 @@ func rewriteValuegeneric_OpRsh32x64_0(v *Value) bool {
 	// result: (Rsh32x64 x (Const64 <t> [c+d]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpRsh32x64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -18786,10 +19857,12 @@ func rewriteValuegeneric_OpRsh32x64_0(v *Value) bool {
 	// cond:
 	// result: (SignExt8to32  (Trunc32to8  <typ.Int8>  x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpLsh32x64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -18815,10 +19888,12 @@ func rewriteValuegeneric_OpRsh32x64_0(v *Value) bool {
 	// cond:
 	// result: (SignExt16to32 (Trunc32to16 <typ.Int16> x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpLsh32x64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -18850,6 +19925,7 @@ func rewriteValuegeneric_OpRsh32x8_0(v *Value) bool {
 	// result: (Rsh32x64  x (Const64 <t> [int64(uint8(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
@@ -18867,6 +19943,7 @@ func rewriteValuegeneric_OpRsh32x8_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -18888,6 +19965,7 @@ func rewriteValuegeneric_OpRsh64Ux16_0(v *Value) bool {
 	// result: (Rsh64Ux64 x (Const64 <t> [int64(uint16(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -18905,6 +19983,7 @@ func rewriteValuegeneric_OpRsh64Ux16_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -18926,6 +20005,7 @@ func rewriteValuegeneric_OpRsh64Ux32_0(v *Value) bool {
 	// result: (Rsh64Ux64 x (Const64 <t> [int64(uint32(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -18943,6 +20023,7 @@ func rewriteValuegeneric_OpRsh64Ux32_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -18965,6 +20046,7 @@ func rewriteValuegeneric_OpRsh64Ux64_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [int64(uint64(c) >> uint64(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -18983,6 +20065,7 @@ func rewriteValuegeneric_OpRsh64Ux64_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -19000,6 +20083,7 @@ func rewriteValuegeneric_OpRsh64Ux64_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -19015,6 +20099,7 @@ func rewriteValuegeneric_OpRsh64Ux64_0(v *Value) bool {
 	// cond: uint64(c) >= 64
 	// result: (Const64 [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -19032,10 +20117,12 @@ func rewriteValuegeneric_OpRsh64Ux64_0(v *Value) bool {
 	// result: (Rsh64Ux64 x (Const64 <t> [c+d]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpRsh64Ux64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -19061,14 +20148,17 @@ func rewriteValuegeneric_OpRsh64Ux64_0(v *Value) bool {
 	// cond: uint64(c1) >= uint64(c2) && uint64(c3) >= uint64(c2) && !uaddOvf(c1-c2, c3)
 	// result: (Rsh64Ux64 x (Const64 <typ.UInt64> [c1-c2+c3]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpLsh64x64 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpRsh64Ux64 {
 			break
 		}
+		_ = v_0_0.Args[1]
 		x := v_0_0.Args[0]
 		v_0_0_1 := v_0_0.Args[1]
 		if v_0_0_1.Op != OpConst64 {
@@ -19099,10 +20189,12 @@ func rewriteValuegeneric_OpRsh64Ux64_0(v *Value) bool {
 	// cond:
 	// result: (ZeroExt8to64  (Trunc64to8  <typ.UInt8>  x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpLsh64x64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -19128,10 +20220,12 @@ func rewriteValuegeneric_OpRsh64Ux64_0(v *Value) bool {
 	// cond:
 	// result: (ZeroExt16to64 (Trunc64to16 <typ.UInt16> x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpLsh64x64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -19157,10 +20251,12 @@ func rewriteValuegeneric_OpRsh64Ux64_0(v *Value) bool {
 	// cond:
 	// result: (ZeroExt32to64 (Trunc64to32 <typ.UInt32> x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpLsh64x64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -19192,6 +20288,7 @@ func rewriteValuegeneric_OpRsh64Ux8_0(v *Value) bool {
 	// result: (Rsh64Ux64 x (Const64 <t> [int64(uint8(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
@@ -19209,6 +20306,7 @@ func rewriteValuegeneric_OpRsh64Ux8_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -19230,6 +20328,7 @@ func rewriteValuegeneric_OpRsh64x16_0(v *Value) bool {
 	// result: (Rsh64x64  x (Const64 <t> [int64(uint16(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -19247,6 +20346,7 @@ func rewriteValuegeneric_OpRsh64x16_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -19268,6 +20368,7 @@ func rewriteValuegeneric_OpRsh64x32_0(v *Value) bool {
 	// result: (Rsh64x64  x (Const64 <t> [int64(uint32(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -19285,6 +20386,7 @@ func rewriteValuegeneric_OpRsh64x32_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -19307,6 +20409,7 @@ func rewriteValuegeneric_OpRsh64x64_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [c >> uint64(d)])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -19325,6 +20428,7 @@ func rewriteValuegeneric_OpRsh64x64_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -19342,6 +20446,7 @@ func rewriteValuegeneric_OpRsh64x64_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -19358,10 +20463,12 @@ func rewriteValuegeneric_OpRsh64x64_0(v *Value) bool {
 	// result: (Rsh64x64 x (Const64 <t> [c+d]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpRsh64x64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -19387,10 +20494,12 @@ func rewriteValuegeneric_OpRsh64x64_0(v *Value) bool {
 	// cond:
 	// result: (SignExt8to64  (Trunc64to8  <typ.Int8>  x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpLsh64x64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -19416,10 +20525,12 @@ func rewriteValuegeneric_OpRsh64x64_0(v *Value) bool {
 	// cond:
 	// result: (SignExt16to64 (Trunc64to16 <typ.Int16> x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpLsh64x64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -19445,10 +20556,12 @@ func rewriteValuegeneric_OpRsh64x64_0(v *Value) bool {
 	// cond:
 	// result: (SignExt32to64 (Trunc64to32 <typ.Int32> x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpLsh64x64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -19480,6 +20593,7 @@ func rewriteValuegeneric_OpRsh64x8_0(v *Value) bool {
 	// result: (Rsh64x64  x (Const64 <t> [int64(uint8(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
@@ -19497,6 +20611,7 @@ func rewriteValuegeneric_OpRsh64x8_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -19518,6 +20633,7 @@ func rewriteValuegeneric_OpRsh8Ux16_0(v *Value) bool {
 	// result: (Rsh8Ux64 x (Const64 <t> [int64(uint16(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -19535,6 +20651,7 @@ func rewriteValuegeneric_OpRsh8Ux16_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -19556,6 +20673,7 @@ func rewriteValuegeneric_OpRsh8Ux32_0(v *Value) bool {
 	// result: (Rsh8Ux64 x (Const64 <t> [int64(uint32(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -19573,6 +20691,7 @@ func rewriteValuegeneric_OpRsh8Ux32_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -19595,6 +20714,7 @@ func rewriteValuegeneric_OpRsh8Ux64_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [int64(int8(uint8(c) >> uint64(d)))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -19613,6 +20733,7 @@ func rewriteValuegeneric_OpRsh8Ux64_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -19630,6 +20751,7 @@ func rewriteValuegeneric_OpRsh8Ux64_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -19645,6 +20767,7 @@ func rewriteValuegeneric_OpRsh8Ux64_0(v *Value) bool {
 	// cond: uint64(c) >= 8
 	// result: (Const8  [0])
 	for {
+		_ = v.Args[1]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
 			break
@@ -19662,10 +20785,12 @@ func rewriteValuegeneric_OpRsh8Ux64_0(v *Value) bool {
 	// result: (Rsh8Ux64  x (Const64 <t> [c+d]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpRsh8Ux64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -19691,14 +20816,17 @@ func rewriteValuegeneric_OpRsh8Ux64_0(v *Value) bool {
 	// cond: uint64(c1) >= uint64(c2) && uint64(c3) >= uint64(c2) && !uaddOvf(c1-c2, c3)
 	// result: (Rsh8Ux64 x (Const64 <typ.UInt64> [c1-c2+c3]))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpLsh8x64 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpRsh8Ux64 {
 			break
 		}
+		_ = v_0_0.Args[1]
 		x := v_0_0.Args[0]
 		v_0_0_1 := v_0_0.Args[1]
 		if v_0_0_1.Op != OpConst64 {
@@ -19735,6 +20863,7 @@ func rewriteValuegeneric_OpRsh8Ux8_0(v *Value) bool {
 	// result: (Rsh8Ux64 x (Const64 <t> [int64(uint8(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
@@ -19752,6 +20881,7 @@ func rewriteValuegeneric_OpRsh8Ux8_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -19773,6 +20903,7 @@ func rewriteValuegeneric_OpRsh8x16_0(v *Value) bool {
 	// result: (Rsh8x64  x (Const64 <t> [int64(uint16(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -19790,6 +20921,7 @@ func rewriteValuegeneric_OpRsh8x16_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -19811,6 +20943,7 @@ func rewriteValuegeneric_OpRsh8x32_0(v *Value) bool {
 	// result: (Rsh8x64  x (Const64 <t> [int64(uint32(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -19828,6 +20961,7 @@ func rewriteValuegeneric_OpRsh8x32_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -19848,6 +20982,7 @@ func rewriteValuegeneric_OpRsh8x64_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [int64(int8(c) >> uint64(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -19866,6 +21001,7 @@ func rewriteValuegeneric_OpRsh8x64_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -19883,6 +21019,7 @@ func rewriteValuegeneric_OpRsh8x64_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -19899,10 +21036,12 @@ func rewriteValuegeneric_OpRsh8x64_0(v *Value) bool {
 	// result: (Rsh8x64  x (Const64 <t> [c+d]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpRsh8x64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -19934,6 +21073,7 @@ func rewriteValuegeneric_OpRsh8x8_0(v *Value) bool {
 	// result: (Rsh8x64  x (Const64 <t> [int64(uint8(c))]))
 	for {
 		t := v.Type
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
@@ -19951,6 +21091,7 @@ func rewriteValuegeneric_OpRsh8x8_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [0])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -19990,6 +21131,7 @@ func rewriteValuegeneric_OpSignExt16to32_0(v *Value) bool {
 		if x.Op != OpRsh32x64 {
 			break
 		}
+		_ = x.Args[1]
 		x_1 := x.Args[1]
 		if x_1.Op != OpConst64 {
 			break
@@ -20031,6 +21173,7 @@ func rewriteValuegeneric_OpSignExt16to64_0(v *Value) bool {
 		if x.Op != OpRsh64x64 {
 			break
 		}
+		_ = x.Args[1]
 		x_1 := x.Args[1]
 		if x_1.Op != OpConst64 {
 			break
@@ -20072,6 +21215,7 @@ func rewriteValuegeneric_OpSignExt32to64_0(v *Value) bool {
 		if x.Op != OpRsh64x64 {
 			break
 		}
+		_ = x.Args[1]
 		x_1 := x.Args[1]
 		if x_1.Op != OpConst64 {
 			break
@@ -20113,6 +21257,7 @@ func rewriteValuegeneric_OpSignExt8to16_0(v *Value) bool {
 		if x.Op != OpRsh16x64 {
 			break
 		}
+		_ = x.Args[1]
 		x_1 := x.Args[1]
 		if x_1.Op != OpConst64 {
 			break
@@ -20154,6 +21299,7 @@ func rewriteValuegeneric_OpSignExt8to32_0(v *Value) bool {
 		if x.Op != OpRsh32x64 {
 			break
 		}
+		_ = x.Args[1]
 		x_1 := x.Args[1]
 		if x_1.Op != OpConst64 {
 			break
@@ -20195,6 +21341,7 @@ func rewriteValuegeneric_OpSignExt8to64_0(v *Value) bool {
 		if x.Op != OpRsh64x64 {
 			break
 		}
+		_ = x.Args[1]
 		x_1 := x.Args[1]
 		if x_1.Op != OpConst64 {
 			break
@@ -20219,6 +21366,7 @@ func rewriteValuegeneric_OpSliceCap_0(v *Value) bool {
 		if v_0.Op != OpSliceMake {
 			break
 		}
+		_ = v_0.Args[2]
 		v_0_2 := v_0.Args[2]
 		if v_0_2.Op != OpConst64 {
 			break
@@ -20238,6 +21386,7 @@ func rewriteValuegeneric_OpSliceCap_0(v *Value) bool {
 		if v_0.Op != OpSliceMake {
 			break
 		}
+		_ = v_0.Args[2]
 		v_0_2 := v_0.Args[2]
 		if v_0_2.Op != OpConst32 {
 			break
@@ -20257,6 +21406,7 @@ func rewriteValuegeneric_OpSliceCap_0(v *Value) bool {
 		if v_0.Op != OpSliceMake {
 			break
 		}
+		_ = v_0.Args[2]
 		v_0_2 := v_0.Args[2]
 		if v_0_2.Op != OpSliceCap {
 			break
@@ -20274,6 +21424,7 @@ func rewriteValuegeneric_OpSliceCap_0(v *Value) bool {
 		if v_0.Op != OpSliceMake {
 			break
 		}
+		_ = v_0.Args[2]
 		v_0_2 := v_0.Args[2]
 		if v_0_2.Op != OpSliceLen {
 			break
@@ -20294,6 +21445,7 @@ func rewriteValuegeneric_OpSliceLen_0(v *Value) bool {
 		if v_0.Op != OpSliceMake {
 			break
 		}
+		_ = v_0.Args[2]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
 			break
@@ -20313,6 +21465,7 @@ func rewriteValuegeneric_OpSliceLen_0(v *Value) bool {
 		if v_0.Op != OpSliceMake {
 			break
 		}
+		_ = v_0.Args[2]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst32 {
 			break
@@ -20332,6 +21485,7 @@ func rewriteValuegeneric_OpSliceLen_0(v *Value) bool {
 		if v_0.Op != OpSliceMake {
 			break
 		}
+		_ = v_0.Args[2]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpSliceLen {
 			break
@@ -20352,6 +21506,7 @@ func rewriteValuegeneric_OpSlicePtr_0(v *Value) bool {
 		if v_0.Op != OpSliceMake {
 			break
 		}
+		_ = v_0.Args[2]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpSlicePtr {
 			break
@@ -20454,12 +21609,14 @@ func rewriteValuegeneric_OpStore_0(v *Value) bool {
 	// result: mem
 	for {
 		t1 := v.Aux
+		_ = v.Args[2]
 		p1 := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpLoad {
 			break
 		}
 		t2 := v_1.Type
+		_ = v_1.Args[1]
 		p2 := v_1.Args[0]
 		mem := v_1.Args[1]
 		if mem != v.Args[2] {
@@ -20478,6 +21635,7 @@ func rewriteValuegeneric_OpStore_0(v *Value) bool {
 	// result: mem
 	for {
 		t1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpOffPtr {
 			break
@@ -20489,6 +21647,7 @@ func rewriteValuegeneric_OpStore_0(v *Value) bool {
 			break
 		}
 		t2 := v_1.Type
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpOffPtr {
 			break
@@ -20503,6 +21662,7 @@ func rewriteValuegeneric_OpStore_0(v *Value) bool {
 			break
 		}
 		t3 := mem.Aux
+		_ = mem.Args[2]
 		mem_0 := mem.Args[0]
 		if mem_0.Op != OpOffPtr {
 			break
@@ -20525,6 +21685,7 @@ func rewriteValuegeneric_OpStore_0(v *Value) bool {
 	// result: mem
 	for {
 		t1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpOffPtr {
 			break
@@ -20536,6 +21697,7 @@ func rewriteValuegeneric_OpStore_0(v *Value) bool {
 			break
 		}
 		t2 := v_1.Type
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpOffPtr {
 			break
@@ -20550,6 +21712,7 @@ func rewriteValuegeneric_OpStore_0(v *Value) bool {
 			break
 		}
 		t3 := mem.Aux
+		_ = mem.Args[2]
 		mem_0 := mem.Args[0]
 		if mem_0.Op != OpOffPtr {
 			break
@@ -20561,6 +21724,7 @@ func rewriteValuegeneric_OpStore_0(v *Value) bool {
 			break
 		}
 		t4 := mem_2.Aux
+		_ = mem_2.Args[2]
 		mem_2_0 := mem_2.Args[0]
 		if mem_2_0.Op != OpOffPtr {
 			break
@@ -20583,6 +21747,7 @@ func rewriteValuegeneric_OpStore_0(v *Value) bool {
 	// result: mem
 	for {
 		t1 := v.Aux
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpOffPtr {
 			break
@@ -20594,6 +21759,7 @@ func rewriteValuegeneric_OpStore_0(v *Value) bool {
 			break
 		}
 		t2 := v_1.Type
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpOffPtr {
 			break
@@ -20608,6 +21774,7 @@ func rewriteValuegeneric_OpStore_0(v *Value) bool {
 			break
 		}
 		t3 := mem.Aux
+		_ = mem.Args[2]
 		mem_0 := mem.Args[0]
 		if mem_0.Op != OpOffPtr {
 			break
@@ -20619,6 +21786,7 @@ func rewriteValuegeneric_OpStore_0(v *Value) bool {
 			break
 		}
 		t4 := mem_2.Aux
+		_ = mem_2.Args[2]
 		mem_2_0 := mem_2.Args[0]
 		if mem_2_0.Op != OpOffPtr {
 			break
@@ -20630,6 +21798,7 @@ func rewriteValuegeneric_OpStore_0(v *Value) bool {
 			break
 		}
 		t5 := mem_2_2.Aux
+		_ = mem_2_2.Args[2]
 		mem_2_2_0 := mem_2_2.Args[0]
 		if mem_2_2_0.Op != OpOffPtr {
 			break
@@ -20651,6 +21820,7 @@ func rewriteValuegeneric_OpStore_0(v *Value) bool {
 	// cond:
 	// result: mem
 	for {
+		_ = v.Args[2]
 		v_1 := v.Args[1]
 		if v_1.Op != OpStructMake0 {
 			break
@@ -20665,6 +21835,7 @@ func rewriteValuegeneric_OpStore_0(v *Value) bool {
 	// cond:
 	// result: (Store {t.FieldType(0)} (OffPtr <t.FieldType(0).PtrTo()> [0] dst) f0 mem)
 	for {
+		_ = v.Args[2]
 		dst := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpStructMake1 {
@@ -20687,12 +21858,14 @@ func rewriteValuegeneric_OpStore_0(v *Value) bool {
 	// cond:
 	// result: (Store {t.FieldType(1)}     (OffPtr <t.FieldType(1).PtrTo()> [t.FieldOff(1)] dst)     f1     (Store {t.FieldType(0)}       (OffPtr <t.FieldType(0).PtrTo()> [0] dst)         f0 mem))
 	for {
+		_ = v.Args[2]
 		dst := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpStructMake2 {
 			break
 		}
 		t := v_1.Type
+		_ = v_1.Args[1]
 		f0 := v_1.Args[0]
 		f1 := v_1.Args[1]
 		mem := v.Args[2]
@@ -20718,12 +21891,14 @@ func rewriteValuegeneric_OpStore_0(v *Value) bool {
 	// cond:
 	// result: (Store {t.FieldType(2)}     (OffPtr <t.FieldType(2).PtrTo()> [t.FieldOff(2)] dst)     f2     (Store {t.FieldType(1)}       (OffPtr <t.FieldType(1).PtrTo()> [t.FieldOff(1)] dst)       f1       (Store {t.FieldType(0)}         (OffPtr <t.FieldType(0).PtrTo()> [0] dst)           f0 mem)))
 	for {
+		_ = v.Args[2]
 		dst := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpStructMake3 {
 			break
 		}
 		t := v_1.Type
+		_ = v_1.Args[2]
 		f0 := v_1.Args[0]
 		f1 := v_1.Args[1]
 		f2 := v_1.Args[2]
@@ -20758,12 +21933,14 @@ func rewriteValuegeneric_OpStore_0(v *Value) bool {
 	// cond:
 	// result: (Store {t.FieldType(3)}     (OffPtr <t.FieldType(3).PtrTo()> [t.FieldOff(3)] dst)     f3     (Store {t.FieldType(2)}       (OffPtr <t.FieldType(2).PtrTo()> [t.FieldOff(2)] dst)       f2       (Store {t.FieldType(1)}         (OffPtr <t.FieldType(1).PtrTo()> [t.FieldOff(1)] dst)         f1         (Store {t.FieldType(0)}           (OffPtr <t.FieldType(0).PtrTo()> [0] dst)             f0 mem))))
 	for {
+		_ = v.Args[2]
 		dst := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpStructMake4 {
 			break
 		}
 		t := v_1.Type
+		_ = v_1.Args[3]
 		f0 := v_1.Args[0]
 		f1 := v_1.Args[1]
 		f2 := v_1.Args[2]
@@ -20808,11 +21985,13 @@ func rewriteValuegeneric_OpStore_0(v *Value) bool {
 	// result: (Move {t} [t.(*types.Type).Size()] dst src mem)
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpLoad {
 			break
 		}
+		_ = v_1.Args[1]
 		src := v_1.Args[0]
 		mem := v_1.Args[1]
 		if mem != v.Args[2] {
@@ -20843,11 +22022,13 @@ func rewriteValuegeneric_OpStore_10(v *Value) bool {
 	// result: (Move {t} [t.(*types.Type).Size()] dst src (VarDef {x} mem))
 	for {
 		t := v.Aux
+		_ = v.Args[2]
 		dst := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpLoad {
 			break
 		}
+		_ = v_1.Args[1]
 		src := v_1.Args[0]
 		mem := v_1.Args[1]
 		v_2 := v.Args[2]
@@ -20876,6 +22057,7 @@ func rewriteValuegeneric_OpStore_10(v *Value) bool {
 	// cond:
 	// result: mem
 	for {
+		_ = v.Args[2]
 		v_1 := v.Args[1]
 		if v_1.Op != OpArrayMake0 {
 			break
@@ -20890,6 +22072,7 @@ func rewriteValuegeneric_OpStore_10(v *Value) bool {
 	// cond:
 	// result: (Store {e.Type} dst e mem)
 	for {
+		_ = v.Args[2]
 		dst := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpArrayMake1 {
@@ -20908,10 +22091,12 @@ func rewriteValuegeneric_OpStore_10(v *Value) bool {
 	// cond: isConstZero(x) 	&& mem.Op == OpStaticCall 	&& isSameSym(mem.Aux, "runtime.newobject") 	&& c == config.ctxt.FixedFrameSize() + config.RegSize
 	// result: mem
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpLoad {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpOffPtr {
 			break
@@ -20938,6 +22123,7 @@ func rewriteValuegeneric_OpStore_10(v *Value) bool {
 	// cond: isConstZero(x) 	&& mem.Op == OpStaticCall 	&& isSameSym(mem.Aux, "runtime.newobject") 	&& c == config.ctxt.FixedFrameSize() + config.RegSize
 	// result: mem
 	for {
+		_ = v.Args[2]
 		v_0 := v.Args[0]
 		if v_0.Op != OpOffPtr {
 			break
@@ -20946,6 +22132,7 @@ func rewriteValuegeneric_OpStore_10(v *Value) bool {
 		if v_0_0.Op != OpLoad {
 			break
 		}
+		_ = v_0_0.Args[1]
 		v_0_0_0 := v_0_0.Args[0]
 		if v_0_0_0.Op != OpOffPtr {
 			break
@@ -20979,6 +22166,7 @@ func rewriteValuegeneric_OpStringLen_0(v *Value) bool {
 		if v_0.Op != OpStringMake {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
 			break
@@ -21001,6 +22189,7 @@ func rewriteValuegeneric_OpStringPtr_0(v *Value) bool {
 		if v_0.Op != OpStringMake {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst64 {
 			break
@@ -21040,6 +22229,7 @@ func rewriteValuegeneric_OpStructSelect_0(v *Value) bool {
 		if v_0.Op != OpStructMake2 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v.reset(OpCopy)
 		v.Type = x.Type
@@ -21057,6 +22247,7 @@ func rewriteValuegeneric_OpStructSelect_0(v *Value) bool {
 		if v_0.Op != OpStructMake2 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[1]
 		v.reset(OpCopy)
 		v.Type = x.Type
@@ -21074,6 +22265,7 @@ func rewriteValuegeneric_OpStructSelect_0(v *Value) bool {
 		if v_0.Op != OpStructMake3 {
 			break
 		}
+		_ = v_0.Args[2]
 		x := v_0.Args[0]
 		v.reset(OpCopy)
 		v.Type = x.Type
@@ -21091,6 +22283,7 @@ func rewriteValuegeneric_OpStructSelect_0(v *Value) bool {
 		if v_0.Op != OpStructMake3 {
 			break
 		}
+		_ = v_0.Args[2]
 		x := v_0.Args[1]
 		v.reset(OpCopy)
 		v.Type = x.Type
@@ -21108,6 +22301,7 @@ func rewriteValuegeneric_OpStructSelect_0(v *Value) bool {
 		if v_0.Op != OpStructMake3 {
 			break
 		}
+		_ = v_0.Args[2]
 		x := v_0.Args[2]
 		v.reset(OpCopy)
 		v.Type = x.Type
@@ -21125,6 +22319,7 @@ func rewriteValuegeneric_OpStructSelect_0(v *Value) bool {
 		if v_0.Op != OpStructMake4 {
 			break
 		}
+		_ = v_0.Args[3]
 		x := v_0.Args[0]
 		v.reset(OpCopy)
 		v.Type = x.Type
@@ -21142,6 +22337,7 @@ func rewriteValuegeneric_OpStructSelect_0(v *Value) bool {
 		if v_0.Op != OpStructMake4 {
 			break
 		}
+		_ = v_0.Args[3]
 		x := v_0.Args[1]
 		v.reset(OpCopy)
 		v.Type = x.Type
@@ -21159,6 +22355,7 @@ func rewriteValuegeneric_OpStructSelect_0(v *Value) bool {
 		if v_0.Op != OpStructMake4 {
 			break
 		}
+		_ = v_0.Args[3]
 		x := v_0.Args[2]
 		v.reset(OpCopy)
 		v.Type = x.Type
@@ -21176,6 +22373,7 @@ func rewriteValuegeneric_OpStructSelect_0(v *Value) bool {
 		if v_0.Op != OpStructMake4 {
 			break
 		}
+		_ = v_0.Args[3]
 		x := v_0.Args[3]
 		v.reset(OpCopy)
 		v.Type = x.Type
@@ -21199,6 +22397,7 @@ func rewriteValuegeneric_OpStructSelect_10(v *Value) bool {
 			break
 		}
 		t := x.Type
+		_ = x.Args[1]
 		ptr := x.Args[0]
 		mem := x.Args[1]
 		if !(!fe.CanSSA(t)) {
@@ -21240,6 +22439,7 @@ func rewriteValuegeneric_OpSub16_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [int64(int16(c-d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -21258,6 +22458,7 @@ func rewriteValuegeneric_OpSub16_0(v *Value) bool {
 	// cond: x.Op != OpConst16
 	// result: (Add16 (Const16 <t> [int64(int16(-c))]) x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -21279,6 +22480,7 @@ func rewriteValuegeneric_OpSub16_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -21291,10 +22493,12 @@ func rewriteValuegeneric_OpSub16_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd16 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if x != v.Args[1] {
@@ -21309,10 +22513,12 @@ func rewriteValuegeneric_OpSub16_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd16 {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		x := v_0.Args[1]
 		if x != v.Args[1] {
@@ -21327,10 +22533,12 @@ func rewriteValuegeneric_OpSub16_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd16 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if y != v.Args[1] {
@@ -21345,10 +22553,12 @@ func rewriteValuegeneric_OpSub16_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd16 {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		x := v_0.Args[1]
 		if y != v.Args[1] {
@@ -21363,11 +22573,13 @@ func rewriteValuegeneric_OpSub16_0(v *Value) bool {
 	// cond: (z.Op != OpConst16 && x.Op != OpConst16)
 	// result: (Sub16 (Add16 <t> x z) i)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpSub16 {
 			break
 		}
+		_ = v_1.Args[1]
 		i := v_1.Args[0]
 		if i.Op != OpConst16 {
 			break
@@ -21389,11 +22601,13 @@ func rewriteValuegeneric_OpSub16_0(v *Value) bool {
 	// cond: (z.Op != OpConst16 && x.Op != OpConst16)
 	// result: (Add16 i (Sub16 <t> x z))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpSub16 {
 			break
 		}
+		_ = v_1.Args[1]
 		z := v_1.Args[0]
 		i := v_1.Args[1]
 		if i.Op != OpConst16 {
@@ -21415,6 +22629,7 @@ func rewriteValuegeneric_OpSub16_0(v *Value) bool {
 	// cond:
 	// result: (Sub16 (Const16 <t> [int64(int16(c+d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -21425,6 +22640,7 @@ func rewriteValuegeneric_OpSub16_0(v *Value) bool {
 		if v_1.Op != OpSub16 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst16 {
@@ -21450,6 +22666,7 @@ func rewriteValuegeneric_OpSub16_10(v *Value) bool {
 	// cond:
 	// result: (Add16 (Const16 <t> [int64(int16(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -21460,6 +22677,7 @@ func rewriteValuegeneric_OpSub16_10(v *Value) bool {
 		if v_1.Op != OpSub16 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst16 {
 			break
@@ -21485,6 +22703,7 @@ func rewriteValuegeneric_OpSub32_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [int64(int32(c-d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -21503,6 +22722,7 @@ func rewriteValuegeneric_OpSub32_0(v *Value) bool {
 	// cond: x.Op != OpConst32
 	// result: (Add32 (Const32 <t> [int64(int32(-c))]) x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -21524,6 +22744,7 @@ func rewriteValuegeneric_OpSub32_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -21536,10 +22757,12 @@ func rewriteValuegeneric_OpSub32_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd32 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if x != v.Args[1] {
@@ -21554,10 +22777,12 @@ func rewriteValuegeneric_OpSub32_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd32 {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		x := v_0.Args[1]
 		if x != v.Args[1] {
@@ -21572,10 +22797,12 @@ func rewriteValuegeneric_OpSub32_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd32 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if y != v.Args[1] {
@@ -21590,10 +22817,12 @@ func rewriteValuegeneric_OpSub32_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd32 {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		x := v_0.Args[1]
 		if y != v.Args[1] {
@@ -21608,11 +22837,13 @@ func rewriteValuegeneric_OpSub32_0(v *Value) bool {
 	// cond: (z.Op != OpConst32 && x.Op != OpConst32)
 	// result: (Sub32 (Add32 <t> x z) i)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpSub32 {
 			break
 		}
+		_ = v_1.Args[1]
 		i := v_1.Args[0]
 		if i.Op != OpConst32 {
 			break
@@ -21634,11 +22865,13 @@ func rewriteValuegeneric_OpSub32_0(v *Value) bool {
 	// cond: (z.Op != OpConst32 && x.Op != OpConst32)
 	// result: (Add32 i (Sub32 <t> x z))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpSub32 {
 			break
 		}
+		_ = v_1.Args[1]
 		z := v_1.Args[0]
 		i := v_1.Args[1]
 		if i.Op != OpConst32 {
@@ -21660,6 +22893,7 @@ func rewriteValuegeneric_OpSub32_0(v *Value) bool {
 	// cond:
 	// result: (Sub32 (Const32 <t> [int64(int32(c+d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -21670,6 +22904,7 @@ func rewriteValuegeneric_OpSub32_0(v *Value) bool {
 		if v_1.Op != OpSub32 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst32 {
@@ -21695,6 +22930,7 @@ func rewriteValuegeneric_OpSub32_10(v *Value) bool {
 	// cond:
 	// result: (Add32 (Const32 <t> [int64(int32(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -21705,6 +22941,7 @@ func rewriteValuegeneric_OpSub32_10(v *Value) bool {
 		if v_1.Op != OpSub32 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -21728,6 +22965,7 @@ func rewriteValuegeneric_OpSub32F_0(v *Value) bool {
 	// cond:
 	// result: (Const32F [f2i(float64(i2f32(c) - i2f32(d)))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32F {
 			break
@@ -21746,6 +22984,7 @@ func rewriteValuegeneric_OpSub32F_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32F {
@@ -21768,6 +23007,7 @@ func rewriteValuegeneric_OpSub64_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [c-d])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -21786,6 +23026,7 @@ func rewriteValuegeneric_OpSub64_0(v *Value) bool {
 	// cond: x.Op != OpConst64
 	// result: (Add64 (Const64 <t> [-c]) x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -21807,6 +23048,7 @@ func rewriteValuegeneric_OpSub64_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -21819,10 +23061,12 @@ func rewriteValuegeneric_OpSub64_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if x != v.Args[1] {
@@ -21837,10 +23081,12 @@ func rewriteValuegeneric_OpSub64_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		x := v_0.Args[1]
 		if x != v.Args[1] {
@@ -21855,10 +23101,12 @@ func rewriteValuegeneric_OpSub64_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if y != v.Args[1] {
@@ -21873,10 +23121,12 @@ func rewriteValuegeneric_OpSub64_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		x := v_0.Args[1]
 		if y != v.Args[1] {
@@ -21891,11 +23141,13 @@ func rewriteValuegeneric_OpSub64_0(v *Value) bool {
 	// cond: (z.Op != OpConst64 && x.Op != OpConst64)
 	// result: (Sub64 (Add64 <t> x z) i)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpSub64 {
 			break
 		}
+		_ = v_1.Args[1]
 		i := v_1.Args[0]
 		if i.Op != OpConst64 {
 			break
@@ -21917,11 +23169,13 @@ func rewriteValuegeneric_OpSub64_0(v *Value) bool {
 	// cond: (z.Op != OpConst64 && x.Op != OpConst64)
 	// result: (Add64 i (Sub64 <t> x z))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpSub64 {
 			break
 		}
+		_ = v_1.Args[1]
 		z := v_1.Args[0]
 		i := v_1.Args[1]
 		if i.Op != OpConst64 {
@@ -21943,6 +23197,7 @@ func rewriteValuegeneric_OpSub64_0(v *Value) bool {
 	// cond:
 	// result: (Sub64 (Const64 <t> [c+d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -21953,6 +23208,7 @@ func rewriteValuegeneric_OpSub64_0(v *Value) bool {
 		if v_1.Op != OpSub64 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst64 {
@@ -21978,6 +23234,7 @@ func rewriteValuegeneric_OpSub64_10(v *Value) bool {
 	// cond:
 	// result: (Add64 (Const64 <t> [c-d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -21988,6 +23245,7 @@ func rewriteValuegeneric_OpSub64_10(v *Value) bool {
 		if v_1.Op != OpSub64 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst64 {
 			break
@@ -22011,6 +23269,7 @@ func rewriteValuegeneric_OpSub64F_0(v *Value) bool {
 	// cond:
 	// result: (Const64F [f2i(i2f(c) - i2f(d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64F {
 			break
@@ -22029,6 +23288,7 @@ func rewriteValuegeneric_OpSub64F_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64F {
@@ -22051,6 +23311,7 @@ func rewriteValuegeneric_OpSub8_0(v *Value) bool {
 	// cond:
 	// result: (Const8 [int64(int8(c-d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -22069,6 +23330,7 @@ func rewriteValuegeneric_OpSub8_0(v *Value) bool {
 	// cond: x.Op != OpConst8
 	// result: (Add8  (Const8  <t> [int64(int8(-c))]) x)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
@@ -22090,6 +23352,7 @@ func rewriteValuegeneric_OpSub8_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -22102,10 +23365,12 @@ func rewriteValuegeneric_OpSub8_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd8 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if x != v.Args[1] {
@@ -22120,10 +23385,12 @@ func rewriteValuegeneric_OpSub8_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd8 {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		x := v_0.Args[1]
 		if x != v.Args[1] {
@@ -22138,10 +23405,12 @@ func rewriteValuegeneric_OpSub8_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd8 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if y != v.Args[1] {
@@ -22156,10 +23425,12 @@ func rewriteValuegeneric_OpSub8_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpAdd8 {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		x := v_0.Args[1]
 		if y != v.Args[1] {
@@ -22174,11 +23445,13 @@ func rewriteValuegeneric_OpSub8_0(v *Value) bool {
 	// cond: (z.Op != OpConst8  && x.Op != OpConst8)
 	// result: (Sub8  (Add8  <t> x z) i)
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpSub8 {
 			break
 		}
+		_ = v_1.Args[1]
 		i := v_1.Args[0]
 		if i.Op != OpConst8 {
 			break
@@ -22200,11 +23473,13 @@ func rewriteValuegeneric_OpSub8_0(v *Value) bool {
 	// cond: (z.Op != OpConst8  && x.Op != OpConst8)
 	// result: (Add8  i (Sub8  <t> x z))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpSub8 {
 			break
 		}
+		_ = v_1.Args[1]
 		z := v_1.Args[0]
 		i := v_1.Args[1]
 		if i.Op != OpConst8 {
@@ -22226,6 +23501,7 @@ func rewriteValuegeneric_OpSub8_0(v *Value) bool {
 	// cond:
 	// result: (Sub8  (Const8  <t> [int64(int8(c+d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -22236,6 +23512,7 @@ func rewriteValuegeneric_OpSub8_0(v *Value) bool {
 		if v_1.Op != OpSub8 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst8 {
@@ -22261,6 +23538,7 @@ func rewriteValuegeneric_OpSub8_10(v *Value) bool {
 	// cond:
 	// result: (Add8  (Const8  <t> [int64(int8(c-d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -22271,6 +23549,7 @@ func rewriteValuegeneric_OpSub8_10(v *Value) bool {
 		if v_1.Op != OpSub8 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst8 {
 			break
@@ -22339,6 +23618,7 @@ func rewriteValuegeneric_OpTrunc16to8_0(v *Value) bool {
 		if v_0.Op != OpAnd16 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst16 {
 			break
@@ -22360,6 +23640,7 @@ func rewriteValuegeneric_OpTrunc16to8_0(v *Value) bool {
 		if v_0.Op != OpAnd16 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst16 {
@@ -22451,6 +23732,7 @@ func rewriteValuegeneric_OpTrunc32to16_0(v *Value) bool {
 		if v_0.Op != OpAnd32 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst32 {
 			break
@@ -22472,6 +23754,7 @@ func rewriteValuegeneric_OpTrunc32to16_0(v *Value) bool {
 		if v_0.Op != OpAnd32 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst32 {
@@ -22537,6 +23820,7 @@ func rewriteValuegeneric_OpTrunc32to8_0(v *Value) bool {
 		if v_0.Op != OpAnd32 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst32 {
 			break
@@ -22558,6 +23842,7 @@ func rewriteValuegeneric_OpTrunc32to8_0(v *Value) bool {
 		if v_0.Op != OpAnd32 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst32 {
@@ -22649,6 +23934,7 @@ func rewriteValuegeneric_OpTrunc64to16_0(v *Value) bool {
 		if v_0.Op != OpAnd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst64 {
 			break
@@ -22670,6 +23956,7 @@ func rewriteValuegeneric_OpTrunc64to16_0(v *Value) bool {
 		if v_0.Op != OpAnd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -22787,6 +24074,7 @@ func rewriteValuegeneric_OpTrunc64to32_0(v *Value) bool {
 		if v_0.Op != OpAnd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst64 {
 			break
@@ -22808,6 +24096,7 @@ func rewriteValuegeneric_OpTrunc64to32_0(v *Value) bool {
 		if v_0.Op != OpAnd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -22873,6 +24162,7 @@ func rewriteValuegeneric_OpTrunc64to8_0(v *Value) bool {
 		if v_0.Op != OpAnd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst64 {
 			break
@@ -22894,6 +24184,7 @@ func rewriteValuegeneric_OpTrunc64to8_0(v *Value) bool {
 		if v_0.Op != OpAnd64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -22916,6 +24207,7 @@ func rewriteValuegeneric_OpXor16_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [int64(int16(c^d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -22934,6 +24226,7 @@ func rewriteValuegeneric_OpXor16_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [int64(int16(c^d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -22952,6 +24245,7 @@ func rewriteValuegeneric_OpXor16_0(v *Value) bool {
 	// cond:
 	// result: (Const16 [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -22964,6 +24258,7 @@ func rewriteValuegeneric_OpXor16_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -22981,6 +24276,7 @@ func rewriteValuegeneric_OpXor16_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst16 {
@@ -22998,11 +24294,13 @@ func rewriteValuegeneric_OpXor16_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpXor16 {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -23016,11 +24314,13 @@ func rewriteValuegeneric_OpXor16_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpXor16 {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		if x != v_1.Args[1] {
 			break
@@ -23034,10 +24334,12 @@ func rewriteValuegeneric_OpXor16_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpXor16 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if x != v.Args[1] {
@@ -23052,10 +24354,12 @@ func rewriteValuegeneric_OpXor16_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpXor16 {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		x := v_0.Args[1]
 		if x != v.Args[1] {
@@ -23070,10 +24374,12 @@ func rewriteValuegeneric_OpXor16_0(v *Value) bool {
 	// cond: (z.Op != OpConst16 && x.Op != OpConst16)
 	// result: (Xor16 i (Xor16 <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpXor16 {
 			break
 		}
+		_ = v_0.Args[1]
 		i := v_0.Args[0]
 		if i.Op != OpConst16 {
 			break
@@ -23101,10 +24407,12 @@ func rewriteValuegeneric_OpXor16_10(v *Value) bool {
 	// cond: (z.Op != OpConst16 && x.Op != OpConst16)
 	// result: (Xor16 i (Xor16 <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpXor16 {
 			break
 		}
+		_ = v_0.Args[1]
 		z := v_0.Args[0]
 		i := v_0.Args[1]
 		if i.Op != OpConst16 {
@@ -23127,11 +24435,13 @@ func rewriteValuegeneric_OpXor16_10(v *Value) bool {
 	// cond: (z.Op != OpConst16 && x.Op != OpConst16)
 	// result: (Xor16 i (Xor16 <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpXor16 {
 			break
 		}
+		_ = v_1.Args[1]
 		i := v_1.Args[0]
 		if i.Op != OpConst16 {
 			break
@@ -23153,11 +24463,13 @@ func rewriteValuegeneric_OpXor16_10(v *Value) bool {
 	// cond: (z.Op != OpConst16 && x.Op != OpConst16)
 	// result: (Xor16 i (Xor16 <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpXor16 {
 			break
 		}
+		_ = v_1.Args[1]
 		z := v_1.Args[0]
 		i := v_1.Args[1]
 		if i.Op != OpConst16 {
@@ -23179,6 +24491,7 @@ func rewriteValuegeneric_OpXor16_10(v *Value) bool {
 	// cond:
 	// result: (Xor16 (Const16 <t> [int64(int16(c^d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -23189,6 +24502,7 @@ func rewriteValuegeneric_OpXor16_10(v *Value) bool {
 		if v_1.Op != OpXor16 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst16 {
 			break
@@ -23209,6 +24523,7 @@ func rewriteValuegeneric_OpXor16_10(v *Value) bool {
 	// cond:
 	// result: (Xor16 (Const16 <t> [int64(int16(c^d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst16 {
 			break
@@ -23219,6 +24534,7 @@ func rewriteValuegeneric_OpXor16_10(v *Value) bool {
 		if v_1.Op != OpXor16 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst16 {
@@ -23239,10 +24555,12 @@ func rewriteValuegeneric_OpXor16_10(v *Value) bool {
 	// cond:
 	// result: (Xor16 (Const16 <t> [int64(int16(c^d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpXor16 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst16 {
 			break
@@ -23269,10 +24587,12 @@ func rewriteValuegeneric_OpXor16_10(v *Value) bool {
 	// cond:
 	// result: (Xor16 (Const16 <t> [int64(int16(c^d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpXor16 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst16 {
@@ -23304,6 +24624,7 @@ func rewriteValuegeneric_OpXor32_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [int64(int32(c^d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -23322,6 +24643,7 @@ func rewriteValuegeneric_OpXor32_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [int64(int32(c^d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -23340,6 +24662,7 @@ func rewriteValuegeneric_OpXor32_0(v *Value) bool {
 	// cond:
 	// result: (Const32 [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -23352,6 +24675,7 @@ func rewriteValuegeneric_OpXor32_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -23369,6 +24693,7 @@ func rewriteValuegeneric_OpXor32_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst32 {
@@ -23386,11 +24711,13 @@ func rewriteValuegeneric_OpXor32_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpXor32 {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -23404,11 +24731,13 @@ func rewriteValuegeneric_OpXor32_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpXor32 {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		if x != v_1.Args[1] {
 			break
@@ -23422,10 +24751,12 @@ func rewriteValuegeneric_OpXor32_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpXor32 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if x != v.Args[1] {
@@ -23440,10 +24771,12 @@ func rewriteValuegeneric_OpXor32_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpXor32 {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		x := v_0.Args[1]
 		if x != v.Args[1] {
@@ -23458,10 +24791,12 @@ func rewriteValuegeneric_OpXor32_0(v *Value) bool {
 	// cond: (z.Op != OpConst32 && x.Op != OpConst32)
 	// result: (Xor32 i (Xor32 <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpXor32 {
 			break
 		}
+		_ = v_0.Args[1]
 		i := v_0.Args[0]
 		if i.Op != OpConst32 {
 			break
@@ -23489,10 +24824,12 @@ func rewriteValuegeneric_OpXor32_10(v *Value) bool {
 	// cond: (z.Op != OpConst32 && x.Op != OpConst32)
 	// result: (Xor32 i (Xor32 <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpXor32 {
 			break
 		}
+		_ = v_0.Args[1]
 		z := v_0.Args[0]
 		i := v_0.Args[1]
 		if i.Op != OpConst32 {
@@ -23515,11 +24852,13 @@ func rewriteValuegeneric_OpXor32_10(v *Value) bool {
 	// cond: (z.Op != OpConst32 && x.Op != OpConst32)
 	// result: (Xor32 i (Xor32 <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpXor32 {
 			break
 		}
+		_ = v_1.Args[1]
 		i := v_1.Args[0]
 		if i.Op != OpConst32 {
 			break
@@ -23541,11 +24880,13 @@ func rewriteValuegeneric_OpXor32_10(v *Value) bool {
 	// cond: (z.Op != OpConst32 && x.Op != OpConst32)
 	// result: (Xor32 i (Xor32 <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpXor32 {
 			break
 		}
+		_ = v_1.Args[1]
 		z := v_1.Args[0]
 		i := v_1.Args[1]
 		if i.Op != OpConst32 {
@@ -23567,6 +24908,7 @@ func rewriteValuegeneric_OpXor32_10(v *Value) bool {
 	// cond:
 	// result: (Xor32 (Const32 <t> [int64(int32(c^d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -23577,6 +24919,7 @@ func rewriteValuegeneric_OpXor32_10(v *Value) bool {
 		if v_1.Op != OpXor32 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst32 {
 			break
@@ -23597,6 +24940,7 @@ func rewriteValuegeneric_OpXor32_10(v *Value) bool {
 	// cond:
 	// result: (Xor32 (Const32 <t> [int64(int32(c^d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst32 {
 			break
@@ -23607,6 +24951,7 @@ func rewriteValuegeneric_OpXor32_10(v *Value) bool {
 		if v_1.Op != OpXor32 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst32 {
@@ -23627,10 +24972,12 @@ func rewriteValuegeneric_OpXor32_10(v *Value) bool {
 	// cond:
 	// result: (Xor32 (Const32 <t> [int64(int32(c^d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpXor32 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst32 {
 			break
@@ -23657,10 +25004,12 @@ func rewriteValuegeneric_OpXor32_10(v *Value) bool {
 	// cond:
 	// result: (Xor32 (Const32 <t> [int64(int32(c^d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpXor32 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst32 {
@@ -23692,6 +25041,7 @@ func rewriteValuegeneric_OpXor64_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [c^d])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -23710,6 +25060,7 @@ func rewriteValuegeneric_OpXor64_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [c^d])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -23728,6 +25079,7 @@ func rewriteValuegeneric_OpXor64_0(v *Value) bool {
 	// cond:
 	// result: (Const64 [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -23740,6 +25092,7 @@ func rewriteValuegeneric_OpXor64_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -23757,6 +25110,7 @@ func rewriteValuegeneric_OpXor64_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst64 {
@@ -23774,11 +25128,13 @@ func rewriteValuegeneric_OpXor64_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpXor64 {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -23792,11 +25148,13 @@ func rewriteValuegeneric_OpXor64_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpXor64 {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		if x != v_1.Args[1] {
 			break
@@ -23810,10 +25168,12 @@ func rewriteValuegeneric_OpXor64_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpXor64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if x != v.Args[1] {
@@ -23828,10 +25188,12 @@ func rewriteValuegeneric_OpXor64_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpXor64 {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		x := v_0.Args[1]
 		if x != v.Args[1] {
@@ -23846,10 +25208,12 @@ func rewriteValuegeneric_OpXor64_0(v *Value) bool {
 	// cond: (z.Op != OpConst64 && x.Op != OpConst64)
 	// result: (Xor64 i (Xor64 <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpXor64 {
 			break
 		}
+		_ = v_0.Args[1]
 		i := v_0.Args[0]
 		if i.Op != OpConst64 {
 			break
@@ -23877,10 +25241,12 @@ func rewriteValuegeneric_OpXor64_10(v *Value) bool {
 	// cond: (z.Op != OpConst64 && x.Op != OpConst64)
 	// result: (Xor64 i (Xor64 <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpXor64 {
 			break
 		}
+		_ = v_0.Args[1]
 		z := v_0.Args[0]
 		i := v_0.Args[1]
 		if i.Op != OpConst64 {
@@ -23903,11 +25269,13 @@ func rewriteValuegeneric_OpXor64_10(v *Value) bool {
 	// cond: (z.Op != OpConst64 && x.Op != OpConst64)
 	// result: (Xor64 i (Xor64 <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpXor64 {
 			break
 		}
+		_ = v_1.Args[1]
 		i := v_1.Args[0]
 		if i.Op != OpConst64 {
 			break
@@ -23929,11 +25297,13 @@ func rewriteValuegeneric_OpXor64_10(v *Value) bool {
 	// cond: (z.Op != OpConst64 && x.Op != OpConst64)
 	// result: (Xor64 i (Xor64 <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpXor64 {
 			break
 		}
+		_ = v_1.Args[1]
 		z := v_1.Args[0]
 		i := v_1.Args[1]
 		if i.Op != OpConst64 {
@@ -23955,6 +25325,7 @@ func rewriteValuegeneric_OpXor64_10(v *Value) bool {
 	// cond:
 	// result: (Xor64 (Const64 <t> [c^d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -23965,6 +25336,7 @@ func rewriteValuegeneric_OpXor64_10(v *Value) bool {
 		if v_1.Op != OpXor64 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst64 {
 			break
@@ -23985,6 +25357,7 @@ func rewriteValuegeneric_OpXor64_10(v *Value) bool {
 	// cond:
 	// result: (Xor64 (Const64 <t> [c^d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst64 {
 			break
@@ -23995,6 +25368,7 @@ func rewriteValuegeneric_OpXor64_10(v *Value) bool {
 		if v_1.Op != OpXor64 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst64 {
@@ -24015,10 +25389,12 @@ func rewriteValuegeneric_OpXor64_10(v *Value) bool {
 	// cond:
 	// result: (Xor64 (Const64 <t> [c^d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpXor64 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst64 {
 			break
@@ -24045,10 +25421,12 @@ func rewriteValuegeneric_OpXor64_10(v *Value) bool {
 	// cond:
 	// result: (Xor64 (Const64 <t> [c^d]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpXor64 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst64 {
@@ -24080,6 +25458,7 @@ func rewriteValuegeneric_OpXor8_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [int64(int8(c^d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -24098,6 +25477,7 @@ func rewriteValuegeneric_OpXor8_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [int64(int8(c^d))])
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -24116,6 +25496,7 @@ func rewriteValuegeneric_OpXor8_0(v *Value) bool {
 	// cond:
 	// result: (Const8  [0])
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		if x != v.Args[1] {
 			break
@@ -24128,6 +25509,7 @@ func rewriteValuegeneric_OpXor8_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -24145,6 +25527,7 @@ func rewriteValuegeneric_OpXor8_0(v *Value) bool {
 	// cond:
 	// result: x
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpConst8 {
@@ -24162,11 +25545,13 @@ func rewriteValuegeneric_OpXor8_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpXor8 {
 			break
 		}
+		_ = v_1.Args[1]
 		if x != v_1.Args[0] {
 			break
 		}
@@ -24180,11 +25565,13 @@ func rewriteValuegeneric_OpXor8_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpXor8 {
 			break
 		}
+		_ = v_1.Args[1]
 		y := v_1.Args[0]
 		if x != v_1.Args[1] {
 			break
@@ -24198,10 +25585,12 @@ func rewriteValuegeneric_OpXor8_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpXor8 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		y := v_0.Args[1]
 		if x != v.Args[1] {
@@ -24216,10 +25605,12 @@ func rewriteValuegeneric_OpXor8_0(v *Value) bool {
 	// cond:
 	// result: y
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpXor8 {
 			break
 		}
+		_ = v_0.Args[1]
 		y := v_0.Args[0]
 		x := v_0.Args[1]
 		if x != v.Args[1] {
@@ -24234,10 +25625,12 @@ func rewriteValuegeneric_OpXor8_0(v *Value) bool {
 	// cond: (z.Op != OpConst8  && x.Op != OpConst8)
 	// result: (Xor8  i (Xor8  <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpXor8 {
 			break
 		}
+		_ = v_0.Args[1]
 		i := v_0.Args[0]
 		if i.Op != OpConst8 {
 			break
@@ -24265,10 +25658,12 @@ func rewriteValuegeneric_OpXor8_10(v *Value) bool {
 	// cond: (z.Op != OpConst8  && x.Op != OpConst8)
 	// result: (Xor8  i (Xor8  <t> z x))
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpXor8 {
 			break
 		}
+		_ = v_0.Args[1]
 		z := v_0.Args[0]
 		i := v_0.Args[1]
 		if i.Op != OpConst8 {
@@ -24291,11 +25686,13 @@ func rewriteValuegeneric_OpXor8_10(v *Value) bool {
 	// cond: (z.Op != OpConst8  && x.Op != OpConst8)
 	// result: (Xor8  i (Xor8  <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpXor8 {
 			break
 		}
+		_ = v_1.Args[1]
 		i := v_1.Args[0]
 		if i.Op != OpConst8 {
 			break
@@ -24317,11 +25714,13 @@ func rewriteValuegeneric_OpXor8_10(v *Value) bool {
 	// cond: (z.Op != OpConst8  && x.Op != OpConst8)
 	// result: (Xor8  i (Xor8  <t> z x))
 	for {
+		_ = v.Args[1]
 		x := v.Args[0]
 		v_1 := v.Args[1]
 		if v_1.Op != OpXor8 {
 			break
 		}
+		_ = v_1.Args[1]
 		z := v_1.Args[0]
 		i := v_1.Args[1]
 		if i.Op != OpConst8 {
@@ -24343,6 +25742,7 @@ func rewriteValuegeneric_OpXor8_10(v *Value) bool {
 	// cond:
 	// result: (Xor8  (Const8  <t> [int64(int8(c^d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -24353,6 +25753,7 @@ func rewriteValuegeneric_OpXor8_10(v *Value) bool {
 		if v_1.Op != OpXor8 {
 			break
 		}
+		_ = v_1.Args[1]
 		v_1_0 := v_1.Args[0]
 		if v_1_0.Op != OpConst8 {
 			break
@@ -24373,6 +25774,7 @@ func rewriteValuegeneric_OpXor8_10(v *Value) bool {
 	// cond:
 	// result: (Xor8  (Const8  <t> [int64(int8(c^d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpConst8 {
 			break
@@ -24383,6 +25785,7 @@ func rewriteValuegeneric_OpXor8_10(v *Value) bool {
 		if v_1.Op != OpXor8 {
 			break
 		}
+		_ = v_1.Args[1]
 		x := v_1.Args[0]
 		v_1_1 := v_1.Args[1]
 		if v_1_1.Op != OpConst8 {
@@ -24403,10 +25806,12 @@ func rewriteValuegeneric_OpXor8_10(v *Value) bool {
 	// cond:
 	// result: (Xor8  (Const8  <t> [int64(int8(c^d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpXor8 {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpConst8 {
 			break
@@ -24433,10 +25838,12 @@ func rewriteValuegeneric_OpXor8_10(v *Value) bool {
 	// cond:
 	// result: (Xor8  (Const8  <t> [int64(int8(c^d))]) x)
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpXor8 {
 			break
 		}
+		_ = v_0.Args[1]
 		x := v_0.Args[0]
 		v_0_1 := v_0.Args[1]
 		if v_0_1.Op != OpConst8 {
@@ -24470,10 +25877,12 @@ func rewriteValuegeneric_OpZero_0(v *Value) bool {
 	// cond: mem.Op == OpStaticCall 	&& isSameSym(mem.Aux, "runtime.newobject") 	&& c == config.ctxt.FixedFrameSize() + config.RegSize
 	// result: mem
 	for {
+		_ = v.Args[1]
 		v_0 := v.Args[0]
 		if v_0.Op != OpLoad {
 			break
 		}
+		_ = v_0.Args[1]
 		v_0_0 := v_0.Args[0]
 		if v_0_0.Op != OpOffPtr {
 			break
@@ -24523,6 +25932,7 @@ func rewriteValuegeneric_OpZeroExt16to32_0(v *Value) bool {
 		if x.Op != OpRsh32Ux64 {
 			break
 		}
+		_ = x.Args[1]
 		x_1 := x.Args[1]
 		if x_1.Op != OpConst64 {
 			break
@@ -24564,6 +25974,7 @@ func rewriteValuegeneric_OpZeroExt16to64_0(v *Value) bool {
 		if x.Op != OpRsh64Ux64 {
 			break
 		}
+		_ = x.Args[1]
 		x_1 := x.Args[1]
 		if x_1.Op != OpConst64 {
 			break
@@ -24605,6 +26016,7 @@ func rewriteValuegeneric_OpZeroExt32to64_0(v *Value) bool {
 		if x.Op != OpRsh64Ux64 {
 			break
 		}
+		_ = x.Args[1]
 		x_1 := x.Args[1]
 		if x_1.Op != OpConst64 {
 			break
@@ -24646,6 +26058,7 @@ func rewriteValuegeneric_OpZeroExt8to16_0(v *Value) bool {
 		if x.Op != OpRsh16Ux64 {
 			break
 		}
+		_ = x.Args[1]
 		x_1 := x.Args[1]
 		if x_1.Op != OpConst64 {
 			break
@@ -24687,6 +26100,7 @@ func rewriteValuegeneric_OpZeroExt8to32_0(v *Value) bool {
 		if x.Op != OpRsh32Ux64 {
 			break
 		}
+		_ = x.Args[1]
 		x_1 := x.Args[1]
 		if x_1.Op != OpConst64 {
 			break
@@ -24728,6 +26142,7 @@ func rewriteValuegeneric_OpZeroExt8to64_0(v *Value) bool {
 		if x.Op != OpRsh64Ux64 {
 			break
 		}
+		_ = x.Args[1]
 		x_1 := x.Args[1]
 		if x_1.Op != OpConst64 {
 			break
