commit 1b74c71da5de4d066b8fa142ab158bea4cb96f60
Author: Rob Pike <r@golang.org>
Date:   Thu Jul 9 12:49:01 2015 +1000

    cmd/asm: add copyright notices to tests
    
    They were missing from the inputs.
    Unfortunately this means the .out files all have wrong line numbers,
    but they are easy to update.
    
    Change-Id: I254742f24ab803421f34d52d13b9afa93674edd6
    Reviewed-on: https://go-review.googlesource.com/11958
    Reviewed-by: Russ Cox <rsc@golang.org>
---
 src/cmd/asm/internal/asm/testdata/amd64.out | 114 +++++++-------
 src/cmd/asm/internal/asm/testdata/amd64.s   |   4 +
 src/cmd/asm/internal/asm/testdata/arm.out   | 110 +++++++-------
 src/cmd/asm/internal/asm/testdata/arm.s     |   4 +
 src/cmd/asm/internal/asm/testdata/arm64.out | 102 ++++++-------
 src/cmd/asm/internal/asm/testdata/arm64.s   |   4 +
 src/cmd/asm/internal/asm/testdata/ppc64.out | 220 ++++++++++++++--------------
 src/cmd/asm/internal/asm/testdata/ppc64.s   |   4 +
 8 files changed, 289 insertions(+), 273 deletions(-)

diff --git a/src/cmd/asm/internal/asm/testdata/amd64.out b/src/cmd/asm/internal/asm/testdata/amd64.out
index 51932faff0..850a78eb43 100644
--- a/src/cmd/asm/internal/asm/testdata/amd64.out
+++ b/src/cmd/asm/internal/asm/testdata/amd64.out
@@ -1,57 +1,57 @@
-5 00001 (testdata/amd64.s:5)	TEXT	foo(SB), 0, $0
-8 00002 (testdata/amd64.s:8)	NEGQ	R11
-9 00003 (testdata/amd64.s:9)	NEGQ	4(R11)
-10 00004 (testdata/amd64.s:10)	NEGQ	foo+4(SB)
-13 00005 (testdata/amd64.s:13)	INT	$4
-14 00006 (testdata/amd64.s:14)	DIVB	R11
-15 00007 (testdata/amd64.s:15)	DIVB	4(R11)
-16 00008 (testdata/amd64.s:16)	DIVB	foo+4(SB)
-19 00009 (testdata/amd64.s:19)	SUBQ	$4, DI
-20 00010 (testdata/amd64.s:20)	SUBQ	R11, DI
-21 00011 (testdata/amd64.s:21)	SUBQ	4(R11), DI
-22 00012 (testdata/amd64.s:22)	SUBQ	foo+4(SB), DI
-23 00013 (testdata/amd64.s:23)	SUBQ	$4, 8(R12)
-24 00014 (testdata/amd64.s:24)	SUBQ	R11, 8(R12)
-25 00015 (testdata/amd64.s:25)	SUBQ	R11, foo+4(SB)
-28 00016 (testdata/amd64.s:28)	CMPB	CX, $4
-32 00017 (testdata/amd64.s:32)	JCS	13(PC)
-33 00018 (testdata/amd64.s:33)	JCS	17
-36 00019 (testdata/amd64.s:36)	JMP	15(PC)
-37 00020 (testdata/amd64.s:37)	JMP	17
-38 00021 (testdata/amd64.s:38)	JMP	foo+4(SB)
-39 00022 (testdata/amd64.s:39)	JMP	bar<>+4(SB)
-40 00023 (testdata/amd64.s:40)	JMP	bar<>+4(SB)(R11*4)
-41 00024 (testdata/amd64.s:41)	JMP	4(SP)
-42 00025 (testdata/amd64.s:42)	JMP	(R12)
-44 00026 (testdata/amd64.s:44)	JMP	(R12)(R13*4)
-45 00027 (testdata/amd64.s:45)	JMP	(AX)
-46 00028 (testdata/amd64.s:46)	JMP	(SP)
-48 00029 (testdata/amd64.s:48)	JMP	(AX)(AX*4)
-49 00030 (testdata/amd64.s:49)	JMP	4(SP)
-50 00031 (testdata/amd64.s:50)	JMP	(R12)
-52 00032 (testdata/amd64.s:52)	JMP	(R12)(R13*4)
-53 00033 (testdata/amd64.s:53)	JMP	(AX)
-54 00034 (testdata/amd64.s:54)	JMP	(SP)
-56 00035 (testdata/amd64.s:56)	JMP	(AX)(AX*4)
-57 00036 (testdata/amd64.s:57)	JMP	R13
-60 00037 (testdata/amd64.s:60)	NOP
-61 00038 (testdata/amd64.s:61)	NOP	AX
-62 00039 (testdata/amd64.s:62)	NOP	foo+4(SB)
-65 00040 (testdata/amd64.s:65)	SHLL	R11, R12
-66 00041 (testdata/amd64.s:66)	SHLL	R11, foo+4(SB)
-67 00042 (testdata/amd64.s:67)	SHLL	R11, AX, R11
-70 00043 (testdata/amd64.s:70)	MOVL	AX, R11
-71 00044 (testdata/amd64.s:71)	MOVL	$4, R11
-72 00045 (testdata/amd64.s:72)	MOVL	AX, CS, AX
-75 00046 (testdata/amd64.s:75)	IMULB	$4
-76 00047 (testdata/amd64.s:76)	IMULB	R11
-77 00048 (testdata/amd64.s:77)	IMULB	$4, R11
-78 00049 (testdata/amd64.s:78)	IMULB	R11, R12
-79 00050 (testdata/amd64.s:79)	IMULB	R11, foo+4(SB)
-82 00051 (testdata/amd64.s:82)	CMPPD	R11, R12, 4
-83 00052 (testdata/amd64.s:83)	CMPPD	R11, foo+4(SB), 4
-86 00053 (testdata/amd64.s:86)	PINSRW	$4, R11, AX
-87 00054 (testdata/amd64.s:87)	PINSRW	$4, foo+4(SB), AX
-90 00055 (testdata/amd64.s:90)	RETFL	$4
-94 00056 (testdata/amd64.s:94)	LOOP
-97 00057 (testdata/amd64.s:97)	RET
+9 00001 (testdata/amd64.s:9)	TEXT	foo(SB), 0, $0
+12 00002 (testdata/amd64.s:12)	NEGQ	R11
+13 00003 (testdata/amd64.s:13)	NEGQ	4(R11)
+14 00004 (testdata/amd64.s:14)	NEGQ	foo+4(SB)
+17 00005 (testdata/amd64.s:17)	INT	$4
+18 00006 (testdata/amd64.s:18)	DIVB	R11
+19 00007 (testdata/amd64.s:19)	DIVB	4(R11)
+20 00008 (testdata/amd64.s:20)	DIVB	foo+4(SB)
+23 00009 (testdata/amd64.s:23)	SUBQ	$4, DI
+24 00010 (testdata/amd64.s:24)	SUBQ	R11, DI
+25 00011 (testdata/amd64.s:25)	SUBQ	4(R11), DI
+26 00012 (testdata/amd64.s:26)	SUBQ	foo+4(SB), DI
+27 00013 (testdata/amd64.s:27)	SUBQ	$4, 8(R12)
+28 00014 (testdata/amd64.s:28)	SUBQ	R11, 8(R12)
+29 00015 (testdata/amd64.s:29)	SUBQ	R11, foo+4(SB)
+32 00016 (testdata/amd64.s:32)	CMPB	CX, $4
+36 00017 (testdata/amd64.s:36)	JCS	13(PC)
+37 00018 (testdata/amd64.s:37)	JCS	17
+40 00019 (testdata/amd64.s:40)	JMP	15(PC)
+41 00020 (testdata/amd64.s:41)	JMP	17
+42 00021 (testdata/amd64.s:42)	JMP	foo+4(SB)
+43 00022 (testdata/amd64.s:43)	JMP	bar<>+4(SB)
+44 00023 (testdata/amd64.s:44)	JMP	bar<>+4(SB)(R11*4)
+45 00024 (testdata/amd64.s:45)	JMP	4(SP)
+46 00025 (testdata/amd64.s:46)	JMP	(R12)
+48 00026 (testdata/amd64.s:48)	JMP	(R12)(R13*4)
+49 00027 (testdata/amd64.s:49)	JMP	(AX)
+50 00028 (testdata/amd64.s:50)	JMP	(SP)
+52 00029 (testdata/amd64.s:52)	JMP	(AX)(AX*4)
+53 00030 (testdata/amd64.s:53)	JMP	4(SP)
+54 00031 (testdata/amd64.s:54)	JMP	(R12)
+56 00032 (testdata/amd64.s:56)	JMP	(R12)(R13*4)
+57 00033 (testdata/amd64.s:57)	JMP	(AX)
+58 00034 (testdata/amd64.s:58)	JMP	(SP)
+60 00035 (testdata/amd64.s:60)	JMP	(AX)(AX*4)
+61 00036 (testdata/amd64.s:61)	JMP	R13
+64 00037 (testdata/amd64.s:64)	NOP
+65 00038 (testdata/amd64.s:65)	NOP	AX
+66 00039 (testdata/amd64.s:66)	NOP	foo+4(SB)
+69 00040 (testdata/amd64.s:69)	SHLL	R11, R12
+70 00041 (testdata/amd64.s:70)	SHLL	R11, foo+4(SB)
+71 00042 (testdata/amd64.s:71)	SHLL	R11, AX, R11
+74 00043 (testdata/amd64.s:74)	MOVL	AX, R11
+75 00044 (testdata/amd64.s:75)	MOVL	$4, R11
+76 00045 (testdata/amd64.s:76)	MOVL	AX, CS, AX
+79 00046 (testdata/amd64.s:79)	IMULB	$4
+80 00047 (testdata/amd64.s:80)	IMULB	R11
+81 00048 (testdata/amd64.s:81)	IMULB	$4, R11
+82 00049 (testdata/amd64.s:82)	IMULB	R11, R12
+83 00050 (testdata/amd64.s:83)	IMULB	R11, foo+4(SB)
+86 00051 (testdata/amd64.s:86)	CMPPD	R11, R12, 4
+87 00052 (testdata/amd64.s:87)	CMPPD	R11, foo+4(SB), 4
+90 00053 (testdata/amd64.s:90)	PINSRW	$4, R11, AX
+91 00054 (testdata/amd64.s:91)	PINSRW	$4, foo+4(SB), AX
+94 00055 (testdata/amd64.s:94)	RETFL	$4
+98 00056 (testdata/amd64.s:98)	LOOP
+101 00057 (testdata/amd64.s:101)	RET
diff --git a/src/cmd/asm/internal/asm/testdata/amd64.s b/src/cmd/asm/internal/asm/testdata/amd64.s
index 410057612b..1b32ac4595 100644
--- a/src/cmd/asm/internal/asm/testdata/amd64.s
+++ b/src/cmd/asm/internal/asm/testdata/amd64.s
@@ -1,3 +1,7 @@
+// Copyright 2015 The Go Authors.  All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
 // This input was created by taking the instruction productions in
 // the old assembler's (6a's) grammar and hand-writing complete
 // instructions for each rule, to guarantee we cover the same space.
diff --git a/src/cmd/asm/internal/asm/testdata/arm.out b/src/cmd/asm/internal/asm/testdata/arm.out
index 0e23a0273e..c297844b37 100644
--- a/src/cmd/asm/internal/asm/testdata/arm.out
+++ b/src/cmd/asm/internal/asm/testdata/arm.out
@@ -1,55 +1,55 @@
-5 00001 (testdata/arm.s:5)	TEXT	foo(SB), 0, $0
-14 00002 (testdata/arm.s:14)	ADD	$1, R2, R3
-15 00003 (testdata/arm.s:15)	ADD	R1<<R2, R3, R4
-16 00004 (testdata/arm.s:16)	ADD	R1>>R2, R3, R4
-17 00005 (testdata/arm.s:17)	ADD	R1@>R2, R3, R4
-18 00006 (testdata/arm.s:18)	ADD	R1->R2, R3, R4
-19 00007 (testdata/arm.s:19)	ADD	R1, R2, R3
-20 00008 (testdata/arm.s:20)	ADD	R1<<R2, R3, R4
-30 00009 (testdata/arm.s:30)	ADD	$1, R2
-31 00010 (testdata/arm.s:31)	ADD	R1<<R2, R3
-32 00011 (testdata/arm.s:32)	ADD	R1>>R2, R3
-33 00012 (testdata/arm.s:33)	ADD	R1@>R2, R3
-34 00013 (testdata/arm.s:34)	ADD	R1->R2, R3
-35 00014 (testdata/arm.s:35)	ADD	R1, R2
-44 00015 (testdata/arm.s:44)	CLZ.S	R1, R2
-53 00016 (testdata/arm.s:53)	MOVW.S	R1, R2
-54 00017 (testdata/arm.s:54)	MOVW.S	$1, R2
-55 00018 (testdata/arm.s:55)	MOVW.S	R1<<R2, R3
-64 00019 (testdata/arm.s:64)	JMP.S	20(PC)
-70 00020 (testdata/arm.s:70)	JMP.S	(R2)
-71 00021 (testdata/arm.s:71)	JMP.S	foo(SB)
-72 00022 (testdata/arm.s:72)	JMP.S	bar<>(SB)
-81 00023 (testdata/arm.s:81)	BX	(R2)
-90 00024 (testdata/arm.s:90)	BEQ	25(PC)
-99 00025 (testdata/arm.s:99)	SWI.S	R1
-100 00026 (testdata/arm.s:100)	SWI.S	(R1)
-101 00027 (testdata/arm.s:101)	SWI.S	foo(SB)
-110 00028 (testdata/arm.s:110)	CMP.S	$1, R2
-111 00029 (testdata/arm.s:111)	CMP.S	R1<<R2, R3
-112 00030 (testdata/arm.s:112)	CMP.S	R1, R2
-126 00031 (testdata/arm.s:126)	MOVM	(R1), [R2,R5,R8,g]
-127 00032 (testdata/arm.s:127)	MOVM	(R1), [R2,R3,R4,R5]
-128 00033 (testdata/arm.s:128)	MOVM.S	(R1), [R2]
-139 00034 (testdata/arm.s:139)	MOVM	[R2,R5,R8,g], (R1)
-140 00035 (testdata/arm.s:140)	MOVM	[R2,R3,R4,R5], (R1)
-141 00036 (testdata/arm.s:141)	MOVM.S	[R2], (R1)
-150 00037 (testdata/arm.s:150)	STREX.S	(R2), R1, R3
-156 00038 (testdata/arm.s:156)	STREX.S	(R2), R1, R1
-162 00039 (testdata/arm.s:162)	STREX.S	(R2), R3, R3
-170 00040 (testdata/arm.s:170)	CASE.S	R1
-179 00041 (testdata/arm.s:179)	WORD	$1234
-188 00042 (testdata/arm.s:188)	ABSF.S	F1, F2
-194 00043 (testdata/arm.s:194)	ADDD.S	F1, F2
-195 00044 (testdata/arm.s:195)	ADDD.S	$(0.5), F2
-201 00045 (testdata/arm.s:201)	ADDD.S	F1, F2, F3
-202 00046 (testdata/arm.s:202)	ADDD.S	$(0.5), F2, F3
-208 00047 (testdata/arm.s:208)	CMPD.S	F1, F2
-232 00048 (testdata/arm.s:232)	MRC	$8301712627
-233 00049 (testdata/arm.s:233)	MRC	$8300664051
-242 00050 (testdata/arm.s:242)	MULL	R1, R2, (R3, R4)
-254 00051 (testdata/arm.s:254)	MULAWT	R1, R2, R3, R4
-262 00052 (testdata/arm.s:262)	PLD	(R1)
-263 00053 (testdata/arm.s:263)	PLD	4(R1)
-272 00054 (testdata/arm.s:272)	RET
-281 00055 (testdata/arm.s:281)	END
+9 00001 (testdata/arm.s:9)	TEXT	foo(SB), 0, $0
+18 00002 (testdata/arm.s:18)	ADD	$1, R2, R3
+19 00003 (testdata/arm.s:19)	ADD	R1<<R2, R3, R4
+20 00004 (testdata/arm.s:20)	ADD	R1>>R2, R3, R4
+21 00005 (testdata/arm.s:21)	ADD	R1@>R2, R3, R4
+22 00006 (testdata/arm.s:22)	ADD	R1->R2, R3, R4
+23 00007 (testdata/arm.s:23)	ADD	R1, R2, R3
+24 00008 (testdata/arm.s:24)	ADD	R1<<R2, R3, R4
+34 00009 (testdata/arm.s:34)	ADD	$1, R2
+35 00010 (testdata/arm.s:35)	ADD	R1<<R2, R3
+36 00011 (testdata/arm.s:36)	ADD	R1>>R2, R3
+37 00012 (testdata/arm.s:37)	ADD	R1@>R2, R3
+38 00013 (testdata/arm.s:38)	ADD	R1->R2, R3
+39 00014 (testdata/arm.s:39)	ADD	R1, R2
+48 00015 (testdata/arm.s:48)	CLZ.S	R1, R2
+57 00016 (testdata/arm.s:57)	MOVW.S	R1, R2
+58 00017 (testdata/arm.s:58)	MOVW.S	$1, R2
+59 00018 (testdata/arm.s:59)	MOVW.S	R1<<R2, R3
+68 00019 (testdata/arm.s:68)	JMP.S	20(PC)
+74 00020 (testdata/arm.s:74)	JMP.S	(R2)
+75 00021 (testdata/arm.s:75)	JMP.S	foo(SB)
+76 00022 (testdata/arm.s:76)	JMP.S	bar<>(SB)
+85 00023 (testdata/arm.s:85)	BX	(R2)
+94 00024 (testdata/arm.s:94)	BEQ	25(PC)
+103 00025 (testdata/arm.s:103)	SWI.S	R1
+104 00026 (testdata/arm.s:104)	SWI.S	(R1)
+105 00027 (testdata/arm.s:105)	SWI.S	foo(SB)
+114 00028 (testdata/arm.s:114)	CMP.S	$1, R2
+115 00029 (testdata/arm.s:115)	CMP.S	R1<<R2, R3
+116 00030 (testdata/arm.s:116)	CMP.S	R1, R2
+130 00031 (testdata/arm.s:130)	MOVM	(R1), [R2,R5,R8,g]
+131 00032 (testdata/arm.s:131)	MOVM	(R1), [R2,R3,R4,R5]
+132 00033 (testdata/arm.s:132)	MOVM.S	(R1), [R2]
+143 00034 (testdata/arm.s:143)	MOVM	[R2,R5,R8,g], (R1)
+144 00035 (testdata/arm.s:144)	MOVM	[R2,R3,R4,R5], (R1)
+145 00036 (testdata/arm.s:145)	MOVM.S	[R2], (R1)
+154 00037 (testdata/arm.s:154)	STREX.S	(R2), R1, R3
+160 00038 (testdata/arm.s:160)	STREX.S	(R2), R1, R1
+166 00039 (testdata/arm.s:166)	STREX.S	(R2), R3, R3
+174 00040 (testdata/arm.s:174)	CASE.S	R1
+183 00041 (testdata/arm.s:183)	WORD	$1234
+192 00042 (testdata/arm.s:192)	ABSF.S	F1, F2
+198 00043 (testdata/arm.s:198)	ADDD.S	F1, F2
+199 00044 (testdata/arm.s:199)	ADDD.S	$(0.5), F2
+205 00045 (testdata/arm.s:205)	ADDD.S	F1, F2, F3
+206 00046 (testdata/arm.s:206)	ADDD.S	$(0.5), F2, F3
+212 00047 (testdata/arm.s:212)	CMPD.S	F1, F2
+236 00048 (testdata/arm.s:236)	MRC	$8301712627
+237 00049 (testdata/arm.s:237)	MRC	$8300664051
+246 00050 (testdata/arm.s:246)	MULL	R1, R2, (R3, R4)
+258 00051 (testdata/arm.s:258)	MULAWT	R1, R2, R3, R4
+266 00052 (testdata/arm.s:266)	PLD	(R1)
+267 00053 (testdata/arm.s:267)	PLD	4(R1)
+276 00054 (testdata/arm.s:276)	RET
+285 00055 (testdata/arm.s:285)	END
diff --git a/src/cmd/asm/internal/asm/testdata/arm.s b/src/cmd/asm/internal/asm/testdata/arm.s
index 356391944e..128f830b7e 100644
--- a/src/cmd/asm/internal/asm/testdata/arm.s
+++ b/src/cmd/asm/internal/asm/testdata/arm.s
@@ -1,3 +1,7 @@
+// Copyright 2015 The Go Authors.  All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
 // This input was created by taking the instruction productions in
 // the old assembler's (5a's) grammar and hand-writing complete
 // instructions for each rule, to guarantee we cover the same space.
diff --git a/src/cmd/asm/internal/asm/testdata/arm64.out b/src/cmd/asm/internal/asm/testdata/arm64.out
index ceead884af..f8cc74ea1d 100644
--- a/src/cmd/asm/internal/asm/testdata/arm64.out
+++ b/src/cmd/asm/internal/asm/testdata/arm64.out
@@ -1,51 +1,51 @@
-5 00001 (testdata/arm64.s:5)	TEXT	foo(SB), 7, $-8
-16 00002 (testdata/arm64.s:16)	ADDW	$1, R2, R3
-17 00003 (testdata/arm64.s:17)	ADDW	R1, R2, R3
-18 00004 (testdata/arm64.s:18)	ADDW	R1, ZR, R3
-19 00005 (testdata/arm64.s:19)	ADD	$1, R2, R3
-20 00006 (testdata/arm64.s:20)	ADD	R1, R2, R3
-21 00007 (testdata/arm64.s:21)	ADD	R1, ZR, R3
-22 00008 (testdata/arm64.s:22)	ADD	$1, R2, R3
-32 00009 (testdata/arm64.s:32)	ADDW	$1, R2
-33 00010 (testdata/arm64.s:33)	ADDW	R1, R2
-34 00011 (testdata/arm64.s:34)	ADD	$1, R2
-35 00012 (testdata/arm64.s:35)	ADD	R1, R2
-44 00013 (testdata/arm64.s:44)	CLSW	R1, R2
-45 00014 (testdata/arm64.s:45)	CLS	R1, R2
-54 00015 (testdata/arm64.s:54)	MOVW	R1, R2
-55 00016 (testdata/arm64.s:55)	MOVW	ZR, R1
-56 00017 (testdata/arm64.s:56)	MOVW	R1, ZR
-57 00018 (testdata/arm64.s:57)	MOVW	$1, ZR
-58 00019 (testdata/arm64.s:58)	MOVW	$1, R1
-59 00020 (testdata/arm64.s:59)	MOVW	ZR, (R1)
-60 00021 (testdata/arm64.s:60)	MOVD	R1, R2
-61 00022 (testdata/arm64.s:61)	MOVD	ZR, R1
-62 00023 (testdata/arm64.s:62)	MOVD	$1, ZR
-63 00024 (testdata/arm64.s:63)	MOVD	$1, R1
-64 00025 (testdata/arm64.s:64)	MOVD	ZR, (R1)
-73 00026 (testdata/arm64.s:73)	MOVK	$1, R1
-82 00027 (testdata/arm64.s:82)	CALL	28(PC)
-88 00028 (testdata/arm64.s:88)	CALL	(R2)
-89 00029 (testdata/arm64.s:89)	CALL	foo(SB)
-90 00030 (testdata/arm64.s:90)	CALL	bar<>(SB)
-98 00031 (testdata/arm64.s:98)	BEQ	32(PC)
-106 00032 (testdata/arm64.s:106)	SVC
-115 00033 (testdata/arm64.s:115)	CMP	$3, R2
-116 00034 (testdata/arm64.s:116)	CMP	R1, R2
-126 00035 (testdata/arm64.s:126)	CBZ	R1
-135 00036 (testdata/arm64.s:135)	CSET	GT, R1
-143 00037 (testdata/arm64.s:143)	CSEL	LT, R1, R2, ZR
-144 00038 (testdata/arm64.s:144)	CSINC	GT, R1, ZR, R3
-145 00039 (testdata/arm64.s:145)	CSNEG	MI, R1, R2, R3
-146 00040 (testdata/arm64.s:146)	CSINV	0, R1, R2, R3
-152 00041 (testdata/arm64.s:152)	CSEL	LT, R1, R2
-160 00042 (testdata/arm64.s:160)	CCMN	MI, ZR, R1, $4
-169 00043 (testdata/arm64.s:169)	FADDD	$(0.5), F1
-170 00044 (testdata/arm64.s:170)	FADDD	F1, F2
-176 00045 (testdata/arm64.s:176)	FADDD	$(0.69999999999999996), F1, F2
-177 00046 (testdata/arm64.s:177)	FADDD	F1, F2, F3
-229 00047 (testdata/arm64.s:229)	DMB	$1
-238 00048 (testdata/arm64.s:238)	LDAXRW	(R0), R2
-239 00049 (testdata/arm64.s:239)	STLXRW	R1, (R0), R3
-247 00050 (testdata/arm64.s:247)	RET
-255 00051 (testdata/arm64.s:255)	END
+9 00001 (testdata/arm64.s:9)	TEXT	foo(SB), 7, $-8
+20 00002 (testdata/arm64.s:20)	ADDW	$1, R2, R3
+21 00003 (testdata/arm64.s:21)	ADDW	R1, R2, R3
+22 00004 (testdata/arm64.s:22)	ADDW	R1, ZR, R3
+23 00005 (testdata/arm64.s:23)	ADD	$1, R2, R3
+24 00006 (testdata/arm64.s:24)	ADD	R1, R2, R3
+25 00007 (testdata/arm64.s:25)	ADD	R1, ZR, R3
+26 00008 (testdata/arm64.s:26)	ADD	$1, R2, R3
+36 00009 (testdata/arm64.s:36)	ADDW	$1, R2
+37 00010 (testdata/arm64.s:37)	ADDW	R1, R2
+38 00011 (testdata/arm64.s:38)	ADD	$1, R2
+39 00012 (testdata/arm64.s:39)	ADD	R1, R2
+48 00013 (testdata/arm64.s:48)	CLSW	R1, R2
+49 00014 (testdata/arm64.s:49)	CLS	R1, R2
+58 00015 (testdata/arm64.s:58)	MOVW	R1, R2
+59 00016 (testdata/arm64.s:59)	MOVW	ZR, R1
+60 00017 (testdata/arm64.s:60)	MOVW	R1, ZR
+61 00018 (testdata/arm64.s:61)	MOVW	$1, ZR
+62 00019 (testdata/arm64.s:62)	MOVW	$1, R1
+63 00020 (testdata/arm64.s:63)	MOVW	ZR, (R1)
+64 00021 (testdata/arm64.s:64)	MOVD	R1, R2
+65 00022 (testdata/arm64.s:65)	MOVD	ZR, R1
+66 00023 (testdata/arm64.s:66)	MOVD	$1, ZR
+67 00024 (testdata/arm64.s:67)	MOVD	$1, R1
+68 00025 (testdata/arm64.s:68)	MOVD	ZR, (R1)
+77 00026 (testdata/arm64.s:77)	MOVK	$1, R1
+86 00027 (testdata/arm64.s:86)	CALL	28(PC)
+92 00028 (testdata/arm64.s:92)	CALL	(R2)
+93 00029 (testdata/arm64.s:93)	CALL	foo(SB)
+94 00030 (testdata/arm64.s:94)	CALL	bar<>(SB)
+102 00031 (testdata/arm64.s:102)	BEQ	32(PC)
+110 00032 (testdata/arm64.s:110)	SVC
+119 00033 (testdata/arm64.s:119)	CMP	$3, R2
+120 00034 (testdata/arm64.s:120)	CMP	R1, R2
+130 00035 (testdata/arm64.s:130)	CBZ	R1
+139 00036 (testdata/arm64.s:139)	CSET	GT, R1
+147 00037 (testdata/arm64.s:147)	CSEL	LT, R1, R2, ZR
+148 00038 (testdata/arm64.s:148)	CSINC	GT, R1, ZR, R3
+149 00039 (testdata/arm64.s:149)	CSNEG	MI, R1, R2, R3
+150 00040 (testdata/arm64.s:150)	CSINV	0, R1, R2, R3
+156 00041 (testdata/arm64.s:156)	CSEL	LT, R1, R2
+164 00042 (testdata/arm64.s:164)	CCMN	MI, ZR, R1, $4
+173 00043 (testdata/arm64.s:173)	FADDD	$(0.5), F1
+174 00044 (testdata/arm64.s:174)	FADDD	F1, F2
+180 00045 (testdata/arm64.s:180)	FADDD	$(0.69999999999999996), F1, F2
+181 00046 (testdata/arm64.s:181)	FADDD	F1, F2, F3
+233 00047 (testdata/arm64.s:233)	DMB	$1
+242 00048 (testdata/arm64.s:242)	LDAXRW	(R0), R2
+243 00049 (testdata/arm64.s:243)	STLXRW	R1, (R0), R3
+251 00050 (testdata/arm64.s:251)	RET
+259 00051 (testdata/arm64.s:259)	END
diff --git a/src/cmd/asm/internal/asm/testdata/arm64.s b/src/cmd/asm/internal/asm/testdata/arm64.s
index 1e344b5db0..699191be7a 100644
--- a/src/cmd/asm/internal/asm/testdata/arm64.s
+++ b/src/cmd/asm/internal/asm/testdata/arm64.s
@@ -1,3 +1,7 @@
+// Copyright 2015 The Go Authors.  All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
 // This input was created by taking the instruction productions in
 // the old assembler's (7a's) grammar and hand-writing complete
 // instructions for each rule, to guarantee we cover the same space.
diff --git a/src/cmd/asm/internal/asm/testdata/ppc64.out b/src/cmd/asm/internal/asm/testdata/ppc64.out
index 79a995dfa8..b9596339d8 100644
--- a/src/cmd/asm/internal/asm/testdata/ppc64.out
+++ b/src/cmd/asm/internal/asm/testdata/ppc64.out
@@ -1,110 +1,110 @@
-5 00001 (testdata/ppc64.s:5)	TEXT	foo(SB), 0, $0
-15 00002 (testdata/ppc64.s:15)	MOVW	R1, R2
-21 00003 (testdata/ppc64.s:21)	MOVW	foo<>+3(SB), R2
-22 00004 (testdata/ppc64.s:22)	MOVW	16(R1), R2
-28 00005 (testdata/ppc64.s:28)	MOVW	(R1), R2
-29 00006 (testdata/ppc64.s:29)	MOVW	(R1)(R2*1), R3
-35 00007 (testdata/ppc64.s:35)	MOVW	R1, R2
-41 00008 (testdata/ppc64.s:41)	MOVB	foo<>+3(SB), R2
-42 00009 (testdata/ppc64.s:42)	MOVB	16(R1), R2
-48 00010 (testdata/ppc64.s:48)	MOVB	(R1), R2
-49 00011 (testdata/ppc64.s:49)	MOVB	(R1)(R2*1), R3
-58 00012 (testdata/ppc64.s:58)	FMOVD	foo<>+3(SB), F2
-59 00013 (testdata/ppc64.s:59)	FMOVD	16(R1), F2
-65 00014 (testdata/ppc64.s:65)	FMOVD	(R1), F2
-71 00015 (testdata/ppc64.s:71)	FMOVD	$(0.10000000000000001), F2
-77 00016 (testdata/ppc64.s:77)	FMOVD	F1, F2
-83 00017 (testdata/ppc64.s:83)	FMOVD	F2, foo<>+3(SB)
-84 00018 (testdata/ppc64.s:84)	FMOVD	F2, 16(R1)
-90 00019 (testdata/ppc64.s:90)	FMOVD	F2, (R1)
-99 00020 (testdata/ppc64.s:99)	MOVW	R1, foo<>+3(SB)
-100 00021 (testdata/ppc64.s:100)	MOVW	R1, 16(R2)
-106 00022 (testdata/ppc64.s:106)	MOVW	R1, (R1)
-107 00023 (testdata/ppc64.s:107)	MOVW	R1, (R2)(R3*1)
-113 00024 (testdata/ppc64.s:113)	MOVB	R1, foo<>+3(SB)
-114 00025 (testdata/ppc64.s:114)	MOVB	R1, 16(R2)
-120 00026 (testdata/ppc64.s:120)	MOVB	R1, (R1)
-121 00027 (testdata/ppc64.s:121)	MOVB	R1, (R2)(R3*1)
-129 00028 (testdata/ppc64.s:129)	FMOVD	F1, foo<>+3(SB)
-130 00029 (testdata/ppc64.s:130)	FMOVD	F1, 16(R2)
-136 00030 (testdata/ppc64.s:136)	FMOVD	F1, (R1)
-145 00031 (testdata/ppc64.s:145)	MOVFL	FPSCR, F1
-151 00032 (testdata/ppc64.s:151)	MOVFL	F1, FPSCR
-157 00033 (testdata/ppc64.s:157)	MOVFL	F1, $4, FPSCR
-163 00034 (testdata/ppc64.s:163)	MOVFL	FPSCR, CR0
-184 00035 (testdata/ppc64.s:184)	MOVW	R1, CR1
-190 00036 (testdata/ppc64.s:190)	MOVW	R1, CR
-202 00037 (testdata/ppc64.s:202)	ADD	R1, R2, R3
-208 00038 (testdata/ppc64.s:208)	ADD	$1, R2, R3
-220 00039 (testdata/ppc64.s:220)	ADD	R1, R2
-226 00040 (testdata/ppc64.s:226)	ADD	$4, R1
-232 00041 (testdata/ppc64.s:232)	ADDE	R1, R2, R3
-238 00042 (testdata/ppc64.s:238)	ADDE	R1, R2
-244 00043 (testdata/ppc64.s:244)	SLW	R1, R2, R3
-250 00044 (testdata/ppc64.s:250)	SLW	R1, R2
-256 00045 (testdata/ppc64.s:256)	SLW	$4, R1, R2
-262 00046 (testdata/ppc64.s:262)	SLW	$4, R1
-268 00047 (testdata/ppc64.s:268)	SLW	$4, R1
-274 00048 (testdata/ppc64.s:274)	SUBME	R1, R1
-292 00049 (testdata/ppc64.s:292)	MOVW	$1, R1
-298 00050 (testdata/ppc64.s:298)	MOVW	$1, R1
-299 00051 (testdata/ppc64.s:299)	MOVW	$foo(SB), R1
-323 00052 (testdata/ppc64.s:323)	MOVFL	CR0, CR1
-335 00053 (testdata/ppc64.s:335)	MOVW	CR, R1
-341 00054 (testdata/ppc64.s:341)	MOVW	SPR(0), R1
-342 00055 (testdata/ppc64.s:342)	MOVW	SPR(7), R1
-348 00056 (testdata/ppc64.s:348)	MOVW	LR, R1
-349 00057 (testdata/ppc64.s:349)	MOVW	CTR, R1
-355 00058 (testdata/ppc64.s:355)	MOVW	R1, LR
-356 00059 (testdata/ppc64.s:356)	MOVW	R1, CTR
-368 00060 (testdata/ppc64.s:368)	MOVW	R1, SPR(7)
-380 00061 (testdata/ppc64.s:380)	JMP	62(PC)
-381 00062 (testdata/ppc64.s:381)	JMP	61
-387 00063 (testdata/ppc64.s:387)	JMP	4(R1)
-388 00064 (testdata/ppc64.s:388)	JMP	foo(SB)
-394 00065 (testdata/ppc64.s:394)	JMP	CTR
-413 00066 (testdata/ppc64.s:413)	BEQ	CR1, 67(PC)
-414 00067 (testdata/ppc64.s:414)	BEQ	CR1, 66
-440 00068 (testdata/ppc64.s:440)	BC	4, CTR
-450 00069 (testdata/ppc64.s:450)	BC	$3, R4, 66
-470 00070 (testdata/ppc64.s:470)	BC	$3, R3, LR
-500 00071 (testdata/ppc64.s:500)	FABS	F1, F2
-506 00072 (testdata/ppc64.s:506)	FADD	F1, F2
-512 00073 (testdata/ppc64.s:512)	FADD	F1, F2, F3
-518 00074 (testdata/ppc64.s:518)	FMADD	F1, F2, F3, F4
-524 00075 (testdata/ppc64.s:524)	FCMPU	F1, F2
-530 00076 (testdata/ppc64.s:530)	FCMPU	F1, F2, CR0
-539 00077 (testdata/ppc64.s:539)	CMP	R1, R2
-545 00078 (testdata/ppc64.s:545)	CMP	R1, $4
-551 00079 (testdata/ppc64.s:551)	CMP	R1, CR0, R2
-557 00080 (testdata/ppc64.s:557)	CMP	R1, CR0, $4
-566 00081 (testdata/ppc64.s:566)	RLDC	$4, R1, $5, R2
-572 00082 (testdata/ppc64.s:572)	RLDC	$26, R1, $201326592, R2
-578 00083 (testdata/ppc64.s:578)	RLDC	R1, R2, $4, R3
-584 00084 (testdata/ppc64.s:584)	RLWMI	R1, R2, $201326592, R3
-593 00085 (testdata/ppc64.s:593)	MOVMW	foo(SB), R2
-594 00086 (testdata/ppc64.s:594)	MOVMW	4(R1), R2
-600 00087 (testdata/ppc64.s:600)	MOVMW	R1, foo(SB)
-601 00088 (testdata/ppc64.s:601)	MOVMW	R1, 4(R2)
-611 00089 (testdata/ppc64.s:611)	LSW	(R1), R2
-612 00090 (testdata/ppc64.s:612)	LSW	(R1)(R2*1), R3
-618 00091 (testdata/ppc64.s:618)	LSW	(R1), $1, R2
-619 00092 (testdata/ppc64.s:619)	LSW	(R1)(R2*1), $1, R3
-625 00093 (testdata/ppc64.s:625)	STSW	R1, (R2)
-626 00094 (testdata/ppc64.s:626)	STSW	R1, (R2)(R3*1)
-632 00095 (testdata/ppc64.s:632)	STSW	R1, $1, (R2)
-633 00096 (testdata/ppc64.s:633)	STSW	R1, $1, (R2)(R3*1)
-639 00097 (testdata/ppc64.s:639)	MOVHBR	(R1), R2
-640 00098 (testdata/ppc64.s:640)	MOVHBR	(R1)(R2*1), R3
-646 00099 (testdata/ppc64.s:646)	MOVHBR	R1, (R2)
-647 00100 (testdata/ppc64.s:647)	MOVHBR	R1, (R2)(R3*1)
-653 00101 (testdata/ppc64.s:653)	DCBF	(R1)
-654 00102 (testdata/ppc64.s:654)	DCBF	(R1)(R2*1)
-663 00103 (testdata/ppc64.s:663)	NOP
-669 00104 (testdata/ppc64.s:669)	NOP	R2
-675 00105 (testdata/ppc64.s:675)	NOP	F2
-681 00106 (testdata/ppc64.s:681)	NOP	R2
-687 00107 (testdata/ppc64.s:687)	NOP	F2
-693 00108 (testdata/ppc64.s:693)	NOP	$4
-701 00109 (testdata/ppc64.s:701)	RET
-709 00110 (testdata/ppc64.s:709)	END
+9 00001 (testdata/ppc64.s:9)	TEXT	foo(SB), 0, $0
+19 00002 (testdata/ppc64.s:19)	MOVW	R1, R2
+25 00003 (testdata/ppc64.s:25)	MOVW	foo<>+3(SB), R2
+26 00004 (testdata/ppc64.s:26)	MOVW	16(R1), R2
+32 00005 (testdata/ppc64.s:32)	MOVW	(R1), R2
+33 00006 (testdata/ppc64.s:33)	MOVW	(R1)(R2*1), R3
+39 00007 (testdata/ppc64.s:39)	MOVW	R1, R2
+45 00008 (testdata/ppc64.s:45)	MOVB	foo<>+3(SB), R2
+46 00009 (testdata/ppc64.s:46)	MOVB	16(R1), R2
+52 00010 (testdata/ppc64.s:52)	MOVB	(R1), R2
+53 00011 (testdata/ppc64.s:53)	MOVB	(R1)(R2*1), R3
+62 00012 (testdata/ppc64.s:62)	FMOVD	foo<>+3(SB), F2
+63 00013 (testdata/ppc64.s:63)	FMOVD	16(R1), F2
+69 00014 (testdata/ppc64.s:69)	FMOVD	(R1), F2
+75 00015 (testdata/ppc64.s:75)	FMOVD	$(0.10000000000000001), F2
+81 00016 (testdata/ppc64.s:81)	FMOVD	F1, F2
+87 00017 (testdata/ppc64.s:87)	FMOVD	F2, foo<>+3(SB)
+88 00018 (testdata/ppc64.s:88)	FMOVD	F2, 16(R1)
+94 00019 (testdata/ppc64.s:94)	FMOVD	F2, (R1)
+103 00020 (testdata/ppc64.s:103)	MOVW	R1, foo<>+3(SB)
+104 00021 (testdata/ppc64.s:104)	MOVW	R1, 16(R2)
+110 00022 (testdata/ppc64.s:110)	MOVW	R1, (R1)
+111 00023 (testdata/ppc64.s:111)	MOVW	R1, (R2)(R3*1)
+117 00024 (testdata/ppc64.s:117)	MOVB	R1, foo<>+3(SB)
+118 00025 (testdata/ppc64.s:118)	MOVB	R1, 16(R2)
+124 00026 (testdata/ppc64.s:124)	MOVB	R1, (R1)
+125 00027 (testdata/ppc64.s:125)	MOVB	R1, (R2)(R3*1)
+133 00028 (testdata/ppc64.s:133)	FMOVD	F1, foo<>+3(SB)
+134 00029 (testdata/ppc64.s:134)	FMOVD	F1, 16(R2)
+140 00030 (testdata/ppc64.s:140)	FMOVD	F1, (R1)
+149 00031 (testdata/ppc64.s:149)	MOVFL	FPSCR, F1
+155 00032 (testdata/ppc64.s:155)	MOVFL	F1, FPSCR
+161 00033 (testdata/ppc64.s:161)	MOVFL	F1, $4, FPSCR
+167 00034 (testdata/ppc64.s:167)	MOVFL	FPSCR, CR0
+188 00035 (testdata/ppc64.s:188)	MOVW	R1, CR1
+194 00036 (testdata/ppc64.s:194)	MOVW	R1, CR
+206 00037 (testdata/ppc64.s:206)	ADD	R1, R2, R3
+212 00038 (testdata/ppc64.s:212)	ADD	$1, R2, R3
+224 00039 (testdata/ppc64.s:224)	ADD	R1, R2
+230 00040 (testdata/ppc64.s:230)	ADD	$4, R1
+236 00041 (testdata/ppc64.s:236)	ADDE	R1, R2, R3
+242 00042 (testdata/ppc64.s:242)	ADDE	R1, R2
+248 00043 (testdata/ppc64.s:248)	SLW	R1, R2, R3
+254 00044 (testdata/ppc64.s:254)	SLW	R1, R2
+260 00045 (testdata/ppc64.s:260)	SLW	$4, R1, R2
+266 00046 (testdata/ppc64.s:266)	SLW	$4, R1
+272 00047 (testdata/ppc64.s:272)	SLW	$4, R1
+278 00048 (testdata/ppc64.s:278)	SUBME	R1, R1
+296 00049 (testdata/ppc64.s:296)	MOVW	$1, R1
+302 00050 (testdata/ppc64.s:302)	MOVW	$1, R1
+303 00051 (testdata/ppc64.s:303)	MOVW	$foo(SB), R1
+327 00052 (testdata/ppc64.s:327)	MOVFL	CR0, CR1
+339 00053 (testdata/ppc64.s:339)	MOVW	CR, R1
+345 00054 (testdata/ppc64.s:345)	MOVW	SPR(0), R1
+346 00055 (testdata/ppc64.s:346)	MOVW	SPR(7), R1
+352 00056 (testdata/ppc64.s:352)	MOVW	LR, R1
+353 00057 (testdata/ppc64.s:353)	MOVW	CTR, R1
+359 00058 (testdata/ppc64.s:359)	MOVW	R1, LR
+360 00059 (testdata/ppc64.s:360)	MOVW	R1, CTR
+372 00060 (testdata/ppc64.s:372)	MOVW	R1, SPR(7)
+384 00061 (testdata/ppc64.s:384)	JMP	62(PC)
+385 00062 (testdata/ppc64.s:385)	JMP	61
+391 00063 (testdata/ppc64.s:391)	JMP	4(R1)
+392 00064 (testdata/ppc64.s:392)	JMP	foo(SB)
+398 00065 (testdata/ppc64.s:398)	JMP	CTR
+417 00066 (testdata/ppc64.s:417)	BEQ	CR1, 67(PC)
+418 00067 (testdata/ppc64.s:418)	BEQ	CR1, 66
+444 00068 (testdata/ppc64.s:444)	BC	4, CTR
+454 00069 (testdata/ppc64.s:454)	BC	$3, R4, 66
+474 00070 (testdata/ppc64.s:474)	BC	$3, R3, LR
+504 00071 (testdata/ppc64.s:504)	FABS	F1, F2
+510 00072 (testdata/ppc64.s:510)	FADD	F1, F2
+516 00073 (testdata/ppc64.s:516)	FADD	F1, F2, F3
+522 00074 (testdata/ppc64.s:522)	FMADD	F1, F2, F3, F4
+528 00075 (testdata/ppc64.s:528)	FCMPU	F1, F2
+534 00076 (testdata/ppc64.s:534)	FCMPU	F1, F2, CR0
+543 00077 (testdata/ppc64.s:543)	CMP	R1, R2
+549 00078 (testdata/ppc64.s:549)	CMP	R1, $4
+555 00079 (testdata/ppc64.s:555)	CMP	R1, CR0, R2
+561 00080 (testdata/ppc64.s:561)	CMP	R1, CR0, $4
+570 00081 (testdata/ppc64.s:570)	RLDC	$4, R1, $5, R2
+576 00082 (testdata/ppc64.s:576)	RLDC	$26, R1, $201326592, R2
+582 00083 (testdata/ppc64.s:582)	RLDC	R1, R2, $4, R3
+588 00084 (testdata/ppc64.s:588)	RLWMI	R1, R2, $201326592, R3
+597 00085 (testdata/ppc64.s:597)	MOVMW	foo(SB), R2
+598 00086 (testdata/ppc64.s:598)	MOVMW	4(R1), R2
+604 00087 (testdata/ppc64.s:604)	MOVMW	R1, foo(SB)
+605 00088 (testdata/ppc64.s:605)	MOVMW	R1, 4(R2)
+615 00089 (testdata/ppc64.s:615)	LSW	(R1), R2
+616 00090 (testdata/ppc64.s:616)	LSW	(R1)(R2*1), R3
+622 00091 (testdata/ppc64.s:622)	LSW	(R1), $1, R2
+623 00092 (testdata/ppc64.s:623)	LSW	(R1)(R2*1), $1, R3
+629 00093 (testdata/ppc64.s:629)	STSW	R1, (R2)
+630 00094 (testdata/ppc64.s:630)	STSW	R1, (R2)(R3*1)
+636 00095 (testdata/ppc64.s:636)	STSW	R1, $1, (R2)
+637 00096 (testdata/ppc64.s:637)	STSW	R1, $1, (R2)(R3*1)
+643 00097 (testdata/ppc64.s:643)	MOVHBR	(R1), R2
+644 00098 (testdata/ppc64.s:644)	MOVHBR	(R1)(R2*1), R3
+650 00099 (testdata/ppc64.s:650)	MOVHBR	R1, (R2)
+651 00100 (testdata/ppc64.s:651)	MOVHBR	R1, (R2)(R3*1)
+657 00101 (testdata/ppc64.s:657)	DCBF	(R1)
+658 00102 (testdata/ppc64.s:658)	DCBF	(R1)(R2*1)
+667 00103 (testdata/ppc64.s:667)	NOP
+673 00104 (testdata/ppc64.s:673)	NOP	R2
+679 00105 (testdata/ppc64.s:679)	NOP	F2
+685 00106 (testdata/ppc64.s:685)	NOP	R2
+691 00107 (testdata/ppc64.s:691)	NOP	F2
+697 00108 (testdata/ppc64.s:697)	NOP	$4
+705 00109 (testdata/ppc64.s:705)	RET
+713 00110 (testdata/ppc64.s:713)	END
diff --git a/src/cmd/asm/internal/asm/testdata/ppc64.s b/src/cmd/asm/internal/asm/testdata/ppc64.s
index 42b8f77cbc..136ced40e1 100644
--- a/src/cmd/asm/internal/asm/testdata/ppc64.s
+++ b/src/cmd/asm/internal/asm/testdata/ppc64.s
@@ -1,3 +1,7 @@
+// Copyright 2015 The Go Authors.  All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
 // This input was created by taking the instruction productions in
 // the old assembler's (9a's) grammar and hand-writing complete
 // instructions for each rule, to guarantee we cover the same space.
