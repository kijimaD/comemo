commit 346efc28508dc358cba7e246adeb40bde99cfb2a
Author: Rob Findley <rfindley@google.com>
Date:   Sun Jul 12 16:57:01 2020 -0400

    go/types: better error when converting untyped values in assignments
    
    The error returned by convertUntyped is 'cannot convert _ to _', which
    can be misleading in contexts where an explicit conversion would be
    allowed.
    
    Arguably the error message from convertUntyped should just be 'cannot
    use _ as _', as 'convert' has an explicit meaning within the spec.
    Making that change caused a large number of test failures, so for now we
    just fix this for assignments by interpreting the error.
    
    For #22070
    
    Change-Id: I4eed6f39d1a991e8df7e035ec301d28a05150eb5
    Reviewed-on: https://go-review.googlesource.com/c/go/+/242083
    Run-TryBot: Robert Findley <rfindley@google.com>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Robert Griesemer <gri@golang.org>
---
 src/go/types/assignments.go | 13 +++++++++++--
 1 file changed, 11 insertions(+), 2 deletions(-)

diff --git a/src/go/types/assignments.go b/src/go/types/assignments.go
index 34a9d7843d..9697e504cd 100644
--- a/src/go/types/assignments.go
+++ b/src/go/types/assignments.go
@@ -7,6 +7,7 @@
 package types
 
 import (
+	"errors"
 	"go/ast"
 	"go/token"
 )
@@ -43,8 +44,16 @@ func (check *Checker) assignment(x *operand, T Type, context string) {
 			}
 			target = Default(x.typ)
 		}
-		check.convertUntyped(x, target)
-		if x.mode == invalid {
+		if err := check.canConvertUntyped(x, target); err != nil {
+			var internalErr Error
+			var msg string
+			if errors.As(err, &internalErr) {
+				msg = internalErr.Msg
+			} else {
+				msg = err.Error()
+			}
+			check.errorf(x.pos(), "cannot use %s as %s value in %s: %v", x, target, context, msg)
+			x.mode = invalid
 			return
 		}
 	}
