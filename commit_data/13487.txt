commit d380a9775093cb99e9fb8103955f39b8a15bf60a
Author: Mikio Hara <mikioh.mikioh@gmail.com>
Date:   Sun Jul 22 01:48:15 2012 +0900

    net: fix file descriptor leak on FileListener, FileConn and FilePacketConn
    
    R=golang-dev, dave, r
    CC=golang-dev
    https://golang.org/cl/6430062
---
 src/pkg/net/file.go | 18 ++++++++++--------
 1 file changed, 10 insertions(+), 8 deletions(-)

diff --git a/src/pkg/net/file.go b/src/pkg/net/file.go
index fc6c6fad8e..1abf24f2d6 100644
--- a/src/pkg/net/file.go
+++ b/src/pkg/net/file.go
@@ -17,8 +17,9 @@ func newFileFD(f *os.File) (*netFD, error) {
 		return nil, os.NewSyscallError("dup", err)
 	}
 
-	proto, err := syscall.GetsockoptInt(fd, syscall.SOL_SOCKET, syscall.SO_TYPE)
+	sotype, err := syscall.GetsockoptInt(fd, syscall.SOL_SOCKET, syscall.SO_TYPE)
 	if err != nil {
+		closesocket(fd)
 		return nil, os.NewSyscallError("getsockopt", err)
 	}
 
@@ -31,24 +32,24 @@ func newFileFD(f *os.File) (*netFD, error) {
 		return nil, syscall.EINVAL
 	case *syscall.SockaddrInet4:
 		family = syscall.AF_INET
-		if proto == syscall.SOCK_DGRAM {
+		if sotype == syscall.SOCK_DGRAM {
 			toAddr = sockaddrToUDP
-		} else if proto == syscall.SOCK_RAW {
+		} else if sotype == syscall.SOCK_RAW {
 			toAddr = sockaddrToIP
 		}
 	case *syscall.SockaddrInet6:
 		family = syscall.AF_INET6
-		if proto == syscall.SOCK_DGRAM {
+		if sotype == syscall.SOCK_DGRAM {
 			toAddr = sockaddrToUDP
-		} else if proto == syscall.SOCK_RAW {
+		} else if sotype == syscall.SOCK_RAW {
 			toAddr = sockaddrToIP
 		}
 	case *syscall.SockaddrUnix:
 		family = syscall.AF_UNIX
 		toAddr = sockaddrToUnix
-		if proto == syscall.SOCK_DGRAM {
+		if sotype == syscall.SOCK_DGRAM {
 			toAddr = sockaddrToUnixgram
-		} else if proto == syscall.SOCK_SEQPACKET {
+		} else if sotype == syscall.SOCK_SEQPACKET {
 			toAddr = sockaddrToUnixpacket
 		}
 	}
@@ -56,8 +57,9 @@ func newFileFD(f *os.File) (*netFD, error) {
 	sa, _ = syscall.Getpeername(fd)
 	raddr := toAddr(sa)
 
-	netfd, err := newFD(fd, family, proto, laddr.Network())
+	netfd, err := newFD(fd, family, sotype, laddr.Network())
 	if err != nil {
+		closesocket(fd)
 		return nil, err
 	}
 	netfd.setAddr(laddr, raddr)
