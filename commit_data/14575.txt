commit 9146ac14ee1e7516e2bb4212c0fcf054c6dde640
Author: RÃ©my Oudompheng <oudomphe@phare.normalesup.org>
Date:   Thu Dec 6 08:09:17 2012 +0100

    cmd/gc: do not overflow parser stack on a long chain of else if.
    
    Fixes #2615.
    
    R=dave, minux.ma, iant, daniel.morsing, rsc
    CC=golang-dev
    https://golang.org/cl/6847078
---
 src/cmd/gc/go.y             |   53 +-
 src/cmd/gc/y.tab.c          | 3622 +++++++++++++++++++++++--------------------
 src/cmd/gc/y.tab.h          |   68 +-
 src/cmd/gc/yerr.h           |    2 +-
 test/fixedbugs/issue2615.go |  547 +++++++
 5 files changed, 2616 insertions(+), 1676 deletions(-)

diff --git a/src/cmd/gc/go.y b/src/cmd/gc/go.y
index 0f2622c3b8..29e6e3b342 100644
--- a/src/cmd/gc/go.y
+++ b/src/cmd/gc/go.y
@@ -57,7 +57,7 @@ static void fixlbrace(int);
 %type	<node>	compound_stmt dotname embed expr complitexpr
 %type	<node>	expr_or_type
 %type	<node>	fndcl hidden_fndcl fnliteral
-%type	<node>	for_body for_header for_stmt if_header if_stmt else non_dcl_stmt
+%type	<node>	for_body for_header for_stmt if_header if_stmt non_dcl_stmt
 %type	<node>	interfacedcl keyval labelname name
 %type	<node>	name_or_type non_expr_type
 %type	<node>	new_name dcl_name oexpr typedclname
@@ -70,7 +70,7 @@ static void fixlbrace(int);
 
 %type	<list>	xdcl fnbody fnres loop_body dcl_name_list
 %type	<list>	new_name_list expr_list keyval_list braced_keyval_list expr_or_type_list xdcl_list
-%type	<list>	oexpr_list caseblock_list stmt_list oarg_type_list_ocomma arg_type_list
+%type	<list>	oexpr_list caseblock_list elseif elseif_list else stmt_list oarg_type_list_ocomma arg_type_list
 %type	<list>	interfacedcl_list vardcl vardcl_list structdcl structdcl_list
 %type	<list>	common_dcl constdcl constdcl1 constdcl_list typedcl_list
 
@@ -661,25 +661,56 @@ if_stmt:
 	{
 		$3->nbody = $5;
 	}
-	else
+	elseif_list else
 	{
-		popdcl();
+		Node *n;
+		NodeList *nn;
+
 		$$ = $3;
-		if($7 != N)
-			$$->nelse = list1($7);
+		n = $3;
+		popdcl();
+		for(nn = concat($7, $8); nn; nn = nn->next) {
+			if(nn->n->op == OIF)
+				popdcl();
+			n->nelse = list1(nn->n);
+			n = nn->n;
+		}
 	}
 
-else:
+elseif:
+	LELSE LIF 
 	{
-		$$ = N;
+		markdcl();
 	}
-|	LELSE if_stmt
+	if_header loop_body
 	{
-		$$ = $2;
+		if($4->ntest == N)
+			yyerror("missing condition in if statement");
+		$4->nbody = $5;
+		$$ = list1($4);
+	}
+
+elseif_list:
+	{
+		$$ = nil;
+	}
+|	elseif_list elseif
+	{
+		$$ = concat($1, $2);
+	}
+
+else:
+	{
+		$$ = nil;
 	}
 |	LELSE compound_stmt
 	{
-		$$ = $2;
+		NodeList *node;
+		
+		node = mal(sizeof *node);
+		node->n = $2;
+		node->end = node;
+		$$ = node;
 	}
 
 switch_stmt:
diff --git a/src/cmd/gc/y.tab.c b/src/cmd/gc/y.tab.c
index b2ed8302ee..26ae8e1833 100644
--- a/src/cmd/gc/y.tab.c
+++ b/src/cmd/gc/y.tab.c
@@ -1,24 +1,21 @@
-/* A Bison parser, made by GNU Bison 2.3.  */
+/* A Bison parser, made by GNU Bison 2.6.5.  */
 
-/* Skeleton implementation for Bison's Yacc-like parsers in C
-
-   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
-   Free Software Foundation, Inc.
-
-   This program is free software; you can redistribute it and/or modify
+/* Bison implementation for Yacc-like parsers in C
+   
+      Copyright (C) 1984, 1989-1990, 2000-2012 Free Software Foundation, Inc.
+   
+   This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2, or (at your option)
-   any later version.
-
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+   
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
-
+   
    You should have received a copy of the GNU General Public License
-   along with this program; if not, write to the Free Software
-   Foundation, Inc., 51 Franklin Street, Fifth Floor,
-   Boston, MA 02110-1301, USA.  */
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
 
 /* As a special exception, you may create a larger work that contains
    part or all of the Bison parser skeleton and distribute that work
@@ -29,7 +26,7 @@
    special exception, which will cause the skeleton and the resulting
    Bison output files to be licensed under the GNU General Public
    License without this special exception.
-
+   
    This special exception was added by the Free Software Foundation in
    version 2.2 of Bison.  */
 
@@ -47,7 +44,7 @@
 #define YYBISON 1
 
 /* Bison version.  */
-#define YYBISON_VERSION "2.3"
+#define YYBISON_VERSION "2.6.5"
 
 /* Skeleton name.  */
 #define YYSKELETON_NAME "yacc.c"
@@ -55,10 +52,56 @@
 /* Pure parsers.  */
 #define YYPURE 0
 
-/* Using locations.  */
-#define YYLSP_NEEDED 0
+/* Push parsers.  */
+#define YYPUSH 0
+
+/* Pull parsers.  */
+#define YYPULL 1
+
+
+
+
+/* Copy the first part of user declarations.  */
+/* Line 360 of yacc.c  */
+#line 20 "go.y"
+
+#include <u.h>
+#include <stdio.h>	/* if we don't, bison will, and go.h re-#defines getc */
+#include <libc.h>
+#include "go.h"
+
+static void fixlbrace(int);
+
+/* Line 360 of yacc.c  */
+#line 77 "y.tab.c"
+
+# ifndef YY_NULL
+#  if defined __cplusplus && 201103L <= __cplusplus
+#   define YY_NULL nullptr
+#  else
+#   define YY_NULL 0
+#  endif
+# endif
 
+/* Enabling verbose error messages.  */
+#ifdef YYERROR_VERBOSE
+# undef YYERROR_VERBOSE
+# define YYERROR_VERBOSE 1
+#else
+# define YYERROR_VERBOSE 1
+#endif
 
+/* In a future release of Bison, this section will be replaced
+   by #include "y.tab.h".  */
+#ifndef YY_YY_Y_TAB_H_INCLUDED
+# define YY_YY_Y_TAB_H_INCLUDED
+/* Enabling traces.  */
+#ifndef YYDEBUG
+# define YYDEBUG 0
+#endif
+#if YYDEBUG
+extern int yydebug;
+#endif
 
 /* Tokens.  */
 #ifndef YYTOKENTYPE
@@ -170,62 +213,50 @@
 
 
 
-
-/* Copy the first part of user declarations.  */
-#line 20 "go.y"
-
-#include <u.h>
-#include <stdio.h>	/* if we don't, bison will, and go.h re-#defines getc */
-#include <libc.h>
-#include "go.h"
-
-static void fixlbrace(int);
-
-
-/* Enabling traces.  */
-#ifndef YYDEBUG
-# define YYDEBUG 0
-#endif
-
-/* Enabling verbose error messages.  */
-#ifdef YYERROR_VERBOSE
-# undef YYERROR_VERBOSE
-# define YYERROR_VERBOSE 1
-#else
-# define YYERROR_VERBOSE 1
-#endif
-
-/* Enabling the token table.  */
-#ifndef YYTOKEN_TABLE
-# define YYTOKEN_TABLE 0
-#endif
-
 #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
 typedef union YYSTYPE
-#line 28 "go.y"
 {
+/* Line 376 of yacc.c  */
+#line 28 "go.y"
+
 	Node*		node;
 	NodeList*		list;
 	Type*		type;
 	Sym*		sym;
 	struct	Val	val;
 	int		i;
-}
-/* Line 193 of yacc.c.  */
-#line 216 "y.tab.c"
-	YYSTYPE;
+
+
+/* Line 376 of yacc.c  */
+#line 232 "y.tab.c"
+} YYSTYPE;
+# define YYSTYPE_IS_TRIVIAL 1
 # define yystype YYSTYPE /* obsolescent; will be withdrawn */
 # define YYSTYPE_IS_DECLARED 1
-# define YYSTYPE_IS_TRIVIAL 1
 #endif
 
+extern YYSTYPE yylval;
+
+#ifdef YYPARSE_PARAM
+#if defined __STDC__ || defined __cplusplus
+int yyparse (void *YYPARSE_PARAM);
+#else
+int yyparse ();
+#endif
+#else /* ! YYPARSE_PARAM */
+#if defined __STDC__ || defined __cplusplus
+int yyparse (void);
+#else
+int yyparse ();
+#endif
+#endif /* ! YYPARSE_PARAM */
 
+#endif /* !YY_YY_Y_TAB_H_INCLUDED  */
 
 /* Copy the second part of user declarations.  */
 
-
-/* Line 216 of yacc.c.  */
-#line 229 "y.tab.c"
+/* Line 379 of yacc.c  */
+#line 260 "y.tab.c"
 
 #ifdef short
 # undef short
@@ -278,36 +309,36 @@ typedef short int yytype_int16;
 # if defined YYENABLE_NLS && YYENABLE_NLS
 #  if ENABLE_NLS
 #   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
-#   define YY_(msgid) dgettext ("bison-runtime", msgid)
+#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
 #  endif
 # endif
 # ifndef YY_
-#  define YY_(msgid) msgid
+#  define YY_(Msgid) Msgid
 # endif
 #endif
 
 /* Suppress unused-variable warnings by "using" E.  */
 #if ! defined lint || defined __GNUC__
-# define YYUSE(e) ((void) (e))
+# define YYUSE(E) ((void) (E))
 #else
-# define YYUSE(e) /* empty */
+# define YYUSE(E) /* empty */
 #endif
 
 /* Identity function, used to suppress warnings about constant conditions.  */
 #ifndef lint
-# define YYID(n) (n)
+# define YYID(N) (N)
 #else
 #if (defined __STDC__ || defined __C99__FUNC__ \
      || defined __cplusplus || defined _MSC_VER)
 static int
-YYID (int i)
+YYID (int yyi)
 #else
 static int
-YYID (i)
-    int i;
+YYID (yyi)
+    int yyi;
 #endif
 {
-  return i;
+  return yyi;
 }
 #endif
 
@@ -328,11 +359,12 @@ YYID (i)
 #    define alloca _alloca
 #   else
 #    define YYSTACK_ALLOC alloca
-#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
+#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
      || defined __cplusplus || defined _MSC_VER)
 #     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
-#     ifndef _STDLIB_H
-#      define _STDLIB_H 1
+      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
+#     ifndef EXIT_SUCCESS
+#      define EXIT_SUCCESS 0
 #     endif
 #    endif
 #   endif
@@ -355,24 +387,24 @@ YYID (i)
 #  ifndef YYSTACK_ALLOC_MAXIMUM
 #   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
 #  endif
-#  if (defined __cplusplus && ! defined _STDLIB_H \
+#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
        && ! ((defined YYMALLOC || defined malloc) \
 	     && (defined YYFREE || defined free)))
 #   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
-#   ifndef _STDLIB_H
-#    define _STDLIB_H 1
+#   ifndef EXIT_SUCCESS
+#    define EXIT_SUCCESS 0
 #   endif
 #  endif
 #  ifndef YYMALLOC
 #   define YYMALLOC malloc
-#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
+#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
      || defined __cplusplus || defined _MSC_VER)
 void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
 #   endif
 #  endif
 #  ifndef YYFREE
 #   define YYFREE free
-#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
+#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
      || defined __cplusplus || defined _MSC_VER)
 void free (void *); /* INFRINGES ON USER NAME SPACE */
 #   endif
@@ -388,9 +420,9 @@ void free (void *); /* INFRINGES ON USER NAME SPACE */
 /* A type that is properly aligned for any stack member.  */
 union yyalloc
 {
-  yytype_int16 yyss;
-  YYSTYPE yyvs;
-  };
+  yytype_int16 yyss_alloc;
+  YYSTYPE yyvs_alloc;
+};
 
 /* The size of the maximum gap between one aligned stack and the next.  */
 # define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)
@@ -401,35 +433,19 @@ union yyalloc
      ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
       + YYSTACK_GAP_MAXIMUM)
 
-/* Copy COUNT objects from FROM to TO.  The source and destination do
-   not overlap.  */
-# ifndef YYCOPY
-#  if defined __GNUC__ && 1 < __GNUC__
-#   define YYCOPY(To, From, Count) \
-      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
-#  else
-#   define YYCOPY(To, From, Count)		\
-      do					\
-	{					\
-	  YYSIZE_T yyi;				\
-	  for (yyi = 0; yyi < (Count); yyi++)	\
-	    (To)[yyi] = (From)[yyi];		\
-	}					\
-      while (YYID (0))
-#  endif
-# endif
+# define YYCOPY_NEEDED 1
 
 /* Relocate STACK from its old location to the new one.  The
    local variables YYSIZE and YYSTACKSIZE give the old and new number of
    elements in the stack, and YYPTR gives the new location of the
    stack.  Advance YYPTR to a properly aligned location for the next
    stack.  */
-# define YYSTACK_RELOCATE(Stack)					\
+# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
     do									\
       {									\
 	YYSIZE_T yynewbytes;						\
-	YYCOPY (&yyptr->Stack, Stack, yysize);				\
-	Stack = &yyptr->Stack;						\
+	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
+	Stack = &yyptr->Stack_alloc;					\
 	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
 	yyptr += yynewbytes / sizeof (*yyptr);				\
       }									\
@@ -437,19 +453,39 @@ union yyalloc
 
 #endif
 
+#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
+/* Copy COUNT objects from SRC to DST.  The source and destination do
+   not overlap.  */
+# ifndef YYCOPY
+#  if defined __GNUC__ && 1 < __GNUC__
+#   define YYCOPY(Dst, Src, Count) \
+      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
+#  else
+#   define YYCOPY(Dst, Src, Count)              \
+      do                                        \
+        {                                       \
+          YYSIZE_T yyi;                         \
+          for (yyi = 0; yyi < (Count); yyi++)   \
+            (Dst)[yyi] = (Src)[yyi];            \
+        }                                       \
+      while (YYID (0))
+#  endif
+# endif
+#endif /* !YYCOPY_NEEDED */
+
 /* YYFINAL -- State number of the termination state.  */
 #define YYFINAL  4
 /* YYLAST -- Last index in YYTABLE.  */
-#define YYLAST   2097
+#define YYLAST   2049
 
 /* YYNTOKENS -- Number of terminals.  */
 #define YYNTOKENS  76
 /* YYNNTS -- Number of nonterminals.  */
-#define YYNNTS  138
+#define YYNNTS  141
 /* YYNRULES -- Number of rules.  */
-#define YYNRULES  344
+#define YYNRULES  347
 /* YYNRULES -- Number of states.  */
-#define YYNSTATES  653
+#define YYNSTATES  658
 
 /* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
 #define YYUNDEFTOK  2
@@ -507,148 +543,149 @@ static const yytype_uint16 yyprhs[] =
      162,   164,   168,   172,   176,   179,   182,   186,   192,   198,
      201,   202,   207,   208,   212,   213,   216,   217,   222,   227,
      232,   238,   240,   242,   245,   246,   250,   252,   256,   257,
-     258,   259,   267,   268,   271,   274,   275,   276,   284,   285,
-     291,   293,   297,   301,   305,   309,   313,   317,   321,   325,
-     329,   333,   337,   341,   345,   349,   353,   357,   361,   365,
-     369,   373,   375,   378,   381,   384,   387,   390,   393,   396,
-     399,   403,   409,   416,   418,   420,   424,   430,   436,   441,
-     448,   450,   455,   461,   467,   475,   477,   478,   482,   484,
-     489,   491,   495,   497,   499,   501,   503,   505,   507,   509,
-     510,   512,   514,   516,   518,   523,   525,   527,   529,   532,
-     534,   536,   538,   540,   542,   546,   548,   550,   552,   555,
-     557,   559,   561,   563,   567,   569,   571,   573,   575,   577,
-     579,   581,   583,   585,   589,   594,   599,   602,   606,   612,
-     614,   616,   619,   623,   629,   633,   639,   643,   647,   653,
-     662,   668,   677,   683,   684,   688,   689,   691,   695,   697,
-     702,   705,   706,   710,   712,   716,   718,   722,   724,   728,
-     730,   734,   736,   740,   744,   747,   752,   756,   762,   768,
-     770,   774,   776,   779,   781,   785,   790,   792,   795,   798,
-     800,   802,   806,   807,   810,   811,   813,   815,   817,   819,
-     821,   823,   825,   827,   829,   830,   835,   837,   840,   843,
-     846,   849,   852,   855,   857,   861,   863,   867,   869,   873,
-     875,   879,   881,   885,   887,   889,   893,   897,   898,   901,
-     902,   904,   905,   907,   908,   910,   911,   913,   914,   916,
-     917,   919,   920,   922,   923,   925,   926,   928,   933,   938,
-     944,   951,   956,   961,   963,   965,   967,   969,   971,   973,
-     975,   977,   979,   983,   988,   994,   999,  1004,  1007,  1010,
-    1015,  1019,  1023,  1029,  1033,  1038,  1042,  1048,  1050,  1051,
-    1053,  1057,  1059,  1061,  1064,  1066,  1068,  1074,  1075,  1078,
-    1080,  1084,  1086,  1090,  1092
+     258,   259,   268,   269,   275,   276,   279,   280,   283,   284,
+     285,   293,   294,   300,   302,   306,   310,   314,   318,   322,
+     326,   330,   334,   338,   342,   346,   350,   354,   358,   362,
+     366,   370,   374,   378,   382,   384,   387,   390,   393,   396,
+     399,   402,   405,   408,   412,   418,   425,   427,   429,   433,
+     439,   445,   450,   457,   459,   464,   470,   476,   484,   486,
+     487,   491,   493,   498,   500,   504,   506,   508,   510,   512,
+     514,   516,   518,   519,   521,   523,   525,   527,   532,   534,
+     536,   538,   541,   543,   545,   547,   549,   551,   555,   557,
+     559,   561,   564,   566,   568,   570,   572,   576,   578,   580,
+     582,   584,   586,   588,   590,   592,   594,   598,   603,   608,
+     611,   615,   621,   623,   625,   628,   632,   638,   642,   648,
+     652,   656,   662,   671,   677,   686,   692,   693,   697,   698,
+     700,   704,   706,   711,   714,   715,   719,   721,   725,   727,
+     731,   733,   737,   739,   743,   745,   749,   753,   756,   761,
+     765,   771,   777,   779,   783,   785,   788,   790,   794,   799,
+     801,   804,   807,   809,   811,   815,   816,   819,   820,   822,
+     824,   826,   828,   830,   832,   834,   836,   838,   839,   844,
+     846,   849,   852,   855,   858,   861,   864,   866,   870,   872,
+     876,   878,   882,   884,   888,   890,   894,   896,   898,   902,
+     906,   907,   910,   911,   913,   914,   916,   917,   919,   920,
+     922,   923,   925,   926,   928,   929,   931,   932,   934,   935,
+     937,   942,   947,   953,   960,   965,   970,   972,   974,   976,
+     978,   980,   982,   984,   986,   988,   992,   997,  1003,  1008,
+    1013,  1016,  1019,  1024,  1028,  1032,  1038,  1042,  1047,  1051,
+    1057,  1059,  1060,  1062,  1066,  1068,  1070,  1073,  1075,  1077,
+    1083,  1084,  1087,  1089,  1093,  1095,  1099,  1101
 };
 
 /* YYRHS -- A `-1'-separated list of the rules' RHS.  */
 static const yytype_int16 yyrhs[] =
 {
-      77,     0,    -1,    79,    78,    81,   162,    -1,    -1,    25,
-     137,    62,    -1,    -1,    80,    86,    88,    -1,    -1,    81,
-      82,    62,    -1,    21,    83,    -1,    21,    59,    84,   186,
+      77,     0,    -1,    79,    78,    81,   165,    -1,    -1,    25,
+     140,    62,    -1,    -1,    80,    86,    88,    -1,    -1,    81,
+      82,    62,    -1,    21,    83,    -1,    21,    59,    84,   189,
       60,    -1,    21,    59,    60,    -1,    85,    86,    88,    -1,
       85,    88,    -1,    83,    -1,    84,    62,    83,    -1,     3,
-      -1,   137,     3,    -1,    63,     3,    -1,    25,    24,    87,
-      62,    -1,    -1,    24,    -1,    -1,    89,   210,    64,    64,
-      -1,    -1,    91,    -1,   154,    -1,   177,    -1,     1,    -1,
-      32,    93,    -1,    32,    59,   163,   186,    60,    -1,    32,
-      59,    60,    -1,    92,    94,    -1,    92,    59,    94,   186,
-      60,    -1,    92,    59,    94,    62,   164,   186,    60,    -1,
-      92,    59,    60,    -1,    31,    97,    -1,    31,    59,   165,
-     186,    60,    -1,    31,    59,    60,    -1,     9,    -1,   181,
-     142,    -1,   181,   142,    65,   182,    -1,   181,    65,   182,
-      -1,   181,   142,    65,   182,    -1,   181,    65,   182,    -1,
-      94,    -1,   181,   142,    -1,   181,    -1,   137,    -1,    96,
-     142,    -1,   123,    -1,   123,     4,   123,    -1,   182,    65,
-     182,    -1,   182,     5,   182,    -1,   123,    42,    -1,   123,
-      37,    -1,     7,   183,    66,    -1,     7,   183,    65,   123,
-      66,    -1,     7,   183,     5,   123,    66,    -1,    12,    66,
-      -1,    -1,    67,   101,   179,    68,    -1,    -1,    99,   103,
-     179,    -1,    -1,   104,   102,    -1,    -1,    35,   106,   179,
-      68,    -1,   182,    65,    26,   123,    -1,   182,     5,    26,
-     123,    -1,   190,    62,   190,    62,   190,    -1,   190,    -1,
+      -1,   140,     3,    -1,    63,     3,    -1,    25,    24,    87,
+      62,    -1,    -1,    24,    -1,    -1,    89,   213,    64,    64,
+      -1,    -1,    91,    -1,   157,    -1,   180,    -1,     1,    -1,
+      32,    93,    -1,    32,    59,   166,   189,    60,    -1,    32,
+      59,    60,    -1,    92,    94,    -1,    92,    59,    94,   189,
+      60,    -1,    92,    59,    94,    62,   167,   189,    60,    -1,
+      92,    59,    60,    -1,    31,    97,    -1,    31,    59,   168,
+     189,    60,    -1,    31,    59,    60,    -1,     9,    -1,   184,
+     145,    -1,   184,   145,    65,   185,    -1,   184,    65,   185,
+      -1,   184,   145,    65,   185,    -1,   184,    65,   185,    -1,
+      94,    -1,   184,   145,    -1,   184,    -1,   140,    -1,    96,
+     145,    -1,   126,    -1,   126,     4,   126,    -1,   185,    65,
+     185,    -1,   185,     5,   185,    -1,   126,    42,    -1,   126,
+      37,    -1,     7,   186,    66,    -1,     7,   186,    65,   126,
+      66,    -1,     7,   186,     5,   126,    66,    -1,    12,    66,
+      -1,    -1,    67,   101,   182,    68,    -1,    -1,    99,   103,
+     182,    -1,    -1,   104,   102,    -1,    -1,    35,   106,   182,
+      68,    -1,   185,    65,    26,   126,    -1,   185,     5,    26,
+     126,    -1,   193,    62,   193,    62,   193,    -1,   193,    -1,
      107,    -1,   108,   105,    -1,    -1,    16,   111,   109,    -1,
-     190,    -1,   190,    62,   190,    -1,    -1,    -1,    -1,    20,
-     114,   112,   115,   105,   116,   117,    -1,    -1,    14,   113,
-      -1,    14,   100,    -1,    -1,    -1,    30,   119,   112,   120,
-      35,   104,    68,    -1,    -1,    28,   122,    35,   104,    68,
-      -1,   124,    -1,   123,    47,   123,    -1,   123,    33,   123,
-      -1,   123,    38,   123,    -1,   123,    46,   123,    -1,   123,
-      45,   123,    -1,   123,    43,   123,    -1,   123,    39,   123,
-      -1,   123,    40,   123,    -1,   123,    49,   123,    -1,   123,
-      50,   123,    -1,   123,    51,   123,    -1,   123,    52,   123,
-      -1,   123,    53,   123,    -1,   123,    54,   123,    -1,   123,
-      55,   123,    -1,   123,    56,   123,    -1,   123,    34,   123,
-      -1,   123,    44,   123,    -1,   123,    48,   123,    -1,   123,
-      36,   123,    -1,   130,    -1,    53,   124,    -1,    56,   124,
-      -1,    49,   124,    -1,    50,   124,    -1,    69,   124,    -1,
-      70,   124,    -1,    52,   124,    -1,    36,   124,    -1,   130,
-      59,    60,    -1,   130,    59,   183,   187,    60,    -1,   130,
-      59,   183,    11,   187,    60,    -1,     3,    -1,   139,    -1,
-     130,    63,   137,    -1,   130,    63,    59,   131,    60,    -1,
-     130,    63,    59,    31,    60,    -1,   130,    71,   123,    72,
-      -1,   130,    71,   188,    66,   188,    72,    -1,   125,    -1,
-     145,    59,   123,    60,    -1,   146,   133,   127,   185,    68,
-      -1,   126,    67,   127,   185,    68,    -1,    59,   131,    60,
-      67,   127,   185,    68,    -1,   161,    -1,    -1,   123,    66,
-     129,    -1,   123,    -1,    67,   127,   185,    68,    -1,   126,
-      -1,    59,   131,    60,    -1,   123,    -1,   143,    -1,   142,
-      -1,    35,    -1,    67,    -1,   137,    -1,   137,    -1,    -1,
-     134,    -1,    24,    -1,   138,    -1,    73,    -1,    74,     3,
-      63,    24,    -1,   137,    -1,   134,    -1,    11,    -1,    11,
-     142,    -1,   151,    -1,   157,    -1,   149,    -1,   150,    -1,
-     148,    -1,    59,   142,    60,    -1,   151,    -1,   157,    -1,
-     149,    -1,    53,   143,    -1,   157,    -1,   149,    -1,   150,
-      -1,   148,    -1,    59,   142,    60,    -1,   157,    -1,   149,
-      -1,   149,    -1,   151,    -1,   157,    -1,   149,    -1,   150,
-      -1,   148,    -1,   139,    -1,   139,    63,   137,    -1,    71,
-     188,    72,   142,    -1,    71,    11,    72,   142,    -1,     8,
-     144,    -1,     8,    36,   142,    -1,    23,    71,   142,    72,
-     142,    -1,   152,    -1,   153,    -1,    53,   142,    -1,    36,
-       8,   142,    -1,    29,   133,   166,   186,    68,    -1,    29,
-     133,    68,    -1,    22,   133,   167,   186,    68,    -1,    22,
-     133,    68,    -1,    17,   155,   158,    -1,   137,    59,   175,
-      60,   159,    -1,    59,   175,    60,   137,    59,   175,    60,
-     159,    -1,   196,    59,   191,    60,   206,    -1,    59,   211,
-      60,   137,    59,   191,    60,   206,    -1,    17,    59,   175,
-      60,   159,    -1,    -1,    67,   179,    68,    -1,    -1,   147,
-      -1,    59,   175,    60,    -1,   157,    -1,   160,   133,   179,
-      68,    -1,   160,     1,    -1,    -1,   162,    90,    62,    -1,
-      93,    -1,   163,    62,    93,    -1,    95,    -1,   164,    62,
-      95,    -1,    97,    -1,   165,    62,    97,    -1,   168,    -1,
-     166,    62,   168,    -1,   171,    -1,   167,    62,   171,    -1,
-     180,   142,   194,    -1,   170,   194,    -1,    59,   170,    60,
-     194,    -1,    53,   170,   194,    -1,    59,    53,   170,    60,
-     194,    -1,    53,    59,   170,    60,   194,    -1,    24,    -1,
-      24,    63,   137,    -1,   169,    -1,   134,   172,    -1,   169,
-      -1,    59,   169,    60,    -1,    59,   175,    60,   159,    -1,
-     132,    -1,   137,   132,    -1,   137,   141,    -1,   141,    -1,
-     173,    -1,   174,    75,   173,    -1,    -1,   174,   187,    -1,
-      -1,   100,    -1,    91,    -1,   177,    -1,     1,    -1,    98,
-      -1,   110,    -1,   118,    -1,   121,    -1,   113,    -1,    -1,
-     140,    66,   178,   176,    -1,    15,    -1,     6,   136,    -1,
-      10,   136,    -1,    18,   125,    -1,    13,   125,    -1,    19,
-     134,    -1,    27,   189,    -1,   176,    -1,   179,    62,   176,
-      -1,   134,    -1,   180,    75,   134,    -1,   135,    -1,   181,
-      75,   135,    -1,   123,    -1,   182,    75,   123,    -1,   131,
-      -1,   183,    75,   131,    -1,   128,    -1,   129,    -1,   184,
-      75,   128,    -1,   184,    75,   129,    -1,    -1,   184,   187,
-      -1,    -1,    62,    -1,    -1,    75,    -1,    -1,   123,    -1,
-      -1,   182,    -1,    -1,    98,    -1,    -1,   211,    -1,    -1,
-     212,    -1,    -1,   213,    -1,    -1,     3,    -1,    21,    24,
-       3,    62,    -1,    32,   196,   198,    62,    -1,     9,   196,
-      65,   209,    62,    -1,     9,   196,   198,    65,   209,    62,
-      -1,    31,   197,   198,    62,    -1,    17,   156,   158,    62,
-      -1,   138,    -1,   196,    -1,   200,    -1,   201,    -1,   202,
-      -1,   200,    -1,   202,    -1,   138,    -1,    24,    -1,    71,
-      72,   198,    -1,    71,     3,    72,   198,    -1,    23,    71,
-     198,    72,   198,    -1,    29,    67,   192,    68,    -1,    22,
-      67,   193,    68,    -1,    53,   198,    -1,     8,   199,    -1,
-       8,    59,   201,    60,    -1,     8,    36,   198,    -1,    36,
-       8,   198,    -1,    17,    59,   191,    60,   206,    -1,   137,
-     198,   194,    -1,   137,    11,   198,   194,    -1,   137,   198,
-     194,    -1,   137,    59,   191,    60,   206,    -1,   198,    -1,
-      -1,   207,    -1,    59,   191,    60,    -1,   198,    -1,     3,
-      -1,    50,     3,    -1,   137,    -1,   208,    -1,    59,   208,
-      49,   208,    60,    -1,    -1,   210,   195,    -1,   203,    -1,
-     211,    75,   203,    -1,   204,    -1,   212,    62,   204,    -1,
-     205,    -1,   213,    62,   205,    -1
+     193,    -1,   193,    62,   193,    -1,    -1,    -1,    -1,    20,
+     114,   112,   115,   105,   116,   119,   120,    -1,    -1,    14,
+      20,   118,   112,   105,    -1,    -1,   119,   117,    -1,    -1,
+      14,   100,    -1,    -1,    -1,    30,   122,   112,   123,    35,
+     104,    68,    -1,    -1,    28,   125,    35,   104,    68,    -1,
+     127,    -1,   126,    47,   126,    -1,   126,    33,   126,    -1,
+     126,    38,   126,    -1,   126,    46,   126,    -1,   126,    45,
+     126,    -1,   126,    43,   126,    -1,   126,    39,   126,    -1,
+     126,    40,   126,    -1,   126,    49,   126,    -1,   126,    50,
+     126,    -1,   126,    51,   126,    -1,   126,    52,   126,    -1,
+     126,    53,   126,    -1,   126,    54,   126,    -1,   126,    55,
+     126,    -1,   126,    56,   126,    -1,   126,    34,   126,    -1,
+     126,    44,   126,    -1,   126,    48,   126,    -1,   126,    36,
+     126,    -1,   133,    -1,    53,   127,    -1,    56,   127,    -1,
+      49,   127,    -1,    50,   127,    -1,    69,   127,    -1,    70,
+     127,    -1,    52,   127,    -1,    36,   127,    -1,   133,    59,
+      60,    -1,   133,    59,   186,   190,    60,    -1,   133,    59,
+     186,    11,   190,    60,    -1,     3,    -1,   142,    -1,   133,
+      63,   140,    -1,   133,    63,    59,   134,    60,    -1,   133,
+      63,    59,    31,    60,    -1,   133,    71,   126,    72,    -1,
+     133,    71,   191,    66,   191,    72,    -1,   128,    -1,   148,
+      59,   126,    60,    -1,   149,   136,   130,   188,    68,    -1,
+     129,    67,   130,   188,    68,    -1,    59,   134,    60,    67,
+     130,   188,    68,    -1,   164,    -1,    -1,   126,    66,   132,
+      -1,   126,    -1,    67,   130,   188,    68,    -1,   129,    -1,
+      59,   134,    60,    -1,   126,    -1,   146,    -1,   145,    -1,
+      35,    -1,    67,    -1,   140,    -1,   140,    -1,    -1,   137,
+      -1,    24,    -1,   141,    -1,    73,    -1,    74,     3,    63,
+      24,    -1,   140,    -1,   137,    -1,    11,    -1,    11,   145,
+      -1,   154,    -1,   160,    -1,   152,    -1,   153,    -1,   151,
+      -1,    59,   145,    60,    -1,   154,    -1,   160,    -1,   152,
+      -1,    53,   146,    -1,   160,    -1,   152,    -1,   153,    -1,
+     151,    -1,    59,   145,    60,    -1,   160,    -1,   152,    -1,
+     152,    -1,   154,    -1,   160,    -1,   152,    -1,   153,    -1,
+     151,    -1,   142,    -1,   142,    63,   140,    -1,    71,   191,
+      72,   145,    -1,    71,    11,    72,   145,    -1,     8,   147,
+      -1,     8,    36,   145,    -1,    23,    71,   145,    72,   145,
+      -1,   155,    -1,   156,    -1,    53,   145,    -1,    36,     8,
+     145,    -1,    29,   136,   169,   189,    68,    -1,    29,   136,
+      68,    -1,    22,   136,   170,   189,    68,    -1,    22,   136,
+      68,    -1,    17,   158,   161,    -1,   140,    59,   178,    60,
+     162,    -1,    59,   178,    60,   140,    59,   178,    60,   162,
+      -1,   199,    59,   194,    60,   209,    -1,    59,   214,    60,
+     140,    59,   194,    60,   209,    -1,    17,    59,   178,    60,
+     162,    -1,    -1,    67,   182,    68,    -1,    -1,   150,    -1,
+      59,   178,    60,    -1,   160,    -1,   163,   136,   182,    68,
+      -1,   163,     1,    -1,    -1,   165,    90,    62,    -1,    93,
+      -1,   166,    62,    93,    -1,    95,    -1,   167,    62,    95,
+      -1,    97,    -1,   168,    62,    97,    -1,   171,    -1,   169,
+      62,   171,    -1,   174,    -1,   170,    62,   174,    -1,   183,
+     145,   197,    -1,   173,   197,    -1,    59,   173,    60,   197,
+      -1,    53,   173,   197,    -1,    59,    53,   173,    60,   197,
+      -1,    53,    59,   173,    60,   197,    -1,    24,    -1,    24,
+      63,   140,    -1,   172,    -1,   137,   175,    -1,   172,    -1,
+      59,   172,    60,    -1,    59,   178,    60,   162,    -1,   135,
+      -1,   140,   135,    -1,   140,   144,    -1,   144,    -1,   176,
+      -1,   177,    75,   176,    -1,    -1,   177,   190,    -1,    -1,
+     100,    -1,    91,    -1,   180,    -1,     1,    -1,    98,    -1,
+     110,    -1,   121,    -1,   124,    -1,   113,    -1,    -1,   143,
+      66,   181,   179,    -1,    15,    -1,     6,   139,    -1,    10,
+     139,    -1,    18,   128,    -1,    13,   128,    -1,    19,   137,
+      -1,    27,   192,    -1,   179,    -1,   182,    62,   179,    -1,
+     137,    -1,   183,    75,   137,    -1,   138,    -1,   184,    75,
+     138,    -1,   126,    -1,   185,    75,   126,    -1,   134,    -1,
+     186,    75,   134,    -1,   131,    -1,   132,    -1,   187,    75,
+     131,    -1,   187,    75,   132,    -1,    -1,   187,   190,    -1,
+      -1,    62,    -1,    -1,    75,    -1,    -1,   126,    -1,    -1,
+     185,    -1,    -1,    98,    -1,    -1,   214,    -1,    -1,   215,
+      -1,    -1,   216,    -1,    -1,     3,    -1,    21,    24,     3,
+      62,    -1,    32,   199,   201,    62,    -1,     9,   199,    65,
+     212,    62,    -1,     9,   199,   201,    65,   212,    62,    -1,
+      31,   200,   201,    62,    -1,    17,   159,   161,    62,    -1,
+     141,    -1,   199,    -1,   203,    -1,   204,    -1,   205,    -1,
+     203,    -1,   205,    -1,   141,    -1,    24,    -1,    71,    72,
+     201,    -1,    71,     3,    72,   201,    -1,    23,    71,   201,
+      72,   201,    -1,    29,    67,   195,    68,    -1,    22,    67,
+     196,    68,    -1,    53,   201,    -1,     8,   202,    -1,     8,
+      59,   204,    60,    -1,     8,    36,   201,    -1,    36,     8,
+     201,    -1,    17,    59,   194,    60,   209,    -1,   140,   201,
+     197,    -1,   140,    11,   201,   197,    -1,   140,   201,   197,
+      -1,   140,    59,   194,    60,   209,    -1,   201,    -1,    -1,
+     210,    -1,    59,   194,    60,    -1,   201,    -1,     3,    -1,
+      50,     3,    -1,   140,    -1,   211,    -1,    59,   211,    49,
+     211,    60,    -1,    -1,   213,   198,    -1,   206,    -1,   214,
+      75,   206,    -1,   207,    -1,   215,    62,   207,    -1,   208,
+      -1,   216,    62,   208,    -1
 };
 
 /* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
@@ -662,37 +699,37 @@ static const yytype_uint16 yyrline[] =
      405,   409,   414,   426,   442,   447,   454,   474,   492,   501,
      520,   519,   531,   530,   561,   564,   571,   570,   581,   587,
      596,   607,   613,   616,   624,   623,   634,   640,   652,   656,
-     661,   651,   673,   676,   680,   687,   691,   686,   709,   708,
-     724,   725,   729,   733,   737,   741,   745,   749,   753,   757,
-     761,   765,   769,   773,   777,   781,   785,   789,   793,   797,
-     802,   808,   809,   813,   824,   828,   832,   836,   841,   845,
-     855,   859,   864,   872,   876,   877,   888,   892,   896,   900,
-     904,   905,   911,   918,   924,   931,   934,   941,   947,   948,
-     955,   956,   974,   975,   978,   981,   985,   996,  1005,  1011,
-    1014,  1017,  1024,  1025,  1031,  1046,  1054,  1066,  1071,  1077,
-    1078,  1079,  1080,  1081,  1082,  1088,  1089,  1090,  1091,  1097,
-    1098,  1099,  1100,  1101,  1107,  1108,  1111,  1114,  1115,  1116,
-    1117,  1118,  1121,  1122,  1135,  1139,  1144,  1149,  1154,  1158,
-    1159,  1162,  1168,  1175,  1181,  1188,  1194,  1205,  1216,  1245,
-    1285,  1310,  1328,  1337,  1340,  1348,  1352,  1356,  1363,  1369,
-    1374,  1386,  1389,  1398,  1399,  1405,  1406,  1412,  1416,  1422,
-    1423,  1429,  1433,  1439,  1462,  1467,  1473,  1479,  1486,  1495,
-    1504,  1519,  1525,  1530,  1534,  1541,  1554,  1555,  1561,  1567,
-    1570,  1574,  1580,  1583,  1592,  1595,  1596,  1600,  1601,  1607,
-    1608,  1609,  1610,  1611,  1613,  1612,  1627,  1632,  1636,  1640,
-    1644,  1648,  1653,  1672,  1678,  1686,  1690,  1696,  1700,  1706,
-    1710,  1716,  1720,  1729,  1733,  1737,  1741,  1747,  1750,  1758,
-    1759,  1761,  1762,  1765,  1768,  1771,  1774,  1777,  1780,  1783,
-    1786,  1789,  1792,  1795,  1798,  1801,  1804,  1810,  1814,  1818,
-    1822,  1826,  1830,  1850,  1857,  1868,  1869,  1870,  1873,  1874,
-    1877,  1881,  1891,  1895,  1899,  1903,  1907,  1911,  1915,  1921,
-    1927,  1935,  1943,  1949,  1956,  1972,  1990,  1994,  2000,  2003,
-    2006,  2010,  2020,  2024,  2039,  2047,  2048,  2060,  2061,  2064,
-    2068,  2074,  2078,  2084,  2088
+     661,   651,   682,   681,   694,   697,   703,   706,   718,   722,
+     717,   740,   739,   755,   756,   760,   764,   768,   772,   776,
+     780,   784,   788,   792,   796,   800,   804,   808,   812,   816,
+     820,   824,   828,   833,   839,   840,   844,   855,   859,   863,
+     867,   872,   876,   886,   890,   895,   903,   907,   908,   919,
+     923,   927,   931,   935,   936,   942,   949,   955,   962,   965,
+     972,   978,   979,   986,   987,  1005,  1006,  1009,  1012,  1016,
+    1027,  1036,  1042,  1045,  1048,  1055,  1056,  1062,  1077,  1085,
+    1097,  1102,  1108,  1109,  1110,  1111,  1112,  1113,  1119,  1120,
+    1121,  1122,  1128,  1129,  1130,  1131,  1132,  1138,  1139,  1142,
+    1145,  1146,  1147,  1148,  1149,  1152,  1153,  1166,  1170,  1175,
+    1180,  1185,  1189,  1190,  1193,  1199,  1206,  1212,  1219,  1225,
+    1236,  1247,  1276,  1316,  1341,  1359,  1368,  1371,  1379,  1383,
+    1387,  1394,  1400,  1405,  1417,  1420,  1429,  1430,  1436,  1437,
+    1443,  1447,  1453,  1454,  1460,  1464,  1470,  1493,  1498,  1504,
+    1510,  1517,  1526,  1535,  1550,  1556,  1561,  1565,  1572,  1585,
+    1586,  1592,  1598,  1601,  1605,  1611,  1614,  1623,  1626,  1627,
+    1631,  1632,  1638,  1639,  1640,  1641,  1642,  1644,  1643,  1658,
+    1663,  1667,  1671,  1675,  1679,  1684,  1703,  1709,  1717,  1721,
+    1727,  1731,  1737,  1741,  1747,  1751,  1760,  1764,  1768,  1772,
+    1778,  1781,  1789,  1790,  1792,  1793,  1796,  1799,  1802,  1805,
+    1808,  1811,  1814,  1817,  1820,  1823,  1826,  1829,  1832,  1835,
+    1841,  1845,  1849,  1853,  1857,  1861,  1881,  1888,  1899,  1900,
+    1901,  1904,  1905,  1908,  1912,  1922,  1926,  1930,  1934,  1938,
+    1942,  1946,  1952,  1958,  1966,  1974,  1980,  1987,  2003,  2021,
+    2025,  2031,  2034,  2037,  2041,  2051,  2055,  2070,  2078,  2079,
+    2091,  2092,  2095,  2099,  2105,  2109,  2115,  2119
 };
 #endif
 
-#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
+#if YYDEBUG || YYERROR_VERBOSE || 1
 /* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
    First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
 const char *yytname[] =
@@ -707,36 +744,36 @@ const char *yytname[] =
   "'/'", "'%'", "'&'", "NotPackage", "NotParen", "'('", "')'",
   "PreferToRightParen", "';'", "'.'", "'$'", "'='", "':'", "'{'", "'}'",
   "'!'", "'~'", "'['", "']'", "'?'", "'@'", "','", "$accept", "file",
-  "package", "loadsys", "@1", "imports", "import", "import_stmt",
+  "package", "loadsys", "$@1", "imports", "import", "import_stmt",
   "import_stmt_list", "import_here", "import_package", "import_safety",
-  "import_there", "@2", "xdcl", "common_dcl", "lconst", "vardcl",
+  "import_there", "$@2", "xdcl", "common_dcl", "lconst", "vardcl",
   "constdcl", "constdcl1", "typedclname", "typedcl", "simple_stmt", "case",
-  "compound_stmt", "@3", "caseblock", "@4", "caseblock_list", "loop_body",
-  "@5", "range_stmt", "for_header", "for_body", "for_stmt", "@6",
-  "if_header", "if_stmt", "@7", "@8", "@9", "else", "switch_stmt", "@10",
-  "@11", "select_stmt", "@12", "expr", "uexpr", "pseudocall",
-  "pexpr_no_paren", "start_complit", "keyval", "complitexpr", "pexpr",
-  "expr_or_type", "name_or_type", "lbrace", "new_name", "dcl_name",
-  "onew_name", "sym", "hidden_importsym", "name", "labelname", "dotdotdot",
-  "ntype", "non_expr_type", "non_recvchantype", "convtype", "comptype",
-  "fnret_type", "dotname", "othertype", "ptrtype", "recvchantype",
-  "structtype", "interfacetype", "xfndcl", "fndcl", "hidden_fndcl",
-  "fntype", "fnbody", "fnres", "fnlitdcl", "fnliteral", "xdcl_list",
-  "vardcl_list", "constdcl_list", "typedcl_list", "structdcl_list",
-  "interfacedcl_list", "structdcl", "packname", "embed", "interfacedcl",
-  "indcl", "arg_type", "arg_type_list", "oarg_type_list_ocomma", "stmt",
-  "non_dcl_stmt", "@13", "stmt_list", "new_name_list", "dcl_name_list",
-  "expr_list", "expr_or_type_list", "keyval_list", "braced_keyval_list",
-  "osemi", "ocomma", "oexpr", "oexpr_list", "osimple_stmt",
-  "ohidden_funarg_list", "ohidden_structdcl_list",
-  "ohidden_interfacedcl_list", "oliteral", "hidden_import",
-  "hidden_pkg_importsym", "hidden_pkgtype", "hidden_type",
+  "compound_stmt", "$@3", "caseblock", "$@4", "caseblock_list",
+  "loop_body", "$@5", "range_stmt", "for_header", "for_body", "for_stmt",
+  "$@6", "if_header", "if_stmt", "$@7", "$@8", "$@9", "elseif", "$@10",
+  "elseif_list", "else", "switch_stmt", "$@11", "$@12", "select_stmt",
+  "$@13", "expr", "uexpr", "pseudocall", "pexpr_no_paren", "start_complit",
+  "keyval", "complitexpr", "pexpr", "expr_or_type", "name_or_type",
+  "lbrace", "new_name", "dcl_name", "onew_name", "sym", "hidden_importsym",
+  "name", "labelname", "dotdotdot", "ntype", "non_expr_type",
+  "non_recvchantype", "convtype", "comptype", "fnret_type", "dotname",
+  "othertype", "ptrtype", "recvchantype", "structtype", "interfacetype",
+  "xfndcl", "fndcl", "hidden_fndcl", "fntype", "fnbody", "fnres",
+  "fnlitdcl", "fnliteral", "xdcl_list", "vardcl_list", "constdcl_list",
+  "typedcl_list", "structdcl_list", "interfacedcl_list", "structdcl",
+  "packname", "embed", "interfacedcl", "indcl", "arg_type",
+  "arg_type_list", "oarg_type_list_ocomma", "stmt", "non_dcl_stmt", "$@14",
+  "stmt_list", "new_name_list", "dcl_name_list", "expr_list",
+  "expr_or_type_list", "keyval_list", "braced_keyval_list", "osemi",
+  "ocomma", "oexpr", "oexpr_list", "osimple_stmt", "ohidden_funarg_list",
+  "ohidden_structdcl_list", "ohidden_interfacedcl_list", "oliteral",
+  "hidden_import", "hidden_pkg_importsym", "hidden_pkgtype", "hidden_type",
   "hidden_type_non_recv_chan", "hidden_type_misc", "hidden_type_recv_chan",
   "hidden_type_func", "hidden_funarg", "hidden_structdcl",
   "hidden_interfacedcl", "ohidden_funres", "hidden_funres",
   "hidden_literal", "hidden_constant", "hidden_import_list",
   "hidden_funarg_list", "hidden_structdcl_list",
-  "hidden_interfacedcl_list", 0
+  "hidden_interfacedcl_list", YY_NULL
 };
 #endif
 
@@ -767,33 +804,33 @@ static const yytype_uint8 yyr1[] =
       98,    98,    98,    98,    98,    98,    99,    99,    99,    99,
      101,   100,   103,   102,   104,   104,   106,   105,   107,   107,
      108,   108,   108,   109,   111,   110,   112,   112,   114,   115,
-     116,   113,   117,   117,   117,   119,   120,   118,   122,   121,
-     123,   123,   123,   123,   123,   123,   123,   123,   123,   123,
-     123,   123,   123,   123,   123,   123,   123,   123,   123,   123,
-     123,   124,   124,   124,   124,   124,   124,   124,   124,   124,
-     125,   125,   125,   126,   126,   126,   126,   126,   126,   126,
-     126,   126,   126,   126,   126,   126,   127,   128,   129,   129,
-     130,   130,   131,   131,   132,   133,   133,   134,   135,   136,
-     136,   137,   137,   137,   138,   139,   140,   141,   141,   142,
-     142,   142,   142,   142,   142,   143,   143,   143,   143,   144,
-     144,   144,   144,   144,   145,   145,   146,   147,   147,   147,
-     147,   147,   148,   148,   149,   149,   149,   149,   149,   149,
-     149,   150,   151,   152,   152,   153,   153,   154,   155,   155,
-     156,   156,   157,   158,   158,   159,   159,   159,   160,   161,
-     161,   162,   162,   163,   163,   164,   164,   165,   165,   166,
-     166,   167,   167,   168,   168,   168,   168,   168,   168,   169,
-     169,   170,   171,   171,   171,   172,   173,   173,   173,   173,
-     174,   174,   175,   175,   176,   176,   176,   176,   176,   177,
-     177,   177,   177,   177,   178,   177,   177,   177,   177,   177,
-     177,   177,   177,   179,   179,   180,   180,   181,   181,   182,
-     182,   183,   183,   184,   184,   184,   184,   185,   185,   186,
-     186,   187,   187,   188,   188,   189,   189,   190,   190,   191,
-     191,   192,   192,   193,   193,   194,   194,   195,   195,   195,
-     195,   195,   195,   196,   197,   198,   198,   198,   199,   199,
-     200,   200,   200,   200,   200,   200,   200,   200,   200,   200,
-     200,   201,   202,   203,   203,   204,   205,   205,   206,   206,
-     207,   207,   208,   208,   208,   209,   209,   210,   210,   211,
-     211,   212,   212,   213,   213
+     116,   113,   118,   117,   119,   119,   120,   120,   122,   123,
+     121,   125,   124,   126,   126,   126,   126,   126,   126,   126,
+     126,   126,   126,   126,   126,   126,   126,   126,   126,   126,
+     126,   126,   126,   126,   127,   127,   127,   127,   127,   127,
+     127,   127,   127,   128,   128,   128,   129,   129,   129,   129,
+     129,   129,   129,   129,   129,   129,   129,   129,   129,   130,
+     131,   132,   132,   133,   133,   134,   134,   135,   136,   136,
+     137,   138,   139,   139,   140,   140,   140,   141,   142,   143,
+     144,   144,   145,   145,   145,   145,   145,   145,   146,   146,
+     146,   146,   147,   147,   147,   147,   147,   148,   148,   149,
+     150,   150,   150,   150,   150,   151,   151,   152,   152,   152,
+     152,   152,   152,   152,   153,   154,   155,   155,   156,   156,
+     157,   158,   158,   159,   159,   160,   161,   161,   162,   162,
+     162,   163,   164,   164,   165,   165,   166,   166,   167,   167,
+     168,   168,   169,   169,   170,   170,   171,   171,   171,   171,
+     171,   171,   172,   172,   173,   174,   174,   174,   175,   176,
+     176,   176,   176,   177,   177,   178,   178,   179,   179,   179,
+     179,   179,   180,   180,   180,   180,   180,   181,   180,   180,
+     180,   180,   180,   180,   180,   180,   182,   182,   183,   183,
+     184,   184,   185,   185,   186,   186,   187,   187,   187,   187,
+     188,   188,   189,   189,   190,   190,   191,   191,   192,   192,
+     193,   193,   194,   194,   195,   195,   196,   196,   197,   197,
+     198,   198,   198,   198,   198,   198,   199,   200,   201,   201,
+     201,   202,   202,   203,   203,   203,   203,   203,   203,   203,
+     203,   203,   203,   203,   204,   205,   206,   206,   207,   208,
+     208,   209,   209,   210,   210,   211,   211,   211,   212,   212,
+     213,   213,   214,   214,   215,   215,   216,   216
 };
 
 /* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
@@ -807,106 +844,106 @@ static const yytype_uint8 yyr2[] =
        1,     3,     3,     3,     2,     2,     3,     5,     5,     2,
        0,     4,     0,     3,     0,     2,     0,     4,     4,     4,
        5,     1,     1,     2,     0,     3,     1,     3,     0,     0,
-       0,     7,     0,     2,     2,     0,     0,     7,     0,     5,
-       1,     3,     3,     3,     3,     3,     3,     3,     3,     3,
+       0,     8,     0,     5,     0,     2,     0,     2,     0,     0,
+       7,     0,     5,     1,     3,     3,     3,     3,     3,     3,
        3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
-       3,     1,     2,     2,     2,     2,     2,     2,     2,     2,
-       3,     5,     6,     1,     1,     3,     5,     5,     4,     6,
-       1,     4,     5,     5,     7,     1,     0,     3,     1,     4,
-       1,     3,     1,     1,     1,     1,     1,     1,     1,     0,
-       1,     1,     1,     1,     4,     1,     1,     1,     2,     1,
-       1,     1,     1,     1,     3,     1,     1,     1,     2,     1,
-       1,     1,     1,     3,     1,     1,     1,     1,     1,     1,
-       1,     1,     1,     3,     4,     4,     2,     3,     5,     1,
-       1,     2,     3,     5,     3,     5,     3,     3,     5,     8,
-       5,     8,     5,     0,     3,     0,     1,     3,     1,     4,
-       2,     0,     3,     1,     3,     1,     3,     1,     3,     1,
-       3,     1,     3,     3,     2,     4,     3,     5,     5,     1,
-       3,     1,     2,     1,     3,     4,     1,     2,     2,     1,
-       1,     3,     0,     2,     0,     1,     1,     1,     1,     1,
-       1,     1,     1,     1,     0,     4,     1,     2,     2,     2,
-       2,     2,     2,     1,     3,     1,     3,     1,     3,     1,
-       3,     1,     3,     1,     1,     3,     3,     0,     2,     0,
-       1,     0,     1,     0,     1,     0,     1,     0,     1,     0,
-       1,     0,     1,     0,     1,     0,     1,     4,     4,     5,
-       6,     4,     4,     1,     1,     1,     1,     1,     1,     1,
-       1,     1,     3,     4,     5,     4,     4,     2,     2,     4,
-       3,     3,     5,     3,     4,     3,     5,     1,     0,     1,
-       3,     1,     1,     2,     1,     1,     5,     0,     2,     1,
-       3,     1,     3,     1,     3
+       3,     3,     3,     3,     1,     2,     2,     2,     2,     2,
+       2,     2,     2,     3,     5,     6,     1,     1,     3,     5,
+       5,     4,     6,     1,     4,     5,     5,     7,     1,     0,
+       3,     1,     4,     1,     3,     1,     1,     1,     1,     1,
+       1,     1,     0,     1,     1,     1,     1,     4,     1,     1,
+       1,     2,     1,     1,     1,     1,     1,     3,     1,     1,
+       1,     2,     1,     1,     1,     1,     3,     1,     1,     1,
+       1,     1,     1,     1,     1,     1,     3,     4,     4,     2,
+       3,     5,     1,     1,     2,     3,     5,     3,     5,     3,
+       3,     5,     8,     5,     8,     5,     0,     3,     0,     1,
+       3,     1,     4,     2,     0,     3,     1,     3,     1,     3,
+       1,     3,     1,     3,     1,     3,     3,     2,     4,     3,
+       5,     5,     1,     3,     1,     2,     1,     3,     4,     1,
+       2,     2,     1,     1,     3,     0,     2,     0,     1,     1,
+       1,     1,     1,     1,     1,     1,     1,     0,     4,     1,
+       2,     2,     2,     2,     2,     2,     1,     3,     1,     3,
+       1,     3,     1,     3,     1,     3,     1,     1,     3,     3,
+       0,     2,     0,     1,     0,     1,     0,     1,     0,     1,
+       0,     1,     0,     1,     0,     1,     0,     1,     0,     1,
+       4,     4,     5,     6,     4,     4,     1,     1,     1,     1,
+       1,     1,     1,     1,     1,     3,     4,     5,     4,     4,
+       2,     2,     4,     3,     3,     5,     3,     4,     3,     5,
+       1,     0,     1,     3,     1,     1,     2,     1,     1,     5,
+       0,     2,     1,     3,     1,     3,     1,     3
 };
 
-/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
-   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
+/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
+   Performed when YYTABLE doesn't specify something else to do.  Zero
    means the default is an error.  */
 static const yytype_uint16 yydefact[] =
 {
-       5,     0,     3,     0,     1,     0,     7,     0,    22,   151,
-     153,     0,     0,   152,   211,    20,     6,   337,     0,     4,
+       5,     0,     3,     0,     1,     0,     7,     0,    22,   154,
+     156,     0,     0,   155,   214,    20,     6,   340,     0,     4,
        0,     0,     0,    21,     0,     0,     0,    16,     0,     0,
-       9,    22,     0,     8,    28,   123,   149,     0,    39,   149,
-       0,   256,    74,     0,     0,     0,    78,     0,     0,   285,
-      88,     0,    85,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   283,     0,    25,     0,   249,   250,
-     253,   251,   252,    50,    90,   130,   140,   111,   156,   155,
-     124,     0,     0,     0,   176,   189,   190,    26,   208,     0,
-     135,    27,     0,    19,     0,     0,     0,     0,     0,     0,
-     338,   154,    11,    14,   279,    18,    22,    13,    17,   150,
-     257,   147,     0,     0,     0,     0,   155,   182,   186,   172,
-     170,   171,   169,   258,   130,     0,   287,   242,     0,   203,
-     130,   261,   287,   145,   146,     0,     0,   269,   286,   262,
-       0,     0,   287,     0,     0,    36,    48,     0,    29,   267,
-     148,     0,   119,   114,   115,   118,   112,   113,     0,     0,
-     142,     0,   143,   167,   165,   166,   116,   117,     0,   284,
-       0,   212,     0,    32,     0,     0,     0,     0,     0,    55,
+       9,    22,     0,     8,    28,   126,   152,     0,    39,   152,
+       0,   259,    74,     0,     0,     0,    78,     0,     0,   288,
+      91,     0,    88,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   286,     0,    25,     0,   252,   253,
+     256,   254,   255,    50,    93,   133,   143,   114,   159,   158,
+     127,     0,     0,     0,   179,   192,   193,    26,   211,     0,
+     138,    27,     0,    19,     0,     0,     0,     0,     0,     0,
+     341,   157,    11,    14,   282,    18,    22,    13,    17,   153,
+     260,   150,     0,     0,     0,     0,   158,   185,   189,   175,
+     173,   174,   172,   261,   133,     0,   290,   245,     0,   206,
+     133,   264,   290,   148,   149,     0,     0,   272,   289,   265,
+       0,     0,   290,     0,     0,    36,    48,     0,    29,   270,
+     151,     0,   122,   117,   118,   121,   115,   116,     0,     0,
+     145,     0,   146,   170,   168,   169,   119,   120,     0,   287,
+       0,   215,     0,    32,     0,     0,     0,     0,     0,    55,
        0,     0,     0,    54,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   136,     0,
-       0,   283,   254,     0,   136,   210,     0,     0,     0,     0,
-     303,     0,     0,   203,     0,     0,   304,     0,     0,    23,
-     280,     0,    12,   242,     0,     0,   187,   163,   161,   162,
-     159,   160,   191,     0,     0,   288,    72,     0,    75,     0,
-      71,   157,   236,   155,   239,   144,   240,   281,     0,   242,
-       0,   197,    79,    76,   151,     0,   196,     0,   279,   233,
-     221,     0,    64,     0,     0,   194,   265,   279,   219,   231,
-     295,     0,    86,    38,   217,   279,    49,    31,   213,   279,
-       0,     0,    40,     0,   168,   141,     0,     0,    35,   279,
-       0,     0,    51,    92,   107,   110,    93,    97,    98,    96,
-     108,    95,    94,    91,   109,    99,   100,   101,   102,   103,
-     104,   105,   106,   277,   120,   271,   281,     0,   125,   284,
-       0,     0,     0,   277,   248,    60,   246,   245,   263,   247,
-       0,    53,    52,   270,     0,     0,     0,     0,   311,     0,
-       0,     0,     0,     0,   310,     0,   305,   306,   307,     0,
-     339,     0,     0,   289,     0,     0,     0,    15,    10,     0,
-       0,     0,   173,   183,    66,    73,     0,     0,   287,   158,
-     237,   238,   282,   243,   205,     0,     0,     0,   287,     0,
-     229,     0,   242,   232,   280,     0,     0,     0,     0,   295,
-       0,     0,   280,     0,   296,   224,     0,   295,     0,   280,
-       0,   280,     0,    42,   268,     0,     0,     0,   192,   163,
-     161,   162,   160,   136,   185,   184,   280,     0,    44,     0,
-     136,   138,   273,   274,   281,     0,   281,   282,     0,     0,
-       0,   128,   283,   255,   131,     0,     0,     0,   209,     0,
-       0,   318,   308,   309,   289,   293,     0,   291,     0,   317,
-     332,     0,     0,   334,   335,     0,     0,     0,     0,     0,
-     295,     0,     0,   302,     0,   290,   297,   301,   298,   205,
-     164,     0,     0,     0,     0,   241,   242,   155,   206,   181,
-     179,   180,   177,   178,   202,   205,   204,    80,    77,   230,
-     234,     0,   222,   195,   188,     0,     0,    89,    62,    65,
-       0,   226,     0,   295,   220,   193,   266,   223,    64,   218,
-      37,   214,    30,    41,     0,   277,    45,   215,   279,    47,
-      33,    43,   277,     0,   282,   278,   133,   282,     0,   272,
-     121,   127,   126,     0,   132,     0,   264,   320,     0,     0,
-     311,     0,   310,     0,   327,   343,   294,     0,     0,     0,
-     341,   292,   321,   333,     0,   299,     0,   312,     0,   295,
-     323,     0,   340,   328,     0,    69,    68,   287,     0,   242,
-     198,    82,   205,     0,    59,     0,   295,   295,   225,     0,
-     164,     0,   280,     0,    46,     0,   138,   137,   275,   276,
-     122,   129,    61,   319,   328,   289,   316,     0,     0,   295,
-     315,     0,     0,   313,   300,   324,   289,   289,   331,   200,
-     329,    67,    70,   207,     0,     0,    81,   235,     0,     0,
-      56,     0,    63,   228,   227,    87,   134,   216,    34,   139,
-     322,     0,   344,   314,   325,   342,     0,     0,     0,   205,
-      84,    83,     0,     0,   328,   336,   328,   330,   199,    58,
-      57,   326,   201
+       0,     0,     0,     0,     0,     0,     0,     0,   139,     0,
+       0,   286,   257,     0,   139,   213,     0,     0,     0,     0,
+     306,     0,     0,   206,     0,     0,   307,     0,     0,    23,
+     283,     0,    12,   245,     0,     0,   190,   166,   164,   165,
+     162,   163,   194,     0,     0,   291,    72,     0,    75,     0,
+      71,   160,   239,   158,   242,   147,   243,   284,     0,   245,
+       0,   200,    79,    76,   154,     0,   199,     0,   282,   236,
+     224,     0,    64,     0,     0,   197,   268,   282,   222,   234,
+     298,     0,    89,    38,   220,   282,    49,    31,   216,   282,
+       0,     0,    40,     0,   171,   144,     0,     0,    35,   282,
+       0,     0,    51,    95,   110,   113,    96,   100,   101,    99,
+     111,    98,    97,    94,   112,   102,   103,   104,   105,   106,
+     107,   108,   109,   280,   123,   274,   284,     0,   128,   287,
+       0,     0,     0,   280,   251,    60,   249,   248,   266,   250,
+       0,    53,    52,   273,     0,     0,     0,     0,   314,     0,
+       0,     0,     0,     0,   313,     0,   308,   309,   310,     0,
+     342,     0,     0,   292,     0,     0,     0,    15,    10,     0,
+       0,     0,   176,   186,    66,    73,     0,     0,   290,   161,
+     240,   241,   285,   246,   208,     0,     0,     0,   290,     0,
+     232,     0,   245,   235,   283,     0,     0,     0,     0,   298,
+       0,     0,   283,     0,   299,   227,     0,   298,     0,   283,
+       0,   283,     0,    42,   271,     0,     0,     0,   195,   166,
+     164,   165,   163,   139,   188,   187,   283,     0,    44,     0,
+     139,   141,   276,   277,   284,     0,   284,   285,     0,     0,
+       0,   131,   286,   258,   134,     0,     0,     0,   212,     0,
+       0,   321,   311,   312,   292,   296,     0,   294,     0,   320,
+     335,     0,     0,   337,   338,     0,     0,     0,     0,     0,
+     298,     0,     0,   305,     0,   293,   300,   304,   301,   208,
+     167,     0,     0,     0,     0,   244,   245,   158,   209,   184,
+     182,   183,   180,   181,   205,   208,   207,    80,    77,   233,
+     237,     0,   225,   198,   191,     0,     0,    92,    62,    65,
+       0,   229,     0,   298,   223,   196,   269,   226,    64,   221,
+      37,   217,    30,    41,     0,   280,    45,   218,   282,    47,
+      33,    43,   280,     0,   285,   281,   136,   285,     0,   275,
+     124,   130,   129,     0,   135,     0,   267,   323,     0,     0,
+     314,     0,   313,     0,   330,   346,   297,     0,     0,     0,
+     344,   295,   324,   336,     0,   302,     0,   315,     0,   298,
+     326,     0,   343,   331,     0,    69,    68,   290,     0,   245,
+     201,    84,   208,     0,    59,     0,   298,   298,   228,     0,
+     167,     0,   283,     0,    46,     0,   141,   140,   278,   279,
+     125,   132,    61,   322,   331,   292,   319,     0,     0,   298,
+     318,     0,     0,   316,   303,   327,   292,   292,   334,   203,
+     332,    67,    70,   210,     0,    86,   238,     0,     0,    56,
+       0,    63,   231,   230,    90,   137,   219,    34,   142,   325,
+       0,   347,   317,   328,   345,     0,     0,     0,   208,     0,
+      85,    81,     0,     0,   331,   339,   331,   333,   202,    82,
+      87,    58,    57,   329,   204,   290,     0,    83
 };
 
 /* YYDEFGOTO[NTERM-NUM].  */
@@ -916,541 +953,538 @@ static const yytype_int16 yydefgoto[] =
        8,    24,    16,    17,    65,   326,    67,   148,   516,   517,
      144,   145,    68,   498,   327,   436,   499,   575,   387,   365,
      471,   236,   237,   238,    69,   126,   252,    70,   132,   377,
-     571,   616,    71,   142,   398,    72,   140,    73,    74,    75,
-      76,   313,   422,   423,    77,   315,   242,   135,    78,   149,
-     110,   116,    13,    80,    81,   244,   245,   162,   118,    82,
-      83,   478,   227,    84,   229,   230,    85,    86,    87,   129,
-     213,    88,   251,   484,    89,    90,    22,   279,   518,   275,
-     267,   258,   268,   269,   270,   260,   383,   246,   247,   248,
-     328,   329,   321,   330,   271,   151,    92,   316,   424,   425,
-     221,   373,   170,   139,   253,   464,   549,   543,   395,   100,
-     211,   217,   608,   441,   346,   347,   348,   350,   550,   545,
-     609,   610,   454,   455,    25,   465,   551,   546
+     571,   640,   655,   615,   641,    71,   142,   398,    72,   140,
+      73,    74,    75,    76,   313,   422,   423,    77,   315,   242,
+     135,    78,   149,   110,   116,    13,    80,    81,   244,   245,
+     162,   118,    82,    83,   478,   227,    84,   229,   230,    85,
+      86,    87,   129,   213,    88,   251,   484,    89,    90,    22,
+     279,   518,   275,   267,   258,   268,   269,   270,   260,   383,
+     246,   247,   248,   328,   329,   321,   330,   271,   151,    92,
+     316,   424,   425,   221,   373,   170,   139,   253,   464,   549,
+     543,   395,   100,   211,   217,   608,   441,   346,   347,   348,
+     350,   550,   545,   609,   610,   454,   455,    25,   465,   551,
+     546
 };
 
 /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
    STATE-NUM.  */
-#define YYPACT_NINF -549
+#define YYPACT_NINF -459
 static const yytype_int16 yypact[] =
 {
-    -549,    63,    58,    91,  -549,   227,  -549,    44,  -549,  -549,
-    -549,    67,    57,  -549,   111,   135,  -549,  -549,   123,  -549,
-      50,   151,   904,  -549,   157,   463,   149,  -549,    54,   219,
-    -549,    91,   230,  -549,  -549,  -549,   227,  1654,  -549,   227,
-     288,  -549,  -549,   316,   288,   227,  -549,    21,   167,  1466,
-    -549,    21,  -549,   327,   333,  1466,  1466,  1466,  1466,  1466,
-    1466,  1509,  1466,  1466,   985,   193,  -549,   419,  -549,  -549,
-    -549,  -549,  -549,   796,  -549,  -549,   176,     1,  -549,   194,
-    -549,   196,   206,    21,   215,  -549,  -549,  -549,   216,    51,
-    -549,  -549,    45,  -549,   203,     7,   256,   203,   203,   231,
-    -549,  -549,  -549,  -549,   244,  -549,  -549,  -549,  -549,  -549,
-    -549,  -549,   234,  1681,  1681,  1681,  -549,   250,  -549,  -549,
-    -549,  -549,  -549,  -549,   168,     1,  1466,  1628,   260,   264,
-     266,  -549,  1466,  -549,  -549,   110,  1681,  1993,   257,  -549,
-     300,   229,  1466,   451,  1681,  -549,  -549,   461,  -549,  -549,
-    -549,   662,  -549,  -549,  -549,  -549,  -549,  -549,  1552,  1509,
-    1993,   263,  -549,    10,  -549,   165,  -549,  -549,   270,  1993,
-     274,  -549,   485,  -549,  1595,  1466,  1466,  1466,  1466,  -549,
-    1466,  1466,  1466,  -549,  1466,  1466,  1466,  1466,  1466,  1466,
-    1466,  1466,  1466,  1466,  1466,  1466,  1466,  1466,  -549,  1203,
-     506,  1466,  -549,  1466,  -549,  -549,  1134,  1466,  1466,  1466,
-    -549,   673,   227,   264,   293,   355,  -549,  1214,  1214,  -549,
-      76,   303,  -549,  1628,   357,  1681,  -549,  -549,  -549,  -549,
-    -549,  -549,  -549,   328,   227,  -549,  -549,   358,  -549,    68,
-     337,  1681,  -549,  1628,  -549,  -549,  -549,   329,   348,  1628,
-    1134,  -549,  -549,   351,   128,   390,  -549,   359,   354,  -549,
-    -549,   349,  -549,    30,    34,  -549,  -549,   366,  -549,  -549,
-     427,  1620,  -549,  -549,  -549,   371,  -549,  -549,  -549,   373,
-    1466,   227,   376,  1707,  -549,   391,  1681,  1681,  -549,   400,
-    1466,   398,  1993,  1839,  -549,  2017,   755,   755,   755,   755,
-    -549,   755,   755,  2041,  -549,   582,   582,   582,   582,  -549,
-    -549,  -549,  -549,  1258,  -549,  -549,    33,  1313,  -549,  1866,
-     356,  1060,  1968,  1258,  -549,  -549,  -549,  -549,  -549,  -549,
-       3,   257,   257,  1993,  1748,   405,   402,   403,  -549,   412,
-     475,  1214,    52,    29,  -549,   421,  -549,  -549,  -549,  1774,
-    -549,    85,   425,   227,   426,   429,   434,  -549,  -549,   438,
-    1681,   439,  -549,  -549,  -549,  -549,  1368,  1423,  1466,  -549,
-    -549,  -549,  1628,  -549,  1715,   440,    86,   358,  1466,   227,
-     441,   443,  1628,  -549,   508,   437,  1681,    78,   390,   427,
-     390,   446,   280,   442,  -549,  -549,   227,   427,   454,   227,
-     448,   227,   453,   257,  -549,  1466,  1740,  1681,  -549,   181,
-     248,   338,   360,  -549,  -549,  -549,   227,   455,   257,  1466,
-    -549,  1896,  -549,  -549,   447,   450,   456,  1509,   457,   466,
-     469,  -549,  1466,  -549,  -549,   468,  1134,  1060,  -549,  1214,
-     501,  -549,  -549,  -549,   227,  1801,  1214,   227,  1214,  -549,
-    -549,   537,   161,  -549,  -549,   480,   488,  1214,    52,  1214,
-     427,   227,   227,  -549,   503,   486,  -549,  -549,  -549,  1715,
-    -549,  1134,  1466,  1466,   514,  -549,  1628,   509,  -549,  -549,
-    -549,  -549,  -549,  -549,  -549,  1715,  -549,  -549,  -549,  -549,
-    -549,   518,  -549,  -549,  -549,  1509,   517,  -549,  -549,  -549,
-     525,  -549,   528,   427,  -549,  -549,  -549,  -549,  -549,  -549,
-    -549,  -549,  -549,   257,   531,  1258,  -549,  -549,   532,  1595,
-    -549,   257,  1258,  1258,  1258,  -549,  -549,  -549,   533,  -549,
-    -549,  -549,  -549,   526,  -549,   109,  -549,  -549,   539,   540,
-     545,   546,   550,   543,  -549,  -549,   551,   547,  1214,   552,
-    -549,   556,  -549,  -549,   573,  -549,  1214,  -549,   561,   427,
-    -549,   565,  -549,  1827,   131,  1993,  1993,  1466,   567,  1628,
-    -549,   611,  1715,    28,  -549,  1060,   427,   427,  -549,   100,
-     367,   563,   227,   574,   398,   571,  1993,  -549,  -549,  -549,
-    -549,  -549,  -549,  -549,  1827,   227,  -549,  1801,  1214,   427,
-    -549,   227,   161,  -549,  -549,  -549,   227,   227,  -549,  -549,
-    -549,  -549,  -549,  -549,   581,    15,  -549,  -549,  1466,  1466,
-    -549,  1509,   580,  -549,  -549,  -549,  -549,  -549,  -549,  -549,
-    -549,   584,  -549,  -549,  -549,  -549,   585,   586,   587,  1715,
-    -549,  -549,  1920,  1944,  1827,  -549,  1827,  -549,  -549,  -549,
-    -549,  -549,  -549
+    -459,    55,    46,    53,  -459,   181,  -459,    44,  -459,  -459,
+    -459,    91,    20,  -459,    75,   122,  -459,  -459,    97,  -459,
+     472,   124,  1062,  -459,   129,   276,   153,  -459,   228,   190,
+    -459,    53,   200,  -459,  -459,  -459,   181,  1638,  -459,   181,
+      66,  -459,  -459,   197,    66,   181,  -459,    30,   142,  1475,
+    -459,    30,  -459,   444,   467,  1475,  1475,  1475,  1475,  1475,
+    1475,  1518,  1475,  1475,   638,   163,  -459,   485,  -459,  -459,
+    -459,  -459,  -459,   830,  -459,  -459,   172,   240,  -459,   187,
+    -459,   192,   201,    30,   213,  -459,  -459,  -459,   218,    65,
+    -459,  -459,    40,  -459,   204,     5,   271,   204,   204,   241,
+    -459,  -459,  -459,  -459,   238,  -459,  -459,  -459,  -459,  -459,
+    -459,  -459,   251,  1663,  1663,  1663,  -459,   254,  -459,  -459,
+    -459,  -459,  -459,  -459,    79,   240,  1475,  1630,   261,   246,
+     236,  -459,  1475,  -459,  -459,   413,  1663,   804,   248,  -459,
+     301,   662,  1475,   508,  1663,  -459,  -459,   551,  -459,  -459,
+    -459,   477,  -459,  -459,  -459,  -459,  -459,  -459,  1561,  1518,
+     804,   278,  -459,    17,  -459,    42,  -459,  -459,   270,   804,
+     279,  -459,   561,  -459,  1604,  1475,  1475,  1475,  1475,  -459,
+    1475,  1475,  1475,  -459,  1475,  1475,  1475,  1475,  1475,  1475,
+    1475,  1475,  1475,  1475,  1475,  1475,  1475,  1475,  -459,   946,
+     564,  1475,  -459,  1475,  -459,  -459,  1212,  1475,  1475,  1475,
+    -459,   335,   181,   246,   295,   367,  -459,  1832,  1832,  -459,
+      29,   322,  -459,  1630,   376,  1663,  -459,  -459,  -459,  -459,
+    -459,  -459,  -459,   332,   181,  -459,  -459,   360,  -459,   106,
+     339,  1663,  -459,  1630,  -459,  -459,  -459,   338,   354,  1630,
+    1212,  -459,  -459,   356,   170,   395,  -459,   362,   361,  -459,
+    -459,   358,  -459,    22,   125,  -459,  -459,   364,  -459,  -459,
+     424,   884,  -459,  -459,  -459,   366,  -459,  -459,  -459,   371,
+    1475,   181,   370,  1697,  -459,   374,  1663,  1663,  -459,   400,
+    1475,   373,   804,  1993,  -459,  1946,   690,   690,   690,   690,
+    -459,   690,   690,  1970,  -459,   751,   751,   751,   751,  -459,
+    -459,  -459,  -459,  1267,  -459,  -459,    52,  1322,  -459,  1843,
+     397,  1138,  1922,  1267,  -459,  -459,  -459,  -459,  -459,  -459,
+      -8,   248,   248,   804,  1755,   405,   416,   417,  -459,   422,
+     487,  1832,   419,    54,  -459,   433,  -459,  -459,  -459,   648,
+    -459,    10,   440,   181,   442,   443,   446,  -459,  -459,   450,
+    1663,   451,  -459,  -459,  -459,  -459,  1377,  1432,  1475,  -459,
+    -459,  -459,  1630,  -459,  1722,   461,   128,   360,  1475,   181,
+     459,   464,  1630,  -459,   580,   457,  1663,    60,   395,   424,
+     395,   469,   259,   475,  -459,  -459,   181,   424,   492,   181,
+     489,   181,   493,   248,  -459,  1475,  1730,  1663,  -459,   309,
+     314,   326,   330,  -459,  -459,  -459,   181,   495,   248,  1475,
+    -459,   991,  -459,  -459,   462,   479,   481,  1518,   500,   503,
+     514,  -459,  1475,  -459,  -459,   510,  1212,  1138,  -459,  1832,
+     540,  -459,  -459,  -459,   181,  1789,  1832,   181,  1832,  -459,
+    -459,   576,   272,  -459,  -459,   518,   511,  1832,   419,  1832,
+     424,   181,   181,  -459,   524,   516,  -459,  -459,  -459,  1722,
+    -459,  1212,  1475,  1475,   532,  -459,  1630,   527,  -459,  -459,
+    -459,  -459,  -459,  -459,  -459,  1722,  -459,  -459,  -459,  -459,
+    -459,   538,  -459,  -459,  -459,  1518,   537,  -459,  -459,  -459,
+     546,  -459,   548,   424,  -459,  -459,  -459,  -459,  -459,  -459,
+    -459,  -459,  -459,   248,   553,  1267,  -459,  -459,   552,  1604,
+    -459,   248,  1267,  1267,  1267,  -459,  -459,  -459,   556,  -459,
+    -459,  -459,  -459,   547,  -459,   146,  -459,  -459,   558,   562,
+     567,   569,   572,   568,  -459,  -459,   578,   571,  1832,   579,
+    -459,   582,  -459,  -459,   599,  -459,  1832,  -459,   588,   424,
+    -459,   592,  -459,  1799,   168,   804,   804,  1475,   597,  1630,
+    -459,  -459,  1722,    68,  -459,  1138,   424,   424,  -459,    86,
+     340,   584,   181,   604,   373,   598,   804,  -459,  -459,  -459,
+    -459,  -459,  -459,  -459,  1799,   181,  -459,  1789,  1832,   424,
+    -459,   181,   272,  -459,  -459,  -459,   181,   181,  -459,  -459,
+    -459,  -459,  -459,  -459,   608,   655,  -459,  1475,  1475,  -459,
+    1518,   611,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
+     615,  -459,  -459,  -459,  -459,   618,   619,   620,  1722,    41,
+    -459,  -459,  1874,  1898,  1799,  -459,  1799,  -459,  -459,  -459,
+    -459,  -459,  -459,  -459,  -459,  1475,   360,  -459
 };
 
 /* YYPGOTO[NTERM-NUM].  */
 static const yytype_int16 yypgoto[] =
 {
-    -549,  -549,  -549,  -549,  -549,  -549,  -549,    -6,  -549,  -549,
-     617,  -549,   -11,  -549,  -549,   627,  -549,  -134,   -25,    71,
-    -549,  -135,  -121,  -549,    35,  -549,  -549,  -549,   146,   279,
-    -549,  -549,  -549,  -549,  -549,  -549,   513,    42,  -549,  -549,
-    -549,  -549,  -549,  -549,  -549,  -549,  -549,   579,   493,   245,
-    -549,  -192,   134,  -318,   278,   -47,   418,     8,   -20,   381,
-     624,    -5,   449,   346,  -549,   422,    95,   510,  -549,  -549,
-    -549,  -549,   -33,    38,   -31,   -18,  -549,  -549,  -549,  -549,
-    -549,    43,   458,  -467,  -549,  -549,  -549,  -549,  -549,  -549,
-    -549,  -549,   276,  -126,  -227,   289,  -549,   302,  -549,  -220,
-    -297,   650,  -549,  -248,  -549,   -66,    18,   183,  -549,  -295,
-    -228,  -289,  -191,  -549,  -119,  -403,  -549,  -549,  -305,  -549,
-     273,  -549,   127,  -549,   342,   240,   353,   226,    88,    96,
-    -548,  -549,  -426,   236,  -549,   487,  -549,  -549
+    -459,  -459,  -459,  -459,  -459,  -459,  -459,    -4,  -459,  -459,
+     651,  -459,     4,  -459,  -459,   661,  -459,  -134,   -41,   103,
+    -459,  -135,  -121,  -459,    50,  -459,  -459,  -459,   184,  -374,
+    -459,  -459,  -459,  -459,  -459,  -459,  -140,  -459,  -459,  -459,
+    -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,  -459,
+     581,    61,   115,  -459,  -186,   169,  -411,   250,   -55,   452,
+     264,    -6,   418,   659,    -5,   382,   346,  -459,   460,    48,
+     541,  -459,  -459,  -459,  -459,   -33,    38,   -18,   -11,  -459,
+    -459,  -459,  -459,  -459,    43,   497,  -458,  -459,  -459,  -459,
+    -459,  -459,  -459,  -459,  -459,   310,  -110,  -205,   321,  -459,
+     341,  -459,  -207,  -293,   692,  -459,  -236,  -459,   -66,   -39,
+     222,  -459,  -311,  -238,  -260,  -192,  -459,  -119,  -397,  -459,
+    -459,  -353,  -459,   307,  -459,   355,  -459,   391,   286,   393,
+     267,   132,   140,  -418,  -459,  -430,   289,  -459,   536,  -459,
+    -459
 };
 
 /* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
    positive, shift that token.  If negative, reduce the rule which
-   number is the opposite.  If zero, do what YYDEFACT says.
-   If YYTABLE_NINF, syntax error.  */
-#define YYTABLE_NINF -270
+   number is the opposite.  If YYTABLE_NINF, syntax error.  */
+#define YYTABLE_NINF -273
 static const yytype_int16 yytable[] =
 {
-      12,   174,   376,   359,   119,   235,   121,   240,   274,   259,
-     320,   235,   323,   278,   161,    32,   109,    79,   570,   109,
-     107,   235,   103,    32,   433,   131,   554,   428,   435,   375,
-     385,   111,   456,   618,   111,    46,   389,   391,   128,   393,
-     111,   539,   173,   164,   426,  -176,   630,   400,   146,   150,
-     207,   402,   205,    27,   380,   450,   133,    27,   380,   141,
-     199,   417,   150,     4,   200,   437,   212,   138,    15,  -175,
-      18,   438,   201,   366,     9,   120,     9,  -176,     9,    27,
-     122,    11,   325,     5,   501,   495,   133,   390,   134,   388,
-     496,   204,   507,   619,   620,   222,   651,   206,   652,   163,
-       9,   457,   451,   621,   165,   617,   174,   495,   427,    28,
-     208,   452,   496,    29,   102,   257,     7,    29,   134,    19,
-     209,   266,   243,    10,    11,    10,    11,    10,    11,   381,
-     111,  -229,    20,   367,   254,   525,   111,   528,   146,    29,
-     536,   164,   150,   209,   239,   461,   497,   289,   437,    10,
-      11,   228,   228,   228,   486,   560,   231,   231,   231,    23,
-     462,   500,   491,   502,   450,   228,  -208,   150,   625,   255,
-     231,   437,   648,   101,   228,  -260,   636,   592,   256,   231,
-    -260,   164,   228,    10,    11,     9,    26,   231,   535,   228,
-    -229,   379,   631,   437,   231,   318,  -229,   163,   578,   611,
-    -208,    79,   165,   637,   638,   587,   589,   349,   226,   232,
-     233,   451,   228,    33,   357,    32,  -172,   231,   243,    93,
-     581,   515,   105,   564,  -174,   331,   332,   585,   522,   363,
-    -260,   261,  -208,   108,    10,    11,  -260,   163,   136,   276,
-    -172,   533,   165,   198,   243,    79,   282,   235,  -172,   474,
-     409,     9,   411,   254,   605,   171,   568,   235,   259,   488,
-    -147,   228,   202,   228,   509,   203,   231,   511,   231,   291,
-     430,   623,   624,  -259,  -175,  -174,   150,    11,  -259,   228,
-     215,   228,   263,  -170,   231,   124,   231,   228,   264,   130,
-     583,    35,   231,   223,   634,   219,    37,   265,   403,   164,
-      10,    11,    10,    11,   254,   112,   220,  -170,   418,   228,
-      47,    48,     9,   234,   231,  -170,    79,    51,   125,   249,
-     361,   410,   125,   285,   228,   228,   412,   622,  -259,   231,
-     231,   250,   209,   263,  -259,   262,   369,   453,   345,   264,
-       9,   479,   286,   481,   355,   356,   287,    61,   349,   614,
-     519,     9,   353,    10,    11,   163,   482,     9,   354,    64,
-     165,    10,    11,   358,   257,   360,   397,   243,   214,   477,
-     216,   218,   266,  -171,   489,   127,   506,   243,   408,   111,
-     529,   414,   415,   117,   331,   332,   143,   111,   362,    10,
-      11,   111,   147,   364,   146,  -169,   150,  -171,   228,   368,
-      10,    11,  -173,   231,   372,  -171,    10,    11,   374,   164,
-     228,   150,   480,   378,   380,   231,   384,   483,   382,  -169,
-     228,   386,   432,   513,   228,   231,  -173,  -169,   392,   231,
-     394,    79,    79,   399,  -173,   401,   479,   521,   481,   349,
-     541,   405,   548,     9,   228,   228,   235,   453,   612,   231,
-     231,   482,   479,   453,   481,   408,   561,   349,   413,   117,
-     117,   117,   416,   419,   444,   163,    79,   482,   449,   445,
-     165,   243,    94,   117,   446,     9,   460,   164,   172,   447,
-      95,   494,   117,   448,    96,     9,   458,   463,   466,   508,
-     117,   467,    10,    11,    97,    98,   468,   117,   469,   470,
-     485,   226,   514,   490,   379,   493,   503,   480,   510,     9,
-     505,   273,   483,   512,   228,   520,   519,   530,   526,   231,
-     117,   277,   524,   480,    10,    11,   531,    99,   483,   532,
-       9,   527,   254,   163,    10,    11,   534,   340,   165,   479,
-     553,   481,   555,   210,   210,   288,   210,   210,   152,   153,
-     154,   155,   156,   157,   482,   166,   167,   228,    10,    11,
-     556,   462,   231,   563,   243,   317,   537,   255,   569,   117,
-      79,   117,   544,   547,   529,   552,   567,   150,   572,    10,
-      11,    10,    11,   574,   557,   576,   559,   117,   577,   117,
-     349,   580,   541,   590,   582,   117,   548,   453,   591,   593,
-     594,   349,   349,   164,  -151,   595,   479,   228,   481,  -152,
-     480,   596,   231,   597,   584,   483,   177,   117,   601,   598,
-     600,   482,   602,   604,   606,   615,   185,   613,   137,   117,
-     189,   626,   117,   117,   628,   194,   195,   196,   197,   629,
-     160,   639,   437,   169,   644,   645,   646,   647,   106,    66,
-     640,   152,   156,   627,   579,   272,   487,   641,   588,   163,
-     344,   370,   404,   123,   165,   371,   344,   344,   504,   284,
-      37,   352,    91,   492,   475,   599,   442,   480,   573,   112,
-     538,   334,   483,   603,    47,    48,     9,   443,   562,   635,
-     335,    51,     0,   632,   558,   336,   337,   338,   224,   351,
-       0,     0,   339,     0,     0,     0,   117,     0,     0,   340,
-       0,     0,     0,     0,     0,   114,     0,     0,   117,     0,
-     117,   225,     0,     0,   544,   633,   341,   280,   117,     0,
-       0,     0,   117,    64,     0,    10,    11,   281,   342,     0,
-       0,     0,     0,     0,   343,     0,     0,    11,     0,     0,
-       0,     0,   117,   117,   292,   293,   294,   295,     0,   296,
-     297,   298,     0,   299,   300,   301,   302,   303,   304,   305,
-     306,   307,   308,   309,   310,   311,   312,     0,   160,     0,
-     319,     0,   322,   344,     0,     0,   137,   137,   333,   177,
-     344,     0,     0,     0,     0,     0,     0,     0,   344,   185,
-     175,  -269,     0,   189,   190,   191,   192,   193,   194,   195,
-     196,   197,     0,     0,     0,   117,     0,     0,     0,     0,
-       0,     0,   117,     0,     0,     0,     0,     0,     0,   176,
-     177,   117,   178,   179,   180,   181,   182,     0,   183,   184,
-     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
-     195,   196,   197,     0,     0,     0,     0,     0,     0,   137,
-       0,  -269,     0,     0,     0,   117,     0,     0,     0,   137,
-       0,  -269,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   344,     0,
-       0,     0,   421,     0,   542,   344,   160,   344,     0,     0,
-       0,     0,   421,     0,    -2,    34,   344,    35,   344,     0,
-      36,     0,    37,    38,    39,   117,     0,    40,   117,    41,
-      42,    43,    44,    45,    46,     0,    47,    48,     9,     0,
-       0,    49,    50,    51,    52,    53,    54,     0,     0,     0,
-      55,     0,     0,     0,     0,   137,   137,     0,     0,     0,
-       0,     0,     0,    56,    57,     0,    58,    59,     0,     0,
-      60,     0,     0,    61,     0,     0,   -24,     0,     0,     0,
-       0,     0,     0,    62,    63,    64,     0,    10,    11,     0,
-       0,     0,     0,     0,   137,   117,     0,     0,    35,     0,
-       0,     0,     0,    37,     0,     0,   168,   344,   137,     0,
-       0,     0,   112,     0,     0,   344,   160,    47,    48,     9,
-       0,   169,   344,     0,    51,     0,     0,     0,     0,     0,
-       0,    55,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,    56,    57,     0,    58,    59,     0,
-       0,    60,     0,   344,    61,     0,   542,   344,     0,     0,
-       0,   565,   566,     0,    62,    63,    64,     0,    10,    11,
-       0,   324,     0,    35,     0,     0,    36,  -244,    37,    38,
-      39,     0,  -244,    40,   160,    41,    42,   112,    44,    45,
-      46,     0,    47,    48,     9,     0,     0,    49,    50,    51,
-      52,    53,    54,   344,   421,   344,    55,     0,     0,     0,
-       0,   421,   586,   421,     0,     0,     0,     0,     0,    56,
-      57,     0,    58,    59,     0,     0,    60,     0,     0,    61,
-       0,     0,  -244,     0,     0,     0,     0,   325,  -244,    62,
-      63,    64,     0,    10,    11,   324,     0,    35,     0,     0,
-      36,     0,    37,    38,    39,     0,     0,    40,     0,    41,
-      42,   112,    44,    45,    46,     0,    47,    48,     9,     0,
-       0,    49,    50,    51,    52,    53,    54,     0,     0,     0,
-      55,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,    56,    57,     0,    58,    59,     0,     0,
-      60,     0,     0,    61,     0,     0,  -244,   642,   643,     0,
-     160,   325,  -244,    62,    63,    64,    35,    10,    11,     0,
-       0,    37,     0,     0,     0,     0,     0,     0,     0,     0,
-     112,     0,   334,     0,     0,    47,    48,     9,     0,     0,
-       0,   335,    51,     0,     0,     0,   336,   337,   338,   158,
-       0,     0,     0,   339,     0,     0,     0,     0,     0,     0,
-     340,     0,    56,    57,     0,    58,   159,     0,     0,    60,
-       0,    35,    61,   314,     0,     0,    37,   341,     0,     0,
-       0,     0,    62,    63,    64,   112,    10,    11,     0,     0,
-      47,    48,     9,     0,     0,   343,     0,    51,    11,     0,
-       0,     0,     0,     0,    55,     0,     0,     0,     0,     0,
+      12,   174,   272,   487,   119,   235,   161,   240,   274,   320,
+     138,   235,   435,   278,   376,    32,   359,    79,   323,   121,
+     385,   235,   554,    32,   103,   259,   173,   570,   433,   393,
+     109,   111,    27,   109,   111,   107,   501,   400,   128,   131,
+     111,   402,   375,  -211,   507,   207,   380,   539,   146,   150,
+     164,   417,  -179,     9,   437,     4,   428,   456,   389,   391,
+     438,   649,   150,   426,   212,   133,   205,   495,    15,    35,
+     461,     5,   496,   617,    37,   120,  -178,  -211,     7,    11,
+     122,   388,    19,   112,  -179,   462,  -263,   239,    47,    48,
+       9,  -263,    29,   495,    18,    51,    20,   134,   496,   163,
+     133,  -177,    10,    11,   165,   208,   174,   560,   325,  -211,
+     222,   366,   587,   589,   616,   209,   152,   153,   154,   155,
+     156,   157,   243,   166,   167,    61,   457,   427,   497,   257,
+     111,   289,   134,   618,   619,   266,   111,    64,   146,    10,
+      11,  -263,   150,   620,   536,   381,    23,  -263,   164,   380,
+     578,   228,   228,   228,   624,   124,   231,   231,   231,   130,
+      26,   226,   232,   233,   525,   228,   528,   150,   331,   332,
+     231,   367,   635,  -232,   228,   491,   629,   101,   390,   231,
+     648,   209,   228,   500,   261,   502,    33,   231,   164,   228,
+     437,    93,   276,   105,   231,   318,   486,   163,   630,   282,
+     535,    79,   165,   108,   581,     9,   605,   349,   437,   636,
+     637,   585,   228,   136,   592,    32,   357,   231,   243,   152,
+     156,     9,   291,   622,   623,   171,   653,   515,   654,   363,
+     437,    27,  -232,   379,   522,   564,   611,   163,  -232,   198,
+     533,   403,   165,  -262,   243,    79,   633,   235,  -262,   474,
+     409,   418,     9,  -150,    10,    11,   127,   235,   202,   488,
+     203,   228,   430,   228,   509,   411,   231,   511,   231,   568,
+      10,    11,  -178,   361,   259,   450,   150,  -177,    11,   228,
+     583,   228,   657,   254,   231,    94,   231,   228,   102,   369,
+     125,    29,   231,    95,   125,   215,     9,    96,  -262,   199,
+     220,    10,    11,   200,  -262,   219,   164,    97,    98,   228,
+     223,   201,   263,   250,   231,   141,    79,   234,   264,   397,
+     249,   410,   451,   209,   228,   228,   412,   331,   332,   231,
+     231,   408,    10,    11,   414,   415,   262,   453,   285,   621,
+      99,   479,   286,   334,  -175,    10,    11,   204,   349,  -173,
+     519,   287,   335,   206,   353,   163,   481,   336,   337,   338,
+     165,  -174,   614,   482,   339,  -172,   513,   243,  -175,   477,
+     354,   340,   529,  -173,   489,  -176,  -175,   243,   257,   111,
+     521,  -173,   358,   117,   360,  -174,   266,   111,   341,  -172,
+     506,   111,   362,  -174,   146,   364,   150,  -172,   228,  -176,
+     342,   368,   214,   231,   216,   218,   343,  -176,   408,    11,
+     228,   150,   480,   372,   374,   231,   164,   483,   378,   380,
+     228,   382,   450,   384,   228,   231,   392,   394,   399,   231,
+     386,    79,    79,   401,   494,   405,   479,   254,   419,   349,
+     541,   413,   548,     9,   228,   228,   235,   453,   612,   231,
+     231,   481,   479,   453,   226,   514,   561,   349,   482,   117,
+     117,   117,   416,   432,   444,   163,    79,   481,     9,   451,
+     165,   243,   255,   117,   482,    27,   210,   210,   452,   210,
+     210,   256,   117,   445,   164,    37,    10,    11,   446,   447,
+     117,     9,    10,    11,   112,   448,     9,   117,   458,    47,
+      48,     9,   463,   143,   466,   467,    51,   480,   468,     9,
+     469,   470,   483,   224,   228,   656,   519,    10,    11,   231,
+     117,   485,   379,   480,   490,   493,   147,   508,   483,   503,
+     114,    28,     9,   163,   235,    29,   225,   524,   165,   479,
+      10,    11,   280,   505,   172,    10,    11,   526,    64,   510,
+      10,    11,   281,   512,   481,   520,   527,   228,    10,    11,
+     530,   482,   231,   531,   243,   529,   345,   584,   273,   117,
+      79,   117,   355,   356,   532,     9,   340,   150,   534,   553,
+     555,    10,    11,   556,   563,     9,   569,   117,     9,   117,
+     349,   462,   541,   344,   567,   117,   548,   453,   572,   344,
+     344,   349,   349,   574,   254,   479,   576,   228,   577,   164,
+     480,   277,   231,   580,   582,   483,   590,   117,   593,   591,
+     481,   288,   594,   317,    10,    11,  -154,   482,   595,   117,
+     137,  -155,   117,   117,    10,    11,   596,    10,    11,   255,
+     597,    35,   160,   598,   601,   169,    37,   600,   602,   168,
+     604,   606,   625,    10,    11,   112,   334,   613,   163,   459,
+      47,    48,     9,   165,   627,   335,   628,    51,   638,   639,
+     336,   337,   338,   437,    55,   644,   480,   339,   645,   646,
+     647,   483,   106,    66,   340,   626,   254,    56,    57,   650,
+      58,    59,   579,   588,    60,   370,   449,    61,   123,   404,
+     284,   341,   504,   371,   460,   492,   117,    62,    63,    64,
+     352,    10,    11,   475,    91,   263,   344,   573,   117,   343,
+     117,   264,    11,   344,   177,   442,   538,   443,   117,   562,
+     265,   344,   117,   634,   185,    10,    11,   631,   189,   190,
+     191,   192,   193,   194,   195,   196,   197,   558,   351,     0,
+       0,     0,   117,   117,     0,     0,   292,   293,   294,   295,
+       0,   296,   297,   298,     0,   299,   300,   301,   302,   303,
+     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
+     160,     0,   319,     0,   322,   177,     0,     0,   137,   137,
+     333,     0,     0,     0,   537,   185,     0,     0,     0,   189,
+     544,   547,     0,   552,   194,   195,   196,   197,     0,     0,
+       0,     0,   557,     0,   559,   117,     0,     0,     0,     0,
+       0,   344,   117,     0,     0,     0,     0,   542,   344,     0,
+     344,   117,     0,     0,   175,  -272,     0,   176,   177,   344,
+     178,   344,   180,   181,   182,     0,     0,   184,   185,   186,
+     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
+     197,   137,     0,   176,   177,   117,   178,   179,   180,   181,
+     182,   137,   183,   184,   185,   186,   187,   188,   189,   190,
+     191,   192,   193,   194,   195,   196,   197,     0,     0,     0,
+       0,     0,    37,     0,   421,  -272,     0,     0,   160,     0,
+       0,   112,     0,   599,   421,  -272,    47,    48,     9,     0,
+       0,   603,     0,    51,     0,   117,     0,     0,   117,     0,
+     224,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     344,     0,     0,     0,     0,     0,     0,   114,   344,     0,
+       0,     0,     0,   225,     0,   344,     0,   137,   137,    35,
+       0,     0,   544,   632,    37,    64,     0,    10,    11,   396,
+       0,     0,     0,   112,     0,     0,     0,     0,    47,    48,
+       9,     0,     0,     0,     0,    51,   344,     0,     0,   542,
+     344,     0,   158,     0,   117,     0,   137,     0,     0,     0,
+       0,     0,     0,     0,     0,    56,    57,     0,    58,   159,
+     137,     0,    60,     0,     0,    61,   314,     0,   160,     0,
+       0,     0,     0,   169,     0,    62,    63,    64,     0,    10,
+      11,     0,     0,     0,   176,   177,   344,   178,   344,   180,
+     181,   182,     0,     0,   184,   185,   186,   187,   188,   189,
+     190,   191,   192,   193,   194,   195,   196,   197,     0,     0,
+       0,     0,     0,   565,   566,     0,     0,   523,     0,     0,
+       0,     0,    -2,    34,     0,    35,     0,     0,    36,     0,
+      37,    38,    39,     0,     0,    40,   160,    41,    42,    43,
+      44,    45,    46,     0,    47,    48,     9,     0,     0,    49,
+      50,    51,    52,    53,    54,     0,   421,     0,    55,     0,
+       0,     0,     0,   421,   586,   421,     0,     0,     0,     0,
+       0,    56,    57,     0,    58,    59,     0,     0,    60,     0,
+       0,    61,     0,     0,   -24,     0,     0,     0,     0,     0,
+       0,    62,    63,    64,     0,    10,    11,     0,     0,   324,
+       0,    35,     0,     0,    36,  -247,    37,    38,    39,     0,
+    -247,    40,     0,    41,    42,   112,    44,    45,    46,     0,
+      47,    48,     9,     0,     0,    49,    50,    51,    52,    53,
+      54,     0,     0,     0,    55,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,    56,    57,     0,
-      58,    59,     0,     0,    60,     0,    35,    61,     0,     0,
-       0,    37,     0,     0,     0,   420,     0,    62,    63,    64,
-     112,    10,    11,     0,     0,    47,    48,     9,     0,     0,
-       0,     0,    51,     0,   429,     0,     0,     0,     0,   158,
+      58,    59,     0,     0,    60,     0,     0,    61,   642,   643,
+    -247,   160,     0,     0,     0,   325,  -247,    62,    63,    64,
+       0,    10,    11,   324,     0,    35,     0,     0,    36,     0,
+      37,    38,    39,     0,     0,    40,     0,    41,    42,   112,
+      44,    45,    46,     0,    47,    48,     9,     0,     0,    49,
+      50,    51,    52,    53,    54,     0,     0,     0,    55,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,    56,    57,     0,    58,   159,     0,     0,    60,
-       0,    35,    61,     0,     0,     0,    37,     0,     0,     0,
-       0,     0,    62,    63,    64,   112,    10,    11,     0,     0,
-      47,    48,     9,     0,   472,     0,     0,    51,     0,     0,
-       0,     0,     0,     0,    55,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,    56,    57,     0,
-      58,    59,     0,     0,    60,     0,    35,    61,     0,     0,
-       0,    37,     0,     0,     0,     0,     0,    62,    63,    64,
-     112,    10,    11,     0,     0,    47,    48,     9,     0,   473,
-       0,     0,    51,     0,     0,     0,     0,     0,     0,    55,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,    35,
-       0,     0,    56,    57,    37,    58,    59,     0,     0,    60,
-       0,     0,    61,   112,     0,     0,     0,     0,    47,    48,
-       9,     0,    62,    63,    64,    51,    10,    11,     0,     0,
-       0,     0,    55,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,    35,     0,     0,    56,    57,    37,    58,    59,
-       0,     0,    60,     0,     0,    61,   112,     0,     0,     0,
-       0,    47,    48,     9,     0,    62,    63,    64,    51,    10,
-      11,     0,     0,     0,     0,   158,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,    35,     0,     0,    56,    57,
-     283,    58,   159,     0,     0,    60,     0,     0,    61,   112,
-       0,     0,     0,     0,    47,    48,     9,     0,    62,    63,
-      64,    51,    10,    11,     0,     0,     0,     0,    55,     0,
+       0,    56,    57,     0,    58,    59,     0,     0,    60,     0,
+      35,    61,     0,     0,  -247,    37,     0,     0,     0,   325,
+    -247,    62,    63,    64,   112,    10,    11,     0,     0,    47,
+      48,     9,     0,     0,     0,     0,    51,     0,     0,     0,
+       0,     0,     0,    55,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,    56,    57,     0,    58,
+      59,     0,     0,    60,     0,    35,    61,     0,     0,     0,
+      37,     0,     0,     0,   420,     0,    62,    63,    64,   112,
+      10,    11,     0,     0,    47,    48,     9,     0,     0,     0,
+       0,    51,     0,   429,     0,     0,     0,     0,   158,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,    56,    57,     0,    58,   159,     0,     0,    60,     0,
+      35,    61,     0,     0,     0,    37,     0,     0,     0,     0,
+       0,    62,    63,    64,   112,    10,    11,     0,     0,    47,
+      48,     9,     0,   472,     0,     0,    51,     0,     0,     0,
+       0,     0,     0,    55,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,    56,    57,     0,    58,
+      59,     0,     0,    60,     0,    35,    61,     0,     0,     0,
+      37,     0,     0,     0,     0,     0,    62,    63,    64,   112,
+      10,    11,     0,     0,    47,    48,     9,     0,   473,     0,
+       0,    51,     0,     0,     0,     0,     0,     0,    55,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,    35,     0,
        0,    56,    57,    37,    58,    59,     0,     0,    60,     0,
        0,    61,   112,     0,     0,     0,     0,    47,    48,     9,
-       0,    62,    63,    64,    51,    10,    11,     0,    37,     0,
-       0,   224,     0,     0,     0,     0,    37,   112,     0,   241,
-       0,     0,    47,    48,     9,   112,     0,     0,   114,    51,
-      47,    48,     9,     0,   225,     0,   224,    51,     0,     0,
-     290,     0,    37,     0,   224,     0,    64,     0,    10,    11,
-     281,   112,     0,   114,     0,     0,    47,    48,     9,   225,
-       0,   114,     0,    51,     0,     0,     0,   225,     0,    37,
-     113,    64,     0,    10,    11,   396,     0,     0,   112,    64,
-       0,    10,    11,    47,    48,     9,     0,   114,     0,     0,
-      51,     0,     0,   115,     0,    37,     0,   224,     0,     0,
-       0,     0,     0,    37,   112,    64,     0,    10,    11,    47,
-      48,     9,   112,     0,   114,     0,    51,    47,    48,     9,
-     225,     0,     0,   406,    51,     0,     0,     0,   283,     0,
-       0,   224,    64,     0,    10,    11,   334,   112,     0,     0,
-     114,     0,    47,    48,     9,   335,   407,     0,   114,    51,
-     336,   337,   338,     0,   476,     0,   224,   339,    64,     0,
-      10,    11,   334,     0,   439,   459,    64,     0,    10,    11,
-       0,   335,     0,   114,     0,     0,   336,   337,   338,   225,
-       0,   341,     0,   339,     0,     0,     0,   440,     0,   334,
-     340,    64,     0,    10,    11,     0,     0,     0,   335,   343,
-       0,     0,    11,   336,   337,   540,     0,   341,     0,     0,
-     339,     0,     0,     0,     0,   334,     0,   340,     0,     0,
-       0,     0,     0,     0,   335,   343,     0,     0,    11,   336,
-     337,   338,     0,     0,   341,     0,   339,     0,     0,     0,
-       0,     0,     0,   340,     0,     0,     0,     0,     0,     0,
-       0,     0,   343,   177,    10,    11,     0,   180,   181,   182,
-     341,     0,   184,   185,   186,   187,   607,   189,   190,   191,
-     192,   193,   194,   195,   196,   197,     0,     0,   343,   176,
-     177,    11,   178,     0,   180,   181,   182,     0,     0,   184,
-     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
-     195,   196,   197,     0,     0,     0,     0,     0,     0,   176,
-     177,     0,   178,     0,   180,   181,   182,     0,   431,   184,
-     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
-     195,   196,   197,   176,   177,     0,   178,     0,   180,   181,
-     182,     0,   523,   184,   185,   186,   187,   188,   189,   190,
-     191,   192,   193,   194,   195,   196,   197,   176,   177,     0,
-     178,     0,   180,   181,   182,     0,   649,   184,   185,   186,
+       0,    62,    63,    64,    51,    10,    11,     0,     0,     0,
+       0,    55,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,    35,     0,     0,    56,    57,    37,    58,    59,     0,
+       0,    60,     0,     0,    61,   112,     0,     0,     0,     0,
+      47,    48,     9,     0,    62,    63,    64,    51,    10,    11,
+       0,     0,     0,     0,   158,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,    35,     0,     0,    56,    57,   283,
+      58,   159,     0,     0,    60,     0,     0,    61,   112,     0,
+       0,     0,     0,    47,    48,     9,     0,    62,    63,    64,
+      51,    10,    11,     0,     0,     0,     0,    55,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+      56,    57,    37,    58,    59,     0,     0,    60,     0,     0,
+      61,   112,     0,     0,     0,     0,    47,    48,     9,     0,
+      62,    63,    64,    51,    10,    11,     0,     0,    37,     0,
+     224,   241,     0,     0,     0,     0,    37,   112,     0,     0,
+       0,     0,    47,    48,     9,   112,     0,   114,     0,    51,
+      47,    48,     9,   225,     0,     0,   224,    51,     0,   290,
+       0,    37,     0,     0,   113,    64,     0,    10,    11,   281,
+     112,     0,     0,   114,     0,    47,    48,     9,     0,   225,
+       0,   114,    51,     0,     0,     0,     0,   115,     0,   224,
+       0,    64,     0,    10,    11,    37,     0,     0,     0,    64,
+       0,    10,    11,     0,   112,     0,   114,     0,     0,    47,
+      48,     9,   225,     0,     0,     0,    51,     0,     0,     0,
+      37,     0,     0,   406,    64,     0,    10,    11,   283,   112,
+       0,     0,     0,     0,    47,    48,     9,   112,     0,     0,
+     114,    51,    47,    48,     9,     0,   407,     0,   224,    51,
+       0,     0,     0,   334,     0,     0,   224,     0,    64,     0,
+      10,    11,   335,     0,     0,   114,     0,   336,   337,   338,
+       0,   476,     0,   114,   339,     0,     0,     0,     0,   225,
+       0,   439,     0,    64,     0,    10,    11,   334,     0,     0,
+       0,    64,     0,    10,    11,     0,   335,   334,   341,     0,
+       0,   336,   337,   540,   440,     0,   335,     0,   339,     0,
+       0,   336,   337,   338,     0,   340,   343,     0,   339,    11,
+       0,     0,     0,     0,     0,   340,     0,     0,     0,     0,
+     334,     0,   341,     0,     0,     0,     0,     0,     0,   335,
+       0,     0,   341,     0,   336,   337,   338,     0,   607,     0,
+     343,   339,    10,    11,     0,     0,     0,     0,   340,     0,
+     343,     0,     0,    11,     0,     0,   176,   177,     0,   178,
+       0,   180,   181,   182,     0,   341,   184,   185,   186,   187,
+     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
+       0,     0,     0,   343,     0,     0,    11,   176,   177,     0,
+     178,     0,   180,   181,   182,   431,     0,   184,   185,   186,
      187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
      197,   176,   177,     0,   178,     0,   180,   181,   182,     0,
-     650,   184,   185,   186,   187,   188,   189,   190,   191,   192,
-     193,   194,   195,   196,   197,     0,   176,   177,   434,   178,
+     651,   184,   185,   186,   187,   188,   189,   190,   191,   192,
+     193,   194,   195,   196,   197,   176,   177,     0,   178,     0,
+     180,   181,   182,     0,   652,   184,   185,   186,   187,   188,
+     189,   190,   191,   192,   193,   194,   195,   196,   197,   176,
+     177,     0,   434,     0,   180,   181,   182,     0,     0,   184,
+     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
+     195,   196,   197,   176,   177,     0,     0,     0,   180,   181,
+     182,     0,     0,   184,   185,   186,   187,     0,   189,   190,
+     191,   192,   193,   194,   195,   196,   197,   177,     0,     0,
        0,   180,   181,   182,     0,     0,   184,   185,   186,   187,
-     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
-     176,   177,     0,     0,     0,   180,   181,   182,     0,     0,
-     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
-     194,   195,   196,   197,   176,   177,     0,     0,     0,   180,
-     181,   182,     0,     0,   184,   185,   186,   187,     0,   189,
-     190,   191,   192,   193,   194,   195,   196,   197
+       0,   189,   190,   191,   192,   193,   194,   195,   196,   197
 };
 
+#define yypact_value_is_default(Yystate) \
+  (!!((Yystate) == (-459)))
+
+#define yytable_value_is_error(Yytable_value) \
+  YYID (0)
+
 static const yytype_int16 yycheck[] =
 {
-       5,    67,   250,   223,    37,   126,    37,   126,   143,   135,
-     201,   132,   204,   147,    61,    20,    36,    22,   485,    39,
-      31,   142,    28,    28,   321,    45,   452,   316,   323,   249,
-     258,    36,     3,     5,    39,    20,   263,   264,    43,   267,
-      45,   444,    67,    61,    11,    35,   594,   275,    53,    54,
-       5,   279,     1,     3,    24,     3,    35,     3,    24,    51,
-      59,   289,    67,     0,    63,    62,    59,    49,    24,    59,
-       3,    68,    71,     5,    24,    37,    24,    67,    24,     3,
-      37,    74,    67,    25,   389,     7,    35,    53,    67,    59,
-      12,    83,   397,    65,    66,   106,   644,    89,   646,    61,
-      24,    72,    50,    75,    61,   572,   172,     7,    75,    59,
-      65,    59,    12,    63,    60,   135,    25,    63,    67,    62,
-      75,   141,   127,    73,    74,    73,    74,    73,    74,   255,
-     135,     3,    21,    65,    24,   424,   141,   426,   143,    63,
-     437,   159,   147,    75,   126,    60,    68,   172,    62,    73,
-      74,   113,   114,   115,    68,   460,   113,   114,   115,    24,
-      75,   388,   382,   390,     3,   127,     1,   172,    68,    59,
-     127,    62,   639,    24,   136,     7,   602,    68,    68,   136,
-      12,   199,   144,    73,    74,    24,    63,   144,   436,   151,
-      62,    63,   595,    62,   151,   200,    68,   159,   503,    68,
-      35,   206,   159,   606,   607,   523,   524,   212,   113,   114,
-     115,    50,   174,    62,   220,   220,    35,   174,   223,    62,
-     515,   413,     3,   471,    59,   207,   208,   522,   420,   234,
-      62,   136,    67,     3,    73,    74,    68,   199,    71,   144,
-      59,   432,   199,    67,   249,   250,   151,   368,    67,   368,
-     283,    24,   283,    24,   559,    62,   476,   378,   384,   378,
-      66,   223,    66,   225,   399,    59,   223,   401,   225,   174,
-     317,   576,   577,     7,    59,    59,   281,    74,    12,   241,
-      24,   243,    53,    35,   241,    40,   243,   249,    59,    44,
-     518,     3,   249,    59,   599,    64,     8,    68,   280,   317,
-      73,    74,    73,    74,    24,    17,    62,    59,   290,   271,
-      22,    23,    24,    63,   271,    67,   321,    29,    40,    59,
-     225,   283,    44,    60,   286,   287,   283,   575,    62,   286,
-     287,    67,    75,    53,    68,    35,   241,   342,   211,    59,
-      24,   374,    72,   374,   217,   218,    72,    59,   353,   569,
-     416,    24,    59,    73,    74,   317,   374,    24,     3,    71,
-     317,    73,    74,    60,   384,     8,   271,   372,    95,   374,
-      97,    98,   392,    35,   379,    59,   396,   382,   283,   384,
-     427,   286,   287,    37,   366,   367,    59,   392,    60,    73,
-      74,   396,    59,    35,   399,    35,   401,    59,   360,    62,
-      73,    74,    35,   360,    75,    67,    73,    74,    60,   427,
-     372,   416,   374,    62,    24,   372,    62,   374,    59,    59,
-     382,    72,    66,   405,   386,   382,    59,    67,    62,   386,
-       3,   436,   437,    62,    67,    62,   469,   419,   469,   444,
-     445,    65,   447,    24,   406,   407,   567,   452,   567,   406,
-     407,   469,   485,   458,   485,   360,   461,   462,    67,   113,
-     114,   115,    62,    65,    59,   427,   471,   485,   341,    67,
-     427,   476,     9,   127,    71,    24,   349,   495,    59,    67,
-      17,   386,   136,     8,    21,    24,    65,    62,    62,    35,
-     144,    62,    73,    74,    31,    32,    62,   151,    60,    60,
-      60,   406,   407,    60,    63,    68,    60,   469,    60,    24,
-      68,    60,   469,    60,   476,    60,   582,    60,    68,   476,
-     174,    60,    75,   485,    73,    74,    60,    64,   485,    60,
-      24,    75,    24,   495,    73,    74,    68,    36,   495,   572,
-       3,   572,    62,    94,    95,    60,    97,    98,    55,    56,
-      57,    58,    59,    60,   572,    62,    63,   519,    73,    74,
-      72,    75,   519,    60,   569,    59,   439,    59,    59,   223,
-     575,   225,   445,   446,   621,   448,    62,   582,    60,    73,
-      74,    73,    74,    66,   457,    60,   459,   241,    60,   243,
-     595,    60,   597,    60,    62,   249,   601,   602,    72,    60,
-      60,   606,   607,   621,    59,    59,   639,   569,   639,    59,
-     572,    68,   569,    62,   519,   572,    34,   271,    62,    72,
-      68,   639,    49,    62,    59,    14,    44,    60,    49,   283,
-      48,    68,   286,   287,    60,    53,    54,    55,    56,    68,
-      61,    60,    62,    64,    60,    60,    60,    60,    31,    22,
-     615,   158,   159,   582,   508,   142,   377,   615,   524,   621,
-     211,   243,   281,    39,   621,   243,   217,   218,   392,   159,
-       8,   213,    22,   384,   372,   548,   334,   639,   495,    17,
-     440,     8,   639,   556,    22,    23,    24,   334,   462,   601,
-      17,    29,    -1,   597,   458,    22,    23,    24,    36,   212,
-      -1,    -1,    29,    -1,    -1,    -1,   360,    -1,    -1,    36,
-      -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,   372,    -1,
-     374,    59,    -1,    -1,   597,   598,    53,    65,   382,    -1,
-      -1,    -1,   386,    71,    -1,    73,    74,    75,    65,    -1,
-      -1,    -1,    -1,    -1,    71,    -1,    -1,    74,    -1,    -1,
-      -1,    -1,   406,   407,   175,   176,   177,   178,    -1,   180,
-     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
-     191,   192,   193,   194,   195,   196,   197,    -1,   199,    -1,
-     201,    -1,   203,   334,    -1,    -1,   207,   208,   209,    34,
-     341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   349,    44,
-       4,     5,    -1,    48,    49,    50,    51,    52,    53,    54,
-      55,    56,    -1,    -1,    -1,   469,    -1,    -1,    -1,    -1,
-      -1,    -1,   476,    -1,    -1,    -1,    -1,    -1,    -1,    33,
-      34,   485,    36,    37,    38,    39,    40,    -1,    42,    43,
-      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
-      54,    55,    56,    -1,    -1,    -1,    -1,    -1,    -1,   280,
-      -1,    65,    -1,    -1,    -1,   519,    -1,    -1,    -1,   290,
-      -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   439,    -1,
-      -1,    -1,   313,    -1,   445,   446,   317,   448,    -1,    -1,
-      -1,    -1,   323,    -1,     0,     1,   457,     3,   459,    -1,
-       6,    -1,     8,     9,    10,   569,    -1,    13,   572,    15,
-      16,    17,    18,    19,    20,    -1,    22,    23,    24,    -1,
-      -1,    27,    28,    29,    30,    31,    32,    -1,    -1,    -1,
-      36,    -1,    -1,    -1,    -1,   366,   367,    -1,    -1,    -1,
-      -1,    -1,    -1,    49,    50,    -1,    52,    53,    -1,    -1,
-      56,    -1,    -1,    59,    -1,    -1,    62,    -1,    -1,    -1,
-      -1,    -1,    -1,    69,    70,    71,    -1,    73,    74,    -1,
-      -1,    -1,    -1,    -1,   405,   639,    -1,    -1,     3,    -1,
-      -1,    -1,    -1,     8,    -1,    -1,    11,   548,   419,    -1,
-      -1,    -1,    17,    -1,    -1,   556,   427,    22,    23,    24,
-      -1,   432,   563,    -1,    29,    -1,    -1,    -1,    -1,    -1,
-      -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    49,    50,    -1,    52,    53,    -1,
-      -1,    56,    -1,   594,    59,    -1,   597,   598,    -1,    -1,
-      -1,   472,   473,    -1,    69,    70,    71,    -1,    73,    74,
-      -1,     1,    -1,     3,    -1,    -1,     6,     7,     8,     9,
-      10,    -1,    12,    13,   495,    15,    16,    17,    18,    19,
-      20,    -1,    22,    23,    24,    -1,    -1,    27,    28,    29,
-      30,    31,    32,   644,   515,   646,    36,    -1,    -1,    -1,
-      -1,   522,   523,   524,    -1,    -1,    -1,    -1,    -1,    49,
-      50,    -1,    52,    53,    -1,    -1,    56,    -1,    -1,    59,
-      -1,    -1,    62,    -1,    -1,    -1,    -1,    67,    68,    69,
-      70,    71,    -1,    73,    74,     1,    -1,     3,    -1,    -1,
-       6,    -1,     8,     9,    10,    -1,    -1,    13,    -1,    15,
-      16,    17,    18,    19,    20,    -1,    22,    23,    24,    -1,
-      -1,    27,    28,    29,    30,    31,    32,    -1,    -1,    -1,
+       5,    67,   142,   377,    37,   126,    61,   126,   143,   201,
+      49,   132,   323,   147,   250,    20,   223,    22,   204,    37,
+     258,   142,   452,    28,    28,   135,    67,   485,   321,   267,
+      36,    36,     3,    39,    39,    31,   389,   275,    43,    45,
+      45,   279,   249,     1,   397,     5,    24,   444,    53,    54,
+      61,   289,    35,    24,    62,     0,   316,     3,   263,   264,
+      68,    20,    67,    11,    59,    35,     1,     7,    24,     3,
+      60,    25,    12,     5,     8,    37,    59,    35,    25,    74,
+      37,    59,    62,    17,    67,    75,     7,   126,    22,    23,
+      24,    12,    63,     7,     3,    29,    21,    67,    12,    61,
+      35,    59,    73,    74,    61,    65,   172,   460,    67,    67,
+     106,     5,   523,   524,   572,    75,    55,    56,    57,    58,
+      59,    60,   127,    62,    63,    59,    72,    75,    68,   135,
+     135,   172,    67,    65,    66,   141,   141,    71,   143,    73,
+      74,    62,   147,    75,   437,   255,    24,    68,   159,    24,
+     503,   113,   114,   115,    68,    40,   113,   114,   115,    44,
+      63,   113,   114,   115,   424,   127,   426,   172,   207,   208,
+     127,    65,   602,     3,   136,   382,   594,    24,    53,   136,
+     638,    75,   144,   388,   136,   390,    62,   144,   199,   151,
+      62,    62,   144,     3,   151,   200,    68,   159,   595,   151,
+     436,   206,   159,     3,   515,    24,   559,   212,    62,   606,
+     607,   522,   174,    71,    68,   220,   220,   174,   223,   158,
+     159,    24,   174,   576,   577,    62,   644,   413,   646,   234,
+      62,     3,    62,    63,   420,   471,    68,   199,    68,    67,
+     432,   280,   199,     7,   249,   250,   599,   368,    12,   368,
+     283,   290,    24,    66,    73,    74,    59,   378,    66,   378,
+      59,   223,   317,   225,   399,   283,   223,   401,   225,   476,
+      73,    74,    59,   225,   384,     3,   281,    59,    74,   241,
+     518,   243,   656,    24,   241,     9,   243,   249,    60,   241,
+      40,    63,   249,    17,    44,    24,    24,    21,    62,    59,
+      62,    73,    74,    63,    68,    64,   317,    31,    32,   271,
+      59,    71,    53,    67,   271,    51,   321,    63,    59,   271,
+      59,   283,    50,    75,   286,   287,   283,   366,   367,   286,
+     287,   283,    73,    74,   286,   287,    35,   342,    60,   575,
+      64,   374,    72,     8,    35,    73,    74,    83,   353,    35,
+     416,    72,    17,    89,    59,   317,   374,    22,    23,    24,
+     317,    35,   569,   374,    29,    35,   405,   372,    59,   374,
+       3,    36,   427,    59,   379,    35,    67,   382,   384,   384,
+     419,    67,    60,    37,     8,    59,   392,   392,    53,    59,
+     396,   396,    60,    67,   399,    35,   401,    67,   360,    59,
+      65,    62,    95,   360,    97,    98,    71,    67,   360,    74,
+     372,   416,   374,    75,    60,   372,   427,   374,    62,    24,
+     382,    59,     3,    62,   386,   382,    62,     3,    62,   386,
+      72,   436,   437,    62,   386,    65,   469,    24,    65,   444,
+     445,    67,   447,    24,   406,   407,   567,   452,   567,   406,
+     407,   469,   485,   458,   406,   407,   461,   462,   469,   113,
+     114,   115,    62,    66,    59,   427,   471,   485,    24,    50,
+     427,   476,    59,   127,   485,     3,    94,    95,    59,    97,
+      98,    68,   136,    67,   495,     8,    73,    74,    71,    67,
+     144,    24,    73,    74,    17,     8,    24,   151,    65,    22,
+      23,    24,    62,    59,    62,    62,    29,   469,    62,    24,
+      60,    60,   469,    36,   476,   655,   582,    73,    74,   476,
+     174,    60,    63,   485,    60,    68,    59,    35,   485,    60,
+      53,    59,    24,   495,   655,    63,    59,    75,   495,   572,
+      73,    74,    65,    68,    59,    73,    74,    68,    71,    60,
+      73,    74,    75,    60,   572,    60,    75,   519,    73,    74,
+      60,   572,   519,    60,   569,   620,   211,   519,    60,   223,
+     575,   225,   217,   218,    60,    24,    36,   582,    68,     3,
+      62,    73,    74,    72,    60,    24,    59,   241,    24,   243,
+     595,    75,   597,   211,    62,   249,   601,   602,    60,   217,
+     218,   606,   607,    66,    24,   638,    60,   569,    60,   620,
+     572,    60,   569,    60,    62,   572,    60,   271,    60,    72,
+     638,    60,    60,    59,    73,    74,    59,   638,    59,   283,
+      49,    59,   286,   287,    73,    74,    68,    73,    74,    59,
+      62,     3,    61,    72,    62,    64,     8,    68,    49,    11,
+      62,    59,    68,    73,    74,    17,     8,    60,   620,    11,
+      22,    23,    24,   620,    60,    17,    68,    29,    60,    14,
+      22,    23,    24,    62,    36,    60,   638,    29,    60,    60,
+      60,   638,    31,    22,    36,   582,    24,    49,    50,   639,
+      52,    53,   508,   524,    56,   243,   341,    59,    39,   281,
+     159,    53,   392,   243,   349,   384,   360,    69,    70,    71,
+     213,    73,    74,   372,    22,    53,   334,   495,   372,    71,
+     374,    59,    74,   341,    34,   334,   440,   334,   382,   462,
+      68,   349,   386,   601,    44,    73,    74,   597,    48,    49,
+      50,    51,    52,    53,    54,    55,    56,   458,   212,    -1,
+      -1,    -1,   406,   407,    -1,    -1,   175,   176,   177,   178,
+      -1,   180,   181,   182,    -1,   184,   185,   186,   187,   188,
+     189,   190,   191,   192,   193,   194,   195,   196,   197,    -1,
+     199,    -1,   201,    -1,   203,    34,    -1,    -1,   207,   208,
+     209,    -1,    -1,    -1,   439,    44,    -1,    -1,    -1,    48,
+     445,   446,    -1,   448,    53,    54,    55,    56,    -1,    -1,
+      -1,    -1,   457,    -1,   459,   469,    -1,    -1,    -1,    -1,
+      -1,   439,   476,    -1,    -1,    -1,    -1,   445,   446,    -1,
+     448,   485,    -1,    -1,     4,     5,    -1,    33,    34,   457,
+      36,   459,    38,    39,    40,    -1,    -1,    43,    44,    45,
+      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
+      56,   280,    -1,    33,    34,   519,    36,    37,    38,    39,
+      40,   290,    42,    43,    44,    45,    46,    47,    48,    49,
+      50,    51,    52,    53,    54,    55,    56,    -1,    -1,    -1,
+      -1,    -1,     8,    -1,   313,    65,    -1,    -1,   317,    -1,
+      -1,    17,    -1,   548,   323,    75,    22,    23,    24,    -1,
+      -1,   556,    -1,    29,    -1,   569,    -1,    -1,   572,    -1,
       36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    49,    50,    -1,    52,    53,    -1,    -1,
-      56,    -1,    -1,    59,    -1,    -1,    62,   618,   619,    -1,
-     621,    67,    68,    69,    70,    71,     3,    73,    74,    -1,
-      -1,     8,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      17,    -1,     8,    -1,    -1,    22,    23,    24,    -1,    -1,
-      -1,    17,    29,    -1,    -1,    -1,    22,    23,    24,    36,
-      -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,
-      36,    -1,    49,    50,    -1,    52,    53,    -1,    -1,    56,
-      -1,     3,    59,    60,    -1,    -1,     8,    53,    -1,    -1,
-      -1,    -1,    69,    70,    71,    17,    73,    74,    -1,    -1,
-      22,    23,    24,    -1,    -1,    71,    -1,    29,    74,    -1,
-      -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
+     548,    -1,    -1,    -1,    -1,    -1,    -1,    53,   556,    -1,
+      -1,    -1,    -1,    59,    -1,   563,    -1,   366,   367,     3,
+      -1,    -1,   597,   598,     8,    71,    -1,    73,    74,    75,
+      -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,    22,    23,
+      24,    -1,    -1,    -1,    -1,    29,   594,    -1,    -1,   597,
+     598,    -1,    36,    -1,   638,    -1,   405,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    49,    50,    -1,    52,    53,
+     419,    -1,    56,    -1,    -1,    59,    60,    -1,   427,    -1,
+      -1,    -1,    -1,   432,    -1,    69,    70,    71,    -1,    73,
+      74,    -1,    -1,    -1,    33,    34,   644,    36,   646,    38,
+      39,    40,    -1,    -1,    43,    44,    45,    46,    47,    48,
+      49,    50,    51,    52,    53,    54,    55,    56,    -1,    -1,
+      -1,    -1,    -1,   472,   473,    -1,    -1,    66,    -1,    -1,
+      -1,    -1,     0,     1,    -1,     3,    -1,    -1,     6,    -1,
+       8,     9,    10,    -1,    -1,    13,   495,    15,    16,    17,
+      18,    19,    20,    -1,    22,    23,    24,    -1,    -1,    27,
+      28,    29,    30,    31,    32,    -1,   515,    -1,    36,    -1,
+      -1,    -1,    -1,   522,   523,   524,    -1,    -1,    -1,    -1,
+      -1,    49,    50,    -1,    52,    53,    -1,    -1,    56,    -1,
+      -1,    59,    -1,    -1,    62,    -1,    -1,    -1,    -1,    -1,
+      -1,    69,    70,    71,    -1,    73,    74,    -1,    -1,     1,
+      -1,     3,    -1,    -1,     6,     7,     8,     9,    10,    -1,
+      12,    13,    -1,    15,    16,    17,    18,    19,    20,    -1,
+      22,    23,    24,    -1,    -1,    27,    28,    29,    30,    31,
+      32,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    49,    50,    -1,
-      52,    53,    -1,    -1,    56,    -1,     3,    59,    -1,    -1,
-      -1,     8,    -1,    -1,    -1,    67,    -1,    69,    70,    71,
-      17,    73,    74,    -1,    -1,    22,    23,    24,    -1,    -1,
-      -1,    -1,    29,    -1,    31,    -1,    -1,    -1,    -1,    36,
+      52,    53,    -1,    -1,    56,    -1,    -1,    59,   617,   618,
+      62,   620,    -1,    -1,    -1,    67,    68,    69,    70,    71,
+      -1,    73,    74,     1,    -1,     3,    -1,    -1,     6,    -1,
+       8,     9,    10,    -1,    -1,    13,    -1,    15,    16,    17,
+      18,    19,    20,    -1,    22,    23,    24,    -1,    -1,    27,
+      28,    29,    30,    31,    32,    -1,    -1,    -1,    36,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    49,    50,    -1,    52,    53,    -1,    -1,    56,
-      -1,     3,    59,    -1,    -1,    -1,     8,    -1,    -1,    -1,
-      -1,    -1,    69,    70,    71,    17,    73,    74,    -1,    -1,
-      22,    23,    24,    -1,    26,    -1,    -1,    29,    -1,    -1,
-      -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    49,    50,    -1,
-      52,    53,    -1,    -1,    56,    -1,     3,    59,    -1,    -1,
-      -1,     8,    -1,    -1,    -1,    -1,    -1,    69,    70,    71,
-      17,    73,    74,    -1,    -1,    22,    23,    24,    -1,    26,
-      -1,    -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,    36,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
-      -1,    -1,    49,    50,     8,    52,    53,    -1,    -1,    56,
-      -1,    -1,    59,    17,    -1,    -1,    -1,    -1,    22,    23,
-      24,    -1,    69,    70,    71,    29,    73,    74,    -1,    -1,
-      -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,     3,    -1,    -1,    49,    50,     8,    52,    53,
-      -1,    -1,    56,    -1,    -1,    59,    17,    -1,    -1,    -1,
-      -1,    22,    23,    24,    -1,    69,    70,    71,    29,    73,
-      74,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,    49,    50,
-       8,    52,    53,    -1,    -1,    56,    -1,    -1,    59,    17,
-      -1,    -1,    -1,    -1,    22,    23,    24,    -1,    69,    70,
-      71,    29,    73,    74,    -1,    -1,    -1,    -1,    36,    -1,
+      -1,    49,    50,    -1,    52,    53,    -1,    -1,    56,    -1,
+       3,    59,    -1,    -1,    62,     8,    -1,    -1,    -1,    67,
+      68,    69,    70,    71,    17,    73,    74,    -1,    -1,    22,
+      23,    24,    -1,    -1,    -1,    -1,    29,    -1,    -1,    -1,
+      -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    49,    50,    -1,    52,
+      53,    -1,    -1,    56,    -1,     3,    59,    -1,    -1,    -1,
+       8,    -1,    -1,    -1,    67,    -1,    69,    70,    71,    17,
+      73,    74,    -1,    -1,    22,    23,    24,    -1,    -1,    -1,
+      -1,    29,    -1,    31,    -1,    -1,    -1,    -1,    36,    -1,
       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    49,    50,    -1,    52,    53,    -1,    -1,    56,    -1,
+       3,    59,    -1,    -1,    -1,     8,    -1,    -1,    -1,    -1,
+      -1,    69,    70,    71,    17,    73,    74,    -1,    -1,    22,
+      23,    24,    -1,    26,    -1,    -1,    29,    -1,    -1,    -1,
+      -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    49,    50,    -1,    52,
+      53,    -1,    -1,    56,    -1,     3,    59,    -1,    -1,    -1,
+       8,    -1,    -1,    -1,    -1,    -1,    69,    70,    71,    17,
+      73,    74,    -1,    -1,    22,    23,    24,    -1,    26,    -1,
+      -1,    29,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
       -1,    49,    50,     8,    52,    53,    -1,    -1,    56,    -1,
       -1,    59,    17,    -1,    -1,    -1,    -1,    22,    23,    24,
-      -1,    69,    70,    71,    29,    73,    74,    -1,     8,    -1,
-      -1,    36,    -1,    -1,    -1,    -1,     8,    17,    -1,    11,
-      -1,    -1,    22,    23,    24,    17,    -1,    -1,    53,    29,
-      22,    23,    24,    -1,    59,    -1,    36,    29,    -1,    -1,
-      65,    -1,     8,    -1,    36,    -1,    71,    -1,    73,    74,
-      75,    17,    -1,    53,    -1,    -1,    22,    23,    24,    59,
-      -1,    53,    -1,    29,    -1,    -1,    -1,    59,    -1,     8,
-      36,    71,    -1,    73,    74,    75,    -1,    -1,    17,    71,
-      -1,    73,    74,    22,    23,    24,    -1,    53,    -1,    -1,
-      29,    -1,    -1,    59,    -1,     8,    -1,    36,    -1,    -1,
-      -1,    -1,    -1,     8,    17,    71,    -1,    73,    74,    22,
-      23,    24,    17,    -1,    53,    -1,    29,    22,    23,    24,
-      59,    -1,    -1,    36,    29,    -1,    -1,    -1,     8,    -1,
-      -1,    36,    71,    -1,    73,    74,     8,    17,    -1,    -1,
-      53,    -1,    22,    23,    24,    17,    59,    -1,    53,    29,
-      22,    23,    24,    -1,    59,    -1,    36,    29,    71,    -1,
-      73,    74,     8,    -1,    36,    11,    71,    -1,    73,    74,
-      -1,    17,    -1,    53,    -1,    -1,    22,    23,    24,    59,
-      -1,    53,    -1,    29,    -1,    -1,    -1,    59,    -1,     8,
-      36,    71,    -1,    73,    74,    -1,    -1,    -1,    17,    71,
-      -1,    -1,    74,    22,    23,    24,    -1,    53,    -1,    -1,
-      29,    -1,    -1,    -1,    -1,     8,    -1,    36,    -1,    -1,
-      -1,    -1,    -1,    -1,    17,    71,    -1,    -1,    74,    22,
-      23,    24,    -1,    -1,    53,    -1,    29,    -1,    -1,    -1,
-      -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    71,    34,    73,    74,    -1,    38,    39,    40,
-      53,    -1,    43,    44,    45,    46,    59,    48,    49,    50,
-      51,    52,    53,    54,    55,    56,    -1,    -1,    71,    33,
-      34,    74,    36,    -1,    38,    39,    40,    -1,    -1,    43,
-      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
-      54,    55,    56,    -1,    -1,    -1,    -1,    -1,    -1,    33,
-      34,    -1,    36,    -1,    38,    39,    40,    -1,    72,    43,
-      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
-      54,    55,    56,    33,    34,    -1,    36,    -1,    38,    39,
-      40,    -1,    66,    43,    44,    45,    46,    47,    48,    49,
-      50,    51,    52,    53,    54,    55,    56,    33,    34,    -1,
-      36,    -1,    38,    39,    40,    -1,    66,    43,    44,    45,
+      -1,    69,    70,    71,    29,    73,    74,    -1,    -1,    -1,
+      -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,     3,    -1,    -1,    49,    50,     8,    52,    53,    -1,
+      -1,    56,    -1,    -1,    59,    17,    -1,    -1,    -1,    -1,
+      22,    23,    24,    -1,    69,    70,    71,    29,    73,    74,
+      -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,     3,    -1,    -1,    49,    50,     8,
+      52,    53,    -1,    -1,    56,    -1,    -1,    59,    17,    -1,
+      -1,    -1,    -1,    22,    23,    24,    -1,    69,    70,    71,
+      29,    73,    74,    -1,    -1,    -1,    -1,    36,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      49,    50,     8,    52,    53,    -1,    -1,    56,    -1,    -1,
+      59,    17,    -1,    -1,    -1,    -1,    22,    23,    24,    -1,
+      69,    70,    71,    29,    73,    74,    -1,    -1,     8,    -1,
+      36,    11,    -1,    -1,    -1,    -1,     8,    17,    -1,    -1,
+      -1,    -1,    22,    23,    24,    17,    -1,    53,    -1,    29,
+      22,    23,    24,    59,    -1,    -1,    36,    29,    -1,    65,
+      -1,     8,    -1,    -1,    36,    71,    -1,    73,    74,    75,
+      17,    -1,    -1,    53,    -1,    22,    23,    24,    -1,    59,
+      -1,    53,    29,    -1,    -1,    -1,    -1,    59,    -1,    36,
+      -1,    71,    -1,    73,    74,     8,    -1,    -1,    -1,    71,
+      -1,    73,    74,    -1,    17,    -1,    53,    -1,    -1,    22,
+      23,    24,    59,    -1,    -1,    -1,    29,    -1,    -1,    -1,
+       8,    -1,    -1,    36,    71,    -1,    73,    74,     8,    17,
+      -1,    -1,    -1,    -1,    22,    23,    24,    17,    -1,    -1,
+      53,    29,    22,    23,    24,    -1,    59,    -1,    36,    29,
+      -1,    -1,    -1,     8,    -1,    -1,    36,    -1,    71,    -1,
+      73,    74,    17,    -1,    -1,    53,    -1,    22,    23,    24,
+      -1,    59,    -1,    53,    29,    -1,    -1,    -1,    -1,    59,
+      -1,    36,    -1,    71,    -1,    73,    74,     8,    -1,    -1,
+      -1,    71,    -1,    73,    74,    -1,    17,     8,    53,    -1,
+      -1,    22,    23,    24,    59,    -1,    17,    -1,    29,    -1,
+      -1,    22,    23,    24,    -1,    36,    71,    -1,    29,    74,
+      -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,
+       8,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    17,
+      -1,    -1,    53,    -1,    22,    23,    24,    -1,    59,    -1,
+      71,    29,    73,    74,    -1,    -1,    -1,    -1,    36,    -1,
+      71,    -1,    -1,    74,    -1,    -1,    33,    34,    -1,    36,
+      -1,    38,    39,    40,    -1,    53,    43,    44,    45,    46,
+      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
+      -1,    -1,    -1,    71,    -1,    -1,    74,    33,    34,    -1,
+      36,    -1,    38,    39,    40,    72,    -1,    43,    44,    45,
       46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
       56,    33,    34,    -1,    36,    -1,    38,    39,    40,    -1,
       66,    43,    44,    45,    46,    47,    48,    49,    50,    51,
-      52,    53,    54,    55,    56,    -1,    33,    34,    60,    36,
+      52,    53,    54,    55,    56,    33,    34,    -1,    36,    -1,
+      38,    39,    40,    -1,    66,    43,    44,    45,    46,    47,
+      48,    49,    50,    51,    52,    53,    54,    55,    56,    33,
+      34,    -1,    60,    -1,    38,    39,    40,    -1,    -1,    43,
+      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
+      54,    55,    56,    33,    34,    -1,    -1,    -1,    38,    39,
+      40,    -1,    -1,    43,    44,    45,    46,    -1,    48,    49,
+      50,    51,    52,    53,    54,    55,    56,    34,    -1,    -1,
       -1,    38,    39,    40,    -1,    -1,    43,    44,    45,    46,
-      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
-      33,    34,    -1,    -1,    -1,    38,    39,    40,    -1,    -1,
-      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
-      53,    54,    55,    56,    33,    34,    -1,    -1,    -1,    38,
-      39,    40,    -1,    -1,    43,    44,    45,    46,    -1,    48,
-      49,    50,    51,    52,    53,    54,    55,    56
+      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56
 };
 
 /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
@@ -1458,71 +1492,71 @@ static const yytype_int16 yycheck[] =
 static const yytype_uint8 yystos[] =
 {
        0,    77,    79,    80,     0,    25,    78,    25,    86,    24,
-      73,    74,   137,   138,    81,    24,    88,    89,     3,    62,
-      21,    82,   162,    24,    87,   210,    63,     3,    59,    63,
-      83,    85,   137,    62,     1,     3,     6,     8,     9,    10,
+      73,    74,   140,   141,    81,    24,    88,    89,     3,    62,
+      21,    82,   165,    24,    87,   213,    63,     3,    59,    63,
+      83,    85,   140,    62,     1,     3,     6,     8,     9,    10,
       13,    15,    16,    17,    18,    19,    20,    22,    23,    27,
       28,    29,    30,    31,    32,    36,    49,    50,    52,    53,
       56,    59,    69,    70,    71,    90,    91,    92,    98,   110,
-     113,   118,   121,   123,   124,   125,   126,   130,   134,   137,
-     139,   140,   145,   146,   149,   152,   153,   154,   157,   160,
-     161,   177,   182,    62,     9,    17,    21,    31,    32,    64,
-     195,    24,    60,    83,    84,     3,    86,    88,     3,   134,
-     136,   137,    17,    36,    53,    59,   137,   139,   144,   148,
-     149,   150,   157,   136,   125,   130,   111,    59,   137,   155,
-     125,   134,   114,    35,    67,   133,    71,   123,   182,   189,
-     122,   133,   119,    59,    96,    97,   137,    59,    93,   135,
-     137,   181,   124,   124,   124,   124,   124,   124,    36,    53,
-     123,   131,   143,   149,   151,   157,   124,   124,    11,   123,
-     188,    62,    59,    94,   181,     4,    33,    34,    36,    37,
+     113,   121,   124,   126,   127,   128,   129,   133,   137,   140,
+     142,   143,   148,   149,   152,   155,   156,   157,   160,   163,
+     164,   180,   185,    62,     9,    17,    21,    31,    32,    64,
+     198,    24,    60,    83,    84,     3,    86,    88,     3,   137,
+     139,   140,    17,    36,    53,    59,   140,   142,   147,   151,
+     152,   153,   160,   139,   128,   133,   111,    59,   140,   158,
+     128,   137,   114,    35,    67,   136,    71,   126,   185,   192,
+     125,   136,   122,    59,    96,    97,   140,    59,    93,   138,
+     140,   184,   127,   127,   127,   127,   127,   127,    36,    53,
+     126,   134,   146,   152,   154,   160,   127,   127,    11,   126,
+     191,    62,    59,    94,   184,     4,    33,    34,    36,    37,
       38,    39,    40,    42,    43,    44,    45,    46,    47,    48,
       49,    50,    51,    52,    53,    54,    55,    56,    67,    59,
-      63,    71,    66,    59,   133,     1,   133,     5,    65,    75,
-     138,   196,    59,   156,   196,    24,   196,   197,   196,    64,
-      62,   186,    88,    59,    36,    59,   142,   148,   149,   150,
-     151,   157,   142,   142,    63,    98,   107,   108,   109,   182,
-     190,    11,   132,   137,   141,   142,   173,   174,   175,    59,
-      67,   158,   112,   190,    24,    59,    68,   134,   167,   169,
-     171,   142,    35,    53,    59,    68,   134,   166,   168,   169,
-     170,   180,   112,    60,    97,   165,   142,    60,    93,   163,
-      65,    75,   142,     8,   143,    60,    72,    72,    60,    94,
-      65,   142,   123,   123,   123,   123,   123,   123,   123,   123,
-     123,   123,   123,   123,   123,   123,   123,   123,   123,   123,
-     123,   123,   123,   127,    60,   131,   183,    59,   137,   123,
-     188,   178,   123,   127,     1,    67,    91,   100,   176,   177,
-     179,   182,   182,   123,     8,    17,    22,    23,    24,    29,
-      36,    53,    65,    71,   138,   198,   200,   201,   202,   137,
-     203,   211,   158,    59,     3,   198,   198,    83,    60,   175,
-       8,   142,    60,   137,    35,   105,     5,    65,    62,   142,
-     132,   141,    75,   187,    60,   175,   179,   115,    62,    63,
-      24,   169,    59,   172,    62,   186,    72,   104,    59,   170,
-      53,   170,    62,   186,     3,   194,    75,   142,   120,    62,
-     186,    62,   186,   182,   135,    65,    36,    59,   142,   148,
-     149,   150,   157,    67,   142,   142,    62,   186,   182,    65,
-      67,   123,   128,   129,   184,   185,    11,    75,   187,    31,
-     131,    72,    66,   176,    60,   185,   101,    62,    68,    36,
-      59,   199,   200,   202,    59,    67,    71,    67,     8,   198,
-       3,    50,    59,   137,   208,   209,     3,    72,    65,    11,
-     198,    60,    75,    62,   191,   211,    62,    62,    62,    60,
-      60,   106,    26,    26,   190,   173,    59,   137,   147,   148,
-     149,   150,   151,   157,   159,    60,    68,   105,   190,   137,
-      60,   175,   171,    68,   142,     7,    12,    68,    99,   102,
-     170,   194,   170,    60,   168,    68,   134,   194,    35,    97,
-      60,    93,    60,   182,   142,   127,    94,    95,   164,   181,
-      60,   182,   127,    66,    75,   187,    68,    75,   187,   131,
-      60,    60,    60,   188,    68,   179,   176,   198,   201,   191,
-      24,   137,   138,   193,   198,   205,   213,   198,   137,   192,
-     204,   212,   198,     3,   208,    62,    72,   198,   209,   198,
-     194,   137,   203,    60,   179,   123,   123,    62,   175,    59,
-     159,   116,    60,   183,    66,   103,    60,    60,   194,   104,
-      60,   185,    62,   186,   142,   185,   123,   129,   128,   129,
-      60,    72,    68,    60,    60,    59,    68,    62,    72,   198,
-      68,    62,    49,   198,    62,   194,    59,    59,   198,   206,
-     207,    68,   190,    60,   175,    14,   117,   159,     5,    65,
-      66,    75,   179,   194,   194,    68,    68,    95,    60,    68,
-     206,   191,   205,   198,   194,   204,   208,   191,   191,    60,
-     100,   113,   123,   123,    60,    60,    60,    60,   159,    66,
-      66,   206,   206
+      63,    71,    66,    59,   136,     1,   136,     5,    65,    75,
+     141,   199,    59,   159,   199,    24,   199,   200,   199,    64,
+      62,   189,    88,    59,    36,    59,   145,   151,   152,   153,
+     154,   160,   145,   145,    63,    98,   107,   108,   109,   185,
+     193,    11,   135,   140,   144,   145,   176,   177,   178,    59,
+      67,   161,   112,   193,    24,    59,    68,   137,   170,   172,
+     174,   145,    35,    53,    59,    68,   137,   169,   171,   172,
+     173,   183,   112,    60,    97,   168,   145,    60,    93,   166,
+      65,    75,   145,     8,   146,    60,    72,    72,    60,    94,
+      65,   145,   126,   126,   126,   126,   126,   126,   126,   126,
+     126,   126,   126,   126,   126,   126,   126,   126,   126,   126,
+     126,   126,   126,   130,    60,   134,   186,    59,   140,   126,
+     191,   181,   126,   130,     1,    67,    91,   100,   179,   180,
+     182,   185,   185,   126,     8,    17,    22,    23,    24,    29,
+      36,    53,    65,    71,   141,   201,   203,   204,   205,   140,
+     206,   214,   161,    59,     3,   201,   201,    83,    60,   178,
+       8,   145,    60,   140,    35,   105,     5,    65,    62,   145,
+     135,   144,    75,   190,    60,   178,   182,   115,    62,    63,
+      24,   172,    59,   175,    62,   189,    72,   104,    59,   173,
+      53,   173,    62,   189,     3,   197,    75,   145,   123,    62,
+     189,    62,   189,   185,   138,    65,    36,    59,   145,   151,
+     152,   153,   160,    67,   145,   145,    62,   189,   185,    65,
+      67,   126,   131,   132,   187,   188,    11,    75,   190,    31,
+     134,    72,    66,   179,    60,   188,   101,    62,    68,    36,
+      59,   202,   203,   205,    59,    67,    71,    67,     8,   201,
+       3,    50,    59,   140,   211,   212,     3,    72,    65,    11,
+     201,    60,    75,    62,   194,   214,    62,    62,    62,    60,
+      60,   106,    26,    26,   193,   176,    59,   140,   150,   151,
+     152,   153,   154,   160,   162,    60,    68,   105,   193,   140,
+      60,   178,   174,    68,   145,     7,    12,    68,    99,   102,
+     173,   197,   173,    60,   171,    68,   137,   197,    35,    97,
+      60,    93,    60,   185,   145,   130,    94,    95,   167,   184,
+      60,   185,   130,    66,    75,   190,    68,    75,   190,   134,
+      60,    60,    60,   191,    68,   182,   179,   201,   204,   194,
+      24,   140,   141,   196,   201,   208,   216,   201,   140,   195,
+     207,   215,   201,     3,   211,    62,    72,   201,   212,   201,
+     197,   140,   206,    60,   182,   126,   126,    62,   178,    59,
+     162,   116,    60,   186,    66,   103,    60,    60,   197,   104,
+      60,   188,    62,   189,   145,   188,   126,   132,   131,   132,
+      60,    72,    68,    60,    60,    59,    68,    62,    72,   201,
+      68,    62,    49,   201,    62,   197,    59,    59,   201,   209,
+     210,    68,   193,    60,   178,   119,   162,     5,    65,    66,
+      75,   182,   197,   197,    68,    68,    95,    60,    68,   209,
+     194,   208,   201,   197,   207,   211,   194,   194,    60,    14,
+     117,   120,   126,   126,    60,    60,    60,    60,   162,    20,
+     100,    66,    66,   209,   209,   118,   112,   105
 };
 
 #define yyerrok		(yyerrstatus = 0)
@@ -1537,78 +1571,50 @@ static const yytype_uint8 yystos[] =
 
 /* Like YYERROR except do call yyerror.  This remains here temporarily
    to ease the transition to the new meaning of YYERROR, for GCC.
-   Once GCC version 2 has supplanted version 1, this can go.  */
+   Once GCC version 2 has supplanted version 1, this can go.  However,
+   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
+   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
+   discussed.  */
 
 #define YYFAIL		goto yyerrlab
+#if defined YYFAIL
+  /* This is here to suppress warnings from the GCC cpp's
+     -Wunused-macros.  Normally we don't worry about that warning, but
+     some users do, and we want to make it easy for users to remove
+     YYFAIL uses, which will produce warnings from Bison 2.5.  */
+#endif
 
 #define YYRECOVERING()  (!!yyerrstatus)
 
-#define YYBACKUP(Token, Value)					\
-do								\
-  if (yychar == YYEMPTY && yylen == 1)				\
-    {								\
-      yychar = (Token);						\
-      yylval = (Value);						\
-      yytoken = YYTRANSLATE (yychar);				\
-      YYPOPSTACK (1);						\
-      goto yybackup;						\
-    }								\
-  else								\
-    {								\
+#define YYBACKUP(Token, Value)                                  \
+do                                                              \
+  if (yychar == YYEMPTY)                                        \
+    {                                                           \
+      yychar = (Token);                                         \
+      yylval = (Value);                                         \
+      YYPOPSTACK (yylen);                                       \
+      yystate = *yyssp;                                         \
+      goto yybackup;                                            \
+    }                                                           \
+  else                                                          \
+    {                                                           \
       yyerror (YY_("syntax error: cannot back up")); \
       YYERROR;							\
     }								\
 while (YYID (0))
 
-
+/* Error token number */
 #define YYTERROR	1
 #define YYERRCODE	256
 
 
-/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
-   If N is 0, then set CURRENT to the empty location which ends
-   the previous symbol: RHS[0] (always defined).  */
-
-#define YYRHSLOC(Rhs, K) ((Rhs)[K])
-#ifndef YYLLOC_DEFAULT
-# define YYLLOC_DEFAULT(Current, Rhs, N)				\
-    do									\
-      if (YYID (N))                                                    \
-	{								\
-	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
-	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
-	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
-	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
-	}								\
-      else								\
-	{								\
-	  (Current).first_line   = (Current).last_line   =		\
-	    YYRHSLOC (Rhs, 0).last_line;				\
-	  (Current).first_column = (Current).last_column =		\
-	    YYRHSLOC (Rhs, 0).last_column;				\
-	}								\
-    while (YYID (0))
-#endif
-
-
-/* YY_LOCATION_PRINT -- Print the location on the stream.
-   This macro was not mandated originally: define only if we know
-   we won't break user code: when these are the locations we know.  */
-
+/* This macro is provided for backward compatibility. */
 #ifndef YY_LOCATION_PRINT
-# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
-#  define YY_LOCATION_PRINT(File, Loc)			\
-     fprintf (File, "%d.%d-%d.%d",			\
-	      (Loc).first_line, (Loc).first_column,	\
-	      (Loc).last_line,  (Loc).last_column)
-# else
-#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
-# endif
+# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
 #endif
 
 
 /* YYLEX -- calling `yylex' with the right arguments.  */
-
 #ifdef YYLEX_PARAM
 # define YYLEX yylex (YYLEX_PARAM)
 #else
@@ -1658,6 +1664,8 @@ yy_symbol_value_print (yyoutput, yytype, yyvaluep)
     YYSTYPE const * const yyvaluep;
 #endif
 {
+  FILE *yyo = yyoutput;
+  YYUSE (yyo);
   if (!yyvaluep)
     return;
 # ifdef YYPRINT
@@ -1707,17 +1715,20 @@ yy_symbol_print (yyoutput, yytype, yyvaluep)
 #if (defined __STDC__ || defined __C99__FUNC__ \
      || defined __cplusplus || defined _MSC_VER)
 static void
-yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
+yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
 #else
 static void
-yy_stack_print (bottom, top)
-    yytype_int16 *bottom;
-    yytype_int16 *top;
+yy_stack_print (yybottom, yytop)
+    yytype_int16 *yybottom;
+    yytype_int16 *yytop;
 #endif
 {
   YYFPRINTF (stderr, "Stack now");
-  for (; bottom <= top; ++bottom)
-    YYFPRINTF (stderr, " %d", *bottom);
+  for (; yybottom <= yytop; yybottom++)
+    {
+      int yybot = *yybottom;
+      YYFPRINTF (stderr, " %d", yybot);
+    }
   YYFPRINTF (stderr, "\n");
 }
 
@@ -1751,11 +1762,11 @@ yy_reduce_print (yyvsp, yyrule)
   /* The symbols being reduced.  */
   for (yyi = 0; yyi < yynrhs; yyi++)
     {
-      fprintf (stderr, "   $%d = ", yyi + 1);
+      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
       yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
 		       &(yyvsp[(yyi + 1) - (yynrhs)])
 		       		       );
-      fprintf (stderr, "\n");
+      YYFPRINTF (stderr, "\n");
     }
 }
 
@@ -1792,7 +1803,6 @@ int yydebug;
 # define YYMAXDEPTH 10000
 #endif
 
-
 
 #if YYERROR_VERBOSE
 
@@ -1895,115 +1905,142 @@ yytnamerr (char *yyres, const char *yystr)
 }
 # endif
 
-/* Copy into YYRESULT an error message about the unexpected token
-   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
-   including the terminating null byte.  If YYRESULT is null, do not
-   copy anything; just return the number of bytes that would be
-   copied.  As a special case, return 0 if an ordinary "syntax error"
-   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
-   size calculation.  */
-static YYSIZE_T
-yysyntax_error (char *yyresult, int yystate, int yychar)
-{
-  int yyn = yypact[yystate];
+/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
+   about the unexpected token YYTOKEN for the state stack whose top is
+   YYSSP.
 
-  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
-    return 0;
-  else
-    {
-      int yytype = YYTRANSLATE (yychar);
-      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
-      YYSIZE_T yysize = yysize0;
-      YYSIZE_T yysize1;
-      int yysize_overflow = 0;
-      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
-      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
-      int yyx;
-
-# if 0
-      /* This is so xgettext sees the translatable formats that are
-	 constructed on the fly.  */
-      YY_("syntax error, unexpected %s");
-      YY_("syntax error, unexpected %s, expecting %s");
-      YY_("syntax error, unexpected %s, expecting %s or %s");
-      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
-      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
-# endif
-      char *yyfmt;
-      char const *yyf;
-      static char const yyunexpected[] = "syntax error, unexpected %s";
-      static char const yyexpecting[] = ", expecting %s";
-      static char const yyor[] = " or %s";
-      char yyformat[sizeof yyunexpected
-		    + sizeof yyexpecting - 1
-		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
-		       * (sizeof yyor - 1))];
-      char const *yyprefix = yyexpecting;
-
-      /* Start YYX at -YYN if negative to avoid negative indexes in
-	 YYCHECK.  */
-      int yyxbegin = yyn < 0 ? -yyn : 0;
-
-      /* Stay within bounds of both yycheck and yytname.  */
-      int yychecklim = YYLAST - yyn + 1;
-      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
-      int yycount = 1;
-
-      yyarg[0] = yytname[yytype];
-      yyfmt = yystpcpy (yyformat, yyunexpected);
-
-      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
-	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
-	  {
-	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
-	      {
-		yycount = 1;
-		yysize = yysize0;
-		yyformat[sizeof yyunexpected - 1] = '\0';
-		break;
-	      }
-	    yyarg[yycount++] = yytname[yyx];
-	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
-	    yysize_overflow |= (yysize1 < yysize);
-	    yysize = yysize1;
-	    yyfmt = yystpcpy (yyfmt, yyprefix);
-	    yyprefix = yyor;
-	  }
+   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
+   not large enough to hold the message.  In that case, also set
+   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
+   required number of bytes is too large to store.  */
+static int
+yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
+                yytype_int16 *yyssp, int yytoken)
+{
+  YYSIZE_T yysize0 = yytnamerr (YY_NULL, yytname[yytoken]);
+  YYSIZE_T yysize = yysize0;
+  YYSIZE_T yysize1;
+  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
+  /* Internationalized format string. */
+  const char *yyformat = YY_NULL;
+  /* Arguments of yyformat. */
+  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
+  /* Number of reported tokens (one for the "unexpected", one per
+     "expected"). */
+  int yycount = 0;
+
+  /* There are many possibilities here to consider:
+     - Assume YYFAIL is not used.  It's too flawed to consider.  See
+       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
+       for details.  YYERROR is fine as it does not invoke this
+       function.
+     - If this state is a consistent state with a default action, then
+       the only way this function was invoked is if the default action
+       is an error action.  In that case, don't check for expected
+       tokens because there are none.
+     - The only way there can be no lookahead present (in yychar) is if
+       this state is a consistent state with a default action.  Thus,
+       detecting the absence of a lookahead is sufficient to determine
+       that there is no unexpected or expected token to report.  In that
+       case, just report a simple "syntax error".
+     - Don't assume there isn't a lookahead just because this state is a
+       consistent state with a default action.  There might have been a
+       previous inconsistent state, consistent state with a non-default
+       action, or user semantic action that manipulated yychar.
+     - Of course, the expected token list depends on states to have
+       correct lookahead information, and it depends on the parser not
+       to perform extra reductions after fetching a lookahead from the
+       scanner and before detecting a syntax error.  Thus, state merging
+       (from LALR or IELR) and default reductions corrupt the expected
+       token list.  However, the list is correct for canonical LR with
+       one exception: it will still contain any token that will not be
+       accepted due to an error action in a later state.
+  */
+  if (yytoken != YYEMPTY)
+    {
+      int yyn = yypact[*yyssp];
+      yyarg[yycount++] = yytname[yytoken];
+      if (!yypact_value_is_default (yyn))
+        {
+          /* Start YYX at -YYN if negative to avoid negative indexes in
+             YYCHECK.  In other words, skip the first -YYN actions for
+             this state because they are default actions.  */
+          int yyxbegin = yyn < 0 ? -yyn : 0;
+          /* Stay within bounds of both yycheck and yytname.  */
+          int yychecklim = YYLAST - yyn + 1;
+          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
+          int yyx;
+
+          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
+            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
+                && !yytable_value_is_error (yytable[yyx + yyn]))
+              {
+                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
+                  {
+                    yycount = 1;
+                    yysize = yysize0;
+                    break;
+                  }
+                yyarg[yycount++] = yytname[yyx];
+                yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
+                if (! (yysize <= yysize1
+                       && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
+                  return 2;
+                yysize = yysize1;
+              }
+        }
+    }
 
-      yyf = YY_(yyformat);
-      yysize1 = yysize + yystrlen (yyf);
-      yysize_overflow |= (yysize1 < yysize);
-      yysize = yysize1;
+  switch (yycount)
+    {
+# define YYCASE_(N, S)                      \
+      case N:                               \
+        yyformat = S;                       \
+      break
+      YYCASE_(0, YY_("syntax error"));
+      YYCASE_(1, YY_("syntax error, unexpected %s"));
+      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
+      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
+      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
+      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
+# undef YYCASE_
+    }
 
-      if (yysize_overflow)
-	return YYSIZE_MAXIMUM;
+  yysize1 = yysize + yystrlen (yyformat);
+  if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
+    return 2;
+  yysize = yysize1;
 
-      if (yyresult)
-	{
-	  /* Avoid sprintf, as that infringes on the user's name space.
-	     Don't have undefined behavior even if the translation
-	     produced a string with the wrong number of "%s"s.  */
-	  char *yyp = yyresult;
-	  int yyi = 0;
-	  while ((*yyp = *yyf) != '\0')
-	    {
-	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
-		{
-		  yyp += yytnamerr (yyp, yyarg[yyi++]);
-		  yyf += 2;
-		}
-	      else
-		{
-		  yyp++;
-		  yyf++;
-		}
-	    }
-	}
-      return yysize;
+  if (*yymsg_alloc < yysize)
+    {
+      *yymsg_alloc = 2 * yysize;
+      if (! (yysize <= *yymsg_alloc
+             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
+        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
+      return 1;
     }
+
+  /* Avoid sprintf, as that infringes on the user's name space.
+     Don't have undefined behavior even if the translation
+     produced a string with the wrong number of "%s"s.  */
+  {
+    char *yyp = *yymsg;
+    int yyi = 0;
+    while ((*yyp = *yyformat) != '\0')
+      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
+        {
+          yyp += yytnamerr (yyp, yyarg[yyi++]);
+          yyformat += 2;
+        }
+      else
+        {
+          yyp++;
+          yyformat++;
+        }
+  }
+  return 0;
 }
 #endif /* YYERROR_VERBOSE */
-
 
 /*-----------------------------------------------.
 | Release the memory associated to this symbol.  |
@@ -2035,37 +2072,29 @@ yydestruct (yymsg, yytype, yyvaluep)
 	break;
     }
 }
-
-
-/* Prevent warnings from -Wmissing-prototypes.  */
 
-#ifdef YYPARSE_PARAM
-#if defined __STDC__ || defined __cplusplus
-int yyparse (void *YYPARSE_PARAM);
-#else
-int yyparse ();
-#endif
-#else /* ! YYPARSE_PARAM */
-#if defined __STDC__ || defined __cplusplus
-int yyparse (void);
-#else
-int yyparse ();
-#endif
-#endif /* ! YYPARSE_PARAM */
 
 
 
-/* The look-ahead symbol.  */
+/* The lookahead symbol.  */
 int yychar, yystate;
 
-/* The semantic value of the look-ahead symbol.  */
-YYSTYPE yylval;
+
+#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+# define YY_IGNORE_MAYBE_UNINITIALIZED_END
+#endif
+#ifndef YY_INITIAL_VALUE
+# define YY_INITIAL_VALUE(Value) /* Nothing. */
+#endif
+
+/* The semantic value of the lookahead symbol.  */
+YYSTYPE yylval YY_INITIAL_VALUE(yyval_default);
 
 /* Number of syntax errors so far.  */
 int yynerrs;
 
 
-
 /*----------.
 | yyparse.  |
 `----------*/
@@ -2092,13 +2121,36 @@ yyparse ()
 #endif
 #endif
 {
-  
+    /* Number of tokens to shift before error messages enabled.  */
+    int yyerrstatus;
+
+    /* The stacks and their tools:
+       `yyss': related to states.
+       `yyvs': related to semantic values.
+
+       Refer to the stacks through separate pointers, to allow yyoverflow
+       to reallocate them elsewhere.  */
+
+    /* The state stack.  */
+    yytype_int16 yyssa[YYINITDEPTH];
+    yytype_int16 *yyss;
+    yytype_int16 *yyssp;
+
+    /* The semantic value stack.  */
+    YYSTYPE yyvsa[YYINITDEPTH];
+    YYSTYPE *yyvs;
+    YYSTYPE *yyvsp;
+
+    YYSIZE_T yystacksize;
+
   int yyn;
   int yyresult;
-  /* Number of tokens to shift before error messages enabled.  */
-  int yyerrstatus;
-  /* Look-ahead token as an internal (translated) token number.  */
+  /* Lookahead token as an internal (translated) token number.  */
   int yytoken = 0;
+  /* The variables used to return semantic value and location from the
+     action routines.  */
+  YYSTYPE yyval;
+
 #if YYERROR_VERBOSE
   /* Buffer for error messages, and its allocated size.  */
   char yymsgbuf[128];
@@ -2106,54 +2158,22 @@ yyparse ()
   YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
 #endif
 
-  /* Three stacks and their tools:
-     `yyss': related to states,
-     `yyvs': related to semantic values,
-     `yyls': related to locations.
-
-     Refer to the stacks thru separate pointers, to allow yyoverflow
-     to reallocate them elsewhere.  */
-
-  /* The state stack.  */
-  yytype_int16 yyssa[YYINITDEPTH];
-  yytype_int16 *yyss = yyssa;
-  yytype_int16 *yyssp;
-
-  /* The semantic value stack.  */
-  YYSTYPE yyvsa[YYINITDEPTH];
-  YYSTYPE *yyvs = yyvsa;
-  YYSTYPE *yyvsp;
-
-
-
 #define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))
 
-  YYSIZE_T yystacksize = YYINITDEPTH;
-
-  /* The variables used to return semantic value and location from the
-     action routines.  */
-  YYSTYPE yyval;
-
-
   /* The number of symbols on the RHS of the reduced rule.
      Keep to zero when no symbol should be popped.  */
   int yylen = 0;
 
+  yyssp = yyss = yyssa;
+  yyvsp = yyvs = yyvsa;
+  yystacksize = YYINITDEPTH;
+
   YYDPRINTF ((stderr, "Starting parse\n"));
 
   yystate = 0;
   yyerrstatus = 0;
   yynerrs = 0;
-  yychar = YYEMPTY;		/* Cause a token to be read.  */
-
-  /* Initialize stack pointers.
-     Waste one element of value and location stack
-     so that they stay on the same level as the state stack.
-     The wasted elements are never initialized.  */
-
-  yyssp = yyss;
-  yyvsp = yyvs;
-
+  yychar = YYEMPTY; /* Cause a token to be read.  */
   goto yysetstate;
 
 /*------------------------------------------------------------.
@@ -2180,7 +2200,6 @@ yyparse ()
 	YYSTYPE *yyvs1 = yyvs;
 	yytype_int16 *yyss1 = yyss;
 
-
 	/* Each stack pointer address is followed by the size of the
 	   data in use in that stack, in bytes.  This used to be a
 	   conditional around just the two extra args, but that might
@@ -2188,7 +2207,6 @@ yyparse ()
 	yyoverflow (YY_("memory exhausted"),
 		    &yyss1, yysize * sizeof (*yyssp),
 		    &yyvs1, yysize * sizeof (*yyvsp),
-
 		    &yystacksize);
 
 	yyss = yyss1;
@@ -2211,9 +2229,8 @@ yyparse ()
 	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
 	if (! yyptr)
 	  goto yyexhaustedlab;
-	YYSTACK_RELOCATE (yyss);
-	YYSTACK_RELOCATE (yyvs);
-
+	YYSTACK_RELOCATE (yyss_alloc, yyss);
+	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
 #  undef YYSTACK_RELOCATE
 	if (yyss1 != yyssa)
 	  YYSTACK_FREE (yyss1);
@@ -2224,7 +2241,6 @@ yyparse ()
       yyssp = yyss + yysize - 1;
       yyvsp = yyvs + yysize - 1;
 
-
       YYDPRINTF ((stderr, "Stack size increased to %lu\n",
 		  (unsigned long int) yystacksize));
 
@@ -2234,6 +2250,9 @@ yyparse ()
 
   YYDPRINTF ((stderr, "Entering state %d\n", yystate));
 
+  if (yystate == YYFINAL)
+    YYACCEPT;
+
   goto yybackup;
 
 /*-----------.
@@ -2242,16 +2261,16 @@ yyparse ()
 yybackup:
 
   /* Do appropriate processing given the current state.  Read a
-     look-ahead token if we need one and don't already have one.  */
+     lookahead token if we need one and don't already have one.  */
 
-  /* First try to decide what to do without reference to look-ahead token.  */
+  /* First try to decide what to do without reference to lookahead token.  */
   yyn = yypact[yystate];
-  if (yyn == YYPACT_NINF)
+  if (yypact_value_is_default (yyn))
     goto yydefault;
 
-  /* Not known => get a look-ahead token if don't already have one.  */
+  /* Not known => get a lookahead token if don't already have one.  */
 
-  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
+  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
   if (yychar == YYEMPTY)
     {
       YYDPRINTF ((stderr, "Reading a token: "));
@@ -2277,29 +2296,27 @@ yybackup:
   yyn = yytable[yyn];
   if (yyn <= 0)
     {
-      if (yyn == 0 || yyn == YYTABLE_NINF)
-	goto yyerrlab;
+      if (yytable_value_is_error (yyn))
+        goto yyerrlab;
       yyn = -yyn;
       goto yyreduce;
     }
 
-  if (yyn == YYFINAL)
-    YYACCEPT;
-
   /* Count tokens shifted since error; after three, turn off error
      status.  */
   if (yyerrstatus)
     yyerrstatus--;
 
-  /* Shift the look-ahead token.  */
+  /* Shift the lookahead token.  */
   YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
 
-  /* Discard the shifted token unless it is eof.  */
-  if (yychar != YYEOF)
-    yychar = YYEMPTY;
+  /* Discard the shifted token.  */
+  yychar = YYEMPTY;
 
   yystate = yyn;
+  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
   *++yyvsp = yylval;
+  YY_IGNORE_MAYBE_UNINITIALIZED_END
 
   goto yynewstate;
 
@@ -2336,6 +2353,7 @@ yyreduce:
   switch (yyn)
     {
         case 2:
+/* Line 1778 of yacc.c  */
 #line 128 "go.y"
     {
 		xtop = concat(xtop, (yyvsp[(4) - (4)].list));
@@ -2343,6 +2361,7 @@ yyreduce:
     break;
 
   case 3:
+/* Line 1778 of yacc.c  */
 #line 134 "go.y"
     {
 		prevlineno = lineno;
@@ -2353,6 +2372,7 @@ yyreduce:
     break;
 
   case 4:
+/* Line 1778 of yacc.c  */
 #line 141 "go.y"
     {
 		mkpackage((yyvsp[(2) - (3)].sym)->name);
@@ -2360,6 +2380,7 @@ yyreduce:
     break;
 
   case 5:
+/* Line 1778 of yacc.c  */
 #line 151 "go.y"
     {
 		importpkg = runtimepkg;
@@ -2373,6 +2394,7 @@ yyreduce:
     break;
 
   case 6:
+/* Line 1778 of yacc.c  */
 #line 162 "go.y"
     {
 		importpkg = nil;
@@ -2380,6 +2402,7 @@ yyreduce:
     break;
 
   case 12:
+/* Line 1778 of yacc.c  */
 #line 176 "go.y"
     {
 		Pkg *ipkg;
@@ -2416,6 +2439,7 @@ yyreduce:
     break;
 
   case 13:
+/* Line 1778 of yacc.c  */
 #line 209 "go.y"
     {
 		// When an invalid import path is passed to importfile,
@@ -2428,6 +2452,7 @@ yyreduce:
     break;
 
   case 16:
+/* Line 1778 of yacc.c  */
 #line 224 "go.y"
     {
 		// import with original name
@@ -2438,6 +2463,7 @@ yyreduce:
     break;
 
   case 17:
+/* Line 1778 of yacc.c  */
 #line 231 "go.y"
     {
 		// import with given name
@@ -2448,6 +2474,7 @@ yyreduce:
     break;
 
   case 18:
+/* Line 1778 of yacc.c  */
 #line 238 "go.y"
     {
 		// import into my name space
@@ -2458,6 +2485,7 @@ yyreduce:
     break;
 
   case 19:
+/* Line 1778 of yacc.c  */
 #line 247 "go.y"
     {
 		if(importpkg->name == nil) {
@@ -2473,6 +2501,7 @@ yyreduce:
     break;
 
   case 21:
+/* Line 1778 of yacc.c  */
 #line 261 "go.y"
     {
 		if(strcmp((yyvsp[(1) - (1)].sym)->name, "safe") == 0)
@@ -2481,6 +2510,7 @@ yyreduce:
     break;
 
   case 22:
+/* Line 1778 of yacc.c  */
 #line 267 "go.y"
     {
 		defercheckwidth();
@@ -2488,6 +2518,7 @@ yyreduce:
     break;
 
   case 23:
+/* Line 1778 of yacc.c  */
 #line 271 "go.y"
     {
 		resumecheckwidth();
@@ -2496,6 +2527,7 @@ yyreduce:
     break;
 
   case 24:
+/* Line 1778 of yacc.c  */
 #line 280 "go.y"
     {
 		yyerror("empty top-level declaration");
@@ -2504,6 +2536,7 @@ yyreduce:
     break;
 
   case 26:
+/* Line 1778 of yacc.c  */
 #line 286 "go.y"
     {
 		(yyval.list) = list1((yyvsp[(1) - (1)].node));
@@ -2511,6 +2544,7 @@ yyreduce:
     break;
 
   case 27:
+/* Line 1778 of yacc.c  */
 #line 290 "go.y"
     {
 		yyerror("non-declaration statement outside function body");
@@ -2519,6 +2553,7 @@ yyreduce:
     break;
 
   case 28:
+/* Line 1778 of yacc.c  */
 #line 295 "go.y"
     {
 		(yyval.list) = nil;
@@ -2526,6 +2561,7 @@ yyreduce:
     break;
 
   case 29:
+/* Line 1778 of yacc.c  */
 #line 301 "go.y"
     {
 		(yyval.list) = (yyvsp[(2) - (2)].list);
@@ -2533,6 +2569,7 @@ yyreduce:
     break;
 
   case 30:
+/* Line 1778 of yacc.c  */
 #line 305 "go.y"
     {
 		(yyval.list) = (yyvsp[(3) - (5)].list);
@@ -2540,6 +2577,7 @@ yyreduce:
     break;
 
   case 31:
+/* Line 1778 of yacc.c  */
 #line 309 "go.y"
     {
 		(yyval.list) = nil;
@@ -2547,6 +2585,7 @@ yyreduce:
     break;
 
   case 32:
+/* Line 1778 of yacc.c  */
 #line 313 "go.y"
     {
 		(yyval.list) = (yyvsp[(2) - (2)].list);
@@ -2556,6 +2595,7 @@ yyreduce:
     break;
 
   case 33:
+/* Line 1778 of yacc.c  */
 #line 319 "go.y"
     {
 		(yyval.list) = (yyvsp[(3) - (5)].list);
@@ -2565,6 +2605,7 @@ yyreduce:
     break;
 
   case 34:
+/* Line 1778 of yacc.c  */
 #line 325 "go.y"
     {
 		(yyval.list) = concat((yyvsp[(3) - (7)].list), (yyvsp[(5) - (7)].list));
@@ -2574,6 +2615,7 @@ yyreduce:
     break;
 
   case 35:
+/* Line 1778 of yacc.c  */
 #line 331 "go.y"
     {
 		(yyval.list) = nil;
@@ -2582,6 +2624,7 @@ yyreduce:
     break;
 
   case 36:
+/* Line 1778 of yacc.c  */
 #line 336 "go.y"
     {
 		(yyval.list) = list1((yyvsp[(2) - (2)].node));
@@ -2589,6 +2632,7 @@ yyreduce:
     break;
 
   case 37:
+/* Line 1778 of yacc.c  */
 #line 340 "go.y"
     {
 		(yyval.list) = (yyvsp[(3) - (5)].list);
@@ -2596,6 +2640,7 @@ yyreduce:
     break;
 
   case 38:
+/* Line 1778 of yacc.c  */
 #line 344 "go.y"
     {
 		(yyval.list) = nil;
@@ -2603,6 +2648,7 @@ yyreduce:
     break;
 
   case 39:
+/* Line 1778 of yacc.c  */
 #line 350 "go.y"
     {
 		iota = 0;
@@ -2610,6 +2656,7 @@ yyreduce:
     break;
 
   case 40:
+/* Line 1778 of yacc.c  */
 #line 356 "go.y"
     {
 		(yyval.list) = variter((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node), nil);
@@ -2617,6 +2664,7 @@ yyreduce:
     break;
 
   case 41:
+/* Line 1778 of yacc.c  */
 #line 360 "go.y"
     {
 		(yyval.list) = variter((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].node), (yyvsp[(4) - (4)].list));
@@ -2624,6 +2672,7 @@ yyreduce:
     break;
 
   case 42:
+/* Line 1778 of yacc.c  */
 #line 364 "go.y"
     {
 		(yyval.list) = variter((yyvsp[(1) - (3)].list), nil, (yyvsp[(3) - (3)].list));
@@ -2631,6 +2680,7 @@ yyreduce:
     break;
 
   case 43:
+/* Line 1778 of yacc.c  */
 #line 370 "go.y"
     {
 		(yyval.list) = constiter((yyvsp[(1) - (4)].list), (yyvsp[(2) - (4)].node), (yyvsp[(4) - (4)].list));
@@ -2638,6 +2688,7 @@ yyreduce:
     break;
 
   case 44:
+/* Line 1778 of yacc.c  */
 #line 374 "go.y"
     {
 		(yyval.list) = constiter((yyvsp[(1) - (3)].list), N, (yyvsp[(3) - (3)].list));
@@ -2645,6 +2696,7 @@ yyreduce:
     break;
 
   case 46:
+/* Line 1778 of yacc.c  */
 #line 381 "go.y"
     {
 		(yyval.list) = constiter((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node), nil);
@@ -2652,6 +2704,7 @@ yyreduce:
     break;
 
   case 47:
+/* Line 1778 of yacc.c  */
 #line 385 "go.y"
     {
 		(yyval.list) = constiter((yyvsp[(1) - (1)].list), N, nil);
@@ -2659,6 +2712,7 @@ yyreduce:
     break;
 
   case 48:
+/* Line 1778 of yacc.c  */
 #line 391 "go.y"
     {
 		// different from dclname because the name
@@ -2669,6 +2723,7 @@ yyreduce:
     break;
 
   case 49:
+/* Line 1778 of yacc.c  */
 #line 400 "go.y"
     {
 		(yyval.node) = typedcl1((yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].node), 1);
@@ -2676,6 +2731,7 @@ yyreduce:
     break;
 
   case 50:
+/* Line 1778 of yacc.c  */
 #line 406 "go.y"
     {
 		(yyval.node) = (yyvsp[(1) - (1)].node);
@@ -2683,6 +2739,7 @@ yyreduce:
     break;
 
   case 51:
+/* Line 1778 of yacc.c  */
 #line 410 "go.y"
     {
 		(yyval.node) = nod(OASOP, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
@@ -2691,6 +2748,7 @@ yyreduce:
     break;
 
   case 52:
+/* Line 1778 of yacc.c  */
 #line 415 "go.y"
     {
 		if((yyvsp[(1) - (3)].list)->next == nil && (yyvsp[(3) - (3)].list)->next == nil) {
@@ -2706,6 +2764,7 @@ yyreduce:
     break;
 
   case 53:
+/* Line 1778 of yacc.c  */
 #line 427 "go.y"
     {
 		if((yyvsp[(3) - (3)].list)->n->op == OTYPESW) {
@@ -2725,6 +2784,7 @@ yyreduce:
     break;
 
   case 54:
+/* Line 1778 of yacc.c  */
 #line 443 "go.y"
     {
 		(yyval.node) = nod(OASOP, (yyvsp[(1) - (2)].node), nodintconst(1));
@@ -2733,6 +2793,7 @@ yyreduce:
     break;
 
   case 55:
+/* Line 1778 of yacc.c  */
 #line 448 "go.y"
     {
 		(yyval.node) = nod(OASOP, (yyvsp[(1) - (2)].node), nodintconst(1));
@@ -2741,6 +2802,7 @@ yyreduce:
     break;
 
   case 56:
+/* Line 1778 of yacc.c  */
 #line 455 "go.y"
     {
 		Node *n, *nn;
@@ -2764,6 +2826,7 @@ yyreduce:
     break;
 
   case 57:
+/* Line 1778 of yacc.c  */
 #line 475 "go.y"
     {
 		Node *n;
@@ -2785,6 +2848,7 @@ yyreduce:
     break;
 
   case 58:
+/* Line 1778 of yacc.c  */
 #line 493 "go.y"
     {
 		// will be converted to OCASE
@@ -2797,6 +2861,7 @@ yyreduce:
     break;
 
   case 59:
+/* Line 1778 of yacc.c  */
 #line 502 "go.y"
     {
 		Node *n, *nn;
@@ -2816,6 +2881,7 @@ yyreduce:
     break;
 
   case 60:
+/* Line 1778 of yacc.c  */
 #line 520 "go.y"
     {
 		markdcl();
@@ -2823,6 +2889,7 @@ yyreduce:
     break;
 
   case 61:
+/* Line 1778 of yacc.c  */
 #line 524 "go.y"
     {
 		(yyval.node) = liststmt((yyvsp[(3) - (4)].list));
@@ -2831,6 +2898,7 @@ yyreduce:
     break;
 
   case 62:
+/* Line 1778 of yacc.c  */
 #line 531 "go.y"
     {
 		// If the last token read by the lexer was consumed
@@ -2844,6 +2912,7 @@ yyreduce:
     break;
 
   case 63:
+/* Line 1778 of yacc.c  */
 #line 541 "go.y"
     {
 		int last;
@@ -2866,6 +2935,7 @@ yyreduce:
     break;
 
   case 64:
+/* Line 1778 of yacc.c  */
 #line 561 "go.y"
     {
 		(yyval.list) = nil;
@@ -2873,6 +2943,7 @@ yyreduce:
     break;
 
   case 65:
+/* Line 1778 of yacc.c  */
 #line 565 "go.y"
     {
 		(yyval.list) = list((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node));
@@ -2880,6 +2951,7 @@ yyreduce:
     break;
 
   case 66:
+/* Line 1778 of yacc.c  */
 #line 571 "go.y"
     {
 		markdcl();
@@ -2887,6 +2959,7 @@ yyreduce:
     break;
 
   case 67:
+/* Line 1778 of yacc.c  */
 #line 575 "go.y"
     {
 		(yyval.list) = (yyvsp[(3) - (4)].list);
@@ -2895,6 +2968,7 @@ yyreduce:
     break;
 
   case 68:
+/* Line 1778 of yacc.c  */
 #line 582 "go.y"
     {
 		(yyval.node) = nod(ORANGE, N, (yyvsp[(4) - (4)].node));
@@ -2904,6 +2978,7 @@ yyreduce:
     break;
 
   case 69:
+/* Line 1778 of yacc.c  */
 #line 588 "go.y"
     {
 		(yyval.node) = nod(ORANGE, N, (yyvsp[(4) - (4)].node));
@@ -2914,6 +2989,7 @@ yyreduce:
     break;
 
   case 70:
+/* Line 1778 of yacc.c  */
 #line 597 "go.y"
     {
 		// init ; test ; incr
@@ -2928,6 +3004,7 @@ yyreduce:
     break;
 
   case 71:
+/* Line 1778 of yacc.c  */
 #line 608 "go.y"
     {
 		// normal test
@@ -2937,6 +3014,7 @@ yyreduce:
     break;
 
   case 73:
+/* Line 1778 of yacc.c  */
 #line 617 "go.y"
     {
 		(yyval.node) = (yyvsp[(1) - (2)].node);
@@ -2945,6 +3023,7 @@ yyreduce:
     break;
 
   case 74:
+/* Line 1778 of yacc.c  */
 #line 624 "go.y"
     {
 		markdcl();
@@ -2952,6 +3031,7 @@ yyreduce:
     break;
 
   case 75:
+/* Line 1778 of yacc.c  */
 #line 628 "go.y"
     {
 		(yyval.node) = (yyvsp[(3) - (3)].node);
@@ -2960,6 +3040,7 @@ yyreduce:
     break;
 
   case 76:
+/* Line 1778 of yacc.c  */
 #line 635 "go.y"
     {
 		// test
@@ -2969,6 +3050,7 @@ yyreduce:
     break;
 
   case 77:
+/* Line 1778 of yacc.c  */
 #line 641 "go.y"
     {
 		// init ; test
@@ -2980,6 +3062,7 @@ yyreduce:
     break;
 
   case 78:
+/* Line 1778 of yacc.c  */
 #line 652 "go.y"
     {
 		markdcl();
@@ -2987,6 +3070,7 @@ yyreduce:
     break;
 
   case 79:
+/* Line 1778 of yacc.c  */
 #line 656 "go.y"
     {
 		if((yyvsp[(3) - (3)].node)->ntest == N)
@@ -2995,6 +3079,7 @@ yyreduce:
     break;
 
   case 80:
+/* Line 1778 of yacc.c  */
 #line 661 "go.y"
     {
 		(yyvsp[(3) - (5)].node)->nbody = (yyvsp[(5) - (5)].list);
@@ -3002,45 +3087,91 @@ yyreduce:
     break;
 
   case 81:
+/* Line 1778 of yacc.c  */
 #line 665 "go.y"
     {
+		Node *n;
+		NodeList *nn;
+
+		(yyval.node) = (yyvsp[(3) - (8)].node);
+		n = (yyvsp[(3) - (8)].node);
 		popdcl();
-		(yyval.node) = (yyvsp[(3) - (7)].node);
-		if((yyvsp[(7) - (7)].node) != N)
-			(yyval.node)->nelse = list1((yyvsp[(7) - (7)].node));
+		for(nn = concat((yyvsp[(7) - (8)].list), (yyvsp[(8) - (8)].list)); nn; nn = nn->next) {
+			if(nn->n->op == OIF)
+				popdcl();
+			n->nelse = list1(nn->n);
+			n = nn->n;
+		}
 	}
     break;
 
   case 82:
-#line 673 "go.y"
+/* Line 1778 of yacc.c  */
+#line 682 "go.y"
     {
-		(yyval.node) = N;
+		markdcl();
 	}
     break;
 
   case 83:
-#line 677 "go.y"
+/* Line 1778 of yacc.c  */
+#line 686 "go.y"
     {
-		(yyval.node) = (yyvsp[(2) - (2)].node);
+		if((yyvsp[(4) - (5)].node)->ntest == N)
+			yyerror("missing condition in if statement");
+		(yyvsp[(4) - (5)].node)->nbody = (yyvsp[(5) - (5)].list);
+		(yyval.list) = list1((yyvsp[(4) - (5)].node));
 	}
     break;
 
   case 84:
-#line 681 "go.y"
+/* Line 1778 of yacc.c  */
+#line 694 "go.y"
     {
-		(yyval.node) = (yyvsp[(2) - (2)].node);
+		(yyval.list) = nil;
 	}
     break;
 
   case 85:
-#line 687 "go.y"
+/* Line 1778 of yacc.c  */
+#line 698 "go.y"
     {
-		markdcl();
+		(yyval.list) = concat((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].list));
 	}
     break;
 
   case 86:
-#line 691 "go.y"
+/* Line 1778 of yacc.c  */
+#line 703 "go.y"
+    {
+		(yyval.list) = nil;
+	}
+    break;
+
+  case 87:
+/* Line 1778 of yacc.c  */
+#line 707 "go.y"
+    {
+		NodeList *node;
+		
+		node = mal(sizeof *node);
+		node->n = (yyvsp[(2) - (2)].node);
+		node->end = node;
+		(yyval.list) = node;
+	}
+    break;
+
+  case 88:
+/* Line 1778 of yacc.c  */
+#line 718 "go.y"
+    {
+		markdcl();
+	}
+    break;
+
+  case 89:
+/* Line 1778 of yacc.c  */
+#line 722 "go.y"
     {
 		Node *n;
 		n = (yyvsp[(3) - (3)].node)->ntest;
@@ -3050,8 +3181,9 @@ yyreduce:
 	}
     break;
 
-  case 87:
-#line 699 "go.y"
+  case 90:
+/* Line 1778 of yacc.c  */
+#line 730 "go.y"
     {
 		(yyval.node) = (yyvsp[(3) - (7)].node);
 		(yyval.node)->op = OSWITCH;
@@ -3061,15 +3193,17 @@ yyreduce:
 	}
     break;
 
-  case 88:
-#line 709 "go.y"
+  case 91:
+/* Line 1778 of yacc.c  */
+#line 740 "go.y"
     {
 		typesw = nod(OXXX, typesw, N);
 	}
     break;
 
-  case 89:
-#line 713 "go.y"
+  case 92:
+/* Line 1778 of yacc.c  */
+#line 744 "go.y"
     {
 		(yyval.node) = nod(OSELECT, N, N);
 		(yyval.node)->lineno = typesw->lineno;
@@ -3078,155 +3212,177 @@ yyreduce:
 	}
     break;
 
-  case 91:
-#line 726 "go.y"
+  case 94:
+/* Line 1778 of yacc.c  */
+#line 757 "go.y"
     {
 		(yyval.node) = nod(OOROR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 92:
-#line 730 "go.y"
+  case 95:
+/* Line 1778 of yacc.c  */
+#line 761 "go.y"
     {
 		(yyval.node) = nod(OANDAND, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 93:
-#line 734 "go.y"
+  case 96:
+/* Line 1778 of yacc.c  */
+#line 765 "go.y"
     {
 		(yyval.node) = nod(OEQ, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 94:
-#line 738 "go.y"
+  case 97:
+/* Line 1778 of yacc.c  */
+#line 769 "go.y"
     {
 		(yyval.node) = nod(ONE, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 95:
-#line 742 "go.y"
+  case 98:
+/* Line 1778 of yacc.c  */
+#line 773 "go.y"
     {
 		(yyval.node) = nod(OLT, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 96:
-#line 746 "go.y"
+  case 99:
+/* Line 1778 of yacc.c  */
+#line 777 "go.y"
     {
 		(yyval.node) = nod(OLE, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 97:
-#line 750 "go.y"
+  case 100:
+/* Line 1778 of yacc.c  */
+#line 781 "go.y"
     {
 		(yyval.node) = nod(OGE, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 98:
-#line 754 "go.y"
+  case 101:
+/* Line 1778 of yacc.c  */
+#line 785 "go.y"
     {
 		(yyval.node) = nod(OGT, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 99:
-#line 758 "go.y"
+  case 102:
+/* Line 1778 of yacc.c  */
+#line 789 "go.y"
     {
 		(yyval.node) = nod(OADD, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 100:
-#line 762 "go.y"
+  case 103:
+/* Line 1778 of yacc.c  */
+#line 793 "go.y"
     {
 		(yyval.node) = nod(OSUB, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 101:
-#line 766 "go.y"
+  case 104:
+/* Line 1778 of yacc.c  */
+#line 797 "go.y"
     {
 		(yyval.node) = nod(OOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 102:
-#line 770 "go.y"
+  case 105:
+/* Line 1778 of yacc.c  */
+#line 801 "go.y"
     {
 		(yyval.node) = nod(OXOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 103:
-#line 774 "go.y"
+  case 106:
+/* Line 1778 of yacc.c  */
+#line 805 "go.y"
     {
 		(yyval.node) = nod(OMUL, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 104:
-#line 778 "go.y"
+  case 107:
+/* Line 1778 of yacc.c  */
+#line 809 "go.y"
     {
 		(yyval.node) = nod(ODIV, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 105:
-#line 782 "go.y"
+  case 108:
+/* Line 1778 of yacc.c  */
+#line 813 "go.y"
     {
 		(yyval.node) = nod(OMOD, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 106:
-#line 786 "go.y"
+  case 109:
+/* Line 1778 of yacc.c  */
+#line 817 "go.y"
     {
 		(yyval.node) = nod(OAND, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 107:
-#line 790 "go.y"
+  case 110:
+/* Line 1778 of yacc.c  */
+#line 821 "go.y"
     {
 		(yyval.node) = nod(OANDNOT, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 108:
-#line 794 "go.y"
+  case 111:
+/* Line 1778 of yacc.c  */
+#line 825 "go.y"
     {
 		(yyval.node) = nod(OLSH, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 109:
-#line 798 "go.y"
+  case 112:
+/* Line 1778 of yacc.c  */
+#line 829 "go.y"
     {
 		(yyval.node) = nod(ORSH, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 110:
-#line 803 "go.y"
+  case 113:
+/* Line 1778 of yacc.c  */
+#line 834 "go.y"
     {
 		(yyval.node) = nod(OSEND, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 112:
-#line 810 "go.y"
+  case 115:
+/* Line 1778 of yacc.c  */
+#line 841 "go.y"
     {
 		(yyval.node) = nod(OIND, (yyvsp[(2) - (2)].node), N);
 	}
     break;
 
-  case 113:
-#line 814 "go.y"
+  case 116:
+/* Line 1778 of yacc.c  */
+#line 845 "go.y"
     {
 		if((yyvsp[(2) - (2)].node)->op == OCOMPLIT) {
 			// Special case for &T{...}: turn into (*T){...}.
@@ -3239,66 +3395,75 @@ yyreduce:
 	}
     break;
 
-  case 114:
-#line 825 "go.y"
+  case 117:
+/* Line 1778 of yacc.c  */
+#line 856 "go.y"
     {
 		(yyval.node) = nod(OPLUS, (yyvsp[(2) - (2)].node), N);
 	}
     break;
 
-  case 115:
-#line 829 "go.y"
+  case 118:
+/* Line 1778 of yacc.c  */
+#line 860 "go.y"
     {
 		(yyval.node) = nod(OMINUS, (yyvsp[(2) - (2)].node), N);
 	}
     break;
 
-  case 116:
-#line 833 "go.y"
+  case 119:
+/* Line 1778 of yacc.c  */
+#line 864 "go.y"
     {
 		(yyval.node) = nod(ONOT, (yyvsp[(2) - (2)].node), N);
 	}
     break;
 
-  case 117:
-#line 837 "go.y"
+  case 120:
+/* Line 1778 of yacc.c  */
+#line 868 "go.y"
     {
 		yyerror("the bitwise complement operator is ^");
 		(yyval.node) = nod(OCOM, (yyvsp[(2) - (2)].node), N);
 	}
     break;
 
-  case 118:
-#line 842 "go.y"
+  case 121:
+/* Line 1778 of yacc.c  */
+#line 873 "go.y"
     {
 		(yyval.node) = nod(OCOM, (yyvsp[(2) - (2)].node), N);
 	}
     break;
 
-  case 119:
-#line 846 "go.y"
+  case 122:
+/* Line 1778 of yacc.c  */
+#line 877 "go.y"
     {
 		(yyval.node) = nod(ORECV, (yyvsp[(2) - (2)].node), N);
 	}
     break;
 
-  case 120:
-#line 856 "go.y"
+  case 123:
+/* Line 1778 of yacc.c  */
+#line 887 "go.y"
     {
 		(yyval.node) = nod(OCALL, (yyvsp[(1) - (3)].node), N);
 	}
     break;
 
-  case 121:
-#line 860 "go.y"
+  case 124:
+/* Line 1778 of yacc.c  */
+#line 891 "go.y"
     {
 		(yyval.node) = nod(OCALL, (yyvsp[(1) - (5)].node), N);
 		(yyval.node)->list = (yyvsp[(3) - (5)].list);
 	}
     break;
 
-  case 122:
-#line 865 "go.y"
+  case 125:
+/* Line 1778 of yacc.c  */
+#line 896 "go.y"
     {
 		(yyval.node) = nod(OCALL, (yyvsp[(1) - (6)].node), N);
 		(yyval.node)->list = (yyvsp[(3) - (6)].list);
@@ -3306,15 +3471,17 @@ yyreduce:
 	}
     break;
 
-  case 123:
-#line 873 "go.y"
+  case 126:
+/* Line 1778 of yacc.c  */
+#line 904 "go.y"
     {
 		(yyval.node) = nodlit((yyvsp[(1) - (1)].val));
 	}
     break;
 
-  case 125:
-#line 878 "go.y"
+  case 128:
+/* Line 1778 of yacc.c  */
+#line 909 "go.y"
     {
 		if((yyvsp[(1) - (3)].node)->op == OPACK) {
 			Sym *s;
@@ -3327,36 +3494,41 @@ yyreduce:
 	}
     break;
 
-  case 126:
-#line 889 "go.y"
+  case 129:
+/* Line 1778 of yacc.c  */
+#line 920 "go.y"
     {
 		(yyval.node) = nod(ODOTTYPE, (yyvsp[(1) - (5)].node), (yyvsp[(4) - (5)].node));
 	}
     break;
 
-  case 127:
-#line 893 "go.y"
+  case 130:
+/* Line 1778 of yacc.c  */
+#line 924 "go.y"
     {
 		(yyval.node) = nod(OTYPESW, N, (yyvsp[(1) - (5)].node));
 	}
     break;
 
-  case 128:
-#line 897 "go.y"
+  case 131:
+/* Line 1778 of yacc.c  */
+#line 928 "go.y"
     {
 		(yyval.node) = nod(OINDEX, (yyvsp[(1) - (4)].node), (yyvsp[(3) - (4)].node));
 	}
     break;
 
-  case 129:
-#line 901 "go.y"
+  case 132:
+/* Line 1778 of yacc.c  */
+#line 932 "go.y"
     {
 		(yyval.node) = nod(OSLICE, (yyvsp[(1) - (6)].node), nod(OKEY, (yyvsp[(3) - (6)].node), (yyvsp[(5) - (6)].node)));
 	}
     break;
 
-  case 131:
-#line 906 "go.y"
+  case 134:
+/* Line 1778 of yacc.c  */
+#line 937 "go.y"
     {
 		// conversion
 		(yyval.node) = nod(OCALL, (yyvsp[(1) - (4)].node), N);
@@ -3364,8 +3536,9 @@ yyreduce:
 	}
     break;
 
-  case 132:
-#line 912 "go.y"
+  case 135:
+/* Line 1778 of yacc.c  */
+#line 943 "go.y"
     {
 		(yyval.node) = (yyvsp[(3) - (5)].node);
 		(yyval.node)->right = (yyvsp[(1) - (5)].node);
@@ -3374,8 +3547,9 @@ yyreduce:
 	}
     break;
 
-  case 133:
-#line 919 "go.y"
+  case 136:
+/* Line 1778 of yacc.c  */
+#line 950 "go.y"
     {
 		(yyval.node) = (yyvsp[(3) - (5)].node);
 		(yyval.node)->right = (yyvsp[(1) - (5)].node);
@@ -3383,8 +3557,9 @@ yyreduce:
 	}
     break;
 
-  case 134:
-#line 925 "go.y"
+  case 137:
+/* Line 1778 of yacc.c  */
+#line 956 "go.y"
     {
 		yyerror("cannot parenthesize type in composite literal");
 		(yyval.node) = (yyvsp[(5) - (7)].node);
@@ -3393,8 +3568,9 @@ yyreduce:
 	}
     break;
 
-  case 136:
-#line 934 "go.y"
+  case 139:
+/* Line 1778 of yacc.c  */
+#line 965 "go.y"
     {
 		// composite expression.
 		// make node early so we get the right line number.
@@ -3402,23 +3578,26 @@ yyreduce:
 	}
     break;
 
-  case 137:
-#line 942 "go.y"
+  case 140:
+/* Line 1778 of yacc.c  */
+#line 973 "go.y"
     {
 		(yyval.node) = nod(OKEY, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 139:
-#line 949 "go.y"
+  case 142:
+/* Line 1778 of yacc.c  */
+#line 980 "go.y"
     {
 		(yyval.node) = (yyvsp[(2) - (4)].node);
 		(yyval.node)->list = (yyvsp[(3) - (4)].list);
 	}
     break;
 
-  case 141:
-#line 957 "go.y"
+  case 144:
+/* Line 1778 of yacc.c  */
+#line 988 "go.y"
     {
 		(yyval.node) = (yyvsp[(2) - (3)].node);
 		
@@ -3436,22 +3615,25 @@ yyreduce:
 	}
     break;
 
-  case 145:
-#line 982 "go.y"
+  case 148:
+/* Line 1778 of yacc.c  */
+#line 1013 "go.y"
     {
 		(yyval.i) = LBODY;
 	}
     break;
 
-  case 146:
-#line 986 "go.y"
+  case 149:
+/* Line 1778 of yacc.c  */
+#line 1017 "go.y"
     {
 		(yyval.i) = '{';
 	}
     break;
 
-  case 147:
-#line 997 "go.y"
+  case 150:
+/* Line 1778 of yacc.c  */
+#line 1028 "go.y"
     {
 		if((yyvsp[(1) - (1)].sym) == S)
 			(yyval.node) = N;
@@ -3460,22 +3642,25 @@ yyreduce:
 	}
     break;
 
-  case 148:
-#line 1006 "go.y"
+  case 151:
+/* Line 1778 of yacc.c  */
+#line 1037 "go.y"
     {
 		(yyval.node) = dclname((yyvsp[(1) - (1)].sym));
 	}
     break;
 
-  case 149:
-#line 1011 "go.y"
+  case 152:
+/* Line 1778 of yacc.c  */
+#line 1042 "go.y"
     {
 		(yyval.node) = N;
 	}
     break;
 
-  case 151:
-#line 1018 "go.y"
+  case 154:
+/* Line 1778 of yacc.c  */
+#line 1049 "go.y"
     {
 		(yyval.sym) = (yyvsp[(1) - (1)].sym);
 		// during imports, unqualified non-exported identifiers are from builtinpkg
@@ -3484,15 +3669,17 @@ yyreduce:
 	}
     break;
 
-  case 153:
-#line 1026 "go.y"
+  case 156:
+/* Line 1778 of yacc.c  */
+#line 1057 "go.y"
     {
 		(yyval.sym) = S;
 	}
     break;
 
-  case 154:
-#line 1032 "go.y"
+  case 157:
+/* Line 1778 of yacc.c  */
+#line 1063 "go.y"
     {
 		Pkg *p;
 
@@ -3507,8 +3694,9 @@ yyreduce:
 	}
     break;
 
-  case 155:
-#line 1047 "go.y"
+  case 158:
+/* Line 1778 of yacc.c  */
+#line 1078 "go.y"
     {
 		(yyval.node) = oldname((yyvsp[(1) - (1)].sym));
 		if((yyval.node)->pack != N)
@@ -3516,44 +3704,50 @@ yyreduce:
 	}
     break;
 
-  case 157:
-#line 1067 "go.y"
+  case 160:
+/* Line 1778 of yacc.c  */
+#line 1098 "go.y"
     {
 		yyerror("final argument in variadic function missing type");
 		(yyval.node) = nod(ODDD, typenod(typ(TINTER)), N);
 	}
     break;
 
-  case 158:
-#line 1072 "go.y"
+  case 161:
+/* Line 1778 of yacc.c  */
+#line 1103 "go.y"
     {
 		(yyval.node) = nod(ODDD, (yyvsp[(2) - (2)].node), N);
 	}
     break;
 
-  case 164:
-#line 1083 "go.y"
+  case 167:
+/* Line 1778 of yacc.c  */
+#line 1114 "go.y"
     {
 		(yyval.node) = nod(OTPAREN, (yyvsp[(2) - (3)].node), N);
 	}
     break;
 
-  case 168:
-#line 1092 "go.y"
+  case 171:
+/* Line 1778 of yacc.c  */
+#line 1123 "go.y"
     {
 		(yyval.node) = nod(OIND, (yyvsp[(2) - (2)].node), N);
 	}
     break;
 
-  case 173:
-#line 1102 "go.y"
+  case 176:
+/* Line 1778 of yacc.c  */
+#line 1133 "go.y"
     {
 		(yyval.node) = nod(OTPAREN, (yyvsp[(2) - (3)].node), N);
 	}
     break;
 
-  case 183:
-#line 1123 "go.y"
+  case 186:
+/* Line 1778 of yacc.c  */
+#line 1154 "go.y"
     {
 		if((yyvsp[(1) - (3)].node)->op == OPACK) {
 			Sym *s;
@@ -3566,61 +3760,69 @@ yyreduce:
 	}
     break;
 
-  case 184:
-#line 1136 "go.y"
+  case 187:
+/* Line 1778 of yacc.c  */
+#line 1167 "go.y"
     {
 		(yyval.node) = nod(OTARRAY, (yyvsp[(2) - (4)].node), (yyvsp[(4) - (4)].node));
 	}
     break;
 
-  case 185:
-#line 1140 "go.y"
+  case 188:
+/* Line 1778 of yacc.c  */
+#line 1171 "go.y"
     {
 		// array literal of nelem
 		(yyval.node) = nod(OTARRAY, nod(ODDD, N, N), (yyvsp[(4) - (4)].node));
 	}
     break;
 
-  case 186:
-#line 1145 "go.y"
+  case 189:
+/* Line 1778 of yacc.c  */
+#line 1176 "go.y"
     {
 		(yyval.node) = nod(OTCHAN, (yyvsp[(2) - (2)].node), N);
 		(yyval.node)->etype = Cboth;
 	}
     break;
 
-  case 187:
-#line 1150 "go.y"
+  case 190:
+/* Line 1778 of yacc.c  */
+#line 1181 "go.y"
     {
 		(yyval.node) = nod(OTCHAN, (yyvsp[(3) - (3)].node), N);
 		(yyval.node)->etype = Csend;
 	}
     break;
 
-  case 188:
-#line 1155 "go.y"
+  case 191:
+/* Line 1778 of yacc.c  */
+#line 1186 "go.y"
     {
 		(yyval.node) = nod(OTMAP, (yyvsp[(3) - (5)].node), (yyvsp[(5) - (5)].node));
 	}
     break;
 
-  case 191:
-#line 1163 "go.y"
+  case 194:
+/* Line 1778 of yacc.c  */
+#line 1194 "go.y"
     {
 		(yyval.node) = nod(OIND, (yyvsp[(2) - (2)].node), N);
 	}
     break;
 
-  case 192:
-#line 1169 "go.y"
+  case 195:
+/* Line 1778 of yacc.c  */
+#line 1200 "go.y"
     {
 		(yyval.node) = nod(OTCHAN, (yyvsp[(3) - (3)].node), N);
 		(yyval.node)->etype = Crecv;
 	}
     break;
 
-  case 193:
-#line 1176 "go.y"
+  case 196:
+/* Line 1778 of yacc.c  */
+#line 1207 "go.y"
     {
 		(yyval.node) = nod(OTSTRUCT, N, N);
 		(yyval.node)->list = (yyvsp[(3) - (5)].list);
@@ -3628,16 +3830,18 @@ yyreduce:
 	}
     break;
 
-  case 194:
-#line 1182 "go.y"
+  case 197:
+/* Line 1778 of yacc.c  */
+#line 1213 "go.y"
     {
 		(yyval.node) = nod(OTSTRUCT, N, N);
 		fixlbrace((yyvsp[(2) - (3)].i));
 	}
     break;
 
-  case 195:
-#line 1189 "go.y"
+  case 198:
+/* Line 1778 of yacc.c  */
+#line 1220 "go.y"
     {
 		(yyval.node) = nod(OTINTER, N, N);
 		(yyval.node)->list = (yyvsp[(3) - (5)].list);
@@ -3645,16 +3849,18 @@ yyreduce:
 	}
     break;
 
-  case 196:
-#line 1195 "go.y"
+  case 199:
+/* Line 1778 of yacc.c  */
+#line 1226 "go.y"
     {
 		(yyval.node) = nod(OTINTER, N, N);
 		fixlbrace((yyvsp[(2) - (3)].i));
 	}
     break;
 
-  case 197:
-#line 1206 "go.y"
+  case 200:
+/* Line 1778 of yacc.c  */
+#line 1237 "go.y"
     {
 		(yyval.node) = (yyvsp[(2) - (3)].node);
 		if((yyval.node) == N)
@@ -3665,8 +3871,9 @@ yyreduce:
 	}
     break;
 
-  case 198:
-#line 1217 "go.y"
+  case 201:
+/* Line 1778 of yacc.c  */
+#line 1248 "go.y"
     {
 		Node *t;
 
@@ -3697,8 +3904,9 @@ yyreduce:
 	}
     break;
 
-  case 199:
-#line 1246 "go.y"
+  case 202:
+/* Line 1778 of yacc.c  */
+#line 1277 "go.y"
     {
 		Node *rcvr, *t;
 
@@ -3738,8 +3946,9 @@ yyreduce:
 	}
     break;
 
-  case 200:
-#line 1286 "go.y"
+  case 203:
+/* Line 1778 of yacc.c  */
+#line 1317 "go.y"
     {
 		Sym *s;
 		Type *t;
@@ -3766,8 +3975,9 @@ yyreduce:
 	}
     break;
 
-  case 201:
-#line 1311 "go.y"
+  case 204:
+/* Line 1778 of yacc.c  */
+#line 1342 "go.y"
     {
 		(yyval.node) = methodname1(newname((yyvsp[(4) - (8)].sym)), (yyvsp[(2) - (8)].list)->n->right); 
 		(yyval.node)->type = functype((yyvsp[(2) - (8)].list)->n, (yyvsp[(6) - (8)].list), (yyvsp[(8) - (8)].list));
@@ -3785,8 +3995,9 @@ yyreduce:
 	}
     break;
 
-  case 202:
-#line 1329 "go.y"
+  case 205:
+/* Line 1778 of yacc.c  */
+#line 1360 "go.y"
     {
 		(yyvsp[(3) - (5)].list) = checkarglist((yyvsp[(3) - (5)].list), 1);
 		(yyval.node) = nod(OTFUNC, N, N);
@@ -3795,15 +4006,17 @@ yyreduce:
 	}
     break;
 
-  case 203:
-#line 1337 "go.y"
+  case 206:
+/* Line 1778 of yacc.c  */
+#line 1368 "go.y"
     {
 		(yyval.list) = nil;
 	}
     break;
 
-  case 204:
-#line 1341 "go.y"
+  case 207:
+/* Line 1778 of yacc.c  */
+#line 1372 "go.y"
     {
 		(yyval.list) = (yyvsp[(2) - (3)].list);
 		if((yyval.list) == nil)
@@ -3811,59 +4024,67 @@ yyreduce:
 	}
     break;
 
-  case 205:
-#line 1349 "go.y"
+  case 208:
+/* Line 1778 of yacc.c  */
+#line 1380 "go.y"
     {
 		(yyval.list) = nil;
 	}
     break;
 
-  case 206:
-#line 1353 "go.y"
+  case 209:
+/* Line 1778 of yacc.c  */
+#line 1384 "go.y"
     {
 		(yyval.list) = list1(nod(ODCLFIELD, N, (yyvsp[(1) - (1)].node)));
 	}
     break;
 
-  case 207:
-#line 1357 "go.y"
+  case 210:
+/* Line 1778 of yacc.c  */
+#line 1388 "go.y"
     {
 		(yyvsp[(2) - (3)].list) = checkarglist((yyvsp[(2) - (3)].list), 0);
 		(yyval.list) = (yyvsp[(2) - (3)].list);
 	}
     break;
 
-  case 208:
-#line 1364 "go.y"
+  case 211:
+/* Line 1778 of yacc.c  */
+#line 1395 "go.y"
     {
 		closurehdr((yyvsp[(1) - (1)].node));
 	}
     break;
 
-  case 209:
-#line 1370 "go.y"
+  case 212:
+/* Line 1778 of yacc.c  */
+#line 1401 "go.y"
     {
 		(yyval.node) = closurebody((yyvsp[(3) - (4)].list));
 		fixlbrace((yyvsp[(2) - (4)].i));
 	}
     break;
 
-  case 210:
-#line 1375 "go.y"
+  case 213:
+/* Line 1778 of yacc.c  */
+#line 1406 "go.y"
     {
 		(yyval.node) = closurebody(nil);
 	}
     break;
 
-  case 211:
-#line 1386 "go.y"
+  case 214:
+/* Line 1778 of yacc.c  */
+#line 1417 "go.y"
     {
 		(yyval.list) = nil;
 	}
     break;
 
-  case 212:
-#line 1390 "go.y"
+  case 215:
+/* Line 1778 of yacc.c  */
+#line 1421 "go.y"
     {
 		(yyval.list) = concat((yyvsp[(1) - (3)].list), (yyvsp[(2) - (3)].list));
 		if(nsyntaxerrors == 0)
@@ -3872,57 +4093,65 @@ yyreduce:
 	}
     break;
 
-  case 214:
-#line 1400 "go.y"
+  case 217:
+/* Line 1778 of yacc.c  */
+#line 1431 "go.y"
     {
 		(yyval.list) = concat((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list));
 	}
     break;
 
-  case 216:
-#line 1407 "go.y"
+  case 219:
+/* Line 1778 of yacc.c  */
+#line 1438 "go.y"
     {
 		(yyval.list) = concat((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list));
 	}
     break;
 
-  case 217:
-#line 1413 "go.y"
+  case 220:
+/* Line 1778 of yacc.c  */
+#line 1444 "go.y"
     {
 		(yyval.list) = list1((yyvsp[(1) - (1)].node));
 	}
     break;
 
-  case 218:
-#line 1417 "go.y"
+  case 221:
+/* Line 1778 of yacc.c  */
+#line 1448 "go.y"
     {
 		(yyval.list) = list((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 220:
-#line 1424 "go.y"
+  case 223:
+/* Line 1778 of yacc.c  */
+#line 1455 "go.y"
     {
 		(yyval.list) = concat((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list));
 	}
     break;
 
-  case 221:
-#line 1430 "go.y"
+  case 224:
+/* Line 1778 of yacc.c  */
+#line 1461 "go.y"
     {
 		(yyval.list) = list1((yyvsp[(1) - (1)].node));
 	}
     break;
 
-  case 222:
-#line 1434 "go.y"
+  case 225:
+/* Line 1778 of yacc.c  */
+#line 1465 "go.y"
     {
 		(yyval.list) = list((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 223:
-#line 1440 "go.y"
+  case 226:
+/* Line 1778 of yacc.c  */
+#line 1471 "go.y"
     {
 		NodeList *l;
 
@@ -3947,16 +4176,18 @@ yyreduce:
 	}
     break;
 
-  case 224:
-#line 1463 "go.y"
+  case 227:
+/* Line 1778 of yacc.c  */
+#line 1494 "go.y"
     {
 		(yyvsp[(1) - (2)].node)->val = (yyvsp[(2) - (2)].val);
 		(yyval.list) = list1((yyvsp[(1) - (2)].node));
 	}
     break;
 
-  case 225:
-#line 1468 "go.y"
+  case 228:
+/* Line 1778 of yacc.c  */
+#line 1499 "go.y"
     {
 		(yyvsp[(2) - (4)].node)->val = (yyvsp[(4) - (4)].val);
 		(yyval.list) = list1((yyvsp[(2) - (4)].node));
@@ -3964,8 +4195,9 @@ yyreduce:
 	}
     break;
 
-  case 226:
-#line 1474 "go.y"
+  case 229:
+/* Line 1778 of yacc.c  */
+#line 1505 "go.y"
     {
 		(yyvsp[(2) - (3)].node)->right = nod(OIND, (yyvsp[(2) - (3)].node)->right, N);
 		(yyvsp[(2) - (3)].node)->val = (yyvsp[(3) - (3)].val);
@@ -3973,8 +4205,9 @@ yyreduce:
 	}
     break;
 
-  case 227:
-#line 1480 "go.y"
+  case 230:
+/* Line 1778 of yacc.c  */
+#line 1511 "go.y"
     {
 		(yyvsp[(3) - (5)].node)->right = nod(OIND, (yyvsp[(3) - (5)].node)->right, N);
 		(yyvsp[(3) - (5)].node)->val = (yyvsp[(5) - (5)].val);
@@ -3983,8 +4216,9 @@ yyreduce:
 	}
     break;
 
-  case 228:
-#line 1487 "go.y"
+  case 231:
+/* Line 1778 of yacc.c  */
+#line 1518 "go.y"
     {
 		(yyvsp[(3) - (5)].node)->right = nod(OIND, (yyvsp[(3) - (5)].node)->right, N);
 		(yyvsp[(3) - (5)].node)->val = (yyvsp[(5) - (5)].val);
@@ -3993,8 +4227,9 @@ yyreduce:
 	}
     break;
 
-  case 229:
-#line 1496 "go.y"
+  case 232:
+/* Line 1778 of yacc.c  */
+#line 1527 "go.y"
     {
 		Node *n;
 
@@ -4005,8 +4240,9 @@ yyreduce:
 	}
     break;
 
-  case 230:
-#line 1505 "go.y"
+  case 233:
+/* Line 1778 of yacc.c  */
+#line 1536 "go.y"
     {
 		Pkg *pkg;
 
@@ -4021,38 +4257,43 @@ yyreduce:
 	}
     break;
 
-  case 231:
-#line 1520 "go.y"
+  case 234:
+/* Line 1778 of yacc.c  */
+#line 1551 "go.y"
     {
 		(yyval.node) = embedded((yyvsp[(1) - (1)].sym));
 	}
     break;
 
-  case 232:
-#line 1526 "go.y"
+  case 235:
+/* Line 1778 of yacc.c  */
+#line 1557 "go.y"
     {
 		(yyval.node) = nod(ODCLFIELD, (yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].node));
 		ifacedcl((yyval.node));
 	}
     break;
 
-  case 233:
-#line 1531 "go.y"
+  case 236:
+/* Line 1778 of yacc.c  */
+#line 1562 "go.y"
     {
 		(yyval.node) = nod(ODCLFIELD, N, oldname((yyvsp[(1) - (1)].sym)));
 	}
     break;
 
-  case 234:
-#line 1535 "go.y"
+  case 237:
+/* Line 1778 of yacc.c  */
+#line 1566 "go.y"
     {
 		(yyval.node) = nod(ODCLFIELD, N, oldname((yyvsp[(2) - (3)].sym)));
 		yyerror("cannot parenthesize embedded type");
 	}
     break;
 
-  case 235:
-#line 1542 "go.y"
+  case 238:
+/* Line 1778 of yacc.c  */
+#line 1573 "go.y"
     {
 		// without func keyword
 		(yyvsp[(2) - (4)].list) = checkarglist((yyvsp[(2) - (4)].list), 1);
@@ -4062,8 +4303,9 @@ yyreduce:
 	}
     break;
 
-  case 237:
-#line 1556 "go.y"
+  case 240:
+/* Line 1778 of yacc.c  */
+#line 1587 "go.y"
     {
 		(yyval.node) = nod(ONONAME, N, N);
 		(yyval.node)->sym = (yyvsp[(1) - (2)].sym);
@@ -4071,8 +4313,9 @@ yyreduce:
 	}
     break;
 
-  case 238:
-#line 1562 "go.y"
+  case 241:
+/* Line 1778 of yacc.c  */
+#line 1593 "go.y"
     {
 		(yyval.node) = nod(ONONAME, N, N);
 		(yyval.node)->sym = (yyvsp[(1) - (2)].sym);
@@ -4080,65 +4323,74 @@ yyreduce:
 	}
     break;
 
-  case 240:
-#line 1571 "go.y"
+  case 243:
+/* Line 1778 of yacc.c  */
+#line 1602 "go.y"
     {
 		(yyval.list) = list1((yyvsp[(1) - (1)].node));
 	}
     break;
 
-  case 241:
-#line 1575 "go.y"
+  case 244:
+/* Line 1778 of yacc.c  */
+#line 1606 "go.y"
     {
 		(yyval.list) = list((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 242:
-#line 1580 "go.y"
+  case 245:
+/* Line 1778 of yacc.c  */
+#line 1611 "go.y"
     {
 		(yyval.list) = nil;
 	}
     break;
 
-  case 243:
-#line 1584 "go.y"
+  case 246:
+/* Line 1778 of yacc.c  */
+#line 1615 "go.y"
     {
 		(yyval.list) = (yyvsp[(1) - (2)].list);
 	}
     break;
 
-  case 244:
-#line 1592 "go.y"
+  case 247:
+/* Line 1778 of yacc.c  */
+#line 1623 "go.y"
     {
 		(yyval.node) = N;
 	}
     break;
 
-  case 246:
-#line 1597 "go.y"
+  case 249:
+/* Line 1778 of yacc.c  */
+#line 1628 "go.y"
     {
 		(yyval.node) = liststmt((yyvsp[(1) - (1)].list));
 	}
     break;
 
-  case 248:
-#line 1602 "go.y"
+  case 251:
+/* Line 1778 of yacc.c  */
+#line 1633 "go.y"
     {
 		(yyval.node) = N;
 	}
     break;
 
-  case 254:
-#line 1613 "go.y"
+  case 257:
+/* Line 1778 of yacc.c  */
+#line 1644 "go.y"
     {
 		(yyvsp[(1) - (2)].node) = nod(OLABEL, (yyvsp[(1) - (2)].node), N);
 		(yyvsp[(1) - (2)].node)->sym = dclstack;  // context, for goto restrictions
 	}
     break;
 
-  case 255:
-#line 1618 "go.y"
+  case 258:
+/* Line 1778 of yacc.c  */
+#line 1649 "go.y"
     {
 		NodeList *l;
 
@@ -4150,52 +4402,59 @@ yyreduce:
 	}
     break;
 
-  case 256:
-#line 1628 "go.y"
+  case 259:
+/* Line 1778 of yacc.c  */
+#line 1659 "go.y"
     {
 		// will be converted to OFALL
 		(yyval.node) = nod(OXFALL, N, N);
 	}
     break;
 
-  case 257:
-#line 1633 "go.y"
+  case 260:
+/* Line 1778 of yacc.c  */
+#line 1664 "go.y"
     {
 		(yyval.node) = nod(OBREAK, (yyvsp[(2) - (2)].node), N);
 	}
     break;
 
-  case 258:
-#line 1637 "go.y"
+  case 261:
+/* Line 1778 of yacc.c  */
+#line 1668 "go.y"
     {
 		(yyval.node) = nod(OCONTINUE, (yyvsp[(2) - (2)].node), N);
 	}
     break;
 
-  case 259:
-#line 1641 "go.y"
+  case 262:
+/* Line 1778 of yacc.c  */
+#line 1672 "go.y"
     {
 		(yyval.node) = nod(OPROC, (yyvsp[(2) - (2)].node), N);
 	}
     break;
 
-  case 260:
-#line 1645 "go.y"
+  case 263:
+/* Line 1778 of yacc.c  */
+#line 1676 "go.y"
     {
 		(yyval.node) = nod(ODEFER, (yyvsp[(2) - (2)].node), N);
 	}
     break;
 
-  case 261:
-#line 1649 "go.y"
+  case 264:
+/* Line 1778 of yacc.c  */
+#line 1680 "go.y"
     {
 		(yyval.node) = nod(OGOTO, (yyvsp[(2) - (2)].node), N);
 		(yyval.node)->sym = dclstack;  // context, for goto restrictions
 	}
     break;
 
-  case 262:
-#line 1654 "go.y"
+  case 265:
+/* Line 1778 of yacc.c  */
+#line 1685 "go.y"
     {
 		(yyval.node) = nod(ORETURN, N, N);
 		(yyval.node)->list = (yyvsp[(2) - (2)].list);
@@ -4214,8 +4473,9 @@ yyreduce:
 	}
     break;
 
-  case 263:
-#line 1673 "go.y"
+  case 266:
+/* Line 1778 of yacc.c  */
+#line 1704 "go.y"
     {
 		(yyval.list) = nil;
 		if((yyvsp[(1) - (1)].node) != N)
@@ -4223,8 +4483,9 @@ yyreduce:
 	}
     break;
 
-  case 264:
-#line 1679 "go.y"
+  case 267:
+/* Line 1778 of yacc.c  */
+#line 1710 "go.y"
     {
 		(yyval.list) = (yyvsp[(1) - (3)].list);
 		if((yyvsp[(3) - (3)].node) != N)
@@ -4232,190 +4493,217 @@ yyreduce:
 	}
     break;
 
-  case 265:
-#line 1687 "go.y"
+  case 268:
+/* Line 1778 of yacc.c  */
+#line 1718 "go.y"
     {
 		(yyval.list) = list1((yyvsp[(1) - (1)].node));
 	}
     break;
 
-  case 266:
-#line 1691 "go.y"
+  case 269:
+/* Line 1778 of yacc.c  */
+#line 1722 "go.y"
     {
 		(yyval.list) = list((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 267:
-#line 1697 "go.y"
+  case 270:
+/* Line 1778 of yacc.c  */
+#line 1728 "go.y"
     {
 		(yyval.list) = list1((yyvsp[(1) - (1)].node));
 	}
     break;
 
-  case 268:
-#line 1701 "go.y"
+  case 271:
+/* Line 1778 of yacc.c  */
+#line 1732 "go.y"
     {
 		(yyval.list) = list((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 269:
-#line 1707 "go.y"
+  case 272:
+/* Line 1778 of yacc.c  */
+#line 1738 "go.y"
     {
 		(yyval.list) = list1((yyvsp[(1) - (1)].node));
 	}
     break;
 
-  case 270:
-#line 1711 "go.y"
+  case 273:
+/* Line 1778 of yacc.c  */
+#line 1742 "go.y"
     {
 		(yyval.list) = list((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 271:
-#line 1717 "go.y"
+  case 274:
+/* Line 1778 of yacc.c  */
+#line 1748 "go.y"
     {
 		(yyval.list) = list1((yyvsp[(1) - (1)].node));
 	}
     break;
 
-  case 272:
-#line 1721 "go.y"
+  case 275:
+/* Line 1778 of yacc.c  */
+#line 1752 "go.y"
     {
 		(yyval.list) = list((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 273:
-#line 1730 "go.y"
+  case 276:
+/* Line 1778 of yacc.c  */
+#line 1761 "go.y"
     {
 		(yyval.list) = list1((yyvsp[(1) - (1)].node));
 	}
     break;
 
-  case 274:
-#line 1734 "go.y"
+  case 277:
+/* Line 1778 of yacc.c  */
+#line 1765 "go.y"
     {
 		(yyval.list) = list1((yyvsp[(1) - (1)].node));
 	}
     break;
 
-  case 275:
-#line 1738 "go.y"
+  case 278:
+/* Line 1778 of yacc.c  */
+#line 1769 "go.y"
     {
 		(yyval.list) = list((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 276:
-#line 1742 "go.y"
+  case 279:
+/* Line 1778 of yacc.c  */
+#line 1773 "go.y"
     {
 		(yyval.list) = list((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 277:
-#line 1747 "go.y"
+  case 280:
+/* Line 1778 of yacc.c  */
+#line 1778 "go.y"
     {
 		(yyval.list) = nil;
 	}
     break;
 
-  case 278:
-#line 1751 "go.y"
+  case 281:
+/* Line 1778 of yacc.c  */
+#line 1782 "go.y"
     {
 		(yyval.list) = (yyvsp[(1) - (2)].list);
 	}
     break;
 
-  case 283:
-#line 1765 "go.y"
+  case 286:
+/* Line 1778 of yacc.c  */
+#line 1796 "go.y"
     {
 		(yyval.node) = N;
 	}
     break;
 
-  case 285:
-#line 1771 "go.y"
+  case 288:
+/* Line 1778 of yacc.c  */
+#line 1802 "go.y"
     {
 		(yyval.list) = nil;
 	}
     break;
 
-  case 287:
-#line 1777 "go.y"
+  case 290:
+/* Line 1778 of yacc.c  */
+#line 1808 "go.y"
     {
 		(yyval.node) = N;
 	}
     break;
 
-  case 289:
-#line 1783 "go.y"
+  case 292:
+/* Line 1778 of yacc.c  */
+#line 1814 "go.y"
     {
 		(yyval.list) = nil;
 	}
     break;
 
-  case 291:
-#line 1789 "go.y"
+  case 294:
+/* Line 1778 of yacc.c  */
+#line 1820 "go.y"
     {
 		(yyval.list) = nil;
 	}
     break;
 
-  case 293:
-#line 1795 "go.y"
+  case 296:
+/* Line 1778 of yacc.c  */
+#line 1826 "go.y"
     {
 		(yyval.list) = nil;
 	}
     break;
 
-  case 295:
-#line 1801 "go.y"
+  case 298:
+/* Line 1778 of yacc.c  */
+#line 1832 "go.y"
     {
 		(yyval.val).ctype = CTxxx;
 	}
     break;
 
-  case 297:
-#line 1811 "go.y"
+  case 300:
+/* Line 1778 of yacc.c  */
+#line 1842 "go.y"
     {
 		importimport((yyvsp[(2) - (4)].sym), (yyvsp[(3) - (4)].val).u.sval);
 	}
     break;
 
-  case 298:
-#line 1815 "go.y"
+  case 301:
+/* Line 1778 of yacc.c  */
+#line 1846 "go.y"
     {
 		importvar((yyvsp[(2) - (4)].sym), (yyvsp[(3) - (4)].type));
 	}
     break;
 
-  case 299:
-#line 1819 "go.y"
+  case 302:
+/* Line 1778 of yacc.c  */
+#line 1850 "go.y"
     {
 		importconst((yyvsp[(2) - (5)].sym), types[TIDEAL], (yyvsp[(4) - (5)].node));
 	}
     break;
 
-  case 300:
-#line 1823 "go.y"
+  case 303:
+/* Line 1778 of yacc.c  */
+#line 1854 "go.y"
     {
 		importconst((yyvsp[(2) - (6)].sym), (yyvsp[(3) - (6)].type), (yyvsp[(5) - (6)].node));
 	}
     break;
 
-  case 301:
-#line 1827 "go.y"
+  case 304:
+/* Line 1778 of yacc.c  */
+#line 1858 "go.y"
     {
 		importtype((yyvsp[(2) - (4)].type), (yyvsp[(3) - (4)].type));
 	}
     break;
 
-  case 302:
-#line 1831 "go.y"
+  case 305:
+/* Line 1778 of yacc.c  */
+#line 1862 "go.y"
     {
 		if((yyvsp[(2) - (4)].node) == N) {
 			dclcontext = PEXTERN;  // since we skip the funcbody below
@@ -4435,31 +4723,35 @@ yyreduce:
 	}
     break;
 
-  case 303:
-#line 1851 "go.y"
+  case 306:
+/* Line 1778 of yacc.c  */
+#line 1882 "go.y"
     {
 		(yyval.sym) = (yyvsp[(1) - (1)].sym);
 		structpkg = (yyval.sym)->pkg;
 	}
     break;
 
-  case 304:
-#line 1858 "go.y"
+  case 307:
+/* Line 1778 of yacc.c  */
+#line 1889 "go.y"
     {
 		(yyval.type) = pkgtype((yyvsp[(1) - (1)].sym));
 		importsym((yyvsp[(1) - (1)].sym), OTYPE);
 	}
     break;
 
-  case 310:
-#line 1878 "go.y"
+  case 313:
+/* Line 1778 of yacc.c  */
+#line 1909 "go.y"
     {
 		(yyval.type) = pkgtype((yyvsp[(1) - (1)].sym));
 	}
     break;
 
-  case 311:
-#line 1882 "go.y"
+  case 314:
+/* Line 1778 of yacc.c  */
+#line 1913 "go.y"
     {
 		// predefined name like uint8
 		(yyvsp[(1) - (1)].sym) = pkglookup((yyvsp[(1) - (1)].sym)->name, builtinpkg);
@@ -4471,50 +4763,57 @@ yyreduce:
 	}
     break;
 
-  case 312:
-#line 1892 "go.y"
+  case 315:
+/* Line 1778 of yacc.c  */
+#line 1923 "go.y"
     {
 		(yyval.type) = aindex(N, (yyvsp[(3) - (3)].type));
 	}
     break;
 
-  case 313:
-#line 1896 "go.y"
+  case 316:
+/* Line 1778 of yacc.c  */
+#line 1927 "go.y"
     {
 		(yyval.type) = aindex(nodlit((yyvsp[(2) - (4)].val)), (yyvsp[(4) - (4)].type));
 	}
     break;
 
-  case 314:
-#line 1900 "go.y"
+  case 317:
+/* Line 1778 of yacc.c  */
+#line 1931 "go.y"
     {
 		(yyval.type) = maptype((yyvsp[(3) - (5)].type), (yyvsp[(5) - (5)].type));
 	}
     break;
 
-  case 315:
-#line 1904 "go.y"
+  case 318:
+/* Line 1778 of yacc.c  */
+#line 1935 "go.y"
     {
 		(yyval.type) = tostruct((yyvsp[(3) - (4)].list));
 	}
     break;
 
-  case 316:
-#line 1908 "go.y"
+  case 319:
+/* Line 1778 of yacc.c  */
+#line 1939 "go.y"
     {
 		(yyval.type) = tointerface((yyvsp[(3) - (4)].list));
 	}
     break;
 
-  case 317:
-#line 1912 "go.y"
+  case 320:
+/* Line 1778 of yacc.c  */
+#line 1943 "go.y"
     {
 		(yyval.type) = ptrto((yyvsp[(2) - (2)].type));
 	}
     break;
 
-  case 318:
-#line 1916 "go.y"
+  case 321:
+/* Line 1778 of yacc.c  */
+#line 1947 "go.y"
     {
 		(yyval.type) = typ(TCHAN);
 		(yyval.type)->type = (yyvsp[(2) - (2)].type);
@@ -4522,8 +4821,9 @@ yyreduce:
 	}
     break;
 
-  case 319:
-#line 1922 "go.y"
+  case 322:
+/* Line 1778 of yacc.c  */
+#line 1953 "go.y"
     {
 		(yyval.type) = typ(TCHAN);
 		(yyval.type)->type = (yyvsp[(3) - (4)].type);
@@ -4531,8 +4831,9 @@ yyreduce:
 	}
     break;
 
-  case 320:
-#line 1928 "go.y"
+  case 323:
+/* Line 1778 of yacc.c  */
+#line 1959 "go.y"
     {
 		(yyval.type) = typ(TCHAN);
 		(yyval.type)->type = (yyvsp[(3) - (3)].type);
@@ -4540,8 +4841,9 @@ yyreduce:
 	}
     break;
 
-  case 321:
-#line 1936 "go.y"
+  case 324:
+/* Line 1778 of yacc.c  */
+#line 1967 "go.y"
     {
 		(yyval.type) = typ(TCHAN);
 		(yyval.type)->type = (yyvsp[(3) - (3)].type);
@@ -4549,15 +4851,17 @@ yyreduce:
 	}
     break;
 
-  case 322:
-#line 1944 "go.y"
+  case 325:
+/* Line 1778 of yacc.c  */
+#line 1975 "go.y"
     {
 		(yyval.type) = functype(nil, (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].list));
 	}
     break;
 
-  case 323:
-#line 1950 "go.y"
+  case 326:
+/* Line 1778 of yacc.c  */
+#line 1981 "go.y"
     {
 		(yyval.node) = nod(ODCLFIELD, N, typenod((yyvsp[(2) - (3)].type)));
 		if((yyvsp[(1) - (3)].sym))
@@ -4566,8 +4870,9 @@ yyreduce:
 	}
     break;
 
-  case 324:
-#line 1957 "go.y"
+  case 327:
+/* Line 1778 of yacc.c  */
+#line 1988 "go.y"
     {
 		Type *t;
 	
@@ -4583,8 +4888,9 @@ yyreduce:
 	}
     break;
 
-  case 325:
-#line 1973 "go.y"
+  case 328:
+/* Line 1778 of yacc.c  */
+#line 2004 "go.y"
     {
 		Sym *s;
 
@@ -4602,50 +4908,57 @@ yyreduce:
 	}
     break;
 
-  case 326:
-#line 1991 "go.y"
+  case 329:
+/* Line 1778 of yacc.c  */
+#line 2022 "go.y"
     {
 		(yyval.node) = nod(ODCLFIELD, newname((yyvsp[(1) - (5)].sym)), typenod(functype(fakethis(), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].list))));
 	}
     break;
 
-  case 327:
-#line 1995 "go.y"
+  case 330:
+/* Line 1778 of yacc.c  */
+#line 2026 "go.y"
     {
 		(yyval.node) = nod(ODCLFIELD, N, typenod((yyvsp[(1) - (1)].type)));
 	}
     break;
 
-  case 328:
-#line 2000 "go.y"
+  case 331:
+/* Line 1778 of yacc.c  */
+#line 2031 "go.y"
     {
 		(yyval.list) = nil;
 	}
     break;
 
-  case 330:
-#line 2007 "go.y"
+  case 333:
+/* Line 1778 of yacc.c  */
+#line 2038 "go.y"
     {
 		(yyval.list) = (yyvsp[(2) - (3)].list);
 	}
     break;
 
-  case 331:
-#line 2011 "go.y"
+  case 334:
+/* Line 1778 of yacc.c  */
+#line 2042 "go.y"
     {
 		(yyval.list) = list1(nod(ODCLFIELD, N, typenod((yyvsp[(1) - (1)].type))));
 	}
     break;
 
-  case 332:
-#line 2021 "go.y"
+  case 335:
+/* Line 1778 of yacc.c  */
+#line 2052 "go.y"
     {
 		(yyval.node) = nodlit((yyvsp[(1) - (1)].val));
 	}
     break;
 
-  case 333:
-#line 2025 "go.y"
+  case 336:
+/* Line 1778 of yacc.c  */
+#line 2056 "go.y"
     {
 		(yyval.node) = nodlit((yyvsp[(2) - (2)].val));
 		switch((yyval.node)->val.ctype){
@@ -4662,8 +4975,9 @@ yyreduce:
 	}
     break;
 
-  case 334:
-#line 2040 "go.y"
+  case 337:
+/* Line 1778 of yacc.c  */
+#line 2071 "go.y"
     {
 		(yyval.node) = oldname(pkglookup((yyvsp[(1) - (1)].sym)->name, builtinpkg));
 		if((yyval.node)->op != OLITERAL)
@@ -4671,8 +4985,9 @@ yyreduce:
 	}
     break;
 
-  case 336:
-#line 2049 "go.y"
+  case 339:
+/* Line 1778 of yacc.c  */
+#line 2080 "go.y"
     {
 		if((yyvsp[(2) - (5)].node)->val.ctype == CTRUNE && (yyvsp[(4) - (5)].node)->val.ctype == CTINT) {
 			(yyval.node) = (yyvsp[(2) - (5)].node);
@@ -4685,53 +5000,70 @@ yyreduce:
 	}
     break;
 
-  case 339:
-#line 2065 "go.y"
+  case 342:
+/* Line 1778 of yacc.c  */
+#line 2096 "go.y"
     {
 		(yyval.list) = list1((yyvsp[(1) - (1)].node));
 	}
     break;
 
-  case 340:
-#line 2069 "go.y"
+  case 343:
+/* Line 1778 of yacc.c  */
+#line 2100 "go.y"
     {
 		(yyval.list) = list((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 341:
-#line 2075 "go.y"
+  case 344:
+/* Line 1778 of yacc.c  */
+#line 2106 "go.y"
     {
 		(yyval.list) = list1((yyvsp[(1) - (1)].node));
 	}
     break;
 
-  case 342:
-#line 2079 "go.y"
+  case 345:
+/* Line 1778 of yacc.c  */
+#line 2110 "go.y"
     {
 		(yyval.list) = list((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
 	}
     break;
 
-  case 343:
-#line 2085 "go.y"
+  case 346:
+/* Line 1778 of yacc.c  */
+#line 2116 "go.y"
     {
 		(yyval.list) = list1((yyvsp[(1) - (1)].node));
 	}
     break;
 
-  case 344:
-#line 2089 "go.y"
+  case 347:
+/* Line 1778 of yacc.c  */
+#line 2120 "go.y"
     {
 		(yyval.list) = list((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
 	}
     break;
 
 
-/* Line 1267 of yacc.c.  */
-#line 4734 "y.tab.c"
+/* Line 1778 of yacc.c  */
+#line 5055 "y.tab.c"
       default: break;
     }
+  /* User semantic actions sometimes alter yychar, and that requires
+     that yytoken be updated with the new translation.  We take the
+     approach of translating immediately before every use of yytoken.
+     One alternative is translating here after every semantic action,
+     but that translation would be missed if the semantic action invokes
+     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
+     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
+     incorrect destructor might then be invoked immediately.  In the
+     case of YYERROR or YYBACKUP, subsequent parser actions might lead
+     to an incorrect destructor call or verbose syntax error message
+     before the lookahead is translated.  */
   YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);
 
   YYPOPSTACK (yylen);
@@ -4740,7 +5072,6 @@ yyreduce:
 
   *++yyvsp = yyval;
 
-
   /* Now `shift' the result of the reduction.  Determine what state
      that goes to, based on the state we popped back to and the rule
      number reduced by.  */
@@ -4760,6 +5091,10 @@ yyreduce:
 | yyerrlab -- here on detecting error |
 `------------------------------------*/
 yyerrlab:
+  /* Make sure we have latest lookahead translation.  See comments at
+     user semantic actions for why this is necessary.  */
+  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);
+
   /* If not already recovering from an error, report this error.  */
   if (!yyerrstatus)
     {
@@ -4767,37 +5102,36 @@ yyerrlab:
 #if ! YYERROR_VERBOSE
       yyerror (YY_("syntax error"));
 #else
+# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
+                                        yyssp, yytoken)
       {
-	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
-	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
-	  {
-	    YYSIZE_T yyalloc = 2 * yysize;
-	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
-	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
-	    if (yymsg != yymsgbuf)
-	      YYSTACK_FREE (yymsg);
-	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
-	    if (yymsg)
-	      yymsg_alloc = yyalloc;
-	    else
-	      {
-		yymsg = yymsgbuf;
-		yymsg_alloc = sizeof yymsgbuf;
-	      }
-	  }
-
-	if (0 < yysize && yysize <= yymsg_alloc)
-	  {
-	    (void) yysyntax_error (yymsg, yystate, yychar);
-	    yyerror (yymsg);
-	  }
-	else
-	  {
-	    yyerror (YY_("syntax error"));
-	    if (yysize != 0)
-	      goto yyexhaustedlab;
-	  }
+        char *yymsgp = YY_("syntax error");
+        int yysyntax_error_status;
+        yysyntax_error_status = YYSYNTAX_ERROR;
+        if (yysyntax_error_status == 0)
+          yymsgp = yymsg;
+        else if (yysyntax_error_status == 1)
+          {
+            if (yymsg != yymsgbuf)
+              YYSTACK_FREE (yymsg);
+            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
+            if (!yymsg)
+              {
+                yymsg = yymsgbuf;
+                yymsg_alloc = sizeof yymsgbuf;
+                yysyntax_error_status = 2;
+              }
+            else
+              {
+                yysyntax_error_status = YYSYNTAX_ERROR;
+                yymsgp = yymsg;
+              }
+          }
+        yyerror (yymsgp);
+        if (yysyntax_error_status == 2)
+          goto yyexhaustedlab;
       }
+# undef YYSYNTAX_ERROR
 #endif
     }
 
@@ -4805,7 +5139,7 @@ yyerrlab:
 
   if (yyerrstatus == 3)
     {
-      /* If just tried and failed to reuse look-ahead token after an
+      /* If just tried and failed to reuse lookahead token after an
 	 error, discard it.  */
 
       if (yychar <= YYEOF)
@@ -4822,7 +5156,7 @@ yyerrlab:
 	}
     }
 
-  /* Else will try to reuse look-ahead token after shifting the error
+  /* Else will try to reuse lookahead token after shifting the error
      token.  */
   goto yyerrlab1;
 
@@ -4856,7 +5190,7 @@ yyerrlab1:
   for (;;)
     {
       yyn = yypact[yystate];
-      if (yyn != YYPACT_NINF)
+      if (!yypact_value_is_default (yyn))
 	{
 	  yyn += YYTERROR;
 	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
@@ -4879,10 +5213,9 @@ yyerrlab1:
       YY_STACK_PRINT (yyss, yyssp);
     }
 
-  if (yyn == YYFINAL)
-    YYACCEPT;
-
+  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
   *++yyvsp = yylval;
+  YY_IGNORE_MAYBE_UNINITIALIZED_END
 
 
   /* Shift the error token.  */
@@ -4906,7 +5239,7 @@ yyabortlab:
   yyresult = 1;
   goto yyreturn;
 
-#ifndef yyoverflow
+#if !defined yyoverflow || YYERROR_VERBOSE
 /*-------------------------------------------------.
 | yyexhaustedlab -- memory exhaustion comes here.  |
 `-------------------------------------------------*/
@@ -4917,9 +5250,14 @@ yyexhaustedlab:
 #endif
 
 yyreturn:
-  if (yychar != YYEOF && yychar != YYEMPTY)
-     yydestruct ("Cleanup: discarding lookahead",
-		 yytoken, &yylval);
+  if (yychar != YYEMPTY)
+    {
+      /* Make sure we have latest lookahead translation.  See comments at
+         user semantic actions for why this is necessary.  */
+      yytoken = YYTRANSLATE (yychar);
+      yydestruct ("Cleanup: discarding lookahead",
+                  yytoken, &yylval);
+    }
   /* Do not reclaim the symbols of the rule which action triggered
      this YYABORT or YYACCEPT.  */
   YYPOPSTACK (yylen);
@@ -4943,7 +5281,8 @@ yyreturn:
 }
 
 
-#line 2093 "go.y"
+/* Line 2041 of yacc.c  */
+#line 2124 "go.y"
 
 
 static void
@@ -4956,4 +5295,3 @@ fixlbrace(int lbr)
 		loophack = 1;
 }
 
-
diff --git a/src/cmd/gc/y.tab.h b/src/cmd/gc/y.tab.h
index d01fbe1987..1ed0ff293a 100644
--- a/src/cmd/gc/y.tab.h
+++ b/src/cmd/gc/y.tab.h
@@ -1,24 +1,21 @@
-/* A Bison parser, made by GNU Bison 2.3.  */
+/* A Bison parser, made by GNU Bison 2.6.5.  */
 
-/* Skeleton interface for Bison's Yacc-like parsers in C
-
-   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
-   Free Software Foundation, Inc.
-
-   This program is free software; you can redistribute it and/or modify
+/* Bison interface for Yacc-like parsers in C
+   
+      Copyright (C) 1984, 1989-1990, 2000-2012 Free Software Foundation, Inc.
+   
+   This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2, or (at your option)
-   any later version.
-
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+   
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
-
+   
    You should have received a copy of the GNU General Public License
-   along with this program; if not, write to the Free Software
-   Foundation, Inc., 51 Franklin Street, Fifth Floor,
-   Boston, MA 02110-1301, USA.  */
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
 
 /* As a special exception, you may create a larger work that contains
    part or all of the Bison parser skeleton and distribute that work
@@ -29,10 +26,20 @@
    special exception, which will cause the skeleton and the resulting
    Bison output files to be licensed under the GNU General Public
    License without this special exception.
-
+   
    This special exception was added by the Free Software Foundation in
    version 2.2 of Bison.  */
 
+#ifndef YY_YY_Y_TAB_H_INCLUDED
+# define YY_YY_Y_TAB_H_INCLUDED
+/* Enabling traces.  */
+#ifndef YYDEBUG
+# define YYDEBUG 0
+#endif
+#if YYDEBUG
+extern int yydebug;
+#endif
+
 /* Tokens.  */
 #ifndef YYTOKENTYPE
 # define YYTOKENTYPE
@@ -143,25 +150,42 @@
 
 
 
-
 #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
 typedef union YYSTYPE
-#line 28 "go.y"
 {
+/* Line 2042 of yacc.c  */
+#line 28 "go.y"
+
 	Node*		node;
 	NodeList*		list;
 	Type*		type;
 	Sym*		sym;
 	struct	Val	val;
 	int		i;
-}
-/* Line 1529 of yacc.c.  */
-#line 160 "y.tab.h"
-	YYSTYPE;
+
+
+/* Line 2042 of yacc.c  */
+#line 169 "y.tab.h"
+} YYSTYPE;
+# define YYSTYPE_IS_TRIVIAL 1
 # define yystype YYSTYPE /* obsolescent; will be withdrawn */
 # define YYSTYPE_IS_DECLARED 1
-# define YYSTYPE_IS_TRIVIAL 1
 #endif
 
 extern YYSTYPE yylval;
 
+#ifdef YYPARSE_PARAM
+#if defined __STDC__ || defined __cplusplus
+int yyparse (void *YYPARSE_PARAM);
+#else
+int yyparse ();
+#endif
+#else /* ! YYPARSE_PARAM */
+#if defined __STDC__ || defined __cplusplus
+int yyparse (void);
+#else
+int yyparse ();
+#endif
+#endif /* ! YYPARSE_PARAM */
+
+#endif /* !YY_YY_Y_TAB_H_INCLUDED  */
diff --git a/src/cmd/gc/yerr.h b/src/cmd/gc/yerr.h
index 256c48b0ec..ff8410ba0a 100644
--- a/src/cmd/gc/yerr.h
+++ b/src/cmd/gc/yerr.h
@@ -71,6 +71,6 @@ static struct {
 	112, LNAME,
 	"nested func not allowed",
 
-	615, ';',
+	639, ';',
 	"else must be followed by if or statement block"
 };
diff --git a/test/fixedbugs/issue2615.go b/test/fixedbugs/issue2615.go
new file mode 100644
index 0000000000..686e1e1ada
--- /dev/null
+++ b/test/fixedbugs/issue2615.go
@@ -0,0 +1,547 @@
+// run
+
+// Copyright 2012 The Go Authors.  All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// Issue 2615: a long chain of else if's causes an overflow
+// in the parser stack.
+
+package main
+
+// test returns the index of the lowest set bit in a 256-bit vector.
+func test(x [4]uint64) int {
+	if x[0]&(1<<0) != 0 {
+		return 0
+	} else if x[0]&(1<<1) != 0 {
+		return 1
+	} else if x[0]&(1<<2) != 0 {
+		return 2
+	} else if x[0]&(1<<3) != 0 {
+		return 3
+	} else if x[0]&(1<<4) != 0 {
+		return 4
+	} else if x[0]&(1<<5) != 0 {
+		return 5
+	} else if x[0]&(1<<6) != 0 {
+		return 6
+	} else if x[0]&(1<<7) != 0 {
+		return 7
+	} else if x[0]&(1<<8) != 0 {
+		return 8
+	} else if x[0]&(1<<9) != 0 {
+		return 9
+	} else if x[0]&(1<<10) != 0 {
+		return 10
+	} else if x[0]&(1<<11) != 0 {
+		return 11
+	} else if x[0]&(1<<12) != 0 {
+		return 12
+	} else if x[0]&(1<<13) != 0 {
+		return 13
+	} else if x[0]&(1<<14) != 0 {
+		return 14
+	} else if x[0]&(1<<15) != 0 {
+		return 15
+	} else if x[0]&(1<<16) != 0 {
+		return 16
+	} else if x[0]&(1<<17) != 0 {
+		return 17
+	} else if x[0]&(1<<18) != 0 {
+		return 18
+	} else if x[0]&(1<<19) != 0 {
+		return 19
+	} else if x[0]&(1<<20) != 0 {
+		return 20
+	} else if x[0]&(1<<21) != 0 {
+		return 21
+	} else if x[0]&(1<<22) != 0 {
+		return 22
+	} else if x[0]&(1<<23) != 0 {
+		return 23
+	} else if x[0]&(1<<24) != 0 {
+		return 24
+	} else if x[0]&(1<<25) != 0 {
+		return 25
+	} else if x[0]&(1<<26) != 0 {
+		return 26
+	} else if x[0]&(1<<27) != 0 {
+		return 27
+	} else if x[0]&(1<<28) != 0 {
+		return 28
+	} else if x[0]&(1<<29) != 0 {
+		return 29
+	} else if x[0]&(1<<30) != 0 {
+		return 30
+	} else if x[0]&(1<<31) != 0 {
+		return 31
+	} else if x[0]&(1<<32) != 0 {
+		return 32
+	} else if x[0]&(1<<33) != 0 {
+		return 33
+	} else if x[0]&(1<<34) != 0 {
+		return 34
+	} else if x[0]&(1<<35) != 0 {
+		return 35
+	} else if x[0]&(1<<36) != 0 {
+		return 36
+	} else if x[0]&(1<<37) != 0 {
+		return 37
+	} else if x[0]&(1<<38) != 0 {
+		return 38
+	} else if x[0]&(1<<39) != 0 {
+		return 39
+	} else if x[0]&(1<<40) != 0 {
+		return 40
+	} else if x[0]&(1<<41) != 0 {
+		return 41
+	} else if x[0]&(1<<42) != 0 {
+		return 42
+	} else if x[0]&(1<<43) != 0 {
+		return 43
+	} else if x[0]&(1<<44) != 0 {
+		return 44
+	} else if x[0]&(1<<45) != 0 {
+		return 45
+	} else if x[0]&(1<<46) != 0 {
+		return 46
+	} else if x[0]&(1<<47) != 0 {
+		return 47
+	} else if x[0]&(1<<48) != 0 {
+		return 48
+	} else if x[0]&(1<<49) != 0 {
+		return 49
+	} else if x[0]&(1<<50) != 0 {
+		return 50
+	} else if x[0]&(1<<51) != 0 {
+		return 51
+	} else if x[0]&(1<<52) != 0 {
+		return 52
+	} else if x[0]&(1<<53) != 0 {
+		return 53
+	} else if x[0]&(1<<54) != 0 {
+		return 54
+	} else if x[0]&(1<<55) != 0 {
+		return 55
+	} else if x[0]&(1<<56) != 0 {
+		return 56
+	} else if x[0]&(1<<57) != 0 {
+		return 57
+	} else if x[0]&(1<<58) != 0 {
+		return 58
+	} else if x[0]&(1<<59) != 0 {
+		return 59
+	} else if x[0]&(1<<60) != 0 {
+		return 60
+	} else if x[0]&(1<<61) != 0 {
+		return 61
+	} else if x[0]&(1<<62) != 0 {
+		return 62
+	} else if x[0]&(1<<63) != 0 {
+		return 63
+	} else if x[1]&(1<<0) != 0 {
+		return 64
+	} else if x[1]&(1<<1) != 0 {
+		return 65
+	} else if x[1]&(1<<2) != 0 {
+		return 66
+	} else if x[1]&(1<<3) != 0 {
+		return 67
+	} else if x[1]&(1<<4) != 0 {
+		return 68
+	} else if x[1]&(1<<5) != 0 {
+		return 69
+	} else if x[1]&(1<<6) != 0 {
+		return 70
+	} else if x[1]&(1<<7) != 0 {
+		return 71
+	} else if x[1]&(1<<8) != 0 {
+		return 72
+	} else if x[1]&(1<<9) != 0 {
+		return 73
+	} else if x[1]&(1<<10) != 0 {
+		return 74
+	} else if x[1]&(1<<11) != 0 {
+		return 75
+	} else if x[1]&(1<<12) != 0 {
+		return 76
+	} else if x[1]&(1<<13) != 0 {
+		return 77
+	} else if x[1]&(1<<14) != 0 {
+		return 78
+	} else if x[1]&(1<<15) != 0 {
+		return 79
+	} else if x[1]&(1<<16) != 0 {
+		return 80
+	} else if x[1]&(1<<17) != 0 {
+		return 81
+	} else if x[1]&(1<<18) != 0 {
+		return 82
+	} else if x[1]&(1<<19) != 0 {
+		return 83
+	} else if x[1]&(1<<20) != 0 {
+		return 84
+	} else if x[1]&(1<<21) != 0 {
+		return 85
+	} else if x[1]&(1<<22) != 0 {
+		return 86
+	} else if x[1]&(1<<23) != 0 {
+		return 87
+	} else if x[1]&(1<<24) != 0 {
+		return 88
+	} else if x[1]&(1<<25) != 0 {
+		return 89
+	} else if x[1]&(1<<26) != 0 {
+		return 90
+	} else if x[1]&(1<<27) != 0 {
+		return 91
+	} else if x[1]&(1<<28) != 0 {
+		return 92
+	} else if x[1]&(1<<29) != 0 {
+		return 93
+	} else if x[1]&(1<<30) != 0 {
+		return 94
+	} else if x[1]&(1<<31) != 0 {
+		return 95
+	} else if x[1]&(1<<32) != 0 {
+		return 96
+	} else if x[1]&(1<<33) != 0 {
+		return 97
+	} else if x[1]&(1<<34) != 0 {
+		return 98
+	} else if x[1]&(1<<35) != 0 {
+		return 99
+	} else if x[1]&(1<<36) != 0 {
+		return 100
+	} else if x[1]&(1<<37) != 0 {
+		return 101
+	} else if x[1]&(1<<38) != 0 {
+		return 102
+	} else if x[1]&(1<<39) != 0 {
+		return 103
+	} else if x[1]&(1<<40) != 0 {
+		return 104
+	} else if x[1]&(1<<41) != 0 {
+		return 105
+	} else if x[1]&(1<<42) != 0 {
+		return 106
+	} else if x[1]&(1<<43) != 0 {
+		return 107
+	} else if x[1]&(1<<44) != 0 {
+		return 108
+	} else if x[1]&(1<<45) != 0 {
+		return 109
+	} else if x[1]&(1<<46) != 0 {
+		return 110
+	} else if x[1]&(1<<47) != 0 {
+		return 111
+	} else if x[1]&(1<<48) != 0 {
+		return 112
+	} else if x[1]&(1<<49) != 0 {
+		return 113
+	} else if x[1]&(1<<50) != 0 {
+		return 114
+	} else if x[1]&(1<<51) != 0 {
+		return 115
+	} else if x[1]&(1<<52) != 0 {
+		return 116
+	} else if x[1]&(1<<53) != 0 {
+		return 117
+	} else if x[1]&(1<<54) != 0 {
+		return 118
+	} else if x[1]&(1<<55) != 0 {
+		return 119
+	} else if x[1]&(1<<56) != 0 {
+		return 120
+	} else if x[1]&(1<<57) != 0 {
+		return 121
+	} else if x[1]&(1<<58) != 0 {
+		return 122
+	} else if x[1]&(1<<59) != 0 {
+		return 123
+	} else if x[1]&(1<<60) != 0 {
+		return 124
+	} else if x[1]&(1<<61) != 0 {
+		return 125
+	} else if x[1]&(1<<62) != 0 {
+		return 126
+	} else if x[1]&(1<<63) != 0 {
+		return 127
+	} else if x[2]&(1<<0) != 0 {
+		return 128
+	} else if x[2]&(1<<1) != 0 {
+		return 129
+	} else if x[2]&(1<<2) != 0 {
+		return 130
+	} else if x[2]&(1<<3) != 0 {
+		return 131
+	} else if x[2]&(1<<4) != 0 {
+		return 132
+	} else if x[2]&(1<<5) != 0 {
+		return 133
+	} else if x[2]&(1<<6) != 0 {
+		return 134
+	} else if x[2]&(1<<7) != 0 {
+		return 135
+	} else if x[2]&(1<<8) != 0 {
+		return 136
+	} else if x[2]&(1<<9) != 0 {
+		return 137
+	} else if x[2]&(1<<10) != 0 {
+		return 138
+	} else if x[2]&(1<<11) != 0 {
+		return 139
+	} else if x[2]&(1<<12) != 0 {
+		return 140
+	} else if x[2]&(1<<13) != 0 {
+		return 141
+	} else if x[2]&(1<<14) != 0 {
+		return 142
+	} else if x[2]&(1<<15) != 0 {
+		return 143
+	} else if x[2]&(1<<16) != 0 {
+		return 144
+	} else if x[2]&(1<<17) != 0 {
+		return 145
+	} else if x[2]&(1<<18) != 0 {
+		return 146
+	} else if x[2]&(1<<19) != 0 {
+		return 147
+	} else if x[2]&(1<<20) != 0 {
+		return 148
+	} else if x[2]&(1<<21) != 0 {
+		return 149
+	} else if x[2]&(1<<22) != 0 {
+		return 150
+	} else if x[2]&(1<<23) != 0 {
+		return 151
+	} else if x[2]&(1<<24) != 0 {
+		return 152
+	} else if x[2]&(1<<25) != 0 {
+		return 153
+	} else if x[2]&(1<<26) != 0 {
+		return 154
+	} else if x[2]&(1<<27) != 0 {
+		return 155
+	} else if x[2]&(1<<28) != 0 {
+		return 156
+	} else if x[2]&(1<<29) != 0 {
+		return 157
+	} else if x[2]&(1<<30) != 0 {
+		return 158
+	} else if x[2]&(1<<31) != 0 {
+		return 159
+	} else if x[2]&(1<<32) != 0 {
+		return 160
+	} else if x[2]&(1<<33) != 0 {
+		return 161
+	} else if x[2]&(1<<34) != 0 {
+		return 162
+	} else if x[2]&(1<<35) != 0 {
+		return 163
+	} else if x[2]&(1<<36) != 0 {
+		return 164
+	} else if x[2]&(1<<37) != 0 {
+		return 165
+	} else if x[2]&(1<<38) != 0 {
+		return 166
+	} else if x[2]&(1<<39) != 0 {
+		return 167
+	} else if x[2]&(1<<40) != 0 {
+		return 168
+	} else if x[2]&(1<<41) != 0 {
+		return 169
+	} else if x[2]&(1<<42) != 0 {
+		return 170
+	} else if x[2]&(1<<43) != 0 {
+		return 171
+	} else if x[2]&(1<<44) != 0 {
+		return 172
+	} else if x[2]&(1<<45) != 0 {
+		return 173
+	} else if x[2]&(1<<46) != 0 {
+		return 174
+	} else if x[2]&(1<<47) != 0 {
+		return 175
+	} else if x[2]&(1<<48) != 0 {
+		return 176
+	} else if x[2]&(1<<49) != 0 {
+		return 177
+	} else if x[2]&(1<<50) != 0 {
+		return 178
+	} else if x[2]&(1<<51) != 0 {
+		return 179
+	} else if x[2]&(1<<52) != 0 {
+		return 180
+	} else if x[2]&(1<<53) != 0 {
+		return 181
+	} else if x[2]&(1<<54) != 0 {
+		return 182
+	} else if x[2]&(1<<55) != 0 {
+		return 183
+	} else if x[2]&(1<<56) != 0 {
+		return 184
+	} else if x[2]&(1<<57) != 0 {
+		return 185
+	} else if x[2]&(1<<58) != 0 {
+		return 186
+	} else if x[2]&(1<<59) != 0 {
+		return 187
+	} else if x[2]&(1<<60) != 0 {
+		return 188
+	} else if x[2]&(1<<61) != 0 {
+		return 189
+	} else if x[2]&(1<<62) != 0 {
+		return 190
+	} else if x[2]&(1<<63) != 0 {
+		return 191
+	} else if x[3]&(1<<0) != 0 {
+		return 192
+	} else if x[3]&(1<<1) != 0 {
+		return 193
+	} else if x[3]&(1<<2) != 0 {
+		return 194
+	} else if x[3]&(1<<3) != 0 {
+		return 195
+	} else if x[3]&(1<<4) != 0 {
+		return 196
+	} else if x[3]&(1<<5) != 0 {
+		return 197
+	} else if x[3]&(1<<6) != 0 {
+		return 198
+	} else if x[3]&(1<<7) != 0 {
+		return 199
+	} else if x[3]&(1<<8) != 0 {
+		return 200
+	} else if x[3]&(1<<9) != 0 {
+		return 201
+	} else if x[3]&(1<<10) != 0 {
+		return 202
+	} else if x[3]&(1<<11) != 0 {
+		return 203
+	} else if x[3]&(1<<12) != 0 {
+		return 204
+	} else if x[3]&(1<<13) != 0 {
+		return 205
+	} else if x[3]&(1<<14) != 0 {
+		return 206
+	} else if x[3]&(1<<15) != 0 {
+		return 207
+	} else if x[3]&(1<<16) != 0 {
+		return 208
+	} else if x[3]&(1<<17) != 0 {
+		return 209
+	} else if x[3]&(1<<18) != 0 {
+		return 210
+	} else if x[3]&(1<<19) != 0 {
+		return 211
+	} else if x[3]&(1<<20) != 0 {
+		return 212
+	} else if x[3]&(1<<21) != 0 {
+		return 213
+	} else if x[3]&(1<<22) != 0 {
+		return 214
+	} else if x[3]&(1<<23) != 0 {
+		return 215
+	} else if x[3]&(1<<24) != 0 {
+		return 216
+	} else if x[3]&(1<<25) != 0 {
+		return 217
+	} else if x[3]&(1<<26) != 0 {
+		return 218
+	} else if x[3]&(1<<27) != 0 {
+		return 219
+	} else if x[3]&(1<<28) != 0 {
+		return 220
+	} else if x[3]&(1<<29) != 0 {
+		return 221
+	} else if x[3]&(1<<30) != 0 {
+		return 222
+	} else if x[3]&(1<<31) != 0 {
+		return 223
+	} else if x[3]&(1<<32) != 0 {
+		return 224
+	} else if x[3]&(1<<33) != 0 {
+		return 225
+	} else if x[3]&(1<<34) != 0 {
+		return 226
+	} else if x[3]&(1<<35) != 0 {
+		return 227
+	} else if x[3]&(1<<36) != 0 {
+		return 228
+	} else if x[3]&(1<<37) != 0 {
+		return 229
+	} else if x[3]&(1<<38) != 0 {
+		return 230
+	} else if x[3]&(1<<39) != 0 {
+		return 231
+	} else if x[3]&(1<<40) != 0 {
+		return 232
+	} else if x[3]&(1<<41) != 0 {
+		return 233
+	} else if x[3]&(1<<42) != 0 {
+		return 234
+	} else if x[3]&(1<<43) != 0 {
+		return 235
+	} else if x[3]&(1<<44) != 0 {
+		return 236
+	} else if x[3]&(1<<45) != 0 {
+		return 237
+	} else if x[3]&(1<<46) != 0 {
+		return 238
+	} else if x[3]&(1<<47) != 0 {
+		return 239
+	} else if x[3]&(1<<48) != 0 {
+		return 240
+	} else if x[3]&(1<<49) != 0 {
+		return 241
+	} else if x[3]&(1<<50) != 0 {
+		return 242
+	} else if x[3]&(1<<51) != 0 {
+		return 243
+	} else if x[3]&(1<<52) != 0 {
+		return 244
+	} else if x[3]&(1<<53) != 0 {
+		return 245
+	} else if x[3]&(1<<54) != 0 {
+		return 246
+	} else if x[3]&(1<<55) != 0 {
+		return 247
+	} else if x[3]&(1<<56) != 0 {
+		return 248
+	} else if x[3]&(1<<57) != 0 {
+		return 249
+	} else if x[3]&(1<<58) != 0 {
+		return 250
+	} else if x[3]&(1<<59) != 0 {
+		return 251
+	} else if x[3]&(1<<60) != 0 {
+		return 252
+	} else if x[3]&(1<<61) != 0 {
+		return 253
+	} else if x[3]&(1<<62) != 0 {
+		return 254
+	} else if x[3]&(1<<63) != 0 {
+		return 255
+	}
+	return -1
+}
+
+func main() {
+	const ones = ^uint64(0)
+	for i := 0; i < 256; i++ {
+		bits := [4]uint64{ones, ones, ones, ones}
+
+		// clear bottom i bits
+		bits[i/64] ^= 1<<(uint(i)&63) - 1
+		for j := i/64 - 1; j >= 0; j-- {
+			bits[j] = 0
+		}
+
+		k := test(bits)
+		if k != i {
+			print("test(bits)=", k, " want ", i, "\n")
+			panic("failed")
+		}
+	}
+}
