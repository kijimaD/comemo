commit 99699d14fe538f6886948ee6d3cc57f7f2a9bff7
Author: Dan Scales <danscales@google.com>
Date:   Thu Nov 4 11:59:17 2021 -0700

    cmd/compile: fix TypeDefn to deal with node with no Ntype set
    
    Adjust TypeDefn(), which is used by reportTypeLoop(), to work for nodes
    with no Ntype set (which are all nodes in -G=3 mode). Normally,
    reportTypeLoop() would not be called, because the types2 typechecker
    would have already caught it. This is a possible way to report an
    unusual type loop involving type params, which is not being caught by
    the types2 type checker.
    
    Updates #48962
    
    Change-Id: I55edee46026eece2e8647c5b5b4d8dfb39eeb5f8
    Reviewed-on: https://go-review.googlesource.com/c/go/+/361398
    Trust: Dan Scales <danscales@google.com>
    Reviewed-by: Matthew Dempsky <mdempsky@google.com>
    Reviewed-by: Robert Griesemer <gri@golang.org>
---
 src/cmd/compile/internal/ir/name.go |  5 ++++-
 test/typeparam/issue48962.go        | 15 +++++++++++++++
 2 files changed, 19 insertions(+), 1 deletion(-)

diff --git a/src/cmd/compile/internal/ir/name.go b/src/cmd/compile/internal/ir/name.go
index dcfff7deba..1d4110c73c 100644
--- a/src/cmd/compile/internal/ir/name.go
+++ b/src/cmd/compile/internal/ir/name.go
@@ -146,7 +146,10 @@ func (n *Name) editChildren(edit func(Node) Node)  {}
 // That is, given "type T Defn", it returns Defn.
 // It is used by package types.
 func (n *Name) TypeDefn() *types.Type {
-	return n.Ntype.Type()
+	if n.Ntype != nil {
+		return n.Ntype.Type()
+	}
+	return n.Type()
 }
 
 // RecordFrameOffset records the frame offset for the name.
diff --git a/test/typeparam/issue48962.go b/test/typeparam/issue48962.go
new file mode 100644
index 0000000000..de9a23cdd2
--- /dev/null
+++ b/test/typeparam/issue48962.go
@@ -0,0 +1,15 @@
+// errorcheck -G=3
+
+// Copyright 2021 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package p
+
+type T0[P any] struct { // ERROR "invalid recursive type"
+	f P
+}
+
+type T1 struct {
+	_ T0[T1]
+}
