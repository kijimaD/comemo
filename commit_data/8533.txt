commit da32ed7bf18919f5397e620b794afe30a7c1dd37
Author: Brad Fitzpatrick <bradfitz@golang.org>
Date:   Sun May 29 09:32:36 2011 -0700

    http: let Transport use a custom net.Dial function
    
    Permits the use of SOCKS proxy dialer with
    the transport.
    
    R=golang-dev, adg
    CC=golang-dev
    https://golang.org/cl/4536091
---
 src/pkg/http/transport.go | 22 +++++++++++++++++-----
 1 file changed, 17 insertions(+), 5 deletions(-)

diff --git a/src/pkg/http/transport.go b/src/pkg/http/transport.go
index 2b5e5a4250..c907d85fd2 100644
--- a/src/pkg/http/transport.go
+++ b/src/pkg/http/transport.go
@@ -42,12 +42,17 @@ type Transport struct {
 	// TODO: tunable on timeout on cached connections
 	// TODO: optional pipelining
 
-	// Proxy optionally specifies a function to return a proxy for
-	// a given Request. If the function returns a non-nil error,
-	// the request is aborted with the provided error. If Proxy is
-	// nil or returns a nil *URL, no proxy is used.
+	// Proxy specifies a function to return a proxy for a given
+	// Request. If the function returns a non-nil error, the
+	// request is aborted with the provided error.
+	// If Proxy is nil or returns a nil *URL, no proxy is used.
 	Proxy func(*Request) (*URL, os.Error)
 
+	// Dial specifies the dial function for creating TCP
+	// connections.
+	// If Dial is nil, net.Dial is used.
+	Dial func(net, addr string) (c net.Conn, err os.Error)
+
 	DisableKeepAlives  bool
 	DisableCompression bool
 
@@ -255,6 +260,13 @@ func (t *Transport) getIdleConn(cm *connectMethod) (pconn *persistConn) {
 	return
 }
 
+func (t *Transport) dial(network, addr string) (c net.Conn, err os.Error) {
+	if t.Dial != nil {
+		return t.Dial(network, addr)
+	}
+	return net.Dial(network, addr)
+}
+
 // getConn dials and creates a new persistConn to the target as
 // specified in the connectMethod.  This includes doing a proxy CONNECT
 // and/or setting up TLS.  If this doesn't return an error, the persistConn
@@ -264,7 +276,7 @@ func (t *Transport) getConn(cm *connectMethod) (*persistConn, os.Error) {
 		return pc, nil
 	}
 
-	conn, err := net.Dial("tcp", cm.addr())
+	conn, err := t.dial("tcp", cm.addr())
 	if err != nil {
 		if cm.proxyURL != nil {
 			err = fmt.Errorf("http: error connecting to proxy %s: %v", cm.proxyURL, err)
