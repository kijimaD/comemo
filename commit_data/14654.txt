commit 78cee46f3ac116590380f2e25c0910eb44112d90
Author: Mikio Hara <mikioh.mikioh@gmail.com>
Date:   Sat Dec 15 14:19:51 2012 +0900

    src: gofmt -w -s
    
    R=golang-dev, dsymonds
    CC=golang-dev
    https://golang.org/cl/6935059
---
 src/pkg/exp/locale/collate/colelem.go       | 2 +-
 src/pkg/runtime/race/testdata/map_test.go   | 4 ++--
 src/pkg/runtime/race/testdata/slice_test.go | 6 +++---
 3 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/src/pkg/exp/locale/collate/colelem.go b/src/pkg/exp/locale/collate/colelem.go
index de621b1a1d..0ff15aa7eb 100644
--- a/src/pkg/exp/locale/collate/colelem.go
+++ b/src/pkg/exp/locale/collate/colelem.go
@@ -128,7 +128,7 @@ func (ce colElem) tertiary() uint8 {
 	} else if ce&ceTypeMask == ceType1 {
 		return defaultTertiary
 	}
-	// ce is a quaternary value. 
+	// ce is a quaternary value.
 	return 0
 }
 
diff --git a/src/pkg/runtime/race/testdata/map_test.go b/src/pkg/runtime/race/testdata/map_test.go
index 6e1449744d..36aab7aad2 100644
--- a/src/pkg/runtime/race/testdata/map_test.go
+++ b/src/pkg/runtime/race/testdata/map_test.go
@@ -57,7 +57,7 @@ func TestRaceMapRange2(t *testing.T) {
 	m := make(map[int]int)
 	ch := make(chan bool, 1)
 	go func() {
-		for _, _ = range m {
+		for _ = range m {
 		}
 		ch <- true
 	}()
@@ -77,7 +77,7 @@ func TestNoRaceMapRangeRange(t *testing.T) {
 		}
 		ch <- true
 	}()
-	for _, _ = range m {
+	for _ = range m {
 	}
 	<-ch
 }
diff --git a/src/pkg/runtime/race/testdata/slice_test.go b/src/pkg/runtime/race/testdata/slice_test.go
index cfddf356d9..1440a5f13e 100644
--- a/src/pkg/runtime/race/testdata/slice_test.go
+++ b/src/pkg/runtime/race/testdata/slice_test.go
@@ -252,7 +252,7 @@ func TestRaceSliceRangeAppend(t *testing.T) {
 		s = append(s, 3)
 		c <- true
 	}()
-	for _, _ = range s {
+	for _ = range s {
 	}
 	<-c
 }
@@ -264,7 +264,7 @@ func TestNoRaceSliceRangeAppend(t *testing.T) {
 		_ = append(s, 3)
 		c <- true
 	}()
-	for _, _ = range s {
+	for _ = range s {
 	}
 	<-c
 }
@@ -295,7 +295,7 @@ func TestRaceSliceVarRange(t *testing.T) {
 	c := make(chan bool, 1)
 	s := make([]int, 10)
 	go func() {
-		for _, _ = range s {
+		for _ = range s {
 		}
 		c <- true
 	}()
