commit f1abe0d06bc94399c4abee041624efa36742fc1e
Author: Josh Bleecher Snyder <josharian@gmail.com>
Date:   Tue Sep 16 14:22:33 2014 -0700

    sync: simplify TestOncePanic
    
    Follow-up to CL 137350043.
    
    LGTM=r
    R=r
    CC=golang-codereviews
    https://golang.org/cl/141620043
---
 src/sync/once_test.go | 30 ++++++++++++------------------
 1 file changed, 12 insertions(+), 18 deletions(-)

diff --git a/src/sync/once_test.go b/src/sync/once_test.go
index 10beefde35..1eec8d18ea 100644
--- a/src/sync/once_test.go
+++ b/src/sync/once_test.go
@@ -40,26 +40,20 @@ func TestOnce(t *testing.T) {
 }
 
 func TestOncePanic(t *testing.T) {
-	once := new(Once)
-	for i := 0; i < 2; i++ {
-		func() {
-			defer func() {
-				r := recover()
-				if r == nil && i == 0 {
-					t.Fatalf("Once.Do() has not panic'ed on first iteration")
-				}
-				if r != nil && i == 1 {
-					t.Fatalf("Once.Do() has panic'ed on second iteration")
-				}
-			}()
-			once.Do(func() {
-				panic("failed")
-			})
+	var once Once
+	func() {
+		defer func() {
+			if r := recover(); r == nil {
+				t.Fatalf("Once.Do did not panic")
+			}
 		}()
-	}
-	once.Do(func() {})
+		once.Do(func() {
+			panic("failed")
+		})
+	}()
+
 	once.Do(func() {
-		t.Fatalf("Once called twice")
+		t.Fatalf("Once.Do called twice")
 	})
 }
 
