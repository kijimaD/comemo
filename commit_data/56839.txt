commit fc5c590d8dac4edb7b87b6c943948033a3920266
Author: Olivier Mengu√© <olivier.mengue@gmail.com>
Date:   Tue May 23 16:51:04 2023 +0200

    errors: add godoc links
    
    Change-Id: I766e656e6b967290d692313ea1391878fc21c92d
    Reviewed-on: https://go-review.googlesource.com/c/go/+/497375
    Reviewed-by: Ian Lance Taylor <iant@google.com>
    Auto-Submit: Ian Lance Taylor <iant@google.com>
    TryBot-Result: Gopher Robot <gobot@golang.org>
    Run-TryBot: Ian Lance Taylor <iant@google.com>
    Reviewed-by: Bryan Mills <bcmills@google.com>
---
 src/errors/errors.go | 12 ++++++------
 src/errors/wrap.go   |  2 +-
 2 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/src/errors/errors.go b/src/errors/errors.go
index 26db2d2bbf..41397774d3 100644
--- a/src/errors/errors.go
+++ b/src/errors/errors.go
@@ -4,7 +4,7 @@
 
 // Package errors implements functions to manipulate errors.
 //
-// The New function creates errors whose only content is a text message.
+// The [New] function creates errors whose only content is a text message.
 //
 // An error e wraps another error if e's type has one of the methods
 //
@@ -16,12 +16,12 @@
 // indicates that e does not wrap any error. It is invalid for an
 // Unwrap method to return an []error containing a nil error value.
 //
-// An easy way to create wrapped errors is to call fmt.Errorf and apply
+// An easy way to create wrapped errors is to call [fmt.Errorf] and apply
 // the %w verb to the error argument:
 //
 //	wrapsErr := fmt.Errorf("... %w ...", ..., err, ...)
 //
-// Successive unwrapping of an error creates a tree. The Is and As
+// Successive unwrapping of an error creates a tree. The [Is] and [As]
 // functions inspect an error's tree by examining first the error
 // itself followed by the tree of each of its children in turn
 // (pre-order, depth-first traversal).
@@ -36,7 +36,7 @@
 //
 //	if err == fs.ErrExist
 //
-// because the former will succeed if err wraps fs.ErrExist.
+// because the former will succeed if err wraps [io/fs.ErrExist].
 //
 // As examines the tree of its first argument looking for an error that can be
 // assigned to its second argument, which must be a pointer. If it succeeds, it
@@ -53,7 +53,7 @@
 //		fmt.Println(perr.Path)
 //	}
 //
-// because the former will succeed if err wraps an *fs.PathError.
+// because the former will succeed if err wraps an [*io/fs.PathError].
 package errors
 
 // New returns an error that formats as the given text.
@@ -72,7 +72,7 @@ func (e *errorString) Error() string {
 }
 
 // ErrUnsupported indicates that a requested operation cannot be performed,
-// because it is unsupported. For example, a call to os.Link when using a
+// because it is unsupported. For example, a call to [os.Link] when using a
 // file system that does not support hard links.
 //
 // Functions and methods should not return this error but should instead
diff --git a/src/errors/wrap.go b/src/errors/wrap.go
index 1f54b66e5c..2c934eed5a 100644
--- a/src/errors/wrap.go
+++ b/src/errors/wrap.go
@@ -38,7 +38,7 @@ func Unwrap(err error) error {
 //
 //	func (m MyError) Is(target error) bool { return target == fs.ErrExist }
 //
-// then Is(MyError{}, fs.ErrExist) returns true. See syscall.Errno.Is for
+// then Is(MyError{}, fs.ErrExist) returns true. See [syscall.Errno.Is] for
 // an example in the standard library. An Is method should only shallowly
 // compare err and the target and not call Unwrap on either.
 func Is(err, target error) bool {
