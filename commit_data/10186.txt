commit c8ad1a4dc4d0384d963df749cfc3c373e27d6a17
Author: Russ Cox <rsc@golang.org>
Date:   Tue Nov 1 21:49:22 2011 -0400

    cgo, gotest: use error instead of os.Error in generated code
    
    R=golang-dev, iant
    CC=golang-dev
    https://golang.org/cl/5319057
---
 src/cmd/cgo/doc.go       | 2 +-
 src/cmd/cgo/out.go       | 8 ++++----
 src/cmd/gotest/gotest.go | 3 +--
 3 files changed, 6 insertions(+), 7 deletions(-)

diff --git a/src/cmd/cgo/doc.go b/src/cmd/cgo/doc.go
index dc9edd6fd3..fa7931d277 100644
--- a/src/cmd/cgo/doc.go
+++ b/src/cmd/cgo/doc.go
@@ -59,7 +59,7 @@ struct_, union_, or enum_, as in C.struct_stat.
 
 Any C function that returns a value may be called in a multiple
 assignment context to retrieve both the return value and the
-C errno variable as an os.Error.  For example:
+C errno variable as an error.  For example:
 
 	n, err := C.atoi("abc")
 
diff --git a/src/cmd/cgo/out.go b/src/cmd/cgo/out.go
index 498ab1566b..7f65f0644c 100644
--- a/src/cmd/cgo/out.go
+++ b/src/cmd/cgo/out.go
@@ -48,7 +48,7 @@ func (p *Package) writeDefs() {
 	fmt.Fprintf(fgo2, "import \"os\"\n\n")
 	fmt.Fprintf(fgo2, "import _ \"runtime/cgo\"\n\n")
 	fmt.Fprintf(fgo2, "type _ unsafe.Pointer\n\n")
-	fmt.Fprintf(fgo2, "func _Cerrno(dst *os.Error, x int) { *dst = os.Errno(x) }\n")
+	fmt.Fprintf(fgo2, "func _Cerrno(dst *error, x int) { *dst = os.Errno(x) }\n")
 
 	for name, def := range typedef {
 		fmt.Fprintf(fgo2, "type %s ", name)
@@ -203,7 +203,7 @@ func (p *Package) structType(n *Name) (string, int64) {
 		off += pad
 	}
 	if n.AddError {
-		fmt.Fprint(&buf, "\t\tvoid *e[2]; /* os.Error */\n")
+		fmt.Fprint(&buf, "\t\tvoid *e[2]; /* error */\n")
 		off += 2 * p.PtrSize
 	}
 	if off == 0 {
@@ -217,9 +217,9 @@ func (p *Package) writeDefsFunc(fc, fgo2 *os.File, n *Name) {
 	name := n.Go
 	gtype := n.FuncType.Go
 	if n.AddError {
-		// Add "os.Error" to return type list.
+		// Add "error" to return type list.
 		// Type list is known to be 0 or 1 element - it's a C function.
-		err := &ast.Field{Type: ast.NewIdent("os.Error")}
+		err := &ast.Field{Type: ast.NewIdent("error")}
 		l := gtype.Results.List
 		if len(l) == 0 {
 			l = []*ast.Field{err}
diff --git a/src/cmd/gotest/gotest.go b/src/cmd/gotest/gotest.go
index d5752e76ed..ad350dbf0d 100644
--- a/src/cmd/gotest/gotest.go
+++ b/src/cmd/gotest/gotest.go
@@ -401,7 +401,6 @@ func writeTestmainGo() {
 		fmt.Fprintf(b, "import target_test %q\n", "./_xtest_")
 	}
 	fmt.Fprintf(b, "import %q\n", "testing")
-	fmt.Fprintf(b, "import %q\n", "os")
 	fmt.Fprintf(b, "import %q\n", "regexp")
 	fmt.Fprintln(b) // for gofmt
 
@@ -454,7 +453,7 @@ var testBody = `
 var matchPat string
 var matchRe *regexp.Regexp
 
-func matchString(pat, str string) (result bool, err os.Error) {
+func matchString(pat, str string) (result bool, err error) {
 	if matchRe == nil || matchPat != pat {
 		matchPat = pat
 		matchRe, err = regexp.Compile(matchPat)
