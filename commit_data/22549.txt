commit 9ee6baa82a9776ba5a74662a6c0e9483a3c93dad
Author: David Crawshaw <crawshaw@golang.org>
Date:   Mon Mar 23 12:40:00 2015 -0400

    syscall: disable test that forks on darwin/arm
    
    This test was introduced in cl/5130 and broke the darwin/arm builder.
    
    Also check some errors, which was making the failure hard to decipher.
    
    Change-Id: Ifb1d60b9971782cf8d2e979d83f8a81249d7ee9b
    Reviewed-on: https://go-review.googlesource.com/7932
    Reviewed-by: Rob Pike <r@golang.org>
---
 src/syscall/exec_unix_test.go | 12 ++++++++++--
 1 file changed, 10 insertions(+), 2 deletions(-)

diff --git a/src/syscall/exec_unix_test.go b/src/syscall/exec_unix_test.go
index 6b942fc4ac..954d9aa26f 100644
--- a/src/syscall/exec_unix_test.go
+++ b/src/syscall/exec_unix_test.go
@@ -11,6 +11,7 @@ import (
 	"os"
 	"os/exec"
 	"os/signal"
+	"runtime"
 	"syscall"
 	"testing"
 	"unsafe"
@@ -34,15 +35,22 @@ func (c *command) Info() (pid, pgrp int) {
 }
 
 func (c *command) Start() {
-	c.proc.Start()
+	if err := c.proc.Start(); err != nil {
+		c.test.Fatal(err)
+	}
 }
 
 func (c *command) Stop() {
 	c.pipe.Close()
-	c.proc.Wait()
+	if err := c.proc.Wait(); err != nil {
+		c.test.Fatal(err)
+	}
 }
 
 func create(t *testing.T) *command {
+	if runtime.GOOS == "darwin" && (runtime.GOARCH == "arm" || runtime.GOARCH == "arm64") {
+		t.Skipf("skipping on %s/%s, cannot fork", runtime.GOOS, runtime.GOARCH)
+	}
 	proc := exec.Command("cat")
 	stdin, err := proc.StdinPipe()
 	if err != nil {
