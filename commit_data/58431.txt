commit eebeca803d6df0d3434106d7f6ebb87229c54fd7
Author: Richard Wang <richardwa@google.com>
Date:   Thu Sep 14 05:13:40 2023 +0000

    runtime: clarify error when returning unpinned pointers
    
    With the introduction of runtime.Pinner, returning a pointer to a pinned
    struct that then points to an unpinned Go pointer is correctly caught.
    
    However, the error message remained as "cgo result has Go pointer",
    which should be updated to acknowledge that Go pointers to pinned
    memory are allowed.
    
    This also updates the comments for cgoCheckArg and cgoCheckResult
    to similarly clarify.
    
    Updates #46787
    
    Change-Id: I147bb09e87dfb70a24d6d43e4cf84e8bcc2aff48
    GitHub-Last-Rev: 706facb9f2bf28e1f6e575b7626f8feeca1187cf
    GitHub-Pull-Request: golang/go#62606
    Reviewed-on: https://go-review.googlesource.com/c/go/+/527702
    Reviewed-by: Michael Knyszek <mknyszek@google.com>
    LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>
    Reviewed-by: Heschi Kreinick <heschi@google.com>
    Auto-Submit: Michael Knyszek <mknyszek@google.com>
---
 src/runtime/cgocall.go | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/src/runtime/cgocall.go b/src/runtime/cgocall.go
index 73efd28491..6c2fd8f907 100644
--- a/src/runtime/cgocall.go
+++ b/src/runtime/cgocall.go
@@ -533,13 +533,13 @@ func cgoCheckPointer(ptr any, arg any) {
 }
 
 const cgoCheckPointerFail = "cgo argument has Go pointer to unpinned Go pointer"
-const cgoResultFail = "cgo result has Go pointer"
+const cgoResultFail = "cgo result is unpinned Go pointer or points to unpinned Go pointer"
 
 // cgoCheckArg is the real work of cgoCheckPointer. The argument p
 // is either a pointer to the value (of type t), or the value itself,
 // depending on indir. The top parameter is whether we are at the top
 // level, where Go pointers are allowed. Go pointers to pinned objects are
-// always allowed.
+// allowed as long as they don't reference other unpinned pointers.
 func cgoCheckArg(t *_type, p unsafe.Pointer, indir, top bool, msg string) {
 	if t.PtrBytes == 0 || p == nil {
 		// If the type has no pointers there is nothing to do.
@@ -726,8 +726,8 @@ func cgoInRange(p unsafe.Pointer, start, end uintptr) bool {
 }
 
 // cgoCheckResult is called to check the result parameter of an
-// exported Go function. It panics if the result is or contains a Go
-// pointer.
+// exported Go function. It panics if the result is or contains any
+// other pointer into unpinned Go memory.
 func cgoCheckResult(val any) {
 	if !goexperiment.CgoCheck2 && debug.cgocheck == 0 {
 		return
