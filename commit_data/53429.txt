commit 0df7ad2e79ac5ca5197509596446dd83380aaf90
Author: cui fliter <imcusg@gmail.com>
Date:   Tue Aug 16 13:43:23 2022 +0000

    all: fix some typos
    
    Change-Id: I147622770587cff1551a0be189003666463f34e3
    GitHub-Last-Rev: 71b5375983820445a331c46481a2a3a44fafb760
    GitHub-Pull-Request: golang/go#54472
    Reviewed-on: https://go-review.googlesource.com/c/go/+/424154
    Reviewed-by: Keith Randall <khr@google.com>
    Reviewed-by: Keith Randall <khr@golang.org>
    Run-TryBot: Keith Randall <khr@golang.org>
    Auto-Submit: Keith Randall <khr@golang.org>
    TryBot-Result: Gopher Robot <gobot@golang.org>
    Reviewed-by: Matthew Dempsky <mdempsky@google.com>
---
 src/cmd/compile/internal/noder/transform.go   | 2 +-
 src/cmd/compile/internal/typecheck/func.go    | 2 +-
 src/cmd/compile/internal/types2/check_test.go | 2 +-
 src/go/types/check_test.go                    | 2 +-
 src/runtime/asan/asan.go                      | 4 ++--
 src/runtime/mgclimit.go                       | 2 +-
 6 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/src/cmd/compile/internal/noder/transform.go b/src/cmd/compile/internal/noder/transform.go
index 50254e694a..87068a9412 100644
--- a/src/cmd/compile/internal/noder/transform.go
+++ b/src/cmd/compile/internal/noder/transform.go
@@ -733,7 +733,7 @@ func transformAppend(n *ir.CallExpr) ir.Node {
 		// assignconvfn is of args[1] not required here, as the
 		// types of args[0] and args[1] don't need to match
 		// (They will both have an underlying type which are
-		// slices of indentical base types, or be []byte and string.)
+		// slices of identical base types, or be []byte and string.)
 		// See issue 53888.
 		return n
 	}
diff --git a/src/cmd/compile/internal/typecheck/func.go b/src/cmd/compile/internal/typecheck/func.go
index 40eab64a54..70ebc0e457 100644
--- a/src/cmd/compile/internal/typecheck/func.go
+++ b/src/cmd/compile/internal/typecheck/func.go
@@ -463,7 +463,7 @@ func tcAppend(n *ir.CallExpr) ir.Node {
 		// AssignConv is of args[1] not required here, as the
 		// types of args[0] and args[1] don't need to match
 		// (They will both have an underlying type which are
-		// slices of indentical base types, or be []byte and string.)
+		// slices of identical base types, or be []byte and string.)
 		// See issue 53888.
 		return n
 	}
diff --git a/src/cmd/compile/internal/types2/check_test.go b/src/cmd/compile/internal/types2/check_test.go
index 67540dcf2c..845dcb6aa9 100644
--- a/src/cmd/compile/internal/types2/check_test.go
+++ b/src/cmd/compile/internal/types2/check_test.go
@@ -86,7 +86,7 @@ func delta(x, y uint) uint {
 
 // parseFlags parses flags from the first line of the given source
 // (from src if present, or by reading from the file) if the line
-// starts with "//" (line comment) followed by "-" (possiby with
+// starts with "//" (line comment) followed by "-" (possibly with
 // spaces between). Otherwise the line is ignored.
 func parseFlags(filename string, src []byte, flags *flag.FlagSet) error {
 	// If there is no src, read from the file.
diff --git a/src/go/types/check_test.go b/src/go/types/check_test.go
index cd149499b2..f73133b867 100644
--- a/src/go/types/check_test.go
+++ b/src/go/types/check_test.go
@@ -185,7 +185,7 @@ func eliminate(t *testing.T, errmap map[string][]string, errlist []error) {
 
 // parseFlags parses flags from the first line of the given source
 // (from src if present, or by reading from the file) if the line
-// starts with "//" (line comment) followed by "-" (possiby with
+// starts with "//" (line comment) followed by "-" (possibly with
 // spaces between). Otherwise the line is ignored.
 func parseFlags(filename string, src []byte, flags *flag.FlagSet) error {
 	// If there is no src, read from the file.
diff --git a/src/runtime/asan/asan.go b/src/runtime/asan/asan.go
index 4359f41e3f..3b7c0511f5 100644
--- a/src/runtime/asan/asan.go
+++ b/src/runtime/asan/asan.go
@@ -34,7 +34,7 @@ void __asan_poison_go(void *addr, uintptr_t sz) {
 	__asan_poison_memory_region(addr, sz);
 }
 
-// Keep in sync with the defination in compiler-rt
+// Keep in sync with the definition in compiler-rt
 // https://github.com/llvm/llvm-project/blob/main/compiler-rt/lib/asan/asan_interface_internal.h#L41
 // This structure is used to describe the source location of
 // a place where global was defined.
@@ -44,7 +44,7 @@ struct _asan_global_source_location {
 	int column_no;
 };
 
-// Keep in sync with the defination in compiler-rt
+// Keep in sync with the definition in compiler-rt
 // https://github.com/llvm/llvm-project/blob/main/compiler-rt/lib/asan/asan_interface_internal.h#L48
 // So far, the current implementation is only compatible with the ASan library from version v7 to v9.
 // https://github.com/llvm/llvm-project/blob/main/compiler-rt/lib/asan/asan_init_version.h
diff --git a/src/runtime/mgclimit.go b/src/runtime/mgclimit.go
index d94e471643..485a59bdf7 100644
--- a/src/runtime/mgclimit.go
+++ b/src/runtime/mgclimit.go
@@ -339,7 +339,7 @@ func (l *gcCPULimiterState) resetCapacity(now int64, nprocs int32) {
 	l.unlock()
 }
 
-// limiterEventType indicates the type of an event occuring on some P.
+// limiterEventType indicates the type of an event occurring on some P.
 //
 // These events represent the full set of events that the GC CPU limiter tracks
 // to execute its function.
