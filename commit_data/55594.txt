commit 203e59ad41bd288e1d92b6f617c2f55e70d3c8e3
Author: Filippo Valsorda <filippo@golang.org>
Date:   Mon Feb 13 15:16:27 2023 +0100

    crypto/internal/nistec: reduce P-256 scalar
    
    Unlike the rest of nistec, the P-256 assembly doesn't use complete
    addition formulas, meaning that p256PointAdd[Affine]Asm won't return the
    correct value if the two inputs are equal.
    
    This was (undocumentedly) ignored in the scalar multiplication loops
    because as long as the input point is not the identity and the scalar is
    lower than the order of the group, the addition inputs can't be the same.
    
    As part of the math/big rewrite, we went however from always reducing
    the scalar to only checking its length, under the incorrect assumption
    that the scalar multiplication loop didn't require reduction.
    
    Added a reduction, and while at it added it in P256OrdInverse, too, to
    enforce a universal reduction invariant on p256OrdElement values.
    
    Note that if the input point is the infinity, the code currently still
    relies on undefined behavior, but that's easily tested to behave
    acceptably, and will be addressed in a future CL.
    
    Fixes #58647
    Fixes CVE-2023-24532
    
    (Filed with the "safe APIs like complete addition formulas are good" dept.)
    
    Change-Id: I7b2c75238440e6852be2710fad66ff1fdc4e2b24
    Reviewed-on: https://go-review.googlesource.com/c/go/+/471255
    TryBot-Result: Gopher Robot <gobot@golang.org>
    Reviewed-by: Roland Shoemaker <roland@golang.org>
    Run-TryBot: Filippo Valsorda <filippo@golang.org>
    Auto-Submit: Filippo Valsorda <filippo@golang.org>
    Reviewed-by: Damien Neil <dneil@google.com>

 src/crypto/internal/nistec/nistec_test.go | 81 +++++++++++++++++++++++++++++++
 src/crypto/internal/nistec/p256_asm.go    | 17 +++++++
 src/crypto/internal/nistec/p256_ordinv.go |  1 +
 3 files changed, 99 insertions(+)
