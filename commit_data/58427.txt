commit 45320c23f21cb89234486b50b8644e879a16ca65
Author: Cherry Mui <cherryyz@google.com>
Date:   Tue Nov 7 12:01:09 2023 -0500

    all: rename GOEXPERIMENT=range to rangefunc
    
    Range over integer is enabled now without the GOEXPERIMENT. The
    GOEXPERIMENT is only for range over func. Rename it to rangefunc.
    
    For #61405.
    
    Change-Id: I9405fb8e2e30827875716786823856090a1a0cad
    Reviewed-on: https://go-review.googlesource.com/c/go/+/539277
    Reviewed-by: Russ Cox <rsc@golang.org>
    LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>
---
 src/cmd/compile/internal/types2/check_test.go  | 6 +++---
 src/cmd/compile/internal/types2/stmt.go        | 2 +-
 src/go/types/check_test.go                     | 6 +++---
 src/go/types/stmt.go                           | 2 +-
 src/internal/goexperiment/exp_range_off.go     | 8 --------
 src/internal/goexperiment/exp_range_on.go      | 8 --------
 src/internal/goexperiment/exp_rangefunc_off.go | 8 ++++++++
 src/internal/goexperiment/exp_rangefunc_on.go  | 8 ++++++++
 src/internal/goexperiment/flags.go             | 4 ++--
 src/internal/types/testdata/spec/range.go      | 2 +-
 test/range2.go                                 | 2 +-
 test/range4.go                                 | 2 +-
 test/rangegen.go                               | 2 +-
 13 files changed, 30 insertions(+), 30 deletions(-)

diff --git a/src/cmd/compile/internal/types2/check_test.go b/src/cmd/compile/internal/types2/check_test.go
index 791d9f028c..d70d7e3232 100644
--- a/src/cmd/compile/internal/types2/check_test.go
+++ b/src/cmd/compile/internal/types2/check_test.go
@@ -368,11 +368,11 @@ func TestIssue47243_TypedRHS(t *testing.T) {
 }
 
 func TestCheck(t *testing.T) {
-	old := buildcfg.Experiment.Range
+	old := buildcfg.Experiment.RangeFunc
 	defer func() {
-		buildcfg.Experiment.Range = old
+		buildcfg.Experiment.RangeFunc = old
 	}()
-	buildcfg.Experiment.Range = true
+	buildcfg.Experiment.RangeFunc = true
 
 	DefPredeclaredTestFuncs()
 	testDirFiles(t, "../../../../internal/types/testdata/check", 50, false) // TODO(gri) narrow column tolerance
diff --git a/src/cmd/compile/internal/types2/stmt.go b/src/cmd/compile/internal/types2/stmt.go
index fc13e9890f..e4bda49c52 100644
--- a/src/cmd/compile/internal/types2/stmt.go
+++ b/src/cmd/compile/internal/types2/stmt.go
@@ -1009,7 +1009,7 @@ func rangeKeyVal(typ Type) (key, val Type, cause string, isFunc, ok bool) {
 		}
 		return typ.elem, nil, "", false, true
 	case *Signature:
-		if !buildcfg.Experiment.Range {
+		if !buildcfg.Experiment.RangeFunc {
 			break
 		}
 		assert(typ.Recv() == nil)
diff --git a/src/go/types/check_test.go b/src/go/types/check_test.go
index 451e4be9bf..ffad095244 100644
--- a/src/go/types/check_test.go
+++ b/src/go/types/check_test.go
@@ -396,11 +396,11 @@ func TestIssue47243_TypedRHS(t *testing.T) {
 }
 
 func TestCheck(t *testing.T) {
-	old := buildcfg.Experiment.Range
+	old := buildcfg.Experiment.RangeFunc
 	defer func() {
-		buildcfg.Experiment.Range = old
+		buildcfg.Experiment.RangeFunc = old
 	}()
-	buildcfg.Experiment.Range = true
+	buildcfg.Experiment.RangeFunc = true
 
 	DefPredeclaredTestFuncs()
 	testDirFiles(t, "../../internal/types/testdata/check", false)
diff --git a/src/go/types/stmt.go b/src/go/types/stmt.go
index 5363bb9870..7a3bcf029b 100644
--- a/src/go/types/stmt.go
+++ b/src/go/types/stmt.go
@@ -994,7 +994,7 @@ func rangeKeyVal(typ Type) (key, val Type, cause string, isFunc, ok bool) {
 		}
 		return typ.elem, nil, "", false, true
 	case *Signature:
-		if !buildcfg.Experiment.Range {
+		if !buildcfg.Experiment.RangeFunc {
 			break
 		}
 		assert(typ.Recv() == nil)
diff --git a/src/internal/goexperiment/exp_range_off.go b/src/internal/goexperiment/exp_range_off.go
deleted file mode 100644
index 82f5dc71b2..0000000000
--- a/src/internal/goexperiment/exp_range_off.go
+++ /dev/null
@@ -1,8 +0,0 @@
-// Code generated by mkconsts.go. DO NOT EDIT.
-
-//go:build !goexperiment.range
-
-package goexperiment
-
-const Range = false
-const RangeInt = 0
diff --git a/src/internal/goexperiment/exp_range_on.go b/src/internal/goexperiment/exp_range_on.go
deleted file mode 100644
index 1d0f30f49f..0000000000
--- a/src/internal/goexperiment/exp_range_on.go
+++ /dev/null
@@ -1,8 +0,0 @@
-// Code generated by mkconsts.go. DO NOT EDIT.
-
-//go:build goexperiment.range
-
-package goexperiment
-
-const Range = true
-const RangeInt = 1
diff --git a/src/internal/goexperiment/exp_rangefunc_off.go b/src/internal/goexperiment/exp_rangefunc_off.go
new file mode 100644
index 0000000000..fc028205db
--- /dev/null
+++ b/src/internal/goexperiment/exp_rangefunc_off.go
@@ -0,0 +1,8 @@
+// Code generated by mkconsts.go. DO NOT EDIT.
+
+//go:build !goexperiment.rangefunc
+
+package goexperiment
+
+const RangeFunc = false
+const RangeFuncInt = 0
diff --git a/src/internal/goexperiment/exp_rangefunc_on.go b/src/internal/goexperiment/exp_rangefunc_on.go
new file mode 100644
index 0000000000..25e7bd361b
--- /dev/null
+++ b/src/internal/goexperiment/exp_rangefunc_on.go
@@ -0,0 +1,8 @@
+// Code generated by mkconsts.go. DO NOT EDIT.
+
+//go:build goexperiment.rangefunc
+
+package goexperiment
+
+const RangeFunc = true
+const RangeFuncInt = 1
diff --git a/src/internal/goexperiment/flags.go b/src/internal/goexperiment/flags.go
index c43c5d0323..064e70a35d 100644
--- a/src/internal/goexperiment/flags.go
+++ b/src/internal/goexperiment/flags.go
@@ -114,6 +114,6 @@ type Flags struct {
 	// inlining phase within the Go compiler.
 	NewInliner bool
 
-	// Range enables range over int and func.
-	Range bool
+	// RangeFunc enables range over func.
+	RangeFunc bool
 }
diff --git a/src/internal/types/testdata/spec/range.go b/src/internal/types/testdata/spec/range.go
index 8547ed343a..4ae270d233 100644
--- a/src/internal/types/testdata/spec/range.go
+++ b/src/internal/types/testdata/spec/range.go
@@ -1,4 +1,4 @@
-// -goexperiment=range
+// -goexperiment=rangefunc
 
 // Copyright 2023 The Go Authors. All rights reserved.
 // Use of this source code is governed by a BSD-style
diff --git a/test/range2.go b/test/range2.go
index bb2200b98b..6ccf1e53d8 100644
--- a/test/range2.go
+++ b/test/range2.go
@@ -1,4 +1,4 @@
-// errorcheck -goexperiment range
+// errorcheck -goexperiment rangefunc
 
 // Copyright 2023 The Go Authors. All rights reserved.
 // Use of this source code is governed by a BSD-style
diff --git a/test/range4.go b/test/range4.go
index 561b3b58b1..696b205ab7 100644
--- a/test/range4.go
+++ b/test/range4.go
@@ -1,4 +1,4 @@
-// run -goexperiment range
+// run -goexperiment rangefunc
 
 // Copyright 2023 The Go Authors. All rights reserved.
 // Use of this source code is governed by a BSD-style
diff --git a/test/rangegen.go b/test/rangegen.go
index 7916ed2b9f..bdcf099862 100644
--- a/test/rangegen.go
+++ b/test/rangegen.go
@@ -1,4 +1,4 @@
-// runoutput -goexperiment range
+// runoutput -goexperiment rangefunc
 
 // Copyright 2023 The Go Authors. All rights reserved.
 // Use of this source code is governed by a BSD-style
