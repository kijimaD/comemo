commit 03583675765933d4a5fb394cfa89fb41b274aaa7
Author: Josh Bleecher Snyder <josharian@gmail.com>
Date:   Sat Jan 21 19:52:09 2017 -0800

    cmd/compile, runtime: convert byte-sized values to interfaces without allocation
    
    Based in part on khr's CL 2500.
    
    Updates #17725
    Updates #18121
    
    Change-Id: I744e1f92fc2104e6c5bd883a898c30b2eea8cc31
    Reviewed-on: https://go-review.googlesource.com/35555
    Run-TryBot: Josh Bleecher Snyder <josharian@gmail.com>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Keith Randall <khr@golang.org>
---
 src/cmd/compile/internal/gc/go.go   |  1 +
 src/cmd/compile/internal/gc/ssa.go  |  4 ++++
 src/cmd/compile/internal/gc/walk.go | 24 +++++++++++++++++++++++-
 src/runtime/iface.go                | 36 ++++++++++++++++++++++++++++++++++++
 4 files changed, 64 insertions(+), 1 deletion(-)

diff --git a/src/cmd/compile/internal/gc/go.go b/src/cmd/compile/internal/gc/go.go
index 312c252feb..7c205f43c4 100644
--- a/src/cmd/compile/internal/gc/go.go
+++ b/src/cmd/compile/internal/gc/go.go
@@ -364,6 +364,7 @@ var pcloc int32
 var Thearch Arch
 
 var (
+	staticbytes,
 	Newproc,
 	Deferproc,
 	Deferreturn,
diff --git a/src/cmd/compile/internal/gc/ssa.go b/src/cmd/compile/internal/gc/ssa.go
index 078184d563..dac3787dc9 100644
--- a/src/cmd/compile/internal/gc/ssa.go
+++ b/src/cmd/compile/internal/gc/ssa.go
@@ -1592,6 +1592,10 @@ func (s *state) expr(n *Node) *ssa.Value {
 		x := s.expr(n.Left)
 		ft := n.Left.Type // from type
 		tt := n.Type      // to type
+		if ft.IsBoolean() && tt.IsKind(TUINT8) {
+			// Bool -> uint8 is generated internally when indexing into runtime.staticbyte.
+			return s.newValue1(ssa.OpCopy, n.Type, x)
+		}
 		if ft.IsInteger() && tt.IsInteger() {
 			var op ssa.Op
 			if tt.Size() == ft.Size() {
diff --git a/src/cmd/compile/internal/gc/walk.go b/src/cmd/compile/internal/gc/walk.go
index ba4b1af4ff..148e629bd0 100644
--- a/src/cmd/compile/internal/gc/walk.go
+++ b/src/cmd/compile/internal/gc/walk.go
@@ -890,8 +890,14 @@ opswitch:
 			break
 		}
 
+		if staticbytes == nil {
+			staticbytes = newname(Pkglookup("staticbytes", Runtimepkg))
+			staticbytes.Class = PEXTERN
+			staticbytes.Type = typArray(Types[TUINT8], 256)
+		}
+
 		// Optimize convT2{E,I} when T is not pointer-shaped,
-		// but the value does not escape or is a readonly global.
+		// but the value does not escape or is a readonly global or is a bool/byte.
 		var value *Node
 		switch {
 		case !n.Left.Type.IsInterface() && n.Esc == EscNone && n.Left.Type.Width <= 1024:
@@ -902,6 +908,9 @@ opswitch:
 		case n.Left.Class == PEXTERN && n.Left.Name != nil && n.Left.Name.Readonly:
 			// readonly global; use directly.
 			value = n.Left
+		case n.Left.Type.IsBoolean() || (n.Left.Type.Size() == 1 && n.Left.Type.IsInteger()):
+			value = nod(OINDEX, staticbytes, byteindex(n.Left))
+			value.Bounded = true
 		}
 
 		if value != nil {
@@ -2634,6 +2643,19 @@ func conv(n *Node, t *Type) *Node {
 	return n
 }
 
+// byteindex converts n, which is byte-sized, to a uint8.
+// We cannot use conv, because we allow converting bool to uint8 here,
+// which is forbidden in user code.
+func byteindex(n *Node) *Node {
+	if eqtype(n.Type, Types[TUINT8]) {
+		return n
+	}
+	n = nod(OCONV, n, nil)
+	n.Type = Types[TUINT8]
+	n.Typecheck = 1
+	return n
+}
+
 func chanfn(name string, n int, t *Type) *Node {
 	if !t.IsChan() {
 		Fatalf("chanfn %v", t)
diff --git a/src/runtime/iface.go b/src/runtime/iface.go
index 46010d58fc..b5c31a301d 100644
--- a/src/runtime/iface.go
+++ b/src/runtime/iface.go
@@ -313,3 +313,39 @@ func iterate_itabs(fn func(*itab)) {
 		}
 	}
 }
+
+// staticbytes is used to avoid convT2E for byte-sized values.
+var staticbytes = [...]byte{
+	0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
+	0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
+	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
+	0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
+	0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
+	0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
+	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
+	0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
+	0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
+	0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
+	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57,
+	0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
+	0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
+	0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
+	0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
+	0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
+	0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
+	0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
+	0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
+	0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
+	0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
+	0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
+	0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,
+	0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
+	0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
+	0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
+	0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,
+	0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
+	0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,
+	0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
+	0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
+	0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
+}
