commit e738a2f19b0375662abc8a9f293b003b6a46019b
Author: Robert Findley <rfindley@google.com>
Date:   Thu Dec 8 10:03:03 2022 -0500

    go/types, types2: always rename type parameters during inference
    
    Type inference uses a trick of "renaming" type parameters in the type
    parameter list to avoid cycles during unification. This separates the
    identity of type parameters from type arguments. When this trick was
    introduced in CL 385494, we restricted its application to scenarios
    where inference is truly self-recursive: the type parameter list being
    inferred was the same as the type parameter list of the outer function
    declaration. Unfortunately, the heuristic used to determine
    self-recursiveness was flawed: type-checking function literals clobbers
    the type-checker environment, losing information about the outer
    signature.
    
    We could fix this by introducing yet more state into the type-checker
    (e.g. a 'declSig' field that would hold the signature of the active
    function declaration), but it is simpler to just avoid this optimization
    and always perform type parameter renaming. We can always optimize
    later.
    
    This CL removes the check for true self-recursion, always performing the
    renaming.
    
    Fixes golang/go#57155
    
    Change-Id: I34c7617005c1f0ccfe2192da0e5ed104be6b92c9
    Reviewed-on: https://go-review.googlesource.com/c/go/+/456236
    Run-TryBot: Robert Findley <rfindley@google.com>
    Reviewed-by: Robert Griesemer <gri@google.com>
    TryBot-Result: Gopher Robot <gobot@golang.org>

 src/cmd/compile/internal/types2/infer.go           | 40 ++++++++--------------
 src/go/types/infer.go                              | 40 ++++++++--------------
 .../types/testdata/fixedbugs/issue57155.go         | 14 ++++++++
 3 files changed, 42 insertions(+), 52 deletions(-)
