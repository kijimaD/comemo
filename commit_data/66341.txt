commit 4e6d3468cca90ffcbd62a545c33d61806c438505
Author: khr@golang.org <khr@golang.org>
Date:   Sun Feb 23 10:34:00 2025 -0800

    [release-branch.go1.24] cmd/compile: ensure we don't reuse temporary register
    
    Before this CL, we could use the same register for both a temporary
    register and for moving a value in the output register out of the way.
    
    Fixes #71904
    
    Change-Id: Iefbfd9d4139136174570d8aadf8a0fb391791ea9
    Reviewed-on: https://go-review.googlesource.com/c/go/+/651221
    Reviewed-by: David Chase <drchase@google.com>
    LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>
    Reviewed-by: Keith Randall <khr@google.com>
    (cherry picked from commit cc16fb52e6f1eafaee468f8563525ec391e016f5)
    Reviewed-on: https://go-review.googlesource.com/c/go/+/652178
---
 src/cmd/compile/internal/ssa/regalloc.go |  1 +
 test/fixedbugs/issue71857.go             | 29 +++++++++++++++++++++++++++++
 2 files changed, 30 insertions(+)

diff --git a/src/cmd/compile/internal/ssa/regalloc.go b/src/cmd/compile/internal/ssa/regalloc.go
index 08ce0d16a6..c9f0416398 100644
--- a/src/cmd/compile/internal/ssa/regalloc.go
+++ b/src/cmd/compile/internal/ssa/regalloc.go
@@ -1670,6 +1670,7 @@ func (s *regAllocState) regalloc(f *Func) {
 				}
 				tmpReg = s.allocReg(m, &tmpVal)
 				s.nospill |= regMask(1) << tmpReg
+				s.tmpused |= regMask(1) << tmpReg
 			}
 
 			// Now that all args are in regs, we're ready to issue the value itself.
diff --git a/test/fixedbugs/issue71857.go b/test/fixedbugs/issue71857.go
new file mode 100644
index 0000000000..34d29281c0
--- /dev/null
+++ b/test/fixedbugs/issue71857.go
@@ -0,0 +1,29 @@
+// run
+
+// Copyright 2025 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package main
+
+import "sync/atomic"
+
+//go:noinline
+func f(p0, p1, p2, p3, p4, p5, p6, p7 *uint64, a *atomic.Uint64) {
+	old := a.Or(0xaaa)
+	*p0 = old
+	*p1 = old
+	*p2 = old
+	*p3 = old
+	*p4 = old
+	*p5 = old
+	*p6 = old
+	*p7 = old
+}
+
+func main() {
+	a := new(atomic.Uint64)
+	p := new(uint64)
+	f(p, p, p, p, p, p, p, p, a)
+
+}
