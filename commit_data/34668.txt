commit 0c554957483aaf1f62c6251dbe62ab5fce3e219c
Author: Emmanuel Odeke <emm.odeke@gmail.com>
Date:   Mon Nov 6 01:32:55 2017 -0700

    cmd/compile: lock in test for column numbers in unused error
    
    Updates #21317
    
    @mdempsky fixed issue #21317 with CL 66810,
    so lock a test in to ensure we don't regress.
    
    The test is manual for now before test/run.go
    has support for matching column numbers so do
    it old school and match expected output after
    an exec.
    
    Change-Id: I6c2a66ddf04248f79d17ed7033a3280d50e41562
    Reviewed-on: https://go-review.googlesource.com/76150
    Run-TryBot: Emmanuel Odeke <emm.odeke@gmail.com>
    Reviewed-by: Matthew Dempsky <mdempsky@google.com>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
---
 test/fixedbugs/issue21317.go | 60 ++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 60 insertions(+)

diff --git a/test/fixedbugs/issue21317.go b/test/fixedbugs/issue21317.go
new file mode 100644
index 0000000000..ae0e0b55f9
--- /dev/null
+++ b/test/fixedbugs/issue21317.go
@@ -0,0 +1,60 @@
+// run
+
+// Copyright 2017 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// As of "Mon 6 Nov 2017", run.go doesn't yet have proper
+// column matching so instead match the output manually
+// by exec-ing
+
+package main
+
+import (
+	"fmt"
+	"io/ioutil"
+	"log"
+	"os"
+	"os/exec"
+	"runtime"
+	"strings"
+)
+
+func main() {
+	if runtime.Compiler != "gc" || runtime.GOOS == "nacl" {
+		return
+	}
+
+	f, err := ioutil.TempFile("", "issue21317.go")
+	if err != nil {
+		log.Fatal(err)
+	}
+	fmt.Fprintf(f, `
+package main
+
+import "fmt"
+
+func main() {
+        n, err := fmt.Println(1)
+}
+`)
+	f.Close()
+	defer os.RemoveAll(f.Name())
+
+	// compile and test output
+	cmd := exec.Command("go", "tool", "compile", f.Name())
+	out, err := cmd.CombinedOutput()
+	if err == nil {
+		log.Fatalf("expected cmd/compile to fail")
+	}
+	wantErrs := []string{
+		"7:9: n declared and not used",
+		"7:12: err declared and not used",
+	}
+	outStr := string(out)
+	for _, want := range wantErrs {
+		if !strings.Contains(outStr, want) {
+			log.Fatalf("failed to match %q\noutput: %q", want, outStr)
+		}
+	}
+}
