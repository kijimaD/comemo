commit 1d90e1a0ac46274e6c0bfe36c410768263b79eaf
Author: Bryan C. Mills <bcmills@google.com>
Date:   Fri Mar 6 14:32:26 2020 -0500

    cmd/dist: forward stderr if 'go env CGO_ENABLED' fails
    
    The default error string for a command failure is just its status code,
    and "exit status 1" is not at all helpful for debugging.
    
    Change-Id: I822c89bcc9e73283b33e01792bf9c40b1add3c35
    Reviewed-on: https://go-review.googlesource.com/c/go/+/222308
    Run-TryBot: Bryan C. Mills <bcmills@google.com>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Carlos Amedee <carlos@golang.org>
---
 src/cmd/dist/test.go | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/src/cmd/dist/test.go b/src/cmd/dist/test.go
index 48c36a63fc..43d8089c65 100644
--- a/src/cmd/dist/test.go
+++ b/src/cmd/dist/test.go
@@ -98,9 +98,11 @@ func (t *tester) run() {
 		os.Setenv("PATH", fmt.Sprintf("%s%c%s", gobin, os.PathListSeparator, os.Getenv("PATH")))
 	}
 
-	slurp, err := exec.Command("go", "env", "CGO_ENABLED").Output()
+	cmd := exec.Command("go", "env", "CGO_ENABLED")
+	cmd.Stderr = new(bytes.Buffer)
+	slurp, err := cmd.Output()
 	if err != nil {
-		fatalf("Error running go env CGO_ENABLED: %v", err)
+		fatalf("Error running go env CGO_ENABLED: %v\n%s", err, cmd.Stderr)
 	}
 	t.cgoEnabled, _ = strconv.ParseBool(strings.TrimSpace(string(slurp)))
 	if flag.NArg() > 0 && t.runRxStr != "" {
