commit 89c3f7c119cc3909104abaa55a6438d7b54d4a42
Author: Cuong Manh Le <cuong.manhle.vn@gmail.com>
Date:   Thu Feb 16 21:19:42 2023 +0700

    cmd/compile/internal/walk: remove unused eqFor
    
    CL 436436 replaced eqFor with reflectdata.EqFor, but forgot removing it.
    
    Change-Id: I3f2bf02da2e161a27718226b970b81815e9f0a46
    Reviewed-on: https://go-review.googlesource.com/c/go/+/468815
    Run-TryBot: Cuong Manh Le <cuong.manhle.vn@gmail.com>
    Reviewed-by: Dmitri Shuralyov <dmitshur@google.com>
    Auto-Submit: Cuong Manh Le <cuong.manhle.vn@gmail.com>
    TryBot-Result: Gopher Robot <gobot@golang.org>
    Reviewed-by: Matthew Dempsky <mdempsky@google.com>
---
 src/cmd/compile/internal/walk/compare.go | 27 ---------------------------
 1 file changed, 27 deletions(-)

diff --git a/src/cmd/compile/internal/walk/compare.go b/src/cmd/compile/internal/walk/compare.go
index 87987b09a6..a2fd3b4974 100644
--- a/src/cmd/compile/internal/walk/compare.go
+++ b/src/cmd/compile/internal/walk/compare.go
@@ -462,33 +462,6 @@ func finishCompare(n *ir.BinaryExpr, r ir.Node, init *ir.Nodes) ir.Node {
 	return r
 }
 
-func eqFor(t *types.Type) (n ir.Node, needsize bool) {
-	// Should only arrive here with large memory or
-	// a struct/array containing a non-memory field/element.
-	// Small memory is handled inline, and single non-memory
-	// is handled by walkCompare.
-	switch a, _ := types.AlgType(t); a {
-	case types.AMEM:
-		n := typecheck.LookupRuntime("memequal")
-		n = typecheck.SubstArgTypes(n, t, t)
-		return n, true
-	case types.ASPECIAL:
-		sym := reflectdata.TypeSymPrefix(".eq", t)
-		// TODO(austin): This creates an ir.Name with a nil Func.
-		n := typecheck.NewName(sym)
-		ir.MarkFunc(n)
-		n.SetType(types.NewSignature(nil, []*types.Field{
-			types.NewField(base.Pos, nil, types.NewPtr(t)),
-			types.NewField(base.Pos, nil, types.NewPtr(t)),
-		}, []*types.Field{
-			types.NewField(base.Pos, nil, types.Types[types.TBOOL]),
-		}))
-		return n, false
-	}
-	base.Fatalf("eqFor %v", t)
-	return nil, false
-}
-
 // brcom returns !(op).
 // For example, brcom(==) is !=.
 func brcom(op ir.Op) ir.Op {
