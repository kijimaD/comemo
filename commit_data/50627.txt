commit 240df188d67edc3df498a77bf99d3152244c14ab
Author: Dan Scales <danscales@google.com>
Date:   Wed Nov 3 15:29:43 2021 -0700

    cmd/compile: add extra test for the non-mono pass
    
    Just add a test for another function that is not monomorphisable, which
    comes from the Featherweight Go paper.
    
    Updates #48018
    
    Change-Id: I664e3f48412b02678e32b50204dc4befae90374c
    Reviewed-on: https://go-review.googlesource.com/c/go/+/361262
    Trust: Dan Scales <danscales@google.com>
    Run-TryBot: Dan Scales <danscales@google.com>
    TryBot-Result: Go Bot <gobot@golang.org>
    Reviewed-by: Robert Griesemer <gri@golang.org>
---
 .../types2/testdata/fixedbugs/issue48018.go2         | 20 ++++++++++++++++++++
 src/go/types/testdata/fixedbugs/issue48018.go2       | 20 ++++++++++++++++++++
 2 files changed, 40 insertions(+)

diff --git a/src/cmd/compile/internal/types2/testdata/fixedbugs/issue48018.go2 b/src/cmd/compile/internal/types2/testdata/fixedbugs/issue48018.go2
new file mode 100644
index 0000000000..e6ccc6b9be
--- /dev/null
+++ b/src/cmd/compile/internal/types2/testdata/fixedbugs/issue48018.go2
@@ -0,0 +1,20 @@
+// Copyright 2021 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package main
+
+type Box[A any] struct {
+	value A
+}
+
+func Nest[A /* ERROR instantiation cycle */ any](b Box[A], n int) interface{} {
+	if n == 0 {
+		return b
+	}
+	return Nest(Box[Box[A]]{b}, n-1)
+}
+
+func main() {
+	Nest(Box[int]{0}, 10)
+}
diff --git a/src/go/types/testdata/fixedbugs/issue48018.go2 b/src/go/types/testdata/fixedbugs/issue48018.go2
new file mode 100644
index 0000000000..e6ccc6b9be
--- /dev/null
+++ b/src/go/types/testdata/fixedbugs/issue48018.go2
@@ -0,0 +1,20 @@
+// Copyright 2021 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package main
+
+type Box[A any] struct {
+	value A
+}
+
+func Nest[A /* ERROR instantiation cycle */ any](b Box[A], n int) interface{} {
+	if n == 0 {
+		return b
+	}
+	return Nest(Box[Box[A]]{b}, n-1)
+}
+
+func main() {
+	Nest(Box[int]{0}, 10)
+}
