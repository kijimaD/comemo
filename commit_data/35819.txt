commit 1c6144d0699c88e7da2746391836f97fd12642ae
Author: Daniel Martí <mvdan@mvdan.cc>
Date:   Thu Mar 8 18:47:07 2018 +0000

    encoding/gob: work around TestFuzzOneByte panic
    
    The index 248 results in the decoder calling reflect.MakeMapWithSize
    with a size of 14754407682 - just under 15GB - which ends up in a
    runtime out of memory panic after some recent runtime changes on
    machines with 8GB of memory.
    
    Until that is fixed in either runtime or gob, skip the troublesome
    index.
    
    Updates #24308.
    
    Change-Id: Ia450217271c983e7386ba2f3f88c9ba50aa346f4
    Reviewed-on: https://go-review.googlesource.com/99655
    Run-TryBot: Daniel Martí <mvdan@mvdan.cc>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Ian Lance Taylor <iant@golang.org>
---
 src/encoding/gob/codec_test.go | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/src/encoding/gob/codec_test.go b/src/encoding/gob/codec_test.go
index 8f7b6f3c62..520afde34d 100644
--- a/src/encoding/gob/codec_test.go
+++ b/src/encoding/gob/codec_test.go
@@ -1478,6 +1478,10 @@ func TestFuzzOneByte(t *testing.T) {
 		switch i {
 		case 14, 167, 231, 265: // a slice length, corruptions are not handled yet.
 			continue
+		case 248:
+			// Large map size, which currently causes an out of memory panic.
+			// See golang.org/issue/24308 and golang.org/issue/20221.
+			continue
 		}
 		indices = append(indices, i)
 	}
