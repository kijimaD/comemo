commit 084f2eafcdc55392cf8d32f58b417b9575de001d
Author: Ainar Garipov <gugl.zadolbal@gmail.com>
Date:   Sat Nov 10 00:01:14 2018 +0300

    runtime: don't check _defer against nil twice
    
    This issue was found by the new vet's nilness check. _defer was already
    checked against nil, so don't check it again.
    
    Change-Id: I78725eaec7234b262b3c941e06441ca57f82bdd9
    Reviewed-on: https://go-review.googlesource.com/c/148917
    Run-TryBot: Ian Lance Taylor <iant@golang.org>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Ian Lance Taylor <iant@golang.org>
---
 src/runtime/traceback.go | 4 +---
 1 file changed, 1 insertion(+), 3 deletions(-)

diff --git a/src/runtime/traceback.go b/src/runtime/traceback.go
index d7265b2bb9..9d2f7f037c 100644
--- a/src/runtime/traceback.go
+++ b/src/runtime/traceback.go
@@ -552,9 +552,7 @@ func gentraceback(pc0, sp0, lr0 uintptr, gp *g, skip int, pcbuf *uintptr, max in
 	// It's okay in those situations not to use up the entire defer stack:
 	// incomplete information then is still better than nothing.
 	if callback != nil && n < max && _defer != nil {
-		if _defer != nil {
-			print("runtime: g", gp.goid, ": leftover defer sp=", hex(_defer.sp), " pc=", hex(_defer.pc), "\n")
-		}
+		print("runtime: g", gp.goid, ": leftover defer sp=", hex(_defer.sp), " pc=", hex(_defer.pc), "\n")
 		for _defer = gp._defer; _defer != nil; _defer = _defer.link {
 			print("\tdefer ", _defer, " sp=", hex(_defer.sp), " pc=", hex(_defer.pc), "\n")
 		}
