commit 54f9c0416a588963cb5a1c10ffb6a88f3956858c
Author: Cherry Zhang <cherryyz@google.com>
Date:   Tue Aug 28 14:52:30 2018 -0400

    cmd/compile: count nil check as use in dead auto elim
    
    Nil check is special in that it has no use but we must keep it.
    Count it as a use of the auto.
    
    Fixes #27278.
    
    Change-Id: I857c3d0db2ebdca1bc342b4993c0dac5c01e067f
    Reviewed-on: https://go-review.googlesource.com/131955
    Run-TryBot: Cherry Zhang <cherryyz@google.com>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Keith Randall <khr@golang.org>
---
 src/cmd/compile/internal/ssa/deadstore.go |  3 +-
 test/fixedbugs/issue27278.go              | 63 +++++++++++++++++++++++++++++++
 2 files changed, 65 insertions(+), 1 deletion(-)

diff --git a/src/cmd/compile/internal/ssa/deadstore.go b/src/cmd/compile/internal/ssa/deadstore.go
index 1caa61a966..69616b3a88 100644
--- a/src/cmd/compile/internal/ssa/deadstore.go
+++ b/src/cmd/compile/internal/ssa/deadstore.go
@@ -197,7 +197,8 @@ func elimDeadAutosGeneric(f *Func) {
 			panic("unhandled op with sym effect")
 		}
 
-		if v.Uses == 0 || len(args) == 0 {
+		if v.Uses == 0 && v.Op != OpNilCheck || len(args) == 0 {
+			// Nil check has no use, but we need to keep it.
 			return
 		}
 
diff --git a/test/fixedbugs/issue27278.go b/test/fixedbugs/issue27278.go
new file mode 100644
index 0000000000..73f7c755e1
--- /dev/null
+++ b/test/fixedbugs/issue27278.go
@@ -0,0 +1,63 @@
+// run
+
+// Copyright 2018 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// Issue 27278: dead auto elim deletes an auto and its
+// initialization, but it is live because of a nil check.
+
+package main
+
+type T struct {
+	_ [3]string
+	T2
+}
+
+func (t *T) M() []string {
+	return t.T2.M()
+}
+
+type T2 struct {
+	T3
+}
+
+func (t *T2) M() []string {
+	return t.T3.M()
+}
+
+type T3 struct {
+	a string
+}
+
+func (t *T3) M() []string {
+	return []string{}
+}
+
+func main() {
+	poison()
+	f()
+}
+
+//go:noinline
+func f() {
+	(&T{}).M()
+	grow(10000)
+}
+
+// grow stack, triggers stack copy
+func grow(n int) {
+	if n == 0 {
+		return
+	}
+	grow(n-1)
+}
+
+// put some junk on stack, which cannot be valid address
+//go:noinline
+func poison() {
+	x := [10]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
+	g = x
+}
+
+var g [10]int
