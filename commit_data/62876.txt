commit 67e0681aef41cfd9794d3f7819450acd08a67905
Author: Keith Randall <khr@golang.org>
Date:   Tue Apr 22 15:14:17 2025 -0700

    cmd/compile: put constant value on node inside parentheses
    
    That's where the unified IR writer expects it.
    
    Fixes #73476
    
    Change-Id: Ic22bd8dee5be5991e6d126ae3f6eccb2acdc0b19
    Reviewed-on: https://go-review.googlesource.com/c/go/+/667415
    Reviewed-by: Junyang Shao <shaojunyang@google.com>
    LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>
    Auto-Submit: Keith Randall <khr@google.com>
    Reviewed-by: Cuong Manh Le <cuong.manhle.vn@gmail.com>
    Reviewed-by: Keith Randall <khr@google.com>
---
 src/cmd/compile/internal/types2/range.go | 10 ++++++++++
 src/go/types/range.go                    | 10 ++++++++++
 test/fixedbugs/issue73476.go             | 17 +++++++++++++++++
 test/fixedbugs/issue73476.out            |  4 ++++
 4 files changed, 41 insertions(+)

diff --git a/src/cmd/compile/internal/types2/range.go b/src/cmd/compile/internal/types2/range.go
index ecda53d14b..dc0d81d05b 100644
--- a/src/cmd/compile/internal/types2/range.go
+++ b/src/cmd/compile/internal/types2/range.go
@@ -37,6 +37,16 @@ func (check *Checker) rangeStmt(inner stmtContext, rangeStmt *syntax.ForStmt, no
 
 	if isTypes2 && x.mode != invalid && sValue == nil && !check.hasCallOrRecv {
 		if t, ok := arrayPtrDeref(under(x.typ)).(*Array); ok {
+			for {
+				// Put constant info on the thing inside parentheses.
+				// That's where (*../noder/writer).expr expects it.
+				// See issue 73476.
+				p, ok := rangeVar.(*syntax.ParenExpr)
+				if !ok {
+					break
+				}
+				rangeVar = p.X
+			}
 			// Override type of rangeVar to be a constant
 			// (and thus side-effects will not be computed
 			// by the backend).
diff --git a/src/go/types/range.go b/src/go/types/range.go
index 91149c1426..ed7d83283c 100644
--- a/src/go/types/range.go
+++ b/src/go/types/range.go
@@ -40,6 +40,16 @@ func (check *Checker) rangeStmt(inner stmtContext, rangeStmt *ast.RangeStmt, noN
 
 	if isTypes2 && x.mode != invalid && sValue == nil && !check.hasCallOrRecv {
 		if t, ok := arrayPtrDeref(under(x.typ)).(*Array); ok {
+			for {
+				// Put constant info on the thing inside parentheses.
+				// That's where (*../noder/writer).expr expects it.
+				// See issue 73476.
+				p, ok := rangeVar.(*ast.ParenExpr)
+				if !ok {
+					break
+				}
+				rangeVar = p.X
+			}
 			// Override type of rangeVar to be a constant
 			// (and thus side-effects will not be computed
 			// by the backend).
diff --git a/test/fixedbugs/issue73476.go b/test/fixedbugs/issue73476.go
new file mode 100644
index 0000000000..cc54d9c1e4
--- /dev/null
+++ b/test/fixedbugs/issue73476.go
@@ -0,0 +1,17 @@
+// run
+
+// Copyright 2025 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package main
+
+//go:noinline
+func f(p *[4]int) {
+	for i := range (*p) { // Note the parentheses! gofmt wants to remove them - don't let it!
+		println(i)
+	}
+}
+func main() {
+	f(nil)
+}
diff --git a/test/fixedbugs/issue73476.out b/test/fixedbugs/issue73476.out
new file mode 100644
index 0000000000..bc856dafab
--- /dev/null
+++ b/test/fixedbugs/issue73476.out
@@ -0,0 +1,4 @@
+0
+1
+2
+3
