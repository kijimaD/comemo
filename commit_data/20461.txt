commit d72029e3a3e6726248d84fdd1e468a3683ccb577
Author: Alex Brainman <alex.brainman@gmail.com>
Date:   Tue Sep 9 16:05:00 2014 +1000

    undo CL 140110043 / 17b5fc2aa130
    
    I have found better approach, then longer wait.
    See CL 134360043 for details.
    
    ««« original CL description
    runtime/pprof: adjust cpuHogger so that tests pass on windows builders
    
    LGTM=rsc
    R=dvyukov, rsc
    CC=golang-codereviews
    https://golang.org/cl/140110043
    
    »»»
    
    LGTM=dave
    R=golang-codereviews, dave, dvyukov
    CC=golang-codereviews
    https://golang.org/cl/133500043
---
 src/runtime/pprof/pprof_test.go | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/src/runtime/pprof/pprof_test.go b/src/runtime/pprof/pprof_test.go
index 54f93f8610..edd471a0c9 100644
--- a/src/runtime/pprof/pprof_test.go
+++ b/src/runtime/pprof/pprof_test.go
@@ -23,12 +23,12 @@ import (
 
 func cpuHogger(f func()) {
 	// We only need to get one 100 Hz clock tick, so we've got
-	// a 100x safety buffer.
-	// But do at least 2000 iterations (which should take about 400ms),
+	// a 25x safety buffer.
+	// But do at least 500 iterations (which should take about 100ms),
 	// otherwise TestCPUProfileMultithreaded can fail if only one
-	// thread is scheduled during the 1 second period.
+	// thread is scheduled during the 250ms period.
 	t0 := time.Now()
-	for i := 0; i < 2000 || time.Since(t0) < time.Second; i++ {
+	for i := 0; i < 500 || time.Since(t0) < 250*time.Millisecond; i++ {
 		f()
 	}
 }
