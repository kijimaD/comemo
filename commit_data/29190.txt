commit be23e98e06b1e1c65de19d460537c4df21ebf555
Author: Matthew Dempsky <mdempsky@google.com>
Date:   Mon Aug 29 13:29:46 2016 -0700

    reflect: cleanup wording for type identity/equality
    
    Use terms like "equal" and "identical types" to match the Go spec,
    rather than inventing a new explanation. See also discussion on
    golang.org/cl/27170.
    
    Updates #16348.
    
    Change-Id: I0fe0bd01c0d1da3c8937a579c2ba44cf1eb16b71
    Reviewed-on: https://go-review.googlesource.com/28054
    Reviewed-by: Rob Pike <r@golang.org>
---
 src/reflect/type.go | 9 +++------
 1 file changed, 3 insertions(+), 6 deletions(-)

diff --git a/src/reflect/type.go b/src/reflect/type.go
index 98cc9ceded..255ab38402 100644
--- a/src/reflect/type.go
+++ b/src/reflect/type.go
@@ -30,11 +30,8 @@ import (
 // calling kind-specific methods. Calling a method
 // inappropriate to the kind of type causes a run-time panic.
 //
-// You can use == with reflect.Type values to check whether two types
-// are the same.  If T1 and T2 are Go types, and v1 and v2 are values of
-// those types respectively, then reflect.TypeOf(v1) == reflect.TypeOf(v2)
-// if and only if both (interface{})(v2).(T1) and (interface{})(v1).(T2)
-// succeed.
+// Type values are comparable, such as with the == operator.
+// Two Type values are equal if they represent identical types.
 type Type interface {
 	// Methods applicable to all types.
 
@@ -86,7 +83,7 @@ type Type interface {
 	// String returns a string representation of the type.
 	// The string representation may use shortened package names
 	// (e.g., base64 instead of "encoding/base64") and is not
-	// guaranteed to be unique among types. To test for equality,
+	// guaranteed to be unique among types. To test for type identity,
 	// compare the Types directly.
 	String() string
 
