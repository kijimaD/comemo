commit 0cdf2ec81a07e8d8303e24aab49df137b355fa3b
Author: Alberto Donizetti <alb.donizetti@gmail.com>
Date:   Mon Apr 30 12:30:58 2018 +0200

    doc: update FAQ on binary sizes
    
    In the binary sizes FAQ, the approximate size of a Go hello world
    binary was said to be 1.5MB (it was about 1.6MB on go1.7 on
    linux/amd64). Sadly, this is no longer true. A Go1.10 hello world is
    2.0MB, and in 1.11 it'll be about 2.5MB.
    
    Just say "a couple megabytes" to stop this dance.
    
    Change-Id: Ib4dc13a47ccd51327c1a9d90d4116f79597513a4
    Reviewed-on: https://go-review.googlesource.com/110069
    Reviewed-by: Brad Fitzpatrick <bradfitz@golang.org>
---
 doc/go_faq.html | 11 +++++------
 1 file changed, 5 insertions(+), 6 deletions(-)

diff --git a/doc/go_faq.html b/doc/go_faq.html
index a6d79b0823..3893b82d7e 100644
--- a/doc/go_faq.html
+++ b/doc/go_faq.html
@@ -1861,12 +1861,11 @@ type checks, reflection, and even panic-time stack traces.
 </p>
 
 <p>
-A simple C "hello, world" program compiled and linked statically using gcc
-on Linux is around 750 kB,
-including an implementation of <code>printf</code>.
-An equivalent Go program using <code>fmt.Printf</code>
-is around 1.5 MB, but
-that includes more powerful run-time support and type information.
+A simple C "hello, world" program compiled and linked statically using
+gcc on Linux is around 750 kB, including an implementation of
+<code>printf</code>. An equivalent Go program using
+<code>fmt.Printf</code> weighs a couple megabytes, but that includes
+more powerful run-time support, and type and debugging information.
 </p>
 
 <h3 id="unused_variables_and_imports">
