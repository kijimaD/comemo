commit eabcc981c50d5695e796c347e97ae7d9b268fb42
Author: Robert Griesemer <gri@golang.org>
Date:   Wed Nov 4 17:02:30 2009 -0800

    gofmt-ify crypto
    
    R=agl
    CC=rsc
    http://go/go-review/1017032
---
 src/pkg/crypto/block/ecb_test.go   | 20 ++++++++++----------
 src/pkg/crypto/block/xor_test.go   |  4 +---
 src/pkg/crypto/tls/common.go       |  6 ++++--
 src/pkg/crypto/tls/record_write.go | 10 ++++++++--
 4 files changed, 23 insertions(+), 17 deletions(-)

diff --git a/src/pkg/crypto/block/ecb_test.go b/src/pkg/crypto/block/ecb_test.go
index 9576d4e285..664c4f4e10 100644
--- a/src/pkg/crypto/block/ecb_test.go
+++ b/src/pkg/crypto/block/ecb_test.go
@@ -15,9 +15,9 @@ import (
 // Simple Cipher for testing: adds an incrementing amount
 // to each byte in each
 type IncCipher struct {
-	blockSize int;
-	delta byte;
-	encrypting bool;
+	blockSize	int;
+	delta		byte;
+	encrypting	bool;
 }
 
 func (c *IncCipher) BlockSize() int {
@@ -60,10 +60,10 @@ func TestECBEncrypter(t *testing.T) {
 		// compute encrypted version
 		delta := byte(0);
 		for i := 0; i < len(crypt); i++ {
-			if i % block == 0 {
+			if i%block == 0 {
 				delta++;
 			}
-			crypt[i] = plain[i] + delta;
+			crypt[i] = plain[i]+delta;
 		}
 
 		for frag := 0; frag < 2; frag++ {
@@ -110,24 +110,24 @@ func TestECBEncrypter(t *testing.T) {
 }
 
 func testECBDecrypter(t *testing.T, maxio int) {
-	var readers = []func(io.Reader) io.Reader {
-		func (r io.Reader) io.Reader { return r },
+	var readers = []func(io.Reader) io.Reader{
+		func(r io.Reader) io.Reader { return r },
 		iotest.OneByteReader,
 		iotest.HalfReader,
 	};
 	var plain, crypt [256]byte;
 	for i := 0; i < len(plain); i++ {
-		plain[i] = byte(255 - i);
+		plain[i] = byte(255-i);
 	}
 	b := new(bytes.Buffer);
 	for block := 1; block <= 64 && block <= maxio; block *= 2 {
 		// compute encrypted version
 		delta := byte(0);
 		for i := 0; i < len(crypt); i++ {
-			if i % block == 0 {
+			if i%block == 0 {
 				delta++;
 			}
-			crypt[i] = plain[i] + delta;
+			crypt[i] = plain[i]+delta;
 		}
 
 		for mode := 0; mode < len(readers); mode++ {
diff --git a/src/pkg/crypto/block/xor_test.go b/src/pkg/crypto/block/xor_test.go
index 6c686f6cd0..671e319986 100644
--- a/src/pkg/crypto/block/xor_test.go
+++ b/src/pkg/crypto/block/xor_test.go
@@ -98,9 +98,7 @@ func TestXorWriter(t *testing.T) {
 
 func testXorReader(t *testing.T, maxio int) {
 	var readers = []func(io.Reader) io.Reader{
-		func(r io.Reader) io.Reader {
-			return r;
-		},
+		func(r io.Reader) io.Reader { return r },
 		iotest.OneByteReader,
 		iotest.HalfReader,
 	};
diff --git a/src/pkg/crypto/tls/common.go b/src/pkg/crypto/tls/common.go
index 31bdb84da7..2145b7b556 100644
--- a/src/pkg/crypto/tls/common.go
+++ b/src/pkg/crypto/tls/common.go
@@ -106,7 +106,8 @@ func mutualVersion(theirMajor, theirMinor uint8) (major, minor uint8, ok bool) {
 // A nop implements the NULL encryption and MAC algorithms.
 type nop struct{}
 
-func (nop) XORKeyStream(buf []byte) {}
+func (nop) XORKeyStream(buf []byte) {
+}
 
 func (nop) Write(buf []byte) (int, os.Error) {
 	return len(buf), nil;
@@ -116,7 +117,8 @@ func (nop) Sum() []byte {
 	return nil;
 }
 
-func (nop) Reset() {}
+func (nop) Reset() {
+}
 
 func (nop) Size() int {
 	return 0;
diff --git a/src/pkg/crypto/tls/record_write.go b/src/pkg/crypto/tls/record_write.go
index 241dbec8f9..38135c9799 100644
--- a/src/pkg/crypto/tls/record_write.go
+++ b/src/pkg/crypto/tls/record_write.go
@@ -74,10 +74,16 @@ func (w *recordWriter) loop(writer io.Writer, appChan <-chan []byte, controlChan
 	}
 
 	if !closed(appChan) {
-		go func() { for _ = range appChan {} }();
+		go func() {
+			for _ = range appChan {
+			}
+		}();
 	}
 	if !closed(controlChan) {
-		go func() { for _ = range controlChan {} }();
+		go func() {
+			for _ = range controlChan {
+			}
+		}();
 	}
 }
 
