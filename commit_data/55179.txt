commit 70c7fb75e9768630ca23ff5cbf79c9b597bc068e
Author: Joel Sing <joel@sing.id.au>
Date:   Sun Nov 26 02:48:05 2023 +1100

    cmd/compile: correct code generation for right shifts on riscv64
    
    The code generation on riscv64 will currently result in incorrect
    assembly when a 32 bit integer is right shifted by an amount that
    exceeds the size of the type. In particular, this occurs when an
    int32 or uint32 is cast to a 64 bit type and right shifted by a
    value larger than 31.
    
    Fix this by moving the SRAW/SRLW conversion into the right shift
    rules and removing the SignExt32to64/ZeroExt32to64. Add additional
    rules that rewrite to SRAIW/SRLIW when the shift is less than the
    size of the type, or replace/eliminate the shift when it exceeds
    the size of the type.
    
    Add SSA tests that would have caught this issue. Also add additional
    codegen tests to ensure that the resulting assembly is what we
    expect in these overflow cases.
    
    Fixes #64285
    
    Change-Id: Ie97b05668597cfcb91413afefaab18ee1aa145ec
    Reviewed-on: https://go-review.googlesource.com/c/go/+/545035
    Reviewed-by: Russ Cox <rsc@golang.org>
    Reviewed-by: Cherry Mui <cherryyz@google.com>
    Reviewed-by: M Zhuo <mzh@golangcn.org>
    Reviewed-by: Mark Ryan <markdryan@rivosinc.com>
    Run-TryBot: Joel Sing <joel@sing.id.au>
    TryBot-Result: Gopher Robot <gobot@golang.org>

 src/cmd/compile/internal/ssa/_gen/RISCV64.rules    | 100 ++---
 src/cmd/compile/internal/ssa/rewriteRISCV64.go     | 409 ++++++++++++---------
 .../compile/internal/test/testdata/arith_test.go   |  66 ++++
 test/codegen/shift.go                              |  30 ++
 4 files changed, 383 insertions(+), 222 deletions(-)
