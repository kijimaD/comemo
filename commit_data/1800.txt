commit 915f176f7f57b931d90f1b86f254fd7ddc9e15d3
Author: Robert Griesemer <gri@golang.org>
Date:   Tue Mar 10 18:09:13 2009 -0700

    - fixing (internal) capitalization
    
    R=rsc
    DELTA=7  (0 added, 0 deleted, 7 changed)
    OCL=26080
    CL=26080
---
 src/lib/tabwriter/tabwriter.go | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

diff --git a/src/lib/tabwriter/tabwriter.go b/src/lib/tabwriter/tabwriter.go
index a2015eb2fd..9be65da1e5 100644
--- a/src/lib/tabwriter/tabwriter.go
+++ b/src/lib/tabwriter/tabwriter.go
@@ -25,12 +25,12 @@ type byteArray struct {
 }
 
 
-func (b *byteArray) Init(initial_size int) {
+func (b *byteArray) init(initial_size int) {
 	b.a = make([]byte, initial_size)[0 : 0];
 }
 
 
-func (b *byteArray) Len() int {
+func (b *byteArray) len() int {
 	return len(b.a);
 }
 
@@ -188,7 +188,7 @@ func (b *Writer) Init(output io.Write, cellwidth, padding int, padchar byte, fla
 	}
 	b.flags = flags;
 
-	b.buf.Init(1024);
+	b.buf.init(1024);
 	b.lines_size.Init(0);
 	b.lines_width.Init(0);
 	b.widths.Init(0);
@@ -424,8 +424,8 @@ func (b *Writer) Write(buf []byte) (written int, err *os.Error) {
 			case '\t', '\n':
 				b.append(buf[i0 : i]);
 				i0 = i + 1;  // exclude ch from (next) cell
-				b.width += unicodeLen(b.buf.slice(b.pos, b.buf.Len()));
-				b.pos = b.buf.Len();
+				b.width += unicodeLen(b.buf.slice(b.pos, b.buf.len()));
+				b.pos = b.buf.len();
 
 				// terminate cell
 				last_size, last_width := b.line(b.lines_size.Len() - 1);
@@ -451,7 +451,7 @@ func (b *Writer) Write(buf []byte) (written int, err *os.Error) {
 				if b.flags & FilterHTML != 0 {
 					b.append(buf[i0 : i]);
 					i0 = i;
-					b.width += unicodeLen(b.buf.slice(b.pos, b.buf.Len()));
+					b.width += unicodeLen(b.buf.slice(b.pos, b.buf.len()));
 					b.pos = -1;  // preventative - should not be used (will cause index out of bounds)
 					if ch == '<' {
 						b.html_char = '>';
@@ -470,7 +470,7 @@ func (b *Writer) Write(buf []byte) (written int, err *os.Error) {
 				if b.html_char == ';' {
 					b.width++;  // count as one char
 				}
-				b.pos = b.buf.Len();
+				b.pos = b.buf.len();
 				b.html_char = 0;
 			}
 		}
