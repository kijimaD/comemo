commit 1634b4236b5b8a8c940f0361f2f8b3071cd4b5c1
Author: Russ Cox <rsc@golang.org>
Date:   Tue Jan 19 17:46:21 2010 -0800

    time: make tick.Stop a little more robust
    
    R=r
    CC=golang-dev, jackpal
    https://golang.org/cl/186228
---
 src/pkg/time/tick.go | 36 ++++++++++++++++++++++++++++++------
 1 file changed, 30 insertions(+), 6 deletions(-)

diff --git a/src/pkg/time/tick.go b/src/pkg/time/tick.go
index a37e8ea4c4..98576dfe30 100644
--- a/src/pkg/time/tick.go
+++ b/src/pkg/time/tick.go
@@ -24,12 +24,26 @@ package time
 // at intervals.
 type Ticker struct {
 	C        <-chan int64 // The channel on which the ticks are delivered.
+	done     chan bool
 	ns       int64
 	shutdown bool
 }
 
-// Stop turns off a ticker.  After Stop, no more ticks will be delivered.
-func (t *Ticker) Stop() { t.shutdown = true }
+// Stop turns off a ticker.  After Stop, no more ticks will be sent.
+func (t *Ticker) Stop() {
+	t.shutdown = true
+	go t.drain()
+}
+
+func (t *Ticker) drain() {
+	for {
+		select {
+		case <-t.C:
+		case <-t.done:
+			return
+		}
+	}
+}
 
 func (t *Ticker) ticker(c chan<- int64) {
 	now := Nanoseconds()
@@ -47,13 +61,23 @@ func (t *Ticker) ticker(c chan<- int64) {
 			when += t.ns
 		}
 
-		Sleep(when - now)
-		now = Nanoseconds()
+		for !t.shutdown && when > now {
+			// limit individual sleeps so that stopped
+			// long-term tickers don't pile up.
+			const maxSleep = 1e9
+			if when-now > maxSleep {
+				Sleep(maxSleep)
+			} else {
+				Sleep(when - now)
+			}
+			now = Nanoseconds()
+		}
 		if t.shutdown {
-			return
+			break
 		}
 		c <- now
 	}
+	t.done <- true
 }
 
 // Tick is a convenience wrapper for NewTicker providing access to the ticking
@@ -73,7 +97,7 @@ func NewTicker(ns int64) *Ticker {
 		return nil
 	}
 	c := make(chan int64)
-	t := &Ticker{c, ns, false}
+	t := &Ticker{c, make(chan bool), ns, false}
 	go t.ticker(c)
 	return t
 }
