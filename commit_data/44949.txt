commit cf148f3d468f4d0648e7fc6d2858d2afdc37f70d
Author: Cherry Zhang <cherryyz@google.com>
Date:   Sat Apr 3 20:49:03 2021 -0400

    cmd/compile, runtime: use ABI-aware function converting float to interface
    
    Currently, when converting a float (say float64), we use convT64
    function. In the runtime convT64 expects a uint64 argument. In
    the compiler, convT64 is defined as taking an "any" argument (so
    it works with also uint64-like types such as [1]uint64). The "any"
    type is instantiated with the concrete type in walk. So the
    backend will see instances such as convT64([1]uint64).
    
    Currently, float64 is treated as uint64-like. So the backend will
    see convT64(float64). With a memory-based calling convention this
    is fine. With a register-based calling convention, however, it
    will pass the argument in a floating point register, whereas the
    runtime expects the argument in an integer register (as it is
    declared as uint64).
    
    To fix this, this CL introduces runtime functions convT32F and
    convT64F. They behave the same as convT32/convT64, but with a
    float argument. In the compiler, use convT32F/convT64F to convert
    float-like type to interface.
    
    With this, "GOEXPERIMENT=regabi,regabiargs go test math fmt"
    works.
    
    Updates #40724.
    
    Change-Id: I8b2e232096a95e4a7c4ab81795d77ef224ffaab3
    Reviewed-on: https://go-review.googlesource.com/c/go/+/307232
    Trust: Cherry Zhang <cherryyz@google.com>
    Reviewed-by: Austin Clements <austin@google.com>
    Reviewed-by: Than McIntosh <thanm@google.com>

 src/cmd/compile/internal/typecheck/builtin.go      |  2 ++
 .../compile/internal/typecheck/builtin/runtime.go  |  2 ++
 src/cmd/compile/internal/walk/convert.go           | 23 ++++++++++++++++++++++
 src/runtime/iface.go                               |  8 ++++++++
 4 files changed, 35 insertions(+)
