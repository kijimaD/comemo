commit c4e29bbd3813be43b3905e17a2796cea23dd66d4
Author: Dmitri Shuralyov <shurcooL@gmail.com>
Date:   Sat Jul 15 23:58:25 2017 -0600

    encoding/json: de-indent raw strings in remaining examples
    
    This change fixes the remaining examples where the raw strings had
    suboptimal indentation (one level too many) when viewed in godoc.
    
    Follows CL 48910.
    Fixes #21026.
    
    Change-Id: Ifc0dae3fa899a9fff8b1ff958414e2fe6852321d
    Reviewed-on: https://go-review.googlesource.com/50990
    Run-TryBot: Dmitri Shuralyov <shurcool@gmail.com>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Brad Fitzpatrick <bradfitz@golang.org>
---
 src/encoding/json/example_test.go | 28 ++++++++++++++--------------
 1 file changed, 14 insertions(+), 14 deletions(-)

diff --git a/src/encoding/json/example_test.go b/src/encoding/json/example_test.go
index fa1846bb1b..2bbc292c6d 100644
--- a/src/encoding/json/example_test.go
+++ b/src/encoding/json/example_test.go
@@ -36,9 +36,9 @@ func ExampleMarshal() {
 
 func ExampleUnmarshal() {
 	var jsonBlob = []byte(`[
-		{"Name": "Platypus", "Order": "Monotremata"},
-		{"Name": "Quoll",    "Order": "Dasyuromorphia"}
-	]`)
+	{"Name": "Platypus", "Order": "Monotremata"},
+	{"Name": "Quoll",    "Order": "Dasyuromorphia"}
+]`)
 	type Animal struct {
 		Name  string
 		Order string
@@ -56,12 +56,12 @@ func ExampleUnmarshal() {
 // This example uses a Decoder to decode a stream of distinct JSON values.
 func ExampleDecoder() {
 	const jsonStream = `
-		{"Name": "Ed", "Text": "Knock knock."}
-		{"Name": "Sam", "Text": "Who's there?"}
-		{"Name": "Ed", "Text": "Go fmt."}
-		{"Name": "Sam", "Text": "Go fmt who?"}
-		{"Name": "Ed", "Text": "Go fmt yourself!"}
-	`
+	{"Name": "Ed", "Text": "Knock knock."}
+	{"Name": "Sam", "Text": "Who's there?"}
+	{"Name": "Ed", "Text": "Go fmt."}
+	{"Name": "Sam", "Text": "Go fmt who?"}
+	{"Name": "Ed", "Text": "Go fmt yourself!"}
+`
 	type Message struct {
 		Name, Text string
 	}
@@ -86,8 +86,8 @@ func ExampleDecoder() {
 // This example uses a Decoder to decode a stream of distinct JSON values.
 func ExampleDecoder_Token() {
 	const jsonStream = `
-		{"Message": "Hello", "Array": [1, 2, 3], "Null": null, "Number": 1.234}
-	`
+	{"Message": "Hello", "Array": [1, 2, 3], "Null": null, "Number": 1.234}
+`
 	dec := json.NewDecoder(strings.NewReader(jsonStream))
 	for {
 		t, err := dec.Token()
@@ -191,9 +191,9 @@ func ExampleRawMessage_unmarshal() {
 	}
 
 	var j = []byte(`[
-		{"Space": "YCbCr", "Point": {"Y": 255, "Cb": 0, "Cr": -10}},
-		{"Space": "RGB",   "Point": {"R": 98, "G": 218, "B": 255}}
-	]`)
+	{"Space": "YCbCr", "Point": {"Y": 255, "Cb": 0, "Cr": -10}},
+	{"Space": "RGB",   "Point": {"R": 98, "G": 218, "B": 255}}
+]`)
 	var colors []Color
 	err := json.Unmarshal(j, &colors)
 	if err != nil {
