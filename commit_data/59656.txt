commit ef20ccc10bf6e4d3991c9e29c7fae1c9ab338629
Author: thepudds <thepudds1460@gmail.com>
Date:   Thu Sep 7 14:15:33 2023 -0400

    reflect: leak packEface input to result rather than heap
    
    This is part of a series of CLs that aim to help allocations
    in reflect and reduce how often interface arguments escape
    for the print functions in fmt.
    
    Before this change, the reflect.Value parameter for packEface leaks
    immediately to the heap due to the various ODOTPTR operations on the
    *emptyInterface.  The -m=2 logs report:
    
     parameter v leaks to <heap> for packEface with derefs=0:
       flow: <heap> ‚Üê v:
         from v.ptr (dot) at .\value.go:145:13
         from e.word = v.ptr (assign) at .\value.go:145:10
    
    After this change, the input leaks to the result, which is what
    we want:
    
     parameter v leaks to ~r0 with derefs=0:
       flow: e = v:
         from v.ptr (dot) at .\value.go:143:13
         from e.Data = v.ptr (assign) at .\value.go:143:10
       flow: ~r0 = e:
         from &e (address-of) at .\value.go:147:32
         from *(*any)(unsafe.Pointer(&e)) (indirection) at .\value.go:147:9
         from return *(*any)(unsafe.Pointer(&e)) (return) at .\value.go:147:2
    
    This change here is needed, but reflect.Value.Interface still leaks its
    input to the heap for other reasons having to do with method values,
    which we attempt to address in CL 530097, CL 530095, and CL 530096.
    
    Updates #8618
    Updates #71349
    
    Change-Id: Ie77bc850ff261212eeafe190bd6f9a879676a51d
    Reviewed-on: https://go-review.googlesource.com/c/go/+/528535
    LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>
    Reviewed-by: Dmitri Shuralyov <dmitshur@google.com>
    Reviewed-by: qiu laidongfeng2 <2645477756@qq.com>
    Reviewed-by: Cherry Mui <cherryyz@google.com>

 src/reflect/value.go | 11 ++++-------
 1 file changed, 4 insertions(+), 7 deletions(-)
