commit 380525598ca917fe3226842f91695f4851b34e89
Author: Josh Bleecher Snyder <josharian@gmail.com>
Date:   Sun Aug 6 06:17:42 2017 -0700

    all: remove some manual hyphenation
    
    Manual hyphenation doesn't work well when text gets reflown,
    for example by godoc.
    
    There are a few other manual hyphenations in the tree,
    but they are in local comments or comments for unexported functions.
    
    Change-Id: I17c9b1fee1def650da48903b3aae2fa1e1119a65
    Reviewed-on: https://go-review.googlesource.com/53510
    Reviewed-by: Brad Fitzpatrick <bradfitz@golang.org>
---
 src/go/ast/ast.go       | 8 ++++----
 src/go/parser/parser.go | 4 ++--
 src/math/big/ratconv.go | 4 ++--
 3 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/src/go/ast/ast.go b/src/go/ast/ast.go
index 77ef98ceaf..9ab7b1e625 100644
--- a/src/go/ast/ast.go
+++ b/src/go/ast/ast.go
@@ -969,14 +969,14 @@ func (*FuncDecl) declNode() {}
 //
 // For correct printing of source code containing comments (using packages
 // go/format and go/printer), special care must be taken to update comments
-// when a File's syntax tree is modified: For printing, comments are inter-
-// spersed between tokens based on their position. If syntax tree nodes are
+// when a File's syntax tree is modified: For printing, comments are interspersed
+// between tokens based on their position. If syntax tree nodes are
 // removed or moved, relevant comments in their vicinity must also be removed
 // (from the File.Comments list) or moved accordingly (by updating their
 // positions). A CommentMap may be used to facilitate some of these operations.
 //
-// Whether and how a comment is associated with a node depends on the inter-
-// pretation of the syntax tree by the manipulating program: Except for Doc
+// Whether and how a comment is associated with a node depends on the
+// interpretation of the syntax tree by the manipulating program: Except for Doc
 // and Comment comments directly associated with nodes, the remaining comments
 // are "free-floating" (see also issues #18593, #20744).
 //
diff --git a/src/go/parser/parser.go b/src/go/parser/parser.go
index 1b4309b5da..2b58724521 100644
--- a/src/go/parser/parser.go
+++ b/src/go/parser/parser.go
@@ -1707,8 +1707,8 @@ func (p *parser) parseSimpleStmt(mode int) (ast.Stmt, bool) {
 		}
 		// The label declaration typically starts at x[0].Pos(), but the label
 		// declaration may be erroneous due to a token after that position (and
-		// before the ':'). If SpuriousErrors is not set, the (only) error re-
-		// ported for the line is the illegal label error instead of the token
+		// before the ':'). If SpuriousErrors is not set, the (only) error
+		// reported for the line is the illegal label error instead of the token
 		// before the ':' that caused the problem. Thus, use the (latest) colon
 		// position for error reporting.
 		p.error(colon, "illegal label declaration")
diff --git a/src/math/big/ratconv.go b/src/math/big/ratconv.go
index a6a401c857..4bc6ef7e80 100644
--- a/src/math/big/ratconv.go
+++ b/src/math/big/ratconv.go
@@ -40,8 +40,8 @@ func (z *Rat) Scan(s fmt.ScanState, ch rune) error {
 // SetString sets z to the value of s and returns z and a boolean indicating
 // success. s can be given as a fraction "a/b" or as a floating-point number
 // optionally followed by an exponent. The entire string (not just a prefix)
-// must be valid for success. If the operation failed, the value of z is un-
-// defined but the returned value is nil.
+// must be valid for success. If the operation failed, the value of z is
+// undefined but the returned value is nil.
 func (z *Rat) SetString(s string) (*Rat, bool) {
 	if len(s) == 0 {
 		return nil, false
