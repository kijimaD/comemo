commit 66f78e9d885e9a8ed7f8d2432d9f08bb586dd7cb
Author: Cuong Manh Le <cuong.manhle.vn@gmail.com>
Date:   Wed Oct 23 14:31:29 2019 +0700

    runtime: mark findObject nosplit
    
    findObject takes the pointer argument as uintptr. If the pointer is to
    the local stack and calling findObject happens to require the stack to
    be reallocated, then spanOf is called for the old pointer.
    
    Marking findObject as nosplit fixes the issue.
    
    Fixes #35068
    
    Change-Id: I029d36f9c23f91812f18f98839edf02e0ba4082e
    Reviewed-on: https://go-review.googlesource.com/c/go/+/202798
    Run-TryBot: Cuong Manh Le <cuong.manhle.vn@gmail.com>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Austin Clements <austin@google.com>
---
 src/runtime/mbitmap.go | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/src/runtime/mbitmap.go b/src/runtime/mbitmap.go
index 68a22690d2..d131bab600 100644
--- a/src/runtime/mbitmap.go
+++ b/src/runtime/mbitmap.go
@@ -385,6 +385,10 @@ func badPointer(s *mspan, p, refBase, refOff uintptr) {
 // refBase and refOff optionally give the base address of the object
 // in which the pointer p was found and the byte offset at which it
 // was found. These are used for error reporting.
+//
+// It is nosplit so it is safe for p to be a pointer to the current goroutine's stack.
+// Since p is a uintptr, it would not be adjusted if the stack were to move.
+//go:nosplit
 func findObject(p, refBase, refOff uintptr) (base uintptr, s *mspan, objIndex uintptr) {
 	s = spanOf(p)
 	// If s is nil, the virtual address has never been part of the heap.
