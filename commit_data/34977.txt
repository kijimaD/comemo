commit aaccb3834c37a923659d1dc1004dcde94f04d871
Author: Austin Clements <austin@google.com>
Date:   Thu Nov 30 15:47:04 2017 -0500

    runtime: improve sigsend documentation
    
    I think of "sending" a signal as calling kill, but sigsend is involved
    in handling a signal and, specifically delivering it to the internal
    signal queue. The term "delivery" is already used in
    signalWaitUntilIdle, so this CL also uses it in the documentation for
    sigsend.
    
    Change-Id: I86e171f247f525ece884a680bace616fa9a3c7bd
    Reviewed-on: https://go-review.googlesource.com/81235
    Reviewed-by: Ian Lance Taylor <iant@golang.org>
---
 src/runtime/sigqueue.go | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

diff --git a/src/runtime/sigqueue.go b/src/runtime/sigqueue.go
index 94e2b69d92..98331627eb 100644
--- a/src/runtime/sigqueue.go
+++ b/src/runtime/sigqueue.go
@@ -61,8 +61,9 @@ const (
 	sigSending
 )
 
-// Called from sighandler to send a signal back out of the signal handling thread.
-// Reports whether the signal was sent. If not, the caller typically crashes the program.
+// sigsend delivers a signal from sighandler to the internal signal delivery queue.
+// It reports whether the signal was sent. If not, the caller typically crashes the program.
+// It runs from the signal handler, so it's limited in what it can do.
 func sigsend(s uint32) bool {
 	bit := uint32(1) << uint(s&31)
 	if !sig.inuse || s >= uint32(32*len(sig.wanted)) {
