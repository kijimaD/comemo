commit 71559a6ffd26031fe562b461d6472fdddbe617eb
Author: Austin Clements <austin@google.com>
Date:   Fri Nov 5 15:58:34 2021 -0400

    runtime: fix racy stackForceMove check
    
    Currently, newstack loads gp.stackguard0 twice to check for different
    poison values. The race window between these two checks can lead to
    unintentional stack doubling, and ultimately to stack overflows.
    
    Specifically, newstack checks if stackguard0 is stackPreempt first,
    then it checks if it's stackForceMove. If stackguard0 is set to
    stackForceMove on entry, but changes to stackPreempt between the two
    checks, newstack will incorrectly double the stack allocation.
    
    Fix this by loading stackguard0 exactly once and then checking it
    against different poison values.
    
    The effect of this is relatively minor because stackForceMove is only
    used by a small number of runtime tests. I found this because
    mayMorestackMove uses stackForceMove aggressively, which makes this
    failure mode much more likely.
    
    Change-Id: I1f8b6a6744e45533580a3f45d7030ec2ec65a5fb
    Reviewed-on: https://go-review.googlesource.com/c/go/+/361775
    Trust: Austin Clements <austin@google.com>
    Run-TryBot: Austin Clements <austin@google.com>
    TryBot-Result: Go Bot <gobot@golang.org>
    Reviewed-by: Cherry Mui <cherryyz@google.com>
    Reviewed-by: Michael Pratt <mpratt@google.com>

 src/runtime/stack.go | 5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)
