commit 1d321ada73cdea05eb90bf3ccd884b844bc42d67
Author: Josh Bleecher Snyder <josharian@gmail.com>
Date:   Mon Apr 23 14:54:45 2018 -0700

    cmd/compile: optimize LeadingZeros(16|32) on amd64
    
    Introduce Len8 and Len16 ops and provide optimized lowerings for them.
    amd64 only for this CL, although it wouldn't surprise me
    if other architectures also admit of optimized lowerings.
    
    Also use and optimize the Len32 lowering, along the same lines.
    
    Leave Len8 unused for the moment; a subsequent CL will enable it.
    
    For 16 and 32 bits, this leads to a speed-up.
    
    name              old time/op  new time/op  delta
    LeadingZeros16-8  1.42ns ± 5%  1.23ns ± 5%  -13.42%  (p=0.000 n=20+20)
    LeadingZeros32-8  1.25ns ± 5%  1.03ns ± 5%  -17.63%  (p=0.000 n=20+16)
    
    Code:
    
    func f16(x uint16) { z = bits.LeadingZeros16(x) }
    func f32(x uint32) { z = bits.LeadingZeros32(x) }
    
    Before:
    
    "".f16 STEXT nosplit size=38 args=0x8 locals=0x0
            0x0000 00000 (x.go:8)   TEXT    "".f16(SB), NOSPLIT, $0-8
            0x0000 00000 (x.go:8)   FUNCDATA        $0, gclocals·2a5305abe05176240e61b8620e19a815(SB)
            0x0000 00000 (x.go:8)   FUNCDATA        $1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
            0x0000 00000 (x.go:8)   MOVWLZX "".x+8(SP), AX
            0x0005 00005 (x.go:8)   MOVWLZX AX, AX
            0x0008 00008 (x.go:8)   BSRQ    AX, AX
            0x000c 00012 (x.go:8)   MOVQ    $-1, CX
            0x0013 00019 (x.go:8)   CMOVQEQ CX, AX
            0x0017 00023 (x.go:8)   ADDQ    $-15, AX
            0x001b 00027 (x.go:8)   NEGQ    AX
            0x001e 00030 (x.go:8)   MOVQ    AX, "".z(SB)
            0x0025 00037 (x.go:8)   RET
    
    "".f32 STEXT nosplit size=34 args=0x8 locals=0x0
            0x0000 00000 (x.go:9)   TEXT    "".f32(SB), NOSPLIT, $0-8
            0x0000 00000 (x.go:9)   FUNCDATA        $0, gclocals·2a5305abe05176240e61b8620e19a815(SB)
            0x0000 00000 (x.go:9)   FUNCDATA        $1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
            0x0000 00000 (x.go:9)   MOVL    "".x+8(SP), AX
            0x0004 00004 (x.go:9)   BSRQ    AX, AX
            0x0008 00008 (x.go:9)   MOVQ    $-1, CX
            0x000f 00015 (x.go:9)   CMOVQEQ CX, AX
            0x0013 00019 (x.go:9)   ADDQ    $-31, AX
            0x0017 00023 (x.go:9)   NEGQ    AX
            0x001a 00026 (x.go:9)   MOVQ    AX, "".z(SB)
            0x0021 00033 (x.go:9)   RET
    
    After:
    
    "".f16 STEXT nosplit size=30 args=0x8 locals=0x0
            0x0000 00000 (x.go:8)   TEXT    "".f16(SB), NOSPLIT, $0-8
            0x0000 00000 (x.go:8)   FUNCDATA        $0, gclocals·2a5305abe05176240e61b8620e19a815(SB)
            0x0000 00000 (x.go:8)   FUNCDATA        $1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
            0x0000 00000 (x.go:8)   MOVWLZX "".x+8(SP), AX
            0x0005 00005 (x.go:8)   MOVWLZX AX, AX
            0x0008 00008 (x.go:8)   LEAL    1(AX)(AX*1), AX
            0x000c 00012 (x.go:8)   BSRL    AX, AX
            0x000f 00015 (x.go:8)   ADDQ    $-16, AX
            0x0013 00019 (x.go:8)   NEGQ    AX
            0x0016 00022 (x.go:8)   MOVQ    AX, "".z(SB)
            0x001d 00029 (x.go:8)   RET
    
    "".f32 STEXT nosplit size=28 args=0x8 locals=0x0
            0x0000 00000 (x.go:9)   TEXT    "".f32(SB), NOSPLIT, $0-8
            0x0000 00000 (x.go:9)   FUNCDATA        $0, gclocals·2a5305abe05176240e61b8620e19a815(SB)
            0x0000 00000 (x.go:9)   FUNCDATA        $1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
            0x0000 00000 (x.go:9)   MOVL    "".x+8(SP), AX
            0x0004 00004 (x.go:9)   LEAQ    1(AX)(AX*1), AX
            0x0009 00009 (x.go:9)   BSRQ    AX, AX
            0x000d 00013 (x.go:9)   ADDQ    $-32, AX
            0x0011 00017 (x.go:9)   NEGQ    AX
            0x0014 00020 (x.go:9)   MOVQ    AX, "".z(SB)
            0x001b 00027 (x.go:9)   RET
    
    Change-Id: I6c93c173752a7bfdeab8be30777ae05a736e1f4b
    Reviewed-on: https://go-review.googlesource.com/108941
    Run-TryBot: Josh Bleecher Snyder <josharian@gmail.com>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Giovanni Bajo <rasky@develer.com>
    Reviewed-by: Keith Randall <khr@golang.org>

 src/cmd/compile/internal/gc/ssa.go             | 22 ++++++--
 src/cmd/compile/internal/ssa/gen/AMD64.rules   |  8 ++-
 src/cmd/compile/internal/ssa/gen/genericOps.go |  2 +
 src/cmd/compile/internal/ssa/opGen.go          | 12 +++++
 src/cmd/compile/internal/ssa/rewriteAMD64.go   | 70 ++++++++++++++++++++++++--
 test/codegen/mathbits.go                       |  8 +--
 6 files changed, 109 insertions(+), 13 deletions(-)
