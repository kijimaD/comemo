commit d5269d0008126e72deccdbd2c6ee241c41986a42
Author: Russ Cox <rsc@golang.org>
Date:   Thu May 21 14:46:13 2009 -0700

    tests for new initializer syntax
    
    R=r
    DELTA=79  (79 added, 0 deleted, 0 changed)
    OCL=29196
    CL=29202
---
 test/initialize.go   | 62 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 test/initializerr.go | 25 +++++++++++++++++++++
 2 files changed, 87 insertions(+)

diff --git a/test/initialize.go b/test/initialize.go
new file mode 100644
index 0000000000..ba04314758
--- /dev/null
+++ b/test/initialize.go
@@ -0,0 +1,62 @@
+// $G $D/$F.go && $L $F.$A && ./$A.out
+
+// Copyright 2009 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package main
+
+import "fmt"
+import "reflect"
+
+type S struct {
+	A, B, C, X, Y, Z int;
+}
+
+type T struct {
+	S;
+}
+
+var a1 = S { 0, 0, 0, 1, 2, 3 }
+var b1 = S { X: 1, Z: 3, Y: 2 }
+
+var a2 = S { 0, 0, 0, 0, 0, 0, }
+var b2 S  // = S { }  TODO(rsc): should work
+
+var a3 = T { S { 1, 2, 3, 0, 0, 0, } }
+var b3 = T { S { A: 1, B: 2, C: 3 } }	// TODO(rsc): s/S/S:S/
+
+var a4 = &[16]byte { 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, }
+var b4 = &[16]byte { 4: 1, 1, 1, 1, 12: 1, 1, }
+
+var a5 = &[16]byte { 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, }
+var b5 = &[16]byte { 1, 4: 1, 1, 1, 1, 12: 1, 1, }
+
+var a6 = &[16]byte { 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, }
+var b6 = &[...]byte { 1, 4: 1, 1, 1, 1, 12: 1, 1, 0, 0,}	// throws index out of range
+
+type Same struct {
+	a, b interface{}
+}
+
+var same = []Same {
+	Same{ a1, b1 },
+	Same{ a2, b2 },
+	Same{ a3, b3 },
+	Same{ a4, b4 },
+	Same{ a5, b5 },
+	Same{ a6, b6 },
+}
+
+func main() {
+	ok := true;
+	for i, s := range same {
+		if !reflect.DeepEqual(s.a, s.b) {
+			ok = false;
+			fmt.Printf("not same: %v and %v\n", s.a, s.b);
+		}
+	}
+	if !ok {
+		fmt.Println("BUG: test/initialize");
+	}
+}
diff --git a/test/initializerr.go b/test/initializerr.go
new file mode 100644
index 0000000000..8465dc5d7e
--- /dev/null
+++ b/test/initializerr.go
@@ -0,0 +1,25 @@
+// errchk $G -e $D/$F.go
+
+// Copyright 2009 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package main
+
+type S struct {
+	A, B, C, X, Y, Z int;
+}
+
+type T struct {
+	S;
+}
+
+var x = 1
+var a1 = S { 0, X: 1 };	// ERROR "mixture"
+var a2 = S { Y: 3, Z: 2, Y: 3 }; // ERROR "duplicate"
+var a3 = T { 1, 2, 3, 4, 5, 6 };	// ERROR "convert"
+var a4 = [5]byte{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }	// ERROR "index"
+var a5 = []byte { x: 2 }	// ERROR "index"
+
+var ok1 = S { }	// should be ok
+var ok2 = T { S: a4 }	// should be ok
