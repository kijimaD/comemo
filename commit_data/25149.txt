commit 745cdc3ad7556ba073d2a55fa7cebb3fc683b94f
Author: David Chase <drchase@google.com>
Date:   Mon Sep 28 16:13:57 2015 -0400

    cmd/compile: repair escape analysis of range &fixedArray
    
    The existing test did not take into account the implicit
    dereference of &fixedArray and thus heap-escaped when it
    was not necessary.
    
    Also added a detailed test for this and related cases.
    
    Fixes #12588
    
    Change-Id: I951e9684a093082ccdca47710f69f4366bd6b3cf
    Reviewed-on: https://go-review.googlesource.com/15130
    Reviewed-by: Dmitry Vyukov <dvyukov@google.com>
---
 src/cmd/compile/internal/gc/esc.go |  9 +++-
 test/fixedbugs/issue12588.go       | 88 ++++++++++++++++++++++++++++++++++++++
 2 files changed, 95 insertions(+), 2 deletions(-)

diff --git a/src/cmd/compile/internal/gc/esc.go b/src/cmd/compile/internal/gc/esc.go
index d07f4733c0..b91a6d2a88 100644
--- a/src/cmd/compile/internal/gc/esc.go
+++ b/src/cmd/compile/internal/gc/esc.go
@@ -650,10 +650,15 @@ func esc(e *EscState, n *Node, up *Node) {
 
 		n.Left.Sym.Label = nil
 
-		// Everything but fixed array is a dereference.
 	case ORANGE:
 		if n.List != nil && n.List.Next != nil {
-			if Isfixedarray(n.Type) {
+			// Everything but fixed array is a dereference.
+
+			// If fixed array is really the address of fixed array,
+			// it is also a dereference, because it is implicitly
+			// dereferenced (see #12588)
+			if Isfixedarray(n.Type) &&
+				!(Isptr[n.Right.Type.Etype] && Eqtype(n.Right.Type.Type, n.Type)) {
 				escassign(e, n.List.Next.N, n.Right)
 			} else {
 				escassignDereference(e, n.List.Next.N, n.Right)
diff --git a/test/fixedbugs/issue12588.go b/test/fixedbugs/issue12588.go
new file mode 100644
index 0000000000..3022f487f3
--- /dev/null
+++ b/test/fixedbugs/issue12588.go
@@ -0,0 +1,88 @@
+// errorcheck -0 -m -l
+
+// Copyright 2015 The Go Authors.  All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// Tests escape analysis for range of arrays.
+// Compiles but need not run.  Inlining is disabled.
+
+package main
+
+type A struct {
+	b [3]uint64
+}
+
+type B struct {
+	b [3]*uint64
+}
+
+func f(a A) int {
+	for i, x := range &a.b { // ERROR "f &a.b does not escape"
+		if x != 0 {
+			return 64*i + int(x)
+		}
+	}
+	return 0
+}
+
+func g(a *A) int { // ERROR "g a does not escape"
+	for i, x := range &a.b { // ERROR "g &a.b does not escape"
+		if x != 0 {
+			return 64*i + int(x)
+		}
+	}
+	return 0
+}
+
+func h(a *B) *uint64 { // ERROR "leaking param: a to result ~r1 level=1"
+	for i, x := range &a.b { // ERROR "h &a.b does not escape"
+		if i == 0 {
+			return x
+		}
+	}
+	return nil
+}
+
+func h2(a *B) *uint64 { // ERROR "leaking param: a to result ~r1 level=1"
+	p := &a.b // ERROR "h2 &a.b does not escape"
+	for i, x := range p {
+		if i == 0 {
+			return x
+		}
+	}
+	return nil
+}
+
+// Seems like below should be level=1, not 0.
+func k(a B) *uint64 { // ERROR "leaking param: a to result ~r1 level=0"
+	for i, x := range &a.b { // ERROR "k &a.b does not escape"
+		if i == 0 {
+			return x
+		}
+	}
+	return nil
+}
+
+var sink *uint64
+
+func main() {
+	var a1, a2 A
+	var b1, b2, b3, b4 B
+	var x1, x2, x3, x4 uint64 // ERROR "moved to heap: x1" "moved to heap: x3"
+	b1.b[0] = &x1             // ERROR "&x1 escapes to heap"
+	b2.b[0] = &x2             // ERROR "main &x2 does not escape"
+	b3.b[0] = &x3             // ERROR "&x3 escapes to heap"
+	b4.b[0] = &x4             // ERROR "main &x4 does not escape"
+	f(a1)
+	g(&a2)         // ERROR "main &a2 does not escape"
+	sink = h(&b1)  // ERROR "main &b1 does not escape"
+	h(&b2)         // ERROR "main &b2 does not escape"
+	sink = h2(&b1) // ERROR "main &b1 does not escape"
+	h2(&b4)        // ERROR "main &b4 does not escape"
+	x1 = 17
+	println("*sink=", *sink) // Verify that sink addresses x1
+	x3 = 42
+	sink = k(b3)
+	println("*sink=", *sink) // Verify that sink addresses x3
+}
