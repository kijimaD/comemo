commit 29d5d9a5bb874f1e5e84342e6d7684cd4f67d035
Author: Brad Fitzpatrick <bradfitz@golang.org>
Date:   Mon Sep 12 17:18:25 2011 -0700

    time: fix Windows build after ceeedb519c4a
    
    R=golang-dev, r
    CC=golang-dev
    https://golang.org/cl/4983060
---
 src/pkg/time/zoneinfo_windows.go | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/pkg/time/zoneinfo_windows.go b/src/pkg/time/zoneinfo_windows.go
index ab3e7df59c..8fb6d2166d 100644
--- a/src/pkg/time/zoneinfo_windows.go
+++ b/src/pkg/time/zoneinfo_windows.go
@@ -70,7 +70,7 @@ func (z *zone) populate(bias, biasdelta int32, d *syscall.Systemtime, name []uin
 // Pre-calculate cutoff time in seconds since the Unix epoch, if data is supplied in "absolute" format.
 func (z *zone) preCalculateAbsSec() {
 	if z.year != 0 {
-		z.abssec = (&Time{z.year, int(z.month), int(z.day), int(z.hour), int(z.minute), int(z.second), 0, 0, 0, ""}).Seconds()
+		z.abssec = (&Time{z.year, int(z.month), int(z.day), int(z.hour), int(z.minute), int(z.second), 0, 0, ""}).Seconds()
 		// Time given is in "local" time. Adjust it for "utc".
 		z.abssec -= int64(z.prev.offset)
 	}
@@ -83,7 +83,7 @@ func (z *zone) cutoffSeconds(year int64) int64 {
 	// z.dayofweek is appropriate weekday (Sunday=0 to Saturday=6)
 	// z.day is week within the month (1 to 5, where 5 is last week of the month)
 	// z.hour, z.minute and z.second are absolute time
-	t := &Time{year, int(z.month), 1, int(z.hour), int(z.minute), int(z.second), 0, 0, 0, ""}
+	t := &Time{year, int(z.month), 1, int(z.hour), int(z.minute), int(z.second), 0, 0, ""}
 	t = SecondsToUTC(t.Seconds())
 	i := int(z.dayofweek) - t.Weekday
 	if i < 0 {
