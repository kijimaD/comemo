commit 2a931bad4e4d7eabdb685b6dc74406373ad6e7e4
Author: Kunpei Sakai <namusyaka@gmail.com>
Date:   Wed Apr 17 01:19:54 2019 +0900

    net/http: rename DialerAndTLSConfigSupportsHTTP2 to ForceAttemptHTTP2
    
    Transport.DialerAndTLSConfigSupportsHTTP2 was added just earlier
    in CL 130256 but we thought of a better name moments after submitting.
    ForceAttemptHTTP2 is shorter, more direct, and doesn't constrain what
    we can use it with in the future.
    
    Updates #14391
    Updates #27011
    
    Change-Id: Ie5fc71bafcbcaa1941b5d49f748b6d710503d477
    Reviewed-on: https://go-review.googlesource.com/c/go/+/172299
    Reviewed-by: Brad Fitzpatrick <bradfitz@golang.org>
---
 src/net/http/transport.go      | 18 +++++++++---------
 src/net/http/transport_test.go |  4 ++--
 2 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/src/net/http/transport.go b/src/net/http/transport.go
index 88dbfe7c6e..6d82f44ff6 100644
--- a/src/net/http/transport.go
+++ b/src/net/http/transport.go
@@ -46,11 +46,11 @@ var DefaultTransport RoundTripper = &Transport{
 		KeepAlive: 30 * time.Second,
 		DualStack: true,
 	}).DialContext,
-	DialerAndTLSConfigSupportsHTTP2: true,
-	MaxIdleConns:                    100,
-	IdleConnTimeout:                 90 * time.Second,
-	TLSHandshakeTimeout:             10 * time.Second,
-	ExpectContinueTimeout:           1 * time.Second,
+	ForceAttemptHTTP2:     true,
+	MaxIdleConns:          100,
+	IdleConnTimeout:       90 * time.Second,
+	TLSHandshakeTimeout:   10 * time.Second,
+	ExpectContinueTimeout: 1 * time.Second,
 }
 
 // DefaultMaxIdleConnsPerHost is the default value of Transport's
@@ -259,11 +259,11 @@ type Transport struct {
 	nextProtoOnce sync.Once
 	h2transport   h2Transport // non-nil if http2 wired up
 
-	// DialerAndTLSConfigSupportsHTTP2 controls whether HTTP/2 is enabled when a non-zero
+	// ForceAttemptHTTP2 controls whether HTTP/2 is enabled when a non-zero
 	// TLSClientConfig or Dial, DialTLS or DialContext func is provided. By default, use of any those fields conservatively
 	// disables HTTP/2. To use a customer dialer or TLS config and still attempt HTTP/2
 	// upgrades, set this to true.
-	DialerAndTLSConfigSupportsHTTP2 bool
+	ForceAttemptHTTP2 bool
 }
 
 // h2Transport is the interface we expect to be able to call from
@@ -303,13 +303,13 @@ func (t *Transport) onceSetNextProtoDefaults() {
 		// Transport.
 		return
 	}
-	if !t.DialerAndTLSConfigSupportsHTTP2 && (t.TLSClientConfig != nil || t.Dial != nil || t.DialTLS != nil || t.DialContext != nil) {
+	if !t.ForceAttemptHTTP2 && (t.TLSClientConfig != nil || t.Dial != nil || t.DialTLS != nil || t.DialContext != nil) {
 		// Be conservative and don't automatically enable
 		// http2 if they've specified a custom TLS config or
 		// custom dialers. Let them opt-in themselves via
 		// http2.ConfigureTransport so we don't surprise them
 		// by modifying their tls.Config. Issue 14275.
-		// However, if DialerAndTLSConfigSupportsHTTP2 is true, it overrides the above checks.
+		// However, if ForceAttemptHTTP2 is true, it overrides the above checks.
 		return
 	}
 	t2, err := http2configureTransport(t)
diff --git a/src/net/http/transport_test.go b/src/net/http/transport_test.go
index 789d52c5d5..5b1dbf9eff 100644
--- a/src/net/http/transport_test.go
+++ b/src/net/http/transport_test.go
@@ -3595,8 +3595,8 @@ func TestTransportAutomaticHTTP2(t *testing.T) {
 
 func TestTransportAutomaticHTTP2_DialerAndTLSConfigSupportsHTTP2AndTLSConfig(t *testing.T) {
 	testTransportAutoHTTP(t, &Transport{
-		DialerAndTLSConfigSupportsHTTP2: true,
-		TLSClientConfig:                 new(tls.Config),
+		ForceAttemptHTTP2: true,
+		TLSClientConfig:   new(tls.Config),
 	}, true)
 }
 
