commit ac0e12d15800ac0e5795e823ab0e99c1eb70667b
Author: Russ Cox <rsc@golang.org>
Date:   Thu Jun 5 16:40:23 2014 -0400

    cmd/6g: fix stack zeroing on native client
    
    I am not sure what the rounding here was
    trying to do, but it was skipping the first
    pointer on native client.
    
    The code above the rounding already checks
    that xoffset is widthptr-aligned, so the rnd
    was a no-op everywhere but on Native Client.
    And on Native Client it was wrong.
    
    Perhaps it was supposed to be rounding down,
    not up, but zerorange handles the extra 32 bits
    correctly, so the rnd does not seem to be necessary
    at all.
    
    This wouldn't be worth doing for Go 1.3 except
    that it can affect code on the playground.
    
    Fixes #8155.
    
    LGTM=r, iant
    R=golang-codereviews, r, iant
    CC=dvyukov, golang-codereviews, khr
    https://golang.org/cl/108740047
---
 src/cmd/6g/ggen.c           |  2 +-
 test/fixedbugs/issue8155.go | 48 +++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 49 insertions(+), 1 deletion(-)

diff --git a/src/cmd/6g/ggen.c b/src/cmd/6g/ggen.c
index 3d27fb2ab9..c385798f2e 100644
--- a/src/cmd/6g/ggen.c
+++ b/src/cmd/6g/ggen.c
@@ -47,7 +47,7 @@ defframe(Prog *ptxt)
 
 		if(lo != hi && n->xoffset + n->type->width >= lo - 2*widthreg) {
 			// merge with range we already have
-			lo = rnd(n->xoffset, widthreg);
+			lo = n->xoffset;
 			continue;
 		}
 		// zero old range
diff --git a/test/fixedbugs/issue8155.go b/test/fixedbugs/issue8155.go
new file mode 100644
index 0000000000..c611f6cb18
--- /dev/null
+++ b/test/fixedbugs/issue8155.go
@@ -0,0 +1,48 @@
+// run
+
+// Copyright 2014 The Go Authors.  All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// Issue 8155.
+// Alignment of stack prologue zeroing was wrong on 64-bit Native Client
+// (because of 32-bit pointers).
+
+package main
+
+import "runtime"
+
+func bad(b bool) uintptr {
+	var p **int
+	var x1 uintptr
+	x1 = 1
+	if b {
+		var x [11]*int
+		p = &x[0]
+	}
+	if b {
+		var x [1]*int
+		p = &x[0]
+	}
+	runtime.GC()
+	if p != nil {
+		x1 = uintptr(**p)
+	}
+	return x1
+}
+
+func poison() uintptr {
+	runtime.GC()
+	var x [20]uintptr
+	var s uintptr
+	for i := range x {
+		x[i] = uintptr(i+1)
+		s += x[i]
+	}
+	return s
+}
+
+func main() {
+	poison()
+	bad(false)
+}
