commit 789c5255a4ee2bca8906baa15fc3e400054ff44d
Author: Eitan Adler <lists@eitanadler.com>
Date:   Sun Mar 5 09:14:38 2017 -0800

    all: remove the the duplicate words
    
    Change-Id: I6343c162e27e2e492547c96f1fc504909b1c03c0
    Reviewed-on: https://go-review.googlesource.com/37793
    Reviewed-by: Daniel Mart√≠ <mvdan@mvdan.cc>
    Reviewed-by: Ian Lance Taylor <iant@golang.org>
    Run-TryBot: Ian Lance Taylor <iant@golang.org>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
---
 src/archive/zip/zip_test.go                  | 2 +-
 src/cmd/compile/internal/ssa/rewrite_test.go | 2 +-
 src/cmd/compile/internal/x86/387.go          | 2 +-
 src/cmd/internal/obj/link.go                 | 2 +-
 src/cmd/internal/obj/objfile.go              | 2 +-
 src/math/big/float.go                        | 2 +-
 src/mime/encodedword.go                      | 2 +-
 src/net/smtp/smtp.go                         | 2 +-
 src/runtime/mheap.go                         | 2 +-
 9 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/src/archive/zip/zip_test.go b/src/archive/zip/zip_test.go
index 57edb2cabf..72d2b00089 100644
--- a/src/archive/zip/zip_test.go
+++ b/src/archive/zip/zip_test.go
@@ -255,7 +255,7 @@ func TestZip64EdgeCase(t *testing.T) {
 	testZip64DirectoryRecordLength(buf, t)
 }
 
-// Tests that we generate a zip64 file if the the directory at offset
+// Tests that we generate a zip64 file if the directory at offset
 // 0xFFFFFFFF, but not before.
 func TestZip64DirectoryOffset(t *testing.T) {
 	if testing.Short() && race.Enabled {
diff --git a/src/cmd/compile/internal/ssa/rewrite_test.go b/src/cmd/compile/internal/ssa/rewrite_test.go
index 7bd32ff1b2..c21c64bb7b 100644
--- a/src/cmd/compile/internal/ssa/rewrite_test.go
+++ b/src/cmd/compile/internal/ssa/rewrite_test.go
@@ -25,7 +25,7 @@ func TestNlzNto(t *testing.T) {
 	// construct the bit pattern 000...111, with bit 33 set as well.
 	for i := int64(0); i < 64; i++ {
 		tx := x | (1 << 32)
-		// nto should be the the number of bits we've shifted on, with an extra bit
+		// nto should be the number of bits we've shifted on, with an extra bit
 		// at iter 32
 		ntoExp := i
 		if ntoExp == 32 {
diff --git a/src/cmd/compile/internal/x86/387.go b/src/cmd/compile/internal/x86/387.go
index ea62ce31ff..a09ed8fa95 100644
--- a/src/cmd/compile/internal/x86/387.go
+++ b/src/cmd/compile/internal/x86/387.go
@@ -299,7 +299,7 @@ func ssaGenValue387(s *gc.SSAGenState, v *ssa.Value) bool {
 		return true
 
 	case ssa.Op386CALLstatic, ssa.Op386CALLclosure, ssa.Op386CALLdefer, ssa.Op386CALLgo, ssa.Op386CALLinter:
-		flush387(s)  // Calls must empty the the FP stack.
+		flush387(s)  // Calls must empty the FP stack.
 		return false // then issue the call as normal
 	}
 	return false
diff --git a/src/cmd/internal/obj/link.go b/src/cmd/internal/obj/link.go
index 83a1f4cfbf..296691b23a 100644
--- a/src/cmd/internal/obj/link.go
+++ b/src/cmd/internal/obj/link.go
@@ -655,7 +655,7 @@ const (
 	R_ADDRPOWER_PCREL
 
 	// R_ADDRPOWER_TOCREL relocates two D-form instructions like R_ADDRPOWER, but
-	// inserts the offset from the TOC to the address of the the relocated symbol
+	// inserts the offset from the TOC to the address of the relocated symbol
 	// rather than the symbol's address.
 	R_ADDRPOWER_TOCREL
 
diff --git a/src/cmd/internal/obj/objfile.go b/src/cmd/internal/obj/objfile.go
index 3be34d9fbe..9e0ce59691 100644
--- a/src/cmd/internal/obj/objfile.go
+++ b/src/cmd/internal/obj/objfile.go
@@ -129,7 +129,7 @@ type objWriter struct {
 	// Temporary buffer for zigzag int writing.
 	varintbuf [10]uint8
 
-	// Provide the the index of a symbol reference by symbol name.
+	// Provide the index of a symbol reference by symbol name.
 	// One map for versioned symbols and one for unversioned symbols.
 	// Used for deduplicating the symbol reference list.
 	refIdx  map[string]int
diff --git a/src/math/big/float.go b/src/math/big/float.go
index aabd7b4477..6517e2063c 100644
--- a/src/math/big/float.go
+++ b/src/math/big/float.go
@@ -97,7 +97,7 @@ const (
 // the slice may (but doesn't have to) be shorter if the mantissa contains
 // trailing 0 bits. x.mant is normalized if the msb of x.mant == 1 (i.e.,
 // the msb is shifted all the way "to the left"). Thus, if the mantissa has
-// trailing 0 bits or x.prec is not a multiple of the the Word size _W,
+// trailing 0 bits or x.prec is not a multiple of the Word size _W,
 // x.mant[0] has trailing zero bits. The msb of the mantissa corresponds
 // to the value 0.5; the exponent x.exp shifts the binary point as needed.
 //
diff --git a/src/mime/encodedword.go b/src/mime/encodedword.go
index c3ca4bacd1..9de91aa3d5 100644
--- a/src/mime/encodedword.go
+++ b/src/mime/encodedword.go
@@ -188,7 +188,7 @@ type WordDecoder struct {
 	// charset into UTF-8.
 	// Charsets are always lower-case. utf-8, iso-8859-1 and us-ascii charsets
 	// are handled by default.
-	// One of the the CharsetReader's result values must be non-nil.
+	// One of the CharsetReader's result values must be non-nil.
 	CharsetReader func(charset string, input io.Reader) (io.Reader, error)
 }
 
diff --git a/src/net/smtp/smtp.go b/src/net/smtp/smtp.go
index a408fa5336..28472e447b 100644
--- a/src/net/smtp/smtp.go
+++ b/src/net/smtp/smtp.go
@@ -298,7 +298,7 @@ var testHookStartTLS func(*tls.Config) // nil, except for tests
 // messages is accomplished by including an email address in the to
 // parameter but not including it in the msg headers.
 //
-// The SendMail function and the the net/smtp package are low-level
+// The SendMail function and the net/smtp package are low-level
 // mechanisms and provide no support for DKIM signing, MIME
 // attachments (see the mime/multipart package), or other mail
 // functionality. Higher-level packages exist outside of the standard
diff --git a/src/runtime/mheap.go b/src/runtime/mheap.go
index 03f944a1d5..f2406199d1 100644
--- a/src/runtime/mheap.go
+++ b/src/runtime/mheap.go
@@ -180,7 +180,7 @@ type mspan struct {
 	// for the next free object in this span.
 	// Each allocation scans allocBits starting at freeindex until it encounters a 0
 	// indicating a free object. freeindex is then adjusted so that subsequent scans begin
-	// just past the the newly discovered free object.
+	// just past the newly discovered free object.
 	//
 	// If freeindex == nelem, this span has no free objects.
 	//
