commit a930fede7386fd3583553b523fd6f7fa5fef1244
Author: Cherry Zhang <cherryyz@google.com>
Date:   Sat Oct 26 22:54:28 2019 -0400

    runtime: add async preemption support on MIPS and MIPS64
    
    This CL adds support of call injection and async preemption on
    MIPS and MIPS64.
    
    Like ARM64, we need to clobber one register (REGTMP) for
    returning from the injected call. Previous CLs have marked code
    sequences that use REGTMP async-nonpreemtible.
    
    It seems on MIPS/MIPS64, a CALL instruction is not "atomic" (!).
    If a signal is delivered right at the CALL instruction, we may
    see an updated LR with a not-yet-updated PC. In some cases this
    may lead to failed stack unwinding. Don't preempt in this case.
    
    Change-Id: I99437b2d05869ded5c0c8cb55265dbfc933aedab
    Reviewed-on: https://go-review.googlesource.com/c/go/+/203720
    Reviewed-by: Keith Randall <khr@golang.org>

 src/cmd/compile/internal/ssa/gen/MIPS64Ops.go |   2 +
 src/cmd/compile/internal/ssa/gen/MIPSOps.go   |   2 +
 src/runtime/mkpreempt.go                      |  65 ++++++++++++-
 src/runtime/preempt.go                        |  13 ++-
 src/runtime/preempt_mips64x.s                 | 135 +++++++++++++++++++++++++-
 src/runtime/preempt_mipsx.s                   | 135 +++++++++++++++++++++++++-
 src/runtime/signal_mips64x.go                 |  14 ++-
 src/runtime/signal_mipsx.go                   |  14 ++-
 src/runtime/signal_unix.go                    |   2 +-
 9 files changed, 370 insertions(+), 12 deletions(-)
