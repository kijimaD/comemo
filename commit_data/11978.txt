commit 4b171e5040935f65c011ea58dde6fb49fcd9e6b3
Author: David Symonds <dsymonds@golang.org>
Date:   Fri Feb 17 08:49:41 2012 +1100

    runtime: rename Cgocalls and Goroutines to NumCgoCall and NumGoroutine, respectively.
    Update some other docs too.
    
    Update #2955.
    
    R=rsc
    CC=golang-dev
    https://golang.org/cl/5676060
---
 src/pkg/net/http/transport_test.go | 6 +++---
 src/pkg/runtime/cgocall.c          | 2 +-
 src/pkg/runtime/debug.go           | 8 ++++----
 src/pkg/runtime/extern.go          | 4 ++--
 src/pkg/runtime/proc.c             | 4 ++--
 5 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/src/pkg/net/http/transport_test.go b/src/pkg/net/http/transport_test.go
index a36571a444..1a629c1727 100644
--- a/src/pkg/net/http/transport_test.go
+++ b/src/pkg/net/http/transport_test.go
@@ -648,7 +648,7 @@ func TestTransportPersistConnLeak(t *testing.T) {
 	tr := &Transport{}
 	c := &Client{Transport: tr}
 
-	n0 := runtime.Goroutines()
+	n0 := runtime.NumGoroutine()
 
 	const numReq = 25
 	didReqCh := make(chan bool)
@@ -669,7 +669,7 @@ func TestTransportPersistConnLeak(t *testing.T) {
 		<-gotReqCh
 	}
 
-	nhigh := runtime.Goroutines()
+	nhigh := runtime.NumGoroutine()
 
 	// Tell all handlers to unblock and reply.
 	for i := 0; i < numReq; i++ {
@@ -685,7 +685,7 @@ func TestTransportPersistConnLeak(t *testing.T) {
 	time.Sleep(100 * time.Millisecond)
 	runtime.GC()
 	runtime.GC() // even more.
-	nfinal := runtime.Goroutines()
+	nfinal := runtime.NumGoroutine()
 
 	growth := nfinal - n0
 
diff --git a/src/pkg/runtime/cgocall.c b/src/pkg/runtime/cgocall.c
index 756eff38f7..7a26538ec8 100644
--- a/src/pkg/runtime/cgocall.c
+++ b/src/pkg/runtime/cgocall.c
@@ -151,7 +151,7 @@ unlockm(void)
 }
 
 void
-runtime·Cgocalls(int64 ret)
+runtime·NumCgoCall(int64 ret)
 {
 	M *m;
 
diff --git a/src/pkg/runtime/debug.go b/src/pkg/runtime/debug.go
index bd6dcc971a..861017d5ff 100644
--- a/src/pkg/runtime/debug.go
+++ b/src/pkg/runtime/debug.go
@@ -26,11 +26,11 @@ func GOMAXPROCS(n int) int
 // NumCPU returns the number of logical CPUs on the local machine.
 func NumCPU() int
 
-// Cgocalls returns the number of cgo calls made by the current process.
-func Cgocalls() int64
+// NumCgoCall returns the number of cgo calls made by the current process.
+func NumCgoCall() int64
 
-// Goroutines returns the number of goroutines that currently exist.
-func Goroutines() int32
+// NumGoroutine returns the number of goroutines that currently exist.
+func NumGoroutine() int32
 
 // Alloc allocates a block of the given size.
 // FOR TESTING AND DEBUGGING ONLY.
diff --git a/src/pkg/runtime/extern.go b/src/pkg/runtime/extern.go
index eafa2f19f1..42caeb0df3 100644
--- a/src/pkg/runtime/extern.go
+++ b/src/pkg/runtime/extern.go
@@ -141,10 +141,10 @@ func Version() string {
 	return theVersion
 }
 
-// GOOS is the Go tree's operating system target:
+// GOOS is the running program's operating system target:
 // one of darwin, freebsd, linux, and so on.
 const GOOS string = theGoos
 
-// GOARCH is the Go tree's architecture target:
+// GOARCH is the running program's architecture target:
 // 386, amd64, or arm.
 const GOARCH string = theGoarch
diff --git a/src/pkg/runtime/proc.c b/src/pkg/runtime/proc.c
index 3dbf77a105..d9047c92c1 100644
--- a/src/pkg/runtime/proc.c
+++ b/src/pkg/runtime/proc.c
@@ -342,7 +342,7 @@ mcommoninit(M *m)
 	// Add to runtime·allm so garbage collector doesn't free m
 	// when it is just in a register or thread-local storage.
 	m->alllink = runtime·allm;
-	// runtime·Cgocalls() iterates over allm w/o schedlock,
+	// runtime·NumCgoCall() iterates over allm w/o schedlock,
 	// so we need to publish it safely.
 	runtime·atomicstorep(&runtime·allm, m);
 }
@@ -1652,7 +1652,7 @@ runtime·mid(uint32 ret)
 }
 
 void
-runtime·Goroutines(int32 ret)
+runtime·NumGoroutine(int32 ret)
 {
 	ret = runtime·sched.gcount;
 	FLUSH(&ret);
