commit 81672e79e4ce6efa60b4d97515d19f2f530c2c43
Author: Robert Griesemer <gri@golang.org>
Date:   Mon Nov 9 10:37:36 2009 -0800

    - rename Context to exprContext to remove it from public interface
      (and to match the style of declContext)
    
    R=rsc
    http://go/go-review/1024033
---
 src/pkg/go/printer/nodes.go | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/src/pkg/go/printer/nodes.go b/src/pkg/go/printer/nodes.go
index f91a34851f..b89bb2b0c3 100644
--- a/src/pkg/go/printer/nodes.go
+++ b/src/pkg/go/printer/nodes.go
@@ -311,7 +311,7 @@ func (p *printer) isOneLineFieldList(list []*ast.Field) bool {
 }
 
 
-func (p *printer) fieldList(lbrace token.Position, list []*ast.Field, rbrace token.Position, isIncomplete bool, ctxt Context) {
+func (p *printer) fieldList(lbrace token.Position, list []*ast.Field, rbrace token.Position, isIncomplete bool, ctxt exprContext) {
 	if !isIncomplete && !p.commentBefore(rbrace) {
 		// possibly a one-line struct/interface
 		if len(list) == 0 {
@@ -426,8 +426,8 @@ func (p *printer) fieldList(lbrace token.Position, list []*ast.Field, rbrace tok
 // ----------------------------------------------------------------------------
 // Expressions
 
-// Context describes the syntactic environment in which an expression node is printed.
-type Context uint
+// exprContext describes the syntactic environment in which an expression node is printed.
+type exprContext uint
 
 const (
 	compositeLit	= 1<<iota;
@@ -534,7 +534,7 @@ func (p *printer) binaryExpr(x *ast.BinaryExpr, prec1 int, multiLine *bool) {
 
 // Returns true if a separating semicolon is optional.
 // Sets multiLine to true if the expression spans multiple lines.
-func (p *printer) expr1(expr ast.Expr, prec1 int, ctxt Context, multiLine *bool) (optSemi bool) {
+func (p *printer) expr1(expr ast.Expr, prec1 int, ctxt exprContext, multiLine *bool) (optSemi bool) {
 	p.print(expr.Pos());
 
 	switch x := expr.(type) {
