commit af07f7734b53540ca8c06b1b3cef59020a24d752
Merge: 13bf5b80e8 4c8b09e918
Author: Filippo Valsorda <filippo@golang.org>
Date:   Tue Nov 13 13:58:50 2018 -0500

    [dev.boringcrypto] all: merge master into dev.boringcrypto
    
    Change-Id: Ice4172e2058a45b1a24da561fd420244ab2a97bd

 misc/ios/detect.go                                |    6 +-
 misc/wasm/wasm_exec.js                            |   20 +-
 src/cmd/asm/internal/asm/testdata/s390x.s         |    3 +
 src/cmd/cgo/main.go                               |    2 +
 src/cmd/cgo/out.go                                |  111 +-
 src/cmd/compile/internal/amd64/ssa.go             |   45 +
 src/cmd/compile/internal/gc/dcl.go                |    5 +-
 src/cmd/compile/internal/gc/esc.go                |   17 +-
 src/cmd/compile/internal/gc/fmt.go                |    6 +-
 src/cmd/compile/internal/gc/iexport.go            |    2 +-
 src/cmd/compile/internal/gc/iimport.go            |    4 +-
 src/cmd/compile/internal/gc/inl.go                |   10 +-
 src/cmd/compile/internal/gc/main.go               |   14 +-
 src/cmd/compile/internal/gc/noder.go              |   15 +-
 src/cmd/compile/internal/gc/pgen.go               |    5 +-
 src/cmd/compile/internal/gc/ssa.go                |   27 +-
 src/cmd/compile/internal/gc/subr.go               |   44 +-
 src/cmd/compile/internal/gc/swt.go                |    9 +-
 src/cmd/compile/internal/gc/syntax.go             |   10 +-
 src/cmd/compile/internal/gc/typecheck.go          |   12 +-
 src/cmd/compile/internal/gc/walk.go               |   16 +-
 src/cmd/compile/internal/ssa/gen/386.rules        |   12 +-
 src/cmd/compile/internal/ssa/gen/AMD64.rules      |   34 +-
 src/cmd/compile/internal/ssa/gen/AMD64Ops.go      |   40 +-
 src/cmd/compile/internal/ssa/gen/S390X.rules      |   66 +-
 src/cmd/compile/internal/ssa/gen/genericOps.go    |    3 +
 src/cmd/compile/internal/ssa/gen/rulegen.go       |    2 +
 src/cmd/compile/internal/ssa/html.go              |   10 +-
 src/cmd/compile/internal/ssa/opGen.go             |  167 +++
 src/cmd/compile/internal/ssa/rewrite.go           |   34 +-
 src/cmd/compile/internal/ssa/rewrite386.go        |  162 +--
 src/cmd/compile/internal/ssa/rewriteAMD64.go      |  516 ++++++--
 src/cmd/compile/internal/ssa/rewriteARM.go        |    2 +
 src/cmd/compile/internal/ssa/rewriteARM64.go      |    2 +
 src/cmd/compile/internal/ssa/rewriteMIPS.go       |    2 +
 src/cmd/compile/internal/ssa/rewriteMIPS64.go     |    2 +
 src/cmd/compile/internal/ssa/rewritePPC64.go      |    2 +
 src/cmd/compile/internal/ssa/rewriteS390X.go      |  254 ++--
 src/cmd/compile/internal/ssa/rewriteWasm.go       |    2 +
 src/cmd/compile/internal/ssa/rewritedec.go        |    2 +
 src/cmd/compile/internal/ssa/rewritedec64.go      |    2 +
 src/cmd/compile/internal/ssa/rewritegeneric.go    |    2 +
 src/cmd/compile/internal/ssa/schedule.go          |    9 +-
 src/cmd/compile/internal/ssa/stmtlines_test.go    |    5 +
 src/cmd/go/alldocs.go                             |    2 +-
 src/cmd/go/internal/cache/default.go              |   60 +-
 src/cmd/go/internal/modcmd/vendor.go              |   16 +-
 src/cmd/go/internal/modget/get.go                 |    2 +-
 src/cmd/go/internal/modload/build.go              |   54 +-
 src/cmd/go/internal/mvs/mvs.go                    |    1 +
 src/cmd/go/internal/work/exec.go                  |   27 +-
 src/cmd/go/testdata/script/mod_replace.txt        |   28 +-
 src/cmd/go/testdata/script/mod_tidy_replace.txt   |   71 ++
 src/cmd/go/testdata/script/mod_vendor.txt         |   48 +
 src/cmd/go/testdata/script/mod_vendor_replace.txt |   39 +
 src/cmd/internal/dwarf/dwarf.go                   |    6 +-
 src/cmd/internal/obj/objfile.go                   |   11 +-
 src/cmd/internal/obj/s390x/a.out.go               |    3 +
 src/cmd/internal/obj/s390x/anames.go              |    3 +
 src/cmd/internal/obj/s390x/asmz.go                |    3 +
 src/cmd/internal/obj/s390x/vector.go              |    8 +-
 src/cmd/link/internal/ld/data.go                  |   25 +
 src/cmd/link/internal/ld/dwarf.go                 |  131 ++-
 src/cmd/link/internal/ld/go.go                    |    7 +-
 src/cmd/link/internal/ld/lib.go                   |   34 +-
 src/cmd/link/internal/ld/main.go                  |    4 +
 src/cmd/link/internal/ld/sym.go                   |    2 +-
 src/cmd/link/internal/ld/xcoff.go                 | 1232 ++++++++++++++++++++
 src/cmd/link/internal/ppc64/asm.go                |   29 +
 src/cmd/link/internal/ppc64/obj.go                |    4 +
 src/container/list/list.go                        |   25 +-
 src/crypto/tls/boring_test.go                     |    3 +
 src/crypto/tls/conn.go                            |   29 +-
 src/crypto/tls/handshake_client.go                |    6 +-
 src/crypto/tls/handshake_client_test.go           |    4 +-
 src/crypto/tls/handshake_messages.go              | 1293 +++++++--------------
 src/crypto/tls/handshake_messages_test.go         |   55 +-
 src/crypto/tls/handshake_server.go                |    2 +-
 src/crypto/tls/handshake_server_test.go           |   28 +-
 src/crypto/tls/ticket.go                          |   25 -
 src/database/sql/sql.go                           |   28 +-
 src/encoding/json/example_test.go                 |    9 +
 src/go/build/deps_test.go                         |    3 +-
 src/go/types/expr.go                              |    6 +-
 src/go/types/stdlib_test.go                       |   34 +-
 src/go/types/testdata/shifts.src                  |   12 +
 src/hash/crc64/crc64_test.go                      |    6 +-
 src/internal/cpu/cpu_arm64_test.go                |   26 -
 src/internal/cpu/cpu_ppc64x.go                    |    1 +
 src/internal/cpu/cpu_ppc64x_test.go               |   33 -
 src/internal/cpu/cpu_test.go                      |   17 +
 src/internal/cpu/cpu_x86_test.go                  |   10 -
 src/internal/syscall/unix/getrandom_freebsd.go    |    3 -
 src/internal/syscall/unix/getrandom_linux.go      |    3 -
 src/internal/traceparser/parser_test.go           |    4 +
 src/log/log.go                                    |    7 +
 src/math/big/arith.go                             |    2 +-
 src/math/bits/bits_test.go                        |   32 +-
 src/net/cgo_stub.go                               |    2 +-
 src/net/cgo_unix.go                               |   37 +-
 src/net/cgo_unix_test.go                          |    4 +-
 src/net/dial_test.go                              |    4 +-
 src/net/dnsclient_unix.go                         |    1 -
 src/net/error_test.go                             |    6 +-
 src/net/hook.go                                   |    5 +-
 src/net/http/serve_test.go                        |   26 +
 src/net/http/server.go                            |   18 +
 src/net/http/transport_test.go                    |   10 +-
 src/net/ipsock.go                                 |    2 +-
 src/net/lookup.go                                 |   30 +-
 src/net/lookup_fake.go                            |    2 +-
 src/net/lookup_plan9.go                           |    2 +-
 src/net/lookup_test.go                            |   30 +-
 src/net/lookup_unix.go                            |    4 +-
 src/net/lookup_windows.go                         |   14 +-
 src/net/netgo_unix_test.go                        |    2 +-
 src/os/exec_windows.go                            |    5 -
 src/os/executable_test.go                         |    4 +-
 src/os/file_posix.go                              |    5 +
 src/os/os_test.go                                 |   47 +-
 src/os/sticky_bsd.go                              |    2 +-
 src/os/sticky_notbsd.go                           |    1 +
 src/path/filepath/example_unix_test.go            |   15 +
 src/runtime/asm_ppc64x.s                          |    3 -
 src/runtime/proc.go                               |    3 +-
 src/syscall/exec_libc.go                          |    4 +-
 src/syscall/export_freebsd_test.go                |   12 +
 src/syscall/js/callback.go                        |    2 +
 src/syscall/js/js.go                              |   39 +-
 src/syscall/js/js_test.go                         |   54 +
 src/syscall/js/typedarray.go                      |    2 +
 src/syscall/syscall_aix.go                        |    6 +-
 src/syscall/syscall_freebsd.go                    |   29 +-
 src/syscall/syscall_freebsd_test.go               |   54 +
 src/syscall/types_aix.go                          |    2 +-
 src/syscall/types_solaris.go                      |    2 +
 src/syscall/zsyscall_aix_ppc64.go                 |    4 +-
 src/syscall/ztypes_aix_ppc64.go                   |    2 +-
 src/syscall/ztypes_solaris_amd64.go               |    2 +
 src/text/template/parse/parse.go                  |   66 +-
 src/text/template/parse/parse_test.go             |   35 +-
 src/time/zoneinfo_js.go                           |   66 ++
 src/time/zoneinfo_unix.go                         |    2 +-
 test/codegen/mathbits.go                          |  120 ++
 test/codegen/memops.go                            |    9 +
 test/fixedbugs/issue27938.go                      |   23 +
 test/fixedbugs/issue28268.go                      |   30 +
 test/fixedbugs/issue28390.go                      |   39 +
 test/fixedbugs/issue28390.out                     |    2 +
 test/fixedbugs/issue28430.go                      |   17 +
 150 files changed, 4359 insertions(+), 1819 deletions(-)

diff --cc src/crypto/tls/boring_test.go
index 2ac62a5540,0000000000..6868f1a370
mode 100644,000000..100644
--- a/src/crypto/tls/boring_test.go
+++ b/src/crypto/tls/boring_test.go
@@@ -1,576 -1,0 +1,579 @@@
 +// Copyright 2017 The Go Authors. All rights reserved.
 +// Use of this source code is governed by a BSD-style
 +// license that can be found in the LICENSE file.
 +
 +package tls
 +
 +import (
 +	"crypto/ecdsa"
 +	"crypto/elliptic"
 +	"crypto/internal/boring/fipstls"
 +	"crypto/rand"
 +	"crypto/rsa"
 +	"crypto/x509"
 +	"crypto/x509/pkix"
 +	"fmt"
 +	"math/big"
 +	"net"
 +	"runtime"
 +	"strings"
 +	"testing"
 +	"time"
 +)
 +
 +func TestBoringServerProtocolVersion(t *testing.T) {
 +	test := func(name string, v uint16, msg string) {
 +		t.Run(name, func(t *testing.T) {
 +			serverConfig := testConfig.Clone()
 +			serverConfig.MinVersion = VersionSSL30
 +			clientHello := &clientHelloMsg{
 +				vers:               v,
++				random:             make([]byte, 32),
 +				cipherSuites:       allCipherSuites(),
 +				compressionMethods: []uint8{compressionNone},
 +			}
 +			testClientHelloFailure(t, serverConfig, clientHello, msg)
 +		})
 +	}
 +
 +	test("VersionSSL30", VersionSSL30, "")
 +	test("VersionTLS10", VersionTLS10, "")
 +	test("VersionTLS11", VersionTLS11, "")
 +	test("VersionTLS12", VersionTLS12, "")
 +
 +	fipstls.Force()
 +	defer fipstls.Abandon()
 +	test("VersionSSL30", VersionSSL30, "unsupported, maximum protocol version")
 +	test("VersionTLS10", VersionTLS10, "unsupported, maximum protocol version")
 +	test("VersionTLS11", VersionTLS11, "unsupported, maximum protocol version")
 +	test("VersionTLS12", VersionTLS12, "")
 +}
 +
 +func isBoringCipherSuite(id uint16) bool {
 +	switch id {
 +	case TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
 +		TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
 +		TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
 +		TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
 +		TLS_RSA_WITH_AES_128_GCM_SHA256,
 +		TLS_RSA_WITH_AES_256_GCM_SHA384:
 +		return true
 +	}
 +	return false
 +}
 +
 +func isBoringCurve(id CurveID) bool {
 +	switch id {
 +	case CurveP256, CurveP384, CurveP521:
 +		return true
 +	}
 +	return false
 +}
 +
 +func isECDSA(id uint16) bool {
 +	for _, suite := range cipherSuites {
 +		if suite.id == id {
 +			return suite.flags&suiteECDSA == suiteECDSA
 +		}
 +	}
 +	panic(fmt.Sprintf("unknown cipher suite %#x", id))
 +}
 +
 +func isBoringSignatureScheme(alg SignatureScheme) bool {
 +	switch alg {
 +	default:
 +		return false
 +	case PKCS1WithSHA256,
 +		ECDSAWithP256AndSHA256,
 +		PKCS1WithSHA384,
 +		ECDSAWithP384AndSHA384,
 +		PKCS1WithSHA512,
 +		ECDSAWithP521AndSHA512:
 +		// ok
 +	}
 +	return true
 +}
 +
 +func TestBoringServerCipherSuites(t *testing.T) {
 +	serverConfig := testConfig.Clone()
 +	serverConfig.CipherSuites = allCipherSuites()
 +	serverConfig.Certificates = make([]Certificate, 1)
 +
 +	for _, id := range allCipherSuites() {
 +		if isECDSA(id) {
 +			serverConfig.Certificates[0].Certificate = [][]byte{testECDSACertificate}
 +			serverConfig.Certificates[0].PrivateKey = testECDSAPrivateKey
 +		} else {
 +			serverConfig.Certificates[0].Certificate = [][]byte{testRSACertificate}
 +			serverConfig.Certificates[0].PrivateKey = testRSAPrivateKey
 +		}
 +		serverConfig.BuildNameToCertificate()
 +		t.Run(fmt.Sprintf("suite=%#x", id), func(t *testing.T) {
 +			clientHello := &clientHelloMsg{
 +				vers:               VersionTLS12,
++				random:             make([]byte, 32),
 +				cipherSuites:       []uint16{id},
 +				compressionMethods: []uint8{compressionNone},
 +				supportedCurves:    defaultCurvePreferences,
 +				supportedPoints:    []uint8{pointFormatUncompressed},
 +			}
 +
 +			testClientHello(t, serverConfig, clientHello)
 +			t.Run("fipstls", func(t *testing.T) {
 +				fipstls.Force()
 +				defer fipstls.Abandon()
 +				msg := ""
 +				if !isBoringCipherSuite(id) {
 +					msg = "no cipher suite supported by both client and server"
 +				}
 +				testClientHelloFailure(t, serverConfig, clientHello, msg)
 +			})
 +		})
 +	}
 +}
 +
 +func TestBoringServerCurves(t *testing.T) {
 +	serverConfig := testConfig.Clone()
 +	serverConfig.Certificates = make([]Certificate, 1)
 +	serverConfig.Certificates[0].Certificate = [][]byte{testECDSACertificate}
 +	serverConfig.Certificates[0].PrivateKey = testECDSAPrivateKey
 +	serverConfig.BuildNameToCertificate()
 +
 +	for _, curveid := range defaultCurvePreferences {
 +		t.Run(fmt.Sprintf("curve=%d", curveid), func(t *testing.T) {
 +			clientHello := &clientHelloMsg{
 +				vers:               VersionTLS12,
++				random:             make([]byte, 32),
 +				cipherSuites:       []uint16{TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256},
 +				compressionMethods: []uint8{compressionNone},
 +				supportedCurves:    []CurveID{curveid},
 +				supportedPoints:    []uint8{pointFormatUncompressed},
 +			}
 +
 +			testClientHello(t, serverConfig, clientHello)
 +
 +			// With fipstls forced, bad curves should be rejected.
 +			t.Run("fipstls", func(t *testing.T) {
 +				fipstls.Force()
 +				defer fipstls.Abandon()
 +				msg := ""
 +				if !isBoringCurve(curveid) {
 +					msg = "no cipher suite supported by both client and server"
 +				}
 +				testClientHelloFailure(t, serverConfig, clientHello, msg)
 +			})
 +		})
 +	}
 +}
 +
 +func boringHandshake(t *testing.T, clientConfig, serverConfig *Config) (clientErr, serverErr error) {
 +	c, s := realNetPipe(t)
 +	client := Client(c, clientConfig)
 +	server := Server(s, serverConfig)
 +	done := make(chan error, 1)
 +	go func() {
 +		done <- client.Handshake()
 +		c.Close()
 +	}()
 +	serverErr = server.Handshake()
 +	s.Close()
 +	clientErr = <-done
 +	return
 +}
 +
 +func TestBoringServerSignatureAndHash(t *testing.T) {
 +	serverConfig := testConfig.Clone()
 +	serverConfig.Certificates = make([]Certificate, 1)
 +
 +	defer func() {
 +		testingOnlyForceClientHelloSignatureAlgorithms = nil
 +	}()
 +
 +	for _, sigHash := range defaultSupportedSignatureAlgorithms {
 +		testingOnlyForceClientHelloSignatureAlgorithms = []SignatureScheme{sigHash}
 +
 +		t.Run(fmt.Sprintf("%v", sigHash), func(t *testing.T) {
 +			if sigHash == PKCS1WithSHA1 || sigHash == PKCS1WithSHA256 || sigHash == PKCS1WithSHA384 || sigHash == PKCS1WithSHA512 {
 +				serverConfig.CipherSuites = []uint16{TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256}
 +				serverConfig.Certificates[0].Certificate = [][]byte{testRSACertificate}
 +				serverConfig.Certificates[0].PrivateKey = testRSAPrivateKey
 +			} else {
 +				serverConfig.CipherSuites = []uint16{TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256}
 +				serverConfig.Certificates = make([]Certificate, 1)
 +				serverConfig.Certificates[0].Certificate = [][]byte{testECDSACertificate}
 +				serverConfig.Certificates[0].PrivateKey = testECDSAPrivateKey
 +			}
 +			serverConfig.BuildNameToCertificate()
 +
 +			clientErr, _ := boringHandshake(t, testConfig, serverConfig)
 +			if clientErr != nil {
 +				t.Fatalf("expected handshake with %v to succeed; err=%v", sigHash, clientErr)
 +			}
 +
 +			// With fipstls forced, bad curves should be rejected.
 +			t.Run("fipstls", func(t *testing.T) {
 +				fipstls.Force()
 +				defer fipstls.Abandon()
 +				clientErr, _ := boringHandshake(t, testConfig, serverConfig)
 +				if isBoringSignatureScheme(sigHash) {
 +					if clientErr != nil {
 +						t.Fatalf("expected handshake with %v to succeed; err=%v", sigHash, clientErr)
 +					}
 +				} else {
 +					if clientErr == nil {
 +						t.Fatalf("expected handshake with %v to fail, but it succeeded", sigHash)
 +					}
 +				}
 +			})
 +		})
 +	}
 +}
 +
 +func TestBoringClientHello(t *testing.T) {
 +	// Test that no matter what we put in the client config,
 +	// the client does not offer non-FIPS configurations.
 +	fipstls.Force()
 +	defer fipstls.Abandon()
 +
 +	c, s := net.Pipe()
 +	defer c.Close()
 +	defer s.Close()
 +
 +	clientConfig := testConfig.Clone()
 +	// All sorts of traps for the client to avoid.
 +	clientConfig.MinVersion = VersionSSL30
 +	clientConfig.CipherSuites = allCipherSuites()
 +	clientConfig.CurvePreferences = defaultCurvePreferences
 +
 +	go Client(c, testConfig).Handshake()
 +	srv := Server(s, testConfig)
 +	msg, err := srv.readHandshake()
 +	if err != nil {
 +		t.Fatal(err)
 +	}
 +	hello, ok := msg.(*clientHelloMsg)
 +	if !ok {
 +		t.Fatalf("unexpected message type %T", msg)
 +	}
 +
 +	if hello.vers != VersionTLS12 {
 +		t.Errorf("client vers=%#x, want %#x (TLS 1.2)", hello.vers, VersionTLS12)
 +	}
 +	for _, id := range hello.cipherSuites {
 +		if !isBoringCipherSuite(id) {
 +			t.Errorf("client offered disallowed suite %#x", id)
 +		}
 +	}
 +	for _, id := range hello.supportedCurves {
 +		if !isBoringCurve(id) {
 +			t.Errorf("client offered disallowed curve %d", id)
 +		}
 +	}
 +	for _, sigHash := range hello.supportedSignatureAlgorithms {
 +		if !isBoringSignatureScheme(sigHash) {
 +			t.Errorf("client offered disallowed signature-and-hash %v", sigHash)
 +		}
 +	}
 +}
 +
 +func TestBoringCertAlgs(t *testing.T) {
 +	// NaCl, arm and wasm time out generating keys. Nothing in this test is architecture-specific, so just don't bother on those.
 +	if runtime.GOOS == "nacl" || runtime.GOARCH == "arm" || runtime.GOOS == "js" {
 +		t.Skipf("skipping on %s/%s because key generation takes too long", runtime.GOOS, runtime.GOARCH)
 +	}
 +
 +	// Set up some roots, intermediate CAs, and leaf certs with various algorithms.
 +	// X_Y is X signed by Y.
 +	R1 := boringCert(t, "R1", boringRSAKey(t, 2048), nil, boringCertCA|boringCertFIPSOK)
 +	R2 := boringCert(t, "R2", boringRSAKey(t, 4096), nil, boringCertCA)
 +
 +	M1_R1 := boringCert(t, "M1_R1", boringECDSAKey(t, elliptic.P256()), R1, boringCertCA|boringCertFIPSOK)
 +	M2_R1 := boringCert(t, "M2_R1", boringECDSAKey(t, elliptic.P224()), R1, boringCertCA)
 +
 +	I_R1 := boringCert(t, "I_R1", boringRSAKey(t, 3072), R1, boringCertCA|boringCertFIPSOK)
 +	I_R2 := boringCert(t, "I_R2", I_R1.key, R2, boringCertCA|boringCertFIPSOK)
 +	I_M1 := boringCert(t, "I_M1", I_R1.key, M1_R1, boringCertCA|boringCertFIPSOK)
 +	I_M2 := boringCert(t, "I_M2", I_R1.key, M2_R1, boringCertCA|boringCertFIPSOK)
 +
 +	L1_I := boringCert(t, "L1_I", boringECDSAKey(t, elliptic.P384()), I_R1, boringCertLeaf|boringCertFIPSOK)
 +	L2_I := boringCert(t, "L2_I", boringRSAKey(t, 1024), I_R1, boringCertLeaf)
 +
 +	// boringCert checked that isBoringCertificate matches the caller's boringCertFIPSOK bit.
 +	// If not, no point in building bigger end-to-end tests.
 +	if t.Failed() {
 +		t.Fatalf("isBoringCertificate failures; not continuing")
 +	}
 +
 +	// client verifying server cert
 +	testServerCert := func(t *testing.T, desc string, pool *x509.CertPool, key interface{}, list [][]byte, ok bool) {
 +		clientConfig := testConfig.Clone()
 +		clientConfig.RootCAs = pool
 +		clientConfig.InsecureSkipVerify = false
 +		clientConfig.ServerName = "example.com"
 +
 +		serverConfig := testConfig.Clone()
 +		serverConfig.Certificates = []Certificate{{Certificate: list, PrivateKey: key}}
 +		serverConfig.BuildNameToCertificate()
 +
 +		clientErr, _ := boringHandshake(t, clientConfig, serverConfig)
 +
 +		if (clientErr == nil) == ok {
 +			if ok {
 +				t.Logf("%s: accept", desc)
 +			} else {
 +				t.Logf("%s: reject", desc)
 +			}
 +		} else {
 +			if ok {
 +				t.Errorf("%s: BAD reject (%v)", desc, clientErr)
 +			} else {
 +				t.Errorf("%s: BAD accept", desc)
 +			}
 +		}
 +	}
 +
 +	// server verifying client cert
 +	testClientCert := func(t *testing.T, desc string, pool *x509.CertPool, key interface{}, list [][]byte, ok bool) {
 +		clientConfig := testConfig.Clone()
 +		clientConfig.ServerName = "example.com"
 +		clientConfig.Certificates = []Certificate{{Certificate: list, PrivateKey: key}}
 +
 +		serverConfig := testConfig.Clone()
 +		serverConfig.ClientCAs = pool
 +		serverConfig.ClientAuth = RequireAndVerifyClientCert
 +
 +		_, serverErr := boringHandshake(t, clientConfig, serverConfig)
 +
 +		if (serverErr == nil) == ok {
 +			if ok {
 +				t.Logf("%s: accept", desc)
 +			} else {
 +				t.Logf("%s: reject", desc)
 +			}
 +		} else {
 +			if ok {
 +				t.Errorf("%s: BAD reject (%v)", desc, serverErr)
 +			} else {
 +				t.Errorf("%s: BAD accept", desc)
 +			}
 +		}
 +	}
 +
 +	// Run simple basic test with known answers before proceeding to
 +	// exhaustive test with computed answers.
 +	r1pool := x509.NewCertPool()
 +	r1pool.AddCert(R1.cert)
 +	testServerCert(t, "basic", r1pool, L2_I.key, [][]byte{L2_I.der, I_R1.der}, true)
 +	testClientCert(t, "basic (client cert)", r1pool, L2_I.key, [][]byte{L2_I.der, I_R1.der}, true)
 +	fipstls.Force()
 +	testServerCert(t, "basic (fips)", r1pool, L2_I.key, [][]byte{L2_I.der, I_R1.der}, false)
 +	testClientCert(t, "basic (fips, client cert)", r1pool, L2_I.key, [][]byte{L2_I.der, I_R1.der}, false)
 +	fipstls.Abandon()
 +
 +	if t.Failed() {
 +		t.Fatal("basic test failed, skipping exhaustive test")
 +	}
 +
 +	if testing.Short() {
 +		t.Logf("basic test passed; skipping exhaustive test in -short mode")
 +		return
 +	}
 +
 +	for l := 1; l <= 2; l++ {
 +		leaf := L1_I
 +		if l == 2 {
 +			leaf = L2_I
 +		}
 +		for i := 0; i < 64; i++ {
 +			reachable := map[string]bool{leaf.parentOrg: true}
 +			reachableFIPS := map[string]bool{leaf.parentOrg: leaf.fipsOK}
 +			list := [][]byte{leaf.der}
 +			listName := leaf.name
 +			addList := func(cond int, c *boringCertificate) {
 +				if cond != 0 {
 +					list = append(list, c.der)
 +					listName += "," + c.name
 +					if reachable[c.org] {
 +						reachable[c.parentOrg] = true
 +					}
 +					if reachableFIPS[c.org] && c.fipsOK {
 +						reachableFIPS[c.parentOrg] = true
 +					}
 +				}
 +			}
 +			addList(i&1, I_R1)
 +			addList(i&2, I_R2)
 +			addList(i&4, I_M1)
 +			addList(i&8, I_M2)
 +			addList(i&16, M1_R1)
 +			addList(i&32, M2_R1)
 +
 +			for r := 1; r <= 3; r++ {
 +				pool := x509.NewCertPool()
 +				rootName := ","
 +				shouldVerify := false
 +				shouldVerifyFIPS := false
 +				addRoot := func(cond int, c *boringCertificate) {
 +					if cond != 0 {
 +						rootName += "," + c.name
 +						pool.AddCert(c.cert)
 +						if reachable[c.org] {
 +							shouldVerify = true
 +						}
 +						if reachableFIPS[c.org] && c.fipsOK {
 +							shouldVerifyFIPS = true
 +						}
 +					}
 +				}
 +				addRoot(r&1, R1)
 +				addRoot(r&2, R2)
 +				rootName = rootName[1:] // strip leading comma
 +				testServerCert(t, listName+"->"+rootName[1:], pool, leaf.key, list, shouldVerify)
 +				testClientCert(t, listName+"->"+rootName[1:]+"(client cert)", pool, leaf.key, list, shouldVerify)
 +				fipstls.Force()
 +				testServerCert(t, listName+"->"+rootName[1:]+" (fips)", pool, leaf.key, list, shouldVerifyFIPS)
 +				testClientCert(t, listName+"->"+rootName[1:]+" (fips, client cert)", pool, leaf.key, list, shouldVerifyFIPS)
 +				fipstls.Abandon()
 +			}
 +		}
 +	}
 +}
 +
 +const (
 +	boringCertCA = iota
 +	boringCertLeaf
 +	boringCertFIPSOK = 0x80
 +)
 +
 +func boringRSAKey(t *testing.T, size int) *rsa.PrivateKey {
 +	k, err := rsa.GenerateKey(rand.Reader, size)
 +	if err != nil {
 +		t.Fatal(err)
 +	}
 +	return k
 +}
 +
 +func boringECDSAKey(t *testing.T, curve elliptic.Curve) *ecdsa.PrivateKey {
 +	k, err := ecdsa.GenerateKey(curve, rand.Reader)
 +	if err != nil {
 +		t.Fatal(err)
 +	}
 +	return k
 +}
 +
 +type boringCertificate struct {
 +	name      string
 +	org       string
 +	parentOrg string
 +	der       []byte
 +	cert      *x509.Certificate
 +	key       interface{}
 +	fipsOK    bool
 +}
 +
 +func boringCert(t *testing.T, name string, key interface{}, parent *boringCertificate, mode int) *boringCertificate {
 +	org := name
 +	parentOrg := ""
 +	if i := strings.Index(org, "_"); i >= 0 {
 +		org = org[:i]
 +		parentOrg = name[i+1:]
 +	}
 +	tmpl := &x509.Certificate{
 +		SerialNumber: big.NewInt(1),
 +		Subject: pkix.Name{
 +			Organization: []string{org},
 +		},
 +		NotBefore: time.Unix(0, 0),
 +		NotAfter:  time.Unix(0, 0),
 +
 +		KeyUsage:              x509.KeyUsageKeyEncipherment | x509.KeyUsageDigitalSignature,
 +		ExtKeyUsage:           []x509.ExtKeyUsage{x509.ExtKeyUsageServerAuth, x509.ExtKeyUsageClientAuth},
 +		BasicConstraintsValid: true,
 +	}
 +	if mode&^boringCertFIPSOK == boringCertLeaf {
 +		tmpl.DNSNames = []string{"example.com"}
 +	} else {
 +		tmpl.IsCA = true
 +		tmpl.KeyUsage |= x509.KeyUsageCertSign
 +	}
 +
 +	var pcert *x509.Certificate
 +	var pkey interface{}
 +	if parent != nil {
 +		pcert = parent.cert
 +		pkey = parent.key
 +	} else {
 +		pcert = tmpl
 +		pkey = key
 +	}
 +
 +	var pub interface{}
 +	var desc string
 +	switch k := key.(type) {
 +	case *rsa.PrivateKey:
 +		pub = &k.PublicKey
 +		desc = fmt.Sprintf("RSA-%d", k.N.BitLen())
 +	case *ecdsa.PrivateKey:
 +		pub = &k.PublicKey
 +		desc = "ECDSA-" + k.Curve.Params().Name
 +	default:
 +		t.Fatalf("invalid key %T", key)
 +	}
 +
 +	der, err := x509.CreateCertificate(rand.Reader, tmpl, pcert, pub, pkey)
 +	if err != nil {
 +		t.Fatal(err)
 +	}
 +	cert, err := x509.ParseCertificate(der)
 +	if err != nil {
 +		t.Fatal(err)
 +	}
 +
 +	// Tell isBoringCertificate to enforce FIPS restrictions for this check.
 +	fipstls.Force()
 +	defer fipstls.Abandon()
 +
 +	fipsOK := mode&boringCertFIPSOK != 0
 +	if isBoringCertificate(cert) != fipsOK {
 +		t.Errorf("isBoringCertificate(cert with %s key) = %v, want %v", desc, !fipsOK, fipsOK)
 +	}
 +	return &boringCertificate{name, org, parentOrg, der, cert, key, fipsOK}
 +}
 +
 +func boringPool(t *testing.T, list ...*boringCertificate) *x509.CertPool {
 +	pool := x509.NewCertPool()
 +	for _, c := range list {
 +		cert, err := x509.ParseCertificate(c.der)
 +		if err != nil {
 +			t.Fatal(err)
 +		}
 +		pool.AddCert(cert)
 +	}
 +	return pool
 +}
 +
 +func boringList(t *testing.T, list ...*boringCertificate) [][]byte {
 +	var all [][]byte
 +	for _, c := range list {
 +		all = append(all, c.der)
 +	}
 +	return all
 +}
 +
 +// realNetPipe is like net.Pipe but returns an actual network socket pair,
 +// which has buffering that avoids various deadlocks if both sides
 +// try to speak at the same time.
 +func realNetPipe(t *testing.T) (net.Conn, net.Conn) {
 +	l := newLocalListener(t)
 +	defer l.Close()
 +	c, err := net.Dial("tcp", l.Addr().String())
 +	if err != nil {
 +		t.Fatal(err)
 +	}
 +	s, err := l.Accept()
 +	if err != nil {
 +		c.Close()
 +		t.Fatal(err)
 +	}
 +	return c, s
 +}
diff --cc src/crypto/tls/handshake_messages_test.go
index e24089b4ba,fbc294b64e..08622eac05
--- a/src/crypto/tls/handshake_messages_test.go
+++ b/src/crypto/tls/handshake_messages_test.go
@@@ -145,11 -143,10 +143,10 @@@ func (*clientHelloMsg) Generate(rand *r
  		}
  	}
  	if rand.Intn(10) > 5 {
 -		m.supportedSignatureAlgorithms = supportedSignatureAlgorithms
 +		m.supportedSignatureAlgorithms = supportedSignatureAlgorithms()
  	}
- 	m.alpnProtocols = make([]string, rand.Intn(5))
- 	for i := range m.alpnProtocols {
- 		m.alpnProtocols[i] = randomString(rand.Intn(20)+1, rand)
+ 	for i := 0; i < rand.Intn(5); i++ {
+ 		m.alpnProtocols = append(m.alpnProtocols, randomString(rand.Intn(20)+1, rand))
  	}
  	if rand.Intn(10) > 5 {
  		m.scts = true
diff --cc src/crypto/tls/handshake_server.go
index edd48de1da,bec128f415..fc458f6b01
--- a/src/crypto/tls/handshake_server.go
+++ b/src/crypto/tls/handshake_server.go
@@@ -418,8 -418,8 +418,8 @@@ func (hs *serverHandshakeState) doFullH
  			byte(certTypeECDSASign),
  		}
  		if c.vers >= VersionTLS12 {
- 			certReq.hasSignatureAndHash = true
+ 			certReq.hasSignatureAlgorithm = true
 -			certReq.supportedSignatureAlgorithms = supportedSignatureAlgorithms
 +			certReq.supportedSignatureAlgorithms = supportedSignatureAlgorithms()
  		}
  
  		// An empty list of certificateAuthorities signals to
