commit 1a5cd2c0e1809c600e73f9895abc07c14156f7c1
Author: Russ Cox <rsc@golang.org>
Date:   Fri Mar 12 17:38:18 2010 -0800

    hash/crc64: new package implementing 64-bit CRC
    hash/crc32: add Update function
    hash: add Sum64 interface
    
    R=r
    CC=golang-dev
    https://golang.org/cl/445042
---
 src/pkg/Makefile                 |  1 +
 src/pkg/hash/crc32/crc32.go      |  9 +++-
 src/pkg/hash/crc32/crc32_test.go | 66 +++++++++++++--------------
 src/pkg/hash/crc64/Makefile      | 11 +++++
 src/pkg/hash/crc64/crc64.go      | 96 ++++++++++++++++++++++++++++++++++++++++
 src/pkg/hash/crc64/crc64_test.go | 78 ++++++++++++++++++++++++++++++++
 src/pkg/hash/hash.go             |  6 +++
 7 files changed, 232 insertions(+), 35 deletions(-)

diff --git a/src/pkg/Makefile b/src/pkg/Makefile
index d6552d0658..d3f0906cf6 100644
--- a/src/pkg/Makefile
+++ b/src/pkg/Makefile
@@ -80,6 +80,7 @@ DIRS=\
 	hash\
 	hash/adler32\
 	hash/crc32\
+	hash/crc64\
 	http\
 	image\
 	image/jpeg\
diff --git a/src/pkg/hash/crc32/crc32.go b/src/pkg/hash/crc32/crc32.go
index c8fd9f0144..2ab0c54919 100644
--- a/src/pkg/hash/crc32/crc32.go
+++ b/src/pkg/hash/crc32/crc32.go
@@ -74,12 +74,17 @@ func (d *digest) Reset() { d.crc = 0 }
 
 func update(crc uint32, tab *Table, p []byte) uint32 {
 	crc = ^crc
-	for i := 0; i < len(p); i++ {
-		crc = tab[byte(crc)^p[i]] ^ (crc >> 8)
+	for _, v := range p {
+		crc = tab[byte(crc)^v] ^ (crc >> 8)
 	}
 	return ^crc
 }
 
+// Update returns the result of adding the bytes in p to the crc.
+func Update(crc uint32, tab *Table, p []byte) uint32 {
+	return update(crc, tab, p)
+}
+
 func (d *digest) Write(p []byte) (n int, err os.Error) {
 	d.crc = update(d.crc, d.tab, p)
 	return len(p), nil
diff --git a/src/pkg/hash/crc32/crc32_test.go b/src/pkg/hash/crc32/crc32_test.go
index ce81b72316..45ad84be76 100644
--- a/src/pkg/hash/crc32/crc32_test.go
+++ b/src/pkg/hash/crc32/crc32_test.go
@@ -9,43 +9,43 @@ import (
 	"testing"
 )
 
-type _Crc32Test struct {
+type test struct {
 	out uint32
 	in  string
 }
 
-var golden = []_Crc32Test{
-	_Crc32Test{0x0, ""},
-	_Crc32Test{0xe8b7be43, "a"},
-	_Crc32Test{0x9e83486d, "ab"},
-	_Crc32Test{0x352441c2, "abc"},
-	_Crc32Test{0xed82cd11, "abcd"},
-	_Crc32Test{0x8587d865, "abcde"},
-	_Crc32Test{0x4b8e39ef, "abcdef"},
-	_Crc32Test{0x312a6aa6, "abcdefg"},
-	_Crc32Test{0xaeef2a50, "abcdefgh"},
-	_Crc32Test{0x8da988af, "abcdefghi"},
-	_Crc32Test{0x3981703a, "abcdefghij"},
-	_Crc32Test{0x6b9cdfe7, "Discard medicine more than two years old."},
-	_Crc32Test{0xc90ef73f, "He who has a shady past knows that nice guys finish last."},
-	_Crc32Test{0xb902341f, "I wouldn't marry him with a ten foot pole."},
-	_Crc32Test{0x42080e8, "Free! Free!/A trip/to Mars/for 900/empty jars/Burma Shave"},
-	_Crc32Test{0x154c6d11, "The days of the digital watch are numbered.  -Tom Stoppard"},
-	_Crc32Test{0x4c418325, "Nepal premier won't resign."},
-	_Crc32Test{0x33955150, "For every action there is an equal and opposite government program."},
-	_Crc32Test{0x26216a4b, "His money is twice tainted: 'taint yours and 'taint mine."},
-	_Crc32Test{0x1abbe45e, "There is no reason for any individual to have a computer in their home. -Ken Olsen, 1977"},
-	_Crc32Test{0xc89a94f7, "It's a tiny change to the code and not completely disgusting. - Bob Manchek"},
-	_Crc32Test{0xab3abe14, "size:  a.out:  bad magic"},
-	_Crc32Test{0xbab102b6, "The major problem is with sendmail.  -Mark Horton"},
-	_Crc32Test{0x999149d7, "Give me a rock, paper and scissors and I will move the world.  CCFestoon"},
-	_Crc32Test{0x6d52a33c, "If the enemy is within range, then so are you."},
-	_Crc32Test{0x90631e8d, "It's well we cannot hear the screams/That we create in others' dreams."},
-	_Crc32Test{0x78309130, "You remind me of a TV show, but that's all right: I watch it anyway."},
-	_Crc32Test{0x7d0a377f, "C is as portable as Stonehedge!!"},
-	_Crc32Test{0x8c79fd79, "Even if I could be Shakespeare, I think I should still choose to be Faraday. - A. Huxley"},
-	_Crc32Test{0xa20b7167, "The fugacity of a constituent in a mixture of gases at a given temperature is proportional to its mole fraction.  Lewis-Randall Rule"},
-	_Crc32Test{0x8e0bb443, "How can you write a big system without C++?  -Paul Glick"},
+var golden = []test{
+	test{0x0, ""},
+	test{0xe8b7be43, "a"},
+	test{0x9e83486d, "ab"},
+	test{0x352441c2, "abc"},
+	test{0xed82cd11, "abcd"},
+	test{0x8587d865, "abcde"},
+	test{0x4b8e39ef, "abcdef"},
+	test{0x312a6aa6, "abcdefg"},
+	test{0xaeef2a50, "abcdefgh"},
+	test{0x8da988af, "abcdefghi"},
+	test{0x3981703a, "abcdefghij"},
+	test{0x6b9cdfe7, "Discard medicine more than two years old."},
+	test{0xc90ef73f, "He who has a shady past knows that nice guys finish last."},
+	test{0xb902341f, "I wouldn't marry him with a ten foot pole."},
+	test{0x42080e8, "Free! Free!/A trip/to Mars/for 900/empty jars/Burma Shave"},
+	test{0x154c6d11, "The days of the digital watch are numbered.  -Tom Stoppard"},
+	test{0x4c418325, "Nepal premier won't resign."},
+	test{0x33955150, "For every action there is an equal and opposite government program."},
+	test{0x26216a4b, "His money is twice tainted: 'taint yours and 'taint mine."},
+	test{0x1abbe45e, "There is no reason for any individual to have a computer in their home. -Ken Olsen, 1977"},
+	test{0xc89a94f7, "It's a tiny change to the code and not completely disgusting. - Bob Manchek"},
+	test{0xab3abe14, "size:  a.out:  bad magic"},
+	test{0xbab102b6, "The major problem is with sendmail.  -Mark Horton"},
+	test{0x999149d7, "Give me a rock, paper and scissors and I will move the world.  CCFestoon"},
+	test{0x6d52a33c, "If the enemy is within range, then so are you."},
+	test{0x90631e8d, "It's well we cannot hear the screams/That we create in others' dreams."},
+	test{0x78309130, "You remind me of a TV show, but that's all right: I watch it anyway."},
+	test{0x7d0a377f, "C is as portable as Stonehedge!!"},
+	test{0x8c79fd79, "Even if I could be Shakespeare, I think I should still choose to be Faraday. - A. Huxley"},
+	test{0xa20b7167, "The fugacity of a constituent in a mixture of gases at a given temperature is proportional to its mole fraction.  Lewis-Randall Rule"},
+	test{0x8e0bb443, "How can you write a big system without C++?  -Paul Glick"},
 }
 
 func TestGolden(t *testing.T) {
diff --git a/src/pkg/hash/crc64/Makefile b/src/pkg/hash/crc64/Makefile
new file mode 100644
index 0000000000..01b755b3ec
--- /dev/null
+++ b/src/pkg/hash/crc64/Makefile
@@ -0,0 +1,11 @@
+# Copyright 2009 The Go Authors. All rights reserved.
+# Use of this source code is governed by a BSD-style
+# license that can be found in the LICENSE file.
+
+include ../../../Make.$(GOARCH)
+
+TARG=hash/crc64
+GOFILES=\
+	crc64.go\
+
+include ../../../Make.pkg
diff --git a/src/pkg/hash/crc64/crc64.go b/src/pkg/hash/crc64/crc64.go
new file mode 100644
index 0000000000..89e431977f
--- /dev/null
+++ b/src/pkg/hash/crc64/crc64.go
@@ -0,0 +1,96 @@
+// Copyright 2009 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// This package implements the 64-bit cyclic redundancy check, or CRC-64, checksum.
+// See http://en.wikipedia.org/wiki/Cyclic_redundancy_check for information.
+package crc64
+
+import (
+	"hash"
+	"os"
+)
+
+// The size of a CRC-64 checksum in bytes.
+const Size = 8
+
+// Predefined polynomials.
+const (
+	// The ISO polynomial, defined in ISO 3309 and used in HDLC.
+	ISO = 0xD800000000000000
+
+	// The ECMA polynomial, defined in ECMA 182.
+	ECMA = 0xC96C5795D7870F42
+)
+
+// Table is a 256-word table representing the polynomial for efficient processing.
+type Table [256]uint64
+
+// MakeTable returns the Table constructed from the specified polynomial.
+func MakeTable(poly uint64) *Table {
+	t := new(Table)
+	for i := 0; i < 256; i++ {
+		crc := uint64(i)
+		for j := 0; j < 8; j++ {
+			if crc&1 == 1 {
+				crc = (crc >> 1) ^ poly
+			} else {
+				crc >>= 1
+			}
+		}
+		t[i] = crc
+	}
+	return t
+}
+
+// digest represents the partial evaluation of a checksum.
+type digest struct {
+	crc uint64
+	tab *Table
+}
+
+// New creates a new hash.Hash64 computing the CRC-64 checksum
+// using the polynomial represented by the Table.
+func New(tab *Table) hash.Hash64 { return &digest{0, tab} }
+
+func (d *digest) Size() int { return Size }
+
+func (d *digest) Reset() { d.crc = 0 }
+
+func update(crc uint64, tab *Table, p []byte) uint64 {
+	crc = ^crc
+	for _, v := range p {
+		crc = tab[byte(crc)^v] ^ (crc >> 8)
+	}
+	return ^crc
+}
+
+// Update returns the result of adding the bytes in p to the crc.
+func Update(crc uint64, tab *Table, p []byte) uint64 {
+	return update(crc, tab, p)
+}
+
+func (d *digest) Write(p []byte) (n int, err os.Error) {
+	d.crc = update(d.crc, d.tab, p)
+	return len(p), nil
+}
+
+func (d *digest) Sum64() uint64 { return d.crc }
+
+func (d *digest) Sum() []byte {
+	p := make([]byte, 8)
+	s := d.Sum64()
+	p[0] = byte(s >> 54)
+	p[1] = byte(s >> 48)
+	p[2] = byte(s >> 40)
+	p[3] = byte(s >> 32)
+	p[4] = byte(s >> 24)
+	p[5] = byte(s >> 16)
+	p[6] = byte(s >> 8)
+	p[7] = byte(s)
+	return p
+}
+
+// Checksum returns the CRC-64 checksum of data
+// using the polynomial represented by the Table.
+func Checksum(data []byte, tab *Table) uint64 { return update(0, tab, data) }
diff --git a/src/pkg/hash/crc64/crc64_test.go b/src/pkg/hash/crc64/crc64_test.go
new file mode 100644
index 0000000000..664e1aeb36
--- /dev/null
+++ b/src/pkg/hash/crc64/crc64_test.go
@@ -0,0 +1,78 @@
+// Copyright 2009 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package crc64
+
+import (
+	"io"
+	"testing"
+)
+
+type test struct {
+	out uint64
+	in  string
+}
+
+var golden = []test{
+	test{0x0, ""},
+	test{0x3420000000000000, "a"},
+	test{0x36c4200000000000, "ab"},
+	test{0x3776c42000000000, "abc"},
+	test{0x336776c420000000, "abcd"},
+	test{0x32d36776c4200000, "abcde"},
+	test{0x3002d36776c42000, "abcdef"},
+	test{0x31b002d36776c420, "abcdefg"},
+	test{0xe21b002d36776c4, "abcdefgh"},
+	test{0x8b6e21b002d36776, "abcdefghi"},
+	test{0x7f5b6e21b002d367, "abcdefghij"},
+	test{0x8ec0e7c835bf9cdf, "Discard medicine more than two years old."},
+	test{0xc7db1759e2be5ab4, "He who has a shady past knows that nice guys finish last."},
+	test{0xfbf9d9603a6fa020, "I wouldn't marry him with a ten foot pole."},
+	test{0xeafc4211a6daa0ef, "Free! Free!/A trip/to Mars/for 900/empty jars/Burma Shave"},
+	test{0x3e05b21c7a4dc4da, "The days of the digital watch are numbered.  -Tom Stoppard"},
+	test{0x5255866ad6ef28a6, "Nepal premier won't resign."},
+	test{0x8a79895be1e9c361, "For every action there is an equal and opposite government program."},
+	test{0x8878963a649d4916, "His money is twice tainted: 'taint yours and 'taint mine."},
+	test{0xa7b9d53ea87eb82f, "There is no reason for any individual to have a computer in their home. -Ken Olsen, 1977"},
+	test{0xdb6805c0966a2f9c, "It's a tiny change to the code and not completely disgusting. - Bob Manchek"},
+	test{0xf3553c65dacdadd2, "size:  a.out:  bad magic"},
+	test{0x9d5e034087a676b9, "The major problem is with sendmail.  -Mark Horton"},
+	test{0xa6db2d7f8da96417, "Give me a rock, paper and scissors and I will move the world.  CCFestoon"},
+	test{0x325e00cd2fe819f9, "If the enemy is within range, then so are you."},
+	test{0x88c6600ce58ae4c6, "It's well we cannot hear the screams/That we create in others' dreams."},
+	test{0x28c4a3f3b769e078, "You remind me of a TV show, but that's all right: I watch it anyway."},
+	test{0xa698a34c9d9f1dca, "C is as portable as Stonehedge!!"},
+	test{0xf6c1e2a8c26c5cfc, "Even if I could be Shakespeare, I think I should still choose to be Faraday. - A. Huxley"},
+	test{0xd402559dfe9b70c, "The fugacity of a constituent in a mixture of gases at a given temperature is proportional to its mole fraction.  Lewis-Randall Rule"},
+	test{0xdb6efff26aa94946, "How can you write a big system without C++?  -Paul Glick"},
+}
+
+var tab = MakeTable(ISO)
+
+func TestGolden(t *testing.T) {
+	for i := 0; i < len(golden); i++ {
+		g := golden[i]
+		c := New(tab)
+		io.WriteString(c, g.in)
+		s := c.Sum64()
+		if s != g.out {
+			t.Errorf("crc64(%s) = 0x%x want 0x%x", g.in, s, g.out)
+			t.FailNow()
+		}
+	}
+}
+
+func BenchmarkCrc64KB(b *testing.B) {
+	b.StopTimer()
+	data := make([]uint8, 1024)
+	for i := 0; i < 1024; i++ {
+		data[i] = uint8(i)
+	}
+	c := New(tab)
+	b.StartTimer()
+
+	for i := 0; i < b.N; i++ {
+		c.Write(data)
+	}
+}
diff --git a/src/pkg/hash/hash.go b/src/pkg/hash/hash.go
index f5c08d3602..56ac259db1 100644
--- a/src/pkg/hash/hash.go
+++ b/src/pkg/hash/hash.go
@@ -28,3 +28,9 @@ type Hash32 interface {
 	Hash
 	Sum32() uint32
 }
+
+// Hash64 is the common interface implemented by all 64-bit hash functions.
+type Hash64 interface {
+	Hash
+	Sum64() uint64
+}
