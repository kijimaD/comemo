commit 858bd05e2d4421018ee886c54299564727a0fc2e
Author: Joel Sing <jsing@google.com>
Date:   Thu Aug 16 00:44:20 2012 +1000

    net: implement netbsd sockoptip
    
    Provide sockoptip for NetBSD, based on sockoptip for OpenBSD.
    
    R=golang-dev, rsc, mikioh.mikioh, minux.ma
    CC=golang-dev
    https://golang.org/cl/6308053
---
 src/pkg/net/sockoptip_netbsd.go | 79 +++++++++++++++++++++++++++++++++--------
 1 file changed, 65 insertions(+), 14 deletions(-)

diff --git a/src/pkg/net/sockoptip_netbsd.go b/src/pkg/net/sockoptip_netbsd.go
index 446d92aa34..ace99b0c0f 100644
--- a/src/pkg/net/sockoptip_netbsd.go
+++ b/src/pkg/net/sockoptip_netbsd.go
@@ -1,4 +1,4 @@
-// Copyright 2012 The Go Authors.  All rights reserved.
+// Copyright 2011 The Go Authors.  All rights reserved.
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
@@ -6,34 +6,85 @@
 
 package net
 
-import "syscall"
+import (
+	"os"
+	"syscall"
+)
 
 func ipv4MulticastInterface(fd *netFD) (*Interface, error) {
-	// TODO: Implement this
-	return nil, syscall.EAFNOSUPPORT
+	if err := fd.incref(false); err != nil {
+		return nil, err
+	}
+	defer fd.decref()
+	a, err := syscall.GetsockoptInet4Addr(fd.sysfd, syscall.IPPROTO_IP, syscall.IP_MULTICAST_IF)
+	if err != nil {
+		return nil, os.NewSyscallError("getsockopt", err)
+	}
+	return ipv4AddrToInterface(IPv4(a[0], a[1], a[2], a[3]))
 }
 
 func setIPv4MulticastInterface(fd *netFD, ifi *Interface) error {
-	// TODO: Implement this
-	return syscall.EAFNOSUPPORT
+	ip, err := interfaceToIPv4Addr(ifi)
+	if err != nil {
+		return os.NewSyscallError("setsockopt", err)
+	}
+	var x [4]byte
+	copy(x[:], ip.To4())
+	if err := fd.incref(false); err != nil {
+		return err
+	}
+	defer fd.decref()
+	err = syscall.SetsockoptInet4Addr(fd.sysfd, syscall.IPPROTO_IP, syscall.IP_MULTICAST_IF, x)
+	if err != nil {
+		return os.NewSyscallError("setsockopt", err)
+	}
+	return nil
 }
 
 func ipv4MulticastLoopback(fd *netFD) (bool, error) {
-	// TODO: Implement this
-	return false, syscall.EAFNOSUPPORT
+	if err := fd.incref(false); err != nil {
+		return false, err
+	}
+	defer fd.decref()
+	v, err := syscall.GetsockoptByte(fd.sysfd, syscall.IPPROTO_IP, syscall.IP_MULTICAST_LOOP)
+	if err != nil {
+		return false, os.NewSyscallError("getsockopt", err)
+	}
+	return v == 1, nil
 }
 
 func setIPv4MulticastLoopback(fd *netFD, v bool) error {
-	// TODO: Implement this
-	return syscall.EAFNOSUPPORT
+	if err := fd.incref(false); err != nil {
+		return err
+	}
+	defer fd.decref()
+	err := syscall.SetsockoptByte(fd.sysfd, syscall.IPPROTO_IP, syscall.IP_MULTICAST_LOOP, byte(boolint(v)))
+	if err != nil {
+		return os.NewSyscallError("setsockopt", err)
+	}
+	return nil
 }
 
 func ipv4ReceiveInterface(fd *netFD) (bool, error) {
-	// TODO: Implement this
-	return false, syscall.EAFNOSUPPORT
+	if err := fd.incref(false); err != nil {
+		return false, err
+	}
+	defer fd.decref()
+	v, err := syscall.GetsockoptInt(fd.sysfd, syscall.IPPROTO_IP, syscall.IP_RECVIF)
+	if err != nil {
+		return false, os.NewSyscallError("getsockopt", err)
+	}
+	return v == 1, nil
 }
 
 func setIPv4ReceiveInterface(fd *netFD, v bool) error {
-	// TODO: Implement this
-	return syscall.EAFNOSUPPORT
+	if err := fd.incref(false); err != nil {
+		return err
+	}
+	defer fd.decref()
+	err := syscall.SetsockoptInt(fd.sysfd, syscall.IPPROTO_IP, syscall.IP_RECVIF, boolint(v))
+	if err != nil {
+		return os.NewSyscallError("setsockopt", err)
+	}
+	return nil
 }
