commit cf531372b24c926db21e7eeac6e8066f0c604368
Author: Filippo Valsorda <filippo@golang.org>
Date:   Tue Nov 5 14:07:21 2024 +0100

    crypto/internal/fips/drbg: add CAST and service indicator
    
    For #69536
    
    Change-Id: If216a7537013bd9bbe90026ffe983a6bf50029c8
    Reviewed-on: https://go-review.googlesource.com/c/go/+/625435
    Reviewed-by: Daniel McCarney <daniel@binaryparadox.net>
    Auto-Submit: Filippo Valsorda <filippo@golang.org>
    Reviewed-by: Roland Shoemaker <roland@golang.org>
    Reviewed-by: Dmitri Shuralyov <dmitshur@google.com>
    LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>
---
 src/crypto/internal/fips/cast.go               |  2 +-
 src/crypto/internal/fips/cast_external_test.go |  1 +
 src/crypto/internal/fips/drbg/cast.go          | 57 ++++++++++++++++++++++++++
 src/crypto/internal/fips/drbg/ctrdrbg.go       |  5 +++
 4 files changed, 64 insertions(+), 1 deletion(-)

diff --git a/src/crypto/internal/fips/cast.go b/src/crypto/internal/fips/cast.go
index 3e73f27dae..7ab86e6d7d 100644
--- a/src/crypto/internal/fips/cast.go
+++ b/src/crypto/internal/fips/cast.go
@@ -33,7 +33,7 @@ var testingOnlyCASTHook func(string)
 //
 // The name must not contain commas, colons, hashes, or equal signs.
 //
-// When calling this function, also add the calling package to cast_test.go.
+// When calling this function, also add the calling package to cast_external_test.go.
 func CAST(name string, f func() error) {
 	if strings.ContainsAny(name, ",#=:") {
 		panic("fips: invalid self-test name: " + name)
diff --git a/src/crypto/internal/fips/cast_external_test.go b/src/crypto/internal/fips/cast_external_test.go
index 62c0a60686..e836a852db 100644
--- a/src/crypto/internal/fips/cast_external_test.go
+++ b/src/crypto/internal/fips/cast_external_test.go
@@ -12,6 +12,7 @@ import (
 	"testing"
 
 	// Import packages that define CASTs to test them.
+	_ "crypto/internal/fips/drbg"
 	_ "crypto/internal/fips/hmac"
 	_ "crypto/internal/fips/sha256"
 	_ "crypto/internal/fips/sha3"
diff --git a/src/crypto/internal/fips/drbg/cast.go b/src/crypto/internal/fips/drbg/cast.go
new file mode 100644
index 0000000000..bf21a04ade
--- /dev/null
+++ b/src/crypto/internal/fips/drbg/cast.go
@@ -0,0 +1,57 @@
+// Copyright 2024 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package drbg
+
+import (
+	"bytes"
+	"crypto/internal/fips"
+	"errors"
+)
+
+func init() {
+	// Per IG 10.3.A, Resolution 7: "A KAT of a DRBG may be performed by:
+	// Instantiate with known data, Reseed with other known data, Generate and
+	// then compare the result to a pre-computed value."
+	fips.CAST("CTR_DRBG", func() error {
+		entropy := &[SeedSize]byte{
+			0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
+			0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10,
+			0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
+			0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20,
+			0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
+			0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30,
+		}
+		reseedEntropy := &[SeedSize]byte{
+			0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38,
+			0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40,
+			0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
+			0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50,
+			0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
+			0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60,
+		}
+		additionalInput := &[SeedSize]byte{
+			0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
+			0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70,
+			0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
+			0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80,
+			0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88,
+			0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90,
+		}
+		want := []byte{
+			0x6e, 0x6e, 0x47, 0x9d, 0x24, 0xf8, 0x6a, 0x3b,
+			0x77, 0x87, 0xa8, 0xf8, 0x18, 0x6d, 0x98, 0x5a,
+			0x53, 0xbe, 0xbe, 0xed, 0xde, 0xab, 0x92, 0x28,
+			0xf0, 0xf4, 0xac, 0x6e, 0x10, 0xbf, 0x01, 0x93,
+		}
+		c := NewCounter(entropy)
+		c.Reseed(reseedEntropy, additionalInput)
+		got := make([]byte, len(want))
+		c.Generate(got, additionalInput)
+		if !bytes.Equal(got, want) {
+			return errors.New("unexpected result")
+		}
+		return nil
+	})
+}
diff --git a/src/crypto/internal/fips/drbg/ctrdrbg.go b/src/crypto/internal/fips/drbg/ctrdrbg.go
index 4e2d7aa13b..8bda46e656 100644
--- a/src/crypto/internal/fips/drbg/ctrdrbg.go
+++ b/src/crypto/internal/fips/drbg/ctrdrbg.go
@@ -5,6 +5,7 @@
 package drbg
 
 import (
+	"crypto/internal/fips"
 	"crypto/internal/fips/aes"
 	"crypto/internal/fips/subtle"
 	"internal/byteorder"
@@ -36,6 +37,7 @@ const (
 
 func NewCounter(entropy *[SeedSize]byte) *Counter {
 	// CTR_DRBG_Instantiate_algorithm, per Section 10.2.1.3.1.
+	fips.RecordApproved()
 
 	K := make([]byte, keySize)
 	V := make([]byte, aes.BlockSize)
@@ -85,6 +87,8 @@ func increment(v *[aes.BlockSize]byte) {
 
 func (c *Counter) Reseed(entropy, additionalInput *[SeedSize]byte) {
 	// CTR_DRBG_Reseed_algorithm, per Section 10.2.1.4.1.
+	fips.RecordApproved()
+
 	var seed [SeedSize]byte
 	subtle.XORBytes(seed[:], entropy[:], additionalInput[:])
 	c.update(&seed)
@@ -94,6 +98,7 @@ func (c *Counter) Reseed(entropy, additionalInput *[SeedSize]byte) {
 // Generate produces at most maxRequestSize bytes of random data in out.
 func (c *Counter) Generate(out []byte, additionalInput *[SeedSize]byte) (reseedRequired bool) {
 	// CTR_DRBG_Generate_algorithm, per Section 10.2.1.5.1.
+	fips.RecordApproved()
 
 	if len(out) > maxRequestSize {
 		panic("crypto/drbg: internal error: request size exceeds maximum")
