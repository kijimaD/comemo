commit 5a6a830c1ceafd551937876f11590fd60aea1799
Author: Bryan C. Mills <bcmills@google.com>
Date:   Tue Apr 5 14:34:47 2022 -0400

    cmd/vendor: undo stray edits from CL 384262
    
    cmd/internal/moddeps is currently failing on the longtest builders
    because vendored third-party dependencies were accidentally edited as
    part of CL 384262 (a global cleanup of the standard library).
    
    Updates #51082
    
    Change-Id: I6f79c8f1177420a51128ce42d6c14fa5dcc4bd7b
    Reviewed-on: https://go-review.googlesource.com/c/go/+/398455
    Trust: Bryan Mills <bcmills@google.com>
    Run-TryBot: Bryan Mills <bcmills@google.com>
    TryBot-Result: Gopher Robot <gobot@golang.org>
    Reviewed-by: Ian Lance Taylor <iant@golang.org>
---
 src/cmd/vendor/golang.org/x/arch/x86/x86asm/gnu.go  | 2 +-
 src/cmd/vendor/golang.org/x/arch/x86/x86asm/inst.go | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/cmd/vendor/golang.org/x/arch/x86/x86asm/gnu.go b/src/cmd/vendor/golang.org/x/arch/x86/x86asm/gnu.go
index 8eba1fd0cf..75cff72b03 100644
--- a/src/cmd/vendor/golang.org/x/arch/x86/x86asm/gnu.go
+++ b/src/cmd/vendor/golang.org/x/arch/x86/x86asm/gnu.go
@@ -10,7 +10,7 @@ import (
 )
 
 // GNUSyntax returns the GNU assembler syntax for the instruction, as defined by GNU binutils.
-// This general form is often called “AT&T syntax” as a reference to AT&T System V Unix.
+// This general form is often called ``AT&T syntax'' as a reference to AT&T System V Unix.
 func GNUSyntax(inst Inst, pc uint64, symname SymLookup) string {
 	// Rewrite instruction to mimic GNU peculiarities.
 	// Note that inst has been passed by value and contains
diff --git a/src/cmd/vendor/golang.org/x/arch/x86/x86asm/inst.go b/src/cmd/vendor/golang.org/x/arch/x86/x86asm/inst.go
index e98f1a8418..4632b5064f 100644
--- a/src/cmd/vendor/golang.org/x/arch/x86/x86asm/inst.go
+++ b/src/cmd/vendor/golang.org/x/arch/x86/x86asm/inst.go
@@ -144,7 +144,7 @@ type Arg interface {
 // the interface value instead of requiring an allocation.
 
 // A Reg is a single register.
-// The zero Reg value has no name but indicates “no register.”
+// The zero Reg value has no name but indicates ``no register.''
 type Reg uint8
 
 const (
