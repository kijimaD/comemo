commit cfafa9f4cb1a20c4a9490d5bd8e561e650562f54
Author: Russ Cox <rsc@golang.org>
Date:   Fri Oct 17 13:10:42 2014 -0400

    cmd/gc: don't use static init to initialize small structs, fields
    
    Better to avoid the memory loads and just use immediate constants.
    This especially applies to zeroing, which was being done by
    copying zeros from elsewhere in the binary, even if the value
    was going to be completely initialized with non-zero values.
    The zero writes were optimized away but the zero loads from
    the data segment were not.
    
    LGTM=r
    R=r, bradfitz, dvyukov
    CC=golang-codereviews
    https://golang.org/cl/152700045
---
 src/cmd/gc/sinit.c | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/src/cmd/gc/sinit.c b/src/cmd/gc/sinit.c
index 2a811513c9..8ad7ae7abb 100644
--- a/src/cmd/gc/sinit.c
+++ b/src/cmd/gc/sinit.c
@@ -1067,7 +1067,7 @@ anylit(int ctxt, Node *n, Node *var, NodeList **init)
 		if(t->etype != TSTRUCT)
 			fatal("anylit: not struct");
 
-		if(simplename(var)) {
+		if(simplename(var) && count(n->list) > 4) {
 
 			if(ctxt == 0) {
 				// lay out static data
@@ -1090,7 +1090,7 @@ anylit(int ctxt, Node *n, Node *var, NodeList **init)
 		}
 
 		// initialize of not completely specified
-		if(count(n->list) < structcount(t)) {
+		if(simplename(var) || count(n->list) < structcount(t)) {
 			a = nod(OAS, var, N);
 			typecheck(&a, Etop);
 			walkexpr(&a, init);
@@ -1107,7 +1107,7 @@ anylit(int ctxt, Node *n, Node *var, NodeList **init)
 			break;
 		}
 
-		if(simplename(var)) {
+		if(simplename(var) && count(n->list) > 4) {
 
 			if(ctxt == 0) {
 				// lay out static data
@@ -1130,7 +1130,7 @@ anylit(int ctxt, Node *n, Node *var, NodeList **init)
 		}
 
 		// initialize of not completely specified
-		if(count(n->list) < t->bound) {
+		if(simplename(var) || count(n->list) < t->bound) {
 			a = nod(OAS, var, N);
 			typecheck(&a, Etop);
 			walkexpr(&a, init);
