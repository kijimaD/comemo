commit 4dfbb89f585aac690a1c41dbb1604a567bc46f63
Author: “kinggo” <1510613524@qq.com>
Date:   Mon Dec 20 05:54:27 2021 +0000

    runtime: typo fix cyle -> cycle
    
    Change-Id: I213fa8aa9b9c2537a189677394ddd30c62312518
    GitHub-Last-Rev: ccafdee9440b06232cdfca83099bf0aeff62a4c0
    GitHub-Pull-Request: golang/go#50268
    Reviewed-on: https://go-review.googlesource.com/c/go/+/373336
    Reviewed-by: Ian Lance Taylor <iant@golang.org>
    Run-TryBot: Ian Lance Taylor <iant@golang.org>
    TryBot-Result: Gopher Robot <gobot@golang.org>
    Reviewed-by: Zhuo Meng <mzh@golangcn.org>
---
 src/runtime/mgcmark.go  | 2 +-
 src/runtime/mgcsweep.go | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/runtime/mgcmark.go b/src/runtime/mgcmark.go
index a15c62cc49..68acfd4d49 100644
--- a/src/runtime/mgcmark.go
+++ b/src/runtime/mgcmark.go
@@ -1561,7 +1561,7 @@ func gcmarknewobject(span *mspan, obj, size, scanSize uintptr) {
 	if !goexperiment.PacerRedesign {
 		// The old pacer counts newly allocated memory toward
 		// heapScanWork because heapScan is continuously updated
-		// throughout the GC cyle with newly allocated memory. However,
+		// throughout the GC cycle with newly allocated memory. However,
 		// these objects are never actually scanned, so we need
 		// to account for them in heapScanWork here, "faking" their work.
 		// Otherwise the pacer will think it's always behind, potentially
diff --git a/src/runtime/mgcsweep.go b/src/runtime/mgcsweep.go
index fdbec30cf1..a46f4ec2c6 100644
--- a/src/runtime/mgcsweep.go
+++ b/src/runtime/mgcsweep.go
@@ -393,7 +393,7 @@ func sweepone() uintptr {
 		// The scavenger is signaled by the last sweeper because once
 		// sweeping is done, we will definitely have useful work for
 		// the scavenger to do, since the scavenger only runs over the
-		// heap once per GC cyle. This update is not done during sweep
+		// heap once per GC cycle. This update is not done during sweep
 		// termination because in some cases there may be a long delay
 		// between sweep done and sweep termination (e.g. not enough
 		// allocations to trigger a GC) which would be nice to fill in
