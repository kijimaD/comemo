commit fb12ad063e5a4f5f56ecdf9f37758024105da60c
Author: Robert Griesemer <gri@golang.org>
Date:   Fri Oct 30 13:19:04 2009 -0700

    fix build
    
    R=agl
    CC=rsc
    http://go/go-review/1016008
---
 src/cmd/cgo/out.go | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

diff --git a/src/cmd/cgo/out.go b/src/cmd/cgo/out.go
index 97de7e301d..2ae56fc289 100644
--- a/src/cmd/cgo/out.go
+++ b/src/cmd/cgo/out.go
@@ -37,7 +37,7 @@ func (p *Prog) writeOutput(srcfile string) {
 	// Write Go output: Go input with rewrites of C.xxx to _C_xxx.
 	fmt.Fprintf(fgo1, "// Created by cgo - DO NOT EDIT\n");
 	fmt.Fprintf(fgo1, "//line %s:1\n", srcfile);
-	printer.Fprint(fgo1, p.AST, 0, 8, nil);
+	printer.Fprint(fgo1, p.AST);
 
 	// Write second Go output: definitions of _C_xxx.
 	// In a separate file so that the import of "unsafe" does not
@@ -49,7 +49,7 @@ func (p *Prog) writeOutput(srcfile string) {
 
 	for name, def := range p.Typedef {
 		fmt.Fprintf(fgo2, "type %s ", name);
-		printer.Fprint(fgo2, def, 0, 8, nil);
+		printer.Fprint(fgo2, def);
 		fmt.Fprintf(fgo2, "\n");
 	}
 	fmt.Fprintf(fgo2, "type _C_void [0]byte\n");
@@ -64,7 +64,7 @@ func (p *Prog) writeOutput(srcfile string) {
 	for name, def := range p.Vardef {
 		fmt.Fprintf(fc, "#pragma dynld %sÂ·_C_%s %s \"%s/%s_%s.so\"\n", p.Package, name, name, pkgroot, p.PackagePath, base);
 		fmt.Fprintf(fgo2, "var _C_%s ", name);
-		printer.Fprint(fgo2, &ast.StarExpr{X: def.Go}, 0, 8, nil);
+		printer.Fprint(fgo2, &ast.StarExpr{X: def.Go});
 		fmt.Fprintf(fgo2, "\n");
 	}
 	fmt.Fprintf(fc, "\n");
@@ -75,7 +75,7 @@ func (p *Prog) writeOutput(srcfile string) {
 			Name: &ast.Ident{Value: "_C_"+name},
 			Type: def.Go,
 		};
-		printer.Fprint(fgo2, d, 0, 8, nil);
+		printer.Fprint(fgo2, d);
 		fmt.Fprintf(fgo2, "\n");
 
 		if name == "CString" || name == "GoString" {
