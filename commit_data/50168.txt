commit 9062a5298bdee895dd9f4e9c07ffd3e261c0ac13
Author: Robert Griesemer <gri@golang.org>
Date:   Wed Oct 6 09:03:34 2021 -0700

    cmd/compile/internal/types2: break cycles in invalid types
    
    This CL reverses the change in CL 284254 (which was ported
    to types2) which originated in CL 240901 to address a crash
    in a test created by a fuzzer (that crash appears to be
    avoided in other ways, now).
    
    This exposed another bug in typeset.go where we don't look
    for the underlying type when testing if a type is an interface
    or not. Fixed that as well.
    
    Adjusted a test case that now doesn't report an error anymore
    (which is good).
    
    Fixes #48819.
    
    Change-Id: I611d68e053d6b8a2f7176d0cd5a44da2df28ad21
    Reviewed-on: https://go-review.googlesource.com/c/go/+/354329
    Trust: Robert Griesemer <gri@golang.org>
    Reviewed-by: Robert Findley <rfindley@google.com>
---
 src/cmd/compile/internal/types2/decl.go                   |  1 +
 .../internal/types2/testdata/fixedbugs/issue41124.go2     |  2 +-
 .../internal/types2/testdata/fixedbugs/issue48819.src     | 15 +++++++++++++++
 src/cmd/compile/internal/types2/typeset.go                |  2 +-
 4 files changed, 18 insertions(+), 2 deletions(-)

diff --git a/src/cmd/compile/internal/types2/decl.go b/src/cmd/compile/internal/types2/decl.go
index 7ae980e5c9..5fa1ca889f 100644
--- a/src/cmd/compile/internal/types2/decl.go
+++ b/src/cmd/compile/internal/types2/decl.go
@@ -358,6 +358,7 @@ func (check *Checker) validType(typ Type, path []Object) typeInfo {
 				if tn == t.obj {
 					check.cycleError(path[i:])
 					t.info = invalid
+					t.underlying = Typ[Invalid]
 					return t.info
 				}
 			}
diff --git a/src/cmd/compile/internal/types2/testdata/fixedbugs/issue41124.go2 b/src/cmd/compile/internal/types2/testdata/fixedbugs/issue41124.go2
index cef24bd237..7f55ba85a6 100644
--- a/src/cmd/compile/internal/types2/testdata/fixedbugs/issue41124.go2
+++ b/src/cmd/compile/internal/types2/testdata/fixedbugs/issue41124.go2
@@ -12,7 +12,7 @@ type Nat /* ERROR cycle */ interface {
 
 type Zero struct{}
 type Succ struct{
-	Nat // ERROR interface contains type constraints
+	Nat // Nat contains type constraints but is invalid, so no error
 }
 
 // Struct tests.
diff --git a/src/cmd/compile/internal/types2/testdata/fixedbugs/issue48819.src b/src/cmd/compile/internal/types2/testdata/fixedbugs/issue48819.src
new file mode 100644
index 0000000000..9262110ea0
--- /dev/null
+++ b/src/cmd/compile/internal/types2/testdata/fixedbugs/issue48819.src
@@ -0,0 +1,15 @@
+// Copyright 2021 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package p
+
+import "unsafe"
+
+type T /* ERROR illegal cycle in declaration of T */ struct {
+	T
+}
+
+func _(t T) {
+	_ = unsafe.Sizeof(t) // should not go into infinite recursion here
+}
diff --git a/src/cmd/compile/internal/types2/typeset.go b/src/cmd/compile/internal/types2/typeset.go
index 37030b2ca1..8eb43a27e5 100644
--- a/src/cmd/compile/internal/types2/typeset.go
+++ b/src/cmd/compile/internal/types2/typeset.go
@@ -294,7 +294,7 @@ func computeInterfaceTypeSet(check *Checker, pos syntax.Pos, ityp *Interface) *_
 			// Union parsing reports a (delayed) error, so we can ignore this entry.
 			continue
 		default:
-			if typ == Typ[Invalid] {
+			if u == Typ[Invalid] {
 				continue
 			}
 			if check != nil && !check.allowVersion(check.pkg, 1, 18) {
