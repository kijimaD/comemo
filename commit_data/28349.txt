commit 23a59ba17cbfeb5380845f309f88165b2e38930b
Author: Ian Lance Taylor <iant@golang.org>
Date:   Tue May 17 18:16:47 2016 -0700

    runtime: deflake TestSignalExitStatus
    
    The signal might get delivered to a different thread, and that thread
    might not run again before the currently running thread returns and
    exits. Sleep to give the other thread time to pick up the signal and
    crash.
    
    Not tested for all cases, but, optimistically:
    Fixes #14063.
    
    Change-Id: Iff58669ac6185ad91cce85e0e86f17497a3659fd
    Reviewed-on: https://go-review.googlesource.com/23203
    Run-TryBot: Ian Lance Taylor <iant@golang.org>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Mikio Hara <mikioh.mikioh@gmail.com>
---
 src/runtime/crash_unix_test.go          |  4 ----
 src/runtime/testdata/testprog/signal.go | 14 +++++++++++++-
 2 files changed, 13 insertions(+), 5 deletions(-)

diff --git a/src/runtime/crash_unix_test.go b/src/runtime/crash_unix_test.go
index 771b303f6e..0a79661f1e 100644
--- a/src/runtime/crash_unix_test.go
+++ b/src/runtime/crash_unix_test.go
@@ -149,10 +149,6 @@ func loop(i int, c chan bool) {
 
 func TestSignalExitStatus(t *testing.T) {
 	testenv.MustHaveGoBuild(t)
-	switch runtime.GOOS {
-	case "netbsd", "solaris":
-		t.Skipf("skipping on %s; see https://golang.org/issue/14063", runtime.GOOS)
-	}
 	exe, err := buildTestProg(t, "testprog")
 	if err != nil {
 		t.Fatal(err)
diff --git a/src/runtime/testdata/testprog/signal.go b/src/runtime/testdata/testprog/signal.go
index 7926908828..2ccbada57b 100644
--- a/src/runtime/testdata/testprog/signal.go
+++ b/src/runtime/testdata/testprog/signal.go
@@ -6,7 +6,10 @@
 
 package main
 
-import "syscall"
+import (
+	"syscall"
+	"time"
+)
 
 func init() {
 	register("SignalExitStatus", SignalExitStatus)
@@ -14,4 +17,13 @@ func init() {
 
 func SignalExitStatus() {
 	syscall.Kill(syscall.Getpid(), syscall.SIGTERM)
+
+	// Should die immediately, but we've seen flakiness on various
+	// systems (see issue 14063). It's possible that the signal is
+	// being delivered to a different thread and we are returning
+	// and exiting before that thread runs again. Give the program
+	// a little while to die to make sure we pick up the signal
+	// before we return and exit the program. The time here
+	// shouldn't matter--we'll never really sleep this long.
+	time.Sleep(time.Second)
 }
