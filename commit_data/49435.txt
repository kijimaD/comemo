commit 687f2acf6ae00226e8304e15f156f36e19ac971f
Author: Keith Randall <khr@golang.org>
Date:   Tue Aug 17 10:40:44 2021 -0700

    cmd/compile: only use dictionaries for conversions to type parameters
    
    Conversions to regular concrete types should not be rewritten during
    stenciling.
    
    Fixes #47740
    
    Change-Id: I2b45e22f962dcd2e18bd6cc876ebc0f850860822
    Reviewed-on: https://go-review.googlesource.com/c/go/+/342989
    Trust: Keith Randall <khr@golang.org>
    Trust: Dan Scales <danscales@google.com>
    Trust: Cuong Manh Le <cuong.manhle.vn@gmail.com>
    Run-TryBot: Keith Randall <khr@golang.org>
    TryBot-Result: Go Bot <gobot@golang.org>
    Reviewed-by: Dan Scales <danscales@google.com>
---
 src/cmd/compile/internal/noder/stencil.go |  3 +++
 test/typeparam/issue47740.go              | 37 +++++++++++++++++++++++++++++++
 test/typeparam/issue47740.out             |  2 ++
 test/typeparam/issue47740b.go             | 23 +++++++++++++++++++
 4 files changed, 65 insertions(+)

diff --git a/src/cmd/compile/internal/noder/stencil.go b/src/cmd/compile/internal/noder/stencil.go
index 4ac37c362c..19b8f63c4b 100644
--- a/src/cmd/compile/internal/noder/stencil.go
+++ b/src/cmd/compile/internal/noder/stencil.go
@@ -1118,6 +1118,9 @@ func (subst *subster) node(n ir.Node) ir.Node {
 				m = convertUsingDictionary(subst.info, subst.info.dictParam, m.Pos(), m.(*ir.ConvExpr).X, x, m.Type(), x.X.Type())
 			}
 		case ir.ODOTTYPE, ir.ODOTTYPE2:
+			if !x.Type().HasTParam() {
+				break
+			}
 			dt := m.(*ir.TypeAssertExpr)
 			var rt ir.Node
 			if dt.Type().IsInterface() || dt.X.Type().IsEmptyInterface() {
diff --git a/test/typeparam/issue47740.go b/test/typeparam/issue47740.go
new file mode 100644
index 0000000000..a8c6839de3
--- /dev/null
+++ b/test/typeparam/issue47740.go
@@ -0,0 +1,37 @@
+// run -gcflags=-G=3
+
+// Copyright 2021 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package main
+
+import "fmt"
+
+type Exp[Ty any] interface {
+	Eval() Ty
+}
+
+type Lit[Ty any] Ty
+
+func (lit Lit[Ty]) Eval() Ty       { return Ty(lit) }
+func (lit Lit[Ty]) String() string { return fmt.Sprintf("(lit %v)", Ty(lit)) }
+
+type Eq[Ty any] struct {
+	a Exp[Ty]
+	b Exp[Ty]
+}
+
+func (e Eq[Ty]) String() string {
+	return fmt.Sprintf("(eq %v %v)", e.a, e.b)
+}
+
+var (
+	e0 = Eq[int]{Lit[int](128), Lit[int](64)}
+	e1 = Eq[bool]{Lit[bool](true), Lit[bool](true)}
+)
+
+func main() {
+	fmt.Printf("%v\n", e0)
+	fmt.Printf("%v\n", e1)
+}
diff --git a/test/typeparam/issue47740.out b/test/typeparam/issue47740.out
new file mode 100644
index 0000000000..f23c310f66
--- /dev/null
+++ b/test/typeparam/issue47740.out
@@ -0,0 +1,2 @@
+(eq (lit 128) (lit 64))
+(eq (lit true) (lit true))
diff --git a/test/typeparam/issue47740b.go b/test/typeparam/issue47740b.go
new file mode 100644
index 0000000000..2a91d35eb4
--- /dev/null
+++ b/test/typeparam/issue47740b.go
@@ -0,0 +1,23 @@
+// run -gcflags=-G=3
+
+// Copyright 2021 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package main
+
+import "reflect"
+
+type S[T any] struct {
+	a interface{}
+}
+
+func (e S[T]) M() {
+	v := reflect.ValueOf(e.a)
+	_, _ = v.Interface().(int)
+}
+
+func main() {
+	e := S[int]{0}
+	e.M()
+}
