commit 0b7df65550afbeeb32d10aebb1a0873bfbc2c310
Author: Mikio Hara <mikioh.mikioh@gmail.com>
Date:   Fri Oct 27 18:12:47 2017 +0900

    net/mail: capitalize acronym on helper function name
    
    Change-Id: Ibae06adcc69cae34cb0a14d990a0949b77fa772c
    Reviewed-on: https://go-review.googlesource.com/73930
    Run-TryBot: Mikio Hara <mikioh.mikioh@gmail.com>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Ian Lance Taylor <iant@golang.org>
---
 src/net/mail/message.go | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

diff --git a/src/net/mail/message.go b/src/net/mail/message.go
index 9539c22697..23431823c0 100644
--- a/src/net/mail/message.go
+++ b/src/net/mail/message.go
@@ -253,7 +253,7 @@ func (p *addrParser) parseAddressList() ([]*Address, error) {
 		}
 		list = append(list, addrs...)
 
-		if !p.skipCfws() {
+		if !p.skipCFWS() {
 			return nil, errors.New("mail: misformatted parenthetical comment")
 		}
 		if p.empty() {
@@ -271,7 +271,7 @@ func (p *addrParser) parseSingleAddress() (*Address, error) {
 	if err != nil {
 		return nil, err
 	}
-	if !p.skipCfws() {
+	if !p.skipCFWS() {
 		return nil, errors.New("mail: misformatted parenthetical comment")
 	}
 	if !p.empty() {
@@ -350,7 +350,7 @@ func (p *addrParser) consumeGroupList() ([]*Address, error) {
 	// handle empty group.
 	p.skipSpace()
 	if p.consume(';') {
-		p.skipCfws()
+		p.skipCFWS()
 		return group, nil
 	}
 
@@ -363,11 +363,11 @@ func (p *addrParser) consumeGroupList() ([]*Address, error) {
 		}
 		group = append(group, addrs...)
 
-		if !p.skipCfws() {
+		if !p.skipCFWS() {
 			return nil, errors.New("mail: misformatted parenthetical comment")
 		}
 		if p.consume(';') {
-			p.skipCfws()
+			p.skipCFWS()
 			break
 		}
 		if !p.consume(',') {
@@ -595,8 +595,8 @@ func (p *addrParser) len() int {
 	return len(p.s)
 }
 
-// skipCfws skips CFWS as defined in RFC5322.
-func (p *addrParser) skipCfws() bool {
+// skipCFWS skips CFWS as defined in RFC5322.
+func (p *addrParser) skipCFWS() bool {
 	p.skipSpace()
 
 	for {
