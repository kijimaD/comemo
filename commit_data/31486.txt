commit d9270ecb3ad35079df62ad85b3a5e52e46e4a1c0
Author: Josh Bleecher Snyder <josharian@gmail.com>
Date:   Wed Feb 22 21:19:29 2017 -0800

    cmd/compile: evaluate zero-sized values converted to interfaces
    
    CL 35562 substituted zerobase for the pointer for
    interfaces containing zero-sized values.
    However, it failed to evaluate the zero-sized value
    expression for side-effects. Fix that.
    
    The other similar interface value optimizations
    are not affected, because they all actually use the
    value one way or another.
    
    Fixes #19246
    
    Change-Id: I1168a99561477c63c29751d5cd04cf81b5ea509d
    Reviewed-on: https://go-review.googlesource.com/37395
    Run-TryBot: Josh Bleecher Snyder <josharian@gmail.com>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: David Chase <drchase@google.com>
    Reviewed-by: Cherry Zhang <cherryyz@google.com>
---
 src/cmd/compile/internal/gc/walk.go |  1 +
 test/fixedbugs/issue19246.go        | 28 ++++++++++++++++++++++++++++
 2 files changed, 29 insertions(+)

diff --git a/src/cmd/compile/internal/gc/walk.go b/src/cmd/compile/internal/gc/walk.go
index 0eb38109bd..066b4ef2f6 100644
--- a/src/cmd/compile/internal/gc/walk.go
+++ b/src/cmd/compile/internal/gc/walk.go
@@ -882,6 +882,7 @@ opswitch:
 		switch {
 		case n.Left.Type.Size() == 0:
 			// n.Left is zero-sized. Use zerobase.
+			cheapexpr(n.Left, init) // Evaluate n.Left for side-effects. See issue 19246.
 			value = zerobase
 		case n.Left.Type.IsBoolean() || (n.Left.Type.Size() == 1 && n.Left.Type.IsInteger()):
 			// n.Left is a bool/byte. Use staticbytes[n.Left].
diff --git a/test/fixedbugs/issue19246.go b/test/fixedbugs/issue19246.go
new file mode 100644
index 0000000000..3ece2a1cbe
--- /dev/null
+++ b/test/fixedbugs/issue19246.go
@@ -0,0 +1,28 @@
+// run
+
+// Copyright 2017 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// Issue 19246: Failed to evaluate some zero-sized values
+// when converting them to interfaces.
+
+package main
+
+import "os"
+
+type B struct{}
+
+//go:noinline
+func f(i interface{}) {}
+
+func main() {
+	defer func() {
+		if recover() == nil {
+			println("expected nil pointer dereference panic")
+			os.Exit(1)
+		}
+	}()
+	var b *B
+	f(*b)
+}
