commit 5918101d673d601c26f5de880b1fa2c6564fb745
Author: Austin Clements <austin@google.com>
Date:   Thu Mar 20 12:16:17 2025 -0400

    testing: detect a stopped timer in B.Loop
    
    Currently, if the user stops the timer in a B.Loop benchmark loop, the
    benchmark will run until it hits the timeout and fails.
    
    Fix this by detecting that the timer is stopped and failing the
    benchmark right away. We avoid making the fast path more expensive for
    this check by "poisoning" the B.Loop iteration counter when the timer
    is stopped so that it falls back to the slow path, which can check the
    timer.
    
    This causes b to escape from B.Loop, which is totally harmless because
    it was already definitely heap-allocated. But it causes the
    test/inline_testingbloop.go errorcheck test to fail. I don't think the
    escape messages actually mattered to that test, they just had to be
    matched. To fix this, we drop the debug level to -m=1, since -m=2
    prints a lot of extra information for escaping parameters that we
    don't want to deal with, and change one error check to allow b to
    escape.
    
    Fixes #72971.
    
    Change-Id: I7d4abbb1ec1e096685514536f91ba0d581cca6b7
    Reviewed-on: https://go-review.googlesource.com/c/go/+/659657
    Auto-Submit: Austin Clements <austin@google.com>
    Reviewed-by: Junyang Shao <shaojunyang@google.com>
    LUCI-TryBot-Result: Go LUCI <golang-scoped@luci-project-accounts.iam.gserviceaccount.com>

 .../internal/inline/interleaved/interleaved.go     |  2 +-
 src/cmd/compile/internal/test/inl_test.go          |  3 ++
 src/testing/benchmark.go                           | 60 ++++++++++++++++++----
 src/testing/loop_test.go                           | 23 +++++++++
 test/inline_testingbloop.go                        |  4 +-
 5 files changed, 80 insertions(+), 12 deletions(-)
