commit 9389a86b01bfe86053350fe587b411ab3a0a5bed
Author: Austin Clements <austin@google.com>
Date:   Wed Jun 3 15:10:53 2015 -0400

    cmd/compile: use obj.ARET instead of ppc64.ARETURN
    
    obj.ARET is the portable return mnemonic. ppc64.ARETURN is a legacy
    alias.
    
    This was done with
        sed -i s/ppc64\.ARETURN/obj.ARET/ cmd/compile/**/*.go
        sed -i s/ARETURN/obj.ARET/ cmd/internal/obj/ppc64/obj9.go
    
    Change-Id: I4d8e83ff411cee764774a40ef4c7c34dcbca4e43
    Reviewed-on: https://go-review.googlesource.com/10673
    Reviewed-by: Russ Cox <rsc@golang.org>
    Reviewed-by: Minux Ma <minux@golang.org>
---
 src/cmd/compile/internal/ppc64/peep.go |  2 +-
 src/cmd/compile/internal/ppc64/prog.go |  2 +-
 src/cmd/internal/obj/ppc64/obj9.go     | 12 ++++++------
 3 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/src/cmd/compile/internal/ppc64/peep.go b/src/cmd/compile/internal/ppc64/peep.go
index 8c08b6ff6b..9c3f1edb30 100644
--- a/src/cmd/compile/internal/ppc64/peep.go
+++ b/src/cmd/compile/internal/ppc64/peep.go
@@ -870,7 +870,7 @@ func copyu(p *obj.Prog, v *obj.Addr, s *obj.Addr) int {
 		}
 		return 0
 
-	case ppc64.ARETURN: /* funny */
+	case obj.ARET: /* funny */
 		if s != nil {
 			return 0
 		}
diff --git a/src/cmd/compile/internal/ppc64/prog.go b/src/cmd/compile/internal/ppc64/prog.go
index c7e182769d..328b2ce0cf 100644
--- a/src/cmd/compile/internal/ppc64/prog.go
+++ b/src/cmd/compile/internal/ppc64/prog.go
@@ -99,7 +99,7 @@ var progtable = [ppc64.ALAST]obj.ProgInfo{
 	ppc64.ABLT:    {gc.Cjmp, 0, 0, 0},
 	ppc64.ABGT:    {gc.Cjmp, 0, 0, 0},
 	ppc64.ABLE:    {gc.Cjmp, 0, 0, 0},
-	ppc64.ARETURN: {gc.Break, 0, 0, 0},
+	obj.ARET:      {gc.Break, 0, 0, 0},
 	obj.ADUFFZERO: {gc.Call, 0, 0, 0},
 	obj.ADUFFCOPY: {gc.Call, 0, 0, 0},
 }
diff --git a/src/cmd/internal/obj/ppc64/obj9.go b/src/cmd/internal/obj/ppc64/obj9.go
index 6d7db4245e..1eddc6fc6c 100644
--- a/src/cmd/internal/obj/ppc64/obj9.go
+++ b/src/cmd/internal/obj/ppc64/obj9.go
@@ -44,7 +44,7 @@ func progedit(ctxt *obj.Link, p *obj.Prog) {
 	switch p.As {
 	case ABR,
 		ABL,
-		ARETURN,
+		obj.ARET,
 		obj.ADUFFZERO,
 		obj.ADUFFCOPY:
 		if p.To.Sym != nil {
@@ -283,7 +283,7 @@ func preprocess(ctxt *obj.Link, cursym *obj.LSym) {
 			p.Mark |= FCMP | FLOAT
 			continue
 
-		case ARETURN:
+		case obj.ARET:
 			q = p
 			if p.Link != nil {
 				p.Link.Mark |= LABEL
@@ -467,7 +467,7 @@ func preprocess(ctxt *obj.Link, cursym *obj.LSym) {
 				p2.Pcond = q
 			}
 
-		case ARETURN:
+		case obj.ARET:
 			if p.From.Type == obj.TYPE_CONST {
 				ctxt.Diag("using BECOME (%v) is not supported!", p)
 				break
@@ -860,7 +860,7 @@ loop:
 				continue
 			}
 
-			if a == ABR || a == ARETURN || a == ARFI || a == ARFCI || a == ARFID || a == AHRFID {
+			if a == ABR || a == obj.ARET || a == ARFI || a == ARFCI || a == ARFID || a == AHRFID {
 				goto copy
 			}
 			if q.Pcond == nil || (q.Pcond.Mark&FOLL != 0) {
@@ -888,7 +888,7 @@ loop:
 
 				(*last).Link = r
 				*last = r
-				if a == ABR || a == ARETURN || a == ARFI || a == ARFCI || a == ARFID || a == AHRFID {
+				if a == ABR || a == obj.ARET || a == ARFI || a == ARFCI || a == ARFID || a == AHRFID {
 					return
 				}
 				r.As = int16(b)
@@ -917,7 +917,7 @@ loop:
 	p.Mark |= FOLL
 	(*last).Link = p
 	*last = p
-	if a == ABR || a == ARETURN || a == ARFI || a == ARFCI || a == ARFID || a == AHRFID {
+	if a == ABR || a == obj.ARET || a == ARFI || a == ARFCI || a == ARFID || a == AHRFID {
 		if p.Mark&NOSCHED != 0 {
 			p = p.Link
 			goto loop
