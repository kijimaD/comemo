commit 9bc0eaf60e7d04d5c3fd24ad7e89fdae6615be82
Author: Alex Brainman <alex.brainman@gmail.com>
Date:   Tue Jun 4 12:50:40 2013 +1000

    runtime: update defs_windows_*.h files
    
    New version of cmd/cgo from
    https://golang.org/cl/9574043/
    is used to regenerate these.
    
    R=golang-dev, iant
    CC=golang-dev
    https://golang.org/cl/9679046
---
 src/pkg/runtime/defs_windows_386.h   | 170 ++++++++++++++---------------
 src/pkg/runtime/defs_windows_amd64.h | 200 ++++++++++++++++++-----------------
 2 files changed, 189 insertions(+), 181 deletions(-)

diff --git a/src/pkg/runtime/defs_windows_386.h b/src/pkg/runtime/defs_windows_386.h
index e64a82fafe..3377db99e6 100644
--- a/src/pkg/runtime/defs_windows_386.h
+++ b/src/pkg/runtime/defs_windows_386.h
@@ -1,99 +1,103 @@
-// c:\Users\Hector\Code\go\bin\godefs.exe defs.c
+// Created by cgo -cdefs - DO NOT EDIT
+// cgo -cdefs defs_windows.go
 
-// MACHINE GENERATED - DO NOT EDIT.
 
-// Constants
 enum {
-	PROT_NONE = 0,
-	PROT_READ = 0x1,
-	PROT_WRITE = 0x2,
-	PROT_EXEC = 0x4,
-	MAP_ANON = 0x1,
-	MAP_PRIVATE = 0x2,
-	DUPLICATE_SAME_ACCESS = 0x2,
-	THREAD_PRIORITY_HIGHEST = 0x2,
-	SIGINT = 0x2,
-	CTRL_C_EVENT = 0,
-	CTRL_BREAK_EVENT = 0x1,
-	CONTEXT_CONTROL = 0x10001,
-	CONTEXT_FULL = 0x10007,
-	EXCEPTION_ACCESS_VIOLATION = 0xc0000005,
-	EXCEPTION_BREAKPOINT = 0x80000003,
-	EXCEPTION_FLT_DENORMAL_OPERAND = 0xc000008d,
-	EXCEPTION_FLT_DIVIDE_BY_ZERO = 0xc000008e,
-	EXCEPTION_FLT_INEXACT_RESULT = 0xc000008f,
-	EXCEPTION_FLT_OVERFLOW = 0xc0000091,
-	EXCEPTION_FLT_UNDERFLOW = 0xc0000093,
-	EXCEPTION_INT_DIVIDE_BY_ZERO = 0xc0000094,
-	EXCEPTION_INT_OVERFLOW = 0xc0000095,
+	PROT_NONE	= 0,
+	PROT_READ	= 1,
+	PROT_WRITE	= 2,
+	PROT_EXEC	= 4,
+
+	MAP_ANON	= 1,
+	MAP_PRIVATE	= 2,
+
+	DUPLICATE_SAME_ACCESS	= 0x2,
+	THREAD_PRIORITY_HIGHEST	= 0x2,
+
+	SIGINT			= 0x2,
+	CTRL_C_EVENT		= 0x0,
+	CTRL_BREAK_EVENT	= 0x1,
+
+	CONTEXT_CONTROL	= 0x10001,
+	CONTEXT_FULL	= 0x10007,
+
+	EXCEPTION_ACCESS_VIOLATION	= 0xc0000005,
+	EXCEPTION_BREAKPOINT		= 0x80000003,
+	EXCEPTION_FLT_DENORMAL_OPERAND	= 0xc000008d,
+	EXCEPTION_FLT_DIVIDE_BY_ZERO	= 0xc000008e,
+	EXCEPTION_FLT_INEXACT_RESULT	= 0xc000008f,
+	EXCEPTION_FLT_OVERFLOW		= 0xc0000091,
+	EXCEPTION_FLT_UNDERFLOW		= 0xc0000093,
+	EXCEPTION_INT_DIVIDE_BY_ZERO	= 0xc0000094,
+	EXCEPTION_INT_OVERFLOW		= 0xc0000095,
 };
 
-// Types
+typedef struct SystemInfo SystemInfo;
+typedef struct ExceptionRecord ExceptionRecord;
+typedef struct FloatingSaveArea FloatingSaveArea;
+typedef struct M128a M128a;
+typedef struct Context Context;
+
 #pragma pack on
 
-typedef struct SystemInfo SystemInfo;
 struct SystemInfo {
-	byte Pad_godefs_0[4];
-	uint32 dwPageSize;
-	void *lpMinimumApplicationAddress;
-	void *lpMaximumApplicationAddress;
-	uint32 dwActiveProcessorMask;
-	uint32 dwNumberOfProcessors;
-	uint32 dwProcessorType;
-	uint32 dwAllocationGranularity;
-	uint16 wProcessorLevel;
-	uint16 wProcessorRevision;
+	byte	anon0[4];
+	uint32	dwPageSize;
+	byte	*lpMinimumApplicationAddress;
+	byte	*lpMaximumApplicationAddress;
+	uint32	dwActiveProcessorMask;
+	uint32	dwNumberOfProcessors;
+	uint32	dwProcessorType;
+	uint32	dwAllocationGranularity;
+	uint16	wProcessorLevel;
+	uint16	wProcessorRevision;
 };
-
-typedef struct ExceptionRecord ExceptionRecord;
 struct ExceptionRecord {
-	uint32 ExceptionCode;
-	uint32 ExceptionFlags;
-	ExceptionRecord *ExceptionRecord;
-	void *ExceptionAddress;
-	uint32 NumberParameters;
-	uint32 ExceptionInformation[15];
+	uint32	ExceptionCode;
+	uint32	ExceptionFlags;
+	ExceptionRecord	*ExceptionRecord;
+	byte	*ExceptionAddress;
+	uint32	NumberParameters;
+	uint32	ExceptionInformation[15];
 };
-
-typedef struct FloatingSaveArea FloatingSaveArea;
 struct FloatingSaveArea {
-	uint32 ControlWord;
-	uint32 StatusWord;
-	uint32 TagWord;
-	uint32 ErrorOffset;
-	uint32 ErrorSelector;
-	uint32 DataOffset;
-	uint32 DataSelector;
-	uint8 RegisterArea[80];
-	uint32 Cr0NpxState;
+	uint32	ControlWord;
+	uint32	StatusWord;
+	uint32	TagWord;
+	uint32	ErrorOffset;
+	uint32	ErrorSelector;
+	uint32	DataOffset;
+	uint32	DataSelector;
+	uint8	RegisterArea[80];
+	uint32	Cr0NpxState;
 };
-
-typedef struct Context Context;
 struct Context {
-	uint32 ContextFlags;
-	uint32 Dr0;
-	uint32 Dr1;
-	uint32 Dr2;
-	uint32 Dr3;
-	uint32 Dr6;
-	uint32 Dr7;
-	FloatingSaveArea FloatSave;
-	uint32 SegGs;
-	uint32 SegFs;
-	uint32 SegEs;
-	uint32 SegDs;
-	uint32 Edi;
-	uint32 Esi;
-	uint32 Ebx;
-	uint32 Edx;
-	uint32 Ecx;
-	uint32 Eax;
-	uint32 Ebp;
-	uint32 Eip;
-	uint32 SegCs;
-	uint32 EFlags;
-	uint32 Esp;
-	uint32 SegSs;
-	uint8 ExtendedRegisters[512];
+	uint32	ContextFlags;
+	uint32	Dr0;
+	uint32	Dr1;
+	uint32	Dr2;
+	uint32	Dr3;
+	uint32	Dr6;
+	uint32	Dr7;
+	FloatingSaveArea	FloatSave;
+	uint32	SegGs;
+	uint32	SegFs;
+	uint32	SegEs;
+	uint32	SegDs;
+	uint32	Edi;
+	uint32	Esi;
+	uint32	Ebx;
+	uint32	Edx;
+	uint32	Ecx;
+	uint32	Eax;
+	uint32	Ebp;
+	uint32	Eip;
+	uint32	SegCs;
+	uint32	EFlags;
+	uint32	Esp;
+	uint32	SegSs;
+	uint8	ExtendedRegisters[512];
 };
+
+
 #pragma pack off
diff --git a/src/pkg/runtime/defs_windows_amd64.h b/src/pkg/runtime/defs_windows_amd64.h
index da4c19d90b..c0a99ea78c 100644
--- a/src/pkg/runtime/defs_windows_amd64.h
+++ b/src/pkg/runtime/defs_windows_amd64.h
@@ -1,114 +1,118 @@
-// c:\go\bin\godefs.exe -f -m64 defs.c
+// Created by cgo -cdefs - DO NOT EDIT
+// cgo -cdefs defs_windows.go
 
-// MACHINE GENERATED - DO NOT EDIT.
 
-// Constants
 enum {
-	PROT_NONE = 0,
-	PROT_READ = 0x1,
-	PROT_WRITE = 0x2,
-	PROT_EXEC = 0x4,
-	MAP_ANON = 0x1,
-	MAP_PRIVATE = 0x2,
-	DUPLICATE_SAME_ACCESS = 0x2,
-	THREAD_PRIORITY_HIGHEST = 0x2,
-	SIGINT = 0x2,
-	CTRL_C_EVENT = 0,
-	CTRL_BREAK_EVENT = 0x1,
-	CONTEXT_CONTROL = 0x100001,
-	CONTEXT_FULL = 0x10000b,
-	EXCEPTION_ACCESS_VIOLATION = 0xc0000005,
-	EXCEPTION_BREAKPOINT = 0x80000003,
-	EXCEPTION_FLT_DENORMAL_OPERAND = 0xc000008d,
-	EXCEPTION_FLT_DIVIDE_BY_ZERO = 0xc000008e,
-	EXCEPTION_FLT_INEXACT_RESULT = 0xc000008f,
-	EXCEPTION_FLT_OVERFLOW = 0xc0000091,
-	EXCEPTION_FLT_UNDERFLOW = 0xc0000093,
-	EXCEPTION_INT_DIVIDE_BY_ZERO = 0xc0000094,
-	EXCEPTION_INT_OVERFLOW = 0xc0000095,
+	PROT_NONE	= 0,
+	PROT_READ	= 1,
+	PROT_WRITE	= 2,
+	PROT_EXEC	= 4,
+
+	MAP_ANON	= 1,
+	MAP_PRIVATE	= 2,
+
+	DUPLICATE_SAME_ACCESS	= 0x2,
+	THREAD_PRIORITY_HIGHEST	= 0x2,
+
+	SIGINT			= 0x2,
+	CTRL_C_EVENT		= 0x0,
+	CTRL_BREAK_EVENT	= 0x1,
+
+	CONTEXT_CONTROL	= 0x100001,
+	CONTEXT_FULL	= 0x10000b,
+
+	EXCEPTION_ACCESS_VIOLATION	= 0xc0000005,
+	EXCEPTION_BREAKPOINT		= 0x80000003,
+	EXCEPTION_FLT_DENORMAL_OPERAND	= 0xc000008d,
+	EXCEPTION_FLT_DIVIDE_BY_ZERO	= 0xc000008e,
+	EXCEPTION_FLT_INEXACT_RESULT	= 0xc000008f,
+	EXCEPTION_FLT_OVERFLOW		= 0xc0000091,
+	EXCEPTION_FLT_UNDERFLOW		= 0xc0000093,
+	EXCEPTION_INT_DIVIDE_BY_ZERO	= 0xc0000094,
+	EXCEPTION_INT_OVERFLOW		= 0xc0000095,
 };
 
-// Types
+typedef struct SystemInfo SystemInfo;
+typedef struct ExceptionRecord ExceptionRecord;
+typedef struct FloatingSaveArea FloatingSaveArea;
+typedef struct M128a M128a;
+typedef struct Context Context;
+
 #pragma pack on
 
-typedef struct SystemInfo SystemInfo;
 struct SystemInfo {
-	byte Pad_godefs_0[4];
-	uint32 dwPageSize;
-	void *lpMinimumApplicationAddress;
-	void *lpMaximumApplicationAddress;
-	uint64 dwActiveProcessorMask;
-	uint32 dwNumberOfProcessors;
-	uint32 dwProcessorType;
-	uint32 dwAllocationGranularity;
-	uint16 wProcessorLevel;
-	uint16 wProcessorRevision;
+	byte	anon0[4];
+	uint32	dwPageSize;
+	byte	*lpMinimumApplicationAddress;
+	byte	*lpMaximumApplicationAddress;
+	uint64	dwActiveProcessorMask;
+	uint32	dwNumberOfProcessors;
+	uint32	dwProcessorType;
+	uint32	dwAllocationGranularity;
+	uint16	wProcessorLevel;
+	uint16	wProcessorRevision;
 };
-
-typedef struct ExceptionRecord ExceptionRecord;
 struct ExceptionRecord {
-	uint32 ExceptionCode;
-	uint32 ExceptionFlags;
-	ExceptionRecord *ExceptionRecord;
-	void *ExceptionAddress;
-	uint32 NumberParameters;
-	byte pad_godefs_0[4];
-	uint64 ExceptionInformation[15];
+	uint32	ExceptionCode;
+	uint32	ExceptionFlags;
+	ExceptionRecord	*ExceptionRecord;
+	byte	*ExceptionAddress;
+	uint32	NumberParameters;
+	byte	Pad_cgo_0[4];
+	uint64	ExceptionInformation[15];
 };
-
-typedef struct M128a M128a;
 struct M128a {
-	uint64 Low;
-	int64 High;
+	uint64	Low;
+	int64	High;
 };
-
-typedef struct Context Context;
 struct Context {
-	uint64 P1Home;
-	uint64 P2Home;
-	uint64 P3Home;
-	uint64 P4Home;
-	uint64 P5Home;
-	uint64 P6Home;
-	uint32 ContextFlags;
-	uint32 MxCsr;
-	uint16 SegCs;
-	uint16 SegDs;
-	uint16 SegEs;
-	uint16 SegFs;
-	uint16 SegGs;
-	uint16 SegSs;
-	uint32 EFlags;
-	uint64 Dr0;
-	uint64 Dr1;
-	uint64 Dr2;
-	uint64 Dr3;
-	uint64 Dr6;
-	uint64 Dr7;
-	uint64 Rax;
-	uint64 Rcx;
-	uint64 Rdx;
-	uint64 Rbx;
-	uint64 Rsp;
-	uint64 Rbp;
-	uint64 Rsi;
-	uint64 Rdi;
-	uint64 R8;
-	uint64 R9;
-	uint64 R10;
-	uint64 R11;
-	uint64 R12;
-	uint64 R13;
-	uint64 R14;
-	uint64 R15;
-	uint64 Rip;
-	byte Pad_godefs_0[512];
-	M128a VectorRegister[26];
-	uint64 VectorControl;
-	uint64 DebugControl;
-	uint64 LastBranchToRip;
-	uint64 LastBranchFromRip;
-	uint64 LastExceptionToRip;
-	uint64 LastExceptionFromRip;
+	uint64	P1Home;
+	uint64	P2Home;
+	uint64	P3Home;
+	uint64	P4Home;
+	uint64	P5Home;
+	uint64	P6Home;
+	uint32	ContextFlags;
+	uint32	MxCsr;
+	uint16	SegCs;
+	uint16	SegDs;
+	uint16	SegEs;
+	uint16	SegFs;
+	uint16	SegGs;
+	uint16	SegSs;
+	uint32	EFlags;
+	uint64	Dr0;
+	uint64	Dr1;
+	uint64	Dr2;
+	uint64	Dr3;
+	uint64	Dr6;
+	uint64	Dr7;
+	uint64	Rax;
+	uint64	Rcx;
+	uint64	Rdx;
+	uint64	Rbx;
+	uint64	Rsp;
+	uint64	Rbp;
+	uint64	Rsi;
+	uint64	Rdi;
+	uint64	R8;
+	uint64	R9;
+	uint64	R10;
+	uint64	R11;
+	uint64	R12;
+	uint64	R13;
+	uint64	R14;
+	uint64	R15;
+	uint64	Rip;
+	byte	anon0[512];
+	M128a	VectorRegister[26];
+	uint64	VectorControl;
+	uint64	DebugControl;
+	uint64	LastBranchToRip;
+	uint64	LastBranchFromRip;
+	uint64	LastExceptionToRip;
+	uint64	LastExceptionFromRip;
 };
+
+
 #pragma pack off
