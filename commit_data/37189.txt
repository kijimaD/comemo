commit a67c481f765c08b8a2e0432e3c94cd282ee4a6d6
Author: Josh Bleecher Snyder <josharian@gmail.com>
Date:   Mon Jul 9 12:53:25 2018 -0700

    cmd/link/internal/sym: add sizeof tests
    
    CL 121916 showed that sym.Symbol matters for linker performance.
    Prevent accidental regression.
    
    Change-Id: I5fd998c91fdeef9e721bc3f6e30f775b81103e95
    Reviewed-on: https://go-review.googlesource.com/122716
    Run-TryBot: Josh Bleecher Snyder <josharian@gmail.com>
    Reviewed-by: Brad Fitzpatrick <bradfitz@golang.org>
---
 src/cmd/link/internal/sym/sizeof_test.go | 39 ++++++++++++++++++++++++++++++++
 1 file changed, 39 insertions(+)

diff --git a/src/cmd/link/internal/sym/sizeof_test.go b/src/cmd/link/internal/sym/sizeof_test.go
new file mode 100644
index 0000000000..2f2dfc79ed
--- /dev/null
+++ b/src/cmd/link/internal/sym/sizeof_test.go
@@ -0,0 +1,39 @@
+// Copyright 2018 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// +build !nacl
+
+package sym
+
+import (
+	"reflect"
+	"testing"
+	"unsafe"
+)
+
+// Assert that the size of important structures do not change unexpectedly.
+
+func TestSizeof(t *testing.T) {
+	const nbit = unsafe.Sizeof(uintptr(0)) * 8
+	const _64bit = nbit == 64
+
+	var tests = []struct {
+		val    interface{} // type as a value
+		_32bit uintptr     // size on 32bit platforms
+		_64bit uintptr     // size on 64bit platforms
+	}{
+		{Symbol{}, 132, 216},
+	}
+
+	for _, tt := range tests {
+		want := tt._32bit
+		if _64bit {
+			want = tt._64bit
+		}
+		got := reflect.TypeOf(tt.val).Size()
+		if want != got {
+			t.Errorf("%d bit unsafe.Sizeof(%T) = %d, want %d", nbit, tt.val, got, want)
+		}
+	}
+}
