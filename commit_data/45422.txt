commit a972e8ccb9824d97f029bde5409527fb27e85989
Author: subham sarkar <sarkar.subhams2@gmail.com>
Date:   Thu Oct 15 00:24:14 2020 +0530

    all: fix quoting for compress/bzip2 and time's godoc
    
    The existing usage of grave accent (`) and apostrophe (')
    at some places made godoc to ignore them and show it as it is.
    So, use both of the characters twice (consecutively) so that
    godoc can convert it to {left,right} double quotation mark.
    
    Fixes #41958
    
    Change-Id: I64fd9b5fa34f416ad595009d09f5482e10bd8b4f
    Reviewed-on: https://go-review.googlesource.com/c/go/+/262397
    Reviewed-by: Russ Cox <rsc@golang.org>
    Trust: Alberto Donizetti <alb.donizetti@gmail.com>
---
 src/compress/bzip2/bzip2.go | 8 ++++----
 src/time/tick.go            | 2 +-
 2 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/src/compress/bzip2/bzip2.go b/src/compress/bzip2/bzip2.go
index c40129b982..0d8c286c16 100644
--- a/src/compress/bzip2/bzip2.go
+++ b/src/compress/bzip2/bzip2.go
@@ -29,8 +29,8 @@ type reader struct {
 	setupDone    bool // true if we have parsed the bzip2 header.
 	blockSize    int  // blockSize in bytes, i.e. 900 * 1000.
 	eof          bool
-	c            [256]uint // the `C' array for the inverse BWT.
-	tt           []uint32  // mirrors the `tt' array in the bzip2 source and contains the P array in the upper 24 bits.
+	c            [256]uint // the ``C'' array for the inverse BWT.
+	tt           []uint32  // mirrors the ``tt'' array in the bzip2 source and contains the P array in the upper 24 bits.
 	tPos         uint32    // Index of the next output byte in tt.
 
 	preRLE      []uint32 // contains the RLE data still to be processed.
@@ -447,11 +447,11 @@ func (bz2 *reader) readBlock() (err error) {
 
 // inverseBWT implements the inverse Burrows-Wheeler transform as described in
 // http://www.hpl.hp.com/techreports/Compaq-DEC/SRC-RR-124.pdf, section 4.2.
-// In that document, origPtr is called `I' and c is the `C' array after the
+// In that document, origPtr is called ``I'' and c is the ``C'' array after the
 // first pass over the data. It's an argument here because we merge the first
 // pass with the Huffman decoding.
 //
-// This also implements the `single array' method from the bzip2 source code
+// This also implements the ``single array'' method from the bzip2 source code
 // which leaves the output, still shuffled, in the bottom 8 bits of tt with the
 // index of the next byte in the top 24-bits. The index of the first byte is
 // returned.
diff --git a/src/time/tick.go b/src/time/tick.go
index 152d5a706b..2311faa15f 100644
--- a/src/time/tick.go
+++ b/src/time/tick.go
@@ -6,7 +6,7 @@ package time
 
 import "errors"
 
-// A Ticker holds a channel that delivers `ticks' of a clock
+// A Ticker holds a channel that delivers ``ticks'' of a clock
 // at intervals.
 type Ticker struct {
 	C <-chan Time // The channel on which the ticks are delivered.
