commit f54f780d2f4ed47da4bed87c37f7219df1b9879b
Author: Daniel Martí <mvdan@mvdan.cc>
Date:   Mon Jan 29 11:14:31 2018 +0000

    cmd/vet: unexported interface{} fields on %s are ok
    
    For example, the following program is valid:
    
            type T struct {
                    f interface{}
            }
    
            func main() {
                    fmt.Printf("%s", T{"foo"}) // prints {foo}
            }
    
    Since the field is of type interface{}, we might have any value in it.
    For example, if we had T{3}, fmt would complain. However, not knowing
    what the type under the interface is, we must be conservative.
    
    However, as shown in #17798, we should issue an error if the field's
    type is statically known to implement the error or fmt.Stringer
    interfaces. In those cases, the user likely wanted the %s format to call
    those methods. Keep the vet error in those cases.
    
    While at it, add more field type test cases, such as custom error types,
    and interfaces that extend the error interface.
    
    Fixes #23563.
    
    Change-Id: I063885955555917c59da000391b603f0d6dce432
    Reviewed-on: https://go-review.googlesource.com/90516
    Run-TryBot: Daniel Martí <mvdan@mvdan.cc>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
    Reviewed-by: Russ Cox <rsc@golang.org>
    Reviewed-by: Ian Lance Taylor <iant@golang.org>

 src/cmd/vet/testdata/print.go | 34 +++++++++++++++++++++++++++++++---
 src/cmd/vet/types.go          | 14 +++++++++++++-
 2 files changed, 44 insertions(+), 4 deletions(-)
