commit 165e7523fb627cc7f6be56b7318fea34d73d7167
Author: Brad Fitzpatrick <bradfitz@golang.org>
Date:   Tue Jan 16 22:57:44 2018 +0000

    sync: consistently use article "a" for RWMutex
    
    We used a mix of both before.
    
    I've never heard anybody say "an arr-double you mutex" when speaking.
    
    Fixes #23457
    
    Change-Id: I802b5eb2339f885ca9d24607eeda565763165298
    Reviewed-on: https://go-review.googlesource.com/87896
    Reviewed-by: Andrew Bonventre <andybons@golang.org>
---
 src/runtime/rwmutex.go | 2 +-
 src/sync/rwmutex.go    | 6 +++---
 2 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/src/runtime/rwmutex.go b/src/runtime/rwmutex.go
index 7eeb559adb..a6da4c979b 100644
--- a/src/runtime/rwmutex.go
+++ b/src/runtime/rwmutex.go
@@ -10,7 +10,7 @@ import (
 
 // This is a copy of sync/rwmutex.go rewritten to work in the runtime.
 
-// An rwmutex is a reader/writer mutual exclusion lock.
+// A rwmutex is a reader/writer mutual exclusion lock.
 // The lock can be held by an arbitrary number of readers or a single writer.
 // This is a variant of sync.RWMutex, for the runtime package.
 // Like mutex, rwmutex blocks the calling M.
diff --git a/src/sync/rwmutex.go b/src/sync/rwmutex.go
index cb2dfe1ad8..4e9e8197c1 100644
--- a/src/sync/rwmutex.go
+++ b/src/sync/rwmutex.go
@@ -13,11 +13,11 @@ import (
 // There is a modified copy of this file in runtime/rwmutex.go.
 // If you make any changes here, see if you should make them there.
 
-// An RWMutex is a reader/writer mutual exclusion lock.
+// A RWMutex is a reader/writer mutual exclusion lock.
 // The lock can be held by an arbitrary number of readers or a single writer.
 // The zero value for a RWMutex is an unlocked mutex.
 //
-// An RWMutex must not be copied after first use.
+// A RWMutex must not be copied after first use.
 //
 // If a goroutine holds a RWMutex for reading and another goroutine might
 // call Lock, no goroutine should expect to be able to acquire a read lock
@@ -108,7 +108,7 @@ func (rw *RWMutex) Lock() {
 // not locked for writing on entry to Unlock.
 //
 // As with Mutexes, a locked RWMutex is not associated with a particular
-// goroutine. One goroutine may RLock (Lock) an RWMutex and then
+// goroutine. One goroutine may RLock (Lock) a RWMutex and then
 // arrange for another goroutine to RUnlock (Unlock) it.
 func (rw *RWMutex) Unlock() {
 	if race.Enabled {
