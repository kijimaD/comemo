commit 733f835f307595366a87fd377ba60c5d23841982
Author: Dave Cheney <dave@cheney.net>
Date:   Wed Apr 27 19:34:17 2016 +1000

    cmd/compile/internal/gc: remove all uses of oconv(op, FmtSharp)
    
    Updates #15462
    
    Replace all use of oconv(op, FmtSharp) with fmt.Printf("%#v", op).
    This removes all the callers of oconv.
    
    Change-Id: Ic3bf22495147f8497c8bada01d681428e2405b0e
    Reviewed-on: https://go-review.googlesource.com/22530
    Reviewed-by: Brad Fitzpatrick <bradfitz@golang.org>
    Run-TryBot: Brad Fitzpatrick <bradfitz@golang.org>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
---
 src/cmd/compile/internal/gc/fmt.go    | 39 ++++++++++++++++++-----------------
 src/cmd/compile/internal/gc/pgen.go   |  2 +-
 src/cmd/compile/internal/gc/unsafe.go |  2 +-
 src/cmd/compile/internal/gc/walk.go   |  2 +-
 4 files changed, 23 insertions(+), 22 deletions(-)

diff --git a/src/cmd/compile/internal/gc/fmt.go b/src/cmd/compile/internal/gc/fmt.go
index 2c3afb0ecc..fea555200a 100644
--- a/src/cmd/compile/internal/gc/fmt.go
+++ b/src/cmd/compile/internal/gc/fmt.go
@@ -192,7 +192,14 @@ var goopnames = []string{
 	OXFALL:    "fallthrough",
 }
 
-// Fmt "%O":  Node opcodes
+func (o Op) String() string {
+	return oconv(o, 0)
+}
+
+func (o Op) GoString() string {
+	return oconv(o, FmtSharp)
+}
+
 func oconv(o Op, flag FmtFlag) string {
 	if (flag&FmtSharp != 0) || fmtmode != FDbg {
 		if o >= 0 && int(o) < len(goopnames) && goopnames[o] != "" {
@@ -453,10 +460,6 @@ func (e EType) String() string {
 	return Econv(e)
 }
 
-func (o Op) String() string {
-	return oconv(o, 0)
-}
-
 // Fmt "%S": syms
 func symfmt(s *Sym, flag FmtFlag) string {
 	if s.Pkg != nil && flag&FmtShort == 0 {
@@ -840,7 +843,7 @@ func stmtfmt(n *Node) string {
 			break
 		}
 
-		f += fmt.Sprintf("%v %v= %v", n.Left, oconv(Op(n.Etype), FmtSharp), n.Right)
+		f += fmt.Sprintf("%v %#v= %v", n.Left, Op(n.Etype), n.Right)
 
 	case OAS2:
 		if n.Colas && !complexinit {
@@ -918,7 +921,7 @@ func stmtfmt(n *Node) string {
 			break
 		}
 
-		f += oconv(n.Op, FmtSharp)
+		f += n.Op.GoString() // %#v
 		if simpleinit {
 			f += fmt.Sprintf(" %v;", n.Ninit.First())
 		}
@@ -941,9 +944,9 @@ func stmtfmt(n *Node) string {
 		OFALL,
 		OXFALL:
 		if n.Left != nil {
-			f += fmt.Sprintf("%v %v", oconv(n.Op, FmtSharp), n.Left)
+			f += fmt.Sprintf("%#v %v", n.Op, n.Left)
 		} else {
-			f += oconv(n.Op, FmtSharp)
+			f += n.Op.GoString() // %#v
 		}
 
 	case OEMPTY:
@@ -1337,7 +1340,7 @@ func exprfmt(n *Node, prec int) string {
 		return buf.String()
 
 	case OCOPY, OCOMPLEX:
-		return fmt.Sprintf("%v(%v, %v)", oconv(n.Op, FmtSharp), n.Left, n.Right)
+		return fmt.Sprintf("%#v(%v, %v)", n.Op, n.Left, n.Right)
 
 	case OCONV,
 		OCONVIFACE,
@@ -1369,12 +1372,12 @@ func exprfmt(n *Node, prec int) string {
 		OPRINT,
 		OPRINTN:
 		if n.Left != nil {
-			return fmt.Sprintf("%v(%v)", oconv(n.Op, FmtSharp), n.Left)
+			return fmt.Sprintf("%#v(%v)", n.Op, n.Left)
 		}
 		if n.Isddd {
-			return fmt.Sprintf("%v(%v...)", oconv(n.Op, FmtSharp), Hconv(n.List, FmtComma))
+			return fmt.Sprintf("%#v(%v...)", n.Op, Hconv(n.List, FmtComma))
 		}
-		return fmt.Sprintf("%v(%v)", oconv(n.Op, FmtSharp), Hconv(n.List, FmtComma))
+		return fmt.Sprintf("%#v(%v)", n.Op, Hconv(n.List, FmtComma))
 
 	case OCALL, OCALLFUNC, OCALLINTER, OCALLMETH, OGETG:
 		var f string
@@ -1406,11 +1409,9 @@ func exprfmt(n *Node, prec int) string {
 		OIND,
 		ONOT,
 		ORECV:
-		var f string
+		f := n.Op.GoString() // %#v
 		if n.Left.Op == n.Op {
-			f += fmt.Sprintf("%v ", oconv(n.Op, FmtSharp))
-		} else {
-			f += oconv(n.Op, FmtSharp)
+			f += " "
 		}
 		f += exprfmt(n.Left, nprec+1)
 		return f
@@ -1439,7 +1440,7 @@ func exprfmt(n *Node, prec int) string {
 		var f string
 		f += exprfmt(n.Left, nprec)
 
-		f += fmt.Sprintf(" %v ", oconv(n.Op, FmtSharp))
+		f += fmt.Sprintf(" %#v ", n.Op)
 		f += exprfmt(n.Right, nprec+1)
 		return f
 
@@ -1460,7 +1461,7 @@ func exprfmt(n *Node, prec int) string {
 		var f string
 		f += exprfmt(n.Left, nprec)
 		// TODO(marvin): Fix Node.EType type union.
-		f += fmt.Sprintf(" %v ", oconv(Op(n.Etype), FmtSharp))
+		f += fmt.Sprintf(" %#v ", Op(n.Etype))
 		f += exprfmt(n.Right, nprec+1)
 		return f
 
diff --git a/src/cmd/compile/internal/gc/pgen.go b/src/cmd/compile/internal/gc/pgen.go
index 9de65cdf1b..da2e6752a2 100644
--- a/src/cmd/compile/internal/gc/pgen.go
+++ b/src/cmd/compile/internal/gc/pgen.go
@@ -90,7 +90,7 @@ func gvardefx(n *Node, as obj.As) {
 		Fatalf("gvardef nil")
 	}
 	if n.Op != ONAME {
-		Yyerror("gvardef %v; %v", oconv(n.Op, FmtSharp), n)
+		Yyerror("gvardef %#v; %v", n.Op, n)
 		return
 	}
 
diff --git a/src/cmd/compile/internal/gc/unsafe.go b/src/cmd/compile/internal/gc/unsafe.go
index 5935cd98ff..fc6ed1fe92 100644
--- a/src/cmd/compile/internal/gc/unsafe.go
+++ b/src/cmd/compile/internal/gc/unsafe.go
@@ -82,7 +82,7 @@ func unsafenmagic(nn *Node) *Node {
 				v += r1.Xoffset
 			default:
 				Dump("unsafenmagic", r)
-				Fatalf("impossible %v node after dot insertion", oconv(r1.Op, FmtSharp))
+				Fatalf("impossible %#v node after dot insertion", r1.Op)
 				goto bad
 			}
 		}
diff --git a/src/cmd/compile/internal/gc/walk.go b/src/cmd/compile/internal/gc/walk.go
index 6ec06453ef..3ba4ba4f4a 100644
--- a/src/cmd/compile/internal/gc/walk.go
+++ b/src/cmd/compile/internal/gc/walk.go
@@ -2285,7 +2285,7 @@ func reorder3(all []*Node) []*Node {
 
 		switch l.Op {
 		default:
-			Fatalf("reorder3 unexpected lvalue %v", oconv(l.Op, FmtSharp))
+			Fatalf("reorder3 unexpected lvalue %#v", l.Op)
 
 		case ONAME:
 			break
