commit 5a401001417151649363a4b2fbd658f3f1957cba
Author: Keith Randall <khr@golang.org>
Date:   Fri Aug 13 09:30:19 2021 -0700

    cmd/compile: fix dictionaries for nested closures
    
    Capturing dictionary closure variables is ok.
    
    Fixes #47684
    
    Change-Id: I049c87117915e0c5a172b9665bfac2f91064b2d4
    Reviewed-on: https://go-review.googlesource.com/c/go/+/342050
    Trust: Keith Randall <khr@golang.org>
    Trust: Dan Scales <danscales@google.com>
    Run-TryBot: Keith Randall <khr@golang.org>
    TryBot-Result: Go Bot <gobot@golang.org>
    Reviewed-by: Dan Scales <danscales@google.com>
---
 src/cmd/compile/internal/ir/name.go |  4 +++-
 test/typeparam/issue47684.go        | 19 +++++++++++++++++++
 test/typeparam/issue47684b.go       | 23 +++++++++++++++++++++++
 test/typeparam/issue47684c.go       | 19 +++++++++++++++++++
 4 files changed, 64 insertions(+), 1 deletion(-)

diff --git a/src/cmd/compile/internal/ir/name.go b/src/cmd/compile/internal/ir/name.go
index a2eec05013..48fe572124 100644
--- a/src/cmd/compile/internal/ir/name.go
+++ b/src/cmd/compile/internal/ir/name.go
@@ -404,7 +404,9 @@ func CaptureName(pos src.XPos, fn *Func, n *Name) *Name {
 	if n.Op() != ONAME || n.Curfn == nil {
 		return n // okay to use directly
 	}
-	if n.IsClosureVar() {
+	if n.IsClosureVar() && n.Sym().Name != ".dict" {
+		// Note: capturing dictionary closure variables is ok. This makes
+		// sure the generated code is correctly optimized.
 		base.FatalfAt(pos, "misuse of CaptureName on closure variable: %v", n)
 	}
 
diff --git a/test/typeparam/issue47684.go b/test/typeparam/issue47684.go
new file mode 100644
index 0000000000..2798b78ca8
--- /dev/null
+++ b/test/typeparam/issue47684.go
@@ -0,0 +1,19 @@
+// run -gcflags=-G=3
+
+// Copyright 2021 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package main
+
+func f[G any]() int {
+	return func() int {
+		return func() int {
+			return 0
+		}()
+	}()
+}
+
+func main() {
+	f[int]()
+}
diff --git a/test/typeparam/issue47684b.go b/test/typeparam/issue47684b.go
new file mode 100644
index 0000000000..c43ef8d169
--- /dev/null
+++ b/test/typeparam/issue47684b.go
@@ -0,0 +1,23 @@
+// run -gcflags=-G=3
+
+// Copyright 2021 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package main
+
+func f[G any]() interface{} {
+	return func() interface{} {
+		return func() interface{} {
+			var x G
+			return x
+		}()
+	}()
+}
+
+func main() {
+	x := f[int]()
+	if v, ok := x.(int); !ok || v != 0 {
+		panic("bad")
+	}
+}
diff --git a/test/typeparam/issue47684c.go b/test/typeparam/issue47684c.go
new file mode 100644
index 0000000000..32f1b66087
--- /dev/null
+++ b/test/typeparam/issue47684c.go
@@ -0,0 +1,19 @@
+// run -gcflags=-G=3
+
+// Copyright 2021 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package main
+
+func f[G any]() func()func()int {
+	return func() func()int {
+		return func() int {
+			return 0
+		}
+	}
+}
+
+func main() {
+	f[int]()()()
+}
