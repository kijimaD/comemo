commit 576318c7bd9c1deeb5877df65dc26aeb53999ee2
Author: Russ Cox <rsc@golang.org>
Date:   Thu Apr 17 16:25:38 2014 -0400

    cmd/pack: avoid ./ import in test (fix Windows build)
    
    It is possible to use ./ imports on Windows but it
    requires some extra command-line work
    ('go build' does this automatically, but we can't use 'go build' here).
    
    Instead, use an ordinary import and -I/-L, which are easier to use.
    
    LGTM=iant
    R=iant
    CC=golang-codereviews
    https://golang.org/cl/89040043
---
 src/cmd/pack/pack_test.go | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/cmd/pack/pack_test.go b/src/cmd/pack/pack_test.go
index bd4b224aff..b2be74b097 100644
--- a/src/cmd/pack/pack_test.go
+++ b/src/cmd/pack/pack_test.go
@@ -247,7 +247,7 @@ func TestLargeDefs(t *testing.T) {
 	main := filepath.Join(dir, "main.go")
 	prog := `
 		package main
-		import "./large"
+		import "large"
 		var V large.T
 		func main() {
 			println("ok")
@@ -267,8 +267,8 @@ func TestLargeDefs(t *testing.T) {
 	run("go", "build", "cmd/pack") // writes pack binary to dir
 	run("go", "tool", char+"g", "large.go")
 	run("./pack", "grc", "large.a", "large."+char)
-	run("go", "tool", char+"g", "main.go")
-	run("go", "tool", char+"l", "-o", "a.out", "main."+char)
+	run("go", "tool", char+"g", "-I", ".", "main.go")
+	run("go", "tool", char+"l", "-L", ".", "-o", "a.out", "main."+char)
 	out := run("./a.out")
 	if out != "ok\n" {
 		t.Fatal("incorrect output: %q, want %q", out, "ok\n")
