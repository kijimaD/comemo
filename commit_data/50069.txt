commit 0a6e1fa986e04add090afa50b8e566dca40df760
Author: Matthew Dempsky <mdempsky@google.com>
Date:   Thu Aug 18 21:38:08 2022 -0700

    cmd/compile: fix "expression has untyped type" ICE in generic code
    
    During walk, we sometimes desugar OEQ nodes into multiple "untyped
    bool" expressions, and then use typecheck.Conv to convert back to the
    original OEQ node's type.
    
    However, typecheck.Conv had a short-circuit path that if the type is
    already identical to the target type according to types.Identical,
    then we skipped the conversion. This short-circuit is normally fine;
    but with generic code and shape types, it considers "untyped bool" and
    "go.shape.bool" to be identical types. And we could end up leaving an
    expression of "untyped bool", which then fails an internal consistency
    check later.
    
    The simple fix is to change Conv to use types.IdenticalStrict, so that
    we ensure "untyped bool" gets converted to "go.shape.bool". And for
    good measure, make the same change to ConvNop.
    
    This issue was discovered and reported against unified IR, but the
    issue was latent within the non-unified frontend too.
    
    Fixes #54537.
    
    Change-Id: I7559a346b063349b35749e8a2da704be18e51654
    Reviewed-on: https://go-review.googlesource.com/c/go/+/424937
    TryBot-Result: Gopher Robot <gobot@golang.org>
    Run-TryBot: Matthew Dempsky <mdempsky@google.com>
    Reviewed-by: Cuong Manh Le <cuong.manhle.vn@gmail.com>
    Reviewed-by: David Chase <drchase@google.com>

 src/cmd/compile/internal/typecheck/typecheck.go |  4 ++--
 test/typeparam/issue54537.go                    | 22 ++++++++++++++++++++++
 2 files changed, 24 insertions(+), 2 deletions(-)
