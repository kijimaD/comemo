commit b55791e2008703b33883e48e72a347ba07a65486
Author: Russ Cox <rsc@golang.org>
Date:   Tue Oct 28 21:50:16 2014 -0400

    [dev.power64] cmd/5a, cmd/6a, cmd/8a, cmd/9a: make labels function-scoped
    
    I removed support for jumping between functions years ago,
    as part of doing the instruction layout for each function separately.
    
    Given that, it makes sense to treat labels as function-scoped.
    This lets each function have its own 'loop' label, for example.
    
    Makes the assembly much cleaner and removes the last
    reason anyone would reach for the 123(PC) form instead.
    
    Note that this is on the dev.power64 branch, but it changes all
    the assemblers. The change will ship in Go 1.5 (perhaps after
    being ported into the new assembler).
    
    Came up as part of CL 167730043.
    
    LGTM=r
    R=r
    CC=austin, dave, golang-codereviews, minux
    https://golang.org/cl/159670043
---
 src/cmd/5a/a.h                  |    3 +
 src/cmd/5a/a.y                  |   26 +-
 src/cmd/5a/y.tab.c              | 2049 ++++++++++++++----------------
 src/cmd/5a/y.tab.h              |   68 +-
 src/cmd/6a/a.h                  |    3 +
 src/cmd/6a/a.y                  |   25 +-
 src/cmd/6a/y.tab.c              | 1054 ++++++++--------
 src/cmd/8a/a.h                  |    3 +
 src/cmd/8a/a.y                  |   25 +-
 src/cmd/8a/y.tab.c              | 1050 ++++++++--------
 src/cmd/9a/a.h                  |    3 +
 src/cmd/9a/a.y                  |   26 +-
 src/cmd/9a/y.tab.c              | 2602 +++++++++++++++++----------------------
 src/cmd/9a/y.tab.h              |   46 +-
 src/cmd/cc/lexbody              |   25 +
 src/runtime/asm_386.s           |   58 +-
 src/runtime/asm_amd64.s         |   78 +-
 src/runtime/asm_amd64p32.s      |   58 +-
 src/runtime/asm_arm.s           |   24 +-
 src/runtime/asm_power64x.s      |   40 +-
 src/runtime/memclr_386.s        |   46 +-
 src/runtime/memclr_amd64.s      |   44 +-
 src/runtime/memclr_plan9_386.s  |   24 +-
 src/runtime/race_amd64.s        |   18 +-
 src/runtime/sys_darwin_386.s    |    4 +-
 src/runtime/sys_darwin_amd64.s  |    4 +-
 src/runtime/sys_dragonfly_386.s |    4 +-
 src/runtime/sys_freebsd_386.s   |    4 +-
 src/runtime/sys_linux_amd64.s   |    8 +-
 src/runtime/sys_linux_arm.s     |    8 +-
 src/runtime/sys_nacl_386.s      |    4 +-
 src/runtime/sys_nacl_amd64p32.s |    1 -
 src/runtime/sys_nacl_arm.s      |    1 -
 src/runtime/sys_openbsd_386.s   |    4 +-
 src/runtime/sys_solaris_amd64.s |   12 +-
 src/runtime/sys_windows_386.s   |   12 +-
 src/runtime/sys_windows_amd64.s |   12 +-
 37 files changed, 3442 insertions(+), 4034 deletions(-)

diff --git a/src/cmd/5a/a.h b/src/cmd/5a/a.h
index bb60fe7de2..df9838ad37 100644
--- a/src/cmd/5a/a.h
+++ b/src/cmd/5a/a.h
@@ -67,6 +67,7 @@ struct	Sym
 	int32	value;
 	ushort	type;
 	char	*name;
+	char*	labelname;
 	char	sym;
 };
 #define	S	((Sym*)0)
@@ -136,6 +137,8 @@ void	newio(void);
 void	newfile(char*, int);
 Sym*	slookup(char*);
 Sym*	lookup(void);
+Sym*	labellookup(Sym*);
+void	settext(LSym*);
 void	syminit(Sym*);
 int32	yylex(void);
 int	getc(void);
diff --git a/src/cmd/5a/a.y b/src/cmd/5a/a.y
index ad647606ef..d365c75343 100644
--- a/src/cmd/5a/a.y
+++ b/src/cmd/5a/a.y
@@ -73,15 +73,11 @@ prog:
 	line
 
 line:
-	LLAB ':'
-	{
-		if($1->value != pc)
-			yyerror("redeclaration of %s", $1->name);
-		$1->value = pc;
-	}
-	line
-|	LNAME ':'
+	LNAME ':'
 	{
+		$1 = labellookup($1);
+		if($1->type == LLAB && $1->value != pc)
+			yyerror("redeclaration of %s", $1->labelname);
 		$1->type = LLAB;
 		$1->value = pc;
 	}
@@ -218,18 +214,21 @@ inst:
  */
 |	LTYPEB name ',' imm
 	{
+		settext($2.sym);
 		$4.type = D_CONST2;
 		$4.offset2 = ArgsSizeUnknown;
 		outcode($1, Always, &$2, 0, &$4);
 	}
 |	LTYPEB name ',' con ',' imm
 	{
+		settext($2.sym);
 		$6.type = D_CONST2;
 		$6.offset2 = ArgsSizeUnknown;
 		outcode($1, Always, &$2, $4, &$6);
 	}
 |	LTYPEB name ',' con ',' imm '-' con
 	{
+		settext($2.sym);
 		$6.type = D_CONST2;
 		$6.offset2 = $8;
 		outcode($1, Always, &$2, $4, &$6);
@@ -373,15 +372,10 @@ rel:
 	}
 |	LNAME offset
 	{
+		$1 = labellookup($1);
 		$$ = nullgen;
-		if(pass == 2)
-			yyerror("undefined label: %s", $1->name);
-		$$.type = D_BRANCH;
-		$$.offset = $2;
-	}
-|	LLAB offset
-	{
-		$$ = nullgen;
+		if(pass == 2 && $1->type != LLAB)
+			yyerror("undefined label: %s", $1->labelname);
 		$$.type = D_BRANCH;
 		$$.offset = $1->value + $2;
 	}
diff --git a/src/cmd/5a/y.tab.c b/src/cmd/5a/y.tab.c
index a6251b8352..ace80c7e0e 100644
--- a/src/cmd/5a/y.tab.c
+++ b/src/cmd/5a/y.tab.c
@@ -1,21 +1,24 @@
-/* A Bison parser, made by GNU Bison 2.7.12-4996.  */
+/* A Bison parser, made by GNU Bison 2.3.  */
 
-/* Bison implementation for Yacc-like parsers in C
-   
-      Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.
-   
-   This program is free software: you can redistribute it and/or modify
+/* Skeleton implementation for Bison's Yacc-like parsers in C
+
+   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
+   Free Software Foundation, Inc.
+
+   This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
-   the Free Software Foundation, either version 3 of the License, or
-   (at your option) any later version.
-   
+   the Free Software Foundation; either version 2, or (at your option)
+   any later version.
+
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
-   
+
    You should have received a copy of the GNU General Public License
-   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 51 Franklin Street, Fifth Floor,
+   Boston, MA 02110-1301, USA.  */
 
 /* As a special exception, you may create a larger work that contains
    part or all of the Bison parser skeleton and distribute that work
@@ -26,7 +29,7 @@
    special exception, which will cause the skeleton and the resulting
    Bison output files to be licensed under the GNU General Public
    License without this special exception.
-   
+
    This special exception was added by the Free Software Foundation in
    version 2.2 of Bison.  */
 
@@ -44,7 +47,7 @@
 #define YYBISON 1
 
 /* Bison version.  */
-#define YYBISON_VERSION "2.7.12-4996"
+#define YYBISON_VERSION "2.3"
 
 /* Skeleton name.  */
 #define YYSKELETON_NAME "yacc.c"
@@ -52,55 +55,10 @@
 /* Pure parsers.  */
 #define YYPURE 0
 
-/* Push parsers.  */
-#define YYPUSH 0
-
-/* Pull parsers.  */
-#define YYPULL 1
-
-
-
-
-/* Copy the first part of user declarations.  */
-/* Line 371 of yacc.c  */
-#line 31 "a.y"
-
-#include <u.h>
-#include <stdio.h>	/* if we don't, bison will, and a.h re-#defines getc */
-#include <libc.h>
-#include "a.h"
-#include "../../runtime/funcdata.h"
+/* Using locations.  */
+#define YYLSP_NEEDED 0
 
-/* Line 371 of yacc.c  */
-#line 76 "y.tab.c"
 
-# ifndef YY_NULL
-#  if defined __cplusplus && 201103L <= __cplusplus
-#   define YY_NULL nullptr
-#  else
-#   define YY_NULL 0
-#  endif
-# endif
-
-/* Enabling verbose error messages.  */
-#ifdef YYERROR_VERBOSE
-# undef YYERROR_VERBOSE
-# define YYERROR_VERBOSE 1
-#else
-# define YYERROR_VERBOSE 0
-#endif
-
-/* In a future release of Bison, this section will be replaced
-   by #include "y.tab.h".  */
-#ifndef YY_YY_Y_TAB_H_INCLUDED
-# define YY_YY_Y_TAB_H_INCLUDED
-/* Enabling traces.  */
-#ifndef YYDEBUG
-# define YYDEBUG 0
-#endif
-#if YYDEBUG
-extern int yydebug;
-#endif
 
 /* Tokens.  */
 #ifndef YYTOKENTYPE
@@ -210,49 +168,60 @@ extern int yydebug;
 
 
 
+
+/* Copy the first part of user declarations.  */
+#line 31 "a.y"
+
+#include <u.h>
+#include <stdio.h>	/* if we don't, bison will, and a.h re-#defines getc */
+#include <libc.h>
+#include "a.h"
+#include "../../runtime/funcdata.h"
+
+
+/* Enabling traces.  */
+#ifndef YYDEBUG
+# define YYDEBUG 0
+#endif
+
+/* Enabling verbose error messages.  */
+#ifdef YYERROR_VERBOSE
+# undef YYERROR_VERBOSE
+# define YYERROR_VERBOSE 1
+#else
+# define YYERROR_VERBOSE 0
+#endif
+
+/* Enabling the token table.  */
+#ifndef YYTOKEN_TABLE
+# define YYTOKEN_TABLE 0
+#endif
+
 #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
 typedef union YYSTYPE
-{
-/* Line 387 of yacc.c  */
 #line 39 "a.y"
-
+{
 	Sym	*sym;
 	int32	lval;
 	double	dval;
 	char	sval[8];
 	Addr	addr;
-
-
-/* Line 387 of yacc.c  */
-#line 228 "y.tab.c"
-} YYSTYPE;
-# define YYSTYPE_IS_TRIVIAL 1
+}
+/* Line 193 of yacc.c.  */
+#line 212 "y.tab.c"
+	YYSTYPE;
 # define yystype YYSTYPE /* obsolescent; will be withdrawn */
 # define YYSTYPE_IS_DECLARED 1
+# define YYSTYPE_IS_TRIVIAL 1
 #endif
 
-extern YYSTYPE yylval;
 
-#ifdef YYPARSE_PARAM
-#if defined __STDC__ || defined __cplusplus
-int yyparse (void *YYPARSE_PARAM);
-#else
-int yyparse ();
-#endif
-#else /* ! YYPARSE_PARAM */
-#if defined __STDC__ || defined __cplusplus
-int yyparse (void);
-#else
-int yyparse ();
-#endif
-#endif /* ! YYPARSE_PARAM */
-
-#endif /* !YY_YY_Y_TAB_H_INCLUDED  */
 
 /* Copy the second part of user declarations.  */
 
-/* Line 390 of yacc.c  */
-#line 256 "y.tab.c"
+
+/* Line 216 of yacc.c.  */
+#line 225 "y.tab.c"
 
 #ifdef short
 # undef short
@@ -305,45 +274,36 @@ typedef short int yytype_int16;
 # if defined YYENABLE_NLS && YYENABLE_NLS
 #  if ENABLE_NLS
 #   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
-#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
+#   define YY_(msgid) dgettext ("bison-runtime", msgid)
 #  endif
 # endif
 # ifndef YY_
-#  define YY_(Msgid) Msgid
-# endif
-#endif
-
-#ifndef __attribute__
-/* This feature is available in gcc versions 2.5 and later.  */
-# if (! defined __GNUC__ || __GNUC__ < 2 \
-      || (__GNUC__ == 2 && __GNUC_MINOR__ < 5))
-#  define __attribute__(Spec) /* empty */
+#  define YY_(msgid) msgid
 # endif
 #endif
 
 /* Suppress unused-variable warnings by "using" E.  */
 #if ! defined lint || defined __GNUC__
-# define YYUSE(E) ((void) (E))
+# define YYUSE(e) ((void) (e))
 #else
-# define YYUSE(E) /* empty */
+# define YYUSE(e) /* empty */
 #endif
 
-
 /* Identity function, used to suppress warnings about constant conditions.  */
 #ifndef lint
-# define YYID(N) (N)
+# define YYID(n) (n)
 #else
 #if (defined __STDC__ || defined __C99__FUNC__ \
      || defined __cplusplus || defined _MSC_VER)
 static int
-YYID (int yyi)
+YYID (int i)
 #else
 static int
-YYID (yyi)
-    int yyi;
+YYID (i)
+    int i;
 #endif
 {
-  return yyi;
+  return i;
 }
 #endif
 
@@ -364,12 +324,11 @@ YYID (yyi)
 #    define alloca _alloca
 #   else
 #    define YYSTACK_ALLOC alloca
-#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
+#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
      || defined __cplusplus || defined _MSC_VER)
 #     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
-      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
-#     ifndef EXIT_SUCCESS
-#      define EXIT_SUCCESS 0
+#     ifndef _STDLIB_H
+#      define _STDLIB_H 1
 #     endif
 #    endif
 #   endif
@@ -392,24 +351,24 @@ YYID (yyi)
 #  ifndef YYSTACK_ALLOC_MAXIMUM
 #   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
 #  endif
-#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
+#  if (defined __cplusplus && ! defined _STDLIB_H \
        && ! ((defined YYMALLOC || defined malloc) \
 	     && (defined YYFREE || defined free)))
 #   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
-#   ifndef EXIT_SUCCESS
-#    define EXIT_SUCCESS 0
+#   ifndef _STDLIB_H
+#    define _STDLIB_H 1
 #   endif
 #  endif
 #  ifndef YYMALLOC
 #   define YYMALLOC malloc
-#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
+#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
      || defined __cplusplus || defined _MSC_VER)
 void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
 #   endif
 #  endif
 #  ifndef YYFREE
 #   define YYFREE free
-#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
+#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
      || defined __cplusplus || defined _MSC_VER)
 void free (void *); /* INFRINGES ON USER NAME SPACE */
 #   endif
@@ -425,9 +384,9 @@ void free (void *); /* INFRINGES ON USER NAME SPACE */
 /* A type that is properly aligned for any stack member.  */
 union yyalloc
 {
-  yytype_int16 yyss_alloc;
-  YYSTYPE yyvs_alloc;
-};
+  yytype_int16 yyss;
+  YYSTYPE yyvs;
+  };
 
 /* The size of the maximum gap between one aligned stack and the next.  */
 # define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)
@@ -438,19 +397,35 @@ union yyalloc
      ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
       + YYSTACK_GAP_MAXIMUM)
 
-# define YYCOPY_NEEDED 1
+/* Copy COUNT objects from FROM to TO.  The source and destination do
+   not overlap.  */
+# ifndef YYCOPY
+#  if defined __GNUC__ && 1 < __GNUC__
+#   define YYCOPY(To, From, Count) \
+      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
+#  else
+#   define YYCOPY(To, From, Count)		\
+      do					\
+	{					\
+	  YYSIZE_T yyi;				\
+	  for (yyi = 0; yyi < (Count); yyi++)	\
+	    (To)[yyi] = (From)[yyi];		\
+	}					\
+      while (YYID (0))
+#  endif
+# endif
 
 /* Relocate STACK from its old location to the new one.  The
    local variables YYSIZE and YYSTACKSIZE give the old and new number of
    elements in the stack, and YYPTR gives the new location of the
    stack.  Advance YYPTR to a properly aligned location for the next
    stack.  */
-# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
+# define YYSTACK_RELOCATE(Stack)					\
     do									\
       {									\
 	YYSIZE_T yynewbytes;						\
-	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
-	Stack = &yyptr->Stack_alloc;					\
+	YYCOPY (&yyptr->Stack, Stack, yysize);				\
+	Stack = &yyptr->Stack;						\
 	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
 	yyptr += yynewbytes / sizeof (*yyptr);				\
       }									\
@@ -458,39 +433,19 @@ union yyalloc
 
 #endif
 
-#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
-/* Copy COUNT objects from SRC to DST.  The source and destination do
-   not overlap.  */
-# ifndef YYCOPY
-#  if defined __GNUC__ && 1 < __GNUC__
-#   define YYCOPY(Dst, Src, Count) \
-      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
-#  else
-#   define YYCOPY(Dst, Src, Count)              \
-      do                                        \
-        {                                       \
-          YYSIZE_T yyi;                         \
-          for (yyi = 0; yyi < (Count); yyi++)   \
-            (Dst)[yyi] = (Src)[yyi];            \
-        }                                       \
-      while (YYID (0))
-#  endif
-# endif
-#endif /* !YYCOPY_NEEDED */
-
 /* YYFINAL -- State number of the termination state.  */
 #define YYFINAL  2
 /* YYLAST -- Last index in YYTABLE.  */
-#define YYLAST   609
+#define YYLAST   640
 
 /* YYNTOKENS -- Number of terminals.  */
 #define YYNTOKENS  71
 /* YYNNTS -- Number of nonterminals.  */
-#define YYNNTS  35
+#define YYNNTS  34
 /* YYNRULES -- Number of rules.  */
-#define YYNRULES  133
+#define YYNRULES  130
 /* YYNRULES -- Number of states.  */
-#define YYNSTATES  339
+#define YYNSTATES  333
 
 /* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
 #define YYUNDEFTOK  2
@@ -540,101 +495,100 @@ static const yytype_uint8 yytranslate[] =
    YYRHS.  */
 static const yytype_uint16 yyprhs[] =
 {
-       0,     0,     3,     4,     5,     9,    10,    15,    16,    21,
-      26,    31,    33,    36,    39,    47,    54,    60,    66,    72,
-      77,    82,    86,    90,    95,   102,   110,   118,   126,   133,
-     140,   144,   149,   156,   165,   172,   177,   181,   187,   193,
-     201,   208,   221,   229,   239,   242,   247,   252,   255,   256,
-     259,   262,   263,   266,   271,   274,   277,   280,   283,   288,
-     291,   293,   296,   300,   302,   306,   310,   312,   314,   316,
-     321,   323,   325,   327,   329,   331,   333,   335,   339,   341,
-     346,   348,   353,   355,   357,   359,   361,   364,   366,   372,
-     377,   382,   387,   392,   394,   396,   398,   400,   405,   407,
-     409,   411,   416,   418,   420,   422,   427,   432,   438,   446,
-     447,   450,   453,   455,   457,   459,   461,   463,   466,   469,
-     472,   476,   477,   480,   482,   486,   490,   494,   498,   502,
-     507,   512,   516,   520
+       0,     0,     3,     4,     5,     9,    10,    15,    20,    25,
+      27,    30,    33,    41,    48,    54,    60,    66,    71,    76,
+      80,    84,    89,    96,   104,   112,   120,   127,   134,   138,
+     143,   150,   159,   166,   171,   175,   181,   187,   195,   202,
+     215,   223,   233,   236,   241,   246,   249,   250,   253,   256,
+     257,   260,   265,   268,   271,   274,   279,   282,   284,   287,
+     291,   293,   297,   301,   303,   305,   307,   312,   314,   316,
+     318,   320,   322,   324,   326,   330,   332,   337,   339,   344,
+     346,   348,   350,   352,   355,   357,   363,   368,   373,   378,
+     383,   385,   387,   389,   391,   396,   398,   400,   402,   407,
+     409,   411,   413,   418,   423,   429,   437,   438,   441,   444,
+     446,   448,   450,   452,   454,   457,   460,   463,   467,   468,
+     471,   473,   477,   481,   485,   489,   493,   498,   503,   507,
+     511
 };
 
 /* YYRHS -- A `-1'-separated list of the rules' RHS.  */
 static const yytype_int8 yyrhs[] =
 {
       72,     0,    -1,    -1,    -1,    72,    73,    74,    -1,    -1,
-      59,    61,    75,    74,    -1,    -1,    58,    61,    76,    74,
-      -1,    58,    62,   105,    63,    -1,    60,    62,   105,    63,
-      -1,    63,    -1,    77,    63,    -1,     1,    63,    -1,    13,
-      78,    89,    64,    96,    64,    91,    -1,    13,    78,    89,
-      64,    96,    64,    -1,    13,    78,    89,    64,    91,    -1,
-      14,    78,    89,    64,    91,    -1,    15,    78,    84,    64,
-      84,    -1,    16,    78,    79,    80,    -1,    16,    78,    79,
-      85,    -1,    35,    79,    86,    -1,    17,    79,    80,    -1,
-      18,    78,    79,    84,    -1,    19,    78,    89,    64,    96,
-      79,    -1,    20,    78,    87,    64,    65,    83,    66,    -1,
-      20,    78,    65,    83,    66,    64,    87,    -1,    21,    78,
-      91,    64,    86,    64,    91,    -1,    21,    78,    91,    64,
-      86,    79,    -1,    21,    78,    79,    86,    64,    91,    -1,
-      22,    78,    79,    -1,    23,   100,    64,    90,    -1,    23,
-     100,    64,   103,    64,    90,    -1,    23,   100,    64,   103,
-      64,    90,     9,   103,    -1,    24,   100,    11,   103,    64,
-      81,    -1,    25,    78,    91,    79,    -1,    28,    79,    81,
-      -1,    29,    78,    99,    64,    99,    -1,    31,    78,    98,
-      64,    99,    -1,    31,    78,    98,    64,    48,    64,    99,
-      -1,    32,    78,    99,    64,    99,    79,    -1,    30,    78,
-     103,    64,   105,    64,    96,    64,    97,    64,    97,   104,
-      -1,    33,    78,    91,    64,    91,    64,    92,    -1,    34,
-      78,    91,    64,    91,    64,    91,    64,    96,    -1,    36,
-      88,    -1,    43,    84,    64,    84,    -1,    44,    84,    64,
-      84,    -1,    26,    79,    -1,    -1,    78,    53,    -1,    78,
-      54,    -1,    -1,    64,    79,    -1,   103,    67,    41,    68,
-      -1,    58,   101,    -1,    59,   101,    -1,    69,   103,    -1,
-      69,    88,    -1,    69,    10,    69,    88,    -1,    69,    57,
-      -1,    82,    -1,    69,    56,    -1,    69,     9,    56,    -1,
-      96,    -1,    96,     9,    96,    -1,    96,    79,    83,    -1,
-      91,    -1,    81,    -1,    93,    -1,    93,    67,    96,    68,
-      -1,    51,    -1,    52,    -1,   103,    -1,    88,    -1,    99,
-      -1,    86,    -1,   100,    -1,    67,    96,    68,    -1,    86,
-      -1,   103,    67,    95,    68,    -1,   100,    -1,   100,    67,
-      95,    68,    -1,    87,    -1,    91,    -1,    90,    -1,    93,
-      -1,    69,   103,    -1,    96,    -1,    67,    96,    64,    96,
-      68,    -1,    96,     6,     6,    94,    -1,    96,     7,     7,
-      94,    -1,    96,     9,     7,    94,    -1,    96,    55,     7,
-      94,    -1,    96,    -1,   103,    -1,    46,    -1,    41,    -1,
-      45,    67,   105,    68,    -1,    95,    -1,    38,    -1,    50,
-      -1,    49,    67,   105,    68,    -1,    99,    -1,    82,    -1,
-      48,    -1,    47,    67,   103,    68,    -1,   103,    67,   102,
-      68,    -1,    58,   101,    67,   102,    68,    -1,    58,     6,
-       7,   101,    67,    39,    68,    -1,    -1,     8,   103,    -1,
-       9,   103,    -1,    39,    -1,    38,    -1,    40,    -1,    37,
-      -1,    60,    -1,     9,   103,    -1,     8,   103,    -1,    70,
-     103,    -1,    67,   105,    68,    -1,    -1,    64,   105,    -1,
-     103,    -1,   105,     8,   105,    -1,   105,     9,   105,    -1,
-     105,    10,   105,    -1,   105,    11,   105,    -1,   105,    12,
-     105,    -1,   105,     6,     6,   105,    -1,   105,     7,     7,
-     105,    -1,   105,     5,   105,    -1,   105,     4,   105,    -1,
-     105,     3,   105,    -1
+      58,    61,    75,    74,    -1,    58,    62,   104,    63,    -1,
+      60,    62,   104,    63,    -1,    63,    -1,    76,    63,    -1,
+       1,    63,    -1,    13,    77,    88,    64,    95,    64,    90,
+      -1,    13,    77,    88,    64,    95,    64,    -1,    13,    77,
+      88,    64,    90,    -1,    14,    77,    88,    64,    90,    -1,
+      15,    77,    83,    64,    83,    -1,    16,    77,    78,    79,
+      -1,    16,    77,    78,    84,    -1,    35,    78,    85,    -1,
+      17,    78,    79,    -1,    18,    77,    78,    83,    -1,    19,
+      77,    88,    64,    95,    78,    -1,    20,    77,    86,    64,
+      65,    82,    66,    -1,    20,    77,    65,    82,    66,    64,
+      86,    -1,    21,    77,    90,    64,    85,    64,    90,    -1,
+      21,    77,    90,    64,    85,    78,    -1,    21,    77,    78,
+      85,    64,    90,    -1,    22,    77,    78,    -1,    23,    99,
+      64,    89,    -1,    23,    99,    64,   102,    64,    89,    -1,
+      23,    99,    64,   102,    64,    89,     9,   102,    -1,    24,
+      99,    11,   102,    64,    80,    -1,    25,    77,    90,    78,
+      -1,    28,    78,    80,    -1,    29,    77,    98,    64,    98,
+      -1,    31,    77,    97,    64,    98,    -1,    31,    77,    97,
+      64,    48,    64,    98,    -1,    32,    77,    98,    64,    98,
+      78,    -1,    30,    77,   102,    64,   104,    64,    95,    64,
+      96,    64,    96,   103,    -1,    33,    77,    90,    64,    90,
+      64,    91,    -1,    34,    77,    90,    64,    90,    64,    90,
+      64,    95,    -1,    36,    87,    -1,    43,    83,    64,    83,
+      -1,    44,    83,    64,    83,    -1,    26,    78,    -1,    -1,
+      77,    53,    -1,    77,    54,    -1,    -1,    64,    78,    -1,
+     102,    67,    41,    68,    -1,    58,   100,    -1,    69,   102,
+      -1,    69,    87,    -1,    69,    10,    69,    87,    -1,    69,
+      57,    -1,    81,    -1,    69,    56,    -1,    69,     9,    56,
+      -1,    95,    -1,    95,     9,    95,    -1,    95,    78,    82,
+      -1,    90,    -1,    80,    -1,    92,    -1,    92,    67,    95,
+      68,    -1,    51,    -1,    52,    -1,   102,    -1,    87,    -1,
+      98,    -1,    85,    -1,    99,    -1,    67,    95,    68,    -1,
+      85,    -1,   102,    67,    94,    68,    -1,    99,    -1,    99,
+      67,    94,    68,    -1,    86,    -1,    90,    -1,    89,    -1,
+      92,    -1,    69,   102,    -1,    95,    -1,    67,    95,    64,
+      95,    68,    -1,    95,     6,     6,    93,    -1,    95,     7,
+       7,    93,    -1,    95,     9,     7,    93,    -1,    95,    55,
+       7,    93,    -1,    95,    -1,   102,    -1,    46,    -1,    41,
+      -1,    45,    67,   104,    68,    -1,    94,    -1,    38,    -1,
+      50,    -1,    49,    67,   104,    68,    -1,    98,    -1,    81,
+      -1,    48,    -1,    47,    67,   102,    68,    -1,   102,    67,
+     101,    68,    -1,    58,   100,    67,   101,    68,    -1,    58,
+       6,     7,   100,    67,    39,    68,    -1,    -1,     8,   102,
+      -1,     9,   102,    -1,    39,    -1,    38,    -1,    40,    -1,
+      37,    -1,    60,    -1,     9,   102,    -1,     8,   102,    -1,
+      70,   102,    -1,    67,   104,    68,    -1,    -1,    64,   104,
+      -1,   102,    -1,   104,     8,   104,    -1,   104,     9,   104,
+      -1,   104,    10,   104,    -1,   104,    11,   104,    -1,   104,
+      12,   104,    -1,   104,     6,     6,   104,    -1,   104,     7,
+       7,   104,    -1,   104,     5,   104,    -1,   104,     4,   104,
+      -1,   104,     3,   104,    -1
 };
 
 /* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
 static const yytype_uint16 yyrline[] =
 {
-       0,    68,    68,    70,    69,    77,    76,    84,    83,    89,
-      94,   100,   101,   102,   108,   112,   116,   123,   130,   137,
-     141,   148,   155,   162,   169,   176,   185,   197,   201,   205,
-     212,   219,   225,   231,   240,   247,   254,   261,   265,   269,
-     273,   280,   302,   310,   319,   326,   335,   346,   352,   355,
-     359,   364,   365,   368,   374,   382,   389,   395,   400,   405,
-     411,   414,   420,   428,   432,   441,   447,   448,   449,   450,
-     455,   461,   467,   473,   474,   477,   478,   486,   495,   496,
-     505,   506,   512,   515,   516,   517,   519,   527,   535,   544,
-     550,   556,   562,   570,   576,   584,   585,   589,   597,   598,
-     604,   605,   613,   614,   617,   623,   631,   639,   647,   657,
-     660,   664,   670,   671,   672,   675,   676,   680,   684,   688,
-     692,   698,   701,   707,   708,   712,   716,   720,   724,   728,
-     732,   736,   740,   744
+       0,    68,    68,    70,    69,    77,    76,    85,    90,    96,
+      97,    98,   104,   108,   112,   119,   126,   133,   137,   144,
+     151,   158,   165,   172,   181,   193,   197,   201,   208,   215,
+     222,   229,   239,   246,   253,   260,   264,   268,   272,   279,
+     301,   309,   318,   325,   334,   345,   351,   354,   358,   363,
+     364,   367,   373,   383,   389,   394,   399,   405,   408,   414,
+     422,   426,   435,   441,   442,   443,   444,   449,   455,   461,
+     467,   468,   471,   472,   480,   489,   490,   499,   500,   506,
+     509,   510,   511,   513,   521,   529,   538,   544,   550,   556,
+     564,   570,   578,   579,   583,   591,   592,   598,   599,   607,
+     608,   611,   617,   625,   633,   641,   651,   654,   658,   664,
+     665,   666,   669,   670,   674,   678,   682,   686,   692,   695,
+     701,   702,   706,   710,   714,   718,   722,   726,   730,   734,
+     738
 };
 #endif
 
-#if YYDEBUG || YYERROR_VERBOSE || 0
+#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
 /* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
    First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
 static const char *const yytname[] =
@@ -647,11 +601,11 @@ static const char *const yytname[] =
   "LSP", "LSB", "LFP", "LPC", "LTYPEX", "LTYPEPC", "LTYPEF", "LR", "LREG",
   "LF", "LFREG", "LC", "LCREG", "LPSR", "LFCR", "LCOND", "LS", "LAT",
   "LFCONST", "LSCONST", "LNAME", "LLAB", "LVAR", "':'", "'='", "';'",
-  "','", "'['", "']'", "'('", "')'", "'$'", "'~'", "$accept", "prog",
-  "$@1", "line", "$@2", "$@3", "inst", "cond", "comma", "rel", "ximm",
-  "fcon", "reglist", "gen", "nireg", "ireg", "ioreg", "oreg", "imsr",
-  "imm", "reg", "regreg", "shift", "rcon", "sreg", "spreg", "creg",
-  "frcon", "freg", "name", "offset", "pointer", "con", "oexpr", "expr", YY_NULL
+  "','", "'['", "']'", "'('", "')'", "'$'", "'~'", "$accept", "prog", "@1",
+  "line", "@2", "inst", "cond", "comma", "rel", "ximm", "fcon", "reglist",
+  "gen", "nireg", "ireg", "ioreg", "oreg", "imsr", "imm", "reg", "regreg",
+  "shift", "rcon", "sreg", "spreg", "creg", "frcon", "freg", "name",
+  "offset", "pointer", "con", "oexpr", "expr", 0
 };
 #endif
 
@@ -674,279 +628,282 @@ static const yytype_uint16 yytoknum[] =
 /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
 static const yytype_uint8 yyr1[] =
 {
-       0,    71,    72,    73,    72,    75,    74,    76,    74,    74,
-      74,    74,    74,    74,    77,    77,    77,    77,    77,    77,
-      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
-      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
-      77,    77,    77,    77,    77,    77,    77,    77,    78,    78,
-      78,    79,    79,    80,    80,    80,    81,    81,    81,    81,
-      81,    82,    82,    83,    83,    83,    84,    84,    84,    84,
-      84,    84,    84,    84,    84,    85,    85,    86,    87,    87,
-      88,    88,    88,    89,    89,    89,    90,    91,    92,    93,
-      93,    93,    93,    94,    94,    95,    95,    95,    96,    96,
-      97,    97,    98,    98,    99,    99,   100,   100,   100,   101,
-     101,   101,   102,   102,   102,   103,   103,   103,   103,   103,
-     103,   104,   104,   105,   105,   105,   105,   105,   105,   105,
-     105,   105,   105,   105
+       0,    71,    72,    73,    72,    75,    74,    74,    74,    74,
+      74,    74,    76,    76,    76,    76,    76,    76,    76,    76,
+      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
+      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
+      76,    76,    76,    76,    76,    76,    77,    77,    77,    78,
+      78,    79,    79,    80,    80,    80,    80,    80,    81,    81,
+      82,    82,    82,    83,    83,    83,    83,    83,    83,    83,
+      83,    83,    84,    84,    85,    86,    86,    87,    87,    87,
+      88,    88,    88,    89,    90,    91,    92,    92,    92,    92,
+      93,    93,    94,    94,    94,    95,    95,    96,    96,    97,
+      97,    98,    98,    99,    99,    99,   100,   100,   100,   101,
+     101,   101,   102,   102,   102,   102,   102,   102,   103,   103,
+     104,   104,   104,   104,   104,   104,   104,   104,   104,   104,
+     104
 };
 
 /* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
 static const yytype_uint8 yyr2[] =
 {
-       0,     2,     0,     0,     3,     0,     4,     0,     4,     4,
-       4,     1,     2,     2,     7,     6,     5,     5,     5,     4,
-       4,     3,     3,     4,     6,     7,     7,     7,     6,     6,
-       3,     4,     6,     8,     6,     4,     3,     5,     5,     7,
-       6,    12,     7,     9,     2,     4,     4,     2,     0,     2,
-       2,     0,     2,     4,     2,     2,     2,     2,     4,     2,
-       1,     2,     3,     1,     3,     3,     1,     1,     1,     4,
-       1,     1,     1,     1,     1,     1,     1,     3,     1,     4,
-       1,     4,     1,     1,     1,     1,     2,     1,     5,     4,
-       4,     4,     4,     1,     1,     1,     1,     4,     1,     1,
-       1,     4,     1,     1,     1,     4,     4,     5,     7,     0,
-       2,     2,     1,     1,     1,     1,     1,     2,     2,     2,
-       3,     0,     2,     1,     3,     3,     3,     3,     3,     4,
-       4,     3,     3,     3
+       0,     2,     0,     0,     3,     0,     4,     4,     4,     1,
+       2,     2,     7,     6,     5,     5,     5,     4,     4,     3,
+       3,     4,     6,     7,     7,     7,     6,     6,     3,     4,
+       6,     8,     6,     4,     3,     5,     5,     7,     6,    12,
+       7,     9,     2,     4,     4,     2,     0,     2,     2,     0,
+       2,     4,     2,     2,     2,     4,     2,     1,     2,     3,
+       1,     3,     3,     1,     1,     1,     4,     1,     1,     1,
+       1,     1,     1,     1,     3,     1,     4,     1,     4,     1,
+       1,     1,     1,     2,     1,     5,     4,     4,     4,     4,
+       1,     1,     1,     1,     4,     1,     1,     1,     4,     1,
+       1,     1,     4,     4,     5,     7,     0,     2,     2,     1,
+       1,     1,     1,     1,     2,     2,     2,     3,     0,     2,
+       1,     3,     3,     3,     3,     3,     4,     4,     3,     3,
+       3
 };
 
-/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
-   Performed when YYTABLE doesn't specify something else to do.  Zero
+/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
+   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
    means the default is an error.  */
 static const yytype_uint8 yydefact[] =
 {
-       2,     3,     1,     0,     0,    48,    48,    48,    48,    51,
-      48,    48,    48,    48,    48,     0,     0,    48,    51,    51,
-      48,    48,    48,    48,    48,    48,    51,     0,     0,     0,
-       0,     0,     0,    11,     4,     0,    13,     0,     0,     0,
-      51,    51,     0,    51,     0,     0,    51,    51,     0,     0,
-     115,   109,   116,     0,     0,     0,     0,     0,     0,    47,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,    78,
-      82,    44,    80,     0,    99,    96,     0,    95,     0,   104,
-      70,    71,     0,    67,    60,     0,    73,    66,    68,    98,
-      87,    74,    72,     0,     7,     0,     5,     0,    12,    49,
-      50,     0,     0,    84,    83,    85,     0,     0,     0,    52,
-     109,   109,    22,     0,     0,     0,     0,     0,     0,     0,
-       0,    87,    30,   118,   117,     0,     0,     0,     0,   123,
-       0,   119,     0,     0,     0,    51,    36,     0,     0,     0,
-     103,     0,   102,     0,     0,     0,     0,    21,     0,     0,
-       0,     0,     0,     0,     0,    61,    59,    57,    56,     0,
+       2,     3,     1,     0,     0,    46,    46,    46,    46,    49,
+      46,    46,    46,    46,    46,     0,     0,    46,    49,    49,
+      46,    46,    46,    46,    46,    46,    49,     0,     0,     0,
+       0,     0,     9,     4,     0,    11,     0,     0,     0,    49,
+      49,     0,    49,     0,     0,    49,    49,     0,     0,   112,
+     106,   113,     0,     0,     0,     0,     0,     0,    45,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,    75,    79,
+      42,    77,     0,    96,    93,     0,    92,     0,   101,    67,
+      68,     0,    64,    57,     0,    70,    63,    65,    95,    84,
+      71,    69,     0,     5,     0,     0,    10,    47,    48,     0,
+       0,    81,    80,    82,     0,     0,     0,    50,   106,    20,
+       0,     0,     0,     0,     0,     0,     0,     0,    84,    28,
+     115,   114,     0,     0,     0,     0,   120,     0,   116,     0,
+       0,     0,    49,    34,     0,     0,     0,   100,     0,    99,
+       0,     0,     0,     0,    19,     0,     0,     0,     0,     0,
+       0,     0,    58,    56,    54,    53,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,    83,     0,     0,     0,
+     106,    17,    18,    72,    73,     0,    52,     0,    21,     0,
+       0,    49,     0,     0,     0,     0,   106,   107,   108,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-      86,     0,     0,     0,   109,    19,    20,    75,    76,     0,
-      54,    55,     0,    23,     0,     0,    51,     0,     0,     0,
-       0,   109,   110,   111,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   120,    31,     0,   113,   112,
-     114,     0,     0,    35,     0,     0,     0,     0,     0,     0,
-       0,    77,     0,     0,     0,     0,    62,     0,    45,     0,
-       0,     0,     0,     0,    46,     8,     9,     6,    10,    16,
-      87,    17,    18,    54,     0,     0,    51,     0,     0,     0,
-       0,     0,    51,     0,     0,   133,   132,   131,     0,     0,
-     124,   125,   126,   127,   128,     0,   106,     0,    37,     0,
-     104,    38,    51,     0,     0,    81,    79,    97,   105,    58,
-      69,    89,    93,    94,    90,    91,    92,    15,    53,    24,
-       0,    64,    65,     0,    29,    51,    28,     0,   107,   129,
-     130,    32,    34,     0,     0,    40,     0,     0,    14,    26,
-      25,    27,     0,     0,     0,    39,     0,    42,     0,   108,
-      33,     0,     0,     0,     0,   100,     0,     0,    43,     0,
-       0,     0,     0,   121,    88,   101,     0,    41,   122
+     117,    29,     0,   110,   109,   111,     0,     0,    33,     0,
+       0,     0,     0,     0,     0,     0,    74,     0,     0,     0,
+       0,    59,     0,    43,     0,     0,     0,     0,     0,    44,
+       6,     7,     8,    14,    84,    15,    16,    52,     0,     0,
+      49,     0,     0,     0,     0,     0,    49,     0,     0,   130,
+     129,   128,     0,     0,   121,   122,   123,   124,   125,     0,
+     103,     0,    35,     0,   101,    36,    49,     0,     0,    78,
+      76,    94,   102,    55,    66,    86,    90,    91,    87,    88,
+      89,    13,    51,    22,     0,    61,    62,     0,    27,    49,
+      26,     0,   104,   126,   127,    30,    32,     0,     0,    38,
+       0,     0,    12,    24,    23,    25,     0,     0,     0,    37,
+       0,    40,     0,   105,    31,     0,     0,     0,     0,    97,
+       0,     0,    41,     0,     0,     0,     0,   118,    85,    98,
+       0,    39,   119
 };
 
 /* YYDEFGOTO[NTERM-NUM].  */
 static const yytype_int16 yydefgoto[] =
 {
-      -1,     1,     3,    34,   168,   166,    35,    37,   109,   112,
-      83,    84,   185,    85,   176,    69,    70,    86,   102,   103,
-      87,   317,    88,   281,    89,   121,   326,   141,    91,    72,
-     128,   211,   129,   337,   130
+      -1,     1,     3,    33,   163,    34,    36,   107,   109,    82,
+      83,   180,    84,   172,    68,    69,    85,   100,   101,    86,
+     311,    87,   275,    88,   118,   320,   138,    90,    71,   125,
+     206,   126,   331,   127
 };
 
 /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
    STATE-NUM.  */
-#define YYPACT_NINF -128
+#define YYPACT_NINF -125
 static const yytype_int16 yypact[] =
 {
-    -128,     4,  -128,   315,   -35,  -128,  -128,  -128,  -128,   -10,
-    -128,  -128,  -128,  -128,  -128,    44,    44,  -128,   -10,   -10,
-    -128,  -128,  -128,  -128,  -128,  -128,   -10,   416,   371,   371,
-     -49,     9,    32,  -128,  -128,    38,  -128,   487,   487,   344,
-      69,   -10,   391,    69,   487,   209,   489,    69,   317,   317,
-    -128,    49,  -128,   317,   317,    42,    48,   106,    67,  -128,
-      61,   191,    25,    93,   191,    67,    67,    68,   170,  -128,
-    -128,  -128,    72,    84,  -128,  -128,    86,  -128,   109,  -128,
-    -128,  -128,   233,  -128,  -128,    80,  -128,  -128,   115,  -128,
-     426,  -128,    84,   120,  -128,   317,  -128,   317,  -128,  -128,
-    -128,   317,   137,  -128,  -128,  -128,   148,   155,   397,  -128,
-      74,    74,  -128,   164,   371,   204,   240,   207,   206,    68,
-     223,  -128,  -128,  -128,  -128,   270,   317,   317,   227,  -128,
-     183,  -128,    90,   160,   317,   -10,  -128,   234,   237,    16,
-    -128,   254,  -128,   255,   256,   257,   240,  -128,   212,   168,
-     548,   317,   317,   428,   258,  -128,  -128,  -128,    84,   371,
-     240,   318,   316,   335,   348,   371,   315,   502,   315,   512,
-    -128,   240,   240,   371,    49,  -128,  -128,  -128,  -128,   289,
-    -128,  -128,   330,  -128,   240,   291,    11,   307,   168,   312,
-      68,    74,  -128,  -128,   160,   317,   317,   317,   377,   379,
-     317,   317,   317,   317,   317,  -128,  -128,   324,  -128,  -128,
-    -128,   325,   337,  -128,    77,   317,   338,   126,    77,   240,
-     240,  -128,   339,   342,   249,   347,  -128,   416,  -128,   352,
-     170,   170,   170,   170,  -128,  -128,  -128,  -128,  -128,  -128,
-     362,  -128,  -128,   227,    -2,   359,   -10,   366,   240,   240,
-     240,   240,   375,   336,   384,   562,   590,   597,   317,   317,
-     213,   213,  -128,  -128,  -128,   385,  -128,    61,  -128,   357,
-     395,  -128,   -10,   396,   398,  -128,  -128,  -128,  -128,  -128,
-    -128,  -128,  -128,  -128,  -128,  -128,  -128,   240,  -128,  -128,
-     434,  -128,  -128,   400,  -128,   432,  -128,   424,  -128,   436,
-     436,   459,  -128,   240,    77,  -128,   402,   240,  -128,  -128,
-    -128,  -128,   404,   317,   411,  -128,   240,  -128,   415,  -128,
-    -128,   216,   418,   240,   413,  -128,   421,   240,  -128,   317,
-     216,   419,   302,   425,  -128,  -128,   317,  -128,   573
+    -125,     7,  -125,   308,   -41,  -125,  -125,  -125,  -125,   -19,
+    -125,  -125,  -125,  -125,  -125,    80,    80,  -125,   -19,   -19,
+    -125,  -125,  -125,  -125,  -125,  -125,   -19,   405,   364,   364,
+     -31,   -15,  -125,  -125,    -2,  -125,   528,   528,   337,   -18,
+     -19,   409,   -18,   528,   230,   187,   -18,   448,   448,  -125,
+     257,  -125,   448,   448,    -6,    15,    94,   309,  -125,    49,
+      19,    44,    95,    19,   309,   309,    63,   391,  -125,  -125,
+    -125,    90,   137,  -125,  -125,   145,  -125,   146,  -125,  -125,
+    -125,    66,  -125,  -125,    52,  -125,  -125,   150,  -125,   147,
+    -125,   137,    57,  -125,   448,   448,  -125,  -125,  -125,   448,
+     167,  -125,  -125,  -125,   184,   200,   431,  -125,    47,  -125,
+     201,   364,   217,   189,   223,   221,    63,   228,  -125,  -125,
+    -125,  -125,   289,   448,   448,   231,  -125,   181,  -125,   411,
+      54,   448,   -19,  -125,   237,   238,    12,  -125,   240,  -125,
+     241,   244,   246,   189,  -125,   245,   114,   319,   448,   448,
+     417,   243,  -125,  -125,  -125,   137,   364,   189,   293,   312,
+     313,   341,   364,   308,   542,   552,  -125,   189,   189,   364,
+     257,  -125,  -125,  -125,  -125,   282,  -125,   315,  -125,   189,
+     287,    42,   296,   114,   303,    63,    47,  -125,  -125,    54,
+     448,   448,   448,   363,   369,   448,   448,   448,   448,   448,
+    -125,  -125,   306,  -125,  -125,  -125,   311,   316,  -125,    53,
+     448,   321,    65,    53,   189,   189,  -125,   318,   324,   250,
+     325,  -125,   405,  -125,   326,   391,   391,   391,   391,  -125,
+    -125,  -125,  -125,  -125,   317,  -125,  -125,   231,   130,   328,
+     -19,   323,   189,   189,   189,   189,   334,   336,   340,   602,
+     621,   628,   448,   448,   197,   197,  -125,  -125,  -125,   352,
+    -125,    49,  -125,   516,   359,  -125,   -19,   366,   371,  -125,
+    -125,  -125,  -125,  -125,  -125,  -125,  -125,  -125,  -125,  -125,
+    -125,   189,  -125,  -125,   474,  -125,  -125,   361,  -125,   165,
+    -125,   399,  -125,   235,   235,   432,  -125,   189,    53,  -125,
+     376,   189,  -125,  -125,  -125,  -125,   377,   448,   380,  -125,
+     189,  -125,   383,  -125,  -125,   112,   385,   189,   386,  -125,
+     388,   189,  -125,   448,   112,   382,   267,   395,  -125,  -125,
+     448,  -125,   613
 };
 
 /* YYPGOTO[NTERM-NUM].  */
 static const yytype_int16 yypgoto[] =
 {
-    -128,  -128,  -128,   -77,  -128,  -128,  -128,   538,    50,   382,
-     -57,   429,    33,    -7,  -128,   -48,   -43,   -21,    36,  -127,
-     -23,  -128,    29,    17,  -101,   -28,   161,  -128,   -37,    -8,
-     -65,   299,     2,  -128,   -32
+    -125,  -125,  -125,   292,  -125,  -125,   578,    45,   354,   -56,
+     400,   -48,   -25,  -125,    -7,   -42,   -21,    -5,  -124,     5,
+    -125,   -10,    89,  -118,   -28,   140,  -125,   -46,     4,   -90,
+     277,    -4,  -125,   -16
 };
 
 /* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
    positive, shift that token.  If negative, reduce the rule which
-   number is the opposite.  If YYTABLE_NINF, syntax error.  */
-#define YYTABLE_NINF -64
+   number is the opposite.  If zero, do what YYDEFACT says.
+   If YYTABLE_NINF, syntax error.  */
+#define YYTABLE_NINF -61
 static const yytype_int16 yytable[] =
 {
-      90,    90,   117,   136,     2,   206,    71,    55,    57,    90,
-      90,    90,    94,    95,   104,   104,    90,    56,    56,   147,
-     248,   104,    93,   120,   137,   216,   142,   143,    36,    73,
-      92,    92,   107,    48,    49,   135,   208,   209,   210,   245,
-     148,    92,   144,   145,   113,   180,   181,   118,   222,   223,
-     123,   124,    48,    49,    41,   125,   131,   126,   127,    42,
-     177,   157,    50,   167,   138,   169,   105,   105,    59,    60,
-      96,   189,   155,   105,   106,    41,    67,   -63,    99,   100,
-     115,    50,   126,   127,   158,    52,    90,   223,   186,   235,
-     108,   237,    53,   114,    97,    54,   119,   122,    48,    49,
-     178,    98,    51,   170,    52,    74,   132,   183,    75,   243,
-     179,    53,    76,    77,    54,   133,    92,   134,   148,   224,
-      99,   100,    99,   100,    78,    79,   253,    50,   192,   193,
-      82,    90,   229,    41,   207,   146,   212,    90,   301,   149,
-      78,    79,   252,   240,   159,    90,    99,   100,   239,   241,
-      52,   150,   228,   151,   225,   124,   246,    53,   234,   101,
-      54,    92,   139,   255,   256,   257,   242,    92,   260,   261,
-     262,   263,   264,    78,   270,    92,   152,   268,    48,    49,
-     271,   272,   160,   269,   165,   213,   195,   196,   197,   198,
-     199,   200,   201,   202,   203,   204,   273,   274,   208,   209,
-     210,   171,   282,   282,   282,   282,   279,    50,    74,    75,
-     302,    75,   172,    76,    77,    76,    77,    48,    49,   173,
-     291,   186,   186,   202,   203,   204,   299,   300,   294,    73,
-      52,   182,   283,   283,   283,   283,   249,    53,    78,    79,
-      54,    48,   153,   154,    99,   100,    50,   309,   284,   285,
-     286,   205,   195,   196,   197,   198,   199,   200,   201,   202,
-     203,   204,    99,   100,   308,   324,   325,   315,   184,    52,
-      50,   187,   311,   188,   116,   314,    68,   191,    74,    54,
-     221,    75,   292,   293,   318,    76,    77,   190,   322,   155,
-     156,    51,   118,    52,   194,   328,   289,   332,   214,   331,
-      68,   215,   296,    54,   338,   195,   196,   197,   198,   199,
-     200,   201,   202,   203,   204,   320,     4,   277,   217,   218,
-     219,   220,   305,   231,   230,    48,    49,   227,     5,     6,
-       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
-      17,    18,   232,    19,    20,    21,    22,    23,    24,    25,
-      26,    27,    48,    49,    50,   233,   244,   247,    28,    29,
-     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
-     335,   245,   250,    30,    31,    32,   251,    52,    33,    48,
-      49,    50,    74,   258,    53,    75,   259,    54,   265,    76,
-      77,    78,    79,   266,   226,    80,    81,    99,   100,    48,
-      49,   267,    51,   297,    52,    48,    49,   275,    50,    74,
-     276,    68,    75,    82,    54,   278,    76,    77,    78,    79,
-     280,   303,    80,    81,    48,    49,   287,   288,    50,    51,
-     290,    52,   161,   162,    50,   163,    48,    49,    68,   295,
-      82,    54,    48,    49,   200,   201,   202,   203,   204,   110,
-     111,    52,   298,    50,   101,   174,   111,    52,    53,   304,
-     306,    54,   307,   312,    68,    50,   310,    54,   313,   316,
-      74,    50,   319,    75,    51,   321,    52,    76,    77,   323,
-     329,   164,   327,    68,   226,   330,    54,   334,    52,   336,
-     175,   333,   140,   254,    52,    53,    41,     0,    54,     0,
-       0,    68,     0,     0,    54,   195,   196,   197,   198,   199,
-     200,   201,   202,   203,   204,   195,   196,   197,   198,   199,
-     200,   201,   202,   203,   204,    74,     0,    74,    75,     0,
-      75,     0,    76,    77,    76,    77,     0,     0,     0,     0,
-      99,   100,    99,   100,    38,    39,    40,     0,    43,    44,
-      45,    46,    47,    41,     0,    58,   101,     0,    61,    62,
-      63,    64,    65,    66,     0,   236,   196,   197,   198,   199,
-     200,   201,   202,   203,   204,   238,   195,   196,   197,   198,
-     199,   200,   201,   202,   203,   204,   208,   209,   210,    75,
-       0,     0,     0,    76,    77,   197,   198,   199,   200,   201,
-     202,   203,   204,   198,   199,   200,   201,   202,   203,   204
+      89,    89,   114,   133,    92,   201,    70,     2,    89,    89,
+      89,    55,    55,   105,   134,    89,   139,   140,   176,    54,
+      56,   211,    35,    72,    91,    91,   103,   103,   217,   218,
+      93,    94,   104,   103,    91,    97,    98,   110,   112,   145,
+     115,   102,   102,   120,   121,    40,    40,    95,   102,   128,
+     117,   242,    47,    48,    41,   123,   124,   135,   129,   144,
+     154,    96,   132,    58,    59,   218,    77,    78,   152,   141,
+     142,    66,    97,    98,    47,   150,   151,   155,   164,   165,
+     237,    49,   130,    89,   106,   181,   178,   111,    47,    48,
+     116,   119,   203,   204,   205,   166,   247,    97,    98,   173,
+      77,    78,   175,    49,    51,   131,    40,    91,   -60,   184,
+     174,    52,    77,   264,    53,   145,   156,    49,    81,   187,
+     188,   162,   152,   153,    50,   202,    51,   207,    89,   224,
+     143,   223,   219,    67,    89,   295,    53,   229,    50,   234,
+      51,    89,    77,    78,   236,   220,   121,    52,    97,    98,
+      53,   240,    91,   158,   159,    74,   160,   146,    91,    75,
+      76,   318,   319,   262,   136,    91,   265,   266,   203,   204,
+     205,   239,   233,   235,   249,   250,   251,   208,   246,   254,
+     255,   256,   257,   258,   190,   191,   192,   193,   194,   195,
+     196,   197,   198,   199,   263,   286,   287,   276,   276,   276,
+     276,   273,   161,    73,   147,   296,    74,   197,   198,   199,
+      75,    76,   148,   149,   285,   181,   181,   157,    72,   267,
+     268,   277,   277,   277,   277,    73,   243,    73,    74,    40,
+      74,   167,    75,    76,    75,    76,   293,   294,    47,    48,
+      97,    98,   303,   195,   196,   197,   198,   199,   168,   200,
+     288,    40,   309,   190,   191,   192,   193,   194,   195,   196,
+     197,   198,   199,   122,   169,   123,   124,    49,   177,   308,
+     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
+     115,   179,   316,    97,    98,   283,   302,   182,   183,   322,
+      51,   290,   185,   325,   305,   113,   186,    67,   189,   225,
+      53,   209,   210,   314,   212,   213,   312,   326,   214,     4,
+     215,   299,   222,   216,   332,   278,   279,   280,   271,   226,
+     227,     5,     6,     7,     8,     9,    10,    11,    12,    13,
+      14,    15,    16,    17,    18,   329,    19,    20,    21,    22,
+      23,    24,    25,    26,    27,    47,    48,    73,   228,   238,
+      74,    28,    29,   241,    75,    76,   239,   203,   204,   205,
+      74,   244,    97,    98,    75,    76,    30,   245,    31,   252,
+     259,    32,    47,    48,    49,    73,   253,   221,    74,   260,
+     261,   281,    75,    76,    77,    78,   269,   284,    79,    80,
+      97,    98,   270,   272,   274,    50,   282,    51,   289,    47,
+      48,    49,    73,   291,    67,    74,    81,    53,   292,    75,
+      76,    77,    78,    47,    48,    79,    80,    47,    48,    47,
+      48,    99,    50,   298,    51,    47,    48,   304,    49,    73,
+     300,    67,    74,    81,    53,   301,    75,    76,   306,    47,
+      48,   307,    49,   310,   315,   313,    49,   317,    49,   321,
+     328,    51,   324,   323,    49,   230,    47,    48,    52,   330,
+     171,    53,   137,    50,   327,    51,   248,   108,    49,    51,
+       0,    51,    67,   221,     0,    53,    52,    51,    52,    53,
+      99,    53,    47,    48,    52,    49,     0,    53,     0,   170,
+       0,    51,     0,     0,     0,     0,     0,     0,    67,     0,
+       0,    53,     0,     0,     0,     0,     0,     0,    51,     0,
+       0,    49,     0,     0,     0,    52,     0,     0,    53,   190,
+     191,   192,   193,   194,   195,   196,   197,   198,   199,     0,
+       0,     0,     0,     0,    51,     0,     0,     0,     0,     0,
+       0,    67,     0,     0,    53,   190,   191,   192,   193,   194,
+     195,   196,   197,   198,   199,   190,   191,   192,   193,   194,
+     195,   196,   197,   198,   199,     0,    73,     0,     0,    74,
+       0,     0,     0,    75,    76,     0,     0,     0,     0,     0,
+     297,    97,    98,     0,    37,    38,    39,     0,    42,    43,
+      44,    45,    46,     0,     0,    57,     0,    99,    60,    61,
+      62,    63,    64,    65,     0,   231,   191,   192,   193,   194,
+     195,   196,   197,   198,   199,   232,   190,   191,   192,   193,
+     194,   195,   196,   197,   198,   199,   192,   193,   194,   195,
+     196,   197,   198,   199,   193,   194,   195,   196,   197,   198,
+     199
 };
 
-#define yypact_value_is_default(Yystate) \
-  (!!((Yystate) == (-128)))
-
-#define yytable_value_is_error(Yytable_value) \
-  YYID (0)
-
 static const yytype_int16 yycheck[] =
 {
-      28,    29,    45,    60,     0,   132,    27,    15,    16,    37,
-      38,    39,    61,    62,    37,    38,    44,    15,    16,    67,
-       9,    44,    29,    46,    61,     9,    63,    64,    63,    27,
-      28,    29,    39,     8,     9,    58,    38,    39,    40,    41,
-      68,    39,    65,    66,    42,   110,   111,    45,   149,   150,
-      48,    49,     8,     9,    64,     6,    54,     8,     9,     9,
-     108,    82,    37,    95,    62,    97,    37,    38,    18,    19,
-      61,   119,    56,    44,    38,    64,    26,    66,    53,    54,
-      44,    37,     8,     9,    82,    60,   114,   188,   116,   166,
-      40,   168,    67,    43,    62,    70,    46,    47,     8,     9,
-     108,    63,    58,   101,    60,    38,    64,   114,    41,   174,
-     108,    67,    45,    46,    70,    67,   114,    11,   146,   151,
-      53,    54,    53,    54,    47,    48,   191,    37,   126,   127,
-      69,   159,   160,    64,   132,    67,   134,   165,   265,    67,
-      47,    48,   190,   171,    64,   173,    53,    54,   171,   172,
-      60,    67,   159,    67,   152,   153,   184,    67,   165,    69,
-      70,   159,    69,   195,   196,   197,   173,   165,   200,   201,
-     202,   203,   204,    47,    48,   173,    67,   214,     8,     9,
-     217,   218,    67,   215,    64,   135,     3,     4,     5,     6,
-       7,     8,     9,    10,    11,    12,   219,   220,    38,    39,
-      40,    64,   230,   231,   232,   233,   227,    37,    38,    41,
-     267,    41,    64,    45,    46,    45,    46,     8,     9,    64,
-     248,   249,   250,    10,    11,    12,   258,   259,   251,   227,
-      60,    67,   230,   231,   232,   233,   186,    67,    47,    48,
-      70,     8,     9,    10,    53,    54,    37,   290,   231,   232,
-     233,    68,     3,     4,     5,     6,     7,     8,     9,    10,
-      11,    12,    53,    54,   287,    49,    50,   304,    64,    60,
-      37,    64,   295,    67,    65,   303,    67,     7,    38,    70,
-      68,    41,   249,   250,   307,    45,    46,    64,   316,    56,
-      57,    58,   290,    60,    67,   323,   246,   329,    64,   327,
-      67,    64,   252,    70,   336,     3,     4,     5,     6,     7,
-       8,     9,    10,    11,    12,   313,     1,    68,    64,    64,
-      64,    64,   272,     7,     6,     8,     9,    69,    13,    14,
-      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
-      25,    26,     7,    28,    29,    30,    31,    32,    33,    34,
-      35,    36,     8,     9,    37,     7,    67,    66,    43,    44,
+      28,    29,    44,    59,    29,   129,    27,     0,    36,    37,
+      38,    15,    16,    38,    60,    43,    62,    63,   108,    15,
+      16,     9,    63,    27,    28,    29,    36,    37,   146,   147,
+      61,    62,    37,    43,    38,    53,    54,    41,    43,    67,
+      44,    36,    37,    47,    48,    64,    64,    62,    43,    53,
+      45,     9,     8,     9,     9,     8,     9,    61,    64,    66,
+      81,    63,    57,    18,    19,   183,    47,    48,    56,    64,
+      65,    26,    53,    54,     8,     9,    10,    81,    94,    95,
+     170,    37,    67,   111,    39,   113,   111,    42,     8,     9,
+      45,    46,    38,    39,    40,    99,   186,    53,    54,   106,
+      47,    48,   106,    37,    60,    11,    64,   111,    66,   116,
+     106,    67,    47,    48,    70,   143,    64,    37,    69,   123,
+     124,    64,    56,    57,    58,   129,    60,   131,   156,   157,
+      67,   156,   148,    67,   162,   259,    70,   162,    58,   167,
+      60,   169,    47,    48,   169,   149,   150,    67,    53,    54,
+      70,   179,   156,     6,     7,    41,     9,    67,   162,    45,
+      46,    49,    50,   209,    69,   169,   212,   213,    38,    39,
+      40,    41,   167,   168,   190,   191,   192,   132,   185,   195,
+     196,   197,   198,   199,     3,     4,     5,     6,     7,     8,
+       9,    10,    11,    12,   210,   243,   244,   225,   226,   227,
+     228,   222,    55,    38,    67,   261,    41,    10,    11,    12,
+      45,    46,    67,    67,   242,   243,   244,    67,   222,   214,
+     215,   225,   226,   227,   228,    38,   181,    38,    41,    64,
+      41,    64,    45,    46,    45,    46,   252,   253,     8,     9,
+      53,    54,   284,     8,     9,    10,    11,    12,    64,    68,
+     245,    64,   298,     3,     4,     5,     6,     7,     8,     9,
+      10,    11,    12,     6,    64,     8,     9,    37,    67,   297,
        3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
-      68,    41,    65,    58,    59,    60,    64,    60,    63,     8,
-       9,    37,    38,     6,    67,    41,     7,    70,    64,    45,
-      46,    47,    48,    68,    56,    51,    52,    53,    54,     8,
-       9,    64,    58,    67,    60,     8,     9,    68,    37,    38,
-      68,    67,    41,    69,    70,    68,    45,    46,    47,    48,
-      68,    64,    51,    52,     8,     9,    64,    68,    37,    58,
-      64,    60,     6,     7,    37,     9,     8,     9,    67,    64,
-      69,    70,     8,     9,     8,     9,    10,    11,    12,    58,
-      59,    60,    68,    37,    69,    58,    59,    60,    67,    64,
-      64,    70,    64,    39,    67,    37,    66,    70,     9,    67,
-      38,    37,    68,    41,    58,    64,    60,    45,    46,    64,
-      67,    55,    64,    67,    56,    64,    70,    68,    60,    64,
-     108,   330,    63,   194,    60,    67,    64,    -1,    70,    -1,
+     284,    64,   310,    53,    54,   240,   281,    64,    67,   317,
+      60,   246,    64,   321,   289,    65,     7,    67,    67,     6,
+      70,    64,    64,   307,    64,    64,   301,   323,    64,     1,
+      64,   266,    69,    68,   330,   226,   227,   228,    68,     7,
+       7,    13,    14,    15,    16,    17,    18,    19,    20,    21,
+      22,    23,    24,    25,    26,    68,    28,    29,    30,    31,
+      32,    33,    34,    35,    36,     8,     9,    38,     7,    67,
+      41,    43,    44,    66,    45,    46,    41,    38,    39,    40,
+      41,    65,    53,    54,    45,    46,    58,    64,    60,     6,
+      64,    63,     8,     9,    37,    38,     7,    56,    41,    68,
+      64,    64,    45,    46,    47,    48,    68,    64,    51,    52,
+      53,    54,    68,    68,    68,    58,    68,    60,    64,     8,
+       9,    37,    38,    67,    67,    41,    69,    70,    68,    45,
+      46,    47,    48,     8,     9,    51,    52,     8,     9,     8,
+       9,    69,    58,    64,    60,     8,     9,    66,    37,    38,
+      64,    67,    41,    69,    70,    64,    45,    46,    39,     8,
+       9,     9,    37,    67,    64,    68,    37,    64,    37,    64,
+      68,    60,    64,    67,    37,   163,     8,     9,    67,    64,
+     106,    70,    62,    58,   324,    60,   189,    58,    37,    60,
+      -1,    60,    67,    56,    -1,    70,    67,    60,    67,    70,
+      69,    70,     8,     9,    67,    37,    -1,    70,    -1,    58,
+      -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
+      -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,
+      -1,    37,    -1,    -1,    -1,    67,    -1,    -1,    70,     3,
+       4,     5,     6,     7,     8,     9,    10,    11,    12,    -1,
+      -1,    -1,    -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,
       -1,    67,    -1,    -1,    70,     3,     4,     5,     6,     7,
        8,     9,    10,    11,    12,     3,     4,     5,     6,     7,
-       8,     9,    10,    11,    12,    38,    -1,    38,    41,    -1,
-      41,    -1,    45,    46,    45,    46,    -1,    -1,    -1,    -1,
-      53,    54,    53,    54,     6,     7,     8,    -1,    10,    11,
-      12,    13,    14,    64,    -1,    17,    69,    -1,    20,    21,
+       8,     9,    10,    11,    12,    -1,    38,    -1,    -1,    41,
+      -1,    -1,    -1,    45,    46,    -1,    -1,    -1,    -1,    -1,
+      64,    53,    54,    -1,     6,     7,     8,    -1,    10,    11,
+      12,    13,    14,    -1,    -1,    17,    -1,    69,    20,    21,
       22,    23,    24,    25,    -1,    63,     4,     5,     6,     7,
        8,     9,    10,    11,    12,    63,     3,     4,     5,     6,
-       7,     8,     9,    10,    11,    12,    38,    39,    40,    41,
-      -1,    -1,    -1,    45,    46,     5,     6,     7,     8,     9,
-      10,    11,    12,     6,     7,     8,     9,    10,    11,    12
+       7,     8,     9,    10,    11,    12,     5,     6,     7,     8,
+       9,    10,    11,    12,     6,     7,     8,     9,    10,    11,
+      12
 };
 
 /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
@@ -956,37 +913,37 @@ static const yytype_uint8 yystos[] =
        0,    72,     0,    73,     1,    13,    14,    15,    16,    17,
       18,    19,    20,    21,    22,    23,    24,    25,    26,    28,
       29,    30,    31,    32,    33,    34,    35,    36,    43,    44,
-      58,    59,    60,    63,    74,    77,    63,    78,    78,    78,
-      78,    64,    79,    78,    78,    78,    78,    78,     8,     9,
-      37,    58,    60,    67,    70,   100,   103,   100,    78,    79,
-      79,    78,    78,    78,    78,    78,    78,    79,    67,    86,
-      87,    88,   100,   103,    38,    41,    45,    46,    47,    48,
-      51,    52,    69,    81,    82,    84,    88,    91,    93,    95,
-      96,    99,   103,    84,    61,    62,    61,    62,    63,    53,
-      54,    69,    89,    90,    91,    93,    89,    84,    79,    79,
-      58,    59,    80,   103,    79,    89,    65,    87,   103,    79,
-      91,    96,    79,   103,   103,     6,     8,     9,   101,   103,
-     105,   103,    64,    67,    11,    91,    81,    99,   103,    69,
-      82,    98,    99,    99,    91,    91,    67,    86,    96,    67,
-      67,    67,    67,     9,    10,    56,    57,    88,   103,    64,
-      67,     6,     7,     9,    55,    64,    76,   105,    75,   105,
-     103,    64,    64,    64,    58,    80,    85,    86,   100,   103,
-     101,   101,    67,    84,    64,    83,    96,    64,    67,    86,
-      64,     7,   103,   103,    67,     3,     4,     5,     6,     7,
-       8,     9,    10,    11,    12,    68,    90,   103,    38,    39,
-      40,   102,   103,    79,    64,    64,     9,    64,    64,    64,
-      64,    68,    95,    95,   105,   103,    56,    69,    84,    96,
-       6,     7,     7,     7,    84,    74,    63,    74,    63,    91,
-      96,    91,    84,   101,    67,    41,    96,    66,     9,    79,
-      65,    64,    86,   101,   102,   105,   105,   105,     6,     7,
-     105,   105,   105,   105,   105,    64,    68,    64,    99,   105,
-      48,    99,    99,    91,    91,    68,    68,    68,    68,    88,
-      68,    94,    96,   103,    94,    94,    94,    64,    68,    79,
-      64,    96,    83,    83,    91,    64,    79,    67,    68,   105,
-     105,    90,    81,    64,    64,    79,    64,    64,    91,    87,
-      66,    91,    39,     9,    96,    99,    67,    92,    91,    68,
-     103,    64,    96,    64,    49,    50,    97,    64,    96,    67,
-      64,    96,   105,    97,    68,    68,    64,   104,   105
+      58,    60,    63,    74,    76,    63,    77,    77,    77,    77,
+      64,    78,    77,    77,    77,    77,    77,     8,     9,    37,
+      58,    60,    67,    70,    99,   102,    99,    77,    78,    78,
+      77,    77,    77,    77,    77,    77,    78,    67,    85,    86,
+      87,    99,   102,    38,    41,    45,    46,    47,    48,    51,
+      52,    69,    80,    81,    83,    87,    90,    92,    94,    95,
+      98,   102,    83,    61,    62,    62,    63,    53,    54,    69,
+      88,    89,    90,    92,    88,    83,    78,    78,    58,    79,
+     102,    78,    88,    65,    86,   102,    78,    90,    95,    78,
+     102,   102,     6,     8,     9,   100,   102,   104,   102,    64,
+      67,    11,    90,    80,    98,   102,    69,    81,    97,    98,
+      98,    90,    90,    67,    85,    95,    67,    67,    67,    67,
+       9,    10,    56,    57,    87,   102,    64,    67,     6,     7,
+       9,    55,    64,    75,   104,   104,   102,    64,    64,    64,
+      58,    79,    84,    85,    99,   102,   100,    67,    83,    64,
+      82,    95,    64,    67,    85,    64,     7,   102,   102,    67,
+       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
+      68,    89,   102,    38,    39,    40,   101,   102,    78,    64,
+      64,     9,    64,    64,    64,    64,    68,    94,    94,   104,
+     102,    56,    69,    83,    95,     6,     7,     7,     7,    83,
+      74,    63,    63,    90,    95,    90,    83,   100,    67,    41,
+      95,    66,     9,    78,    65,    64,    85,   100,   101,   104,
+     104,   104,     6,     7,   104,   104,   104,   104,   104,    64,
+      68,    64,    98,   104,    48,    98,    98,    90,    90,    68,
+      68,    68,    68,    87,    68,    93,    95,   102,    93,    93,
+      93,    64,    68,    78,    64,    95,    82,    82,    90,    64,
+      78,    67,    68,   104,   104,    89,    80,    64,    64,    78,
+      64,    64,    90,    86,    66,    90,    39,     9,    95,    98,
+      67,    91,    90,    68,   102,    64,    95,    64,    49,    50,
+      96,    64,    95,    67,    64,    95,   104,    96,    68,    68,
+      64,   103,   104
 };
 
 #define yyerrok		(yyerrstatus = 0)
@@ -1001,50 +958,78 @@ static const yytype_uint8 yystos[] =
 
 /* Like YYERROR except do call yyerror.  This remains here temporarily
    to ease the transition to the new meaning of YYERROR, for GCC.
-   Once GCC version 2 has supplanted version 1, this can go.  However,
-   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
-   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
-   discussed.  */
+   Once GCC version 2 has supplanted version 1, this can go.  */
 
 #define YYFAIL		goto yyerrlab
-#if defined YYFAIL
-  /* This is here to suppress warnings from the GCC cpp's
-     -Wunused-macros.  Normally we don't worry about that warning, but
-     some users do, and we want to make it easy for users to remove
-     YYFAIL uses, which will produce warnings from Bison 2.5.  */
-#endif
 
 #define YYRECOVERING()  (!!yyerrstatus)
 
-#define YYBACKUP(Token, Value)                                  \
-do                                                              \
-  if (yychar == YYEMPTY)                                        \
-    {                                                           \
-      yychar = (Token);                                         \
-      yylval = (Value);                                         \
-      YYPOPSTACK (yylen);                                       \
-      yystate = *yyssp;                                         \
-      goto yybackup;                                            \
-    }                                                           \
-  else                                                          \
-    {                                                           \
+#define YYBACKUP(Token, Value)					\
+do								\
+  if (yychar == YYEMPTY && yylen == 1)				\
+    {								\
+      yychar = (Token);						\
+      yylval = (Value);						\
+      yytoken = YYTRANSLATE (yychar);				\
+      YYPOPSTACK (1);						\
+      goto yybackup;						\
+    }								\
+  else								\
+    {								\
       yyerror (YY_("syntax error: cannot back up")); \
       YYERROR;							\
     }								\
 while (YYID (0))
 
-/* Error token number */
+
 #define YYTERROR	1
 #define YYERRCODE	256
 
 
-/* This macro is provided for backward compatibility. */
+/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
+   If N is 0, then set CURRENT to the empty location which ends
+   the previous symbol: RHS[0] (always defined).  */
+
+#define YYRHSLOC(Rhs, K) ((Rhs)[K])
+#ifndef YYLLOC_DEFAULT
+# define YYLLOC_DEFAULT(Current, Rhs, N)				\
+    do									\
+      if (YYID (N))                                                    \
+	{								\
+	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
+	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
+	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
+	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
+	}								\
+      else								\
+	{								\
+	  (Current).first_line   = (Current).last_line   =		\
+	    YYRHSLOC (Rhs, 0).last_line;				\
+	  (Current).first_column = (Current).last_column =		\
+	    YYRHSLOC (Rhs, 0).last_column;				\
+	}								\
+    while (YYID (0))
+#endif
+
+
+/* YY_LOCATION_PRINT -- Print the location on the stream.
+   This macro was not mandated originally: define only if we know
+   we won't break user code: when these are the locations we know.  */
+
 #ifndef YY_LOCATION_PRINT
-# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
+# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
+#  define YY_LOCATION_PRINT(File, Loc)			\
+     fprintf (File, "%d.%d-%d.%d",			\
+	      (Loc).first_line, (Loc).first_column,	\
+	      (Loc).last_line,  (Loc).last_column)
+# else
+#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
+# endif
 #endif
 
 
 /* YYLEX -- calling `yylex' with the right arguments.  */
+
 #ifdef YYLEX_PARAM
 # define YYLEX yylex (YYLEX_PARAM)
 #else
@@ -1094,8 +1079,6 @@ yy_symbol_value_print (yyoutput, yytype, yyvaluep)
     YYSTYPE const * const yyvaluep;
 #endif
 {
-  FILE *yyo = yyoutput;
-  YYUSE (yyo);
   if (!yyvaluep)
     return;
 # ifdef YYPRINT
@@ -1104,7 +1087,11 @@ yy_symbol_value_print (yyoutput, yytype, yyvaluep)
 # else
   YYUSE (yyoutput);
 # endif
-  YYUSE (yytype);
+  switch (yytype)
+    {
+      default:
+	break;
+    }
 }
 
 
@@ -1141,20 +1128,17 @@ yy_symbol_print (yyoutput, yytype, yyvaluep)
 #if (defined __STDC__ || defined __C99__FUNC__ \
      || defined __cplusplus || defined _MSC_VER)
 static void
-yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
+yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
 #else
 static void
-yy_stack_print (yybottom, yytop)
-    yytype_int16 *yybottom;
-    yytype_int16 *yytop;
+yy_stack_print (bottom, top)
+    yytype_int16 *bottom;
+    yytype_int16 *top;
 #endif
 {
   YYFPRINTF (stderr, "Stack now");
-  for (; yybottom <= yytop; yybottom++)
-    {
-      int yybot = *yybottom;
-      YYFPRINTF (stderr, " %d", yybot);
-    }
+  for (; bottom <= top; ++bottom)
+    YYFPRINTF (stderr, " %d", *bottom);
   YYFPRINTF (stderr, "\n");
 }
 
@@ -1188,11 +1172,11 @@ yy_reduce_print (yyvsp, yyrule)
   /* The symbols being reduced.  */
   for (yyi = 0; yyi < yynrhs; yyi++)
     {
-      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
+      fprintf (stderr, "   $%d = ", yyi + 1);
       yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
 		       &(yyvsp[(yyi + 1) - (yynrhs)])
 		       		       );
-      YYFPRINTF (stderr, "\n");
+      fprintf (stderr, "\n");
     }
 }
 
@@ -1229,6 +1213,7 @@ int yydebug;
 # define YYMAXDEPTH 10000
 #endif
 
+
 
 #if YYERROR_VERBOSE
 
@@ -1331,145 +1316,115 @@ yytnamerr (char *yyres, const char *yystr)
 }
 # endif
 
-/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
-   about the unexpected token YYTOKEN for the state stack whose top is
-   YYSSP.
-
-   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
-   not large enough to hold the message.  In that case, also set
-   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
-   required number of bytes is too large to store.  */
-static int
-yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
-                yytype_int16 *yyssp, int yytoken)
+/* Copy into YYRESULT an error message about the unexpected token
+   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
+   including the terminating null byte.  If YYRESULT is null, do not
+   copy anything; just return the number of bytes that would be
+   copied.  As a special case, return 0 if an ordinary "syntax error"
+   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
+   size calculation.  */
+static YYSIZE_T
+yysyntax_error (char *yyresult, int yystate, int yychar)
 {
-  YYSIZE_T yysize0 = yytnamerr (YY_NULL, yytname[yytoken]);
-  YYSIZE_T yysize = yysize0;
-  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
-  /* Internationalized format string. */
-  const char *yyformat = YY_NULL;
-  /* Arguments of yyformat. */
-  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
-  /* Number of reported tokens (one for the "unexpected", one per
-     "expected"). */
-  int yycount = 0;
-
-  /* There are many possibilities here to consider:
-     - Assume YYFAIL is not used.  It's too flawed to consider.  See
-       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
-       for details.  YYERROR is fine as it does not invoke this
-       function.
-     - If this state is a consistent state with a default action, then
-       the only way this function was invoked is if the default action
-       is an error action.  In that case, don't check for expected
-       tokens because there are none.
-     - The only way there can be no lookahead present (in yychar) is if
-       this state is a consistent state with a default action.  Thus,
-       detecting the absence of a lookahead is sufficient to determine
-       that there is no unexpected or expected token to report.  In that
-       case, just report a simple "syntax error".
-     - Don't assume there isn't a lookahead just because this state is a
-       consistent state with a default action.  There might have been a
-       previous inconsistent state, consistent state with a non-default
-       action, or user semantic action that manipulated yychar.
-     - Of course, the expected token list depends on states to have
-       correct lookahead information, and it depends on the parser not
-       to perform extra reductions after fetching a lookahead from the
-       scanner and before detecting a syntax error.  Thus, state merging
-       (from LALR or IELR) and default reductions corrupt the expected
-       token list.  However, the list is correct for canonical LR with
-       one exception: it will still contain any token that will not be
-       accepted due to an error action in a later state.
-  */
-  if (yytoken != YYEMPTY)
-    {
-      int yyn = yypact[*yyssp];
-      yyarg[yycount++] = yytname[yytoken];
-      if (!yypact_value_is_default (yyn))
-        {
-          /* Start YYX at -YYN if negative to avoid negative indexes in
-             YYCHECK.  In other words, skip the first -YYN actions for
-             this state because they are default actions.  */
-          int yyxbegin = yyn < 0 ? -yyn : 0;
-          /* Stay within bounds of both yycheck and yytname.  */
-          int yychecklim = YYLAST - yyn + 1;
-          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
-          int yyx;
-
-          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
-            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
-                && !yytable_value_is_error (yytable[yyx + yyn]))
-              {
-                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
-                  {
-                    yycount = 1;
-                    yysize = yysize0;
-                    break;
-                  }
-                yyarg[yycount++] = yytname[yyx];
-                {
-                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
-                  if (! (yysize <= yysize1
-                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
-                    return 2;
-                  yysize = yysize1;
-                }
-              }
-        }
-    }
+  int yyn = yypact[yystate];
 
-  switch (yycount)
-    {
-# define YYCASE_(N, S)                      \
-      case N:                               \
-        yyformat = S;                       \
-      break
-      YYCASE_(0, YY_("syntax error"));
-      YYCASE_(1, YY_("syntax error, unexpected %s"));
-      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
-      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
-      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
-      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
-# undef YYCASE_
-    }
+  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
+    return 0;
+  else
+    {
+      int yytype = YYTRANSLATE (yychar);
+      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
+      YYSIZE_T yysize = yysize0;
+      YYSIZE_T yysize1;
+      int yysize_overflow = 0;
+      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
+      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
+      int yyx;
+
+# if 0
+      /* This is so xgettext sees the translatable formats that are
+	 constructed on the fly.  */
+      YY_("syntax error, unexpected %s");
+      YY_("syntax error, unexpected %s, expecting %s");
+      YY_("syntax error, unexpected %s, expecting %s or %s");
+      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
+      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
+# endif
+      char *yyfmt;
+      char const *yyf;
+      static char const yyunexpected[] = "syntax error, unexpected %s";
+      static char const yyexpecting[] = ", expecting %s";
+      static char const yyor[] = " or %s";
+      char yyformat[sizeof yyunexpected
+		    + sizeof yyexpecting - 1
+		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
+		       * (sizeof yyor - 1))];
+      char const *yyprefix = yyexpecting;
+
+      /* Start YYX at -YYN if negative to avoid negative indexes in
+	 YYCHECK.  */
+      int yyxbegin = yyn < 0 ? -yyn : 0;
+
+      /* Stay within bounds of both yycheck and yytname.  */
+      int yychecklim = YYLAST - yyn + 1;
+      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
+      int yycount = 1;
+
+      yyarg[0] = yytname[yytype];
+      yyfmt = yystpcpy (yyformat, yyunexpected);
+
+      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
+	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
+	  {
+	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
+	      {
+		yycount = 1;
+		yysize = yysize0;
+		yyformat[sizeof yyunexpected - 1] = '\0';
+		break;
+	      }
+	    yyarg[yycount++] = yytname[yyx];
+	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
+	    yysize_overflow |= (yysize1 < yysize);
+	    yysize = yysize1;
+	    yyfmt = yystpcpy (yyfmt, yyprefix);
+	    yyprefix = yyor;
+	  }
 
-  {
-    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
-    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
-      return 2;
-    yysize = yysize1;
-  }
+      yyf = YY_(yyformat);
+      yysize1 = yysize + yystrlen (yyf);
+      yysize_overflow |= (yysize1 < yysize);
+      yysize = yysize1;
 
-  if (*yymsg_alloc < yysize)
-    {
-      *yymsg_alloc = 2 * yysize;
-      if (! (yysize <= *yymsg_alloc
-             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
-        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
-      return 1;
-    }
+      if (yysize_overflow)
+	return YYSIZE_MAXIMUM;
 
-  /* Avoid sprintf, as that infringes on the user's name space.
-     Don't have undefined behavior even if the translation
-     produced a string with the wrong number of "%s"s.  */
-  {
-    char *yyp = *yymsg;
-    int yyi = 0;
-    while ((*yyp = *yyformat) != '\0')
-      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
-        {
-          yyp += yytnamerr (yyp, yyarg[yyi++]);
-          yyformat += 2;
-        }
-      else
-        {
-          yyp++;
-          yyformat++;
-        }
-  }
-  return 0;
+      if (yyresult)
+	{
+	  /* Avoid sprintf, as that infringes on the user's name space.
+	     Don't have undefined behavior even if the translation
+	     produced a string with the wrong number of "%s"s.  */
+	  char *yyp = yyresult;
+	  int yyi = 0;
+	  while ((*yyp = *yyf) != '\0')
+	    {
+	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
+		{
+		  yyp += yytnamerr (yyp, yyarg[yyi++]);
+		  yyf += 2;
+		}
+	      else
+		{
+		  yyp++;
+		  yyf++;
+		}
+	    }
+	}
+      return yysize;
+    }
 }
 #endif /* YYERROR_VERBOSE */
+
 
 /*-----------------------------------------------.
 | Release the memory associated to this symbol.  |
@@ -1494,31 +1449,44 @@ yydestruct (yymsg, yytype, yyvaluep)
     yymsg = "Deleting";
   YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);
 
-  YYUSE (yytype);
-}
+  switch (yytype)
+    {
 
+      default:
+	break;
+    }
+}
+
 
+/* Prevent warnings from -Wmissing-prototypes.  */
 
+#ifdef YYPARSE_PARAM
+#if defined __STDC__ || defined __cplusplus
+int yyparse (void *YYPARSE_PARAM);
+#else
+int yyparse ();
+#endif
+#else /* ! YYPARSE_PARAM */
+#if defined __STDC__ || defined __cplusplus
+int yyparse (void);
+#else
+int yyparse ();
+#endif
+#endif /* ! YYPARSE_PARAM */
 
-/* The lookahead symbol.  */
-int yychar;
 
 
-#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
-# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
-# define YY_IGNORE_MAYBE_UNINITIALIZED_END
-#endif
-#ifndef YY_INITIAL_VALUE
-# define YY_INITIAL_VALUE(Value) /* Nothing. */
-#endif
+/* The look-ahead symbol.  */
+int yychar;
 
-/* The semantic value of the lookahead symbol.  */
-YYSTYPE yylval YY_INITIAL_VALUE(yyval_default);
+/* The semantic value of the look-ahead symbol.  */
+YYSTYPE yylval;
 
 /* Number of syntax errors so far.  */
 int yynerrs;
 
 
+
 /*----------.
 | yyparse.  |
 `----------*/
@@ -1545,37 +1513,14 @@ yyparse ()
 #endif
 #endif
 {
-    int yystate;
-    /* Number of tokens to shift before error messages enabled.  */
-    int yyerrstatus;
-
-    /* The stacks and their tools:
-       `yyss': related to states.
-       `yyvs': related to semantic values.
-
-       Refer to the stacks through separate pointers, to allow yyoverflow
-       to reallocate them elsewhere.  */
-
-    /* The state stack.  */
-    yytype_int16 yyssa[YYINITDEPTH];
-    yytype_int16 *yyss;
-    yytype_int16 *yyssp;
-
-    /* The semantic value stack.  */
-    YYSTYPE yyvsa[YYINITDEPTH];
-    YYSTYPE *yyvs;
-    YYSTYPE *yyvsp;
-
-    YYSIZE_T yystacksize;
-
+  
+  int yystate;
   int yyn;
   int yyresult;
-  /* Lookahead token as an internal (translated) token number.  */
+  /* Number of tokens to shift before error messages enabled.  */
+  int yyerrstatus;
+  /* Look-ahead token as an internal (translated) token number.  */
   int yytoken = 0;
-  /* The variables used to return semantic value and location from the
-     action routines.  */
-  YYSTYPE yyval;
-
 #if YYERROR_VERBOSE
   /* Buffer for error messages, and its allocated size.  */
   char yymsgbuf[128];
@@ -1583,22 +1528,54 @@ yyparse ()
   YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
 #endif
 
+  /* Three stacks and their tools:
+     `yyss': related to states,
+     `yyvs': related to semantic values,
+     `yyls': related to locations.
+
+     Refer to the stacks thru separate pointers, to allow yyoverflow
+     to reallocate them elsewhere.  */
+
+  /* The state stack.  */
+  yytype_int16 yyssa[YYINITDEPTH];
+  yytype_int16 *yyss = yyssa;
+  yytype_int16 *yyssp;
+
+  /* The semantic value stack.  */
+  YYSTYPE yyvsa[YYINITDEPTH];
+  YYSTYPE *yyvs = yyvsa;
+  YYSTYPE *yyvsp;
+
+
+
 #define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))
 
+  YYSIZE_T yystacksize = YYINITDEPTH;
+
+  /* The variables used to return semantic value and location from the
+     action routines.  */
+  YYSTYPE yyval;
+
+
   /* The number of symbols on the RHS of the reduced rule.
      Keep to zero when no symbol should be popped.  */
   int yylen = 0;
 
-  yyssp = yyss = yyssa;
-  yyvsp = yyvs = yyvsa;
-  yystacksize = YYINITDEPTH;
-
   YYDPRINTF ((stderr, "Starting parse\n"));
 
   yystate = 0;
   yyerrstatus = 0;
   yynerrs = 0;
-  yychar = YYEMPTY; /* Cause a token to be read.  */
+  yychar = YYEMPTY;		/* Cause a token to be read.  */
+
+  /* Initialize stack pointers.
+     Waste one element of value and location stack
+     so that they stay on the same level as the state stack.
+     The wasted elements are never initialized.  */
+
+  yyssp = yyss;
+  yyvsp = yyvs;
+
   goto yysetstate;
 
 /*------------------------------------------------------------.
@@ -1625,6 +1602,7 @@ yyparse ()
 	YYSTYPE *yyvs1 = yyvs;
 	yytype_int16 *yyss1 = yyss;
 
+
 	/* Each stack pointer address is followed by the size of the
 	   data in use in that stack, in bytes.  This used to be a
 	   conditional around just the two extra args, but that might
@@ -1632,6 +1610,7 @@ yyparse ()
 	yyoverflow (YY_("memory exhausted"),
 		    &yyss1, yysize * sizeof (*yyssp),
 		    &yyvs1, yysize * sizeof (*yyvsp),
+
 		    &yystacksize);
 
 	yyss = yyss1;
@@ -1654,8 +1633,9 @@ yyparse ()
 	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
 	if (! yyptr)
 	  goto yyexhaustedlab;
-	YYSTACK_RELOCATE (yyss_alloc, yyss);
-	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
+	YYSTACK_RELOCATE (yyss);
+	YYSTACK_RELOCATE (yyvs);
+
 #  undef YYSTACK_RELOCATE
 	if (yyss1 != yyssa)
 	  YYSTACK_FREE (yyss1);
@@ -1666,6 +1646,7 @@ yyparse ()
       yyssp = yyss + yysize - 1;
       yyvsp = yyvs + yysize - 1;
 
+
       YYDPRINTF ((stderr, "Stack size increased to %lu\n",
 		  (unsigned long int) yystacksize));
 
@@ -1675,9 +1656,6 @@ yyparse ()
 
   YYDPRINTF ((stderr, "Entering state %d\n", yystate));
 
-  if (yystate == YYFINAL)
-    YYACCEPT;
-
   goto yybackup;
 
 /*-----------.
@@ -1686,16 +1664,16 @@ yyparse ()
 yybackup:
 
   /* Do appropriate processing given the current state.  Read a
-     lookahead token if we need one and don't already have one.  */
+     look-ahead token if we need one and don't already have one.  */
 
-  /* First try to decide what to do without reference to lookahead token.  */
+  /* First try to decide what to do without reference to look-ahead token.  */
   yyn = yypact[yystate];
-  if (yypact_value_is_default (yyn))
+  if (yyn == YYPACT_NINF)
     goto yydefault;
 
-  /* Not known => get a lookahead token if don't already have one.  */
+  /* Not known => get a look-ahead token if don't already have one.  */
 
-  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
+  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
   if (yychar == YYEMPTY)
     {
       YYDPRINTF ((stderr, "Reading a token: "));
@@ -1721,27 +1699,29 @@ yybackup:
   yyn = yytable[yyn];
   if (yyn <= 0)
     {
-      if (yytable_value_is_error (yyn))
-        goto yyerrlab;
+      if (yyn == 0 || yyn == YYTABLE_NINF)
+	goto yyerrlab;
       yyn = -yyn;
       goto yyreduce;
     }
 
+  if (yyn == YYFINAL)
+    YYACCEPT;
+
   /* Count tokens shifted since error; after three, turn off error
      status.  */
   if (yyerrstatus)
     yyerrstatus--;
 
-  /* Shift the lookahead token.  */
+  /* Shift the look-ahead token.  */
   YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
 
-  /* Discard the shifted token.  */
-  yychar = YYEMPTY;
+  /* Discard the shifted token unless it is eof.  */
+  if (yychar != YYEOF)
+    yychar = YYEMPTY;
 
   yystate = yyn;
-  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
   *++yyvsp = yylval;
-  YY_IGNORE_MAYBE_UNINITIALIZED_END
 
   goto yynewstate;
 
@@ -1778,7 +1758,6 @@ yyreduce:
   switch (yyn)
     {
         case 3:
-/* Line 1787 of yacc.c  */
 #line 70 "a.y"
     {
 		stmtline = lineno;
@@ -1786,36 +1765,26 @@ yyreduce:
     break;
 
   case 5:
-/* Line 1787 of yacc.c  */
 #line 77 "a.y"
     {
-		if((yyvsp[(1) - (2)].sym)->value != pc)
-			yyerror("redeclaration of %s", (yyvsp[(1) - (2)].sym)->name);
-		(yyvsp[(1) - (2)].sym)->value = pc;
-	}
-    break;
-
-  case 7:
-/* Line 1787 of yacc.c  */
-#line 84 "a.y"
-    {
+		(yyvsp[(1) - (2)].sym) = labellookup((yyvsp[(1) - (2)].sym));
+		if((yyvsp[(1) - (2)].sym)->type == LLAB && (yyvsp[(1) - (2)].sym)->value != pc)
+			yyerror("redeclaration of %s", (yyvsp[(1) - (2)].sym)->labelname);
 		(yyvsp[(1) - (2)].sym)->type = LLAB;
 		(yyvsp[(1) - (2)].sym)->value = pc;
 	}
     break;
 
-  case 9:
-/* Line 1787 of yacc.c  */
-#line 90 "a.y"
+  case 7:
+#line 86 "a.y"
     {
 		(yyvsp[(1) - (4)].sym)->type = LVAR;
 		(yyvsp[(1) - (4)].sym)->value = (yyvsp[(3) - (4)].lval);
 	}
     break;
 
-  case 10:
-/* Line 1787 of yacc.c  */
-#line 95 "a.y"
+  case 8:
+#line 91 "a.y"
     {
 		if((yyvsp[(1) - (4)].sym)->value != (yyvsp[(3) - (4)].lval))
 			yyerror("redeclaration of %s", (yyvsp[(1) - (4)].sym)->name);
@@ -1823,97 +1792,85 @@ yyreduce:
 	}
     break;
 
-  case 14:
-/* Line 1787 of yacc.c  */
-#line 109 "a.y"
+  case 12:
+#line 105 "a.y"
     {
 		outcode((yyvsp[(1) - (7)].lval), (yyvsp[(2) - (7)].lval), &(yyvsp[(3) - (7)].addr), (yyvsp[(5) - (7)].lval), &(yyvsp[(7) - (7)].addr));
 	}
     break;
 
-  case 15:
-/* Line 1787 of yacc.c  */
-#line 113 "a.y"
+  case 13:
+#line 109 "a.y"
     {
 		outcode((yyvsp[(1) - (6)].lval), (yyvsp[(2) - (6)].lval), &(yyvsp[(3) - (6)].addr), (yyvsp[(5) - (6)].lval), &nullgen);
 	}
     break;
 
-  case 16:
-/* Line 1787 of yacc.c  */
-#line 117 "a.y"
+  case 14:
+#line 113 "a.y"
     {
 		outcode((yyvsp[(1) - (5)].lval), (yyvsp[(2) - (5)].lval), &(yyvsp[(3) - (5)].addr), NREG, &(yyvsp[(5) - (5)].addr));
 	}
     break;
 
-  case 17:
-/* Line 1787 of yacc.c  */
-#line 124 "a.y"
+  case 15:
+#line 120 "a.y"
     {
 		outcode((yyvsp[(1) - (5)].lval), (yyvsp[(2) - (5)].lval), &(yyvsp[(3) - (5)].addr), NREG, &(yyvsp[(5) - (5)].addr));
 	}
     break;
 
-  case 18:
-/* Line 1787 of yacc.c  */
-#line 131 "a.y"
+  case 16:
+#line 127 "a.y"
     {
 		outcode((yyvsp[(1) - (5)].lval), (yyvsp[(2) - (5)].lval), &(yyvsp[(3) - (5)].addr), NREG, &(yyvsp[(5) - (5)].addr));
 	}
     break;
 
-  case 19:
-/* Line 1787 of yacc.c  */
-#line 138 "a.y"
+  case 17:
+#line 134 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), (yyvsp[(2) - (4)].lval), &nullgen, NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
-  case 20:
-/* Line 1787 of yacc.c  */
-#line 142 "a.y"
+  case 18:
+#line 138 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), (yyvsp[(2) - (4)].lval), &nullgen, NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
-  case 21:
-/* Line 1787 of yacc.c  */
-#line 149 "a.y"
+  case 19:
+#line 145 "a.y"
     {
 		outcode((yyvsp[(1) - (3)].lval), Always, &nullgen, NREG, &(yyvsp[(3) - (3)].addr));
 	}
     break;
 
-  case 22:
-/* Line 1787 of yacc.c  */
-#line 156 "a.y"
+  case 20:
+#line 152 "a.y"
     {
 		outcode((yyvsp[(1) - (3)].lval), Always, &nullgen, NREG, &(yyvsp[(3) - (3)].addr));
 	}
     break;
 
-  case 23:
-/* Line 1787 of yacc.c  */
-#line 163 "a.y"
+  case 21:
+#line 159 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), (yyvsp[(2) - (4)].lval), &nullgen, NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
-  case 24:
-/* Line 1787 of yacc.c  */
-#line 170 "a.y"
+  case 22:
+#line 166 "a.y"
     {
 		outcode((yyvsp[(1) - (6)].lval), (yyvsp[(2) - (6)].lval), &(yyvsp[(3) - (6)].addr), (yyvsp[(5) - (6)].lval), &nullgen);
 	}
     break;
 
-  case 25:
-/* Line 1787 of yacc.c  */
-#line 177 "a.y"
+  case 23:
+#line 173 "a.y"
     {
 		Addr g;
 
@@ -1924,9 +1881,8 @@ yyreduce:
 	}
     break;
 
-  case 26:
-/* Line 1787 of yacc.c  */
-#line 186 "a.y"
+  case 24:
+#line 182 "a.y"
     {
 		Addr g;
 
@@ -1937,127 +1893,115 @@ yyreduce:
 	}
     break;
 
-  case 27:
-/* Line 1787 of yacc.c  */
-#line 198 "a.y"
+  case 25:
+#line 194 "a.y"
     {
 		outcode((yyvsp[(1) - (7)].lval), (yyvsp[(2) - (7)].lval), &(yyvsp[(5) - (7)].addr), (yyvsp[(3) - (7)].addr).reg, &(yyvsp[(7) - (7)].addr));
 	}
     break;
 
-  case 28:
-/* Line 1787 of yacc.c  */
-#line 202 "a.y"
+  case 26:
+#line 198 "a.y"
     {
 		outcode((yyvsp[(1) - (6)].lval), (yyvsp[(2) - (6)].lval), &(yyvsp[(5) - (6)].addr), (yyvsp[(3) - (6)].addr).reg, &(yyvsp[(3) - (6)].addr));
 	}
     break;
 
-  case 29:
-/* Line 1787 of yacc.c  */
-#line 206 "a.y"
+  case 27:
+#line 202 "a.y"
     {
 		outcode((yyvsp[(1) - (6)].lval), (yyvsp[(2) - (6)].lval), &(yyvsp[(4) - (6)].addr), (yyvsp[(6) - (6)].addr).reg, &(yyvsp[(6) - (6)].addr));
 	}
     break;
 
-  case 30:
-/* Line 1787 of yacc.c  */
-#line 213 "a.y"
+  case 28:
+#line 209 "a.y"
     {
 		outcode((yyvsp[(1) - (3)].lval), (yyvsp[(2) - (3)].lval), &nullgen, NREG, &nullgen);
 	}
     break;
 
-  case 31:
-/* Line 1787 of yacc.c  */
-#line 220 "a.y"
+  case 29:
+#line 216 "a.y"
     {
+		settext((yyvsp[(2) - (4)].addr).sym);
 		(yyvsp[(4) - (4)].addr).type = D_CONST2;
 		(yyvsp[(4) - (4)].addr).offset2 = ArgsSizeUnknown;
 		outcode((yyvsp[(1) - (4)].lval), Always, &(yyvsp[(2) - (4)].addr), 0, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
-  case 32:
-/* Line 1787 of yacc.c  */
-#line 226 "a.y"
+  case 30:
+#line 223 "a.y"
     {
+		settext((yyvsp[(2) - (6)].addr).sym);
 		(yyvsp[(6) - (6)].addr).type = D_CONST2;
 		(yyvsp[(6) - (6)].addr).offset2 = ArgsSizeUnknown;
 		outcode((yyvsp[(1) - (6)].lval), Always, &(yyvsp[(2) - (6)].addr), (yyvsp[(4) - (6)].lval), &(yyvsp[(6) - (6)].addr));
 	}
     break;
 
-  case 33:
-/* Line 1787 of yacc.c  */
-#line 232 "a.y"
+  case 31:
+#line 230 "a.y"
     {
+		settext((yyvsp[(2) - (8)].addr).sym);
 		(yyvsp[(6) - (8)].addr).type = D_CONST2;
 		(yyvsp[(6) - (8)].addr).offset2 = (yyvsp[(8) - (8)].lval);
 		outcode((yyvsp[(1) - (8)].lval), Always, &(yyvsp[(2) - (8)].addr), (yyvsp[(4) - (8)].lval), &(yyvsp[(6) - (8)].addr));
 	}
     break;
 
-  case 34:
-/* Line 1787 of yacc.c  */
-#line 241 "a.y"
+  case 32:
+#line 240 "a.y"
     {
 		outcode((yyvsp[(1) - (6)].lval), Always, &(yyvsp[(2) - (6)].addr), (yyvsp[(4) - (6)].lval), &(yyvsp[(6) - (6)].addr));
 	}
     break;
 
-  case 35:
-/* Line 1787 of yacc.c  */
-#line 248 "a.y"
+  case 33:
+#line 247 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), (yyvsp[(2) - (4)].lval), &(yyvsp[(3) - (4)].addr), NREG, &nullgen);
 	}
     break;
 
-  case 36:
-/* Line 1787 of yacc.c  */
-#line 255 "a.y"
+  case 34:
+#line 254 "a.y"
     {
 		outcode((yyvsp[(1) - (3)].lval), Always, &nullgen, NREG, &(yyvsp[(3) - (3)].addr));
 	}
     break;
 
-  case 37:
-/* Line 1787 of yacc.c  */
-#line 262 "a.y"
+  case 35:
+#line 261 "a.y"
     {
 		outcode((yyvsp[(1) - (5)].lval), (yyvsp[(2) - (5)].lval), &(yyvsp[(3) - (5)].addr), NREG, &(yyvsp[(5) - (5)].addr));
 	}
     break;
 
-  case 38:
-/* Line 1787 of yacc.c  */
-#line 266 "a.y"
+  case 36:
+#line 265 "a.y"
     {
 		outcode((yyvsp[(1) - (5)].lval), (yyvsp[(2) - (5)].lval), &(yyvsp[(3) - (5)].addr), NREG, &(yyvsp[(5) - (5)].addr));
 	}
     break;
 
-  case 39:
-/* Line 1787 of yacc.c  */
-#line 270 "a.y"
+  case 37:
+#line 269 "a.y"
     {
 		outcode((yyvsp[(1) - (7)].lval), (yyvsp[(2) - (7)].lval), &(yyvsp[(3) - (7)].addr), (yyvsp[(5) - (7)].lval), &(yyvsp[(7) - (7)].addr));
 	}
     break;
 
-  case 40:
-/* Line 1787 of yacc.c  */
-#line 274 "a.y"
+  case 38:
+#line 273 "a.y"
     {
 		outcode((yyvsp[(1) - (6)].lval), (yyvsp[(2) - (6)].lval), &(yyvsp[(3) - (6)].addr), (yyvsp[(5) - (6)].addr).reg, &nullgen);
 	}
     break;
 
-  case 41:
-/* Line 1787 of yacc.c  */
-#line 281 "a.y"
+  case 39:
+#line 280 "a.y"
     {
 		Addr g;
 
@@ -2078,17 +2022,15 @@ yyreduce:
 	}
     break;
 
-  case 42:
-/* Line 1787 of yacc.c  */
-#line 303 "a.y"
+  case 40:
+#line 302 "a.y"
     {
 		outcode((yyvsp[(1) - (7)].lval), (yyvsp[(2) - (7)].lval), &(yyvsp[(3) - (7)].addr), (yyvsp[(5) - (7)].addr).reg, &(yyvsp[(7) - (7)].addr));
 	}
     break;
 
-  case 43:
-/* Line 1787 of yacc.c  */
-#line 311 "a.y"
+  case 41:
+#line 310 "a.y"
     {
 		(yyvsp[(7) - (9)].addr).type = D_REGREG2;
 		(yyvsp[(7) - (9)].addr).offset = (yyvsp[(9) - (9)].lval);
@@ -2096,17 +2038,15 @@ yyreduce:
 	}
     break;
 
-  case 44:
-/* Line 1787 of yacc.c  */
-#line 320 "a.y"
+  case 42:
+#line 319 "a.y"
     {
 		outcode((yyvsp[(1) - (2)].lval), Always, &(yyvsp[(2) - (2)].addr), NREG, &nullgen);
 	}
     break;
 
-  case 45:
-/* Line 1787 of yacc.c  */
-#line 327 "a.y"
+  case 43:
+#line 326 "a.y"
     {
 		if((yyvsp[(2) - (4)].addr).type != D_CONST || (yyvsp[(4) - (4)].addr).type != D_CONST)
 			yyerror("arguments to PCDATA must be integer constants");
@@ -2114,9 +2054,8 @@ yyreduce:
 	}
     break;
 
-  case 46:
-/* Line 1787 of yacc.c  */
-#line 336 "a.y"
+  case 44:
+#line 335 "a.y"
     {
 		if((yyvsp[(2) - (4)].addr).type != D_CONST)
 			yyerror("index for FUNCDATA must be integer constant");
@@ -2126,41 +2065,36 @@ yyreduce:
 	}
     break;
 
-  case 47:
-/* Line 1787 of yacc.c  */
-#line 347 "a.y"
+  case 45:
+#line 346 "a.y"
     {
 		outcode((yyvsp[(1) - (2)].lval), Always, &nullgen, NREG, &nullgen);
 	}
     break;
 
-  case 48:
-/* Line 1787 of yacc.c  */
-#line 352 "a.y"
+  case 46:
+#line 351 "a.y"
     {
 		(yyval.lval) = Always;
 	}
     break;
 
-  case 49:
-/* Line 1787 of yacc.c  */
-#line 356 "a.y"
+  case 47:
+#line 355 "a.y"
     {
 		(yyval.lval) = ((yyvsp[(1) - (2)].lval) & ~C_SCOND) | (yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 50:
-/* Line 1787 of yacc.c  */
-#line 360 "a.y"
+  case 48:
+#line 359 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (2)].lval) | (yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 53:
-/* Line 1787 of yacc.c  */
-#line 369 "a.y"
+  case 51:
+#line 368 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_BRANCH;
@@ -2168,31 +2102,20 @@ yyreduce:
 	}
     break;
 
-  case 54:
-/* Line 1787 of yacc.c  */
-#line 375 "a.y"
-    {
-		(yyval.addr) = nullgen;
-		if(pass == 2)
-			yyerror("undefined label: %s", (yyvsp[(1) - (2)].sym)->name);
-		(yyval.addr).type = D_BRANCH;
-		(yyval.addr).offset = (yyvsp[(2) - (2)].lval);
-	}
-    break;
-
-  case 55:
-/* Line 1787 of yacc.c  */
-#line 383 "a.y"
+  case 52:
+#line 374 "a.y"
     {
+		(yyvsp[(1) - (2)].sym) = labellookup((yyvsp[(1) - (2)].sym));
 		(yyval.addr) = nullgen;
+		if(pass == 2 && (yyvsp[(1) - (2)].sym)->type != LLAB)
+			yyerror("undefined label: %s", (yyvsp[(1) - (2)].sym)->labelname);
 		(yyval.addr).type = D_BRANCH;
 		(yyval.addr).offset = (yyvsp[(1) - (2)].sym)->value + (yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 56:
-/* Line 1787 of yacc.c  */
-#line 390 "a.y"
+  case 53:
+#line 384 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_CONST;
@@ -2200,27 +2123,24 @@ yyreduce:
 	}
     break;
 
-  case 57:
-/* Line 1787 of yacc.c  */
-#line 396 "a.y"
+  case 54:
+#line 390 "a.y"
     {
 		(yyval.addr) = (yyvsp[(2) - (2)].addr);
 		(yyval.addr).type = D_CONST;
 	}
     break;
 
-  case 58:
-/* Line 1787 of yacc.c  */
-#line 401 "a.y"
+  case 55:
+#line 395 "a.y"
     {
 		(yyval.addr) = (yyvsp[(4) - (4)].addr);
 		(yyval.addr).type = D_OCONST;
 	}
     break;
 
-  case 59:
-/* Line 1787 of yacc.c  */
-#line 406 "a.y"
+  case 56:
+#line 400 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_SCONST;
@@ -2228,9 +2148,8 @@ yyreduce:
 	}
     break;
 
-  case 61:
-/* Line 1787 of yacc.c  */
-#line 415 "a.y"
+  case 58:
+#line 409 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_FCONST;
@@ -2238,9 +2157,8 @@ yyreduce:
 	}
     break;
 
-  case 62:
-/* Line 1787 of yacc.c  */
-#line 421 "a.y"
+  case 59:
+#line 415 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_FCONST;
@@ -2248,17 +2166,15 @@ yyreduce:
 	}
     break;
 
-  case 63:
-/* Line 1787 of yacc.c  */
-#line 429 "a.y"
+  case 60:
+#line 423 "a.y"
     {
 		(yyval.lval) = 1 << (yyvsp[(1) - (1)].lval);
 	}
     break;
 
-  case 64:
-/* Line 1787 of yacc.c  */
-#line 433 "a.y"
+  case 61:
+#line 427 "a.y"
     {
 		int i;
 		(yyval.lval)=0;
@@ -2269,26 +2185,23 @@ yyreduce:
 	}
     break;
 
-  case 65:
-/* Line 1787 of yacc.c  */
-#line 442 "a.y"
+  case 62:
+#line 436 "a.y"
     {
 		(yyval.lval) = (1<<(yyvsp[(1) - (3)].lval)) | (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 69:
-/* Line 1787 of yacc.c  */
-#line 451 "a.y"
+  case 66:
+#line 445 "a.y"
     {
 		(yyval.addr) = (yyvsp[(1) - (4)].addr);
 		(yyval.addr).reg = (yyvsp[(3) - (4)].lval);
 	}
     break;
 
-  case 70:
-/* Line 1787 of yacc.c  */
-#line 456 "a.y"
+  case 67:
+#line 450 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_PSR;
@@ -2296,9 +2209,8 @@ yyreduce:
 	}
     break;
 
-  case 71:
-/* Line 1787 of yacc.c  */
-#line 462 "a.y"
+  case 68:
+#line 456 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_FPCR;
@@ -2306,9 +2218,8 @@ yyreduce:
 	}
     break;
 
-  case 72:
-/* Line 1787 of yacc.c  */
-#line 468 "a.y"
+  case 69:
+#line 462 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_OREG;
@@ -2316,9 +2227,8 @@ yyreduce:
 	}
     break;
 
-  case 76:
-/* Line 1787 of yacc.c  */
-#line 479 "a.y"
+  case 73:
+#line 473 "a.y"
     {
 		(yyval.addr) = (yyvsp[(1) - (1)].addr);
 		if((yyvsp[(1) - (1)].addr).name != D_EXTERN && (yyvsp[(1) - (1)].addr).name != D_STATIC) {
@@ -2326,9 +2236,8 @@ yyreduce:
 	}
     break;
 
-  case 77:
-/* Line 1787 of yacc.c  */
-#line 487 "a.y"
+  case 74:
+#line 481 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_OREG;
@@ -2337,9 +2246,8 @@ yyreduce:
 	}
     break;
 
-  case 79:
-/* Line 1787 of yacc.c  */
-#line 497 "a.y"
+  case 76:
+#line 491 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_OREG;
@@ -2348,9 +2256,8 @@ yyreduce:
 	}
     break;
 
-  case 81:
-/* Line 1787 of yacc.c  */
-#line 507 "a.y"
+  case 78:
+#line 501 "a.y"
     {
 		(yyval.addr) = (yyvsp[(1) - (4)].addr);
 		(yyval.addr).type = D_OREG;
@@ -2358,9 +2265,8 @@ yyreduce:
 	}
     break;
 
-  case 86:
-/* Line 1787 of yacc.c  */
-#line 520 "a.y"
+  case 83:
+#line 514 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_CONST;
@@ -2368,9 +2274,8 @@ yyreduce:
 	}
     break;
 
-  case 87:
-/* Line 1787 of yacc.c  */
-#line 528 "a.y"
+  case 84:
+#line 522 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_REG;
@@ -2378,9 +2283,8 @@ yyreduce:
 	}
     break;
 
-  case 88:
-/* Line 1787 of yacc.c  */
-#line 536 "a.y"
+  case 85:
+#line 530 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_REGREG;
@@ -2389,9 +2293,8 @@ yyreduce:
 	}
     break;
 
-  case 89:
-/* Line 1787 of yacc.c  */
-#line 545 "a.y"
+  case 86:
+#line 539 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_SHIFT;
@@ -2399,9 +2302,8 @@ yyreduce:
 	}
     break;
 
-  case 90:
-/* Line 1787 of yacc.c  */
-#line 551 "a.y"
+  case 87:
+#line 545 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_SHIFT;
@@ -2409,9 +2311,8 @@ yyreduce:
 	}
     break;
 
-  case 91:
-/* Line 1787 of yacc.c  */
-#line 557 "a.y"
+  case 88:
+#line 551 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_SHIFT;
@@ -2419,9 +2320,8 @@ yyreduce:
 	}
     break;
 
-  case 92:
-/* Line 1787 of yacc.c  */
-#line 563 "a.y"
+  case 89:
+#line 557 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_SHIFT;
@@ -2429,9 +2329,8 @@ yyreduce:
 	}
     break;
 
-  case 93:
-/* Line 1787 of yacc.c  */
-#line 571 "a.y"
+  case 90:
+#line 565 "a.y"
     {
 		if((yyval.lval) < 0 || (yyval.lval) >= 16)
 			print("register value out of range\n");
@@ -2439,9 +2338,8 @@ yyreduce:
 	}
     break;
 
-  case 94:
-/* Line 1787 of yacc.c  */
-#line 577 "a.y"
+  case 91:
+#line 571 "a.y"
     {
 		if((yyval.lval) < 0 || (yyval.lval) >= 32)
 			print("shift value out of range\n");
@@ -2449,17 +2347,15 @@ yyreduce:
 	}
     break;
 
-  case 96:
-/* Line 1787 of yacc.c  */
-#line 586 "a.y"
+  case 93:
+#line 580 "a.y"
     {
 		(yyval.lval) = REGPC;
 	}
     break;
 
-  case 97:
-/* Line 1787 of yacc.c  */
-#line 590 "a.y"
+  case 94:
+#line 584 "a.y"
     {
 		if((yyvsp[(3) - (4)].lval) < 0 || (yyvsp[(3) - (4)].lval) >= NREG)
 			print("register value out of range\n");
@@ -2467,17 +2363,15 @@ yyreduce:
 	}
     break;
 
-  case 99:
-/* Line 1787 of yacc.c  */
-#line 599 "a.y"
+  case 96:
+#line 593 "a.y"
     {
 		(yyval.lval) = REGSP;
 	}
     break;
 
-  case 101:
-/* Line 1787 of yacc.c  */
-#line 606 "a.y"
+  case 98:
+#line 600 "a.y"
     {
 		if((yyvsp[(3) - (4)].lval) < 0 || (yyvsp[(3) - (4)].lval) >= NREG)
 			print("register value out of range\n");
@@ -2485,9 +2379,8 @@ yyreduce:
 	}
     break;
 
-  case 104:
-/* Line 1787 of yacc.c  */
-#line 618 "a.y"
+  case 101:
+#line 612 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_FREG;
@@ -2495,9 +2388,8 @@ yyreduce:
 	}
     break;
 
-  case 105:
-/* Line 1787 of yacc.c  */
-#line 624 "a.y"
+  case 102:
+#line 618 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_FREG;
@@ -2505,9 +2397,8 @@ yyreduce:
 	}
     break;
 
-  case 106:
-/* Line 1787 of yacc.c  */
-#line 632 "a.y"
+  case 103:
+#line 626 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_OREG;
@@ -2517,9 +2408,8 @@ yyreduce:
 	}
     break;
 
-  case 107:
-/* Line 1787 of yacc.c  */
-#line 640 "a.y"
+  case 104:
+#line 634 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_OREG;
@@ -2529,9 +2419,8 @@ yyreduce:
 	}
     break;
 
-  case 108:
-/* Line 1787 of yacc.c  */
-#line 648 "a.y"
+  case 105:
+#line 642 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_OREG;
@@ -2541,182 +2430,151 @@ yyreduce:
 	}
     break;
 
-  case 109:
-/* Line 1787 of yacc.c  */
-#line 657 "a.y"
+  case 106:
+#line 651 "a.y"
     {
 		(yyval.lval) = 0;
 	}
     break;
 
-  case 110:
-/* Line 1787 of yacc.c  */
-#line 661 "a.y"
+  case 107:
+#line 655 "a.y"
     {
 		(yyval.lval) = (yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 111:
-/* Line 1787 of yacc.c  */
-#line 665 "a.y"
+  case 108:
+#line 659 "a.y"
     {
 		(yyval.lval) = -(yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 116:
-/* Line 1787 of yacc.c  */
-#line 677 "a.y"
+  case 113:
+#line 671 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (1)].sym)->value;
 	}
     break;
 
-  case 117:
-/* Line 1787 of yacc.c  */
-#line 681 "a.y"
+  case 114:
+#line 675 "a.y"
     {
 		(yyval.lval) = -(yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 118:
-/* Line 1787 of yacc.c  */
-#line 685 "a.y"
+  case 115:
+#line 679 "a.y"
     {
 		(yyval.lval) = (yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 119:
-/* Line 1787 of yacc.c  */
-#line 689 "a.y"
+  case 116:
+#line 683 "a.y"
     {
 		(yyval.lval) = ~(yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 120:
-/* Line 1787 of yacc.c  */
-#line 693 "a.y"
+  case 117:
+#line 687 "a.y"
     {
 		(yyval.lval) = (yyvsp[(2) - (3)].lval);
 	}
     break;
 
-  case 121:
-/* Line 1787 of yacc.c  */
-#line 698 "a.y"
+  case 118:
+#line 692 "a.y"
     {
 		(yyval.lval) = 0;
 	}
     break;
 
-  case 122:
-/* Line 1787 of yacc.c  */
-#line 702 "a.y"
+  case 119:
+#line 696 "a.y"
     {
 		(yyval.lval) = (yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 124:
-/* Line 1787 of yacc.c  */
-#line 709 "a.y"
+  case 121:
+#line 703 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) + (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 125:
-/* Line 1787 of yacc.c  */
-#line 713 "a.y"
+  case 122:
+#line 707 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) - (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 126:
-/* Line 1787 of yacc.c  */
-#line 717 "a.y"
+  case 123:
+#line 711 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) * (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 127:
-/* Line 1787 of yacc.c  */
-#line 721 "a.y"
+  case 124:
+#line 715 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) / (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 128:
-/* Line 1787 of yacc.c  */
-#line 725 "a.y"
+  case 125:
+#line 719 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) % (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 129:
-/* Line 1787 of yacc.c  */
-#line 729 "a.y"
+  case 126:
+#line 723 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (4)].lval) << (yyvsp[(4) - (4)].lval);
 	}
     break;
 
-  case 130:
-/* Line 1787 of yacc.c  */
-#line 733 "a.y"
+  case 127:
+#line 727 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (4)].lval) >> (yyvsp[(4) - (4)].lval);
 	}
     break;
 
-  case 131:
-/* Line 1787 of yacc.c  */
-#line 737 "a.y"
+  case 128:
+#line 731 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) & (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 132:
-/* Line 1787 of yacc.c  */
-#line 741 "a.y"
+  case 129:
+#line 735 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) ^ (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 133:
-/* Line 1787 of yacc.c  */
-#line 745 "a.y"
+  case 130:
+#line 739 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) | (yyvsp[(3) - (3)].lval);
 	}
     break;
 
 
-/* Line 1787 of yacc.c  */
-#line 2707 "y.tab.c"
+/* Line 1267 of yacc.c.  */
+#line 2576 "y.tab.c"
       default: break;
     }
-  /* User semantic actions sometimes alter yychar, and that requires
-     that yytoken be updated with the new translation.  We take the
-     approach of translating immediately before every use of yytoken.
-     One alternative is translating here after every semantic action,
-     but that translation would be missed if the semantic action invokes
-     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
-     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
-     incorrect destructor might then be invoked immediately.  In the
-     case of YYERROR or YYBACKUP, subsequent parser actions might lead
-     to an incorrect destructor call or verbose syntax error message
-     before the lookahead is translated.  */
   YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);
 
   YYPOPSTACK (yylen);
@@ -2725,6 +2583,7 @@ yyreduce:
 
   *++yyvsp = yyval;
 
+
   /* Now `shift' the result of the reduction.  Determine what state
      that goes to, based on the state we popped back to and the rule
      number reduced by.  */
@@ -2744,10 +2603,6 @@ yyreduce:
 | yyerrlab -- here on detecting error |
 `------------------------------------*/
 yyerrlab:
-  /* Make sure we have latest lookahead translation.  See comments at
-     user semantic actions for why this is necessary.  */
-  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);
-
   /* If not already recovering from an error, report this error.  */
   if (!yyerrstatus)
     {
@@ -2755,36 +2610,37 @@ yyerrlab:
 #if ! YYERROR_VERBOSE
       yyerror (YY_("syntax error"));
 #else
-# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
-                                        yyssp, yytoken)
       {
-        char const *yymsgp = YY_("syntax error");
-        int yysyntax_error_status;
-        yysyntax_error_status = YYSYNTAX_ERROR;
-        if (yysyntax_error_status == 0)
-          yymsgp = yymsg;
-        else if (yysyntax_error_status == 1)
-          {
-            if (yymsg != yymsgbuf)
-              YYSTACK_FREE (yymsg);
-            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
-            if (!yymsg)
-              {
-                yymsg = yymsgbuf;
-                yymsg_alloc = sizeof yymsgbuf;
-                yysyntax_error_status = 2;
-              }
-            else
-              {
-                yysyntax_error_status = YYSYNTAX_ERROR;
-                yymsgp = yymsg;
-              }
-          }
-        yyerror (yymsgp);
-        if (yysyntax_error_status == 2)
-          goto yyexhaustedlab;
+	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
+	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
+	  {
+	    YYSIZE_T yyalloc = 2 * yysize;
+	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
+	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
+	    if (yymsg != yymsgbuf)
+	      YYSTACK_FREE (yymsg);
+	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
+	    if (yymsg)
+	      yymsg_alloc = yyalloc;
+	    else
+	      {
+		yymsg = yymsgbuf;
+		yymsg_alloc = sizeof yymsgbuf;
+	      }
+	  }
+
+	if (0 < yysize && yysize <= yymsg_alloc)
+	  {
+	    (void) yysyntax_error (yymsg, yystate, yychar);
+	    yyerror (yymsg);
+	  }
+	else
+	  {
+	    yyerror (YY_("syntax error"));
+	    if (yysize != 0)
+	      goto yyexhaustedlab;
+	  }
       }
-# undef YYSYNTAX_ERROR
 #endif
     }
 
@@ -2792,7 +2648,7 @@ yyerrlab:
 
   if (yyerrstatus == 3)
     {
-      /* If just tried and failed to reuse lookahead token after an
+      /* If just tried and failed to reuse look-ahead token after an
 	 error, discard it.  */
 
       if (yychar <= YYEOF)
@@ -2809,7 +2665,7 @@ yyerrlab:
 	}
     }
 
-  /* Else will try to reuse lookahead token after shifting the error
+  /* Else will try to reuse look-ahead token after shifting the error
      token.  */
   goto yyerrlab1;
 
@@ -2843,7 +2699,7 @@ yyerrlab1:
   for (;;)
     {
       yyn = yypact[yystate];
-      if (!yypact_value_is_default (yyn))
+      if (yyn != YYPACT_NINF)
 	{
 	  yyn += YYTERROR;
 	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
@@ -2866,9 +2722,10 @@ yyerrlab1:
       YY_STACK_PRINT (yyss, yyssp);
     }
 
-  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+  if (yyn == YYFINAL)
+    YYACCEPT;
+
   *++yyvsp = yylval;
-  YY_IGNORE_MAYBE_UNINITIALIZED_END
 
 
   /* Shift the error token.  */
@@ -2892,7 +2749,7 @@ yyabortlab:
   yyresult = 1;
   goto yyreturn;
 
-#if !defined yyoverflow || YYERROR_VERBOSE
+#ifndef yyoverflow
 /*-------------------------------------------------.
 | yyexhaustedlab -- memory exhaustion comes here.  |
 `-------------------------------------------------*/
@@ -2903,14 +2760,9 @@ yyexhaustedlab:
 #endif
 
 yyreturn:
-  if (yychar != YYEMPTY)
-    {
-      /* Make sure we have latest lookahead translation.  See comments at
-         user semantic actions for why this is necessary.  */
-      yytoken = YYTRANSLATE (yychar);
-      yydestruct ("Cleanup: discarding lookahead",
-                  yytoken, &yylval);
-    }
+  if (yychar != YYEOF && yychar != YYEMPTY)
+     yydestruct ("Cleanup: discarding lookahead",
+		 yytoken, &yylval);
   /* Do not reclaim the symbols of the rule which action triggered
      this YYABORT or YYACCEPT.  */
   YYPOPSTACK (yylen);
@@ -2934,3 +2786,4 @@ yyreturn:
 }
 
 
+
diff --git a/src/cmd/5a/y.tab.h b/src/cmd/5a/y.tab.h
index f11fb85c6a..f75cb22a75 100644
--- a/src/cmd/5a/y.tab.h
+++ b/src/cmd/5a/y.tab.h
@@ -1,21 +1,24 @@
-/* A Bison parser, made by GNU Bison 2.7.12-4996.  */
+/* A Bison parser, made by GNU Bison 2.3.  */
 
-/* Bison interface for Yacc-like parsers in C
-   
-      Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.
-   
-   This program is free software: you can redistribute it and/or modify
+/* Skeleton interface for Bison's Yacc-like parsers in C
+
+   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
+   Free Software Foundation, Inc.
+
+   This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
-   the Free Software Foundation, either version 3 of the License, or
-   (at your option) any later version.
-   
+   the Free Software Foundation; either version 2, or (at your option)
+   any later version.
+
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
-   
+
    You should have received a copy of the GNU General Public License
-   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 51 Franklin Street, Fifth Floor,
+   Boston, MA 02110-1301, USA.  */
 
 /* As a special exception, you may create a larger work that contains
    part or all of the Bison parser skeleton and distribute that work
@@ -26,20 +29,10 @@
    special exception, which will cause the skeleton and the resulting
    Bison output files to be licensed under the GNU General Public
    License without this special exception.
-   
+
    This special exception was added by the Free Software Foundation in
    version 2.2 of Bison.  */
 
-#ifndef YY_YY_Y_TAB_H_INCLUDED
-# define YY_YY_Y_TAB_H_INCLUDED
-/* Enabling traces.  */
-#ifndef YYDEBUG
-# define YYDEBUG 0
-#endif
-#if YYDEBUG
-extern int yydebug;
-#endif
-
 /* Tokens.  */
 #ifndef YYTOKENTYPE
 # define YYTOKENTYPE
@@ -148,41 +141,24 @@ extern int yydebug;
 
 
 
+
 #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
 typedef union YYSTYPE
-{
-/* Line 2053 of yacc.c  */
 #line 39 "a.y"
-
+{
 	Sym	*sym;
 	int32	lval;
 	double	dval;
 	char	sval[8];
 	Addr	addr;
-
-
-/* Line 2053 of yacc.c  */
-#line 166 "y.tab.h"
-} YYSTYPE;
-# define YYSTYPE_IS_TRIVIAL 1
+}
+/* Line 1529 of yacc.c.  */
+#line 157 "y.tab.h"
+	YYSTYPE;
 # define yystype YYSTYPE /* obsolescent; will be withdrawn */
 # define YYSTYPE_IS_DECLARED 1
+# define YYSTYPE_IS_TRIVIAL 1
 #endif
 
 extern YYSTYPE yylval;
 
-#ifdef YYPARSE_PARAM
-#if defined __STDC__ || defined __cplusplus
-int yyparse (void *YYPARSE_PARAM);
-#else
-int yyparse ();
-#endif
-#else /* ! YYPARSE_PARAM */
-#if defined __STDC__ || defined __cplusplus
-int yyparse (void);
-#else
-int yyparse ();
-#endif
-#endif /* ! YYPARSE_PARAM */
-
-#endif /* !YY_YY_Y_TAB_H_INCLUDED  */
diff --git a/src/cmd/6a/a.h b/src/cmd/6a/a.h
index b3fb0bb19f..e1927b6d40 100644
--- a/src/cmd/6a/a.h
+++ b/src/cmd/6a/a.h
@@ -70,6 +70,7 @@ struct	Sym
 	vlong	value;
 	ushort	type;
 	char	*name;
+	char*	labelname;
 	char	sym;
 };
 #define	S	((Sym*)0)
@@ -148,6 +149,8 @@ void	newio(void);
 void	newfile(char*, int);
 Sym*	slookup(char*);
 Sym*	lookup(void);
+Sym*	labellookup(Sym*);
+void	settext(LSym*);
 void	syminit(Sym*);
 int32	yylex(void);
 int	getc(void);
diff --git a/src/cmd/6a/a.y b/src/cmd/6a/a.y
index 1089d4061c..29011c7ffb 100644
--- a/src/cmd/6a/a.y
+++ b/src/cmd/6a/a.y
@@ -71,15 +71,11 @@ prog:
 	line
 
 line:
-	LLAB ':'
-	{
-		if($1->value != pc)
-			yyerror("redeclaration of %s", $1->name);
-		$1->value = pc;
-	}
-	line
-|	LNAME ':'
+	LNAME ':'
 	{
+		$1 = labellookup($1);
+		if($1->type == LLAB && $1->value != pc)
+			yyerror("redeclaration of %s (%s)", $1->labelname, $1->name);
 		$1->type = LLAB;
 		$1->value = pc;
 	}
@@ -197,11 +193,13 @@ spec1:	/* DATA */
 spec2:	/* TEXT */
 	mem ',' imm2
 	{
+		settext($1.sym);
 		$$.from = $1;
 		$$.to = $3;
 	}
 |	mem ',' con ',' imm2
 	{
+		settext($1.sym);
 		$$.from = $1;
 		$$.from.scale = $3;
 		$$.to = $5;
@@ -363,15 +361,10 @@ rel:
 	}
 |	LNAME offset
 	{
+		$1 = labellookup($1);
 		$$ = nullgen;
-		if(pass == 2)
-			yyerror("undefined label: %s", $1->name);
-		$$.type = D_BRANCH;
-		$$.offset = $2;
-	}
-|	LLAB offset
-	{
-		$$ = nullgen;
+		if(pass == 2 && $1->type != LLAB)
+			yyerror("undefined label: %s", $1->labelname);
 		$$.type = D_BRANCH;
 		$$.offset = $1->value + $2;
 	}
diff --git a/src/cmd/6a/y.tab.c b/src/cmd/6a/y.tab.c
index b69fd95b53..a698079d23 100644
--- a/src/cmd/6a/y.tab.c
+++ b/src/cmd/6a/y.tab.c
@@ -411,16 +411,16 @@ union yyalloc
 /* YYFINAL -- State number of the termination state.  */
 #define YYFINAL  2
 /* YYLAST -- Last index in YYTABLE.  */
-#define YYLAST   560
+#define YYLAST   549
 
 /* YYNTOKENS -- Number of terminals.  */
 #define YYNTOKENS  56
 /* YYNNTS -- Number of nonterminals.  */
-#define YYNNTS  42
+#define YYNNTS  41
 /* YYNRULES -- Number of rules.  */
-#define YYNRULES  137
+#define YYNRULES  134
 /* YYNRULES -- Number of states.  */
-#define YYNSTATES  277
+#define YYNSTATES  271
 
 /* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
 #define YYUNDEFTOK  2
@@ -469,91 +469,91 @@ static const yytype_uint8 yytranslate[] =
    YYRHS.  */
 static const yytype_uint16 yyprhs[] =
 {
-       0,     0,     3,     4,     5,     9,    10,    15,    16,    21,
-      23,    26,    29,    33,    37,    40,    43,    46,    49,    52,
+       0,     0,     3,     4,     5,     9,    10,    15,    17,    20,
+      23,    27,    31,    34,    37,    40,    43,    46,    49,    52,
       55,    58,    61,    64,    67,    70,    73,    76,    79,    82,
-      85,    88,    91,    94,    95,    97,   101,   105,   108,   110,
-     113,   115,   118,   120,   124,   130,   134,   140,   143,   145,
-     147,   149,   153,   159,   163,   169,   172,   174,   178,   184,
-     190,   191,   193,   197,   203,   207,   211,   213,   215,   217,
-     219,   222,   225,   227,   229,   231,   233,   238,   241,   244,
-     246,   248,   250,   252,   254,   256,   258,   261,   264,   267,
-     270,   273,   278,   284,   288,   290,   292,   294,   299,   304,
-     309,   316,   326,   336,   340,   344,   350,   359,   361,   368,
-     374,   382,   383,   386,   389,   391,   393,   395,   397,   399,
-     402,   405,   408,   412,   414,   417,   421,   426,   428,   432,
-     436,   440,   444,   448,   453,   458,   462,   466
+      85,    88,    89,    91,    95,    99,   102,   104,   107,   109,
+     112,   114,   118,   124,   128,   134,   137,   139,   141,   143,
+     147,   153,   157,   163,   166,   168,   172,   178,   184,   185,
+     187,   191,   197,   201,   205,   207,   209,   211,   213,   216,
+     219,   221,   223,   225,   227,   232,   235,   237,   239,   241,
+     243,   245,   247,   249,   252,   255,   258,   261,   264,   269,
+     275,   279,   281,   283,   285,   290,   295,   300,   307,   317,
+     327,   331,   335,   341,   350,   352,   359,   365,   373,   374,
+     377,   380,   382,   384,   386,   388,   390,   393,   396,   399,
+     403,   405,   408,   412,   417,   419,   423,   427,   431,   435,
+     439,   444,   449,   453,   457
 };
 
 /* YYRHS -- A `-1'-separated list of the rules' RHS.  */
 static const yytype_int8 yyrhs[] =
 {
       57,     0,    -1,    -1,    -1,    57,    58,    59,    -1,    -1,
-      46,    48,    60,    59,    -1,    -1,    45,    48,    61,    59,
-      -1,    49,    -1,    62,    49,    -1,     1,    49,    -1,    45,
-      50,    97,    -1,    47,    50,    97,    -1,    13,    63,    -1,
-      14,    67,    -1,    15,    66,    -1,    16,    64,    -1,    17,
-      65,    -1,    21,    68,    -1,    19,    69,    -1,    22,    70,
-      -1,    18,    71,    -1,    20,    72,    -1,    25,    73,    -1,
-      26,    74,    -1,    27,    75,    -1,    28,    76,    -1,    29,
-      77,    -1,    30,    78,    -1,    23,    79,    -1,    24,    80,
-      -1,    31,    81,    -1,    -1,    51,    -1,    84,    51,    82,
-      -1,    82,    51,    84,    -1,    84,    51,    -1,    84,    -1,
-      51,    82,    -1,    82,    -1,    51,    85,    -1,    85,    -1,
-      88,    51,    85,    -1,    92,    11,    95,    51,    88,    -1,
-      89,    51,    87,    -1,    89,    51,    95,    51,    87,    -1,
-      51,    83,    -1,    83,    -1,    63,    -1,    67,    -1,    84,
-      51,    82,    -1,    84,    51,    82,    48,    37,    -1,    84,
-      51,    82,    -1,    84,    51,    82,    48,    38,    -1,    84,
-      51,    -1,    84,    -1,    84,    51,    82,    -1,    86,    51,
-      82,    51,    95,    -1,    88,    51,    82,    51,    86,    -1,
-      -1,    88,    -1,    89,    51,    88,    -1,    89,    51,    95,
-      51,    88,    -1,    84,    51,    84,    -1,    84,    51,    84,
-      -1,    86,    -1,    89,    -1,    85,    -1,    91,    -1,    10,
-      86,    -1,    10,    90,    -1,    86,    -1,    90,    -1,    82,
-      -1,    88,    -1,    95,    52,    34,    53,    -1,    45,    93,
-      -1,    46,    93,    -1,    36,    -1,    39,    -1,    37,    -1,
-      40,    -1,    44,    -1,    38,    -1,    41,    -1,    54,    96,
-      -1,    54,    95,    -1,    54,    92,    -1,    54,    43,    -1,
-      54,    42,    -1,    54,    52,    42,    53,    -1,    54,    52,
-       9,    42,    53,    -1,    54,     9,    42,    -1,    90,    -1,
-      91,    -1,    95,    -1,    95,    52,    37,    53,    -1,    95,
-      52,    44,    53,    -1,    95,    52,    38,    53,    -1,    95,
-      52,    37,    10,    95,    53,    -1,    95,    52,    37,    53,
-      52,    37,    10,    95,    53,    -1,    95,    52,    37,    53,
-      52,    38,    10,    95,    53,    -1,    52,    37,    53,    -1,
-      52,    44,    53,    -1,    52,    37,    10,    95,    53,    -1,
-      52,    37,    53,    52,    37,    10,    95,    53,    -1,    92,
-      -1,    92,    52,    37,    10,    95,    53,    -1,    45,    93,
-      52,    94,    53,    -1,    45,     6,     7,    93,    52,    35,
-      53,    -1,    -1,     8,    95,    -1,     9,    95,    -1,    35,
-      -1,    44,    -1,    33,    -1,    32,    -1,    47,    -1,     9,
-      95,    -1,     8,    95,    -1,    55,    95,    -1,    52,    97,
-      53,    -1,    32,    -1,     9,    32,    -1,    32,     9,    32,
-      -1,     9,    32,     9,    32,    -1,    95,    -1,    97,     8,
-      97,    -1,    97,     9,    97,    -1,    97,    10,    97,    -1,
-      97,    11,    97,    -1,    97,    12,    97,    -1,    97,     6,
-       6,    97,    -1,    97,     7,     7,    97,    -1,    97,     5,
-      97,    -1,    97,     4,    97,    -1,    97,     3,    97,    -1
+      45,    48,    60,    59,    -1,    49,    -1,    61,    49,    -1,
+       1,    49,    -1,    45,    50,    96,    -1,    47,    50,    96,
+      -1,    13,    62,    -1,    14,    66,    -1,    15,    65,    -1,
+      16,    63,    -1,    17,    64,    -1,    21,    67,    -1,    19,
+      68,    -1,    22,    69,    -1,    18,    70,    -1,    20,    71,
+      -1,    25,    72,    -1,    26,    73,    -1,    27,    74,    -1,
+      28,    75,    -1,    29,    76,    -1,    30,    77,    -1,    23,
+      78,    -1,    24,    79,    -1,    31,    80,    -1,    -1,    51,
+      -1,    83,    51,    81,    -1,    81,    51,    83,    -1,    83,
+      51,    -1,    83,    -1,    51,    81,    -1,    81,    -1,    51,
+      84,    -1,    84,    -1,    87,    51,    84,    -1,    91,    11,
+      94,    51,    87,    -1,    88,    51,    86,    -1,    88,    51,
+      94,    51,    86,    -1,    51,    82,    -1,    82,    -1,    62,
+      -1,    66,    -1,    83,    51,    81,    -1,    83,    51,    81,
+      48,    37,    -1,    83,    51,    81,    -1,    83,    51,    81,
+      48,    38,    -1,    83,    51,    -1,    83,    -1,    83,    51,
+      81,    -1,    85,    51,    81,    51,    94,    -1,    87,    51,
+      81,    51,    85,    -1,    -1,    87,    -1,    88,    51,    87,
+      -1,    88,    51,    94,    51,    87,    -1,    83,    51,    83,
+      -1,    83,    51,    83,    -1,    85,    -1,    88,    -1,    84,
+      -1,    90,    -1,    10,    85,    -1,    10,    89,    -1,    85,
+      -1,    89,    -1,    81,    -1,    87,    -1,    94,    52,    34,
+      53,    -1,    45,    92,    -1,    36,    -1,    39,    -1,    37,
+      -1,    40,    -1,    44,    -1,    38,    -1,    41,    -1,    54,
+      95,    -1,    54,    94,    -1,    54,    91,    -1,    54,    43,
+      -1,    54,    42,    -1,    54,    52,    42,    53,    -1,    54,
+      52,     9,    42,    53,    -1,    54,     9,    42,    -1,    89,
+      -1,    90,    -1,    94,    -1,    94,    52,    37,    53,    -1,
+      94,    52,    44,    53,    -1,    94,    52,    38,    53,    -1,
+      94,    52,    37,    10,    94,    53,    -1,    94,    52,    37,
+      53,    52,    37,    10,    94,    53,    -1,    94,    52,    37,
+      53,    52,    38,    10,    94,    53,    -1,    52,    37,    53,
+      -1,    52,    44,    53,    -1,    52,    37,    10,    94,    53,
+      -1,    52,    37,    53,    52,    37,    10,    94,    53,    -1,
+      91,    -1,    91,    52,    37,    10,    94,    53,    -1,    45,
+      92,    52,    93,    53,    -1,    45,     6,     7,    92,    52,
+      35,    53,    -1,    -1,     8,    94,    -1,     9,    94,    -1,
+      35,    -1,    44,    -1,    33,    -1,    32,    -1,    47,    -1,
+       9,    94,    -1,     8,    94,    -1,    55,    94,    -1,    52,
+      96,    53,    -1,    32,    -1,     9,    32,    -1,    32,     9,
+      32,    -1,     9,    32,     9,    32,    -1,    94,    -1,    96,
+       8,    96,    -1,    96,     9,    96,    -1,    96,    10,    96,
+      -1,    96,    11,    96,    -1,    96,    12,    96,    -1,    96,
+       6,     6,    96,    -1,    96,     7,     7,    96,    -1,    96,
+       5,    96,    -1,    96,     4,    96,    -1,    96,     3,    96,
+      -1
 };
 
 /* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
 static const yytype_uint16 yyrline[] =
 {
-       0,    66,    66,    68,    67,    75,    74,    82,    81,    87,
-      88,    89,    92,    97,   103,   104,   105,   106,   107,   108,
-     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
-     119,   120,   121,   124,   128,   135,   142,   149,   154,   161,
-     166,   173,   178,   183,   190,   198,   203,   211,   216,   223,
-     224,   227,   232,   242,   247,   257,   262,   267,   274,   282,
-     292,   296,   303,   308,   316,   325,   336,   337,   340,   341,
-     342,   346,   350,   351,   354,   355,   358,   364,   372,   380,
-     385,   390,   395,   400,   405,   410,   416,   424,   430,   441,
-     447,   453,   459,   465,   473,   474,   477,   483,   489,   495,
-     501,   510,   519,   528,   533,   538,   546,   556,   560,   569,
-     576,   585,   588,   592,   598,   599,   603,   606,   607,   611,
-     615,   619,   623,   629,   634,   639,   644,   651,   652,   656,
-     660,   664,   668,   672,   676,   680,   684,   688
+       0,    66,    66,    68,    67,    75,    74,    83,    84,    85,
+      88,    93,    99,   100,   101,   102,   103,   104,   105,   106,
+     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
+     117,   120,   124,   131,   138,   145,   150,   157,   162,   169,
+     174,   179,   186,   194,   200,   209,   214,   221,   222,   225,
+     230,   240,   245,   255,   260,   265,   272,   280,   290,   294,
+     301,   306,   314,   323,   334,   335,   338,   339,   340,   344,
+     348,   349,   352,   353,   356,   362,   373,   378,   383,   388,
+     393,   398,   403,   409,   417,   423,   434,   440,   446,   452,
+     458,   466,   467,   470,   476,   482,   488,   494,   503,   512,
+     521,   526,   531,   539,   549,   553,   562,   569,   578,   581,
+     585,   591,   592,   596,   599,   600,   604,   608,   612,   616,
+     622,   627,   632,   637,   644,   645,   649,   653,   657,   661,
+     665,   669,   673,   677,   681
 };
 #endif
 
@@ -569,7 +569,7 @@ static const char *const yytname[] =
   "LTYPEF", "LCONST", "LFP", "LPC", "LSB", "LBREG", "LLREG", "LSREG",
   "LFREG", "LMREG", "LXREG", "LFCONST", "LSCONST", "LSP", "LNAME", "LLAB",
   "LVAR", "':'", "';'", "'='", "','", "'('", "')'", "'$'", "'~'",
-  "$accept", "prog", "@1", "line", "@2", "@3", "inst", "nonnon", "rimrem",
+  "$accept", "prog", "@1", "line", "@2", "inst", "nonnon", "rimrem",
   "remrim", "rimnon", "nonrem", "nonrel", "spec1", "spec2", "spec3",
   "spec4", "spec5", "spec6", "spec7", "spec8", "spec9", "spec10", "spec11",
   "spec12", "spec13", "rem", "rom", "rim", "rel", "reg", "imm2", "imm",
@@ -594,39 +594,39 @@ static const yytype_uint16 yytoknum[] =
 /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
 static const yytype_uint8 yyr1[] =
 {
-       0,    56,    57,    58,    57,    60,    59,    61,    59,    59,
-      59,    59,    62,    62,    62,    62,    62,    62,    62,    62,
-      62,    62,    62,    62,    62,    62,    62,    62,    62,    62,
-      62,    62,    62,    63,    63,    64,    65,    66,    66,    67,
-      67,    68,    68,    68,    69,    70,    70,    71,    71,    72,
-      72,    73,    73,    74,    74,    75,    75,    75,    76,    77,
-      78,    78,    79,    79,    80,    81,    82,    82,    83,    83,
-      83,    83,    83,    83,    84,    84,    85,    85,    85,    86,
-      86,    86,    86,    86,    86,    86,    87,    88,    88,    88,
-      88,    88,    88,    88,    89,    89,    90,    90,    90,    90,
-      90,    90,    90,    90,    90,    90,    90,    91,    91,    92,
-      92,    93,    93,    93,    94,    94,    94,    95,    95,    95,
-      95,    95,    95,    96,    96,    96,    96,    97,    97,    97,
-      97,    97,    97,    97,    97,    97,    97,    97
+       0,    56,    57,    58,    57,    60,    59,    59,    59,    59,
+      61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
+      61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
+      61,    62,    62,    63,    64,    65,    65,    66,    66,    67,
+      67,    67,    68,    69,    69,    70,    70,    71,    71,    72,
+      72,    73,    73,    74,    74,    74,    75,    76,    77,    77,
+      78,    78,    79,    80,    81,    81,    82,    82,    82,    82,
+      82,    82,    83,    83,    84,    84,    85,    85,    85,    85,
+      85,    85,    85,    86,    87,    87,    87,    87,    87,    87,
+      87,    88,    88,    89,    89,    89,    89,    89,    89,    89,
+      89,    89,    89,    89,    90,    90,    91,    91,    92,    92,
+      92,    93,    93,    93,    94,    94,    94,    94,    94,    94,
+      95,    95,    95,    95,    96,    96,    96,    96,    96,    96,
+      96,    96,    96,    96,    96
 };
 
 /* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
 static const yytype_uint8 yyr2[] =
 {
-       0,     2,     0,     0,     3,     0,     4,     0,     4,     1,
-       2,     2,     3,     3,     2,     2,     2,     2,     2,     2,
+       0,     2,     0,     0,     3,     0,     4,     1,     2,     2,
+       3,     3,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     0,     1,     3,     3,     2,     1,     2,
-       1,     2,     1,     3,     5,     3,     5,     2,     1,     1,
-       1,     3,     5,     3,     5,     2,     1,     3,     5,     5,
-       0,     1,     3,     5,     3,     3,     1,     1,     1,     1,
-       2,     2,     1,     1,     1,     1,     4,     2,     2,     1,
-       1,     1,     1,     1,     1,     1,     2,     2,     2,     2,
-       2,     4,     5,     3,     1,     1,     1,     4,     4,     4,
-       6,     9,     9,     3,     3,     5,     8,     1,     6,     5,
-       7,     0,     2,     2,     1,     1,     1,     1,     1,     2,
-       2,     2,     3,     1,     2,     3,     4,     1,     3,     3,
-       3,     3,     3,     4,     4,     3,     3,     3
+       2,     0,     1,     3,     3,     2,     1,     2,     1,     2,
+       1,     3,     5,     3,     5,     2,     1,     1,     1,     3,
+       5,     3,     5,     2,     1,     3,     5,     5,     0,     1,
+       3,     5,     3,     3,     1,     1,     1,     1,     2,     2,
+       1,     1,     1,     1,     4,     2,     1,     1,     1,     1,
+       1,     1,     1,     2,     2,     2,     2,     2,     4,     5,
+       3,     1,     1,     1,     4,     4,     4,     6,     9,     9,
+       3,     3,     5,     8,     1,     6,     5,     7,     0,     2,
+       2,     1,     1,     1,     1,     1,     2,     2,     2,     3,
+       1,     2,     3,     4,     1,     3,     3,     3,     3,     3,
+       4,     4,     3,     3,     3
 };
 
 /* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
@@ -634,89 +634,89 @@ static const yytype_uint8 yyr2[] =
    means the default is an error.  */
 static const yytype_uint8 yydefact[] =
 {
-       2,     3,     1,     0,     0,    33,     0,     0,     0,     0,
-       0,     0,    33,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,    60,     0,     0,     0,     0,     9,     4,     0,
-      11,    34,    14,     0,     0,   117,    79,    81,    84,    80,
-      82,    85,    83,   111,   118,     0,     0,     0,    15,    40,
-      66,    67,    94,    95,   107,    96,     0,    16,    74,    38,
-      75,    17,     0,    18,     0,     0,   111,   111,     0,    22,
-      48,    68,    72,    73,    69,    96,    20,     0,    34,    49,
-      50,    23,   111,     0,     0,    19,    42,     0,     0,    21,
-       0,    30,     0,    31,     0,    24,     0,    25,     0,    26,
-      56,    27,     0,    28,     0,    29,    61,    32,     0,     7,
-       0,     5,     0,    10,   120,   119,     0,     0,     0,     0,
-      39,     0,     0,   127,     0,   121,     0,     0,     0,    90,
-      89,     0,    88,    87,    37,     0,     0,    70,    71,    77,
-      78,    47,     0,     0,    77,    41,     0,     0,     0,     0,
-       0,     0,     0,    55,     0,     0,     0,     0,    12,     0,
-      13,   111,   112,   113,     0,     0,   103,   104,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   122,     0,
-       0,     0,     0,    93,     0,     0,    35,    36,     0,     0,
-      43,     0,    45,     0,    62,     0,    64,    51,    53,    57,
-       0,     0,    65,     8,     6,     0,   116,   114,   115,     0,
-       0,     0,   137,   136,   135,     0,     0,   128,   129,   130,
-     131,   132,     0,     0,    97,    99,    98,     0,    91,    76,
-       0,     0,   123,    86,     0,     0,     0,     0,     0,     0,
-       0,   109,   105,     0,   133,   134,     0,     0,     0,    92,
-      44,   124,     0,    46,    63,    52,    54,    58,    59,     0,
-       0,   108,   100,     0,     0,     0,   125,   110,     0,     0,
-       0,   126,   106,     0,     0,   101,   102
+       2,     3,     1,     0,     0,    31,     0,     0,     0,     0,
+       0,     0,    31,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,    58,     0,     0,     0,     7,     4,     0,     9,
+      32,    12,     0,     0,   114,    76,    78,    81,    77,    79,
+      82,    80,   108,   115,     0,     0,     0,    13,    38,    64,
+      65,    91,    92,   104,    93,     0,    14,    72,    36,    73,
+      15,     0,    16,     0,     0,   108,     0,    20,    46,    66,
+      70,    71,    67,    93,    18,     0,    32,    47,    48,    21,
+     108,     0,     0,    17,    40,     0,     0,    19,     0,    28,
+       0,    29,     0,    22,     0,    23,     0,    24,    54,    25,
+       0,    26,     0,    27,    59,    30,     0,     5,     0,     0,
+       8,   117,   116,     0,     0,     0,     0,    37,     0,     0,
+     124,     0,   118,     0,     0,     0,    87,    86,     0,    85,
+      84,    35,     0,     0,    68,    69,    75,    45,     0,     0,
+      75,    39,     0,     0,     0,     0,     0,     0,     0,    53,
+       0,     0,     0,     0,    10,    11,   108,   109,   110,     0,
+       0,   100,   101,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   119,     0,     0,     0,     0,    90,     0,
+       0,    33,    34,     0,     0,    41,     0,    43,     0,    60,
+       0,    62,    49,    51,    55,     0,     0,    63,     6,     0,
+     113,   111,   112,     0,     0,     0,   134,   133,   132,     0,
+       0,   125,   126,   127,   128,   129,     0,     0,    94,    96,
+      95,     0,    88,    74,     0,     0,   120,    83,     0,     0,
+       0,     0,     0,     0,     0,   106,   102,     0,   130,   131,
+       0,     0,     0,    89,    42,   121,     0,    44,    61,    50,
+      52,    56,    57,     0,     0,   105,    97,     0,     0,     0,
+     122,   107,     0,     0,     0,   123,   103,     0,     0,    98,
+      99
 };
 
 /* YYDEFGOTO[NTERM-NUM].  */
 static const yytype_int16 yydefgoto[] =
 {
-      -1,     1,     3,    28,   159,   157,    29,    32,    61,    63,
-      57,    48,    85,    76,    89,    69,    81,    95,    97,    99,
-     101,   103,   105,    91,    93,   107,    58,    70,    59,    71,
-      50,   192,    60,    51,    52,    53,    54,   119,   209,    55,
-     233,   124
+      -1,     1,     3,    27,   153,    28,    31,    60,    62,    56,
+      47,    83,    74,    87,    67,    79,    93,    95,    97,    99,
+     101,   103,    89,    91,   105,    57,    68,    58,    69,    49,
+     187,    59,    50,    51,    52,    53,   116,   203,    54,   227,
+     121
 };
 
 /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
    STATE-NUM.  */
-#define YYPACT_NINF -94
+#define YYPACT_NINF -89
 static const yytype_int16 yypact[] =
 {
-     -94,    15,   -94,   218,   -28,   -25,   264,   285,   285,   340,
-     163,     2,   319,    97,   415,   415,   285,   285,   285,   285,
-     306,   -24,   -24,   285,   -17,   -14,     4,   -94,   -94,    48,
-     -94,   -94,   -94,   481,   481,   -94,   -94,   -94,   -94,   -94,
-     -94,   -94,   -94,    19,   -94,   340,   399,   481,   -94,   -94,
-     -94,   -94,   -94,   -94,    46,    47,   385,   -94,   -94,    52,
-     -94,   -94,    59,   -94,    60,   374,    19,    56,   243,   -94,
-     -94,   -94,   -94,   -94,   -94,    63,   -94,   106,   340,   -94,
-     -94,   -94,    56,   138,   481,   -94,   -94,    69,    72,   -94,
-      74,   -94,    76,   -94,    77,   -94,    79,   -94,    80,   -94,
-      81,   -94,    83,   -94,    89,   -94,   -94,   -94,    94,   -94,
-     481,   -94,   481,   -94,   -94,   -94,   119,   481,   481,    98,
-     -94,    -1,   100,   -94,    84,   -94,   117,    23,   426,   -94,
-     -94,   433,   -94,   -94,   -94,   340,   285,   -94,   -94,    98,
-     -94,   -94,    75,   481,   -94,   -94,   138,   122,   440,   444,
-     285,   340,   340,   340,   340,   340,   285,   218,   393,   218,
-     393,    56,   -94,   -94,   -15,   481,   105,   -94,   481,   481,
-     481,   156,   162,   481,   481,   481,   481,   481,   -94,   165,
-       0,   123,   133,   -94,   474,   134,   -94,   -94,   136,   140,
-     -94,     7,   -94,   141,   -94,   143,   -94,   148,   149,   -94,
-     147,   160,   -94,   -94,   -94,   164,   -94,   -94,   -94,   167,
-     168,   180,   533,   541,   548,   481,   481,    58,    58,   -94,
-     -94,   -94,   481,   481,   171,   -94,   -94,   172,   -94,   -94,
-     -24,   192,   217,   -94,   175,   -24,   219,   216,   481,   306,
-     220,   -94,   -94,   247,    33,    33,   205,   208,    41,   -94,
-     -94,   253,   234,   -94,   -94,   -94,   -94,   -94,   -94,   215,
-     481,   -94,   -94,   259,   260,   239,   -94,   -94,   221,   481,
-     481,   -94,   -94,   223,   224,   -94,   -94
+     -89,    18,   -89,   163,    -5,   -13,   219,   253,   253,   335,
+     194,    16,   274,   369,   418,   418,   253,   253,   253,   253,
+     240,     0,     0,   253,   -17,    19,   -89,   -89,    24,   -89,
+     -89,   -89,   479,   479,   -89,   -89,   -89,   -89,   -89,   -89,
+     -89,   -89,   111,   -89,   335,   397,   479,   -89,   -89,   -89,
+     -89,   -89,   -89,    33,    51,   390,   -89,   -89,    65,   -89,
+     -89,    72,   -89,    73,   356,   111,   314,   -89,   -89,   -89,
+     -89,   -89,   -89,    74,   -89,    30,   335,   -89,   -89,   -89,
+      70,   422,   479,   -89,   -89,    82,    86,   -89,    88,   -89,
+      89,   -89,    90,   -89,    91,   -89,    92,   -89,   101,   -89,
+     105,   -89,   114,   -89,   -89,   -89,   116,   -89,   479,   479,
+     -89,   -89,   -89,   118,   479,   479,   120,   -89,     5,   115,
+     -89,    83,   -89,   133,   -12,   404,   -89,   -89,   439,   -89,
+     -89,   -89,   335,   253,   -89,   -89,   120,   -89,     9,   479,
+     -89,   -89,   422,   141,   119,   452,   253,   335,   335,   335,
+     335,   335,   253,   163,   327,   327,    70,   -89,   -89,     4,
+     479,   143,   -89,   479,   479,   479,   190,   191,   479,   479,
+     479,   479,   479,   -89,   187,     6,   148,   152,   -89,   470,
+     156,   -89,   -89,   158,   162,   -89,     8,   -89,   164,   -89,
+     166,   -89,   170,   171,   -89,   169,   172,   -89,   -89,   173,
+     -89,   -89,   -89,   161,   176,   199,   102,   530,   537,   479,
+     479,    39,    39,   -89,   -89,   -89,   479,   479,   185,   -89,
+     -89,   189,   -89,   -89,     0,   208,   234,   -89,   193,     0,
+     211,   212,   479,   240,   217,   -89,   -89,   255,    55,    55,
+     214,   215,    59,   -89,   -89,   260,   241,   -89,   -89,   -89,
+     -89,   -89,   -89,   222,   479,   -89,   -89,   262,   276,   256,
+     -89,   -89,   242,   479,   479,   -89,   -89,   243,   246,   -89,
+     -89
 };
 
 /* YYPGOTO[NTERM-NUM].  */
 static const yytype_int16 yypgoto[] =
 {
-     -94,   -94,   -94,   -43,   -94,   -94,   -94,   266,   -94,   -94,
-     -94,   273,   -94,   -94,   -94,   -94,   -94,   -94,   -94,   -94,
-     -94,   -94,   -94,   -94,   -94,   -94,    26,   229,    32,   -11,
-      -9,    57,    -8,    71,    -2,    -6,     1,   -60,   -94,   -10,
-     -94,   -93
+     -89,   -89,   -89,   134,   -89,   -89,   289,   -89,   -89,   -89,
+     290,   -89,   -89,   -89,   -89,   -89,   -89,   -89,   -89,   -89,
+     -89,   -89,   -89,   -89,   -89,    -2,   237,    11,   -11,    -9,
+      76,    -8,    87,    -4,     2,    -3,   -56,   -89,   -10,   -89,
+     -88
 };
 
 /* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
@@ -726,124 +726,120 @@ static const yytype_int16 yypgoto[] =
 #define YYTABLE_NINF -1
 static const yytype_uint16 yytable[] =
 {
-      75,    72,    86,    88,    74,    87,   139,   140,    73,   165,
-     223,   102,    77,   104,   106,     2,   231,   158,   206,   160,
-     207,    30,   144,   114,   115,   116,    31,   117,   118,   208,
-      56,   109,    49,   110,   111,    64,   123,   125,    49,   232,
-      62,   173,   174,   175,   176,   177,   133,    43,    94,    96,
-      98,   100,   166,   224,   112,   108,   137,   132,    75,    72,
-     180,   181,    74,   138,   117,   118,    73,   182,   175,   176,
-     177,   120,   145,    88,   123,   212,   213,   214,   263,   264,
-     217,   218,   219,   220,   221,    90,    92,   168,   169,   170,
-     171,   172,   173,   174,   175,   176,   177,   113,   126,   127,
-     123,   205,   123,   134,   120,    33,    34,   162,   163,   188,
-     135,   136,   180,   181,   203,   142,   204,   143,   115,   182,
-     146,   123,   244,   245,   147,   148,   161,   149,   150,    35,
-     151,   152,   153,   189,   154,   190,    88,   178,   193,   195,
-     155,   194,    82,    67,    44,   156,    33,    34,    83,    84,
-     164,    56,    47,   167,   179,   210,   188,   211,   123,   123,
-     123,   186,   215,   123,   123,   123,   123,   123,   187,   216,
-      35,    33,    34,    65,   115,   222,   225,   197,   198,   199,
-     200,   201,   196,    82,    67,    44,   226,   228,   202,   229,
-      84,   230,   234,    47,   235,    35,   236,   237,   238,    36,
-      37,    38,    39,    40,    41,   123,   123,    42,    66,    67,
-      44,   239,   246,   247,    68,    46,   240,   243,    47,     4,
-     241,   242,   250,   248,   251,   249,   252,   254,   257,   191,
-     258,     5,     6,     7,     8,     9,    10,    11,    12,    13,
-      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
-     268,    33,    34,    65,   256,   259,   255,   260,   261,   273,
-     274,   262,   265,    24,    25,    26,   266,    27,   267,   269,
-     270,   271,    33,    34,   272,    35,   275,   276,    79,    36,
-      37,    38,    39,    40,    41,    80,     0,    42,    66,    67,
-      44,   253,     0,    33,    34,    46,    35,   141,    47,     0,
-      36,    37,    38,    39,    40,    41,     0,     0,    42,    43,
-       0,    44,     0,     0,     0,    45,    46,    35,     0,    47,
-       0,    36,    37,    38,    39,    40,    41,    33,    34,    42,
-      43,     0,    44,     0,     0,     0,     0,    46,     0,    56,
-      47,     0,    36,    37,    38,    39,    40,    41,    33,    34,
-      42,    35,     0,     0,     0,    36,    37,    38,    39,    40,
-      41,     0,     0,    42,    43,     0,    44,     0,     0,     0,
-      78,    46,    35,     0,    47,     0,    36,    37,    38,    39,
-      40,    41,    33,    34,    42,    43,     0,    44,     0,     0,
-       0,     0,    46,    33,   128,    47,   168,   169,   170,   171,
-     172,   173,   174,   175,   176,   177,    35,    33,    34,     0,
-      36,    37,    38,    39,    40,    41,     0,    35,    42,     0,
-       0,    44,     0,    33,    34,     0,    46,   129,   130,    47,
-      43,    35,    44,     0,    33,    34,   121,   131,     0,     0,
-      47,    33,   184,   122,     0,     0,    44,    35,    33,    34,
-       0,    84,    33,    34,    47,     0,     0,     0,    35,     0,
-      43,     0,    44,     0,     0,    35,     0,    46,   183,     0,
-      47,     0,    35,    44,     0,   185,    35,     0,    84,     0,
-      44,    47,    33,    34,     0,    84,     0,    44,    47,    33,
-      34,    44,    84,     0,   191,    47,    84,     0,    56,    47,
-       0,     0,     0,     0,     0,     0,    35,     0,     0,     0,
-       0,     0,     0,    35,     0,     0,   227,     0,     0,     0,
-       0,    44,     0,     0,     0,     0,    84,     0,    44,    47,
-       0,     0,     0,    84,     0,     0,    47,   169,   170,   171,
-     172,   173,   174,   175,   176,   177,   170,   171,   172,   173,
-     174,   175,   176,   177,   171,   172,   173,   174,   175,   176,
-     177
+      73,    70,    84,    86,    48,    85,    71,    63,    75,   136,
+      48,   100,    72,   102,   104,   160,   217,   225,     2,    61,
+     154,   155,   111,   112,   140,   175,   176,    92,    94,    96,
+      98,   107,   177,   108,   106,   120,   122,   200,    30,   201,
+     226,   139,   117,   183,    29,   130,   175,   176,   202,   170,
+     171,   172,   129,   177,    55,   134,    73,    70,   161,   218,
+     135,    42,    71,   168,   169,   170,   171,   172,    72,   109,
+     141,    86,   120,   110,   117,   206,   207,   208,   114,   115,
+     211,   212,   213,   214,   215,   123,   163,   164,   165,   166,
+     167,   168,   169,   170,   171,   172,   257,   258,   120,   120,
+     199,    88,    90,   124,   157,   158,   164,   165,   166,   167,
+     168,   169,   170,   171,   172,   112,   131,   113,   120,   114,
+     115,   238,   239,   132,   133,   156,   138,    32,    33,   184,
+     181,   185,    86,   142,   188,   190,   173,   189,   143,   144,
+     145,   146,   147,   148,   182,   192,   193,   194,   195,   196,
+     204,    34,   149,   120,   120,   120,   150,   191,   120,   120,
+     120,   120,   120,   197,     4,   151,    43,   152,   162,   112,
+     174,    82,   159,   186,    46,   183,     5,     6,     7,     8,
+       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
+      19,    20,    21,    22,    23,   205,   209,   216,   210,   120,
+     120,   219,    32,    33,    64,   220,   240,   241,    24,   222,
+      25,   223,    26,   224,   235,   228,   244,   229,   230,   231,
+     232,   248,   251,   233,   252,   234,    34,    32,    33,   236,
+      35,    36,    37,    38,    39,    40,   237,   242,    41,    65,
+     245,    43,   243,   246,   262,    66,    45,   186,   249,    46,
+     250,    34,   253,   267,   268,    35,    36,    37,    38,    39,
+      40,    32,    33,    41,    42,   254,    43,   255,   256,   259,
+      44,    45,   263,   260,    46,   261,    35,    36,    37,    38,
+      39,    40,    32,    33,    41,    34,   264,   198,   265,    35,
+      36,    37,    38,    39,    40,   266,   269,    41,    42,   270,
+      43,    77,    78,   137,   247,    45,    34,    55,    46,     0,
+      35,    36,    37,    38,    39,    40,     0,     0,    41,    42,
+       0,    43,    32,    33,    64,    76,    45,     0,     0,    46,
+     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
+       0,     0,     0,    32,    33,     0,    34,     0,     0,     0,
+      35,    36,    37,    38,    39,    40,     0,     0,    41,    65,
+       0,    43,     0,     0,    32,    33,    45,    34,     0,    46,
+       0,    35,    36,    37,    38,    39,    40,    32,    33,    41,
+      42,     0,    43,     0,     0,     0,     0,    45,    34,     0,
+      46,     0,    35,    36,    37,    38,    39,    40,    32,   125,
+      41,    34,     0,    43,     0,    32,    33,     0,    45,     0,
+       0,    46,    32,    33,    80,     0,    43,     0,     0,     0,
+      81,    82,    34,    55,    46,     0,    32,    33,     0,    34,
+      32,    33,   126,   127,   118,    42,    34,    43,     0,     0,
+       0,   119,   128,     0,    43,    46,   178,    32,   179,    82,
+      34,    43,    46,     0,    34,     0,    82,     0,     0,    46,
+      32,    33,     0,    42,     0,    43,     0,    80,     0,    43,
+      45,    34,     0,    46,    82,     0,     0,    46,    32,    33,
+       0,   180,     0,     0,    34,     0,    43,    32,    33,     0,
+       0,    82,     0,     0,    46,     0,     0,     0,     0,    43,
+       0,     0,    34,     0,    82,     0,    55,    46,     0,     0,
+       0,    34,   221,     0,     0,     0,     0,    43,     0,     0,
+       0,     0,    82,     0,     0,    46,    43,     0,     0,     0,
+       0,    82,     0,     0,    46,   165,   166,   167,   168,   169,
+     170,   171,   172,   166,   167,   168,   169,   170,   171,   172
 };
 
 static const yytype_int16 yycheck[] =
 {
-      10,    10,    13,    13,    10,    13,    66,    67,    10,    10,
-      10,    20,    11,    21,    22,     0,     9,   110,    33,   112,
-      35,    49,    82,    33,    34,     6,    51,     8,     9,    44,
-      54,    48,     6,    50,    48,     9,    46,    47,    12,    32,
-       8,     8,     9,    10,    11,    12,    56,    45,    16,    17,
-      18,    19,    53,    53,    50,    23,    65,    56,    68,    68,
-      37,    38,    68,    65,     8,     9,    68,    44,    10,    11,
-      12,    45,    83,    83,    84,   168,   169,   170,    37,    38,
-     173,   174,   175,   176,   177,    14,    15,     3,     4,     5,
-       6,     7,     8,     9,    10,    11,    12,    49,    52,    52,
-     110,   161,   112,    51,    78,     8,     9,   117,   118,    34,
-      51,    51,    37,    38,   157,    52,   159,    11,   128,    44,
-      51,   131,   215,   216,    52,    51,     7,    51,    51,    32,
-      51,    51,    51,   143,    51,   146,   146,    53,   148,   149,
-      51,   149,    45,    46,    47,    51,     8,     9,    51,    52,
-      52,    54,    55,    53,    37,   165,    34,    52,   168,   169,
-     170,   135,     6,   173,   174,   175,   176,   177,   136,     7,
-      32,     8,     9,    10,   184,    10,    53,   151,   152,   153,
-     154,   155,   150,    45,    46,    47,    53,    53,   156,    53,
-      52,    51,    51,    55,    51,    32,    48,    48,    51,    36,
-      37,    38,    39,    40,    41,   215,   216,    44,    45,    46,
-      47,    51,   222,   223,    51,    52,    52,    37,    55,     1,
-      53,    53,   230,    52,    32,    53,     9,   235,   238,    54,
-     239,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-     260,     8,     9,    10,    38,    35,    37,    10,    53,   269,
-     270,    53,     9,    45,    46,    47,    32,    49,    53,    10,
-      10,    32,     8,     9,    53,    32,    53,    53,    12,    36,
-      37,    38,    39,    40,    41,    12,    -1,    44,    45,    46,
-      47,   234,    -1,     8,     9,    52,    32,    68,    55,    -1,
+      10,    10,    13,    13,     6,    13,    10,     9,    11,    65,
+      12,    20,    10,    21,    22,    10,    10,     9,     0,     8,
+     108,   109,    32,    33,    80,    37,    38,    16,    17,    18,
+      19,    48,    44,    50,    23,    45,    46,    33,    51,    35,
+      32,    11,    44,    34,    49,    55,    37,    38,    44,    10,
+      11,    12,    55,    44,    54,    64,    66,    66,    53,    53,
+      64,    45,    66,     8,     9,    10,    11,    12,    66,    50,
+      81,    81,    82,    49,    76,   163,   164,   165,     8,     9,
+     168,   169,   170,   171,   172,    52,     3,     4,     5,     6,
+       7,     8,     9,    10,    11,    12,    37,    38,   108,   109,
+     156,    14,    15,    52,   114,   115,     4,     5,     6,     7,
+       8,     9,    10,    11,    12,   125,    51,     6,   128,     8,
+       9,   209,   210,    51,    51,     7,    52,     8,     9,   139,
+     132,   142,   142,    51,   144,   145,    53,   145,    52,    51,
+      51,    51,    51,    51,   133,   147,   148,   149,   150,   151,
+     160,    32,    51,   163,   164,   165,    51,   146,   168,   169,
+     170,   171,   172,   152,     1,    51,    47,    51,    53,   179,
+      37,    52,    52,    54,    55,    34,    13,    14,    15,    16,
+      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
+      27,    28,    29,    30,    31,    52,     6,    10,     7,   209,
+     210,    53,     8,     9,    10,    53,   216,   217,    45,    53,
+      47,    53,    49,    51,    53,    51,   224,    51,    48,    48,
+      51,   229,   232,    51,   233,    52,    32,     8,     9,    53,
+      36,    37,    38,    39,    40,    41,    37,    52,    44,    45,
+      32,    47,    53,     9,   254,    51,    52,    54,    37,    55,
+      38,    32,    35,   263,   264,    36,    37,    38,    39,    40,
+      41,     8,     9,    44,    45,    10,    47,    53,    53,     9,
+      51,    52,    10,    32,    55,    53,    36,    37,    38,    39,
+      40,    41,     8,     9,    44,    32,    10,   153,    32,    36,
+      37,    38,    39,    40,    41,    53,    53,    44,    45,    53,
+      47,    12,    12,    66,   228,    52,    32,    54,    55,    -1,
       36,    37,    38,    39,    40,    41,    -1,    -1,    44,    45,
-      -1,    47,    -1,    -1,    -1,    51,    52,    32,    -1,    55,
+      -1,    47,     8,     9,    10,    51,    52,    -1,    -1,    55,
+       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
+      -1,    -1,    -1,     8,     9,    -1,    32,    -1,    -1,    -1,
+      36,    37,    38,    39,    40,    41,    -1,    -1,    44,    45,
+      -1,    47,    -1,    -1,     8,     9,    52,    32,    -1,    55,
       -1,    36,    37,    38,    39,    40,    41,     8,     9,    44,
-      45,    -1,    47,    -1,    -1,    -1,    -1,    52,    -1,    54,
+      45,    -1,    47,    -1,    -1,    -1,    -1,    52,    32,    -1,
       55,    -1,    36,    37,    38,    39,    40,    41,     8,     9,
-      44,    32,    -1,    -1,    -1,    36,    37,    38,    39,    40,
-      41,    -1,    -1,    44,    45,    -1,    47,    -1,    -1,    -1,
-      51,    52,    32,    -1,    55,    -1,    36,    37,    38,    39,
-      40,    41,     8,     9,    44,    45,    -1,    47,    -1,    -1,
-      -1,    -1,    52,     8,     9,    55,     3,     4,     5,     6,
-       7,     8,     9,    10,    11,    12,    32,     8,     9,    -1,
-      36,    37,    38,    39,    40,    41,    -1,    32,    44,    -1,
-      -1,    47,    -1,     8,     9,    -1,    52,    42,    43,    55,
-      45,    32,    47,    -1,     8,     9,    37,    52,    -1,    -1,
-      55,     8,     9,    44,    -1,    -1,    47,    32,     8,     9,
-      -1,    52,     8,     9,    55,    -1,    -1,    -1,    32,    -1,
-      45,    -1,    47,    -1,    -1,    32,    -1,    52,    42,    -1,
-      55,    -1,    32,    47,    -1,    42,    32,    -1,    52,    -1,
-      47,    55,     8,     9,    -1,    52,    -1,    47,    55,     8,
-       9,    47,    52,    -1,    54,    55,    52,    -1,    54,    55,
-      -1,    -1,    -1,    -1,    -1,    -1,    32,    -1,    -1,    -1,
-      -1,    -1,    -1,    32,    -1,    -1,    42,    -1,    -1,    -1,
-      -1,    47,    -1,    -1,    -1,    -1,    52,    -1,    47,    55,
-      -1,    -1,    -1,    52,    -1,    -1,    55,     4,     5,     6,
-       7,     8,     9,    10,    11,    12,     5,     6,     7,     8,
-       9,    10,    11,    12,     6,     7,     8,     9,    10,    11,
-      12
+      44,    32,    -1,    47,    -1,     8,     9,    -1,    52,    -1,
+      -1,    55,     8,     9,    45,    -1,    47,    -1,    -1,    -1,
+      51,    52,    32,    54,    55,    -1,     8,     9,    -1,    32,
+       8,     9,    42,    43,    37,    45,    32,    47,    -1,    -1,
+      -1,    44,    52,    -1,    47,    55,    42,     8,     9,    52,
+      32,    47,    55,    -1,    32,    -1,    52,    -1,    -1,    55,
+       8,     9,    -1,    45,    -1,    47,    -1,    45,    -1,    47,
+      52,    32,    -1,    55,    52,    -1,    -1,    55,     8,     9,
+      -1,    42,    -1,    -1,    32,    -1,    47,     8,     9,    -1,
+      -1,    52,    -1,    -1,    55,    -1,    -1,    -1,    -1,    47,
+      -1,    -1,    32,    -1,    52,    -1,    54,    55,    -1,    -1,
+      -1,    32,    42,    -1,    -1,    -1,    -1,    47,    -1,    -1,
+      -1,    -1,    52,    -1,    -1,    55,    47,    -1,    -1,    -1,
+      -1,    52,    -1,    -1,    55,     5,     6,     7,     8,     9,
+      10,    11,    12,     6,     7,     8,     9,    10,    11,    12
 };
 
 /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
@@ -852,32 +848,32 @@ static const yytype_uint8 yystos[] =
 {
        0,    57,     0,    58,     1,    13,    14,    15,    16,    17,
       18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
-      28,    29,    30,    31,    45,    46,    47,    49,    59,    62,
-      49,    51,    63,     8,     9,    32,    36,    37,    38,    39,
-      40,    41,    44,    45,    47,    51,    52,    55,    67,    82,
-      86,    89,    90,    91,    92,    95,    54,    66,    82,    84,
-      88,    64,    84,    65,    82,    10,    45,    46,    51,    71,
-      83,    85,    86,    90,    91,    95,    69,    92,    51,    63,
-      67,    72,    45,    51,    52,    68,    85,    88,    95,    70,
-      89,    79,    89,    80,    84,    73,    84,    74,    84,    75,
-      84,    76,    86,    77,    88,    78,    88,    81,    84,    48,
-      50,    48,    50,    49,    95,    95,     6,     8,     9,    93,
-      82,    37,    44,    95,    97,    95,    52,    52,     9,    42,
-      43,    52,    92,    95,    51,    51,    51,    86,    90,    93,
-      93,    83,    52,    11,    93,    85,    51,    52,    51,    51,
-      51,    51,    51,    51,    51,    51,    51,    61,    97,    60,
-      97,     7,    95,    95,    52,    10,    53,    53,     3,     4,
-       5,     6,     7,     8,     9,    10,    11,    12,    53,    37,
-      37,    38,    44,    42,     9,    42,    82,    84,    34,    95,
-      85,    54,    87,    95,    88,    95,    84,    82,    82,    82,
-      82,    82,    84,    59,    59,    93,    33,    35,    44,    94,
-      95,    52,    97,    97,    97,     6,     7,    97,    97,    97,
-      97,    97,    10,    10,    53,    53,    53,    42,    53,    53,
-      51,     9,    32,    96,    51,    51,    48,    48,    51,    51,
-      52,    53,    53,    37,    97,    97,    95,    95,    52,    53,
-      88,    32,     9,    87,    88,    37,    38,    95,    86,    35,
-      10,    53,    53,    37,    38,     9,    32,    53,    95,    10,
-      10,    32,    53,    95,    95,    53,    53
+      28,    29,    30,    31,    45,    47,    49,    59,    61,    49,
+      51,    62,     8,     9,    32,    36,    37,    38,    39,    40,
+      41,    44,    45,    47,    51,    52,    55,    66,    81,    85,
+      88,    89,    90,    91,    94,    54,    65,    81,    83,    87,
+      63,    83,    64,    81,    10,    45,    51,    70,    82,    84,
+      85,    89,    90,    94,    68,    91,    51,    62,    66,    71,
+      45,    51,    52,    67,    84,    87,    94,    69,    88,    78,
+      88,    79,    83,    72,    83,    73,    83,    74,    83,    75,
+      85,    76,    87,    77,    87,    80,    83,    48,    50,    50,
+      49,    94,    94,     6,     8,     9,    92,    81,    37,    44,
+      94,    96,    94,    52,    52,     9,    42,    43,    52,    91,
+      94,    51,    51,    51,    85,    89,    92,    82,    52,    11,
+      92,    84,    51,    52,    51,    51,    51,    51,    51,    51,
+      51,    51,    51,    60,    96,    96,     7,    94,    94,    52,
+      10,    53,    53,     3,     4,     5,     6,     7,     8,     9,
+      10,    11,    12,    53,    37,    37,    38,    44,    42,     9,
+      42,    81,    83,    34,    94,    84,    54,    86,    94,    87,
+      94,    83,    81,    81,    81,    81,    81,    83,    59,    92,
+      33,    35,    44,    93,    94,    52,    96,    96,    96,     6,
+       7,    96,    96,    96,    96,    96,    10,    10,    53,    53,
+      53,    42,    53,    53,    51,     9,    32,    95,    51,    51,
+      48,    48,    51,    51,    52,    53,    53,    37,    96,    96,
+      94,    94,    52,    53,    87,    32,     9,    86,    87,    37,
+      38,    94,    85,    35,    10,    53,    53,    37,    38,     9,
+      32,    53,    94,    10,    10,    32,    53,    94,    94,    53,
+      53
 };
 
 #define yyerrok		(yyerrstatus = 0)
@@ -1701,30 +1697,24 @@ yyreduce:
   case 5:
 #line 75 "a.y"
     {
-		if((yyvsp[(1) - (2)].sym)->value != pc)
-			yyerror("redeclaration of %s", (yyvsp[(1) - (2)].sym)->name);
-		(yyvsp[(1) - (2)].sym)->value = pc;
-	}
-    break;
-
-  case 7:
-#line 82 "a.y"
-    {
+		(yyvsp[(1) - (2)].sym) = labellookup((yyvsp[(1) - (2)].sym));
+		if((yyvsp[(1) - (2)].sym)->type == LLAB && (yyvsp[(1) - (2)].sym)->value != pc)
+			yyerror("redeclaration of %s (%s)", (yyvsp[(1) - (2)].sym)->labelname, (yyvsp[(1) - (2)].sym)->name);
 		(yyvsp[(1) - (2)].sym)->type = LLAB;
 		(yyvsp[(1) - (2)].sym)->value = pc;
 	}
     break;
 
-  case 12:
-#line 93 "a.y"
+  case 10:
+#line 89 "a.y"
     {
 		(yyvsp[(1) - (3)].sym)->type = LVAR;
 		(yyvsp[(1) - (3)].sym)->value = (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 13:
-#line 98 "a.y"
+  case 11:
+#line 94 "a.y"
     {
 		if((yyvsp[(1) - (3)].sym)->value != (yyvsp[(3) - (3)].lval))
 			yyerror("redeclaration of %s", (yyvsp[(1) - (3)].sym)->name);
@@ -1732,191 +1722,191 @@ yyreduce:
 	}
     break;
 
+  case 12:
+#line 99 "a.y"
+    { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
+    break;
+
+  case 13:
+#line 100 "a.y"
+    { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
+    break;
+
   case 14:
-#line 103 "a.y"
+#line 101 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 15:
-#line 104 "a.y"
+#line 102 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 16:
-#line 105 "a.y"
+#line 103 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 17:
-#line 106 "a.y"
+#line 104 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 18:
-#line 107 "a.y"
+#line 105 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 19:
-#line 108 "a.y"
+#line 106 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 20:
-#line 109 "a.y"
+#line 107 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 21:
-#line 110 "a.y"
+#line 108 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 22:
-#line 111 "a.y"
+#line 109 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 23:
-#line 112 "a.y"
+#line 110 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 24:
-#line 113 "a.y"
+#line 111 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 25:
-#line 114 "a.y"
+#line 112 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 26:
-#line 115 "a.y"
+#line 113 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 27:
-#line 116 "a.y"
+#line 114 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 28:
-#line 117 "a.y"
+#line 115 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 29:
-#line 118 "a.y"
+#line 116 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 30:
-#line 119 "a.y"
+#line 117 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 31:
 #line 120 "a.y"
-    { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
-    break;
-
-  case 32:
-#line 121 "a.y"
-    { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
-    break;
-
-  case 33:
-#line 124 "a.y"
     {
 		(yyval.addr2).from = nullgen;
 		(yyval.addr2).to = nullgen;
 	}
     break;
 
-  case 34:
-#line 129 "a.y"
+  case 32:
+#line 125 "a.y"
     {
 		(yyval.addr2).from = nullgen;
 		(yyval.addr2).to = nullgen;
 	}
     break;
 
-  case 35:
-#line 136 "a.y"
+  case 33:
+#line 132 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (3)].addr);
 		(yyval.addr2).to = (yyvsp[(3) - (3)].addr);
 	}
     break;
 
-  case 36:
-#line 143 "a.y"
+  case 34:
+#line 139 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (3)].addr);
 		(yyval.addr2).to = (yyvsp[(3) - (3)].addr);
 	}
     break;
 
-  case 37:
-#line 150 "a.y"
+  case 35:
+#line 146 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (2)].addr);
 		(yyval.addr2).to = nullgen;
 	}
     break;
 
-  case 38:
-#line 155 "a.y"
+  case 36:
+#line 151 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (1)].addr);
 		(yyval.addr2).to = nullgen;
 	}
     break;
 
-  case 39:
-#line 162 "a.y"
+  case 37:
+#line 158 "a.y"
     {
 		(yyval.addr2).from = nullgen;
 		(yyval.addr2).to = (yyvsp[(2) - (2)].addr);
 	}
     break;
 
-  case 40:
-#line 167 "a.y"
+  case 38:
+#line 163 "a.y"
     {
 		(yyval.addr2).from = nullgen;
 		(yyval.addr2).to = (yyvsp[(1) - (1)].addr);
 	}
     break;
 
-  case 41:
-#line 174 "a.y"
+  case 39:
+#line 170 "a.y"
     {
 		(yyval.addr2).from = nullgen;
 		(yyval.addr2).to = (yyvsp[(2) - (2)].addr);
 	}
     break;
 
-  case 42:
-#line 179 "a.y"
+  case 40:
+#line 175 "a.y"
     {
 		(yyval.addr2).from = nullgen;
 		(yyval.addr2).to = (yyvsp[(1) - (1)].addr);
 	}
     break;
 
-  case 43:
-#line 184 "a.y"
+  case 41:
+#line 180 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (3)].addr);
 		(yyval.addr2).to = (yyvsp[(3) - (3)].addr);
 	}
     break;
 
-  case 44:
-#line 191 "a.y"
+  case 42:
+#line 187 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (5)].addr);
 		(yyval.addr2).from.scale = (yyvsp[(3) - (5)].lval);
@@ -1924,49 +1914,51 @@ yyreduce:
 	}
     break;
 
-  case 45:
-#line 199 "a.y"
+  case 43:
+#line 195 "a.y"
     {
+		settext((yyvsp[(1) - (3)].addr).sym);
 		(yyval.addr2).from = (yyvsp[(1) - (3)].addr);
 		(yyval.addr2).to = (yyvsp[(3) - (3)].addr);
 	}
     break;
 
-  case 46:
-#line 204 "a.y"
+  case 44:
+#line 201 "a.y"
     {
+		settext((yyvsp[(1) - (5)].addr).sym);
 		(yyval.addr2).from = (yyvsp[(1) - (5)].addr);
 		(yyval.addr2).from.scale = (yyvsp[(3) - (5)].lval);
 		(yyval.addr2).to = (yyvsp[(5) - (5)].addr);
 	}
     break;
 
-  case 47:
-#line 212 "a.y"
+  case 45:
+#line 210 "a.y"
     {
 		(yyval.addr2).from = nullgen;
 		(yyval.addr2).to = (yyvsp[(2) - (2)].addr);
 	}
     break;
 
-  case 48:
-#line 217 "a.y"
+  case 46:
+#line 215 "a.y"
     {
 		(yyval.addr2).from = nullgen;
 		(yyval.addr2).to = (yyvsp[(1) - (1)].addr);
 	}
     break;
 
-  case 51:
-#line 228 "a.y"
+  case 49:
+#line 226 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (3)].addr);
 		(yyval.addr2).to = (yyvsp[(3) - (3)].addr);
 	}
     break;
 
-  case 52:
-#line 233 "a.y"
+  case 50:
+#line 231 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (5)].addr);
 		(yyval.addr2).to = (yyvsp[(3) - (5)].addr);
@@ -1976,16 +1968,16 @@ yyreduce:
 	}
     break;
 
-  case 53:
-#line 243 "a.y"
+  case 51:
+#line 241 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (3)].addr);
 		(yyval.addr2).to = (yyvsp[(3) - (3)].addr);
 	}
     break;
 
-  case 54:
-#line 248 "a.y"
+  case 52:
+#line 246 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (5)].addr);
 		(yyval.addr2).to = (yyvsp[(3) - (5)].addr);
@@ -1995,32 +1987,32 @@ yyreduce:
 	}
     break;
 
-  case 55:
-#line 258 "a.y"
+  case 53:
+#line 256 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (2)].addr);
 		(yyval.addr2).to = nullgen;
 	}
     break;
 
-  case 56:
-#line 263 "a.y"
+  case 54:
+#line 261 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (1)].addr);
 		(yyval.addr2).to = nullgen;
 	}
     break;
 
-  case 57:
-#line 268 "a.y"
+  case 55:
+#line 266 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (3)].addr);
 		(yyval.addr2).to = (yyvsp[(3) - (3)].addr);
 	}
     break;
 
-  case 58:
-#line 275 "a.y"
+  case 56:
+#line 273 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (5)].addr);
 		(yyval.addr2).to = (yyvsp[(3) - (5)].addr);
@@ -2028,8 +2020,8 @@ yyreduce:
 	}
     break;
 
-  case 59:
-#line 283 "a.y"
+  case 57:
+#line 281 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(3) - (5)].addr);
 		(yyval.addr2).to = (yyvsp[(5) - (5)].addr);
@@ -2039,32 +2031,32 @@ yyreduce:
 	}
     break;
 
-  case 60:
-#line 292 "a.y"
+  case 58:
+#line 290 "a.y"
     {
 		(yyval.addr2).from = nullgen;
 		(yyval.addr2).to = nullgen;
 	}
     break;
 
-  case 61:
-#line 297 "a.y"
+  case 59:
+#line 295 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (1)].addr);
 		(yyval.addr2).to = nullgen;
 	}
     break;
 
-  case 62:
-#line 304 "a.y"
+  case 60:
+#line 302 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (3)].addr);
 		(yyval.addr2).to = (yyvsp[(3) - (3)].addr);
 	}
     break;
 
-  case 63:
-#line 309 "a.y"
+  case 61:
+#line 307 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (5)].addr);
 		(yyval.addr2).from.scale = (yyvsp[(3) - (5)].lval);
@@ -2072,8 +2064,8 @@ yyreduce:
 	}
     break;
 
-  case 64:
-#line 317 "a.y"
+  case 62:
+#line 315 "a.y"
     {
 		if((yyvsp[(1) - (3)].addr).type != D_CONST || (yyvsp[(3) - (3)].addr).type != D_CONST)
 			yyerror("arguments to PCDATA must be integer constants");
@@ -2082,8 +2074,8 @@ yyreduce:
 	}
     break;
 
-  case 65:
-#line 326 "a.y"
+  case 63:
+#line 324 "a.y"
     {
 		if((yyvsp[(1) - (3)].addr).type != D_CONST)
 			yyerror("index for FUNCDATA must be integer constant");
@@ -2094,22 +2086,22 @@ yyreduce:
 	}
     break;
 
-  case 70:
-#line 343 "a.y"
+  case 68:
+#line 341 "a.y"
     {
 		(yyval.addr) = (yyvsp[(2) - (2)].addr);
 	}
     break;
 
-  case 71:
-#line 347 "a.y"
+  case 69:
+#line 345 "a.y"
     {
 		(yyval.addr) = (yyvsp[(2) - (2)].addr);
 	}
     break;
 
-  case 76:
-#line 359 "a.y"
+  case 74:
+#line 357 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_BRANCH;
@@ -2117,84 +2109,76 @@ yyreduce:
 	}
     break;
 
-  case 77:
-#line 365 "a.y"
-    {
-		(yyval.addr) = nullgen;
-		if(pass == 2)
-			yyerror("undefined label: %s", (yyvsp[(1) - (2)].sym)->name);
-		(yyval.addr).type = D_BRANCH;
-		(yyval.addr).offset = (yyvsp[(2) - (2)].lval);
-	}
-    break;
-
-  case 78:
-#line 373 "a.y"
+  case 75:
+#line 363 "a.y"
     {
+		(yyvsp[(1) - (2)].sym) = labellookup((yyvsp[(1) - (2)].sym));
 		(yyval.addr) = nullgen;
+		if(pass == 2 && (yyvsp[(1) - (2)].sym)->type != LLAB)
+			yyerror("undefined label: %s", (yyvsp[(1) - (2)].sym)->labelname);
 		(yyval.addr).type = D_BRANCH;
 		(yyval.addr).offset = (yyvsp[(1) - (2)].sym)->value + (yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 79:
-#line 381 "a.y"
+  case 76:
+#line 374 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = (yyvsp[(1) - (1)].lval);
 	}
     break;
 
-  case 80:
-#line 386 "a.y"
+  case 77:
+#line 379 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = (yyvsp[(1) - (1)].lval);
 	}
     break;
 
-  case 81:
-#line 391 "a.y"
+  case 78:
+#line 384 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = (yyvsp[(1) - (1)].lval);
 	}
     break;
 
-  case 82:
-#line 396 "a.y"
+  case 79:
+#line 389 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = (yyvsp[(1) - (1)].lval);
 	}
     break;
 
-  case 83:
-#line 401 "a.y"
+  case 80:
+#line 394 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_SP;
 	}
     break;
 
-  case 84:
-#line 406 "a.y"
+  case 81:
+#line 399 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = (yyvsp[(1) - (1)].lval);
 	}
     break;
 
-  case 85:
-#line 411 "a.y"
+  case 82:
+#line 404 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = (yyvsp[(1) - (1)].lval);
 	}
     break;
 
-  case 86:
-#line 417 "a.y"
+  case 83:
+#line 410 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_CONST;
@@ -2202,8 +2186,8 @@ yyreduce:
 	}
     break;
 
-  case 87:
-#line 425 "a.y"
+  case 84:
+#line 418 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_CONST;
@@ -2211,8 +2195,8 @@ yyreduce:
 	}
     break;
 
-  case 88:
-#line 431 "a.y"
+  case 85:
+#line 424 "a.y"
     {
 		(yyval.addr) = (yyvsp[(2) - (2)].addr);
 		(yyval.addr).index = (yyvsp[(2) - (2)].addr).type;
@@ -2225,8 +2209,8 @@ yyreduce:
 	}
     break;
 
-  case 89:
-#line 442 "a.y"
+  case 86:
+#line 435 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_SCONST;
@@ -2234,8 +2218,8 @@ yyreduce:
 	}
     break;
 
-  case 90:
-#line 448 "a.y"
+  case 87:
+#line 441 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_FCONST;
@@ -2243,8 +2227,8 @@ yyreduce:
 	}
     break;
 
-  case 91:
-#line 454 "a.y"
+  case 88:
+#line 447 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_FCONST;
@@ -2252,8 +2236,8 @@ yyreduce:
 	}
     break;
 
-  case 92:
-#line 460 "a.y"
+  case 89:
+#line 453 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_FCONST;
@@ -2261,8 +2245,8 @@ yyreduce:
 	}
     break;
 
-  case 93:
-#line 466 "a.y"
+  case 90:
+#line 459 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_FCONST;
@@ -2270,8 +2254,8 @@ yyreduce:
 	}
     break;
 
-  case 96:
-#line 478 "a.y"
+  case 93:
+#line 471 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_INDIR+D_NONE;
@@ -2279,8 +2263,8 @@ yyreduce:
 	}
     break;
 
-  case 97:
-#line 484 "a.y"
+  case 94:
+#line 477 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_INDIR+(yyvsp[(3) - (4)].lval);
@@ -2288,8 +2272,8 @@ yyreduce:
 	}
     break;
 
-  case 98:
-#line 490 "a.y"
+  case 95:
+#line 483 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_INDIR+D_SP;
@@ -2297,8 +2281,8 @@ yyreduce:
 	}
     break;
 
-  case 99:
-#line 496 "a.y"
+  case 96:
+#line 489 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_INDIR+(yyvsp[(3) - (4)].lval);
@@ -2306,8 +2290,8 @@ yyreduce:
 	}
     break;
 
-  case 100:
-#line 502 "a.y"
+  case 97:
+#line 495 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_INDIR+D_NONE;
@@ -2318,8 +2302,8 @@ yyreduce:
 	}
     break;
 
-  case 101:
-#line 511 "a.y"
+  case 98:
+#line 504 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_INDIR+(yyvsp[(3) - (9)].lval);
@@ -2330,8 +2314,8 @@ yyreduce:
 	}
     break;
 
-  case 102:
-#line 520 "a.y"
+  case 99:
+#line 513 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_INDIR+(yyvsp[(3) - (9)].lval);
@@ -2342,24 +2326,24 @@ yyreduce:
 	}
     break;
 
-  case 103:
-#line 529 "a.y"
+  case 100:
+#line 522 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_INDIR+(yyvsp[(2) - (3)].lval);
 	}
     break;
 
-  case 104:
-#line 534 "a.y"
+  case 101:
+#line 527 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_INDIR+D_SP;
 	}
     break;
 
-  case 105:
-#line 539 "a.y"
+  case 102:
+#line 532 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_INDIR+D_NONE;
@@ -2369,8 +2353,8 @@ yyreduce:
 	}
     break;
 
-  case 106:
-#line 547 "a.y"
+  case 103:
+#line 540 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_INDIR+(yyvsp[(2) - (8)].lval);
@@ -2380,15 +2364,15 @@ yyreduce:
 	}
     break;
 
-  case 107:
-#line 557 "a.y"
+  case 104:
+#line 550 "a.y"
     {
 		(yyval.addr) = (yyvsp[(1) - (1)].addr);
 	}
     break;
 
-  case 108:
-#line 561 "a.y"
+  case 105:
+#line 554 "a.y"
     {
 		(yyval.addr) = (yyvsp[(1) - (6)].addr);
 		(yyval.addr).index = (yyvsp[(3) - (6)].lval);
@@ -2397,8 +2381,8 @@ yyreduce:
 	}
     break;
 
-  case 109:
-#line 570 "a.y"
+  case 106:
+#line 563 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = (yyvsp[(4) - (5)].lval);
@@ -2407,8 +2391,8 @@ yyreduce:
 	}
     break;
 
-  case 110:
-#line 577 "a.y"
+  case 107:
+#line 570 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_STATIC;
@@ -2417,166 +2401,166 @@ yyreduce:
 	}
     break;
 
-  case 111:
-#line 585 "a.y"
+  case 108:
+#line 578 "a.y"
     {
 		(yyval.lval) = 0;
 	}
     break;
 
-  case 112:
-#line 589 "a.y"
+  case 109:
+#line 582 "a.y"
     {
 		(yyval.lval) = (yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 113:
-#line 593 "a.y"
+  case 110:
+#line 586 "a.y"
     {
 		(yyval.lval) = -(yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 115:
-#line 600 "a.y"
+  case 112:
+#line 593 "a.y"
     {
 		(yyval.lval) = D_AUTO;
 	}
     break;
 
-  case 118:
-#line 608 "a.y"
+  case 115:
+#line 601 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (1)].sym)->value;
 	}
     break;
 
-  case 119:
-#line 612 "a.y"
+  case 116:
+#line 605 "a.y"
     {
 		(yyval.lval) = -(yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 120:
-#line 616 "a.y"
+  case 117:
+#line 609 "a.y"
     {
 		(yyval.lval) = (yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 121:
-#line 620 "a.y"
+  case 118:
+#line 613 "a.y"
     {
 		(yyval.lval) = ~(yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 122:
-#line 624 "a.y"
+  case 119:
+#line 617 "a.y"
     {
 		(yyval.lval) = (yyvsp[(2) - (3)].lval);
 	}
     break;
 
-  case 123:
-#line 630 "a.y"
+  case 120:
+#line 623 "a.y"
     {
 		(yyval.lval) = ((yyvsp[(1) - (1)].lval) & 0xffffffffLL) +
 			((vlong)ArgsSizeUnknown << 32);
 	}
     break;
 
-  case 124:
-#line 635 "a.y"
+  case 121:
+#line 628 "a.y"
     {
 		(yyval.lval) = (-(yyvsp[(2) - (2)].lval) & 0xffffffffLL) +
 			((vlong)ArgsSizeUnknown << 32);
 	}
     break;
 
-  case 125:
-#line 640 "a.y"
+  case 122:
+#line 633 "a.y"
     {
 		(yyval.lval) = ((yyvsp[(1) - (3)].lval) & 0xffffffffLL) +
 			(((yyvsp[(3) - (3)].lval) & 0xffffLL) << 32);
 	}
     break;
 
-  case 126:
-#line 645 "a.y"
+  case 123:
+#line 638 "a.y"
     {
 		(yyval.lval) = (-(yyvsp[(2) - (4)].lval) & 0xffffffffLL) +
 			(((yyvsp[(4) - (4)].lval) & 0xffffLL) << 32);
 	}
     break;
 
-  case 128:
-#line 653 "a.y"
+  case 125:
+#line 646 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) + (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 129:
-#line 657 "a.y"
+  case 126:
+#line 650 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) - (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 130:
-#line 661 "a.y"
+  case 127:
+#line 654 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) * (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 131:
-#line 665 "a.y"
+  case 128:
+#line 658 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) / (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 132:
-#line 669 "a.y"
+  case 129:
+#line 662 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) % (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 133:
-#line 673 "a.y"
+  case 130:
+#line 666 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (4)].lval) << (yyvsp[(4) - (4)].lval);
 	}
     break;
 
-  case 134:
-#line 677 "a.y"
+  case 131:
+#line 670 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (4)].lval) >> (yyvsp[(4) - (4)].lval);
 	}
     break;
 
-  case 135:
-#line 681 "a.y"
+  case 132:
+#line 674 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) & (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 136:
-#line 685 "a.y"
+  case 133:
+#line 678 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) ^ (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 137:
-#line 689 "a.y"
+  case 134:
+#line 682 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) | (yyvsp[(3) - (3)].lval);
 	}
@@ -2584,7 +2568,7 @@ yyreduce:
 
 
 /* Line 1267 of yacc.c.  */
-#line 2588 "y.tab.c"
+#line 2572 "y.tab.c"
       default: break;
     }
   YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);
diff --git a/src/cmd/8a/a.h b/src/cmd/8a/a.h
index adc388ca9f..a1aca07aea 100644
--- a/src/cmd/8a/a.h
+++ b/src/cmd/8a/a.h
@@ -70,6 +70,7 @@ struct	Sym
 	int32	value;
 	ushort	type;
 	char	*name;
+	char*	labelname;
 	char	sym;
 };
 #define	S	((Sym*)0)
@@ -148,6 +149,8 @@ void	newio(void);
 void	newfile(char*, int);
 Sym*	slookup(char*);
 Sym*	lookup(void);
+Sym*	labellookup(Sym*);
+void	settext(LSym*);
 void	syminit(Sym*);
 int32	yylex(void);
 int	getc(void);
diff --git a/src/cmd/8a/a.y b/src/cmd/8a/a.y
index 6bcf1313bf..c810d38577 100644
--- a/src/cmd/8a/a.y
+++ b/src/cmd/8a/a.y
@@ -74,15 +74,11 @@ prog:
 	line
 
 line:
-	LLAB ':'
-	{
-		if($1->value != pc)
-			yyerror("redeclaration of %s", $1->name);
-		$1->value = pc;
-	}
-	line
-|	LNAME ':'
+	LNAME ':'
 	{
+		$1 = labellookup($1);
+		if($1->type == LLAB && $1->value != pc)
+			yyerror("redeclaration of %s", $1->labelname);
 		$1->type = LLAB;
 		$1->value = pc;
 	}
@@ -199,11 +195,13 @@ spec1:	/* DATA */
 spec2:	/* TEXT */
 	mem ',' imm2
 	{
+		settext($1.sym);
 		$$.from = $1;
 		$$.to = $3;
 	}
 |	mem ',' con ',' imm2
 	{
+		settext($1.sym);
 		$$.from = $1;
 		$$.from.scale = $3;
 		$$.to = $5;
@@ -362,15 +360,10 @@ rel:
 	}
 |	LNAME offset
 	{
+		$1 = labellookup($1);
 		$$ = nullgen;
-		if(pass == 2)
-			yyerror("undefined label: %s", $1->name);
-		$$.type = D_BRANCH;
-		$$.offset = $2;
-	}
-|	LLAB offset
-	{
-		$$ = nullgen;
+		if(pass == 2 && $1->type != LLAB)
+			yyerror("undefined label: %s", $1->labelname);
 		$$.type = D_BRANCH;
 		$$.offset = $1->value + $2;
 	}
diff --git a/src/cmd/8a/y.tab.c b/src/cmd/8a/y.tab.c
index 85279c21f9..f284d8ea2e 100644
--- a/src/cmd/8a/y.tab.c
+++ b/src/cmd/8a/y.tab.c
@@ -411,16 +411,16 @@ union yyalloc
 /* YYFINAL -- State number of the termination state.  */
 #define YYFINAL  2
 /* YYLAST -- Last index in YYTABLE.  */
-#define YYLAST   546
+#define YYLAST   561
 
 /* YYNTOKENS -- Number of terminals.  */
 #define YYNTOKENS  54
 /* YYNNTS -- Number of nonterminals.  */
-#define YYNNTS  41
+#define YYNNTS  40
 /* YYNRULES -- Number of rules.  */
-#define YYNRULES  135
+#define YYNRULES  132
 /* YYNRULES -- Number of states.  */
-#define YYNSTATES  276
+#define YYNSTATES  270
 
 /* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
 #define YYUNDEFTOK  2
@@ -469,91 +469,90 @@ static const yytype_uint8 yytranslate[] =
    YYRHS.  */
 static const yytype_uint16 yyprhs[] =
 {
-       0,     0,     3,     4,     5,     9,    10,    15,    16,    21,
-      23,    26,    29,    33,    37,    40,    43,    46,    49,    52,
+       0,     0,     3,     4,     5,     9,    10,    15,    17,    20,
+      23,    27,    31,    34,    37,    40,    43,    46,    49,    52,
       55,    58,    61,    64,    67,    70,    73,    76,    79,    82,
-      85,    88,    91,    92,    94,    98,   102,   105,   107,   110,
-     112,   115,   117,   121,   127,   131,   137,   140,   142,   145,
-     147,   149,   153,   159,   163,   169,   172,   174,   178,   182,
-     188,   194,   200,   204,   208,   210,   212,   214,   216,   219,
-     222,   224,   226,   228,   230,   232,   237,   240,   243,   245,
-     247,   249,   251,   253,   255,   258,   261,   264,   267,   272,
-     278,   282,   285,   287,   290,   294,   299,   301,   303,   305,
-     310,   315,   322,   332,   342,   346,   350,   355,   361,   370,
-     372,   379,   385,   393,   394,   397,   400,   402,   404,   406,
-     408,   410,   413,   416,   419,   423,   425,   429,   433,   437,
-     441,   445,   450,   455,   459,   463
+      85,    86,    88,    92,    96,    99,   101,   104,   106,   109,
+     111,   115,   121,   125,   131,   134,   136,   139,   141,   143,
+     147,   153,   157,   163,   166,   168,   172,   176,   182,   188,
+     194,   198,   202,   204,   206,   208,   210,   213,   216,   218,
+     220,   222,   224,   226,   231,   234,   236,   238,   240,   242,
+     244,   246,   249,   252,   255,   258,   263,   269,   273,   276,
+     278,   281,   285,   290,   292,   294,   296,   301,   306,   313,
+     323,   333,   337,   341,   346,   352,   361,   363,   370,   376,
+     384,   385,   388,   391,   393,   395,   397,   399,   401,   404,
+     407,   410,   414,   416,   420,   424,   428,   432,   436,   441,
+     446,   450,   454
 };
 
 /* YYRHS -- A `-1'-separated list of the rules' RHS.  */
 static const yytype_int8 yyrhs[] =
 {
       55,     0,    -1,    -1,    -1,    55,    56,    57,    -1,    -1,
-      44,    46,    58,    57,    -1,    -1,    43,    46,    59,    57,
-      -1,    47,    -1,    60,    47,    -1,     1,    47,    -1,    43,
-      48,    94,    -1,    45,    48,    94,    -1,    13,    61,    -1,
-      14,    65,    -1,    15,    64,    -1,    16,    62,    -1,    17,
-      63,    -1,    21,    66,    -1,    19,    67,    -1,    22,    68,
-      -1,    18,    69,    -1,    20,    70,    -1,    23,    71,    -1,
-      24,    72,    -1,    25,    73,    -1,    26,    74,    -1,    27,
-      75,    -1,    28,    76,    -1,    29,    77,    -1,    30,    78,
-      -1,    -1,    49,    -1,    81,    49,    79,    -1,    79,    49,
-      81,    -1,    81,    49,    -1,    81,    -1,    49,    79,    -1,
-      79,    -1,    49,    82,    -1,    82,    -1,    84,    49,    82,
-      -1,    90,    11,    93,    49,    84,    -1,    87,    49,    85,
-      -1,    87,    49,    93,    49,    85,    -1,    49,    80,    -1,
-      80,    -1,    10,    90,    -1,    61,    -1,    65,    -1,    81,
-      49,    79,    -1,    81,    49,    79,    46,    36,    -1,    81,
-      49,    79,    -1,    81,    49,    79,    46,    37,    -1,    81,
-      49,    -1,    81,    -1,    81,    49,    79,    -1,    87,    49,
-      84,    -1,    87,    49,    93,    49,    84,    -1,    83,    49,
-      79,    49,    93,    -1,    84,    49,    79,    49,    83,    -1,
-      81,    49,    81,    -1,    81,    49,    81,    -1,    83,    -1,
-      87,    -1,    82,    -1,    89,    -1,    10,    83,    -1,    10,
-      88,    -1,    83,    -1,    88,    -1,    84,    -1,    79,    -1,
-      84,    -1,    93,    50,    33,    51,    -1,    43,    91,    -1,
-      44,    91,    -1,    35,    -1,    38,    -1,    36,    -1,    39,
-      -1,    42,    -1,    37,    -1,    52,    93,    -1,    52,    90,
-      -1,    52,    41,    -1,    52,    40,    -1,    52,    50,    40,
-      51,    -1,    52,    50,     9,    40,    51,    -1,    52,     9,
-      40,    -1,    52,    86,    -1,    31,    -1,     9,    31,    -1,
-      31,     9,    31,    -1,     9,    31,     9,    31,    -1,    88,
-      -1,    89,    -1,    93,    -1,    93,    50,    36,    51,    -1,
-      93,    50,    42,    51,    -1,    93,    50,    36,    10,    93,
-      51,    -1,    93,    50,    36,    51,    50,    36,    10,    93,
-      51,    -1,    93,    50,    36,    51,    50,    37,    10,    93,
-      51,    -1,    50,    36,    51,    -1,    50,    42,    51,    -1,
-      93,    50,    37,    51,    -1,    50,    36,    10,    93,    51,
-      -1,    50,    36,    51,    50,    36,    10,    93,    51,    -1,
-      90,    -1,    90,    50,    36,    10,    93,    51,    -1,    43,
-      91,    50,    92,    51,    -1,    43,     6,     7,    91,    50,
-      34,    51,    -1,    -1,     8,    93,    -1,     9,    93,    -1,
-      34,    -1,    42,    -1,    32,    -1,    31,    -1,    45,    -1,
-       9,    93,    -1,     8,    93,    -1,    53,    93,    -1,    50,
-      94,    51,    -1,    93,    -1,    94,     8,    94,    -1,    94,
-       9,    94,    -1,    94,    10,    94,    -1,    94,    11,    94,
-      -1,    94,    12,    94,    -1,    94,     6,     6,    94,    -1,
-      94,     7,     7,    94,    -1,    94,     5,    94,    -1,    94,
-       4,    94,    -1,    94,     3,    94,    -1
+      43,    46,    58,    57,    -1,    47,    -1,    59,    47,    -1,
+       1,    47,    -1,    43,    48,    93,    -1,    45,    48,    93,
+      -1,    13,    60,    -1,    14,    64,    -1,    15,    63,    -1,
+      16,    61,    -1,    17,    62,    -1,    21,    65,    -1,    19,
+      66,    -1,    22,    67,    -1,    18,    68,    -1,    20,    69,
+      -1,    23,    70,    -1,    24,    71,    -1,    25,    72,    -1,
+      26,    73,    -1,    27,    74,    -1,    28,    75,    -1,    29,
+      76,    -1,    30,    77,    -1,    -1,    49,    -1,    80,    49,
+      78,    -1,    78,    49,    80,    -1,    80,    49,    -1,    80,
+      -1,    49,    78,    -1,    78,    -1,    49,    81,    -1,    81,
+      -1,    83,    49,    81,    -1,    89,    11,    92,    49,    83,
+      -1,    86,    49,    84,    -1,    86,    49,    92,    49,    84,
+      -1,    49,    79,    -1,    79,    -1,    10,    89,    -1,    60,
+      -1,    64,    -1,    80,    49,    78,    -1,    80,    49,    78,
+      46,    36,    -1,    80,    49,    78,    -1,    80,    49,    78,
+      46,    37,    -1,    80,    49,    -1,    80,    -1,    80,    49,
+      78,    -1,    86,    49,    83,    -1,    86,    49,    92,    49,
+      83,    -1,    82,    49,    78,    49,    92,    -1,    83,    49,
+      78,    49,    82,    -1,    80,    49,    80,    -1,    80,    49,
+      80,    -1,    82,    -1,    86,    -1,    81,    -1,    88,    -1,
+      10,    82,    -1,    10,    87,    -1,    82,    -1,    87,    -1,
+      83,    -1,    78,    -1,    83,    -1,    92,    50,    33,    51,
+      -1,    43,    90,    -1,    35,    -1,    38,    -1,    36,    -1,
+      39,    -1,    42,    -1,    37,    -1,    52,    92,    -1,    52,
+      89,    -1,    52,    41,    -1,    52,    40,    -1,    52,    50,
+      40,    51,    -1,    52,    50,     9,    40,    51,    -1,    52,
+       9,    40,    -1,    52,    85,    -1,    31,    -1,     9,    31,
+      -1,    31,     9,    31,    -1,     9,    31,     9,    31,    -1,
+      87,    -1,    88,    -1,    92,    -1,    92,    50,    36,    51,
+      -1,    92,    50,    42,    51,    -1,    92,    50,    36,    10,
+      92,    51,    -1,    92,    50,    36,    51,    50,    36,    10,
+      92,    51,    -1,    92,    50,    36,    51,    50,    37,    10,
+      92,    51,    -1,    50,    36,    51,    -1,    50,    42,    51,
+      -1,    92,    50,    37,    51,    -1,    50,    36,    10,    92,
+      51,    -1,    50,    36,    51,    50,    36,    10,    92,    51,
+      -1,    89,    -1,    89,    50,    36,    10,    92,    51,    -1,
+      43,    90,    50,    91,    51,    -1,    43,     6,     7,    90,
+      50,    34,    51,    -1,    -1,     8,    92,    -1,     9,    92,
+      -1,    34,    -1,    42,    -1,    32,    -1,    31,    -1,    45,
+      -1,     9,    92,    -1,     8,    92,    -1,    53,    92,    -1,
+      50,    93,    51,    -1,    92,    -1,    93,     8,    93,    -1,
+      93,     9,    93,    -1,    93,    10,    93,    -1,    93,    11,
+      93,    -1,    93,    12,    93,    -1,    93,     6,     6,    93,
+      -1,    93,     7,     7,    93,    -1,    93,     5,    93,    -1,
+      93,     4,    93,    -1,    93,     3,    93,    -1
 };
 
 /* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
 static const yytype_uint16 yyrline[] =
 {
-       0,    69,    69,    71,    70,    78,    77,    85,    84,    90,
-      91,    92,    95,   100,   106,   107,   108,   109,   110,   111,
-     112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
-     122,   123,   126,   130,   137,   144,   151,   156,   163,   168,
-     175,   180,   185,   192,   200,   205,   213,   218,   223,   232,
-     233,   236,   241,   251,   256,   266,   271,   276,   283,   288,
-     296,   304,   314,   323,   334,   335,   338,   339,   340,   344,
-     348,   349,   350,   353,   354,   357,   363,   371,   379,   384,
-     389,   394,   399,   404,   411,   417,   428,   434,   440,   446,
-     452,   460,   469,   474,   479,   484,   491,   492,   495,   501,
-     507,   513,   522,   531,   540,   545,   550,   556,   564,   574,
-     578,   587,   594,   603,   606,   610,   616,   617,   621,   624,
-     625,   629,   633,   637,   641,   647,   648,   652,   656,   660,
-     664,   668,   672,   676,   680,   684
+       0,    69,    69,    71,    70,    78,    77,    86,    87,    88,
+      91,    96,   102,   103,   104,   105,   106,   107,   108,   109,
+     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
+     122,   126,   133,   140,   147,   152,   159,   164,   171,   176,
+     181,   188,   196,   202,   211,   216,   221,   230,   231,   234,
+     239,   249,   254,   264,   269,   274,   281,   286,   294,   302,
+     312,   321,   332,   333,   336,   337,   338,   342,   346,   347,
+     348,   351,   352,   355,   361,   372,   377,   382,   387,   392,
+     397,   404,   410,   421,   427,   433,   439,   445,   453,   462,
+     467,   472,   477,   484,   485,   488,   494,   500,   506,   515,
+     524,   533,   538,   543,   549,   557,   567,   571,   580,   587,
+     596,   599,   603,   609,   610,   614,   617,   618,   622,   626,
+     630,   634,   640,   641,   645,   649,   653,   657,   661,   665,
+     669,   673,   677
 };
 #endif
 
@@ -569,10 +568,10 @@ static const char *const yytname[] =
   "LCONST", "LFP", "LPC", "LSB", "LBREG", "LLREG", "LSREG", "LFREG",
   "LXREG", "LFCONST", "LSCONST", "LSP", "LNAME", "LLAB", "LVAR", "':'",
   "';'", "'='", "','", "'('", "')'", "'$'", "'~'", "$accept", "prog", "@1",
-  "line", "@2", "@3", "inst", "nonnon", "rimrem", "remrim", "rimnon",
-  "nonrem", "nonrel", "spec1", "spec2", "spec3", "spec4", "spec5", "spec6",
-  "spec7", "spec8", "spec9", "spec10", "spec11", "spec12", "rem", "rom",
-  "rim", "rel", "reg", "imm", "imm2", "con2", "mem", "omem", "nmem", "nam",
+  "line", "@2", "inst", "nonnon", "rimrem", "remrim", "rimnon", "nonrem",
+  "nonrel", "spec1", "spec2", "spec3", "spec4", "spec5", "spec6", "spec7",
+  "spec8", "spec9", "spec10", "spec11", "spec12", "rem", "rom", "rim",
+  "rel", "reg", "imm", "imm2", "con2", "mem", "omem", "nmem", "nam",
   "offset", "pointer", "con", "expr", 0
 };
 #endif
@@ -594,39 +593,39 @@ static const yytype_uint16 yytoknum[] =
 /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
 static const yytype_uint8 yyr1[] =
 {
-       0,    54,    55,    56,    55,    58,    57,    59,    57,    57,
-      57,    57,    60,    60,    60,    60,    60,    60,    60,    60,
-      60,    60,    60,    60,    60,    60,    60,    60,    60,    60,
-      60,    60,    61,    61,    62,    63,    64,    64,    65,    65,
-      66,    66,    66,    67,    68,    68,    69,    69,    69,    70,
-      70,    71,    71,    72,    72,    73,    73,    73,    74,    74,
-      75,    76,    77,    78,    79,    79,    80,    80,    80,    80,
-      80,    80,    80,    81,    81,    82,    82,    82,    83,    83,
-      83,    83,    83,    83,    84,    84,    84,    84,    84,    84,
-      84,    85,    86,    86,    86,    86,    87,    87,    88,    88,
-      88,    88,    88,    88,    88,    88,    88,    88,    88,    89,
-      89,    90,    90,    91,    91,    91,    92,    92,    92,    93,
-      93,    93,    93,    93,    93,    94,    94,    94,    94,    94,
-      94,    94,    94,    94,    94,    94
+       0,    54,    55,    56,    55,    58,    57,    57,    57,    57,
+      59,    59,    59,    59,    59,    59,    59,    59,    59,    59,
+      59,    59,    59,    59,    59,    59,    59,    59,    59,    59,
+      60,    60,    61,    62,    63,    63,    64,    64,    65,    65,
+      65,    66,    67,    67,    68,    68,    68,    69,    69,    70,
+      70,    71,    71,    72,    72,    72,    73,    73,    74,    75,
+      76,    77,    78,    78,    79,    79,    79,    79,    79,    79,
+      79,    80,    80,    81,    81,    82,    82,    82,    82,    82,
+      82,    83,    83,    83,    83,    83,    83,    83,    84,    85,
+      85,    85,    85,    86,    86,    87,    87,    87,    87,    87,
+      87,    87,    87,    87,    87,    87,    88,    88,    89,    89,
+      90,    90,    90,    91,    91,    91,    92,    92,    92,    92,
+      92,    92,    93,    93,    93,    93,    93,    93,    93,    93,
+      93,    93,    93
 };
 
 /* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
 static const yytype_uint8 yyr2[] =
 {
-       0,     2,     0,     0,     3,     0,     4,     0,     4,     1,
-       2,     2,     3,     3,     2,     2,     2,     2,     2,     2,
+       0,     2,     0,     0,     3,     0,     4,     1,     2,     2,
+       3,     3,     2,     2,     2,     2,     2,     2,     2,     2,
        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     0,     1,     3,     3,     2,     1,     2,     1,
-       2,     1,     3,     5,     3,     5,     2,     1,     2,     1,
-       1,     3,     5,     3,     5,     2,     1,     3,     3,     5,
-       5,     5,     3,     3,     1,     1,     1,     1,     2,     2,
-       1,     1,     1,     1,     1,     4,     2,     2,     1,     1,
-       1,     1,     1,     1,     2,     2,     2,     2,     4,     5,
-       3,     2,     1,     2,     3,     4,     1,     1,     1,     4,
-       4,     6,     9,     9,     3,     3,     4,     5,     8,     1,
-       6,     5,     7,     0,     2,     2,     1,     1,     1,     1,
-       1,     2,     2,     2,     3,     1,     3,     3,     3,     3,
-       3,     4,     4,     3,     3,     3
+       0,     1,     3,     3,     2,     1,     2,     1,     2,     1,
+       3,     5,     3,     5,     2,     1,     2,     1,     1,     3,
+       5,     3,     5,     2,     1,     3,     3,     5,     5,     5,
+       3,     3,     1,     1,     1,     1,     2,     2,     1,     1,
+       1,     1,     1,     4,     2,     1,     1,     1,     1,     1,
+       1,     2,     2,     2,     2,     4,     5,     3,     2,     1,
+       2,     3,     4,     1,     1,     1,     4,     4,     6,     9,
+       9,     3,     3,     4,     5,     8,     1,     6,     5,     7,
+       0,     2,     2,     1,     1,     1,     1,     1,     2,     2,
+       2,     3,     1,     3,     3,     3,     3,     3,     4,     4,
+       3,     3,     3
 };
 
 /* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
@@ -634,89 +633,85 @@ static const yytype_uint8 yyr2[] =
    means the default is an error.  */
 static const yytype_uint8 yydefact[] =
 {
-       2,     3,     1,     0,     0,    32,     0,     0,     0,     0,
-       0,     0,    32,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     9,     4,     0,    11,
-      33,    14,     0,     0,   119,    78,    80,    83,    79,    81,
-      82,   113,   120,     0,     0,     0,    15,    39,    64,    65,
-      96,    97,   109,    98,     0,    16,    73,    37,    74,    17,
-       0,    18,     0,     0,   113,   113,     0,    22,    47,    66,
-      70,    72,    71,    67,    98,    20,     0,    33,    49,    50,
-      23,   113,     0,     0,    19,    41,     0,     0,    21,     0,
-      24,     0,    25,     0,    26,    56,    27,     0,    28,     0,
-      29,     0,    30,     0,    31,     0,     7,     0,     5,     0,
-      10,   122,   121,     0,     0,     0,     0,    38,     0,     0,
-     125,     0,   123,     0,     0,     0,    87,    86,     0,    85,
-      84,    36,     0,     0,    68,    69,    48,    76,    77,     0,
-      46,     0,     0,    76,    40,     0,     0,     0,     0,     0,
-      55,     0,     0,     0,     0,     0,     0,    12,     0,    13,
-     113,   114,   115,     0,     0,   104,   105,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   124,     0,     0,
-       0,     0,    90,     0,     0,    34,    35,     0,     0,    42,
-       0,    44,     0,    51,    53,    57,    58,     0,     0,     0,
-      62,    63,     8,     6,     0,   118,   116,   117,     0,     0,
-       0,   135,   134,   133,     0,     0,   126,   127,   128,   129,
-     130,     0,     0,    99,   106,   100,     0,    88,    75,     0,
-       0,    92,    91,     0,     0,     0,     0,     0,     0,     0,
-     111,   107,     0,   131,   132,     0,     0,     0,    89,    43,
-      93,     0,    45,    52,    54,    59,    60,    61,     0,     0,
-     110,   101,     0,     0,     0,    94,   112,     0,     0,     0,
-      95,   108,     0,     0,   102,   103
+       2,     3,     1,     0,     0,    30,     0,     0,     0,     0,
+       0,     0,    30,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     7,     4,     0,     9,    31,
+      12,     0,     0,   116,    75,    77,    80,    76,    78,    79,
+     110,   117,     0,     0,     0,    13,    37,    62,    63,    93,
+      94,   106,    95,     0,    14,    71,    35,    72,    15,     0,
+      16,     0,     0,   110,     0,    20,    45,    64,    68,    70,
+      69,    65,    95,    18,     0,    31,    47,    48,    21,   110,
+       0,     0,    17,    39,     0,     0,    19,     0,    22,     0,
+      23,     0,    24,    54,    25,     0,    26,     0,    27,     0,
+      28,     0,    29,     0,     5,     0,     0,     8,   119,   118,
+       0,     0,     0,     0,    36,     0,     0,   122,     0,   120,
+       0,     0,     0,    84,    83,     0,    82,    81,    34,     0,
+       0,    66,    67,    46,    74,     0,    44,     0,     0,    74,
+      38,     0,     0,     0,     0,     0,    53,     0,     0,     0,
+       0,     0,     0,    10,    11,   110,   111,   112,     0,     0,
+     101,   102,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   121,     0,     0,     0,     0,    87,     0,     0,
+      32,    33,     0,     0,    40,     0,    42,     0,    49,    51,
+      55,    56,     0,     0,     0,    60,    61,     6,     0,   115,
+     113,   114,     0,     0,     0,   132,   131,   130,     0,     0,
+     123,   124,   125,   126,   127,     0,     0,    96,   103,    97,
+       0,    85,    73,     0,     0,    89,    88,     0,     0,     0,
+       0,     0,     0,     0,   108,   104,     0,   128,   129,     0,
+       0,     0,    86,    41,    90,     0,    43,    50,    52,    57,
+      58,    59,     0,     0,   107,    98,     0,     0,     0,    91,
+     109,     0,     0,     0,    92,   105,     0,     0,    99,   100
 };
 
 /* YYDEFGOTO[NTERM-NUM].  */
 static const yytype_int16 yydefgoto[] =
 {
-      -1,     1,     3,    27,   158,   156,    28,    31,    59,    61,
-      55,    46,    84,    75,    88,    67,    80,    90,    92,    94,
-      96,    98,   100,   102,   104,    56,    68,    57,    69,    48,
-      58,   191,   232,    49,    50,    51,    52,   116,   208,    53,
-     121
+      -1,     1,     3,    26,   152,    27,    30,    58,    60,    54,
+      45,    82,    73,    86,    65,    78,    88,    90,    92,    94,
+      96,    98,   100,   102,    55,    66,    56,    67,    47,    57,
+     186,   226,    48,    49,    50,    51,   113,   202,    52,   118
 };
 
 /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
    STATE-NUM.  */
-#define YYPACT_NINF -104
+#define YYPACT_NINF -89
 static const yytype_int16 yypact[] =
 {
-    -104,     4,  -104,   173,   -26,   -25,   277,   297,   297,   349,
-     225,   -14,   329,   396,    18,   297,   297,   297,    18,   171,
-     -20,   297,   297,     2,    -4,    26,  -104,  -104,    43,  -104,
-    -104,  -104,   478,   478,  -104,  -104,  -104,  -104,  -104,  -104,
-    -104,   111,  -104,   349,   402,   478,  -104,  -104,  -104,  -104,
-    -104,  -104,   -12,    -5,    83,  -104,  -104,    44,  -104,  -104,
-      46,  -104,    49,   349,   111,   113,   245,  -104,  -104,  -104,
-    -104,  -104,  -104,  -104,    50,  -104,   100,   349,  -104,  -104,
-    -104,   113,   420,   478,  -104,  -104,    64,    66,  -104,    78,
-    -104,    80,  -104,    85,  -104,    89,  -104,    93,  -104,    98,
-    -104,   101,  -104,   112,  -104,   121,  -104,   478,  -104,   478,
-    -104,  -104,  -104,   153,   478,   478,   135,  -104,     8,   163,
-    -104,    74,  -104,   179,    52,   427,  -104,  -104,   445,  -104,
-    -104,  -104,   349,   297,  -104,  -104,  -104,   135,  -104,   381,
-    -104,    33,   478,  -104,  -104,   420,   186,   451,   349,   349,
-     349,   460,   349,   349,   297,   297,   173,   172,   173,   172,
-     113,  -104,  -104,     5,   478,   180,  -104,   478,   478,   478,
-     226,   224,   478,   478,   478,   478,   478,  -104,   235,    36,
-     195,   196,  -104,   466,   197,  -104,  -104,   199,   202,  -104,
-      21,  -104,   203,   211,   219,  -104,  -104,   217,   222,   223,
-    -104,  -104,  -104,  -104,   229,  -104,  -104,  -104,   240,   241,
-     237,   232,   527,   534,   478,   478,   134,   134,  -104,  -104,
-    -104,   478,   478,   243,  -104,  -104,   248,  -104,  -104,   -20,
-     263,   287,  -104,   249,   264,   265,   -20,   478,   171,   269,
-    -104,  -104,   294,   214,   214,   256,   258,   119,  -104,  -104,
-     301,   280,  -104,  -104,  -104,  -104,  -104,  -104,   266,   478,
-    -104,  -104,   308,   311,   292,  -104,  -104,   273,   478,   478,
-    -104,  -104,   274,   278,  -104,  -104
+     -89,     8,   -89,   211,   -33,   -23,   288,   308,   308,   360,
+     236,   -11,   340,    54,    41,   308,   308,   308,    41,   106,
+     -13,   308,   308,    62,    -4,   -89,   -89,    45,   -89,   -89,
+     -89,   484,   484,   -89,   -89,   -89,   -89,   -89,   -89,   -89,
+      81,   -89,   360,   413,   484,   -89,   -89,   -89,   -89,   -89,
+     -89,    38,    48,   407,   -89,   -89,    -2,   -89,   -89,    64,
+     -89,    78,   360,    81,   256,   -89,   -89,   -89,   -89,   -89,
+     -89,   -89,    61,   -89,   107,   360,   -89,   -89,   -89,    59,
+     431,   484,   -89,   -89,    86,    79,   -89,    87,   -89,    89,
+     -89,    91,   -89,    97,   -89,   102,   -89,   116,   -89,   120,
+     -89,   148,   -89,   151,   -89,   484,   484,   -89,   -89,   -89,
+     123,   484,   484,   105,   -89,     1,   150,   -89,   169,   -89,
+     166,     9,    69,   -89,   -89,   456,   -89,   -89,   -89,   360,
+     308,   -89,   -89,   -89,   105,   392,   -89,   -17,   484,   -89,
+     -89,   431,   170,   460,   360,   360,   360,   469,   360,   360,
+     308,   308,   211,   179,   179,    59,   -89,   -89,     6,   484,
+     154,   -89,   484,   484,   484,   201,   149,   484,   484,   484,
+     484,   484,   -89,   198,    13,   158,   159,   -89,   480,   160,
+     -89,   -89,   162,   165,   -89,     0,   -89,   167,   171,   172,
+     -89,   -89,   193,   199,   200,   -89,   -89,   -89,   197,   -89,
+     -89,   -89,   168,   204,   214,   534,   542,   549,   484,   484,
+     113,   113,   -89,   -89,   -89,   484,   484,   207,   -89,   -89,
+     208,   -89,   -89,   -13,   220,   251,   -89,   209,   226,   231,
+     -13,   484,   106,   229,   -89,   -89,   259,   184,   184,   219,
+     225,    80,   -89,   -89,   268,   249,   -89,   -89,   -89,   -89,
+     -89,   -89,   232,   484,   -89,   -89,   272,   274,   269,   -89,
+     -89,   239,   484,   484,   -89,   -89,   252,   253,   -89,   -89
 };
 
 /* YYPGOTO[NTERM-NUM].  */
 static const yytype_int16 yypgoto[] =
 {
-    -104,  -104,  -104,  -103,  -104,  -104,  -104,   319,  -104,  -104,
-    -104,   331,  -104,  -104,  -104,  -104,  -104,  -104,  -104,  -104,
-    -104,  -104,  -104,  -104,  -104,    19,   275,    -2,    -6,    -9,
-      -8,   115,  -104,    22,     1,    -1,    -3,   -48,  -104,   -10,
-     -66
+     -89,   -89,   -89,   153,   -89,   -89,   290,   -89,   -89,   -89,
+     295,   -89,   -89,   -89,   -89,   -89,   -89,   -89,   -89,   -89,
+     -89,   -89,   -89,   -89,    18,   246,    20,    -7,    -9,    -8,
+      84,   -89,    51,    -3,    -6,     4,   -50,   -89,   -10,   -88
 };
 
 /* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
@@ -726,120 +721,124 @@ static const yytype_int16 yypgoto[] =
 #define YYTABLE_NINF -1
 static const yytype_uint16 yytable[] =
 {
-      74,    70,    71,    87,     2,    86,    60,    85,    76,    73,
-      99,    72,   101,    91,    93,    95,   137,   138,   164,   103,
-     105,    29,   111,   112,    30,    47,    32,    33,    62,    41,
-     230,    47,    54,   143,   120,   122,    89,   205,   123,   206,
-      97,   157,   108,   159,   130,   124,   222,   207,   106,    34,
-     107,   129,   231,   202,   134,   203,    74,    70,    71,   165,
-     136,    41,   117,    42,   135,    73,   187,    72,    44,   179,
-     180,    45,    87,   120,   109,   181,   144,   167,   168,   169,
-     170,   171,   172,   173,   174,   175,   176,   223,   179,   180,
-     110,    32,   125,   131,   181,   132,   117,   120,   133,   120,
-     141,   211,   212,   213,   161,   162,   216,   217,   218,   219,
-     220,   142,   204,   145,    34,   112,   146,   113,   120,   114,
-     115,   114,   115,   126,   127,   177,    41,   147,    42,   148,
-     134,   186,   188,   128,   149,    87,    45,   192,   150,   189,
-     135,   197,   151,   196,   174,   175,   176,   152,   243,   244,
-     153,   185,   200,   201,   209,   262,   263,   120,   120,   120,
-     160,   154,   120,   120,   120,   120,   120,   193,   194,   195,
-     155,   198,   199,   112,     4,   167,   168,   169,   170,   171,
-     172,   173,   174,   175,   176,   163,     5,     6,     7,     8,
-       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
-      19,    20,    21,    22,   120,   120,    35,    36,    37,    38,
-      39,   245,   246,    40,   166,   178,    23,    24,    25,   187,
-      26,   249,   172,   173,   174,   175,   176,   256,   255,   257,
-     210,   215,   214,    32,    33,    63,   168,   169,   170,   171,
-     172,   173,   174,   175,   176,   221,   224,   225,   227,   267,
-     228,   229,   233,    32,    33,   139,    34,   234,   272,   273,
-      35,    36,    37,    38,    39,   235,   236,    40,    64,    65,
-      42,   237,   238,   242,    66,    44,    34,    54,    45,   239,
-      35,    36,    37,    38,    39,    32,    33,    40,    64,    65,
-      42,   240,   241,   247,   250,    44,   251,    54,    45,   248,
-     253,   190,   254,   258,   259,    32,    33,   260,    34,   261,
-     264,   265,    35,    36,    37,    38,    39,   266,   268,    40,
-      41,   269,    42,   270,   271,   274,    43,    44,    34,   275,
-      45,    78,    35,    36,    37,    38,    39,    32,    33,    40,
-      41,   140,    42,    79,     0,     0,     0,    44,   252,    54,
-      45,     0,     0,     0,     0,     0,     0,    32,    33,     0,
-      34,     0,     0,     0,    35,    36,    37,    38,    39,     0,
-       0,    40,    41,     0,    42,     0,     0,     0,    77,    44,
-      34,     0,    45,     0,    35,    36,    37,    38,    39,    32,
-      33,    40,    41,     0,    42,     0,     0,     0,     0,    44,
-       0,     0,    45,     0,    32,    33,     0,     0,     0,     0,
-      32,    33,    34,     0,     0,     0,    35,    36,    37,    38,
-      39,     0,     0,    40,     0,     0,    42,    34,    32,    33,
-       0,    44,     0,    34,    45,    32,    33,     0,   118,    81,
-      65,    42,     0,     0,   119,    82,    83,    42,    54,    45,
-       0,    34,    83,    32,   183,    45,     0,     0,    34,    32,
-      33,     0,     0,    81,    65,    42,     0,   182,    32,    33,
-      83,     0,    42,    45,    32,    33,    34,    83,     0,     0,
-      45,     0,    34,     0,     0,   184,    32,    33,     0,     0,
-      42,    34,     0,     0,     0,    83,    42,    34,    45,     0,
-       0,    83,     0,   190,    45,    42,   226,     0,     0,    34,
-      83,    42,    54,    45,     0,     0,    83,     0,     0,    45,
-       0,     0,     0,    42,     0,     0,     0,     0,    83,     0,
-       0,    45,   169,   170,   171,   172,   173,   174,   175,   176,
-     170,   171,   172,   173,   174,   175,   176
+      72,    68,    69,    85,    71,    84,    83,    70,     2,   224,
+      97,   159,    99,   134,    28,    74,   182,   153,   154,   174,
+     175,   108,   109,   216,    46,   176,    29,    61,    59,   139,
+      46,   225,    40,   117,   119,    89,    91,    93,   199,    53,
+     200,   101,   103,   127,   106,   174,   175,   128,   201,    31,
+      32,   176,   160,   131,    72,    68,    69,   126,    71,   132,
+     114,    70,    31,    32,   217,    87,   133,   111,   112,    95,
+      85,   117,    33,   140,   205,   206,   207,    31,    32,   210,
+     211,   212,   213,   214,    40,    33,    41,   110,   120,   111,
+     112,    43,   107,   114,    44,   117,   117,    79,   121,    41,
+      33,   156,   157,    80,    81,   198,    53,    44,   104,   177,
+     105,   137,   109,   129,    41,   117,   256,   257,   138,    81,
+     237,   238,    44,   169,   170,   171,   131,   130,   183,   142,
+     155,    85,   132,   187,   184,   141,   143,   192,   144,   191,
+     145,    34,    35,    36,    37,    38,   146,   180,    39,   203,
+     181,   147,   117,   117,   117,   158,   209,   117,   117,   117,
+     117,   117,   188,   189,   190,   148,   193,   194,   109,   149,
+     195,   196,   162,   163,   164,   165,   166,   167,   168,   169,
+     170,   171,   162,   163,   164,   165,   166,   167,   168,   169,
+     170,   171,   167,   168,   169,   170,   171,   150,   117,   117,
+     151,   161,   173,   182,   204,   239,   240,   208,   215,   218,
+     219,   221,     4,   222,   223,   243,   227,   228,   229,   234,
+     172,   250,   249,   251,     5,     6,     7,     8,     9,    10,
+      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
+      21,    22,   230,   261,    31,    32,    62,   233,   231,   232,
+     236,   244,   266,   267,    23,   235,    24,   241,    25,   242,
+     245,   185,   247,   252,    31,    32,   135,    33,   248,   253,
+     254,    34,    35,    36,    37,    38,   255,   258,    39,    63,
+     259,    41,   262,   260,   263,    64,    43,    33,    53,    44,
+     265,    34,    35,    36,    37,    38,    31,    32,    39,    63,
+     264,    41,    76,   268,   269,   197,    43,    77,    53,    44,
+     136,   246,     0,     0,     0,     0,    31,    32,     0,    33,
+       0,     0,     0,    34,    35,    36,    37,    38,     0,     0,
+      39,    40,     0,    41,     0,     0,     0,    42,    43,    33,
+       0,    44,     0,    34,    35,    36,    37,    38,    31,    32,
+      39,    40,     0,    41,     0,     0,     0,     0,    43,     0,
+      53,    44,     0,     0,     0,     0,     0,     0,    31,    32,
+       0,    33,     0,     0,     0,    34,    35,    36,    37,    38,
+       0,     0,    39,    40,     0,    41,     0,     0,     0,    75,
+      43,    33,     0,    44,     0,    34,    35,    36,    37,    38,
+      31,    32,    39,    40,     0,    41,     0,     0,     0,     0,
+      43,     0,     0,    44,     0,    31,   122,     0,     0,     0,
+       0,    31,    32,    33,     0,     0,     0,    34,    35,    36,
+      37,    38,     0,     0,    39,     0,     0,    41,    33,    31,
+      32,     0,    43,     0,    33,    44,     0,   123,   124,   115,
+      40,     0,    41,     0,     0,   116,     0,   125,    41,     0,
+      44,     0,    33,    81,    31,   178,    44,     0,    31,    32,
+       0,     0,     0,     0,    79,     0,    41,    31,    32,     0,
+       0,    81,     0,     0,    44,     0,     0,    33,    31,    32,
+       0,    33,    31,    32,     0,     0,   179,     0,     0,     0,
+      33,    41,     0,     0,     0,    41,    81,     0,     0,    44,
+      81,    33,   185,    44,    41,    33,     0,     0,     0,    81,
+     220,    53,    44,     0,     0,    41,     0,     0,     0,    41,
+      81,     0,     0,    44,    81,     0,     0,    44,   163,   164,
+     165,   166,   167,   168,   169,   170,   171,   164,   165,   166,
+     167,   168,   169,   170,   171,   165,   166,   167,   168,   169,
+     170,   171
 };
 
 static const yytype_int16 yycheck[] =
 {
-      10,    10,    10,    13,     0,    13,     8,    13,    11,    10,
-      19,    10,    20,    15,    16,    17,    64,    65,    10,    21,
-      22,    47,    32,    33,    49,     6,     8,     9,     9,    43,
-       9,    12,    52,    81,    44,    45,    14,    32,    50,    34,
-      18,   107,    46,   109,    54,    50,    10,    42,    46,    31,
-      48,    54,    31,   156,    63,   158,    66,    66,    66,    51,
-      63,    43,    43,    45,    63,    66,    33,    66,    50,    36,
-      37,    53,    82,    83,    48,    42,    82,     3,     4,     5,
-       6,     7,     8,     9,    10,    11,    12,    51,    36,    37,
-      47,     8,     9,    49,    42,    49,    77,   107,    49,   109,
-      50,   167,   168,   169,   114,   115,   172,   173,   174,   175,
-     176,    11,   160,    49,    31,   125,    50,     6,   128,     8,
-       9,     8,     9,    40,    41,    51,    43,    49,    45,    49,
-     139,   133,   142,    50,    49,   145,    53,   147,    49,   145,
-     139,   151,    49,   151,    10,    11,    12,    49,   214,   215,
-      49,   132,   154,   155,   164,    36,    37,   167,   168,   169,
-       7,    49,   172,   173,   174,   175,   176,   148,   149,   150,
-      49,   152,   153,   183,     1,     3,     4,     5,     6,     7,
-       8,     9,    10,    11,    12,    50,    13,    14,    15,    16,
-      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
-      27,    28,    29,    30,   214,   215,    35,    36,    37,    38,
-      39,   221,   222,    42,    51,    36,    43,    44,    45,    33,
-      47,   229,     8,     9,    10,    11,    12,   237,   236,   238,
-      50,     7,     6,     8,     9,    10,     4,     5,     6,     7,
-       8,     9,    10,    11,    12,    10,    51,    51,    51,   259,
-      51,    49,    49,     8,     9,    10,    31,    46,   268,   269,
-      35,    36,    37,    38,    39,    46,    49,    42,    43,    44,
-      45,    49,    49,    36,    49,    50,    31,    52,    53,    50,
-      35,    36,    37,    38,    39,     8,     9,    42,    43,    44,
-      45,    51,    51,    50,    31,    50,     9,    52,    53,    51,
-      36,    52,    37,    34,    10,     8,     9,    51,    31,    51,
-       9,    31,    35,    36,    37,    38,    39,    51,    10,    42,
-      43,    10,    45,    31,    51,    51,    49,    50,    31,    51,
-      53,    12,    35,    36,    37,    38,    39,     8,     9,    42,
-      43,    66,    45,    12,    -1,    -1,    -1,    50,   233,    52,
-      53,    -1,    -1,    -1,    -1,    -1,    -1,     8,     9,    -1,
-      31,    -1,    -1,    -1,    35,    36,    37,    38,    39,    -1,
-      -1,    42,    43,    -1,    45,    -1,    -1,    -1,    49,    50,
-      31,    -1,    53,    -1,    35,    36,    37,    38,    39,     8,
-       9,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,    50,
-      -1,    -1,    53,    -1,     8,     9,    -1,    -1,    -1,    -1,
-       8,     9,    31,    -1,    -1,    -1,    35,    36,    37,    38,
-      39,    -1,    -1,    42,    -1,    -1,    45,    31,     8,     9,
-      -1,    50,    -1,    31,    53,     8,     9,    -1,    36,    43,
-      44,    45,    -1,    -1,    42,    49,    50,    45,    52,    53,
-      -1,    31,    50,     8,     9,    53,    -1,    -1,    31,     8,
-       9,    -1,    -1,    43,    44,    45,    -1,    40,     8,     9,
-      50,    -1,    45,    53,     8,     9,    31,    50,    -1,    -1,
-      53,    -1,    31,    -1,    -1,    40,     8,     9,    -1,    -1,
-      45,    31,    -1,    -1,    -1,    50,    45,    31,    53,    -1,
-      -1,    50,    -1,    52,    53,    45,    40,    -1,    -1,    31,
-      50,    45,    52,    53,    -1,    -1,    50,    -1,    -1,    53,
-      -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,    50,    -1,
-      -1,    53,     5,     6,     7,     8,     9,    10,    11,    12,
-       6,     7,     8,     9,    10,    11,    12
+      10,    10,    10,    13,    10,    13,    13,    10,     0,     9,
+      19,    10,    20,    63,    47,    11,    33,   105,   106,    36,
+      37,    31,    32,    10,     6,    42,    49,     9,     8,    79,
+      12,    31,    43,    43,    44,    15,    16,    17,    32,    52,
+      34,    21,    22,    53,    48,    36,    37,    49,    42,     8,
+       9,    42,    51,    62,    64,    64,    64,    53,    64,    62,
+      42,    64,     8,     9,    51,    14,    62,     8,     9,    18,
+      80,    81,    31,    80,   162,   163,   164,     8,     9,   167,
+     168,   169,   170,   171,    43,    31,    45,     6,    50,     8,
+       9,    50,    47,    75,    53,   105,   106,    43,    50,    45,
+      31,   111,   112,    49,    50,   155,    52,    53,    46,    40,
+      48,    50,   122,    49,    45,   125,    36,    37,    11,    50,
+     208,   209,    53,    10,    11,    12,   135,    49,   138,    50,
+       7,   141,   135,   143,   141,    49,    49,   147,    49,   147,
+      49,    35,    36,    37,    38,    39,    49,   129,    42,   159,
+     130,    49,   162,   163,   164,    50,     7,   167,   168,   169,
+     170,   171,   144,   145,   146,    49,   148,   149,   178,    49,
+     150,   151,     3,     4,     5,     6,     7,     8,     9,    10,
+      11,    12,     3,     4,     5,     6,     7,     8,     9,    10,
+      11,    12,     8,     9,    10,    11,    12,    49,   208,   209,
+      49,    51,    36,    33,    50,   215,   216,     6,    10,    51,
+      51,    51,     1,    51,    49,   223,    49,    46,    46,    51,
+      51,   231,   230,   232,    13,    14,    15,    16,    17,    18,
+      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
+      29,    30,    49,   253,     8,     9,    10,    50,    49,    49,
+      36,    31,   262,   263,    43,    51,    45,    50,    47,    51,
+       9,    52,    36,    34,     8,     9,    10,    31,    37,    10,
+      51,    35,    36,    37,    38,    39,    51,     9,    42,    43,
+      31,    45,    10,    51,    10,    49,    50,    31,    52,    53,
+      51,    35,    36,    37,    38,    39,     8,     9,    42,    43,
+      31,    45,    12,    51,    51,   152,    50,    12,    52,    53,
+      64,   227,    -1,    -1,    -1,    -1,     8,     9,    -1,    31,
+      -1,    -1,    -1,    35,    36,    37,    38,    39,    -1,    -1,
+      42,    43,    -1,    45,    -1,    -1,    -1,    49,    50,    31,
+      -1,    53,    -1,    35,    36,    37,    38,    39,     8,     9,
+      42,    43,    -1,    45,    -1,    -1,    -1,    -1,    50,    -1,
+      52,    53,    -1,    -1,    -1,    -1,    -1,    -1,     8,     9,
+      -1,    31,    -1,    -1,    -1,    35,    36,    37,    38,    39,
+      -1,    -1,    42,    43,    -1,    45,    -1,    -1,    -1,    49,
+      50,    31,    -1,    53,    -1,    35,    36,    37,    38,    39,
+       8,     9,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,
+      50,    -1,    -1,    53,    -1,     8,     9,    -1,    -1,    -1,
+      -1,     8,     9,    31,    -1,    -1,    -1,    35,    36,    37,
+      38,    39,    -1,    -1,    42,    -1,    -1,    45,    31,     8,
+       9,    -1,    50,    -1,    31,    53,    -1,    40,    41,    36,
+      43,    -1,    45,    -1,    -1,    42,    -1,    50,    45,    -1,
+      53,    -1,    31,    50,     8,     9,    53,    -1,     8,     9,
+      -1,    -1,    -1,    -1,    43,    -1,    45,     8,     9,    -1,
+      -1,    50,    -1,    -1,    53,    -1,    -1,    31,     8,     9,
+      -1,    31,     8,     9,    -1,    -1,    40,    -1,    -1,    -1,
+      31,    45,    -1,    -1,    -1,    45,    50,    -1,    -1,    53,
+      50,    31,    52,    53,    45,    31,    -1,    -1,    -1,    50,
+      40,    52,    53,    -1,    -1,    45,    -1,    -1,    -1,    45,
+      50,    -1,    -1,    53,    50,    -1,    -1,    53,     4,     5,
+       6,     7,     8,     9,    10,    11,    12,     5,     6,     7,
+       8,     9,    10,    11,    12,     6,     7,     8,     9,    10,
+      11,    12
 };
 
 /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
@@ -848,32 +847,31 @@ static const yytype_uint8 yystos[] =
 {
        0,    55,     0,    56,     1,    13,    14,    15,    16,    17,
       18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
-      28,    29,    30,    43,    44,    45,    47,    57,    60,    47,
-      49,    61,     8,     9,    31,    35,    36,    37,    38,    39,
-      42,    43,    45,    49,    50,    53,    65,    79,    83,    87,
-      88,    89,    90,    93,    52,    64,    79,    81,    84,    62,
-      81,    63,    79,    10,    43,    44,    49,    69,    80,    82,
-      83,    84,    88,    89,    93,    67,    90,    49,    61,    65,
-      70,    43,    49,    50,    66,    82,    84,    93,    68,    87,
-      71,    81,    72,    81,    73,    81,    74,    87,    75,    83,
-      76,    84,    77,    81,    78,    81,    46,    48,    46,    48,
-      47,    93,    93,     6,     8,     9,    91,    79,    36,    42,
-      93,    94,    93,    50,    50,     9,    40,    41,    50,    90,
-      93,    49,    49,    49,    83,    88,    90,    91,    91,    10,
-      80,    50,    11,    91,    82,    49,    50,    49,    49,    49,
-      49,    49,    49,    49,    49,    49,    59,    94,    58,    94,
-       7,    93,    93,    50,    10,    51,    51,     3,     4,     5,
-       6,     7,     8,     9,    10,    11,    12,    51,    36,    36,
-      37,    42,    40,     9,    40,    79,    81,    33,    93,    82,
-      52,    85,    93,    79,    79,    79,    84,    93,    79,    79,
-      81,    81,    57,    57,    91,    32,    34,    42,    92,    93,
-      50,    94,    94,    94,     6,     7,    94,    94,    94,    94,
-      94,    10,    10,    51,    51,    51,    40,    51,    51,    49,
-       9,    31,    86,    49,    46,    46,    49,    49,    49,    50,
-      51,    51,    36,    94,    94,    93,    93,    50,    51,    84,
-      31,     9,    85,    36,    37,    84,    93,    83,    34,    10,
-      51,    51,    36,    37,     9,    31,    51,    93,    10,    10,
-      31,    51,    93,    93,    51,    51
+      28,    29,    30,    43,    45,    47,    57,    59,    47,    49,
+      60,     8,     9,    31,    35,    36,    37,    38,    39,    42,
+      43,    45,    49,    50,    53,    64,    78,    82,    86,    87,
+      88,    89,    92,    52,    63,    78,    80,    83,    61,    80,
+      62,    78,    10,    43,    49,    68,    79,    81,    82,    83,
+      87,    88,    92,    66,    89,    49,    60,    64,    69,    43,
+      49,    50,    65,    81,    83,    92,    67,    86,    70,    80,
+      71,    80,    72,    80,    73,    86,    74,    82,    75,    83,
+      76,    80,    77,    80,    46,    48,    48,    47,    92,    92,
+       6,     8,     9,    90,    78,    36,    42,    92,    93,    92,
+      50,    50,     9,    40,    41,    50,    89,    92,    49,    49,
+      49,    82,    87,    89,    90,    10,    79,    50,    11,    90,
+      81,    49,    50,    49,    49,    49,    49,    49,    49,    49,
+      49,    49,    58,    93,    93,     7,    92,    92,    50,    10,
+      51,    51,     3,     4,     5,     6,     7,     8,     9,    10,
+      11,    12,    51,    36,    36,    37,    42,    40,     9,    40,
+      78,    80,    33,    92,    81,    52,    84,    92,    78,    78,
+      78,    83,    92,    78,    78,    80,    80,    57,    90,    32,
+      34,    42,    91,    92,    50,    93,    93,    93,     6,     7,
+      93,    93,    93,    93,    93,    10,    10,    51,    51,    51,
+      40,    51,    51,    49,     9,    31,    85,    49,    46,    46,
+      49,    49,    49,    50,    51,    51,    36,    93,    93,    92,
+      92,    50,    51,    83,    31,     9,    84,    36,    37,    83,
+      92,    82,    34,    10,    51,    51,    36,    37,     9,    31,
+      51,    92,    10,    10,    31,    51,    92,    92,    51,    51
 };
 
 #define yyerrok		(yyerrstatus = 0)
@@ -1697,30 +1695,24 @@ yyreduce:
   case 5:
 #line 78 "a.y"
     {
-		if((yyvsp[(1) - (2)].sym)->value != pc)
-			yyerror("redeclaration of %s", (yyvsp[(1) - (2)].sym)->name);
-		(yyvsp[(1) - (2)].sym)->value = pc;
-	}
-    break;
-
-  case 7:
-#line 85 "a.y"
-    {
+		(yyvsp[(1) - (2)].sym) = labellookup((yyvsp[(1) - (2)].sym));
+		if((yyvsp[(1) - (2)].sym)->type == LLAB && (yyvsp[(1) - (2)].sym)->value != pc)
+			yyerror("redeclaration of %s", (yyvsp[(1) - (2)].sym)->labelname);
 		(yyvsp[(1) - (2)].sym)->type = LLAB;
 		(yyvsp[(1) - (2)].sym)->value = pc;
 	}
     break;
 
-  case 12:
-#line 96 "a.y"
+  case 10:
+#line 92 "a.y"
     {
 		(yyvsp[(1) - (3)].sym)->type = LVAR;
 		(yyvsp[(1) - (3)].sym)->value = (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 13:
-#line 101 "a.y"
+  case 11:
+#line 97 "a.y"
     {
 		if((yyvsp[(1) - (3)].sym)->value != (yyvsp[(3) - (3)].lval))
 			yyerror("redeclaration of %s", (yyvsp[(1) - (3)].sym)->name);
@@ -1728,186 +1720,186 @@ yyreduce:
 	}
     break;
 
+  case 12:
+#line 102 "a.y"
+    { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
+    break;
+
+  case 13:
+#line 103 "a.y"
+    { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
+    break;
+
   case 14:
-#line 106 "a.y"
+#line 104 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 15:
-#line 107 "a.y"
+#line 105 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 16:
-#line 108 "a.y"
+#line 106 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 17:
-#line 109 "a.y"
+#line 107 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 18:
-#line 110 "a.y"
+#line 108 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 19:
-#line 111 "a.y"
+#line 109 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 20:
-#line 112 "a.y"
+#line 110 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 21:
-#line 113 "a.y"
+#line 111 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 22:
-#line 114 "a.y"
+#line 112 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 23:
-#line 115 "a.y"
+#line 113 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 24:
-#line 116 "a.y"
+#line 114 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 25:
-#line 117 "a.y"
+#line 115 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 26:
-#line 118 "a.y"
+#line 116 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 27:
-#line 119 "a.y"
+#line 117 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 28:
-#line 120 "a.y"
+#line 118 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 29:
-#line 121 "a.y"
+#line 119 "a.y"
     { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
     break;
 
   case 30:
 #line 122 "a.y"
-    { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
-    break;
-
-  case 31:
-#line 123 "a.y"
-    { outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr2)); }
-    break;
-
-  case 32:
-#line 126 "a.y"
     {
 		(yyval.addr2).from = nullgen;
 		(yyval.addr2).to = nullgen;
 	}
     break;
 
-  case 33:
-#line 131 "a.y"
+  case 31:
+#line 127 "a.y"
     {
 		(yyval.addr2).from = nullgen;
 		(yyval.addr2).to = nullgen;
 	}
     break;
 
-  case 34:
-#line 138 "a.y"
+  case 32:
+#line 134 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (3)].addr);
 		(yyval.addr2).to = (yyvsp[(3) - (3)].addr);
 	}
     break;
 
-  case 35:
-#line 145 "a.y"
+  case 33:
+#line 141 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (3)].addr);
 		(yyval.addr2).to = (yyvsp[(3) - (3)].addr);
 	}
     break;
 
-  case 36:
-#line 152 "a.y"
+  case 34:
+#line 148 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (2)].addr);
 		(yyval.addr2).to = nullgen;
 	}
     break;
 
-  case 37:
-#line 157 "a.y"
+  case 35:
+#line 153 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (1)].addr);
 		(yyval.addr2).to = nullgen;
 	}
     break;
 
-  case 38:
-#line 164 "a.y"
+  case 36:
+#line 160 "a.y"
     {
 		(yyval.addr2).from = nullgen;
 		(yyval.addr2).to = (yyvsp[(2) - (2)].addr);
 	}
     break;
 
-  case 39:
-#line 169 "a.y"
+  case 37:
+#line 165 "a.y"
     {
 		(yyval.addr2).from = nullgen;
 		(yyval.addr2).to = (yyvsp[(1) - (1)].addr);
 	}
     break;
 
-  case 40:
-#line 176 "a.y"
+  case 38:
+#line 172 "a.y"
     {
 		(yyval.addr2).from = nullgen;
 		(yyval.addr2).to = (yyvsp[(2) - (2)].addr);
 	}
     break;
 
-  case 41:
-#line 181 "a.y"
+  case 39:
+#line 177 "a.y"
     {
 		(yyval.addr2).from = nullgen;
 		(yyval.addr2).to = (yyvsp[(1) - (1)].addr);
 	}
     break;
 
-  case 42:
-#line 186 "a.y"
+  case 40:
+#line 182 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (3)].addr);
 		(yyval.addr2).to = (yyvsp[(3) - (3)].addr);
 	}
     break;
 
-  case 43:
-#line 193 "a.y"
+  case 41:
+#line 189 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (5)].addr);
 		(yyval.addr2).from.scale = (yyvsp[(3) - (5)].lval);
@@ -1915,41 +1907,43 @@ yyreduce:
 	}
     break;
 
-  case 44:
-#line 201 "a.y"
+  case 42:
+#line 197 "a.y"
     {
+		settext((yyvsp[(1) - (3)].addr).sym);
 		(yyval.addr2).from = (yyvsp[(1) - (3)].addr);
 		(yyval.addr2).to = (yyvsp[(3) - (3)].addr);
 	}
     break;
 
-  case 45:
-#line 206 "a.y"
+  case 43:
+#line 203 "a.y"
     {
+		settext((yyvsp[(1) - (5)].addr).sym);
 		(yyval.addr2).from = (yyvsp[(1) - (5)].addr);
 		(yyval.addr2).from.scale = (yyvsp[(3) - (5)].lval);
 		(yyval.addr2).to = (yyvsp[(5) - (5)].addr);
 	}
     break;
 
-  case 46:
-#line 214 "a.y"
+  case 44:
+#line 212 "a.y"
     {
 		(yyval.addr2).from = nullgen;
 		(yyval.addr2).to = (yyvsp[(2) - (2)].addr);
 	}
     break;
 
-  case 47:
-#line 219 "a.y"
+  case 45:
+#line 217 "a.y"
     {
 		(yyval.addr2).from = nullgen;
 		(yyval.addr2).to = (yyvsp[(1) - (1)].addr);
 	}
     break;
 
-  case 48:
-#line 224 "a.y"
+  case 46:
+#line 222 "a.y"
     {
 		(yyval.addr2).from = nullgen;
 		(yyval.addr2).to = (yyvsp[(2) - (2)].addr);
@@ -1958,16 +1952,16 @@ yyreduce:
 	}
     break;
 
-  case 51:
-#line 237 "a.y"
+  case 49:
+#line 235 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (3)].addr);
 		(yyval.addr2).to = (yyvsp[(3) - (3)].addr);
 	}
     break;
 
-  case 52:
-#line 242 "a.y"
+  case 50:
+#line 240 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (5)].addr);
 		(yyval.addr2).to = (yyvsp[(3) - (5)].addr);
@@ -1977,16 +1971,16 @@ yyreduce:
 	}
     break;
 
-  case 53:
-#line 252 "a.y"
+  case 51:
+#line 250 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (3)].addr);
 		(yyval.addr2).to = (yyvsp[(3) - (3)].addr);
 	}
     break;
 
-  case 54:
-#line 257 "a.y"
+  case 52:
+#line 255 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (5)].addr);
 		(yyval.addr2).to = (yyvsp[(3) - (5)].addr);
@@ -1996,40 +1990,40 @@ yyreduce:
 	}
     break;
 
-  case 55:
-#line 267 "a.y"
+  case 53:
+#line 265 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (2)].addr);
 		(yyval.addr2).to = nullgen;
 	}
     break;
 
-  case 56:
-#line 272 "a.y"
+  case 54:
+#line 270 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (1)].addr);
 		(yyval.addr2).to = nullgen;
 	}
     break;
 
-  case 57:
-#line 277 "a.y"
+  case 55:
+#line 275 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (3)].addr);
 		(yyval.addr2).to = (yyvsp[(3) - (3)].addr);
 	}
     break;
 
-  case 58:
-#line 284 "a.y"
+  case 56:
+#line 282 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (3)].addr);
 		(yyval.addr2).to = (yyvsp[(3) - (3)].addr);
 	}
     break;
 
-  case 59:
-#line 289 "a.y"
+  case 57:
+#line 287 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (5)].addr);
 		(yyval.addr2).from.scale = (yyvsp[(3) - (5)].lval);
@@ -2037,8 +2031,8 @@ yyreduce:
 	}
     break;
 
-  case 60:
-#line 297 "a.y"
+  case 58:
+#line 295 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(1) - (5)].addr);
 		(yyval.addr2).to = (yyvsp[(3) - (5)].addr);
@@ -2046,8 +2040,8 @@ yyreduce:
 	}
     break;
 
-  case 61:
-#line 305 "a.y"
+  case 59:
+#line 303 "a.y"
     {
 		(yyval.addr2).from = (yyvsp[(3) - (5)].addr);
 		(yyval.addr2).to = (yyvsp[(5) - (5)].addr);
@@ -2057,8 +2051,8 @@ yyreduce:
 	}
     break;
 
-  case 62:
-#line 315 "a.y"
+  case 60:
+#line 313 "a.y"
     {
 		if((yyvsp[(1) - (3)].addr).type != D_CONST || (yyvsp[(3) - (3)].addr).type != D_CONST)
 			yyerror("arguments to PCDATA must be integer constants");
@@ -2067,8 +2061,8 @@ yyreduce:
 	}
     break;
 
-  case 63:
-#line 324 "a.y"
+  case 61:
+#line 322 "a.y"
     {
 		if((yyvsp[(1) - (3)].addr).type != D_CONST)
 			yyerror("index for FUNCDATA must be integer constant");
@@ -2079,22 +2073,22 @@ yyreduce:
  	}
     break;
 
-  case 68:
-#line 341 "a.y"
+  case 66:
+#line 339 "a.y"
     {
 		(yyval.addr) = (yyvsp[(2) - (2)].addr);
 	}
     break;
 
-  case 69:
-#line 345 "a.y"
+  case 67:
+#line 343 "a.y"
     {
 		(yyval.addr) = (yyvsp[(2) - (2)].addr);
 	}
     break;
 
-  case 75:
-#line 358 "a.y"
+  case 73:
+#line 356 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_BRANCH;
@@ -2102,76 +2096,68 @@ yyreduce:
 	}
     break;
 
-  case 76:
-#line 364 "a.y"
-    {
-		(yyval.addr) = nullgen;
-		if(pass == 2)
-			yyerror("undefined label: %s", (yyvsp[(1) - (2)].sym)->name);
-		(yyval.addr).type = D_BRANCH;
-		(yyval.addr).offset = (yyvsp[(2) - (2)].lval);
-	}
-    break;
-
-  case 77:
-#line 372 "a.y"
+  case 74:
+#line 362 "a.y"
     {
+		(yyvsp[(1) - (2)].sym) = labellookup((yyvsp[(1) - (2)].sym));
 		(yyval.addr) = nullgen;
+		if(pass == 2 && (yyvsp[(1) - (2)].sym)->type != LLAB)
+			yyerror("undefined label: %s", (yyvsp[(1) - (2)].sym)->labelname);
 		(yyval.addr).type = D_BRANCH;
 		(yyval.addr).offset = (yyvsp[(1) - (2)].sym)->value + (yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 78:
-#line 380 "a.y"
+  case 75:
+#line 373 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = (yyvsp[(1) - (1)].lval);
 	}
     break;
 
-  case 79:
-#line 385 "a.y"
+  case 76:
+#line 378 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = (yyvsp[(1) - (1)].lval);
 	}
     break;
 
-  case 80:
-#line 390 "a.y"
+  case 77:
+#line 383 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = (yyvsp[(1) - (1)].lval);
 	}
     break;
 
-  case 81:
-#line 395 "a.y"
+  case 78:
+#line 388 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = (yyvsp[(1) - (1)].lval);
 	}
     break;
 
-  case 82:
-#line 400 "a.y"
+  case 79:
+#line 393 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_SP;
 	}
     break;
 
-  case 83:
-#line 405 "a.y"
+  case 80:
+#line 398 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = (yyvsp[(1) - (1)].lval);
 	}
     break;
 
-  case 84:
-#line 412 "a.y"
+  case 81:
+#line 405 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_CONST;
@@ -2179,8 +2165,8 @@ yyreduce:
 	}
     break;
 
-  case 85:
-#line 418 "a.y"
+  case 82:
+#line 411 "a.y"
     {
 		(yyval.addr) = (yyvsp[(2) - (2)].addr);
 		(yyval.addr).index = (yyvsp[(2) - (2)].addr).type;
@@ -2193,8 +2179,8 @@ yyreduce:
 	}
     break;
 
-  case 86:
-#line 429 "a.y"
+  case 83:
+#line 422 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_SCONST;
@@ -2202,8 +2188,8 @@ yyreduce:
 	}
     break;
 
-  case 87:
-#line 435 "a.y"
+  case 84:
+#line 428 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_FCONST;
@@ -2211,8 +2197,8 @@ yyreduce:
 	}
     break;
 
-  case 88:
-#line 441 "a.y"
+  case 85:
+#line 434 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_FCONST;
@@ -2220,8 +2206,8 @@ yyreduce:
 	}
     break;
 
-  case 89:
-#line 447 "a.y"
+  case 86:
+#line 440 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_FCONST;
@@ -2229,8 +2215,8 @@ yyreduce:
 	}
     break;
 
-  case 90:
-#line 453 "a.y"
+  case 87:
+#line 446 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_FCONST;
@@ -2238,8 +2224,8 @@ yyreduce:
 	}
     break;
 
-  case 91:
-#line 461 "a.y"
+  case 88:
+#line 454 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_CONST2;
@@ -2248,40 +2234,40 @@ yyreduce:
 	}
     break;
 
-  case 92:
-#line 470 "a.y"
+  case 89:
+#line 463 "a.y"
     {
 		(yyval.con2).v1 = (yyvsp[(1) - (1)].lval);
 		(yyval.con2).v2 = ArgsSizeUnknown;
 	}
     break;
 
-  case 93:
-#line 475 "a.y"
+  case 90:
+#line 468 "a.y"
     {
 		(yyval.con2).v1 = -(yyvsp[(2) - (2)].lval);
 		(yyval.con2).v2 = ArgsSizeUnknown;
 	}
     break;
 
-  case 94:
-#line 480 "a.y"
+  case 91:
+#line 473 "a.y"
     {
 		(yyval.con2).v1 = (yyvsp[(1) - (3)].lval);
 		(yyval.con2).v2 = (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 95:
-#line 485 "a.y"
+  case 92:
+#line 478 "a.y"
     {
 		(yyval.con2).v1 = -(yyvsp[(2) - (4)].lval);
 		(yyval.con2).v2 = (yyvsp[(4) - (4)].lval);
 	}
     break;
 
-  case 98:
-#line 496 "a.y"
+  case 95:
+#line 489 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_INDIR+D_NONE;
@@ -2289,8 +2275,8 @@ yyreduce:
 	}
     break;
 
-  case 99:
-#line 502 "a.y"
+  case 96:
+#line 495 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_INDIR+(yyvsp[(3) - (4)].lval);
@@ -2298,8 +2284,8 @@ yyreduce:
 	}
     break;
 
-  case 100:
-#line 508 "a.y"
+  case 97:
+#line 501 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_INDIR+D_SP;
@@ -2307,8 +2293,8 @@ yyreduce:
 	}
     break;
 
-  case 101:
-#line 514 "a.y"
+  case 98:
+#line 507 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_INDIR+D_NONE;
@@ -2319,8 +2305,8 @@ yyreduce:
 	}
     break;
 
-  case 102:
-#line 523 "a.y"
+  case 99:
+#line 516 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_INDIR+(yyvsp[(3) - (9)].lval);
@@ -2331,8 +2317,8 @@ yyreduce:
 	}
     break;
 
-  case 103:
-#line 532 "a.y"
+  case 100:
+#line 525 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_INDIR+(yyvsp[(3) - (9)].lval);
@@ -2343,24 +2329,24 @@ yyreduce:
 	}
     break;
 
-  case 104:
-#line 541 "a.y"
+  case 101:
+#line 534 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_INDIR+(yyvsp[(2) - (3)].lval);
 	}
     break;
 
-  case 105:
-#line 546 "a.y"
+  case 102:
+#line 539 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_INDIR+D_SP;
 	}
     break;
 
-  case 106:
-#line 551 "a.y"
+  case 103:
+#line 544 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_INDIR+(yyvsp[(3) - (4)].lval);
@@ -2368,8 +2354,8 @@ yyreduce:
 	}
     break;
 
-  case 107:
-#line 557 "a.y"
+  case 104:
+#line 550 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_INDIR+D_NONE;
@@ -2379,8 +2365,8 @@ yyreduce:
 	}
     break;
 
-  case 108:
-#line 565 "a.y"
+  case 105:
+#line 558 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_INDIR+(yyvsp[(2) - (8)].lval);
@@ -2390,15 +2376,15 @@ yyreduce:
 	}
     break;
 
-  case 109:
-#line 575 "a.y"
+  case 106:
+#line 568 "a.y"
     {
 		(yyval.addr) = (yyvsp[(1) - (1)].addr);
 	}
     break;
 
-  case 110:
-#line 579 "a.y"
+  case 107:
+#line 572 "a.y"
     {
 		(yyval.addr) = (yyvsp[(1) - (6)].addr);
 		(yyval.addr).index = (yyvsp[(3) - (6)].lval);
@@ -2407,8 +2393,8 @@ yyreduce:
 	}
     break;
 
-  case 111:
-#line 588 "a.y"
+  case 108:
+#line 581 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = (yyvsp[(4) - (5)].lval);
@@ -2417,8 +2403,8 @@ yyreduce:
 	}
     break;
 
-  case 112:
-#line 595 "a.y"
+  case 109:
+#line 588 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_STATIC;
@@ -2427,134 +2413,134 @@ yyreduce:
 	}
     break;
 
-  case 113:
-#line 603 "a.y"
+  case 110:
+#line 596 "a.y"
     {
 		(yyval.lval) = 0;
 	}
     break;
 
-  case 114:
-#line 607 "a.y"
+  case 111:
+#line 600 "a.y"
     {
 		(yyval.lval) = (yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 115:
-#line 611 "a.y"
+  case 112:
+#line 604 "a.y"
     {
 		(yyval.lval) = -(yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 117:
-#line 618 "a.y"
+  case 114:
+#line 611 "a.y"
     {
 		(yyval.lval) = D_AUTO;
 	}
     break;
 
-  case 120:
-#line 626 "a.y"
+  case 117:
+#line 619 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (1)].sym)->value;
 	}
     break;
 
-  case 121:
-#line 630 "a.y"
+  case 118:
+#line 623 "a.y"
     {
 		(yyval.lval) = -(yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 122:
-#line 634 "a.y"
+  case 119:
+#line 627 "a.y"
     {
 		(yyval.lval) = (yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 123:
-#line 638 "a.y"
+  case 120:
+#line 631 "a.y"
     {
 		(yyval.lval) = ~(yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 124:
-#line 642 "a.y"
+  case 121:
+#line 635 "a.y"
     {
 		(yyval.lval) = (yyvsp[(2) - (3)].lval);
 	}
     break;
 
-  case 126:
-#line 649 "a.y"
+  case 123:
+#line 642 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) + (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 127:
-#line 653 "a.y"
+  case 124:
+#line 646 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) - (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 128:
-#line 657 "a.y"
+  case 125:
+#line 650 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) * (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 129:
-#line 661 "a.y"
+  case 126:
+#line 654 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) / (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 130:
-#line 665 "a.y"
+  case 127:
+#line 658 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) % (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 131:
-#line 669 "a.y"
+  case 128:
+#line 662 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (4)].lval) << (yyvsp[(4) - (4)].lval);
 	}
     break;
 
-  case 132:
-#line 673 "a.y"
+  case 129:
+#line 666 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (4)].lval) >> (yyvsp[(4) - (4)].lval);
 	}
     break;
 
-  case 133:
-#line 677 "a.y"
+  case 130:
+#line 670 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) & (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 134:
-#line 681 "a.y"
+  case 131:
+#line 674 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) ^ (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 135:
-#line 685 "a.y"
+  case 132:
+#line 678 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) | (yyvsp[(3) - (3)].lval);
 	}
@@ -2562,7 +2548,7 @@ yyreduce:
 
 
 /* Line 1267 of yacc.c.  */
-#line 2566 "y.tab.c"
+#line 2552 "y.tab.c"
       default: break;
     }
   YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);
diff --git a/src/cmd/9a/a.h b/src/cmd/9a/a.h
index 629543f13f..7a01fc9479 100644
--- a/src/cmd/9a/a.h
+++ b/src/cmd/9a/a.h
@@ -68,6 +68,7 @@ struct	Sym
 	vlong	value;
 	ushort	type;
 	char	*name;
+	char*	labelname;
 	char	sym;
 };
 #define	S	((Sym*)0)
@@ -135,6 +136,8 @@ void	newio(void);
 void	newfile(char*, int);
 Sym*	slookup(char*);
 Sym*	lookup(void);
+Sym*	labellookup(Sym*);
+void	settext(LSym*);
 void	syminit(Sym*);
 int32	yylex(void);
 int	getc(void);
diff --git a/src/cmd/9a/a.y b/src/cmd/9a/a.y
index 41776fd3c3..b366146156 100644
--- a/src/cmd/9a/a.y
+++ b/src/cmd/9a/a.y
@@ -67,15 +67,11 @@ prog:
 |	prog line
 
 line:
-	LLAB ':'
-	{
-		if($1->value != pc)
-			yyerror("redeclaration of %s", $1->name);
-		$1->value = pc;
-	}
-	line
-|	LNAME ':'
+	LNAME ':'
 	{
+		$1 = labellookup($1);
+		if($1->type == LLAB && $1->value != pc)
+			yyerror("redeclaration of %s", $1->labelname);
 		$1->type = LLAB;
 		$1->value = pc;
 	}
@@ -623,16 +619,19 @@ inst:
  */
 |	LTEXT name ',' imm
 	{
+		settext($2.sym);
 		outcode($1, &$2, NREG, &$4);
 	}
 |	LTEXT name ',' con ',' imm
 	{
+		settext($2.sym);
 		$6.offset &= 0xffffffffull;
 		$6.offset |= (vlong)ArgsSizeUnknown << 32;
 		outcode($1, &$2, $4, &$6);
 	}
 |	LTEXT name ',' con ',' imm '-' con
 	{
+		settext($2.sym);
 		$6.offset &= 0xffffffffull;
 		$6.offset |= ($8 & 0xffffffffull) << 32;
 		outcode($1, &$2, $4, &$6);
@@ -669,15 +668,10 @@ rel:
 	}
 |	LNAME offset
 	{
+		$1 = labellookup($1);
 		$$ = nullgen;
-		if(pass == 2)
-			yyerror("undefined label: %s", $1->name);
-		$$.type = D_BRANCH;
-		$$.offset = $2;
-	}
-|	LLAB offset
-	{
-		$$ = nullgen;
+		if(pass == 2 && $1->type != LLAB)
+			yyerror("undefined label: %s", $1->labelname);
 		$$.type = D_BRANCH;
 		$$.offset = $1->value + $2;
 	}
diff --git a/src/cmd/9a/y.tab.c b/src/cmd/9a/y.tab.c
index e81db9924c..6025a2402c 100644
--- a/src/cmd/9a/y.tab.c
+++ b/src/cmd/9a/y.tab.c
@@ -1,21 +1,24 @@
-/* A Bison parser, made by GNU Bison 2.5.  */
+/* A Bison parser, made by GNU Bison 2.3.  */
 
-/* Bison implementation for Yacc-like parsers in C
-   
-      Copyright (C) 1984, 1989-1990, 2000-2011 Free Software Foundation, Inc.
-   
-   This program is free software: you can redistribute it and/or modify
+/* Skeleton implementation for Bison's Yacc-like parsers in C
+
+   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
+   Free Software Foundation, Inc.
+
+   This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
-   the Free Software Foundation, either version 3 of the License, or
-   (at your option) any later version.
-   
+   the Free Software Foundation; either version 2, or (at your option)
+   any later version.
+
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
-   
+
    You should have received a copy of the GNU General Public License
-   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 51 Franklin Street, Fifth Floor,
+   Boston, MA 02110-1301, USA.  */
 
 /* As a special exception, you may create a larger work that contains
    part or all of the Bison parser skeleton and distribute that work
@@ -26,7 +29,7 @@
    special exception, which will cause the skeleton and the resulting
    Bison output files to be licensed under the GNU General Public
    License without this special exception.
-   
+
    This special exception was added by the Free Software Foundation in
    version 2.2 of Bison.  */
 
@@ -44,7 +47,7 @@
 #define YYBISON 1
 
 /* Bison version.  */
-#define YYBISON_VERSION "2.5"
+#define YYBISON_VERSION "2.3"
 
 /* Skeleton name.  */
 #define YYSKELETON_NAME "yacc.c"
@@ -52,51 +55,11 @@
 /* Pure parsers.  */
 #define YYPURE 0
 
-/* Push parsers.  */
-#define YYPUSH 0
-
-/* Pull parsers.  */
-#define YYPULL 1
-
 /* Using locations.  */
 #define YYLSP_NEEDED 0
 
 
 
-/* Copy the first part of user declarations.  */
-
-/* Line 268 of yacc.c  */
-#line 30 "a.y"
-
-#include <u.h>
-#include <stdio.h>	/* if we don't, bison will, and a.h re-#defines getc */
-#include <libc.h>
-#include "a.h"
-#include "../../runtime/funcdata.h"
-
-
-/* Line 268 of yacc.c  */
-#line 80 "y.tab.c"
-
-/* Enabling traces.  */
-#ifndef YYDEBUG
-# define YYDEBUG 0
-#endif
-
-/* Enabling verbose error messages.  */
-#ifdef YYERROR_VERBOSE
-# undef YYERROR_VERBOSE
-# define YYERROR_VERBOSE 1
-#else
-# define YYERROR_VERBOSE 0
-#endif
-
-/* Enabling the token table.  */
-#ifndef YYTOKEN_TABLE
-# define YYTOKEN_TABLE 0
-#endif
-
-
 /* Tokens.  */
 #ifndef YYTOKENTYPE
 # define YYTOKENTYPE
@@ -230,35 +193,59 @@
 
 
 
+/* Copy the first part of user declarations.  */
+#line 30 "a.y"
+
+#include <u.h>
+#include <stdio.h>	/* if we don't, bison will, and a.h re-#defines getc */
+#include <libc.h>
+#include "a.h"
+#include "../../runtime/funcdata.h"
+
+
+/* Enabling traces.  */
+#ifndef YYDEBUG
+# define YYDEBUG 0
+#endif
+
+/* Enabling verbose error messages.  */
+#ifdef YYERROR_VERBOSE
+# undef YYERROR_VERBOSE
+# define YYERROR_VERBOSE 1
+#else
+# define YYERROR_VERBOSE 0
+#endif
+
+/* Enabling the token table.  */
+#ifndef YYTOKEN_TABLE
+# define YYTOKEN_TABLE 0
+#endif
+
 #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
 typedef union YYSTYPE
-{
-
-/* Line 293 of yacc.c  */
 #line 38 "a.y"
-
+{
 	Sym	*sym;
 	vlong	lval;
 	double	dval;
 	char	sval[8];
 	Addr	addr;
-
-
-
-/* Line 293 of yacc.c  */
-#line 250 "y.tab.c"
-} YYSTYPE;
-# define YYSTYPE_IS_TRIVIAL 1
+}
+/* Line 193 of yacc.c.  */
+#line 236 "y.tab.c"
+	YYSTYPE;
 # define yystype YYSTYPE /* obsolescent; will be withdrawn */
 # define YYSTYPE_IS_DECLARED 1
+# define YYSTYPE_IS_TRIVIAL 1
 #endif
 
 
+
 /* Copy the second part of user declarations.  */
 
 
-/* Line 343 of yacc.c  */
-#line 262 "y.tab.c"
+/* Line 216 of yacc.c.  */
+#line 249 "y.tab.c"
 
 #ifdef short
 # undef short
@@ -333,14 +320,14 @@ typedef short int yytype_int16;
 #if (defined __STDC__ || defined __C99__FUNC__ \
      || defined __cplusplus || defined _MSC_VER)
 static int
-YYID (int yyi)
+YYID (int i)
 #else
 static int
-YYID (yyi)
-    int yyi;
+YYID (i)
+    int i;
 #endif
 {
-  return yyi;
+  return i;
 }
 #endif
 
@@ -361,11 +348,11 @@ YYID (yyi)
 #    define alloca _alloca
 #   else
 #    define YYSTACK_ALLOC alloca
-#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
+#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
      || defined __cplusplus || defined _MSC_VER)
 #     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
-#     ifndef EXIT_SUCCESS
-#      define EXIT_SUCCESS 0
+#     ifndef _STDLIB_H
+#      define _STDLIB_H 1
 #     endif
 #    endif
 #   endif
@@ -388,24 +375,24 @@ YYID (yyi)
 #  ifndef YYSTACK_ALLOC_MAXIMUM
 #   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
 #  endif
-#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
+#  if (defined __cplusplus && ! defined _STDLIB_H \
        && ! ((defined YYMALLOC || defined malloc) \
 	     && (defined YYFREE || defined free)))
 #   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
-#   ifndef EXIT_SUCCESS
-#    define EXIT_SUCCESS 0
+#   ifndef _STDLIB_H
+#    define _STDLIB_H 1
 #   endif
 #  endif
 #  ifndef YYMALLOC
 #   define YYMALLOC malloc
-#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
+#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
      || defined __cplusplus || defined _MSC_VER)
 void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
 #   endif
 #  endif
 #  ifndef YYFREE
 #   define YYFREE free
-#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
+#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
      || defined __cplusplus || defined _MSC_VER)
 void free (void *); /* INFRINGES ON USER NAME SPACE */
 #   endif
@@ -421,9 +408,9 @@ void free (void *); /* INFRINGES ON USER NAME SPACE */
 /* A type that is properly aligned for any stack member.  */
 union yyalloc
 {
-  yytype_int16 yyss_alloc;
-  YYSTYPE yyvs_alloc;
-};
+  yytype_int16 yyss;
+  YYSTYPE yyvs;
+  };
 
 /* The size of the maximum gap between one aligned stack and the next.  */
 # define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)
@@ -434,27 +421,6 @@ union yyalloc
      ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
       + YYSTACK_GAP_MAXIMUM)
 
-# define YYCOPY_NEEDED 1
-
-/* Relocate STACK from its old location to the new one.  The
-   local variables YYSIZE and YYSTACKSIZE give the old and new number of
-   elements in the stack, and YYPTR gives the new location of the
-   stack.  Advance YYPTR to a properly aligned location for the next
-   stack.  */
-# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
-    do									\
-      {									\
-	YYSIZE_T yynewbytes;						\
-	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
-	Stack = &yyptr->Stack_alloc;					\
-	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
-	yyptr += yynewbytes / sizeof (*yyptr);				\
-      }									\
-    while (YYID (0))
-
-#endif
-
-#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
 /* Copy COUNT objects from FROM to TO.  The source and destination do
    not overlap.  */
 # ifndef YYCOPY
@@ -472,21 +438,38 @@ union yyalloc
       while (YYID (0))
 #  endif
 # endif
-#endif /* !YYCOPY_NEEDED */
+
+/* Relocate STACK from its old location to the new one.  The
+   local variables YYSIZE and YYSTACKSIZE give the old and new number of
+   elements in the stack, and YYPTR gives the new location of the
+   stack.  Advance YYPTR to a properly aligned location for the next
+   stack.  */
+# define YYSTACK_RELOCATE(Stack)					\
+    do									\
+      {									\
+	YYSIZE_T yynewbytes;						\
+	YYCOPY (&yyptr->Stack, Stack, yysize);				\
+	Stack = &yyptr->Stack;						\
+	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
+	yyptr += yynewbytes / sizeof (*yyptr);				\
+      }									\
+    while (YYID (0))
+
+#endif
 
 /* YYFINAL -- State number of the termination state.  */
 #define YYFINAL  2
 /* YYLAST -- Last index in YYTABLE.  */
-#define YYLAST   836
+#define YYLAST   862
 
 /* YYNTOKENS -- Number of terminals.  */
 #define YYNTOKENS  81
 /* YYNNTS -- Number of nonterminals.  */
-#define YYNNTS  32
+#define YYNNTS  31
 /* YYNRULES -- Number of rules.  */
-#define YYNRULES  186
+#define YYNRULES  183
 /* YYNRULES -- Number of states.  */
-#define YYNSTATES  459
+#define YYNSTATES  453
 
 /* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
 #define YYUNDEFTOK  2
@@ -537,140 +520,139 @@ static const yytype_uint8 yytranslate[] =
    YYRHS.  */
 static const yytype_uint16 yyprhs[] =
 {
-       0,     0,     3,     4,     7,     8,    13,    14,    19,    24,
-      29,    32,    34,    37,    40,    45,    50,    55,    60,    65,
-      70,    75,    80,    85,    90,    95,   100,   105,   110,   115,
-     120,   125,   130,   135,   140,   147,   152,   157,   162,   169,
-     174,   179,   186,   193,   200,   205,   210,   217,   222,   229,
-     234,   241,   246,   251,   254,   261,   266,   271,   276,   283,
-     288,   293,   298,   303,   308,   313,   318,   323,   326,   329,
-     334,   338,   342,   348,   353,   358,   365,   370,   375,   382,
-     389,   396,   405,   410,   415,   419,   422,   427,   432,   439,
-     448,   453,   460,   465,   470,   477,   484,   493,   502,   511,
-     520,   525,   530,   535,   542,   547,   554,   559,   564,   567,
-     570,   574,   578,   582,   586,   589,   593,   597,   602,   607,
-     610,   615,   622,   631,   638,   645,   652,   655,   660,   663,
-     666,   668,   670,   672,   674,   676,   678,   680,   682,   687,
-     689,   691,   696,   698,   703,   705,   710,   712,   716,   719,
-     722,   725,   729,   732,   734,   739,   743,   749,   751,   756,
-     761,   767,   775,   776,   778,   779,   782,   785,   787,   789,
-     791,   793,   795,   798,   801,   804,   808,   810,   814,   818,
-     822,   826,   830,   835,   840,   844,   848
+       0,     0,     3,     4,     7,     8,    13,    18,    23,    26,
+      28,    31,    34,    39,    44,    49,    54,    59,    64,    69,
+      74,    79,    84,    89,    94,    99,   104,   109,   114,   119,
+     124,   129,   134,   141,   146,   151,   156,   163,   168,   173,
+     180,   187,   194,   199,   204,   211,   216,   223,   228,   235,
+     240,   245,   248,   255,   260,   265,   270,   277,   282,   287,
+     292,   297,   302,   307,   312,   317,   320,   323,   328,   332,
+     336,   342,   347,   352,   359,   364,   369,   376,   383,   390,
+     399,   404,   409,   413,   416,   421,   426,   433,   442,   447,
+     454,   459,   464,   471,   478,   487,   496,   505,   514,   519,
+     524,   529,   536,   541,   548,   553,   558,   561,   564,   568,
+     572,   576,   580,   583,   587,   591,   596,   601,   604,   609,
+     616,   625,   632,   639,   646,   649,   654,   657,   659,   661,
+     663,   665,   667,   669,   671,   673,   678,   680,   682,   687,
+     689,   694,   696,   701,   703,   707,   710,   713,   716,   720,
+     723,   725,   730,   734,   740,   742,   747,   752,   758,   766,
+     767,   769,   770,   773,   776,   778,   780,   782,   784,   786,
+     789,   792,   795,   799,   801,   805,   809,   813,   817,   821,
+     826,   831,   835,   839
 };
 
 /* YYRHS -- A `-1'-separated list of the rules' RHS.  */
 static const yytype_int8 yyrhs[] =
 {
-      82,     0,    -1,    -1,    82,    83,    -1,    -1,    71,    73,
-      84,    83,    -1,    -1,    70,    73,    85,    83,    -1,    70,
-      74,   112,    75,    -1,    72,    74,   112,    75,    -1,    57,
-      75,    -1,    75,    -1,    86,    75,    -1,     1,    75,    -1,
-      13,    88,    76,    88,    -1,    13,   106,    76,    88,    -1,
-      13,   105,    76,    88,    -1,    14,    88,    76,    88,    -1,
-      14,   106,    76,    88,    -1,    14,   105,    76,    88,    -1,
-      22,   106,    76,    97,    -1,    22,   105,    76,    97,    -1,
-      22,   102,    76,    97,    -1,    22,    97,    76,    97,    -1,
-      22,    97,    76,   106,    -1,    22,    97,    76,   105,    -1,
-      13,    88,    76,   106,    -1,    13,    88,    76,   105,    -1,
-      14,    88,    76,   106,    -1,    14,    88,    76,   105,    -1,
-      13,    97,    76,   106,    -1,    13,    97,    76,   105,    -1,
-      13,    95,    76,    97,    -1,    13,    97,    76,    95,    -1,
-      13,    97,    76,   103,    76,    95,    -1,    13,    95,    76,
-      98,    -1,    13,   103,    76,    96,    -1,    66,   103,    76,
-     111,    -1,    13,    88,    76,   103,    76,    91,    -1,    13,
-      88,    76,    98,    -1,    13,    88,    76,    91,    -1,    18,
-      88,    76,   104,    76,    88,    -1,    18,   103,    76,   104,
-      76,    88,    -1,    18,    88,    76,   103,    76,    88,    -1,
-      18,    88,    76,    88,    -1,    18,   103,    76,    88,    -1,
-      16,    88,    76,   104,    76,    88,    -1,    16,    88,    76,
-      88,    -1,    17,    88,    76,   104,    76,    88,    -1,    17,
-      88,    76,    88,    -1,    17,   103,    76,   104,    76,    88,
-      -1,    17,   103,    76,    88,    -1,    15,    88,    76,    88,
-      -1,    15,    88,    -1,    67,    88,    76,   104,    76,    88,
-      -1,    13,   103,    76,    88,    -1,    13,   101,    76,    88,
-      -1,    20,    99,    76,    99,    -1,    20,    99,    76,   111,
-      76,    99,    -1,    13,    98,    76,    98,    -1,    13,    94,
-      76,    98,    -1,    13,    91,    76,    88,    -1,    13,    94,
-      76,    88,    -1,    13,    89,    76,    88,    -1,    13,    88,
-      76,    89,    -1,    13,    98,    76,    94,    -1,    13,    88,
-      76,    94,    -1,    21,    87,    -1,    21,   106,    -1,    21,
-      77,    89,    78,    -1,    21,    76,    87,    -1,    21,    76,
-     106,    -1,    21,    76,    77,    89,    78,    -1,    21,    98,
-      76,    87,    -1,    21,    98,    76,   106,    -1,    21,    98,
-      76,    77,    89,    78,    -1,    21,   111,    76,    87,    -1,
-      21,   111,    76,   106,    -1,    21,   111,    76,    77,    89,
-      78,    -1,    21,   111,    76,   111,    76,    87,    -1,    21,
-     111,    76,   111,    76,   106,    -1,    21,   111,    76,   111,
-      76,    77,    89,    78,    -1,    27,    88,    76,   104,    -1,
-      27,   103,    76,   104,    -1,    27,    88,   108,    -1,    27,
-     108,    -1,    23,    97,    76,    97,    -1,    25,    97,    76,
-      97,    -1,    25,    97,    76,    97,    76,    97,    -1,    26,
-      97,    76,    97,    76,    97,    76,    97,    -1,    24,    97,
-      76,    97,    -1,    24,    97,    76,    97,    76,    98,    -1,
-      19,    88,    76,    88,    -1,    19,    88,    76,   103,    -1,
-      19,    88,    76,    88,    76,    98,    -1,    19,    88,    76,
-     103,    76,    98,    -1,    62,   103,    76,    88,    76,   103,
-      76,    88,    -1,    62,   103,    76,    88,    76,   100,    76,
-      88,    -1,    62,    88,    76,    88,    76,   103,    76,    88,
-      -1,    62,    88,    76,    88,    76,   100,    76,    88,    -1,
-      63,   106,    76,    88,    -1,    63,    88,    76,   106,    -1,
-      58,   105,    76,    88,    -1,    58,   105,    76,   103,    76,
-      88,    -1,    59,    88,    76,   105,    -1,    59,    88,    76,
-     103,    76,   105,    -1,    61,   105,    76,    88,    -1,    61,
-      88,    76,   105,    -1,    60,   105,    -1,    29,   108,    -1,
-      29,    88,   108,    -1,    29,    97,   108,    -1,    29,    76,
-      88,    -1,    29,    76,    97,    -1,    29,   103,    -1,    32,
-     103,   108,    -1,    32,   101,   108,    -1,    55,   103,    76,
-     103,    -1,    56,   103,    76,   106,    -1,    30,   108,    -1,
-      33,   107,    76,   103,    -1,    33,   107,    76,   111,    76,
-     103,    -1,    33,   107,    76,   111,    76,   103,     9,   111,
-      -1,    34,   107,    11,   111,    76,   103,    -1,    34,   107,
-      11,   111,    76,   101,    -1,    34,   107,    11,   111,    76,
-     102,    -1,    35,   108,    -1,   111,    77,    40,    78,    -1,
-      70,   109,    -1,    71,   109,    -1,   104,    -1,    90,    -1,
-      92,    -1,    49,    -1,    46,    -1,    50,    -1,    54,    -1,
-      52,    -1,    51,    77,   111,    78,    -1,    93,    -1,    48,
-      -1,    48,    77,   111,    78,    -1,    44,    -1,    47,    77,
-     111,    78,    -1,    41,    -1,    46,    77,   111,    78,    -1,
-     111,    -1,   111,    76,   111,    -1,    79,   106,    -1,    79,
-      69,    -1,    79,    68,    -1,    79,     9,    68,    -1,    79,
-     111,    -1,    43,    -1,    45,    77,   111,    78,    -1,    77,
-     104,    78,    -1,    77,   104,     8,   104,    78,    -1,   107,
-      -1,   111,    77,   104,    78,    -1,   111,    77,   110,    78,
-      -1,    70,   109,    77,   110,    78,    -1,    70,     6,     7,
-     109,    77,    38,    78,    -1,    -1,    76,    -1,    -1,     8,
-     111,    -1,     9,   111,    -1,    38,    -1,    37,    -1,    39,
-      -1,    36,    -1,    72,    -1,     9,   111,    -1,     8,   111,
-      -1,    80,   111,    -1,    77,   112,    78,    -1,   111,    -1,
-     112,     8,   112,    -1,   112,     9,   112,    -1,   112,    10,
-     112,    -1,   112,    11,   112,    -1,   112,    12,   112,    -1,
-     112,     6,     6,   112,    -1,   112,     7,     7,   112,    -1,
-     112,     5,   112,    -1,   112,     4,   112,    -1,   112,     3,
-     112,    -1
+      82,     0,    -1,    -1,    82,    83,    -1,    -1,    70,    73,
+      84,    83,    -1,    70,    74,   111,    75,    -1,    72,    74,
+     111,    75,    -1,    57,    75,    -1,    75,    -1,    85,    75,
+      -1,     1,    75,    -1,    13,    87,    76,    87,    -1,    13,
+     105,    76,    87,    -1,    13,   104,    76,    87,    -1,    14,
+      87,    76,    87,    -1,    14,   105,    76,    87,    -1,    14,
+     104,    76,    87,    -1,    22,   105,    76,    96,    -1,    22,
+     104,    76,    96,    -1,    22,   101,    76,    96,    -1,    22,
+      96,    76,    96,    -1,    22,    96,    76,   105,    -1,    22,
+      96,    76,   104,    -1,    13,    87,    76,   105,    -1,    13,
+      87,    76,   104,    -1,    14,    87,    76,   105,    -1,    14,
+      87,    76,   104,    -1,    13,    96,    76,   105,    -1,    13,
+      96,    76,   104,    -1,    13,    94,    76,    96,    -1,    13,
+      96,    76,    94,    -1,    13,    96,    76,   102,    76,    94,
+      -1,    13,    94,    76,    97,    -1,    13,   102,    76,    95,
+      -1,    66,   102,    76,   110,    -1,    13,    87,    76,   102,
+      76,    90,    -1,    13,    87,    76,    97,    -1,    13,    87,
+      76,    90,    -1,    18,    87,    76,   103,    76,    87,    -1,
+      18,   102,    76,   103,    76,    87,    -1,    18,    87,    76,
+     102,    76,    87,    -1,    18,    87,    76,    87,    -1,    18,
+     102,    76,    87,    -1,    16,    87,    76,   103,    76,    87,
+      -1,    16,    87,    76,    87,    -1,    17,    87,    76,   103,
+      76,    87,    -1,    17,    87,    76,    87,    -1,    17,   102,
+      76,   103,    76,    87,    -1,    17,   102,    76,    87,    -1,
+      15,    87,    76,    87,    -1,    15,    87,    -1,    67,    87,
+      76,   103,    76,    87,    -1,    13,   102,    76,    87,    -1,
+      13,   100,    76,    87,    -1,    20,    98,    76,    98,    -1,
+      20,    98,    76,   110,    76,    98,    -1,    13,    97,    76,
+      97,    -1,    13,    93,    76,    97,    -1,    13,    90,    76,
+      87,    -1,    13,    93,    76,    87,    -1,    13,    88,    76,
+      87,    -1,    13,    87,    76,    88,    -1,    13,    97,    76,
+      93,    -1,    13,    87,    76,    93,    -1,    21,    86,    -1,
+      21,   105,    -1,    21,    77,    88,    78,    -1,    21,    76,
+      86,    -1,    21,    76,   105,    -1,    21,    76,    77,    88,
+      78,    -1,    21,    97,    76,    86,    -1,    21,    97,    76,
+     105,    -1,    21,    97,    76,    77,    88,    78,    -1,    21,
+     110,    76,    86,    -1,    21,   110,    76,   105,    -1,    21,
+     110,    76,    77,    88,    78,    -1,    21,   110,    76,   110,
+      76,    86,    -1,    21,   110,    76,   110,    76,   105,    -1,
+      21,   110,    76,   110,    76,    77,    88,    78,    -1,    27,
+      87,    76,   103,    -1,    27,   102,    76,   103,    -1,    27,
+      87,   107,    -1,    27,   107,    -1,    23,    96,    76,    96,
+      -1,    25,    96,    76,    96,    -1,    25,    96,    76,    96,
+      76,    96,    -1,    26,    96,    76,    96,    76,    96,    76,
+      96,    -1,    24,    96,    76,    96,    -1,    24,    96,    76,
+      96,    76,    97,    -1,    19,    87,    76,    87,    -1,    19,
+      87,    76,   102,    -1,    19,    87,    76,    87,    76,    97,
+      -1,    19,    87,    76,   102,    76,    97,    -1,    62,   102,
+      76,    87,    76,   102,    76,    87,    -1,    62,   102,    76,
+      87,    76,    99,    76,    87,    -1,    62,    87,    76,    87,
+      76,   102,    76,    87,    -1,    62,    87,    76,    87,    76,
+      99,    76,    87,    -1,    63,   105,    76,    87,    -1,    63,
+      87,    76,   105,    -1,    58,   104,    76,    87,    -1,    58,
+     104,    76,   102,    76,    87,    -1,    59,    87,    76,   104,
+      -1,    59,    87,    76,   102,    76,   104,    -1,    61,   104,
+      76,    87,    -1,    61,    87,    76,   104,    -1,    60,   104,
+      -1,    29,   107,    -1,    29,    87,   107,    -1,    29,    96,
+     107,    -1,    29,    76,    87,    -1,    29,    76,    96,    -1,
+      29,   102,    -1,    32,   102,   107,    -1,    32,   100,   107,
+      -1,    55,   102,    76,   102,    -1,    56,   102,    76,   105,
+      -1,    30,   107,    -1,    33,   106,    76,   102,    -1,    33,
+     106,    76,   110,    76,   102,    -1,    33,   106,    76,   110,
+      76,   102,     9,   110,    -1,    34,   106,    11,   110,    76,
+     102,    -1,    34,   106,    11,   110,    76,   100,    -1,    34,
+     106,    11,   110,    76,   101,    -1,    35,   107,    -1,   110,
+      77,    40,    78,    -1,    70,   108,    -1,   103,    -1,    89,
+      -1,    91,    -1,    49,    -1,    46,    -1,    50,    -1,    54,
+      -1,    52,    -1,    51,    77,   110,    78,    -1,    92,    -1,
+      48,    -1,    48,    77,   110,    78,    -1,    44,    -1,    47,
+      77,   110,    78,    -1,    41,    -1,    46,    77,   110,    78,
+      -1,   110,    -1,   110,    76,   110,    -1,    79,   105,    -1,
+      79,    69,    -1,    79,    68,    -1,    79,     9,    68,    -1,
+      79,   110,    -1,    43,    -1,    45,    77,   110,    78,    -1,
+      77,   103,    78,    -1,    77,   103,     8,   103,    78,    -1,
+     106,    -1,   110,    77,   103,    78,    -1,   110,    77,   109,
+      78,    -1,    70,   108,    77,   109,    78,    -1,    70,     6,
+       7,   108,    77,    38,    78,    -1,    -1,    76,    -1,    -1,
+       8,   110,    -1,     9,   110,    -1,    38,    -1,    37,    -1,
+      39,    -1,    36,    -1,    72,    -1,     9,   110,    -1,     8,
+     110,    -1,    80,   110,    -1,    77,   111,    78,    -1,   110,
+      -1,   111,     8,   111,    -1,   111,     9,   111,    -1,   111,
+      10,   111,    -1,   111,    11,   111,    -1,   111,    12,   111,
+      -1,   111,     6,     6,   111,    -1,   111,     7,     7,   111,
+      -1,   111,     5,   111,    -1,   111,     4,   111,    -1,   111,
+       3,   111,    -1
 };
 
 /* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
 static const yytype_uint16 yyrline[] =
 {
-       0,    66,    66,    67,    71,    70,    78,    77,    83,    88,
-      94,    98,    99,   100,   106,   110,   114,   118,   122,   126,
-     133,   137,   141,   145,   149,   153,   160,   164,   168,   172,
-     179,   183,   190,   194,   198,   202,   206,   210,   217,   221,
-     225,   235,   239,   243,   247,   251,   255,   259,   263,   267,
-     271,   275,   279,   283,   290,   297,   301,   308,   312,   320,
-     324,   328,   332,   336,   340,   344,   348,   357,   361,   365,
-     369,   373,   377,   381,   385,   389,   393,   397,   401,   405,
-     413,   421,   432,   436,   440,   444,   451,   455,   459,   463,
-     467,   471,   478,   482,   486,   490,   497,   501,   505,   509,
-     516,   520,   528,   532,   536,   540,   544,   548,   552,   559,
-     563,   567,   571,   575,   579,   586,   590,   597,   606,   617,
-     624,   628,   634,   643,   647,   651,   658,   664,   670,   678,
-     686,   694,   695,   698,   706,   714,   722,   729,   735,   741,
-     744,   752,   760,   766,   774,   780,   788,   796,   817,   822,
-     830,   836,   843,   851,   852,   860,   867,   877,   878,   887,
-     895,   903,   912,   913,   916,   919,   923,   929,   930,   931,
-     934,   935,   939,   943,   947,   951,   957,   958,   962,   966,
-     970,   974,   978,   982,   986,   990,   994
+       0,    66,    66,    67,    71,    70,    79,    84,    90,    94,
+      95,    96,   102,   106,   110,   114,   118,   122,   129,   133,
+     137,   141,   145,   149,   156,   160,   164,   168,   175,   179,
+     186,   190,   194,   198,   202,   206,   213,   217,   221,   231,
+     235,   239,   243,   247,   251,   255,   259,   263,   267,   271,
+     275,   279,   286,   293,   297,   304,   308,   316,   320,   324,
+     328,   332,   336,   340,   344,   353,   357,   361,   365,   369,
+     373,   377,   381,   385,   389,   393,   397,   401,   409,   417,
+     428,   432,   436,   440,   447,   451,   455,   459,   463,   467,
+     474,   478,   482,   486,   493,   497,   501,   505,   512,   516,
+     524,   528,   532,   536,   540,   544,   548,   555,   559,   563,
+     567,   571,   575,   582,   586,   593,   602,   613,   620,   625,
+     632,   642,   646,   650,   657,   663,   669,   680,   688,   689,
+     692,   700,   708,   716,   723,   729,   735,   738,   746,   754,
+     760,   768,   774,   782,   790,   811,   816,   824,   830,   837,
+     845,   846,   854,   861,   871,   872,   881,   889,   897,   906,
+     907,   910,   913,   917,   923,   924,   925,   928,   929,   933,
+     937,   941,   945,   951,   952,   956,   960,   964,   968,   972,
+     976,   980,   984,   988
 };
 #endif
 
@@ -689,10 +671,10 @@ static const char *const yytname[] =
   "LXST", "LXOP", "LXMV", "LRLWM", "LMOVMW", "LMOVEM", "LMOVFL", "LMTFSB",
   "LMA", "LFCONST", "LSCONST", "LNAME", "LLAB", "LVAR", "':'", "'='",
   "';'", "','", "'('", "')'", "'$'", "'~'", "$accept", "prog", "line",
-  "$@1", "$@2", "inst", "rel", "rreg", "xlreg", "lr", "lcr", "ctr", "msr",
-  "psr", "fpscr", "fpscrf", "freg", "creg", "cbit", "mask", "ximm", "fimm",
-  "imm", "sreg", "regaddr", "addr", "name", "comma", "offset", "pointer",
-  "con", "expr", 0
+  "@1", "inst", "rel", "rreg", "xlreg", "lr", "lcr", "ctr", "msr", "psr",
+  "fpscr", "fpscrf", "freg", "creg", "cbit", "mask", "ximm", "fimm", "imm",
+  "sreg", "regaddr", "addr", "name", "comma", "offset", "pointer", "con",
+  "expr", 0
 };
 #endif
 
@@ -716,359 +698,360 @@ static const yytype_uint16 yytoknum[] =
 /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
 static const yytype_uint8 yyr1[] =
 {
-       0,    81,    82,    82,    84,    83,    85,    83,    83,    83,
-      83,    83,    83,    83,    86,    86,    86,    86,    86,    86,
-      86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
-      86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
-      86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
-      86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
-      86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
-      86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
-      86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
-      86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
-      86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
-      86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
-      86,    86,    86,    86,    86,    86,    86,    87,    87,    87,
-      88,    89,    89,    90,    91,    92,    93,    94,    94,    94,
-      95,    96,    97,    97,    98,    98,    99,   100,   101,   101,
-     102,   102,   103,   104,   104,   105,   105,   106,   106,   107,
-     107,   107,   108,   108,   109,   109,   109,   110,   110,   110,
-     111,   111,   111,   111,   111,   111,   112,   112,   112,   112,
-     112,   112,   112,   112,   112,   112,   112
+       0,    81,    82,    82,    84,    83,    83,    83,    83,    83,
+      83,    83,    85,    85,    85,    85,    85,    85,    85,    85,
+      85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
+      85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
+      85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
+      85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
+      85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
+      85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
+      85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
+      85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
+      85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
+      85,    85,    85,    85,    85,    85,    85,    85,    85,    85,
+      85,    85,    85,    85,    85,    86,    86,    87,    88,    88,
+      89,    90,    91,    92,    93,    93,    93,    94,    95,    96,
+      96,    97,    97,    98,    99,   100,   100,   101,   101,   102,
+     103,   103,   104,   104,   105,   105,   106,   106,   106,   107,
+     107,   108,   108,   108,   109,   109,   109,   110,   110,   110,
+     110,   110,   110,   111,   111,   111,   111,   111,   111,   111,
+     111,   111,   111,   111
 };
 
 /* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
 static const yytype_uint8 yyr2[] =
 {
-       0,     2,     0,     2,     0,     4,     0,     4,     4,     4,
-       2,     1,     2,     2,     4,     4,     4,     4,     4,     4,
+       0,     2,     0,     2,     0,     4,     4,     4,     2,     1,
+       2,     2,     4,     4,     4,     4,     4,     4,     4,     4,
        4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
-       4,     4,     4,     4,     6,     4,     4,     4,     6,     4,
-       4,     6,     6,     6,     4,     4,     6,     4,     6,     4,
-       6,     4,     4,     2,     6,     4,     4,     4,     6,     4,
-       4,     4,     4,     4,     4,     4,     4,     2,     2,     4,
-       3,     3,     5,     4,     4,     6,     4,     4,     6,     6,
-       6,     8,     4,     4,     3,     2,     4,     4,     6,     8,
-       4,     6,     4,     4,     6,     6,     8,     8,     8,     8,
-       4,     4,     4,     6,     4,     6,     4,     4,     2,     2,
-       3,     3,     3,     3,     2,     3,     3,     4,     4,     2,
-       4,     6,     8,     6,     6,     6,     2,     4,     2,     2,
-       1,     1,     1,     1,     1,     1,     1,     1,     4,     1,
-       1,     4,     1,     4,     1,     4,     1,     3,     2,     2,
-       2,     3,     2,     1,     4,     3,     5,     1,     4,     4,
-       5,     7,     0,     1,     0,     2,     2,     1,     1,     1,
-       1,     1,     2,     2,     2,     3,     1,     3,     3,     3,
-       3,     3,     4,     4,     3,     3,     3
+       4,     4,     6,     4,     4,     4,     6,     4,     4,     6,
+       6,     6,     4,     4,     6,     4,     6,     4,     6,     4,
+       4,     2,     6,     4,     4,     4,     6,     4,     4,     4,
+       4,     4,     4,     4,     4,     2,     2,     4,     3,     3,
+       5,     4,     4,     6,     4,     4,     6,     6,     6,     8,
+       4,     4,     3,     2,     4,     4,     6,     8,     4,     6,
+       4,     4,     6,     6,     8,     8,     8,     8,     4,     4,
+       4,     6,     4,     6,     4,     4,     2,     2,     3,     3,
+       3,     3,     2,     3,     3,     4,     4,     2,     4,     6,
+       8,     6,     6,     6,     2,     4,     2,     1,     1,     1,
+       1,     1,     1,     1,     1,     4,     1,     1,     4,     1,
+       4,     1,     4,     1,     3,     2,     2,     2,     3,     2,
+       1,     4,     3,     5,     1,     4,     4,     5,     7,     0,
+       1,     0,     2,     2,     1,     1,     1,     1,     1,     2,
+       2,     2,     3,     1,     3,     3,     3,     3,     3,     4,
+       4,     3,     3,     3
 };
 
-/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
-   Performed when YYTABLE doesn't specify something else to do.  Zero
+/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
+   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
    means the default is an error.  */
 static const yytype_uint8 yydefact[] =
 {
        2,     0,     1,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   162,   162,
-     162,     0,     0,     0,   162,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,    11,
-       3,     0,    13,     0,     0,   170,   144,   153,   142,     0,
-     134,     0,   140,   133,   135,     0,   137,   136,   164,   171,
-       0,     0,     0,     0,     0,   131,     0,   132,   139,     0,
-       0,     0,     0,     0,     0,   130,     0,     0,   157,     0,
-       0,     0,     0,    53,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   146,     0,   164,   164,     0,     0,    67,
-       0,    68,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   163,   162,     0,    85,   163,   162,   162,   114,
-     109,   119,   162,   162,     0,     0,     0,   126,     0,     0,
-      10,     0,     0,     0,   108,     0,     0,     0,     0,     0,
-       0,     0,     0,     6,     0,     4,     0,    12,   173,   172,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   176,
-       0,   149,   148,   152,   174,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   152,     0,     0,     0,     0,     0,     0,   128,
-     129,     0,    70,    71,     0,     0,     0,     0,     0,     0,
-     150,     0,     0,     0,     0,     0,     0,     0,     0,   163,
-      84,     0,   112,   113,   110,   111,   116,   115,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   159,   159,
+     159,     0,     0,     0,   159,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     9,     3,
+       0,    11,     0,     0,   167,   141,   150,   139,     0,   131,
+       0,   137,   130,   132,     0,   134,   133,   161,   168,     0,
+       0,     0,     0,     0,   128,     0,   129,   136,     0,     0,
+       0,     0,     0,     0,   127,     0,     0,   154,     0,     0,
+       0,     0,    51,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   143,     0,   161,     0,     0,    65,     0,    66,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     160,   159,     0,    83,   160,   159,   159,   112,   107,   117,
+     159,   159,     0,     0,     0,   124,     0,     0,     8,     0,
+       0,     0,   106,     0,     0,     0,     0,     0,     0,     0,
+       0,     4,     0,     0,    10,   170,   169,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   173,     0,   146,   145,
+     149,   171,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   149,
+       0,     0,     0,     0,     0,     0,   126,     0,    68,    69,
+       0,     0,     0,     0,     0,     0,   147,     0,     0,     0,
+       0,     0,     0,     0,     0,   160,    82,     0,   110,   111,
+     108,   109,   114,   113,     0,     0,     0,     0,     0,     0,
        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   164,   165,   166,     0,     0,   155,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   175,    14,    64,
-      40,    66,    39,     0,    27,    26,    63,    61,    62,    60,
-      32,    35,    33,     0,    31,    30,    65,    59,    56,     0,
-      55,    36,    16,    15,   168,   167,   169,     0,     0,    17,
-      29,    28,    19,    18,    52,    47,   130,    49,   130,    51,
-     130,    44,     0,   130,    45,   130,    92,    93,    57,   146,
-       0,    69,     0,    73,    74,     0,    76,    77,     0,     0,
-     151,    23,    25,    24,    22,    21,    20,    86,    90,    87,
-       0,    82,    83,   120,     0,     0,   117,   118,   102,     0,
-       0,   104,   107,   106,     0,     0,   101,   100,    37,     0,
-       7,     8,     5,     9,   154,   145,   143,   138,     0,     0,
-       0,   186,   185,   184,     0,     0,   177,   178,   179,   180,
-     181,     0,     0,     0,   158,   159,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,    72,     0,     0,     0,   127,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   160,   156,   182,   183,   134,    38,    34,     0,    46,
-      48,    50,    43,    41,    42,    94,    95,    58,    75,    78,
-       0,    79,    80,    91,    88,     0,   121,     0,   124,   125,
-     123,   103,   105,     0,     0,     0,     0,     0,    54,     0,
-     141,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     161,    81,    89,   122,    99,    98,   147,    97,    96
+       0,     0,     0,     0,     0,     0,   161,   162,   163,     0,
+       0,   152,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   172,    12,    62,    38,    64,    37,     0,    25,
+      24,    61,    59,    60,    58,    30,    33,    31,     0,    29,
+      28,    63,    57,    54,     0,    53,    34,    14,    13,   165,
+     164,   166,     0,     0,    15,    27,    26,    17,    16,    50,
+      45,   127,    47,   127,    49,   127,    42,     0,   127,    43,
+     127,    90,    91,    55,   143,     0,    67,     0,    71,    72,
+       0,    74,    75,     0,     0,   148,    21,    23,    22,    20,
+      19,    18,    84,    88,    85,     0,    80,    81,   118,     0,
+       0,   115,   116,   100,     0,     0,   102,   105,   104,     0,
+       0,    99,    98,    35,     0,     5,     6,     7,   151,   142,
+     140,   135,     0,     0,     0,   183,   182,   181,     0,     0,
+     174,   175,   176,   177,   178,     0,     0,     0,   155,   156,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,    70,
+       0,     0,     0,   125,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   157,   153,   179,   180,   131,
+      36,    32,     0,    44,    46,    48,    41,    39,    40,    92,
+      93,    56,    73,    76,     0,    77,    78,    89,    86,     0,
+     119,     0,   122,   123,   121,   101,   103,     0,     0,     0,
+       0,     0,    52,     0,   138,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   158,    79,    87,   120,    97,    96,
+     144,    95,    94
 };
 
 /* YYDEFGOTO[NTERM-NUM].  */
 static const yytype_int16 yydefgoto[] =
 {
-      -1,     1,    40,   235,   233,    41,    99,    63,    64,    65,
-      66,    67,    68,    69,    70,   281,    71,    72,    92,   433,
-      73,   105,    74,    75,    76,   162,    78,   115,   157,   288,
-     159,   160
+      -1,     1,    39,   229,    40,    97,    62,    63,    64,    65,
+      66,    67,    68,    69,   276,    70,    71,    91,   427,    72,
+     103,    73,    74,    75,   159,    77,   113,   154,   283,   156,
+     157
 };
 
 /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
    STATE-NUM.  */
-#define YYPACT_NINF -178
+#define YYPACT_NINF -176
 static const yytype_int16 yypact[] =
 {
-    -178,   471,  -178,   -66,   567,   640,    32,    32,   -26,   -26,
-      32,   756,   626,    24,    55,    55,    55,    55,   -14,    73,
-     -60,   -54,   743,   743,   -60,   -44,   -44,   -32,   -23,    32,
-     -23,    -1,   -26,   644,   -44,    32,    35,    17,   -10,  -178,
-    -178,    48,  -178,   756,   756,  -178,  -178,  -178,  -178,     4,
-      63,    88,  -178,  -178,  -178,    94,  -178,  -178,   130,  -178,
-     710,   508,   756,   101,   114,  -178,   117,  -178,  -178,   123,
-     128,   140,   155,   166,   170,  -178,   172,   177,  -178,   174,
-     181,   190,   192,   193,   202,   756,   203,   206,   208,   220,
-     221,   756,   224,  -178,    63,   130,   175,   700,    42,  -178,
-     229,  -178,   143,     6,   232,   235,   238,   240,   245,   246,
-     255,   257,  -178,   259,   262,  -178,   285,   -60,   -60,  -178,
-    -178,  -178,   -60,   -60,   265,   268,   306,  -178,   270,   271,
-    -178,    32,   272,   301,  -178,   302,   315,   316,   317,   319,
-     320,   321,   324,  -178,   756,  -178,   756,  -178,  -178,  -178,
-     756,   756,   756,   756,   394,   756,   756,   328,    15,  -178,
-     347,  -178,  -178,   174,  -178,   614,    32,    32,    86,    26,
-     665,   258,    32,    -9,    32,    32,    18,   640,    32,    32,
-      32,    32,  -178,    32,    32,   -26,    32,   -26,   756,   328,
-    -178,    42,  -178,  -178,   330,   332,   714,   725,   157,   340,
-    -178,   696,    55,    55,    55,    55,    55,    55,    55,    32,
-    -178,    32,  -178,  -178,  -178,  -178,  -178,  -178,   390,   106,
-     756,   -44,   743,   -26,    49,   -23,    32,    32,    32,   743,
-      32,   756,    32,   534,   357,   534,   377,   335,   337,   338,
-     339,   175,  -178,  -178,   106,    32,  -178,   756,   756,   756,
-     406,   411,   756,   756,   756,   756,   756,  -178,  -178,  -178,
-    -178,  -178,  -178,   343,  -178,  -178,  -178,  -178,  -178,  -178,
-    -178,  -178,  -178,   351,  -178,  -178,  -178,  -178,  -178,   352,
-    -178,  -178,  -178,  -178,  -178,  -178,  -178,   350,   353,  -178,
-    -178,  -178,  -178,  -178,  -178,  -178,   361,  -178,   362,  -178,
-     363,  -178,   366,   369,  -178,   370,   371,   372,  -178,   373,
-     375,  -178,    42,  -178,  -178,    42,  -178,  -178,   184,   376,
-    -178,  -178,  -178,  -178,  -178,  -178,  -178,  -178,   374,   379,
-     380,  -178,  -178,  -178,   381,   382,  -178,  -178,  -178,   383,
-     388,  -178,  -178,  -178,   389,   392,  -178,  -178,  -178,   397,
-    -178,  -178,  -178,  -178,  -178,  -178,  -178,  -178,   398,   396,
-     399,   620,   513,   147,   756,   756,   216,   216,  -178,  -178,
-    -178,   405,   418,   756,  -178,  -178,    32,    32,    32,    32,
-      32,    32,    59,    59,   756,  -178,   403,   404,   739,  -178,
-      59,    55,    55,   -44,   420,    32,   -23,   390,   390,    32,
-     438,  -178,  -178,   283,   283,  -178,  -178,  -178,   424,  -178,
-    -178,  -178,  -178,  -178,  -178,  -178,  -178,  -178,  -178,  -178,
-      42,  -178,  -178,  -178,  -178,   431,   499,   334,  -178,  -178,
-    -178,  -178,  -178,   436,   439,   460,   463,   464,  -178,   467,
-    -178,   484,    55,   756,   721,    32,    32,   756,    32,    32,
-    -178,  -178,  -178,  -178,  -178,  -178,  -178,  -178,  -178
+    -176,   464,  -176,   -63,   560,   637,    97,    97,   -24,   -24,
+      97,   556,   317,   618,    12,    12,    12,    12,   -27,    47,
+     -47,   -29,   725,   725,   -47,   -26,   -26,   -43,   -17,    97,
+     -17,   -23,   -24,   658,   -26,    97,    51,   -11,  -176,  -176,
+      -2,  -176,   556,   556,  -176,  -176,  -176,  -176,    -1,     2,
+      11,  -176,  -176,  -176,    24,  -176,  -176,    91,  -176,    26,
+     716,   556,    57,    65,  -176,    85,  -176,  -176,    92,    98,
+     104,   110,   119,   134,  -176,   155,   160,  -176,    69,   162,
+     165,   170,   172,   176,   556,   179,   180,   182,   183,   185,
+     556,   187,  -176,     2,    91,   736,   326,  -176,   196,  -176,
+      52,     6,   197,   198,   202,   203,   215,   216,   217,   222,
+    -176,   223,   235,  -176,    73,   -47,   -47,  -176,  -176,  -176,
+     -47,   -47,   239,    79,   178,  -176,   240,   246,  -176,    97,
+     247,   248,  -176,   252,   253,   255,   262,   263,   266,   267,
+     268,  -176,   556,   556,  -176,  -176,  -176,   556,   556,   556,
+     556,   193,   556,   556,   166,     9,  -176,   278,  -176,  -176,
+      69,  -176,   607,    97,    97,   109,    20,   683,    61,    97,
+      27,    97,    97,   340,   637,    97,    97,    97,    97,  -176,
+      97,    97,   -24,    97,   -24,   556,   166,   326,  -176,  -176,
+     199,   152,   742,   762,   153,   283,  -176,   696,    12,    12,
+      12,    12,    12,    12,    12,    97,  -176,    97,  -176,  -176,
+    -176,  -176,  -176,  -176,   382,     4,   556,   -26,   725,   -24,
+      72,   -17,    97,    97,    97,   725,    97,   556,    97,   527,
+     436,   567,   274,   276,   277,   279,   154,  -176,  -176,     4,
+      97,  -176,   556,   556,   556,   353,   339,   556,   556,   556,
+     556,   556,  -176,  -176,  -176,  -176,  -176,  -176,   284,  -176,
+    -176,  -176,  -176,  -176,  -176,  -176,  -176,  -176,   295,  -176,
+    -176,  -176,  -176,  -176,   303,  -176,  -176,  -176,  -176,  -176,
+    -176,  -176,   304,   308,  -176,  -176,  -176,  -176,  -176,  -176,
+    -176,   305,  -176,   316,  -176,   323,  -176,   325,   333,  -176,
+     334,   335,   336,  -176,   343,   342,  -176,   326,  -176,  -176,
+     326,  -176,  -176,   139,   344,  -176,  -176,  -176,  -176,  -176,
+    -176,  -176,  -176,   345,   348,   349,  -176,  -176,  -176,   354,
+     355,  -176,  -176,  -176,   356,   357,  -176,  -176,  -176,   360,
+     373,  -176,  -176,  -176,   374,  -176,  -176,  -176,  -176,  -176,
+    -176,  -176,   327,   377,   379,   298,   612,   506,   556,   556,
+     125,   125,  -176,  -176,  -176,   405,   410,   556,  -176,  -176,
+      97,    97,    97,    97,    97,    97,    -8,    -8,   556,  -176,
+     385,   388,   782,  -176,    -8,    12,    12,   -26,   381,    97,
+     -17,   382,   382,    97,   429,  -176,  -176,   498,   498,  -176,
+    -176,  -176,   390,  -176,  -176,  -176,  -176,  -176,  -176,  -176,
+    -176,  -176,  -176,  -176,   326,  -176,  -176,  -176,  -176,   393,
+     462,   712,  -176,  -176,  -176,  -176,  -176,   398,   399,   416,
+     419,   426,  -176,   451,  -176,   454,    12,   556,   328,    97,
+      97,   556,    97,    97,  -176,  -176,  -176,  -176,  -176,  -176,
+    -176,  -176,  -176
 };
 
 /* YYPGOTO[NTERM-NUM].  */
 static const yytype_int16 yypgoto[] =
 {
-    -178,  -178,     8,  -178,  -178,  -178,   -90,    -5,   -76,  -178,
-    -157,  -178,  -178,  -153,  -160,  -178,    69,    40,  -177,   167,
-     -15,   176,   116,   104,    82,    33,   241,   127,   -75,   327,
-      36,    71
+    -176,  -176,   306,  -176,  -176,   -88,    -5,   -73,  -176,  -154,
+    -176,  -176,  -137,  -158,  -176,    67,    39,  -175,   141,   -15,
+     149,   113,   167,    80,    32,   200,   124,   -83,   299,    35,
+      70
 };
 
 /* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
    positive, shift that token.  If negative, reduce the rule which
-   number is the opposite.  If YYTABLE_NINF, syntax error.  */
+   number is the opposite.  If zero, do what YYDEFACT says.
+   If YYTABLE_NINF, syntax error.  */
 #define YYTABLE_NINF -1
 static const yytype_uint16 yytable[] =
 {
-      80,    83,    84,    86,    88,    90,   122,   192,   260,    42,
-     272,   308,   261,   113,   117,   199,   112,    47,   276,    49,
-     189,   190,   195,   245,   133,    61,   135,   137,   139,    47,
-     142,    49,    43,    44,    47,    85,    49,    77,    82,   279,
-      79,    79,    47,   130,    49,   101,   107,    93,   102,    79,
-      43,    44,   100,    85,   131,   284,   285,   286,   125,   125,
-      45,    47,   112,    49,   146,    85,   140,    46,    48,    79,
-      48,    51,    94,    51,   200,    47,   131,    49,    45,   148,
-     149,   150,   104,   108,   109,   110,   111,    81,   118,   259,
-     145,    53,    54,   246,    58,   106,    59,   163,   164,    48,
-      46,    60,    51,   103,    62,    94,   313,   316,   143,   144,
-     132,   212,   134,   136,    59,   310,    47,    48,    49,    91,
-      51,   182,    62,   147,    87,    89,   131,    46,    85,    47,
-     193,    49,    94,   194,   114,   119,   154,   123,   155,   156,
-     151,   128,   129,   284,   285,   286,   120,   121,   138,   116,
-     141,   127,    85,   250,   251,   252,   253,   254,   255,   256,
-     258,   266,   267,   268,   158,   152,   358,   278,   280,   282,
-     283,   153,   289,   292,   293,   294,   295,   165,   297,   299,
-     301,   304,   306,   155,   156,   213,   237,   238,   239,   240,
-     166,   242,   243,   167,   284,   285,   286,   319,   265,   168,
-      47,    79,    49,   275,   169,   262,    79,   417,   269,   271,
-     291,   277,   407,    79,   406,   234,   170,   236,   338,   197,
-     198,   343,   344,   345,   309,   347,   254,   255,   256,   314,
-     317,   171,   194,   318,   323,   158,   386,    79,   270,   387,
-     210,   350,   172,   352,   214,   215,   173,   264,   174,   216,
-     217,   176,   274,   175,   334,   337,   335,   177,    79,   290,
-     388,   198,   346,   124,   126,    79,   178,   348,   179,   180,
-     321,   324,   325,   326,   327,   328,   329,   330,   181,   183,
-     287,   263,   184,   322,   185,   296,   273,   298,   300,   303,
-     305,   252,   253,   254,   255,   256,   186,   187,   421,    46,
-     188,   302,   287,   307,    94,   196,   341,   342,   201,    55,
-      56,   202,    57,   331,   203,   332,   204,   220,   361,   362,
-     363,   205,   206,   366,   367,   368,   369,   370,    47,    48,
-      49,   207,    51,   208,   333,   209,   349,   336,   211,   339,
-     340,   218,    43,   444,   441,   219,   221,   222,   223,   360,
-     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
-     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
-      45,   409,   410,   411,   412,   413,   414,   224,   225,   428,
-     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
-     431,   226,   227,   228,   438,   229,   230,   231,    43,    44,
-     232,   241,   200,   161,    58,   244,    59,   198,   320,   408,
-     311,    91,   364,   354,    62,   355,   356,   357,   365,   371,
-      93,   422,   415,   416,   194,   257,    45,   372,   374,   373,
-     423,   375,   351,   435,   435,   403,   404,   376,   377,   378,
-     454,   455,   379,   457,   458,   380,   381,   382,   383,   384,
-     390,   405,   353,   385,   389,   391,   392,   393,   394,   395,
-     424,   425,    59,   163,   396,   397,    52,    91,   398,    85,
-      62,     2,     3,   399,   401,   400,   439,   402,   432,   453,
-     149,   418,   419,   456,     4,     5,     6,     7,     8,     9,
-      10,    11,    12,    13,    14,    15,    16,    17,    18,   427,
-      19,    20,   440,    21,    22,    23,    24,   442,   443,   426,
-     430,   452,   445,   434,   437,   446,    43,    44,   249,   250,
-     251,   252,   253,   254,   255,   256,    25,    26,    27,    28,
-      29,    30,    31,    32,    33,     3,   447,    34,    35,   448,
-     449,    36,    37,    38,    45,   450,    39,     4,     5,     6,
+      79,    82,    83,    85,    87,    89,   120,   188,   255,   267,
+     303,   186,    41,   111,   115,   195,    46,   240,    48,    46,
+      46,    48,    48,   191,   131,   256,   133,   135,   137,   110,
+     140,   271,   128,    45,    42,    43,    76,    81,    93,    78,
+      78,   279,   280,   281,    99,   105,    92,   100,    78,   110,
+      60,    98,    84,    84,   129,    84,    47,   123,   123,    50,
+     129,    45,    44,   143,    47,   138,    93,    50,    78,    46,
+      46,    48,    48,   144,   196,   274,   147,   145,   146,   148,
+     102,   106,   107,   108,   109,    80,   116,   241,   149,   254,
+      46,    47,    48,   104,    50,   160,   161,   151,    58,   152,
+     153,   150,    45,    90,   308,   311,    61,    93,   130,   208,
+     132,   134,    54,    55,   305,    56,    46,    47,    48,   179,
+      50,    86,    88,   114,   141,   142,    84,   189,   193,   194,
+     190,   112,   117,   162,   121,   249,   250,   251,   126,   127,
+      46,   163,    48,   118,   119,   136,   173,   139,   125,   129,
+      45,    84,    46,   352,    48,    93,   215,   253,   261,   262,
+     263,   164,   152,   153,   273,   275,   277,   278,   165,   284,
+     287,   288,   289,   290,   166,   292,   294,   296,   299,   301,
+     167,   209,   232,   233,   234,   235,   168,   237,   238,   216,
+     279,   280,   281,   314,   260,   169,    46,    78,    48,   270,
+     236,   257,    78,   411,   264,   266,   286,   272,   401,    78,
+     170,   400,   230,   231,   333,   382,   194,   338,   339,   340,
+     304,   342,   122,   124,   309,   312,   155,   190,   313,   318,
+     306,   171,    78,   265,   380,   206,   172,   381,   174,   210,
+     211,   175,   259,   239,   212,   213,   176,   269,   177,   329,
+     332,   330,   178,    78,   285,   180,   181,   341,   182,   183,
+      78,   184,   343,   185,   316,   319,   320,   321,   322,   323,
+     324,   325,   192,   197,   198,   258,   194,   317,   199,   200,
+     268,   242,   243,   244,   245,   246,   247,   248,   249,   250,
+     251,   201,   202,   203,   415,   297,   155,   302,   204,   205,
+     336,   337,   243,   244,   245,   246,   247,   248,   249,   250,
+     251,   207,   355,   356,   357,   214,   217,   360,   361,   362,
+     363,   364,   218,   219,   220,    42,    43,   328,   221,   222,
+     331,   223,   334,   335,    42,    43,    42,    43,   224,   225,
+     282,   435,   226,   227,   228,   291,   359,   293,   295,   298,
+     300,   315,   348,    44,   349,   350,   252,   351,    45,   358,
+     365,   282,    44,    93,    44,   403,   404,   405,   406,   407,
+     408,   366,   326,   422,   327,    52,    53,   279,   280,   281,
+     367,   370,   368,    46,   425,    48,   369,    94,   432,    58,
+      42,    43,   371,    95,    96,   344,   315,    61,    58,   372,
+      58,   373,   402,    90,   394,    90,    61,   354,    61,   374,
+     375,   376,   377,    92,   416,   409,   410,   190,    44,   378,
+     379,   384,   383,   417,   385,   386,   429,   429,   397,   398,
+     387,   388,   389,   390,   448,   449,   391,   451,   452,   242,
+     243,   244,   245,   246,   247,   248,   249,   250,   251,   392,
+     393,   399,   418,   419,    58,   395,   160,   396,    51,    90,
+     421,    84,    61,   412,     2,     3,   413,   433,   434,   436,
+     426,   437,   447,   146,   439,   440,   450,     4,     5,     6,
        7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
-      17,    18,   451,    19,    20,   436,    21,    22,    23,    24,
-     429,   359,     0,     0,     0,    43,    44,   161,    58,     0,
-      59,     0,     0,     0,     0,    91,     0,     0,    62,    25,
-      26,    27,    28,    29,    30,    31,    32,    33,     0,     0,
-      34,    35,     0,    45,    36,    37,    38,     0,    46,    39,
-      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
-       0,    57,    43,    44,   248,   249,   250,   251,   252,   253,
-     254,   255,   256,     0,    43,    44,     0,    58,     0,    59,
-       0,     0,     0,     0,    60,     0,    61,    62,    43,    44,
-      45,     0,    43,    44,     0,    46,     0,    47,     0,    49,
-      50,     0,    45,    53,    54,    55,    56,    46,    57,     0,
-       0,     0,    94,    43,    44,     0,    45,     0,     0,     0,
-      45,     0,     0,    47,    58,    49,    59,    47,     0,    49,
-       0,    60,     0,    85,    62,     0,    95,    96,    59,     0,
-       0,    45,    97,    98,    43,    44,    62,     0,    43,    44,
-      58,     0,    59,    52,    58,     0,    59,    60,    43,    44,
-      62,    91,    43,    44,    62,     0,     0,     0,     0,    43,
-      44,     0,    45,    43,    44,    58,    45,    59,     0,     0,
-      48,     0,    60,    51,    85,    62,    45,    43,    44,     0,
-      45,    43,    44,    47,     0,    49,     0,    45,     0,     0,
-       0,    45,     0,     0,    43,    44,    58,     0,    59,     0,
-      95,    96,    59,    60,     0,    45,    62,   191,     0,    45,
-      62,     0,    59,     0,    95,    96,    59,    91,     0,   320,
-      62,   312,    45,    59,    62,    95,    96,    59,    91,     0,
-       0,    62,   315,     0,     0,    62,     0,     0,     0,    95,
-      96,    59,     0,    58,     0,    59,   420,     0,     0,    62,
-      91,     0,     0,    62,     0,     0,     0,     0,    59,     0,
-       0,     0,     0,    91,     0,     0,    62
+      17,    18,   441,    19,    20,   442,    21,    22,    23,    24,
+     420,   424,   443,   446,   428,   431,   247,   248,   249,   250,
+     251,   346,   245,   246,   247,   248,   249,   250,   251,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,     3,   444,
+      34,    35,   445,   430,    36,   345,    37,   423,   353,    38,
+       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
+      14,    15,    16,    17,    18,     0,    19,    20,     0,    21,
+      22,    23,    24,     0,    42,    43,     0,     0,    42,    43,
+     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
+       0,     0,    25,    26,    27,    28,    29,    30,    31,    32,
+      33,     0,    44,    34,    35,     0,    44,    36,     0,    37,
+       0,    45,    38,    46,    47,    48,    49,    50,    51,    52,
+      53,    54,    55,     0,    56,    42,    43,   244,   245,   246,
+     247,   248,   249,   250,   251,     0,    42,    43,    58,     0,
+      57,     0,    58,    90,     0,     0,    61,    59,     0,    60,
+      61,     0,   347,    44,     0,    42,    43,     0,    45,     0,
+      46,     0,    48,    49,    44,     0,    52,    53,    54,    55,
+       0,    56,    47,     0,     0,    50,    42,    43,     0,     0,
+       0,     0,     0,    44,     0,     0,     0,    57,     0,    58,
+      46,     0,    48,     0,    59,     0,    84,    61,    57,     0,
+      58,    42,    43,     0,    44,    59,     0,   101,    61,     0,
+       0,    46,     0,    48,    42,    43,     0,    57,     0,    58,
+       0,     0,     0,     0,    59,     0,     0,    61,     0,    44,
+      42,   438,     0,     0,    42,    43,     0,     0,    57,     0,
+      58,    51,    44,    42,    43,    90,     0,     0,    61,     0,
+      47,     0,     0,    50,    42,    43,     0,     0,    44,     0,
+      42,    43,    44,    57,     0,    58,     0,     0,     0,     0,
+      59,    44,    84,    61,     0,     0,    57,     0,    58,     0,
+      42,    43,    44,    59,     0,     0,    61,     0,    44,     0,
+     196,   158,    57,     0,    58,   158,    57,     0,    58,    90,
+      42,    43,    61,    90,     0,    57,    61,    58,    44,     0,
+       0,     0,    90,     0,     0,    61,    94,     0,    58,     0,
+       0,     0,    94,   187,    58,     0,    61,     0,    44,   307,
+       0,     0,    61,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,    94,     0,    58,     0,     0,     0,     0,   310,
+       0,     0,    61,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,    94,     0,    58,     0,     0,     0,     0,   414,
+       0,     0,    61
 };
 
-#define yypact_value_is_default(yystate) \
-  ((yystate) == (-178))
-
-#define yytable_value_is_error(yytable_value) \
-  YYID (0)
-
 static const yytype_int16 yycheck[] =
 {
-       5,     6,     7,     8,     9,    10,    21,    97,   165,    75,
-     170,   188,   165,    18,    19,     9,    76,    43,   171,    45,
-      95,    96,    98,     8,    29,    79,    31,    32,    33,    43,
-      35,    45,     8,     9,    43,    79,    45,     4,     5,    48,
-       4,     5,    43,    75,    45,    12,    13,    11,    12,    13,
-       8,     9,    12,    79,    77,    37,    38,    39,    22,    23,
-      36,    43,    76,    45,    74,    79,    33,    41,    44,    33,
-      44,    47,    46,    47,    68,    43,    77,    45,    36,    43,
-      44,    77,    13,    14,    15,    16,    17,     5,    19,   165,
-      73,    49,    50,    78,    70,    13,    72,    61,    62,    44,
-      41,    77,    47,    79,    80,    46,   196,   197,    73,    74,
-      28,   116,    30,    31,    72,   191,    43,    44,    45,    77,
-      47,    85,    80,    75,     8,     9,    77,    41,    79,    43,
-      97,    45,    46,    97,    18,    19,     6,    21,     8,     9,
-      77,    25,    26,    37,    38,    39,    19,    20,    32,    76,
-      34,    24,    79,     6,     7,     8,     9,    10,    11,    12,
-     165,   166,   167,   168,    60,    77,   241,   172,   173,   174,
-     175,    77,   177,   178,   179,   180,   181,    76,   183,   184,
-     185,   186,   187,     8,     9,   116,   150,   151,   152,   153,
-      76,   155,   156,    76,    37,    38,    39,    40,   165,    76,
-      43,   165,    45,   170,    76,   165,   170,   384,   168,   169,
-     177,   171,   372,   177,   371,   144,    76,   146,   223,    76,
-      77,   226,   227,   228,   188,   230,    10,    11,    12,   196,
-     197,    76,   196,   197,   201,   131,   312,   201,   169,   315,
-     113,   233,    76,   235,   117,   118,    76,   165,    76,   122,
-     123,    77,   170,    76,   218,   222,   220,    76,   222,   177,
-      76,    77,   229,    22,    23,   229,    76,   231,    76,    76,
-     201,   202,   203,   204,   205,   206,   207,   208,    76,    76,
-     176,   165,    76,   201,    76,   181,   170,   183,   184,   185,
-     186,     8,     9,    10,    11,    12,    76,    76,   388,    41,
-      76,   185,   198,   187,    46,    76,   224,   225,    76,    51,
-      52,    76,    54,   209,    76,   211,    76,    11,   247,   248,
-     249,    76,    76,   252,   253,   254,   255,   256,    43,    44,
-      45,    76,    47,    76,   218,    76,   232,   221,    76,   223,
-     224,    76,     8,     9,   420,    77,    76,    76,    76,   245,
-       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
-       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
-      36,   376,   377,   378,   379,   380,   381,    76,    76,   394,
-       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
-     395,    76,    76,    76,   399,    76,    76,    76,     8,     9,
-      76,     7,    68,    69,    70,    77,    72,    77,    68,   373,
-      78,    77,     6,    78,    80,    78,    78,    78,     7,    76,
-     384,   388,   382,   383,   388,    78,    36,    76,    78,    77,
-     390,    78,    75,   397,   398,   364,   365,    76,    76,    76,
-     445,   446,    76,   448,   449,    76,    76,    76,    76,    76,
-      76,    46,    75,    78,    78,    76,    76,    76,    76,    76,
-     391,   392,    72,   427,    76,    76,    48,    77,    76,    79,
-      80,     0,     1,    76,    78,    77,    38,    78,   396,   443,
-     444,    78,    78,   447,    13,    14,    15,    16,    17,    18,
-      19,    20,    21,    22,    23,    24,    25,    26,    27,    79,
-      29,    30,    78,    32,    33,    34,    35,    76,     9,   393,
-     394,   442,    76,   397,   398,    76,     8,     9,     5,     6,
-       7,     8,     9,    10,    11,    12,    55,    56,    57,    58,
-      59,    60,    61,    62,    63,     1,    76,    66,    67,    76,
-      76,    70,    71,    72,    36,    78,    75,    13,    14,    15,
+       5,     6,     7,     8,     9,    10,    21,    95,   162,   167,
+     185,    94,    75,    18,    19,     9,    43,     8,    45,    43,
+      43,    45,    45,    96,    29,   162,    31,    32,    33,    76,
+      35,   168,    75,    41,     8,     9,     4,     5,    46,     4,
+       5,    37,    38,    39,    12,    13,    11,    12,    13,    76,
+      79,    12,    79,    79,    77,    79,    44,    22,    23,    47,
+      77,    41,    36,    74,    44,    33,    46,    47,    33,    43,
+      43,    45,    45,    75,    68,    48,    77,    42,    43,    77,
+      13,    14,    15,    16,    17,     5,    19,    78,    77,   162,
+      43,    44,    45,    13,    47,    60,    61,     6,    72,     8,
+       9,    77,    41,    77,   192,   193,    80,    46,    28,   114,
+      30,    31,    51,    52,   187,    54,    43,    44,    45,    84,
+      47,     8,     9,    76,    73,    74,    79,    95,    76,    77,
+      95,    18,    19,    76,    21,    10,    11,    12,    25,    26,
+      43,    76,    45,    19,    20,    32,    77,    34,    24,    77,
+      41,    79,    43,   236,    45,    46,    77,   162,   163,   164,
+     165,    76,     8,     9,   169,   170,   171,   172,    76,   174,
+     175,   176,   177,   178,    76,   180,   181,   182,   183,   184,
+      76,   114,   147,   148,   149,   150,    76,   152,   153,    11,
+      37,    38,    39,    40,   162,    76,    43,   162,    45,   167,
+       7,   162,   167,   378,   165,   166,   174,   168,   366,   174,
+      76,   365,   142,   143,   219,    76,    77,   222,   223,   224,
+     185,   226,    22,    23,   192,   193,    59,   192,   193,   197,
+      78,    76,   197,   166,   307,   111,    76,   310,    76,   115,
+     116,    76,   162,    77,   120,   121,    76,   167,    76,   214,
+     218,   216,    76,   218,   174,    76,    76,   225,    76,    76,
+     225,    76,   227,    76,   197,   198,   199,   200,   201,   202,
+     203,   204,    76,    76,    76,   162,    77,   197,    76,    76,
+     167,     3,     4,     5,     6,     7,     8,     9,    10,    11,
+      12,    76,    76,    76,   382,   182,   129,   184,    76,    76,
+     220,   221,     4,     5,     6,     7,     8,     9,    10,    11,
+      12,    76,   242,   243,   244,    76,    76,   247,   248,   249,
+     250,   251,    76,    76,    76,     8,     9,   214,    76,    76,
+     217,    76,   219,   220,     8,     9,     8,     9,    76,    76,
+     173,   414,    76,    76,    76,   178,     7,   180,   181,   182,
+     183,    68,    78,    36,    78,    78,    78,    78,    41,     6,
+      76,   194,    36,    46,    36,   370,   371,   372,   373,   374,
+     375,    76,   205,   388,   207,    49,    50,    37,    38,    39,
+      77,    76,    78,    43,   389,    45,    78,    70,   393,    72,
+       8,     9,    76,    76,    77,   228,    68,    80,    72,    76,
+      72,    76,   367,    77,    77,    77,    80,   240,    80,    76,
+      76,    76,    76,   378,   382,   376,   377,   382,    36,    76,
+      78,    76,    78,   384,    76,    76,   391,   392,   358,   359,
+      76,    76,    76,    76,   439,   440,    76,   442,   443,     3,
+       4,     5,     6,     7,     8,     9,    10,    11,    12,    76,
+      76,    46,   385,   386,    72,    78,   421,    78,    48,    77,
+      79,    79,    80,    78,     0,     1,    78,    38,    78,    76,
+     390,     9,   437,   438,    76,    76,   441,    13,    14,    15,
       16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-      26,    27,    78,    29,    30,   398,    32,    33,    34,    35,
-     394,   244,    -1,    -1,    -1,     8,     9,    69,    70,    -1,
-      72,    -1,    -1,    -1,    -1,    77,    -1,    -1,    80,    55,
-      56,    57,    58,    59,    60,    61,    62,    63,    -1,    -1,
-      66,    67,    -1,    36,    70,    71,    72,    -1,    41,    75,
-      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
-      -1,    54,     8,     9,     4,     5,     6,     7,     8,     9,
-      10,    11,    12,    -1,     8,     9,    -1,    70,    -1,    72,
-      -1,    -1,    -1,    -1,    77,    -1,    79,    80,     8,     9,
-      36,    -1,     8,     9,    -1,    41,    -1,    43,    -1,    45,
-      46,    -1,    36,    49,    50,    51,    52,    41,    54,    -1,
-      -1,    -1,    46,     8,     9,    -1,    36,    -1,    -1,    -1,
-      36,    -1,    -1,    43,    70,    45,    72,    43,    -1,    45,
-      -1,    77,    -1,    79,    80,    -1,    70,    71,    72,    -1,
-      -1,    36,    76,    77,     8,     9,    80,    -1,     8,     9,
-      70,    -1,    72,    48,    70,    -1,    72,    77,     8,     9,
-      80,    77,     8,     9,    80,    -1,    -1,    -1,    -1,     8,
-       9,    -1,    36,     8,     9,    70,    36,    72,    -1,    -1,
-      44,    -1,    77,    47,    79,    80,    36,     8,     9,    -1,
-      36,     8,     9,    43,    -1,    45,    -1,    36,    -1,    -1,
-      -1,    36,    -1,    -1,     8,     9,    70,    -1,    72,    -1,
-      70,    71,    72,    77,    -1,    36,    80,    77,    -1,    36,
-      80,    -1,    72,    -1,    70,    71,    72,    77,    -1,    68,
-      80,    77,    36,    72,    80,    70,    71,    72,    77,    -1,
-      -1,    80,    77,    -1,    -1,    80,    -1,    -1,    -1,    70,
-      71,    72,    -1,    70,    -1,    72,    77,    -1,    -1,    80,
-      77,    -1,    -1,    80,    -1,    -1,    -1,    -1,    72,    -1,
-      -1,    -1,    -1,    77,    -1,    -1,    80
+      26,    27,    76,    29,    30,    76,    32,    33,    34,    35,
+     387,   388,    76,   436,   391,   392,     8,     9,    10,    11,
+      12,    75,     6,     7,     8,     9,    10,    11,    12,    55,
+      56,    57,    58,    59,    60,    61,    62,    63,     1,    78,
+      66,    67,    78,   392,    70,   229,    72,   388,   239,    75,
+      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
+      23,    24,    25,    26,    27,    -1,    29,    30,    -1,    32,
+      33,    34,    35,    -1,     8,     9,    -1,    -1,     8,     9,
+       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
+      -1,    -1,    55,    56,    57,    58,    59,    60,    61,    62,
+      63,    -1,    36,    66,    67,    -1,    36,    70,    -1,    72,
+      -1,    41,    75,    43,    44,    45,    46,    47,    48,    49,
+      50,    51,    52,    -1,    54,     8,     9,     5,     6,     7,
+       8,     9,    10,    11,    12,    -1,     8,     9,    72,    -1,
+      70,    -1,    72,    77,    -1,    -1,    80,    77,    -1,    79,
+      80,    -1,    75,    36,    -1,     8,     9,    -1,    41,    -1,
+      43,    -1,    45,    46,    36,    -1,    49,    50,    51,    52,
+      -1,    54,    44,    -1,    -1,    47,     8,     9,    -1,    -1,
+      -1,    -1,    -1,    36,    -1,    -1,    -1,    70,    -1,    72,
+      43,    -1,    45,    -1,    77,    -1,    79,    80,    70,    -1,
+      72,     8,     9,    -1,    36,    77,    -1,    79,    80,    -1,
+      -1,    43,    -1,    45,     8,     9,    -1,    70,    -1,    72,
+      -1,    -1,    -1,    -1,    77,    -1,    -1,    80,    -1,    36,
+       8,     9,    -1,    -1,     8,     9,    -1,    -1,    70,    -1,
+      72,    48,    36,     8,     9,    77,    -1,    -1,    80,    -1,
+      44,    -1,    -1,    47,     8,     9,    -1,    -1,    36,    -1,
+       8,     9,    36,    70,    -1,    72,    -1,    -1,    -1,    -1,
+      77,    36,    79,    80,    -1,    -1,    70,    -1,    72,    -1,
+       8,     9,    36,    77,    -1,    -1,    80,    -1,    36,    -1,
+      68,    69,    70,    -1,    72,    69,    70,    -1,    72,    77,
+       8,     9,    80,    77,    -1,    70,    80,    72,    36,    -1,
+      -1,    -1,    77,    -1,    -1,    80,    70,    -1,    72,    -1,
+      -1,    -1,    70,    77,    72,    -1,    80,    -1,    36,    77,
+      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    70,    -1,    72,    -1,    -1,    -1,    -1,    77,
+      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    70,    -1,    72,    -1,    -1,    -1,    -1,    77,
+      -1,    -1,    80
 };
 
 /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
@@ -1078,49 +1061,49 @@ static const yytype_uint8 yystos[] =
        0,    82,     0,     1,    13,    14,    15,    16,    17,    18,
       19,    20,    21,    22,    23,    24,    25,    26,    27,    29,
       30,    32,    33,    34,    35,    55,    56,    57,    58,    59,
-      60,    61,    62,    63,    66,    67,    70,    71,    72,    75,
-      83,    86,    75,     8,     9,    36,    41,    43,    44,    45,
-      46,    47,    48,    49,    50,    51,    52,    54,    70,    72,
-      77,    79,    80,    88,    89,    90,    91,    92,    93,    94,
-      95,    97,    98,   101,   103,   104,   105,   106,   107,   111,
-      88,   105,   106,    88,    88,    79,    88,   103,    88,   103,
-      88,    77,    99,   111,    46,    70,    71,    76,    77,    87,
-      98,   106,   111,    79,    97,   102,   105,   106,    97,    97,
-      97,    97,    76,    88,   103,   108,    76,    88,    97,   103,
-     108,   108,   101,   103,   107,   111,   107,   108,   103,   103,
-      75,    77,   105,    88,   105,    88,   105,    88,   103,    88,
-     106,   103,    88,    73,    74,    73,    74,    75,   111,   111,
-      77,    77,    77,    77,     6,     8,     9,   109,   104,   111,
-     112,    69,   106,   111,   111,    76,    76,    76,    76,    76,
-      76,    76,    76,    76,    76,    76,    77,    76,    76,    76,
-      76,    76,   111,    76,    76,    76,    76,    76,    76,   109,
-     109,    77,    87,   106,   111,    89,    76,    76,    77,     9,
-      68,    76,    76,    76,    76,    76,    76,    76,    76,    76,
-     108,    76,    88,    97,   108,   108,   108,   108,    76,    77,
-      11,    76,    76,    76,    76,    76,    76,    76,    76,    76,
-      76,    76,    76,    85,   112,    84,   112,   111,   111,   111,
-     111,     7,   111,   111,    77,     8,    78,     3,     4,     5,
-       6,     7,     8,     9,    10,    11,    12,    78,    88,    89,
-      91,    94,    98,   103,   105,   106,    88,    88,    88,    98,
-      97,    98,    95,   103,   105,   106,    94,    98,    88,    48,
-      88,    96,    88,    88,    37,    38,    39,   104,   110,    88,
-     105,   106,    88,    88,    88,    88,   104,    88,   104,    88,
-     104,    88,   103,   104,    88,   104,    88,   103,    99,   111,
-      89,    78,    77,    87,   106,    77,    87,   106,   111,    40,
-      68,    97,   105,   106,    97,    97,    97,    97,    97,    97,
-      97,   104,   104,   103,   111,   111,   103,   106,    88,   103,
-     103,   105,   105,    88,    88,    88,   106,    88,   111,   104,
-      83,    75,    83,    75,    78,    78,    78,    78,   109,   110,
-     104,   112,   112,   112,     6,     7,   112,   112,   112,   112,
-     112,    76,    76,    77,    78,    78,    76,    76,    76,    76,
-      76,    76,    76,    76,    76,    78,    89,    89,    76,    78,
-      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
-      77,    78,    78,   112,   112,    46,    91,    95,   111,    88,
-      88,    88,    88,    88,    88,    98,    98,    99,    78,    78,
-      77,    87,   106,    98,    97,    97,   103,    79,   101,   102,
-     103,    88,   105,   100,   103,   111,   100,   103,    88,    38,
-      78,    89,    76,     9,     9,    76,    76,    76,    76,    76,
-      78,    78,    97,   111,    88,    88,   111,    88,    88
+      60,    61,    62,    63,    66,    67,    70,    72,    75,    83,
+      85,    75,     8,     9,    36,    41,    43,    44,    45,    46,
+      47,    48,    49,    50,    51,    52,    54,    70,    72,    77,
+      79,    80,    87,    88,    89,    90,    91,    92,    93,    94,
+      96,    97,   100,   102,   103,   104,   105,   106,   110,    87,
+     104,   105,    87,    87,    79,    87,   102,    87,   102,    87,
+      77,    98,   110,    46,    70,    76,    77,    86,    97,   105,
+     110,    79,    96,   101,   104,   105,    96,    96,    96,    96,
+      76,    87,   102,   107,    76,    87,    96,   102,   107,   107,
+     100,   102,   106,   110,   106,   107,   102,   102,    75,    77,
+     104,    87,   104,    87,   104,    87,   102,    87,   105,   102,
+      87,    73,    74,    74,    75,   110,   110,    77,    77,    77,
+      77,     6,     8,     9,   108,   103,   110,   111,    69,   105,
+     110,   110,    76,    76,    76,    76,    76,    76,    76,    76,
+      76,    76,    76,    77,    76,    76,    76,    76,    76,   110,
+      76,    76,    76,    76,    76,    76,   108,    77,    86,   105,
+     110,    88,    76,    76,    77,     9,    68,    76,    76,    76,
+      76,    76,    76,    76,    76,    76,   107,    76,    87,    96,
+     107,   107,   107,   107,    76,    77,    11,    76,    76,    76,
+      76,    76,    76,    76,    76,    76,    76,    76,    76,    84,
+     111,   111,   110,   110,   110,   110,     7,   110,   110,    77,
+       8,    78,     3,     4,     5,     6,     7,     8,     9,    10,
+      11,    12,    78,    87,    88,    90,    93,    97,   102,   104,
+     105,    87,    87,    87,    97,    96,    97,    94,   102,   104,
+     105,    93,    97,    87,    48,    87,    95,    87,    87,    37,
+      38,    39,   103,   109,    87,   104,   105,    87,    87,    87,
+      87,   103,    87,   103,    87,   103,    87,   102,   103,    87,
+     103,    87,   102,    98,   110,    88,    78,    77,    86,   105,
+      77,    86,   105,   110,    40,    68,    96,   104,   105,    96,
+      96,    96,    96,    96,    96,    96,   103,   103,   102,   110,
+     110,   102,   105,    87,   102,   102,   104,   104,    87,    87,
+      87,   105,    87,   110,   103,    83,    75,    75,    78,    78,
+      78,    78,   108,   109,   103,   111,   111,   111,     6,     7,
+     111,   111,   111,   111,   111,    76,    76,    77,    78,    78,
+      76,    76,    76,    76,    76,    76,    76,    76,    76,    78,
+      88,    88,    76,    78,    76,    76,    76,    76,    76,    76,
+      76,    76,    76,    76,    77,    78,    78,   111,   111,    46,
+      90,    94,   110,    87,    87,    87,    87,    87,    87,    97,
+      97,    98,    78,    78,    77,    86,   105,    97,    96,    96,
+     102,    79,   100,   101,   102,    87,   104,    99,   102,   110,
+      99,   102,    87,    38,    78,    88,    76,     9,     9,    76,
+      76,    76,    76,    76,    78,    78,    96,   110,    87,    87,
+     110,    87,    87
 };
 
 #define yyerrok		(yyerrstatus = 0)
@@ -1135,18 +1118,9 @@ static const yytype_uint8 yystos[] =
 
 /* Like YYERROR except do call yyerror.  This remains here temporarily
    to ease the transition to the new meaning of YYERROR, for GCC.
-   Once GCC version 2 has supplanted version 1, this can go.  However,
-   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
-   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
-   discussed.  */
+   Once GCC version 2 has supplanted version 1, this can go.  */
 
 #define YYFAIL		goto yyerrlab
-#if defined YYFAIL
-  /* This is here to suppress warnings from the GCC cpp's
-     -Wunused-macros.  Normally we don't worry about that warning, but
-     some users do, and we want to make it easy for users to remove
-     YYFAIL uses, which will produce warnings from Bison 2.5.  */
-#endif
 
 #define YYRECOVERING()  (!!yyerrstatus)
 
@@ -1156,6 +1130,7 @@ do								\
     {								\
       yychar = (Token);						\
       yylval = (Value);						\
+      yytoken = YYTRANSLATE (yychar);				\
       YYPOPSTACK (1);						\
       goto yybackup;						\
     }								\
@@ -1197,10 +1172,19 @@ while (YYID (0))
 #endif
 
 
-/* This macro is provided for backward compatibility. */
+/* YY_LOCATION_PRINT -- Print the location on the stream.
+   This macro was not mandated originally: define only if we know
+   we won't break user code: when these are the locations we know.  */
 
 #ifndef YY_LOCATION_PRINT
-# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
+# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
+#  define YY_LOCATION_PRINT(File, Loc)			\
+     fprintf (File, "%d.%d-%d.%d",			\
+	      (Loc).first_line, (Loc).first_column,	\
+	      (Loc).last_line,  (Loc).last_column)
+# else
+#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
+# endif
 #endif
 
 
@@ -1304,20 +1288,17 @@ yy_symbol_print (yyoutput, yytype, yyvaluep)
 #if (defined __STDC__ || defined __C99__FUNC__ \
      || defined __cplusplus || defined _MSC_VER)
 static void
-yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
+yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
 #else
 static void
-yy_stack_print (yybottom, yytop)
-    yytype_int16 *yybottom;
-    yytype_int16 *yytop;
+yy_stack_print (bottom, top)
+    yytype_int16 *bottom;
+    yytype_int16 *top;
 #endif
 {
   YYFPRINTF (stderr, "Stack now");
-  for (; yybottom <= yytop; yybottom++)
-    {
-      int yybot = *yybottom;
-      YYFPRINTF (stderr, " %d", yybot);
-    }
+  for (; bottom <= top; ++bottom)
+    YYFPRINTF (stderr, " %d", *bottom);
   YYFPRINTF (stderr, "\n");
 }
 
@@ -1351,11 +1332,11 @@ yy_reduce_print (yyvsp, yyrule)
   /* The symbols being reduced.  */
   for (yyi = 0; yyi < yynrhs; yyi++)
     {
-      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
+      fprintf (stderr, "   $%d = ", yyi + 1);
       yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
 		       &(yyvsp[(yyi + 1) - (yynrhs)])
 		       		       );
-      YYFPRINTF (stderr, "\n");
+      fprintf (stderr, "\n");
     }
 }
 
@@ -1392,6 +1373,7 @@ int yydebug;
 # define YYMAXDEPTH 10000
 #endif
 
+
 
 #if YYERROR_VERBOSE
 
@@ -1494,142 +1476,115 @@ yytnamerr (char *yyres, const char *yystr)
 }
 # endif
 
-/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
-   about the unexpected token YYTOKEN for the state stack whose top is
-   YYSSP.
-
-   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
-   not large enough to hold the message.  In that case, also set
-   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
-   required number of bytes is too large to store.  */
-static int
-yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
-                yytype_int16 *yyssp, int yytoken)
+/* Copy into YYRESULT an error message about the unexpected token
+   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
+   including the terminating null byte.  If YYRESULT is null, do not
+   copy anything; just return the number of bytes that would be
+   copied.  As a special case, return 0 if an ordinary "syntax error"
+   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
+   size calculation.  */
+static YYSIZE_T
+yysyntax_error (char *yyresult, int yystate, int yychar)
 {
-  YYSIZE_T yysize0 = yytnamerr (0, yytname[yytoken]);
-  YYSIZE_T yysize = yysize0;
-  YYSIZE_T yysize1;
-  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
-  /* Internationalized format string. */
-  const char *yyformat = 0;
-  /* Arguments of yyformat. */
-  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
-  /* Number of reported tokens (one for the "unexpected", one per
-     "expected"). */
-  int yycount = 0;
-
-  /* There are many possibilities here to consider:
-     - Assume YYFAIL is not used.  It's too flawed to consider.  See
-       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
-       for details.  YYERROR is fine as it does not invoke this
-       function.
-     - If this state is a consistent state with a default action, then
-       the only way this function was invoked is if the default action
-       is an error action.  In that case, don't check for expected
-       tokens because there are none.
-     - The only way there can be no lookahead present (in yychar) is if
-       this state is a consistent state with a default action.  Thus,
-       detecting the absence of a lookahead is sufficient to determine
-       that there is no unexpected or expected token to report.  In that
-       case, just report a simple "syntax error".
-     - Don't assume there isn't a lookahead just because this state is a
-       consistent state with a default action.  There might have been a
-       previous inconsistent state, consistent state with a non-default
-       action, or user semantic action that manipulated yychar.
-     - Of course, the expected token list depends on states to have
-       correct lookahead information, and it depends on the parser not
-       to perform extra reductions after fetching a lookahead from the
-       scanner and before detecting a syntax error.  Thus, state merging
-       (from LALR or IELR) and default reductions corrupt the expected
-       token list.  However, the list is correct for canonical LR with
-       one exception: it will still contain any token that will not be
-       accepted due to an error action in a later state.
-  */
-  if (yytoken != YYEMPTY)
-    {
-      int yyn = yypact[*yyssp];
-      yyarg[yycount++] = yytname[yytoken];
-      if (!yypact_value_is_default (yyn))
-        {
-          /* Start YYX at -YYN if negative to avoid negative indexes in
-             YYCHECK.  In other words, skip the first -YYN actions for
-             this state because they are default actions.  */
-          int yyxbegin = yyn < 0 ? -yyn : 0;
-          /* Stay within bounds of both yycheck and yytname.  */
-          int yychecklim = YYLAST - yyn + 1;
-          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
-          int yyx;
-
-          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
-            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
-                && !yytable_value_is_error (yytable[yyx + yyn]))
-              {
-                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
-                  {
-                    yycount = 1;
-                    yysize = yysize0;
-                    break;
-                  }
-                yyarg[yycount++] = yytname[yyx];
-                yysize1 = yysize + yytnamerr (0, yytname[yyx]);
-                if (! (yysize <= yysize1
-                       && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
-                  return 2;
-                yysize = yysize1;
-              }
-        }
-    }
+  int yyn = yypact[yystate];
 
-  switch (yycount)
-    {
-# define YYCASE_(N, S)                      \
-      case N:                               \
-        yyformat = S;                       \
-      break
-      YYCASE_(0, YY_("syntax error"));
-      YYCASE_(1, YY_("syntax error, unexpected %s"));
-      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
-      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
-      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
-      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
-# undef YYCASE_
-    }
+  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
+    return 0;
+  else
+    {
+      int yytype = YYTRANSLATE (yychar);
+      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
+      YYSIZE_T yysize = yysize0;
+      YYSIZE_T yysize1;
+      int yysize_overflow = 0;
+      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
+      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
+      int yyx;
+
+# if 0
+      /* This is so xgettext sees the translatable formats that are
+	 constructed on the fly.  */
+      YY_("syntax error, unexpected %s");
+      YY_("syntax error, unexpected %s, expecting %s");
+      YY_("syntax error, unexpected %s, expecting %s or %s");
+      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
+      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
+# endif
+      char *yyfmt;
+      char const *yyf;
+      static char const yyunexpected[] = "syntax error, unexpected %s";
+      static char const yyexpecting[] = ", expecting %s";
+      static char const yyor[] = " or %s";
+      char yyformat[sizeof yyunexpected
+		    + sizeof yyexpecting - 1
+		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
+		       * (sizeof yyor - 1))];
+      char const *yyprefix = yyexpecting;
+
+      /* Start YYX at -YYN if negative to avoid negative indexes in
+	 YYCHECK.  */
+      int yyxbegin = yyn < 0 ? -yyn : 0;
+
+      /* Stay within bounds of both yycheck and yytname.  */
+      int yychecklim = YYLAST - yyn + 1;
+      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
+      int yycount = 1;
+
+      yyarg[0] = yytname[yytype];
+      yyfmt = yystpcpy (yyformat, yyunexpected);
+
+      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
+	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
+	  {
+	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
+	      {
+		yycount = 1;
+		yysize = yysize0;
+		yyformat[sizeof yyunexpected - 1] = '\0';
+		break;
+	      }
+	    yyarg[yycount++] = yytname[yyx];
+	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
+	    yysize_overflow |= (yysize1 < yysize);
+	    yysize = yysize1;
+	    yyfmt = yystpcpy (yyfmt, yyprefix);
+	    yyprefix = yyor;
+	  }
 
-  yysize1 = yysize + yystrlen (yyformat);
-  if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
-    return 2;
-  yysize = yysize1;
+      yyf = YY_(yyformat);
+      yysize1 = yysize + yystrlen (yyf);
+      yysize_overflow |= (yysize1 < yysize);
+      yysize = yysize1;
 
-  if (*yymsg_alloc < yysize)
-    {
-      *yymsg_alloc = 2 * yysize;
-      if (! (yysize <= *yymsg_alloc
-             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
-        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
-      return 1;
-    }
+      if (yysize_overflow)
+	return YYSIZE_MAXIMUM;
 
-  /* Avoid sprintf, as that infringes on the user's name space.
-     Don't have undefined behavior even if the translation
-     produced a string with the wrong number of "%s"s.  */
-  {
-    char *yyp = *yymsg;
-    int yyi = 0;
-    while ((*yyp = *yyformat) != '\0')
-      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
-        {
-          yyp += yytnamerr (yyp, yyarg[yyi++]);
-          yyformat += 2;
-        }
-      else
-        {
-          yyp++;
-          yyformat++;
-        }
-  }
-  return 0;
+      if (yyresult)
+	{
+	  /* Avoid sprintf, as that infringes on the user's name space.
+	     Don't have undefined behavior even if the translation
+	     produced a string with the wrong number of "%s"s.  */
+	  char *yyp = yyresult;
+	  int yyi = 0;
+	  while ((*yyp = *yyf) != '\0')
+	    {
+	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
+		{
+		  yyp += yytnamerr (yyp, yyarg[yyi++]);
+		  yyf += 2;
+		}
+	      else
+		{
+		  yyp++;
+		  yyf++;
+		}
+	    }
+	}
+      return yysize;
+    }
 }
 #endif /* YYERROR_VERBOSE */
+
 
 /*-----------------------------------------------.
 | Release the memory associated to this symbol.  |
@@ -1661,9 +1616,10 @@ yydestruct (yymsg, yytype, yyvaluep)
 	break;
     }
 }
-
+
 
 /* Prevent warnings from -Wmissing-prototypes.  */
+
 #ifdef YYPARSE_PARAM
 #if defined __STDC__ || defined __cplusplus
 int yyparse (void *YYPARSE_PARAM);
@@ -1679,16 +1635,18 @@ int yyparse ();
 #endif /* ! YYPARSE_PARAM */
 
 
-/* The lookahead symbol.  */
+
+/* The look-ahead symbol.  */
 int yychar;
 
-/* The semantic value of the lookahead symbol.  */
+/* The semantic value of the look-ahead symbol.  */
 YYSTYPE yylval;
 
 /* Number of syntax errors so far.  */
 int yynerrs;
 
 
+
 /*----------.
 | yyparse.  |
 `----------*/
@@ -1715,37 +1673,14 @@ yyparse ()
 #endif
 #endif
 {
-    int yystate;
-    /* Number of tokens to shift before error messages enabled.  */
-    int yyerrstatus;
-
-    /* The stacks and their tools:
-       `yyss': related to states.
-       `yyvs': related to semantic values.
-
-       Refer to the stacks thru separate pointers, to allow yyoverflow
-       to reallocate them elsewhere.  */
-
-    /* The state stack.  */
-    yytype_int16 yyssa[YYINITDEPTH];
-    yytype_int16 *yyss;
-    yytype_int16 *yyssp;
-
-    /* The semantic value stack.  */
-    YYSTYPE yyvsa[YYINITDEPTH];
-    YYSTYPE *yyvs;
-    YYSTYPE *yyvsp;
-
-    YYSIZE_T yystacksize;
-
+  
+  int yystate;
   int yyn;
   int yyresult;
-  /* Lookahead token as an internal (translated) token number.  */
-  int yytoken;
-  /* The variables used to return semantic value and location from the
-     action routines.  */
-  YYSTYPE yyval;
-
+  /* Number of tokens to shift before error messages enabled.  */
+  int yyerrstatus;
+  /* Look-ahead token as an internal (translated) token number.  */
+  int yytoken = 0;
 #if YYERROR_VERBOSE
   /* Buffer for error messages, and its allocated size.  */
   char yymsgbuf[128];
@@ -1753,28 +1688,51 @@ yyparse ()
   YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
 #endif
 
+  /* Three stacks and their tools:
+     `yyss': related to states,
+     `yyvs': related to semantic values,
+     `yyls': related to locations.
+
+     Refer to the stacks thru separate pointers, to allow yyoverflow
+     to reallocate them elsewhere.  */
+
+  /* The state stack.  */
+  yytype_int16 yyssa[YYINITDEPTH];
+  yytype_int16 *yyss = yyssa;
+  yytype_int16 *yyssp;
+
+  /* The semantic value stack.  */
+  YYSTYPE yyvsa[YYINITDEPTH];
+  YYSTYPE *yyvs = yyvsa;
+  YYSTYPE *yyvsp;
+
+
+
 #define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))
 
+  YYSIZE_T yystacksize = YYINITDEPTH;
+
+  /* The variables used to return semantic value and location from the
+     action routines.  */
+  YYSTYPE yyval;
+
+
   /* The number of symbols on the RHS of the reduced rule.
      Keep to zero when no symbol should be popped.  */
   int yylen = 0;
 
-  yytoken = 0;
-  yyss = yyssa;
-  yyvs = yyvsa;
-  yystacksize = YYINITDEPTH;
-
   YYDPRINTF ((stderr, "Starting parse\n"));
 
   yystate = 0;
   yyerrstatus = 0;
   yynerrs = 0;
-  yychar = YYEMPTY; /* Cause a token to be read.  */
+  yychar = YYEMPTY;		/* Cause a token to be read.  */
 
   /* Initialize stack pointers.
      Waste one element of value and location stack
      so that they stay on the same level as the state stack.
      The wasted elements are never initialized.  */
+
   yyssp = yyss;
   yyvsp = yyvs;
 
@@ -1804,6 +1762,7 @@ yyparse ()
 	YYSTYPE *yyvs1 = yyvs;
 	yytype_int16 *yyss1 = yyss;
 
+
 	/* Each stack pointer address is followed by the size of the
 	   data in use in that stack, in bytes.  This used to be a
 	   conditional around just the two extra args, but that might
@@ -1811,6 +1770,7 @@ yyparse ()
 	yyoverflow (YY_("memory exhausted"),
 		    &yyss1, yysize * sizeof (*yyssp),
 		    &yyvs1, yysize * sizeof (*yyvsp),
+
 		    &yystacksize);
 
 	yyss = yyss1;
@@ -1833,8 +1793,9 @@ yyparse ()
 	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
 	if (! yyptr)
 	  goto yyexhaustedlab;
-	YYSTACK_RELOCATE (yyss_alloc, yyss);
-	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
+	YYSTACK_RELOCATE (yyss);
+	YYSTACK_RELOCATE (yyvs);
+
 #  undef YYSTACK_RELOCATE
 	if (yyss1 != yyssa)
 	  YYSTACK_FREE (yyss1);
@@ -1845,6 +1806,7 @@ yyparse ()
       yyssp = yyss + yysize - 1;
       yyvsp = yyvs + yysize - 1;
 
+
       YYDPRINTF ((stderr, "Stack size increased to %lu\n",
 		  (unsigned long int) yystacksize));
 
@@ -1854,9 +1816,6 @@ yyparse ()
 
   YYDPRINTF ((stderr, "Entering state %d\n", yystate));
 
-  if (yystate == YYFINAL)
-    YYACCEPT;
-
   goto yybackup;
 
 /*-----------.
@@ -1865,16 +1824,16 @@ yyparse ()
 yybackup:
 
   /* Do appropriate processing given the current state.  Read a
-     lookahead token if we need one and don't already have one.  */
+     look-ahead token if we need one and don't already have one.  */
 
-  /* First try to decide what to do without reference to lookahead token.  */
+  /* First try to decide what to do without reference to look-ahead token.  */
   yyn = yypact[yystate];
-  if (yypact_value_is_default (yyn))
+  if (yyn == YYPACT_NINF)
     goto yydefault;
 
-  /* Not known => get a lookahead token if don't already have one.  */
+  /* Not known => get a look-ahead token if don't already have one.  */
 
-  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
+  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
   if (yychar == YYEMPTY)
     {
       YYDPRINTF ((stderr, "Reading a token: "));
@@ -1900,22 +1859,26 @@ yybackup:
   yyn = yytable[yyn];
   if (yyn <= 0)
     {
-      if (yytable_value_is_error (yyn))
-        goto yyerrlab;
+      if (yyn == 0 || yyn == YYTABLE_NINF)
+	goto yyerrlab;
       yyn = -yyn;
       goto yyreduce;
     }
 
+  if (yyn == YYFINAL)
+    YYACCEPT;
+
   /* Count tokens shifted since error; after three, turn off error
      status.  */
   if (yyerrstatus)
     yyerrstatus--;
 
-  /* Shift the lookahead token.  */
+  /* Shift the look-ahead token.  */
   YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
 
-  /* Discard the shifted token.  */
-  yychar = YYEMPTY;
+  /* Discard the shifted token unless it is eof.  */
+  if (yychar != YYEOF)
+    yychar = YYEMPTY;
 
   yystate = yyn;
   *++yyvsp = yylval;
@@ -1955,40 +1918,26 @@ yyreduce:
   switch (yyn)
     {
         case 4:
-
-/* Line 1806 of yacc.c  */
 #line 71 "a.y"
     {
-		if((yyvsp[(1) - (2)].sym)->value != pc)
-			yyerror("redeclaration of %s", (yyvsp[(1) - (2)].sym)->name);
-		(yyvsp[(1) - (2)].sym)->value = pc;
-	}
-    break;
-
-  case 6:
-
-/* Line 1806 of yacc.c  */
-#line 78 "a.y"
-    {
+		(yyvsp[(1) - (2)].sym) = labellookup((yyvsp[(1) - (2)].sym));
+		if((yyvsp[(1) - (2)].sym)->type == LLAB && (yyvsp[(1) - (2)].sym)->value != pc)
+			yyerror("redeclaration of %s", (yyvsp[(1) - (2)].sym)->labelname);
 		(yyvsp[(1) - (2)].sym)->type = LLAB;
 		(yyvsp[(1) - (2)].sym)->value = pc;
 	}
     break;
 
-  case 8:
-
-/* Line 1806 of yacc.c  */
-#line 84 "a.y"
+  case 6:
+#line 80 "a.y"
     {
 		(yyvsp[(1) - (4)].sym)->type = LVAR;
 		(yyvsp[(1) - (4)].sym)->value = (yyvsp[(3) - (4)].lval);
 	}
     break;
 
-  case 9:
-
-/* Line 1806 of yacc.c  */
-#line 89 "a.y"
+  case 7:
+#line 85 "a.y"
     {
 		if((yyvsp[(1) - (4)].sym)->value != (yyvsp[(3) - (4)].lval))
 			yyerror("redeclaration of %s", (yyvsp[(1) - (4)].sym)->name);
@@ -1996,604 +1945,470 @@ yyreduce:
 	}
     break;
 
-  case 10:
-
-/* Line 1806 of yacc.c  */
-#line 95 "a.y"
+  case 8:
+#line 91 "a.y"
     {
 		nosched = (yyvsp[(1) - (2)].lval);
 	}
     break;
 
-  case 14:
+  case 12:
+#line 103 "a.y"
+    {
+		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
+	}
+    break;
 
-/* Line 1806 of yacc.c  */
+  case 13:
 #line 107 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
-  case 15:
-
-/* Line 1806 of yacc.c  */
+  case 14:
 #line 111 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
-  case 16:
-
-/* Line 1806 of yacc.c  */
+  case 15:
 #line 115 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
-  case 17:
-
-/* Line 1806 of yacc.c  */
+  case 16:
 #line 119 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
-  case 18:
-
-/* Line 1806 of yacc.c  */
+  case 17:
 #line 123 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
-  case 19:
+  case 18:
+#line 130 "a.y"
+    {
+		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
+	}
+    break;
 
-/* Line 1806 of yacc.c  */
-#line 127 "a.y"
+  case 19:
+#line 134 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 20:
-
-/* Line 1806 of yacc.c  */
-#line 134 "a.y"
+#line 138 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 21:
-
-/* Line 1806 of yacc.c  */
-#line 138 "a.y"
+#line 142 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 22:
-
-/* Line 1806 of yacc.c  */
-#line 142 "a.y"
+#line 146 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 23:
-
-/* Line 1806 of yacc.c  */
-#line 146 "a.y"
+#line 150 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 24:
-
-/* Line 1806 of yacc.c  */
-#line 150 "a.y"
+#line 157 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 25:
-
-/* Line 1806 of yacc.c  */
-#line 154 "a.y"
+#line 161 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 26:
-
-/* Line 1806 of yacc.c  */
-#line 161 "a.y"
+#line 165 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 27:
-
-/* Line 1806 of yacc.c  */
-#line 165 "a.y"
+#line 169 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 28:
-
-/* Line 1806 of yacc.c  */
-#line 169 "a.y"
+#line 176 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 29:
-
-/* Line 1806 of yacc.c  */
-#line 173 "a.y"
+#line 180 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 30:
-
-/* Line 1806 of yacc.c  */
-#line 180 "a.y"
+#line 187 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 31:
-
-/* Line 1806 of yacc.c  */
-#line 184 "a.y"
+#line 191 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 32:
-
-/* Line 1806 of yacc.c  */
-#line 191 "a.y"
+#line 195 "a.y"
     {
-		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
+		outgcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), NREG, &(yyvsp[(4) - (6)].addr), &(yyvsp[(6) - (6)].addr));
 	}
     break;
 
   case 33:
-
-/* Line 1806 of yacc.c  */
-#line 195 "a.y"
+#line 199 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 34:
-
-/* Line 1806 of yacc.c  */
-#line 199 "a.y"
+#line 203 "a.y"
     {
-		outgcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), NREG, &(yyvsp[(4) - (6)].addr), &(yyvsp[(6) - (6)].addr));
+		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 35:
-
-/* Line 1806 of yacc.c  */
-#line 203 "a.y"
+#line 207 "a.y"
     {
-		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
+		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), (yyvsp[(4) - (4)].lval), &nullgen);
 	}
     break;
 
   case 36:
-
-/* Line 1806 of yacc.c  */
-#line 207 "a.y"
+#line 214 "a.y"
     {
-		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
+		outgcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), NREG, &(yyvsp[(4) - (6)].addr), &(yyvsp[(6) - (6)].addr));
 	}
     break;
 
   case 37:
-
-/* Line 1806 of yacc.c  */
-#line 211 "a.y"
+#line 218 "a.y"
     {
-		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), (yyvsp[(4) - (4)].lval), &nullgen);
+		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 38:
-
-/* Line 1806 of yacc.c  */
-#line 218 "a.y"
+#line 222 "a.y"
     {
-		outgcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), NREG, &(yyvsp[(4) - (6)].addr), &(yyvsp[(6) - (6)].addr));
+		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 39:
-
-/* Line 1806 of yacc.c  */
-#line 222 "a.y"
+#line 232 "a.y"
     {
-		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
+		outcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), (yyvsp[(4) - (6)].lval), &(yyvsp[(6) - (6)].addr));
 	}
     break;
 
   case 40:
-
-/* Line 1806 of yacc.c  */
-#line 226 "a.y"
+#line 236 "a.y"
     {
-		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
+		outcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), (yyvsp[(4) - (6)].lval), &(yyvsp[(6) - (6)].addr));
 	}
     break;
 
   case 41:
-
-/* Line 1806 of yacc.c  */
-#line 236 "a.y"
+#line 240 "a.y"
     {
-		outcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), (yyvsp[(4) - (6)].lval), &(yyvsp[(6) - (6)].addr));
+		outgcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), NREG, &(yyvsp[(4) - (6)].addr), &(yyvsp[(6) - (6)].addr));
 	}
     break;
 
   case 42:
-
-/* Line 1806 of yacc.c  */
-#line 240 "a.y"
+#line 244 "a.y"
     {
-		outcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), (yyvsp[(4) - (6)].lval), &(yyvsp[(6) - (6)].addr));
+		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 43:
-
-/* Line 1806 of yacc.c  */
-#line 244 "a.y"
+#line 248 "a.y"
     {
-		outgcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), NREG, &(yyvsp[(4) - (6)].addr), &(yyvsp[(6) - (6)].addr));
+		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 44:
-
-/* Line 1806 of yacc.c  */
-#line 248 "a.y"
+#line 252 "a.y"
     {
-		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
+		outcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), (yyvsp[(4) - (6)].lval), &(yyvsp[(6) - (6)].addr));
 	}
     break;
 
   case 45:
-
-/* Line 1806 of yacc.c  */
-#line 252 "a.y"
+#line 256 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 46:
-
-/* Line 1806 of yacc.c  */
-#line 256 "a.y"
+#line 260 "a.y"
     {
 		outcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), (yyvsp[(4) - (6)].lval), &(yyvsp[(6) - (6)].addr));
 	}
     break;
 
   case 47:
-
-/* Line 1806 of yacc.c  */
-#line 260 "a.y"
+#line 264 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 48:
-
-/* Line 1806 of yacc.c  */
-#line 264 "a.y"
+#line 268 "a.y"
     {
 		outcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), (yyvsp[(4) - (6)].lval), &(yyvsp[(6) - (6)].addr));
 	}
     break;
 
   case 49:
-
-/* Line 1806 of yacc.c  */
-#line 268 "a.y"
+#line 272 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 50:
-
-/* Line 1806 of yacc.c  */
-#line 272 "a.y"
+#line 276 "a.y"
     {
-		outcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), (yyvsp[(4) - (6)].lval), &(yyvsp[(6) - (6)].addr));
+		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 51:
-
-/* Line 1806 of yacc.c  */
-#line 276 "a.y"
+#line 280 "a.y"
     {
-		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
+		outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr), NREG, &(yyvsp[(2) - (2)].addr));
 	}
     break;
 
   case 52:
-
-/* Line 1806 of yacc.c  */
-#line 280 "a.y"
+#line 287 "a.y"
     {
-		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
+		outcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), (yyvsp[(4) - (6)].lval), &(yyvsp[(6) - (6)].addr));
 	}
     break;
 
   case 53:
-
-/* Line 1806 of yacc.c  */
-#line 284 "a.y"
+#line 294 "a.y"
     {
-		outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr), NREG, &(yyvsp[(2) - (2)].addr));
+		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 54:
-
-/* Line 1806 of yacc.c  */
-#line 291 "a.y"
+#line 298 "a.y"
     {
-		outcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), (yyvsp[(4) - (6)].lval), &(yyvsp[(6) - (6)].addr));
+		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 55:
-
-/* Line 1806 of yacc.c  */
-#line 298 "a.y"
+#line 305 "a.y"
     {
-		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
+		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), (yyvsp[(4) - (4)].addr).reg, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 56:
-
-/* Line 1806 of yacc.c  */
-#line 302 "a.y"
+#line 309 "a.y"
     {
-		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
+		outcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), (yyvsp[(4) - (6)].lval), &(yyvsp[(6) - (6)].addr));
 	}
     break;
 
   case 57:
-
-/* Line 1806 of yacc.c  */
-#line 309 "a.y"
+#line 317 "a.y"
     {
-		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), (yyvsp[(4) - (4)].addr).reg, &(yyvsp[(4) - (4)].addr));
+		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 58:
-
-/* Line 1806 of yacc.c  */
-#line 313 "a.y"
-    {
-		outcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), (yyvsp[(4) - (6)].lval), &(yyvsp[(6) - (6)].addr));
-	}
-    break;
-
-  case 59:
-
-/* Line 1806 of yacc.c  */
 #line 321 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
-  case 60:
-
-/* Line 1806 of yacc.c  */
+  case 59:
 #line 325 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
-  case 61:
-
-/* Line 1806 of yacc.c  */
+  case 60:
 #line 329 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
-  case 62:
-
-/* Line 1806 of yacc.c  */
+  case 61:
 #line 333 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
-  case 63:
-
-/* Line 1806 of yacc.c  */
+  case 62:
 #line 337 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
-  case 64:
-
-/* Line 1806 of yacc.c  */
+  case 63:
 #line 341 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
-  case 65:
-
-/* Line 1806 of yacc.c  */
+  case 64:
 #line 345 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
-  case 66:
-
-/* Line 1806 of yacc.c  */
-#line 349 "a.y"
+  case 65:
+#line 354 "a.y"
     {
-		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
+		outcode((yyvsp[(1) - (2)].lval), &nullgen, NREG, &(yyvsp[(2) - (2)].addr));
 	}
     break;
 
-  case 67:
-
-/* Line 1806 of yacc.c  */
+  case 66:
 #line 358 "a.y"
     {
 		outcode((yyvsp[(1) - (2)].lval), &nullgen, NREG, &(yyvsp[(2) - (2)].addr));
 	}
     break;
 
-  case 68:
-
-/* Line 1806 of yacc.c  */
+  case 67:
 #line 362 "a.y"
     {
-		outcode((yyvsp[(1) - (2)].lval), &nullgen, NREG, &(yyvsp[(2) - (2)].addr));
+		outcode((yyvsp[(1) - (4)].lval), &nullgen, NREG, &(yyvsp[(3) - (4)].addr));
 	}
     break;
 
-  case 69:
-
-/* Line 1806 of yacc.c  */
+  case 68:
 #line 366 "a.y"
     {
-		outcode((yyvsp[(1) - (4)].lval), &nullgen, NREG, &(yyvsp[(3) - (4)].addr));
+		outcode((yyvsp[(1) - (3)].lval), &nullgen, NREG, &(yyvsp[(3) - (3)].addr));
 	}
     break;
 
-  case 70:
-
-/* Line 1806 of yacc.c  */
+  case 69:
 #line 370 "a.y"
     {
 		outcode((yyvsp[(1) - (3)].lval), &nullgen, NREG, &(yyvsp[(3) - (3)].addr));
 	}
     break;
 
-  case 71:
-
-/* Line 1806 of yacc.c  */
+  case 70:
 #line 374 "a.y"
     {
-		outcode((yyvsp[(1) - (3)].lval), &nullgen, NREG, &(yyvsp[(3) - (3)].addr));
+		outcode((yyvsp[(1) - (5)].lval), &nullgen, NREG, &(yyvsp[(4) - (5)].addr));
 	}
     break;
 
-  case 72:
-
-/* Line 1806 of yacc.c  */
+  case 71:
 #line 378 "a.y"
     {
-		outcode((yyvsp[(1) - (5)].lval), &nullgen, NREG, &(yyvsp[(4) - (5)].addr));
+		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
-  case 73:
-
-/* Line 1806 of yacc.c  */
+  case 72:
 #line 382 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
-  case 74:
-
-/* Line 1806 of yacc.c  */
+  case 73:
 #line 386 "a.y"
     {
-		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
+		outcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), NREG, &(yyvsp[(5) - (6)].addr));
 	}
     break;
 
-  case 75:
-
-/* Line 1806 of yacc.c  */
+  case 74:
 #line 390 "a.y"
     {
-		outcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), NREG, &(yyvsp[(5) - (6)].addr));
+		outcode((yyvsp[(1) - (4)].lval), &nullgen, (yyvsp[(2) - (4)].lval), &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
-  case 76:
-
-/* Line 1806 of yacc.c  */
+  case 75:
 #line 394 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &nullgen, (yyvsp[(2) - (4)].lval), &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
-  case 77:
-
-/* Line 1806 of yacc.c  */
+  case 76:
 #line 398 "a.y"
-    {
-		outcode((yyvsp[(1) - (4)].lval), &nullgen, (yyvsp[(2) - (4)].lval), &(yyvsp[(4) - (4)].addr));
-	}
-    break;
-
-  case 78:
-
-/* Line 1806 of yacc.c  */
-#line 402 "a.y"
     {
 		outcode((yyvsp[(1) - (6)].lval), &nullgen, (yyvsp[(2) - (6)].lval), &(yyvsp[(5) - (6)].addr));
 	}
     break;
 
-  case 79:
-
-/* Line 1806 of yacc.c  */
-#line 406 "a.y"
+  case 77:
+#line 402 "a.y"
     {
 		Addr g;
 		g = nullgen;
@@ -2603,10 +2418,8 @@ yyreduce:
 	}
     break;
 
-  case 80:
-
-/* Line 1806 of yacc.c  */
-#line 414 "a.y"
+  case 78:
+#line 410 "a.y"
     {
 		Addr g;
 		g = nullgen;
@@ -2616,10 +2429,8 @@ yyreduce:
 	}
     break;
 
-  case 81:
-
-/* Line 1806 of yacc.c  */
-#line 422 "a.y"
+  case 79:
+#line 418 "a.y"
     {
 		Addr g;
 		g = nullgen;
@@ -2629,325 +2440,253 @@ yyreduce:
 	}
     break;
 
-  case 82:
-
-/* Line 1806 of yacc.c  */
-#line 433 "a.y"
+  case 80:
+#line 429 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), (yyvsp[(4) - (4)].lval), &nullgen);
 	}
     break;
 
-  case 83:
-
-/* Line 1806 of yacc.c  */
-#line 437 "a.y"
+  case 81:
+#line 433 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), (yyvsp[(4) - (4)].lval), &nullgen);
 	}
     break;
 
-  case 84:
-
-/* Line 1806 of yacc.c  */
-#line 441 "a.y"
+  case 82:
+#line 437 "a.y"
     {
 		outcode((yyvsp[(1) - (3)].lval), &(yyvsp[(2) - (3)].addr), NREG, &nullgen);
 	}
     break;
 
-  case 85:
-
-/* Line 1806 of yacc.c  */
-#line 445 "a.y"
+  case 83:
+#line 441 "a.y"
     {
 		outcode((yyvsp[(1) - (2)].lval), &nullgen, NREG, &nullgen);
 	}
     break;
 
-  case 86:
-
-/* Line 1806 of yacc.c  */
-#line 452 "a.y"
+  case 84:
+#line 448 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
-  case 87:
-
-/* Line 1806 of yacc.c  */
-#line 456 "a.y"
+  case 85:
+#line 452 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
-  case 88:
-
-/* Line 1806 of yacc.c  */
-#line 460 "a.y"
+  case 86:
+#line 456 "a.y"
     {
 		outcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), (yyvsp[(4) - (6)].addr).reg, &(yyvsp[(6) - (6)].addr));
 	}
     break;
 
-  case 89:
-
-/* Line 1806 of yacc.c  */
-#line 464 "a.y"
+  case 87:
+#line 460 "a.y"
     {
 		outgcode((yyvsp[(1) - (8)].lval), &(yyvsp[(2) - (8)].addr), (yyvsp[(4) - (8)].addr).reg, &(yyvsp[(6) - (8)].addr), &(yyvsp[(8) - (8)].addr));
 	}
     break;
 
-  case 90:
-
-/* Line 1806 of yacc.c  */
-#line 468 "a.y"
+  case 88:
+#line 464 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
-  case 91:
-
-/* Line 1806 of yacc.c  */
-#line 472 "a.y"
+  case 89:
+#line 468 "a.y"
     {
 		outcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), (yyvsp[(6) - (6)].addr).reg, &(yyvsp[(4) - (6)].addr));
 	}
     break;
 
-  case 92:
+  case 90:
+#line 475 "a.y"
+    {
+		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
+	}
+    break;
 
-/* Line 1806 of yacc.c  */
+  case 91:
 #line 479 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
-  case 93:
-
-/* Line 1806 of yacc.c  */
+  case 92:
 #line 483 "a.y"
     {
-		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
+		outcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), (yyvsp[(6) - (6)].addr).reg, &(yyvsp[(4) - (6)].addr));
 	}
     break;
 
-  case 94:
-
-/* Line 1806 of yacc.c  */
+  case 93:
 #line 487 "a.y"
     {
 		outcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), (yyvsp[(6) - (6)].addr).reg, &(yyvsp[(4) - (6)].addr));
 	}
     break;
 
-  case 95:
+  case 94:
+#line 494 "a.y"
+    {
+		outgcode((yyvsp[(1) - (8)].lval), &(yyvsp[(2) - (8)].addr), (yyvsp[(4) - (8)].addr).reg, &(yyvsp[(6) - (8)].addr), &(yyvsp[(8) - (8)].addr));
+	}
+    break;
 
-/* Line 1806 of yacc.c  */
-#line 491 "a.y"
+  case 95:
+#line 498 "a.y"
     {
-		outcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), (yyvsp[(6) - (6)].addr).reg, &(yyvsp[(4) - (6)].addr));
+		outgcode((yyvsp[(1) - (8)].lval), &(yyvsp[(2) - (8)].addr), (yyvsp[(4) - (8)].addr).reg, &(yyvsp[(6) - (8)].addr), &(yyvsp[(8) - (8)].addr));
 	}
     break;
 
   case 96:
-
-/* Line 1806 of yacc.c  */
-#line 498 "a.y"
+#line 502 "a.y"
     {
 		outgcode((yyvsp[(1) - (8)].lval), &(yyvsp[(2) - (8)].addr), (yyvsp[(4) - (8)].addr).reg, &(yyvsp[(6) - (8)].addr), &(yyvsp[(8) - (8)].addr));
 	}
     break;
 
   case 97:
-
-/* Line 1806 of yacc.c  */
-#line 502 "a.y"
+#line 506 "a.y"
     {
 		outgcode((yyvsp[(1) - (8)].lval), &(yyvsp[(2) - (8)].addr), (yyvsp[(4) - (8)].addr).reg, &(yyvsp[(6) - (8)].addr), &(yyvsp[(8) - (8)].addr));
 	}
     break;
 
   case 98:
-
-/* Line 1806 of yacc.c  */
-#line 506 "a.y"
+#line 513 "a.y"
     {
-		outgcode((yyvsp[(1) - (8)].lval), &(yyvsp[(2) - (8)].addr), (yyvsp[(4) - (8)].addr).reg, &(yyvsp[(6) - (8)].addr), &(yyvsp[(8) - (8)].addr));
+		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 99:
-
-/* Line 1806 of yacc.c  */
-#line 510 "a.y"
+#line 517 "a.y"
     {
-		outgcode((yyvsp[(1) - (8)].lval), &(yyvsp[(2) - (8)].addr), (yyvsp[(4) - (8)].addr).reg, &(yyvsp[(6) - (8)].addr), &(yyvsp[(8) - (8)].addr));
+		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 100:
-
-/* Line 1806 of yacc.c  */
-#line 517 "a.y"
+#line 525 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 101:
-
-/* Line 1806 of yacc.c  */
-#line 521 "a.y"
+#line 529 "a.y"
     {
-		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
+		outgcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), NREG, &(yyvsp[(4) - (6)].addr), &(yyvsp[(6) - (6)].addr));
 	}
     break;
 
   case 102:
-
-/* Line 1806 of yacc.c  */
-#line 529 "a.y"
+#line 533 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 103:
-
-/* Line 1806 of yacc.c  */
-#line 533 "a.y"
+#line 537 "a.y"
     {
 		outgcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), NREG, &(yyvsp[(4) - (6)].addr), &(yyvsp[(6) - (6)].addr));
 	}
     break;
 
   case 104:
-
-/* Line 1806 of yacc.c  */
-#line 537 "a.y"
+#line 541 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
   case 105:
-
-/* Line 1806 of yacc.c  */
-#line 541 "a.y"
-    {
-		outgcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), NREG, &(yyvsp[(4) - (6)].addr), &(yyvsp[(6) - (6)].addr));
-	}
-    break;
-
-  case 106:
-
-/* Line 1806 of yacc.c  */
 #line 545 "a.y"
     {
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
-  case 107:
-
-/* Line 1806 of yacc.c  */
+  case 106:
 #line 549 "a.y"
     {
-		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
+		outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr), NREG, &nullgen);
 	}
     break;
 
-  case 108:
-
-/* Line 1806 of yacc.c  */
-#line 553 "a.y"
+  case 107:
+#line 556 "a.y"
     {
-		outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr), NREG, &nullgen);
+		outcode((yyvsp[(1) - (2)].lval), &nullgen, NREG, &nullgen);
 	}
     break;
 
-  case 109:
-
-/* Line 1806 of yacc.c  */
+  case 108:
 #line 560 "a.y"
     {
-		outcode((yyvsp[(1) - (2)].lval), &nullgen, NREG, &nullgen);
+		outcode((yyvsp[(1) - (3)].lval), &(yyvsp[(2) - (3)].addr), NREG, &nullgen);
 	}
     break;
 
-  case 110:
-
-/* Line 1806 of yacc.c  */
+  case 109:
 #line 564 "a.y"
     {
 		outcode((yyvsp[(1) - (3)].lval), &(yyvsp[(2) - (3)].addr), NREG, &nullgen);
 	}
     break;
 
-  case 111:
-
-/* Line 1806 of yacc.c  */
+  case 110:
 #line 568 "a.y"
     {
-		outcode((yyvsp[(1) - (3)].lval), &(yyvsp[(2) - (3)].addr), NREG, &nullgen);
+		outcode((yyvsp[(1) - (3)].lval), &nullgen, NREG, &(yyvsp[(3) - (3)].addr));
 	}
     break;
 
-  case 112:
-
-/* Line 1806 of yacc.c  */
+  case 111:
 #line 572 "a.y"
     {
 		outcode((yyvsp[(1) - (3)].lval), &nullgen, NREG, &(yyvsp[(3) - (3)].addr));
 	}
     break;
 
-  case 113:
-
-/* Line 1806 of yacc.c  */
+  case 112:
 #line 576 "a.y"
-    {
-		outcode((yyvsp[(1) - (3)].lval), &nullgen, NREG, &(yyvsp[(3) - (3)].addr));
-	}
-    break;
-
-  case 114:
-
-/* Line 1806 of yacc.c  */
-#line 580 "a.y"
     {
 		outcode((yyvsp[(1) - (2)].lval), &(yyvsp[(2) - (2)].addr), NREG, &nullgen);
 	}
     break;
 
-  case 115:
-
-/* Line 1806 of yacc.c  */
-#line 587 "a.y"
+  case 113:
+#line 583 "a.y"
     {
 		outcode((yyvsp[(1) - (3)].lval), &(yyvsp[(2) - (3)].addr), NREG, &nullgen);
 	}
     break;
 
-  case 116:
-
-/* Line 1806 of yacc.c  */
-#line 591 "a.y"
+  case 114:
+#line 587 "a.y"
     {
 		outcode((yyvsp[(1) - (3)].lval), &(yyvsp[(2) - (3)].addr), NREG, &nullgen);
 	}
     break;
 
-  case 117:
-
-/* Line 1806 of yacc.c  */
-#line 598 "a.y"
+  case 115:
+#line 594 "a.y"
     {
 		if((yyvsp[(2) - (4)].addr).type != D_CONST || (yyvsp[(4) - (4)].addr).type != D_CONST)
 			yyerror("arguments to PCDATA must be integer constants");
@@ -2955,10 +2694,8 @@ yyreduce:
 	}
     break;
 
-  case 118:
-
-/* Line 1806 of yacc.c  */
-#line 607 "a.y"
+  case 116:
+#line 603 "a.y"
     {
 		if((yyvsp[(2) - (4)].addr).type != D_CONST)
 			yyerror("index for FUNCDATA must be integer constant");
@@ -2968,86 +2705,71 @@ yyreduce:
 	}
     break;
 
-  case 119:
-
-/* Line 1806 of yacc.c  */
-#line 618 "a.y"
+  case 117:
+#line 614 "a.y"
     {
 		outcode((yyvsp[(1) - (2)].lval), &nullgen, NREG, &nullgen);
 	}
     break;
 
-  case 120:
-
-/* Line 1806 of yacc.c  */
-#line 625 "a.y"
+  case 118:
+#line 621 "a.y"
     {
+		settext((yyvsp[(2) - (4)].addr).sym);
 		outcode((yyvsp[(1) - (4)].lval), &(yyvsp[(2) - (4)].addr), NREG, &(yyvsp[(4) - (4)].addr));
 	}
     break;
 
-  case 121:
-
-/* Line 1806 of yacc.c  */
-#line 629 "a.y"
+  case 119:
+#line 626 "a.y"
     {
+		settext((yyvsp[(2) - (6)].addr).sym);
 		(yyvsp[(6) - (6)].addr).offset &= 0xffffffffull;
 		(yyvsp[(6) - (6)].addr).offset |= (vlong)ArgsSizeUnknown << 32;
 		outcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), (yyvsp[(4) - (6)].lval), &(yyvsp[(6) - (6)].addr));
 	}
     break;
 
-  case 122:
-
-/* Line 1806 of yacc.c  */
-#line 635 "a.y"
+  case 120:
+#line 633 "a.y"
     {
+		settext((yyvsp[(2) - (8)].addr).sym);
 		(yyvsp[(6) - (8)].addr).offset &= 0xffffffffull;
 		(yyvsp[(6) - (8)].addr).offset |= ((yyvsp[(8) - (8)].lval) & 0xffffffffull) << 32;
 		outcode((yyvsp[(1) - (8)].lval), &(yyvsp[(2) - (8)].addr), (yyvsp[(4) - (8)].lval), &(yyvsp[(6) - (8)].addr));
 	}
     break;
 
-  case 123:
-
-/* Line 1806 of yacc.c  */
-#line 644 "a.y"
+  case 121:
+#line 643 "a.y"
     {
 		outcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), (yyvsp[(4) - (6)].lval), &(yyvsp[(6) - (6)].addr));
 	}
     break;
 
-  case 124:
-
-/* Line 1806 of yacc.c  */
-#line 648 "a.y"
+  case 122:
+#line 647 "a.y"
     {
 		outcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), (yyvsp[(4) - (6)].lval), &(yyvsp[(6) - (6)].addr));
 	}
     break;
 
-  case 125:
-
-/* Line 1806 of yacc.c  */
-#line 652 "a.y"
+  case 123:
+#line 651 "a.y"
     {
 		outcode((yyvsp[(1) - (6)].lval), &(yyvsp[(2) - (6)].addr), (yyvsp[(4) - (6)].lval), &(yyvsp[(6) - (6)].addr));
 	}
     break;
 
-  case 126:
-
-/* Line 1806 of yacc.c  */
-#line 659 "a.y"
+  case 124:
+#line 658 "a.y"
     {
 		outcode((yyvsp[(1) - (2)].lval), &nullgen, NREG, &nullgen);
 	}
     break;
 
-  case 127:
-
-/* Line 1806 of yacc.c  */
-#line 665 "a.y"
+  case 125:
+#line 664 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_BRANCH;
@@ -3055,34 +2777,20 @@ yyreduce:
 	}
     break;
 
-  case 128:
-
-/* Line 1806 of yacc.c  */
-#line 671 "a.y"
-    {
-		(yyval.addr) = nullgen;
-		if(pass == 2)
-			yyerror("undefined label: %s", (yyvsp[(1) - (2)].sym)->name);
-		(yyval.addr).type = D_BRANCH;
-		(yyval.addr).offset = (yyvsp[(2) - (2)].lval);
-	}
-    break;
-
-  case 129:
-
-/* Line 1806 of yacc.c  */
-#line 679 "a.y"
+  case 126:
+#line 670 "a.y"
     {
+		(yyvsp[(1) - (2)].sym) = labellookup((yyvsp[(1) - (2)].sym));
 		(yyval.addr) = nullgen;
+		if(pass == 2 && (yyvsp[(1) - (2)].sym)->type != LLAB)
+			yyerror("undefined label: %s", (yyvsp[(1) - (2)].sym)->labelname);
 		(yyval.addr).type = D_BRANCH;
 		(yyval.addr).offset = (yyvsp[(1) - (2)].sym)->value + (yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 130:
-
-/* Line 1806 of yacc.c  */
-#line 687 "a.y"
+  case 127:
+#line 681 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_REG;
@@ -3090,10 +2798,8 @@ yyreduce:
 	}
     break;
 
-  case 133:
-
-/* Line 1806 of yacc.c  */
-#line 699 "a.y"
+  case 130:
+#line 693 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_SPR;
@@ -3101,10 +2807,8 @@ yyreduce:
 	}
     break;
 
-  case 134:
-
-/* Line 1806 of yacc.c  */
-#line 707 "a.y"
+  case 131:
+#line 701 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_CREG;
@@ -3112,10 +2816,8 @@ yyreduce:
 	}
     break;
 
-  case 135:
-
-/* Line 1806 of yacc.c  */
-#line 715 "a.y"
+  case 132:
+#line 709 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_SPR;
@@ -3123,20 +2825,16 @@ yyreduce:
 	}
     break;
 
-  case 136:
-
-/* Line 1806 of yacc.c  */
-#line 723 "a.y"
+  case 133:
+#line 717 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_MSR;
 	}
     break;
 
-  case 137:
-
-/* Line 1806 of yacc.c  */
-#line 730 "a.y"
+  case 134:
+#line 724 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_SPR;
@@ -3144,10 +2842,8 @@ yyreduce:
 	}
     break;
 
-  case 138:
-
-/* Line 1806 of yacc.c  */
-#line 736 "a.y"
+  case 135:
+#line 730 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = (yyvsp[(1) - (4)].lval);
@@ -3155,10 +2851,8 @@ yyreduce:
 	}
     break;
 
-  case 140:
-
-/* Line 1806 of yacc.c  */
-#line 745 "a.y"
+  case 137:
+#line 739 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_FPSCR;
@@ -3166,10 +2860,8 @@ yyreduce:
 	}
     break;
 
-  case 141:
-
-/* Line 1806 of yacc.c  */
-#line 753 "a.y"
+  case 138:
+#line 747 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_FPSCR;
@@ -3177,10 +2869,8 @@ yyreduce:
 	}
     break;
 
-  case 142:
-
-/* Line 1806 of yacc.c  */
-#line 761 "a.y"
+  case 139:
+#line 755 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_FREG;
@@ -3188,10 +2878,8 @@ yyreduce:
 	}
     break;
 
-  case 143:
-
-/* Line 1806 of yacc.c  */
-#line 767 "a.y"
+  case 140:
+#line 761 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_FREG;
@@ -3199,10 +2887,8 @@ yyreduce:
 	}
     break;
 
-  case 144:
-
-/* Line 1806 of yacc.c  */
-#line 775 "a.y"
+  case 141:
+#line 769 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_CREG;
@@ -3210,10 +2896,8 @@ yyreduce:
 	}
     break;
 
-  case 145:
-
-/* Line 1806 of yacc.c  */
-#line 781 "a.y"
+  case 142:
+#line 775 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_CREG;
@@ -3221,10 +2905,8 @@ yyreduce:
 	}
     break;
 
-  case 146:
-
-/* Line 1806 of yacc.c  */
-#line 789 "a.y"
+  case 143:
+#line 783 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_REG;
@@ -3232,10 +2914,8 @@ yyreduce:
 	}
     break;
 
-  case 147:
-
-/* Line 1806 of yacc.c  */
-#line 797 "a.y"
+  case 144:
+#line 791 "a.y"
     {
 		int mb, me;
 		uint32 v;
@@ -3256,20 +2936,16 @@ yyreduce:
 	}
     break;
 
-  case 148:
-
-/* Line 1806 of yacc.c  */
-#line 818 "a.y"
+  case 145:
+#line 812 "a.y"
     {
 		(yyval.addr) = (yyvsp[(2) - (2)].addr);
 		(yyval.addr).type = D_CONST;
 	}
     break;
 
-  case 149:
-
-/* Line 1806 of yacc.c  */
-#line 823 "a.y"
+  case 146:
+#line 817 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_SCONST;
@@ -3277,10 +2953,8 @@ yyreduce:
 	}
     break;
 
-  case 150:
-
-/* Line 1806 of yacc.c  */
-#line 831 "a.y"
+  case 147:
+#line 825 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_FCONST;
@@ -3288,10 +2962,8 @@ yyreduce:
 	}
     break;
 
-  case 151:
-
-/* Line 1806 of yacc.c  */
-#line 837 "a.y"
+  case 148:
+#line 831 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_FCONST;
@@ -3299,10 +2971,8 @@ yyreduce:
 	}
     break;
 
-  case 152:
-
-/* Line 1806 of yacc.c  */
-#line 844 "a.y"
+  case 149:
+#line 838 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_CONST;
@@ -3310,10 +2980,8 @@ yyreduce:
 	}
     break;
 
-  case 154:
-
-/* Line 1806 of yacc.c  */
-#line 853 "a.y"
+  case 151:
+#line 847 "a.y"
     {
 		if((yyval.lval) < 0 || (yyval.lval) >= NREG)
 			print("register value out of range\n");
@@ -3321,10 +2989,8 @@ yyreduce:
 	}
     break;
 
-  case 155:
-
-/* Line 1806 of yacc.c  */
-#line 861 "a.y"
+  case 152:
+#line 855 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_OREG;
@@ -3333,10 +2999,8 @@ yyreduce:
 	}
     break;
 
-  case 156:
-
-/* Line 1806 of yacc.c  */
-#line 868 "a.y"
+  case 153:
+#line 862 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_OREG;
@@ -3346,10 +3010,8 @@ yyreduce:
 	}
     break;
 
-  case 158:
-
-/* Line 1806 of yacc.c  */
-#line 879 "a.y"
+  case 155:
+#line 873 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_OREG;
@@ -3358,10 +3020,8 @@ yyreduce:
 	}
     break;
 
-  case 159:
-
-/* Line 1806 of yacc.c  */
-#line 888 "a.y"
+  case 156:
+#line 882 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_OREG;
@@ -3371,10 +3031,8 @@ yyreduce:
 	}
     break;
 
-  case 160:
-
-/* Line 1806 of yacc.c  */
-#line 896 "a.y"
+  case 157:
+#line 890 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_OREG;
@@ -3384,10 +3042,8 @@ yyreduce:
 	}
     break;
 
-  case 161:
-
-/* Line 1806 of yacc.c  */
-#line 904 "a.y"
+  case 158:
+#line 898 "a.y"
     {
 		(yyval.addr) = nullgen;
 		(yyval.addr).type = D_OREG;
@@ -3397,185 +3053,137 @@ yyreduce:
 	}
     break;
 
-  case 164:
-
-/* Line 1806 of yacc.c  */
-#line 916 "a.y"
+  case 161:
+#line 910 "a.y"
     {
 		(yyval.lval) = 0;
 	}
     break;
 
-  case 165:
-
-/* Line 1806 of yacc.c  */
-#line 920 "a.y"
+  case 162:
+#line 914 "a.y"
     {
 		(yyval.lval) = (yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 166:
-
-/* Line 1806 of yacc.c  */
-#line 924 "a.y"
+  case 163:
+#line 918 "a.y"
     {
 		(yyval.lval) = -(yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 171:
-
-/* Line 1806 of yacc.c  */
-#line 936 "a.y"
+  case 168:
+#line 930 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (1)].sym)->value;
 	}
     break;
 
-  case 172:
-
-/* Line 1806 of yacc.c  */
-#line 940 "a.y"
+  case 169:
+#line 934 "a.y"
     {
 		(yyval.lval) = -(yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 173:
-
-/* Line 1806 of yacc.c  */
-#line 944 "a.y"
+  case 170:
+#line 938 "a.y"
     {
 		(yyval.lval) = (yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 174:
-
-/* Line 1806 of yacc.c  */
-#line 948 "a.y"
+  case 171:
+#line 942 "a.y"
     {
 		(yyval.lval) = ~(yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 175:
-
-/* Line 1806 of yacc.c  */
-#line 952 "a.y"
+  case 172:
+#line 946 "a.y"
     {
 		(yyval.lval) = (yyvsp[(2) - (3)].lval);
 	}
     break;
 
-  case 177:
-
-/* Line 1806 of yacc.c  */
-#line 959 "a.y"
+  case 174:
+#line 953 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) + (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 178:
-
-/* Line 1806 of yacc.c  */
-#line 963 "a.y"
+  case 175:
+#line 957 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) - (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 179:
-
-/* Line 1806 of yacc.c  */
-#line 967 "a.y"
+  case 176:
+#line 961 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) * (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 180:
-
-/* Line 1806 of yacc.c  */
-#line 971 "a.y"
+  case 177:
+#line 965 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) / (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 181:
-
-/* Line 1806 of yacc.c  */
-#line 975 "a.y"
+  case 178:
+#line 969 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) % (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 182:
-
-/* Line 1806 of yacc.c  */
-#line 979 "a.y"
+  case 179:
+#line 973 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (4)].lval) << (yyvsp[(4) - (4)].lval);
 	}
     break;
 
-  case 183:
-
-/* Line 1806 of yacc.c  */
-#line 983 "a.y"
+  case 180:
+#line 977 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (4)].lval) >> (yyvsp[(4) - (4)].lval);
 	}
     break;
 
-  case 184:
-
-/* Line 1806 of yacc.c  */
-#line 987 "a.y"
+  case 181:
+#line 981 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) & (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 185:
-
-/* Line 1806 of yacc.c  */
-#line 991 "a.y"
+  case 182:
+#line 985 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) ^ (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 186:
-
-/* Line 1806 of yacc.c  */
-#line 995 "a.y"
+  case 183:
+#line 989 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) | (yyvsp[(3) - (3)].lval);
 	}
     break;
 
 
-
-/* Line 1806 of yacc.c  */
-#line 3566 "y.tab.c"
+/* Line 1267 of yacc.c.  */
+#line 3185 "y.tab.c"
       default: break;
     }
-  /* User semantic actions sometimes alter yychar, and that requires
-     that yytoken be updated with the new translation.  We take the
-     approach of translating immediately before every use of yytoken.
-     One alternative is translating here after every semantic action,
-     but that translation would be missed if the semantic action invokes
-     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
-     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
-     incorrect destructor might then be invoked immediately.  In the
-     case of YYERROR or YYBACKUP, subsequent parser actions might lead
-     to an incorrect destructor call or verbose syntax error message
-     before the lookahead is translated.  */
   YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);
 
   YYPOPSTACK (yylen);
@@ -3584,6 +3192,7 @@ yyreduce:
 
   *++yyvsp = yyval;
 
+
   /* Now `shift' the result of the reduction.  Determine what state
      that goes to, based on the state we popped back to and the rule
      number reduced by.  */
@@ -3603,10 +3212,6 @@ yyreduce:
 | yyerrlab -- here on detecting error |
 `------------------------------------*/
 yyerrlab:
-  /* Make sure we have latest lookahead translation.  See comments at
-     user semantic actions for why this is necessary.  */
-  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);
-
   /* If not already recovering from an error, report this error.  */
   if (!yyerrstatus)
     {
@@ -3614,36 +3219,37 @@ yyerrlab:
 #if ! YYERROR_VERBOSE
       yyerror (YY_("syntax error"));
 #else
-# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
-                                        yyssp, yytoken)
       {
-        char const *yymsgp = YY_("syntax error");
-        int yysyntax_error_status;
-        yysyntax_error_status = YYSYNTAX_ERROR;
-        if (yysyntax_error_status == 0)
-          yymsgp = yymsg;
-        else if (yysyntax_error_status == 1)
-          {
-            if (yymsg != yymsgbuf)
-              YYSTACK_FREE (yymsg);
-            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
-            if (!yymsg)
-              {
-                yymsg = yymsgbuf;
-                yymsg_alloc = sizeof yymsgbuf;
-                yysyntax_error_status = 2;
-              }
-            else
-              {
-                yysyntax_error_status = YYSYNTAX_ERROR;
-                yymsgp = yymsg;
-              }
-          }
-        yyerror (yymsgp);
-        if (yysyntax_error_status == 2)
-          goto yyexhaustedlab;
+	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
+	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
+	  {
+	    YYSIZE_T yyalloc = 2 * yysize;
+	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
+	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
+	    if (yymsg != yymsgbuf)
+	      YYSTACK_FREE (yymsg);
+	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
+	    if (yymsg)
+	      yymsg_alloc = yyalloc;
+	    else
+	      {
+		yymsg = yymsgbuf;
+		yymsg_alloc = sizeof yymsgbuf;
+	      }
+	  }
+
+	if (0 < yysize && yysize <= yymsg_alloc)
+	  {
+	    (void) yysyntax_error (yymsg, yystate, yychar);
+	    yyerror (yymsg);
+	  }
+	else
+	  {
+	    yyerror (YY_("syntax error"));
+	    if (yysize != 0)
+	      goto yyexhaustedlab;
+	  }
       }
-# undef YYSYNTAX_ERROR
 #endif
     }
 
@@ -3651,7 +3257,7 @@ yyerrlab:
 
   if (yyerrstatus == 3)
     {
-      /* If just tried and failed to reuse lookahead token after an
+      /* If just tried and failed to reuse look-ahead token after an
 	 error, discard it.  */
 
       if (yychar <= YYEOF)
@@ -3668,7 +3274,7 @@ yyerrlab:
 	}
     }
 
-  /* Else will try to reuse lookahead token after shifting the error
+  /* Else will try to reuse look-ahead token after shifting the error
      token.  */
   goto yyerrlab1;
 
@@ -3702,7 +3308,7 @@ yyerrlab1:
   for (;;)
     {
       yyn = yypact[yystate];
-      if (!yypact_value_is_default (yyn))
+      if (yyn != YYPACT_NINF)
 	{
 	  yyn += YYTERROR;
 	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
@@ -3725,6 +3331,9 @@ yyerrlab1:
       YY_STACK_PRINT (yyss, yyssp);
     }
 
+  if (yyn == YYFINAL)
+    YYACCEPT;
+
   *++yyvsp = yylval;
 
 
@@ -3749,7 +3358,7 @@ yyabortlab:
   yyresult = 1;
   goto yyreturn;
 
-#if !defined(yyoverflow) || YYERROR_VERBOSE
+#ifndef yyoverflow
 /*-------------------------------------------------.
 | yyexhaustedlab -- memory exhaustion comes here.  |
 `-------------------------------------------------*/
@@ -3760,14 +3369,9 @@ yyexhaustedlab:
 #endif
 
 yyreturn:
-  if (yychar != YYEMPTY)
-    {
-      /* Make sure we have latest lookahead translation.  See comments at
-         user semantic actions for why this is necessary.  */
-      yytoken = YYTRANSLATE (yychar);
-      yydestruct ("Cleanup: discarding lookahead",
-                  yytoken, &yylval);
-    }
+  if (yychar != YYEOF && yychar != YYEMPTY)
+     yydestruct ("Cleanup: discarding lookahead",
+		 yytoken, &yylval);
   /* Do not reclaim the symbols of the rule which action triggered
      this YYABORT or YYACCEPT.  */
   YYPOPSTACK (yylen);
diff --git a/src/cmd/9a/y.tab.h b/src/cmd/9a/y.tab.h
index f1b4a72236..e6b93a2ece 100644
--- a/src/cmd/9a/y.tab.h
+++ b/src/cmd/9a/y.tab.h
@@ -1,21 +1,24 @@
-/* A Bison parser, made by GNU Bison 2.5.  */
+/* A Bison parser, made by GNU Bison 2.3.  */
 
-/* Bison interface for Yacc-like parsers in C
-   
-      Copyright (C) 1984, 1989-1990, 2000-2011 Free Software Foundation, Inc.
-   
-   This program is free software: you can redistribute it and/or modify
+/* Skeleton interface for Bison's Yacc-like parsers in C
+
+   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
+   Free Software Foundation, Inc.
+
+   This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
-   the Free Software Foundation, either version 3 of the License, or
-   (at your option) any later version.
-   
+   the Free Software Foundation; either version 2, or (at your option)
+   any later version.
+
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
-   
+
    You should have received a copy of the GNU General Public License
-   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 51 Franklin Street, Fifth Floor,
+   Boston, MA 02110-1301, USA.  */
 
 /* As a special exception, you may create a larger work that contains
    part or all of the Bison parser skeleton and distribute that work
@@ -26,11 +29,10 @@
    special exception, which will cause the skeleton and the resulting
    Bison output files to be licensed under the GNU General Public
    License without this special exception.
-   
+
    This special exception was added by the Free Software Foundation in
    version 2.2 of Bison.  */
 
-
 /* Tokens.  */
 #ifndef YYTOKENTYPE
 # define YYTOKENTYPE
@@ -166,27 +168,21 @@
 
 #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
 typedef union YYSTYPE
-{
-
-/* Line 2068 of yacc.c  */
 #line 38 "a.y"
-
+{
 	Sym	*sym;
 	vlong	lval;
 	double	dval;
 	char	sval[8];
 	Addr	addr;
-
-
-
-/* Line 2068 of yacc.c  */
-#line 184 "y.tab.h"
-} YYSTYPE;
-# define YYSTYPE_IS_TRIVIAL 1
+}
+/* Line 1529 of yacc.c.  */
+#line 181 "y.tab.h"
+	YYSTYPE;
 # define yystype YYSTYPE /* obsolescent; will be withdrawn */
 # define YYSTYPE_IS_DECLARED 1
+# define YYSTYPE_IS_TRIVIAL 1
 #endif
 
 extern YYSTYPE yylval;
 
-
diff --git a/src/cmd/cc/lexbody b/src/cmd/cc/lexbody
index e24db1bc0b..f586aaa20e 100644
--- a/src/cmd/cc/lexbody
+++ b/src/cmd/cc/lexbody
@@ -220,6 +220,31 @@ slookup(char *s)
 	return lookup();
 }
 
+LSym *thetext;
+
+void
+settext(LSym *s)
+{
+	thetext = s;
+}
+
+Sym*
+labellookup(Sym *s)
+{
+	char *p;
+	Sym *lab;
+	
+	if(thetext == nil) {
+		s->labelname = s->name;
+		return s;
+	}
+	p = smprint("%s.%s", thetext->name, s->name);
+	lab = slookup(p);
+	free(p);
+	lab->labelname = s->name;
+	return lab;
+}
+
 Sym*
 lookup(void)
 {
diff --git a/src/runtime/asm_386.s b/src/runtime/asm_386.s
index 20d3c47c94..d0b3969bda 100644
--- a/src/runtime/asm_386.s
+++ b/src/runtime/asm_386.s
@@ -486,11 +486,11 @@ TEXT runtime·cas64(SB), NOSPLIT, $0-21
 	MOVL	new_hi+16(FP), CX
 	LOCK
 	CMPXCHG8B	0(BP)
-	JNZ	cas64_fail
+	JNZ	fail
 	MOVL	$1, AX
 	MOVB	AX, ret+20(FP)
 	RET
-cas64_fail:
+fail:
 	MOVL	$0, AX
 	MOVB	AX, ret+20(FP)
 	RET
@@ -1342,29 +1342,29 @@ TEXT strings·IndexByte(SB),NOSPLIT,$0
 //   AX = 1/0/-1
 TEXT runtime·cmpbody(SB),NOSPLIT,$0-0
 	CMPL	SI, DI
-	JEQ	cmp_allsame
+	JEQ	allsame
 	CMPL	BX, DX
 	MOVL	DX, BP
 	CMOVLLT	BX, BP // BP = min(alen, blen)
 	CMPL	BP, $4
-	JB	cmp_small
+	JB	small
 	TESTL	$0x4000000, runtime·cpuid_edx(SB) // check for sse2
-	JE	cmp_mediumloop
-cmp_largeloop:
+	JE	mediumloop
+largeloop:
 	CMPL	BP, $16
-	JB	cmp_mediumloop
+	JB	mediumloop
 	MOVOU	(SI), X0
 	MOVOU	(DI), X1
 	PCMPEQB X0, X1
 	PMOVMSKB X1, AX
 	XORL	$0xffff, AX	// convert EQ to NE
-	JNE	cmp_diff16	// branch if at least one byte is not equal
+	JNE	diff16	// branch if at least one byte is not equal
 	ADDL	$16, SI
 	ADDL	$16, DI
 	SUBL	$16, BP
-	JMP	cmp_largeloop
+	JMP	largeloop
 
-cmp_diff16:
+diff16:
 	BSFL	AX, BX	// index of first byte that differs
 	XORL	AX, AX
 	MOVB	(SI)(BX*1), CX
@@ -1373,25 +1373,25 @@ cmp_diff16:
 	LEAL	-1(AX*2), AX	// convert 1/0 to +1/-1
 	RET
 
-cmp_mediumloop:
+mediumloop:
 	CMPL	BP, $4
-	JBE	cmp_0through4
+	JBE	_0through4
 	MOVL	(SI), AX
 	MOVL	(DI), CX
 	CMPL	AX, CX
-	JNE	cmp_diff4
+	JNE	diff4
 	ADDL	$4, SI
 	ADDL	$4, DI
 	SUBL	$4, BP
-	JMP	cmp_mediumloop
+	JMP	mediumloop
 
-cmp_0through4:
+_0through4:
 	MOVL	-4(SI)(BP*1), AX
 	MOVL	-4(DI)(BP*1), CX
 	CMPL	AX, CX
-	JEQ	cmp_allsame
+	JEQ	allsame
 
-cmp_diff4:
+diff4:
 	BSWAPL	AX	// reverse order of bytes
 	BSWAPL	CX
 	XORL	AX, CX	// find bit differences
@@ -1402,37 +1402,37 @@ cmp_diff4:
 	RET
 
 	// 0-3 bytes in common
-cmp_small:
+small:
 	LEAL	(BP*8), CX
 	NEGL	CX
-	JEQ	cmp_allsame
+	JEQ	allsame
 
 	// load si
 	CMPB	SI, $0xfc
-	JA	cmp_si_high
+	JA	si_high
 	MOVL	(SI), SI
-	JMP	cmp_si_finish
-cmp_si_high:
+	JMP	si_finish
+si_high:
 	MOVL	-4(SI)(BP*1), SI
 	SHRL	CX, SI
-cmp_si_finish:
+si_finish:
 	SHLL	CX, SI
 
 	// same for di
 	CMPB	DI, $0xfc
-	JA	cmp_di_high
+	JA	di_high
 	MOVL	(DI), DI
-	JMP	cmp_di_finish
-cmp_di_high:
+	JMP	di_finish
+di_high:
 	MOVL	-4(DI)(BP*1), DI
 	SHRL	CX, DI
-cmp_di_finish:
+di_finish:
 	SHLL	CX, DI
 
 	BSWAPL	SI	// reverse order of bytes
 	BSWAPL	DI
 	XORL	SI, DI	// find bit differences
-	JEQ	cmp_allsame
+	JEQ	allsame
 	BSRL	DI, CX	// index of highest bit difference
 	SHRL	CX, SI	// move a's bit to bottom
 	ANDL	$1, SI	// mask bit
@@ -1441,7 +1441,7 @@ cmp_di_finish:
 
 	// all the bytes in common are the same, so we just need
 	// to compare the lengths.
-cmp_allsame:
+allsame:
 	XORL	AX, AX
 	XORL	CX, CX
 	CMPL	BX, DX
diff --git a/src/runtime/asm_amd64.s b/src/runtime/asm_amd64.s
index 709834180e..7a0fdfa73a 100644
--- a/src/runtime/asm_amd64.s
+++ b/src/runtime/asm_amd64.s
@@ -461,11 +461,11 @@ TEXT runtime·cas64(SB), NOSPLIT, $0-25
 	MOVQ	new+16(FP), CX
 	LOCK
 	CMPXCHGQ	CX, 0(BX)
-	JNZ	cas64_fail
+	JNZ	fail
 	MOVL	$1, AX
 	MOVB	AX, ret+24(FP)
 	RET
-cas64_fail:
+fail:
 	MOVL	$0, AX
 	MOVB	AX, ret+24(FP)
 	RET
@@ -876,24 +876,24 @@ TEXT runtime·aeshashbody(SB),NOSPLIT,$0-32
 	MOVO	runtime·aeskeysched+0(SB), X2
 	MOVO	runtime·aeskeysched+16(SB), X3
 	CMPQ	CX, $16
-	JB	aessmall
-aesloop:
+	JB	small
+loop:
 	CMPQ	CX, $16
-	JBE	aesloopend
+	JBE	loopend
 	MOVOU	(AX), X1
 	AESENC	X2, X0
 	AESENC	X1, X0
 	SUBQ	$16, CX
 	ADDQ	$16, AX
-	JMP	aesloop
+	JMP	loop
 // 1-16 bytes remaining
-aesloopend:
+loopend:
 	// This load may overlap with the previous load above.
 	// We'll hash some bytes twice, but that's ok.
 	MOVOU	-16(AX)(CX*1), X1
 	JMP	partial
 // 0-15 bytes
-aessmall:
+small:
 	TESTQ	CX, CX
 	JE	finalize	// 0 bytes
 
@@ -1036,18 +1036,18 @@ TEXT runtime·eqstring(SB),NOSPLIT,$0-33
 	MOVQ	s1len+8(FP), AX
 	MOVQ	s2len+24(FP), BX
 	CMPQ	AX, BX
-	JNE	different
+	JNE	noteq
 	MOVQ	s1str+0(FP), SI
 	MOVQ	s2str+16(FP), DI
 	CMPQ	SI, DI
-	JEQ	same
+	JEQ	eq
 	CALL	runtime·memeqbody(SB)
 	MOVB	AX, v+32(FP)
 	RET
-same:
+eq:
 	MOVB	$1, v+32(FP)
 	RET
-different:
+noteq:
 	MOVB	$0, v+32(FP)
 	RET
 
@@ -1170,29 +1170,29 @@ TEXT runtime·cmpbytes(SB),NOSPLIT,$0-56
 //   AX = 1/0/-1
 TEXT runtime·cmpbody(SB),NOSPLIT,$0-0
 	CMPQ	SI, DI
-	JEQ	cmp_allsame
+	JEQ	allsame
 	CMPQ	BX, DX
 	MOVQ	DX, BP
 	CMOVQLT	BX, BP // BP = min(alen, blen) = # of bytes to compare
 	CMPQ	BP, $8
-	JB	cmp_small
+	JB	small
 
-cmp_loop:
+loop:
 	CMPQ	BP, $16
-	JBE	cmp_0through16
+	JBE	_0through16
 	MOVOU	(SI), X0
 	MOVOU	(DI), X1
 	PCMPEQB X0, X1
 	PMOVMSKB X1, AX
 	XORQ	$0xffff, AX	// convert EQ to NE
-	JNE	cmp_diff16	// branch if at least one byte is not equal
+	JNE	diff16	// branch if at least one byte is not equal
 	ADDQ	$16, SI
 	ADDQ	$16, DI
 	SUBQ	$16, BP
-	JMP	cmp_loop
+	JMP	loop
 	
 	// AX = bit mask of differences
-cmp_diff16:
+diff16:
 	BSFQ	AX, BX	// index of first byte that differs
 	XORQ	AX, AX
 	MOVB	(SI)(BX*1), CX
@@ -1202,21 +1202,21 @@ cmp_diff16:
 	RET
 
 	// 0 through 16 bytes left, alen>=8, blen>=8
-cmp_0through16:
+_0through16:
 	CMPQ	BP, $8
-	JBE	cmp_0through8
+	JBE	_0through8
 	MOVQ	(SI), AX
 	MOVQ	(DI), CX
 	CMPQ	AX, CX
-	JNE	cmp_diff8
-cmp_0through8:
+	JNE	diff8
+_0through8:
 	MOVQ	-8(SI)(BP*1), AX
 	MOVQ	-8(DI)(BP*1), CX
 	CMPQ	AX, CX
-	JEQ	cmp_allsame
+	JEQ	allsame
 
 	// AX and CX contain parts of a and b that differ.
-cmp_diff8:
+diff8:
 	BSWAPQ	AX	// reverse order of bytes
 	BSWAPQ	CX
 	XORQ	AX, CX
@@ -1227,44 +1227,44 @@ cmp_diff8:
 	RET
 
 	// 0-7 bytes in common
-cmp_small:
+small:
 	LEAQ	(BP*8), CX	// bytes left -> bits left
 	NEGQ	CX		//  - bits lift (== 64 - bits left mod 64)
-	JEQ	cmp_allsame
+	JEQ	allsame
 
 	// load bytes of a into high bytes of AX
 	CMPB	SI, $0xf8
-	JA	cmp_si_high
+	JA	si_high
 	MOVQ	(SI), SI
-	JMP	cmp_si_finish
-cmp_si_high:
+	JMP	si_finish
+si_high:
 	MOVQ	-8(SI)(BP*1), SI
 	SHRQ	CX, SI
-cmp_si_finish:
+si_finish:
 	SHLQ	CX, SI
 
 	// load bytes of b in to high bytes of BX
 	CMPB	DI, $0xf8
-	JA	cmp_di_high
+	JA	di_high
 	MOVQ	(DI), DI
-	JMP	cmp_di_finish
-cmp_di_high:
+	JMP	di_finish
+di_high:
 	MOVQ	-8(DI)(BP*1), DI
 	SHRQ	CX, DI
-cmp_di_finish:
+di_finish:
 	SHLQ	CX, DI
 
 	BSWAPQ	SI	// reverse order of bytes
 	BSWAPQ	DI
 	XORQ	SI, DI	// find bit differences
-	JEQ	cmp_allsame
+	JEQ	allsame
 	BSRQ	DI, CX	// index of highest bit difference
 	SHRQ	CX, SI	// move a's bit to bottom
 	ANDQ	$1, SI	// mask bit
 	LEAQ	-1(SI*2), AX // 1/0 => +1/-1
 	RET
 
-cmp_allsame:
+allsame:
 	XORQ	AX, AX
 	XORQ	CX, CX
 	CMPQ	BX, DX
@@ -1299,7 +1299,7 @@ TEXT runtime·indexbytebody(SB),NOSPLIT,$0
 	MOVQ SI, DI
 
 	CMPQ BX, $16
-	JLT indexbyte_small
+	JLT small
 
 	// round up to first 16-byte boundary
 	TESTQ $15, SI
@@ -1357,7 +1357,7 @@ failure:
 	RET
 
 // handle for lengths < 16
-indexbyte_small:
+small:
 	MOVQ BX, CX
 	REPN; SCASB
 	JZ success
diff --git a/src/runtime/asm_amd64p32.s b/src/runtime/asm_amd64p32.s
index 28875bc55a..de3ef3a237 100644
--- a/src/runtime/asm_amd64p32.s
+++ b/src/runtime/asm_amd64p32.s
@@ -444,11 +444,11 @@ TEXT runtime·cas64(SB), NOSPLIT, $0-25
 	MOVQ	new+16(FP), CX
 	LOCK
 	CMPXCHGQ	CX, 0(BX)
-	JNZ	cas64_fail
+	JNZ	fail
 	MOVL	$1, AX
 	MOVB	AX, ret+24(FP)
 	RET
-cas64_fail:
+fail:
 	MOVL	$0, AX
 	MOVB	AX, ret+24(FP)
 	RET
@@ -834,29 +834,29 @@ TEXT runtime·cmpbytes(SB),NOSPLIT,$0-28
 //   AX = 1/0/-1
 TEXT runtime·cmpbody(SB),NOSPLIT,$0-0
 	CMPQ	SI, DI
-	JEQ	cmp_allsame
+	JEQ	allsame
 	CMPQ	BX, DX
 	MOVQ	DX, R8
 	CMOVQLT	BX, R8 // R8 = min(alen, blen) = # of bytes to compare
 	CMPQ	R8, $8
-	JB	cmp_small
+	JB	small
 
-cmp_loop:
+loop:
 	CMPQ	R8, $16
-	JBE	cmp_0through16
+	JBE	_0through16
 	MOVOU	(SI), X0
 	MOVOU	(DI), X1
 	PCMPEQB X0, X1
 	PMOVMSKB X1, AX
 	XORQ	$0xffff, AX	// convert EQ to NE
-	JNE	cmp_diff16	// branch if at least one byte is not equal
+	JNE	diff16	// branch if at least one byte is not equal
 	ADDQ	$16, SI
 	ADDQ	$16, DI
 	SUBQ	$16, R8
-	JMP	cmp_loop
+	JMP	loop
 	
 	// AX = bit mask of differences
-cmp_diff16:
+diff16:
 	BSFQ	AX, BX	// index of first byte that differs
 	XORQ	AX, AX
 	ADDQ	BX, SI
@@ -868,23 +868,23 @@ cmp_diff16:
 	RET
 
 	// 0 through 16 bytes left, alen>=8, blen>=8
-cmp_0through16:
+_0through16:
 	CMPQ	R8, $8
-	JBE	cmp_0through8
+	JBE	_0through8
 	MOVQ	(SI), AX
 	MOVQ	(DI), CX
 	CMPQ	AX, CX
-	JNE	cmp_diff8
-cmp_0through8:
+	JNE	diff8
+_0through8:
 	ADDQ	R8, SI
 	ADDQ	R8, DI
 	MOVQ	-8(SI), AX
 	MOVQ	-8(DI), CX
 	CMPQ	AX, CX
-	JEQ	cmp_allsame
+	JEQ	allsame
 
 	// AX and CX contain parts of a and b that differ.
-cmp_diff8:
+diff8:
 	BSWAPQ	AX	// reverse order of bytes
 	BSWAPQ	CX
 	XORQ	AX, CX
@@ -895,46 +895,46 @@ cmp_diff8:
 	RET
 
 	// 0-7 bytes in common
-cmp_small:
+small:
 	LEAQ	(R8*8), CX	// bytes left -> bits left
 	NEGQ	CX		//  - bits lift (== 64 - bits left mod 64)
-	JEQ	cmp_allsame
+	JEQ	allsame
 
 	// load bytes of a into high bytes of AX
 	CMPB	SI, $0xf8
-	JA	cmp_si_high
+	JA	si_high
 	MOVQ	(SI), SI
-	JMP	cmp_si_finish
-cmp_si_high:
+	JMP	si_finish
+si_high:
 	ADDQ	R8, SI
 	MOVQ	-8(SI), SI
 	SHRQ	CX, SI
-cmp_si_finish:
+si_finish:
 	SHLQ	CX, SI
 
 	// load bytes of b in to high bytes of BX
 	CMPB	DI, $0xf8
-	JA	cmp_di_high
+	JA	di_high
 	MOVQ	(DI), DI
-	JMP	cmp_di_finish
-cmp_di_high:
+	JMP	di_finish
+di_high:
 	ADDQ	R8, DI
 	MOVQ	-8(DI), DI
 	SHRQ	CX, DI
-cmp_di_finish:
+di_finish:
 	SHLQ	CX, DI
 
 	BSWAPQ	SI	// reverse order of bytes
 	BSWAPQ	DI
 	XORQ	SI, DI	// find bit differences
-	JEQ	cmp_allsame
+	JEQ	allsame
 	BSRQ	DI, CX	// index of highest bit difference
 	SHRQ	CX, SI	// move a's bit to bottom
 	ANDQ	$1, SI	// mask bit
 	LEAQ	-1(SI*2), AX // 1/0 => +1/-1
 	RET
 
-cmp_allsame:
+allsame:
 	XORQ	AX, AX
 	XORQ	CX, CX
 	CMPQ	BX, DX
@@ -969,7 +969,7 @@ TEXT runtime·indexbytebody(SB),NOSPLIT,$0
 	MOVL SI, DI
 
 	CMPL BX, $16
-	JLT indexbyte_small
+	JLT small
 
 	// round up to first 16-byte boundary
 	TESTL $15, SI
@@ -1027,7 +1027,7 @@ failure:
 	RET
 
 // handle for lengths < 16
-indexbyte_small:
+small:
 	MOVL BX, CX
 	REPN; SCASB
 	JZ success
diff --git a/src/runtime/asm_arm.s b/src/runtime/asm_arm.s
index 621d13187a..8942b11acb 100644
--- a/src/runtime/asm_arm.s
+++ b/src/runtime/asm_arm.s
@@ -492,7 +492,7 @@ TEXT asmcgocall<>(SB),NOSPLIT,$0-0
 	MOVW	g_m(g), R8
 	MOVW	m_g0(R8), R3
 	CMP	R3, g
-	BEQ	asmcgocall_g0
+	BEQ	g0
 	BL	gosave<>(SB)
 	MOVW	R0, R5
 	MOVW	R3, R0
@@ -501,7 +501,7 @@ TEXT asmcgocall<>(SB),NOSPLIT,$0-0
 	MOVW	(g_sched+gobuf_sp)(g), R13
 
 	// Now on a scheduling stack (a pthread-created stack).
-asmcgocall_g0:
+g0:
 	SUB	$24, R13
 	BIC	$0x7, R13	// alignment for gcc ABI
 	MOVW	R4, 20(R13) // save old g
@@ -736,13 +736,13 @@ TEXT runtime·memeq(SB),NOSPLIT,$-4-13
 	ADD	R1, R3, R6
 	MOVW	$1, R0
 	MOVB	R0, ret+12(FP)
-_next2:
+loop:
 	CMP	R1, R6
 	RET.EQ
 	MOVBU.P	1(R1), R4
 	MOVBU.P	1(R2), R5
 	CMP	R4, R5
-	BEQ	_next2
+	BEQ	loop
 
 	MOVW	$0, R0
 	MOVB	R0, ret+12(FP)
@@ -765,13 +765,13 @@ TEXT runtime·eqstring(SB),NOSPLIT,$-4-17
 	CMP	R2, R3
 	RET.EQ
 	ADD	R2, R0, R6
-_eqnext:
+loop:
 	CMP	R2, R6
 	RET.EQ
 	MOVBU.P	1(R2), R4
 	MOVBU.P	1(R3), R5
 	CMP	R4, R5
-	BEQ	_eqnext
+	BEQ	loop
 	MOVB	R7, v+16(FP)
 	RET
 
@@ -786,26 +786,26 @@ TEXT bytes·Equal(SB),NOSPLIT,$0
 	MOVW	b_len+16(FP), R3
 	
 	CMP	R1, R3		// unequal lengths are not equal
-	B.NE	_notequal
+	B.NE	notequal
 
 	MOVW	a+0(FP), R0
 	MOVW	b+12(FP), R2
 	ADD	R0, R1		// end
 
-_byteseq_next:
+loop:
 	CMP	R0, R1
-	B.EQ	_equal		// reached the end
+	B.EQ	equal		// reached the end
 	MOVBU.P	1(R0), R4
 	MOVBU.P	1(R2), R5
 	CMP	R4, R5
-	B.EQ	_byteseq_next
+	B.EQ	loop
 
-_notequal:
+notequal:
 	MOVW	$0, R0
 	MOVBU	R0, ret+24(FP)
 	RET
 
-_equal:
+equal:
 	MOVW	$1, R0
 	MOVBU	R0, ret+24(FP)
 	RET
diff --git a/src/runtime/asm_power64x.s b/src/runtime/asm_power64x.s
index 21220e5cb8..f77658032e 100644
--- a/src/runtime/asm_power64x.s
+++ b/src/runtime/asm_power64x.s
@@ -699,7 +699,7 @@ TEXT runtime·memeq(SB),NOSPLIT,$-8-25
 	SUB	$1, R3
 	SUB	$1, R4
 	ADD	R3, R5, R8
-_next:
+loop:
 	CMP	R3, R8
 	BNE	4(PC)
 	MOVD	$1, R3
@@ -708,7 +708,7 @@ _next:
 	MOVBZU	1(R3), R6
 	MOVBZU	1(R4), R7
 	CMP	R6, R7
-	BEQ	_next
+	BEQ	loop
 
 	MOVB	R0, ret+24(FP)
 	RETURN
@@ -720,14 +720,14 @@ TEXT runtime·eqstring(SB),NOSPLIT,$0-33
 	MOVD	s1len+8(FP), R4
 	MOVD	s2len+24(FP), R5
 	CMP	R4, R5
-	BNE	str_noteq
+	BNE	noteq
 
 	MOVD	s1str+0(FP), R3
 	MOVD	s2str+16(FP), R4
 	SUB	$1, R3
 	SUB	$1, R4
 	ADD	R3, R5, R8
-eq_next:
+loop:
 	CMP	R3, R8
 	BNE	4(PC)
 	MOVD	$1, R3
@@ -736,8 +736,8 @@ eq_next:
 	MOVBZU	1(R3), R6
 	MOVBZU	1(R4), R7
 	CMP	R6, R7
-	BEQ	eq_next
-str_noteq:
+	BEQ	loop
+noteq:
 	MOVB	R0, ret+32(FP)
 	RETURN
 
@@ -747,7 +747,7 @@ TEXT bytes·Equal(SB),NOSPLIT,$0-49
 	MOVD	b_len+32(FP), R4
 
 	CMP	R3, R4		// unequal lengths are not equal
-	BNE	_notequal
+	BNE	noteq
 
 	MOVD	a+0(FP), R5
 	MOVD	b+24(FP), R6
@@ -755,19 +755,19 @@ TEXT bytes·Equal(SB),NOSPLIT,$0-49
 	SUB	$1, R6
 	ADD	R5, R3		// end-1
 
-_byteseq_next:
+loop:
 	CMP	R5, R3
-	BEQ	_equal		// reached the end
+	BEQ	equal		// reached the end
 	MOVBZU	1(R5), R4
 	MOVBZU	1(R6), R7
 	CMP	R4, R7
-	BEQ	_byteseq_next
+	BEQ	loop
 
-_notequal:
+noteq:
 	MOVBZ	R0, ret+48(FP)
 	RETURN
 
-_equal:
+equal:
 	MOVD	$1, R3
 	MOVBZ	R3, ret+48(FP)
 	RETURN
@@ -780,18 +780,18 @@ TEXT bytes·IndexByte(SB),NOSPLIT,$0-40
 	SUB	$1, R3
 	ADD	R3, R4		// end-1
 
-_index_loop:
+loop:
 	CMP	R3, R4
-	BEQ	_index_notfound
+	BEQ	notfound
 	MOVBZU	1(R3), R7
 	CMP	R7, R5
-	BNE	_index_loop
+	BNE	loop
 
 	SUB	R6, R3		// remove base
 	MOVD	R3, ret+32(FP)
 	RETURN
 
-_index_notfound:
+notfound:
 	MOVD	$-1, R3
 	MOVD	R3, ret+32(FP)
 	RETURN
@@ -804,18 +804,18 @@ TEXT strings·IndexByte(SB),NOSPLIT,$0
 	SUB	$1, R3
 	ADD	R3, R4		// end-1
 
-_index2_loop:
+loop:
 	CMP	R3, R4
-	BEQ	_index2_notfound
+	BEQ	notfound
 	MOVBZU	1(R3), R7
 	CMP	R7, R5
-	BNE	_index2_loop
+	BNE	loop
 
 	SUB	R6, R3		// remove base
 	MOVD	R3, ret+24(FP)
 	RETURN
 
-_index2_notfound:
+notfound:
 	MOVD	$-1, R3
 	MOVD	R3, ret+24(FP)
 	RETURN
diff --git a/src/runtime/memclr_386.s b/src/runtime/memclr_386.s
index 1520aea2e0..3f20b69c82 100644
--- a/src/runtime/memclr_386.s
+++ b/src/runtime/memclr_386.s
@@ -15,31 +15,31 @@ TEXT runtime·memclr(SB), NOSPLIT, $0-8
 	XORL	AX, AX
 
 	// MOVOU seems always faster than REP STOSL.
-clr_tail:
+tail:
 	TESTL	BX, BX
-	JEQ	clr_0
+	JEQ	_0
 	CMPL	BX, $2
-	JBE	clr_1or2
+	JBE	_1or2
 	CMPL	BX, $4
-	JBE	clr_3or4
+	JBE	_3or4
 	CMPL	BX, $8
-	JBE	clr_5through8
+	JBE	_5through8
 	CMPL	BX, $16
-	JBE	clr_9through16
+	JBE	_9through16
 	TESTL	$0x4000000, runtime·cpuid_edx(SB) // check for sse2
 	JEQ	nosse2
 	PXOR	X0, X0
 	CMPL	BX, $32
-	JBE	clr_17through32
+	JBE	_17through32
 	CMPL	BX, $64
-	JBE	clr_33through64
+	JBE	_33through64
 	CMPL	BX, $128
-	JBE	clr_65through128
+	JBE	_65through128
 	CMPL	BX, $256
-	JBE	clr_129through256
+	JBE	_129through256
 	// TODO: use branch table and BSR to make this just a single dispatch
 
-clr_loop:
+loop:
 	MOVOU	X0, 0(DI)
 	MOVOU	X0, 16(DI)
 	MOVOU	X0, 32(DI)
@@ -59,40 +59,40 @@ clr_loop:
 	SUBL	$256, BX
 	ADDL	$256, DI
 	CMPL	BX, $256
-	JAE	clr_loop
-	JMP	clr_tail
+	JAE	loop
+	JMP	tail
 
-clr_1or2:
+_1or2:
 	MOVB	AX, (DI)
 	MOVB	AX, -1(DI)(BX*1)
 	RET
-clr_0:
+_0:
 	RET
-clr_3or4:
+_3or4:
 	MOVW	AX, (DI)
 	MOVW	AX, -2(DI)(BX*1)
 	RET
-clr_5through8:
+_5through8:
 	MOVL	AX, (DI)
 	MOVL	AX, -4(DI)(BX*1)
 	RET
-clr_9through16:
+_9through16:
 	MOVL	AX, (DI)
 	MOVL	AX, 4(DI)
 	MOVL	AX, -8(DI)(BX*1)
 	MOVL	AX, -4(DI)(BX*1)
 	RET
-clr_17through32:
+_17through32:
 	MOVOU	X0, (DI)
 	MOVOU	X0, -16(DI)(BX*1)
 	RET
-clr_33through64:
+_33through64:
 	MOVOU	X0, (DI)
 	MOVOU	X0, 16(DI)
 	MOVOU	X0, -32(DI)(BX*1)
 	MOVOU	X0, -16(DI)(BX*1)
 	RET
-clr_65through128:
+_65through128:
 	MOVOU	X0, (DI)
 	MOVOU	X0, 16(DI)
 	MOVOU	X0, 32(DI)
@@ -102,7 +102,7 @@ clr_65through128:
 	MOVOU	X0, -32(DI)(BX*1)
 	MOVOU	X0, -16(DI)(BX*1)
 	RET
-clr_129through256:
+_129through256:
 	MOVOU	X0, (DI)
 	MOVOU	X0, 16(DI)
 	MOVOU	X0, 32(DI)
@@ -126,5 +126,5 @@ nosse2:
 	REP
 	STOSL
 	ANDL	$3, BX
-	JNE	clr_tail
+	JNE	tail
 	RET
diff --git a/src/runtime/memclr_amd64.s b/src/runtime/memclr_amd64.s
index 94a2c7f236..ec24f1db23 100644
--- a/src/runtime/memclr_amd64.s
+++ b/src/runtime/memclr_amd64.s
@@ -15,30 +15,30 @@ TEXT runtime·memclr(SB), NOSPLIT, $0-16
 	XORQ	AX, AX
 
 	// MOVOU seems always faster than REP STOSQ.
-clr_tail:
+tail:
 	TESTQ	BX, BX
-	JEQ	clr_0
+	JEQ	_0
 	CMPQ	BX, $2
-	JBE	clr_1or2
+	JBE	_1or2
 	CMPQ	BX, $4
-	JBE	clr_3or4
+	JBE	_3or4
 	CMPQ	BX, $8
-	JBE	clr_5through8
+	JBE	_5through8
 	CMPQ	BX, $16
-	JBE	clr_9through16
+	JBE	_9through16
 	PXOR	X0, X0
 	CMPQ	BX, $32
-	JBE	clr_17through32
+	JBE	_17through32
 	CMPQ	BX, $64
-	JBE	clr_33through64
+	JBE	_33through64
 	CMPQ	BX, $128
-	JBE	clr_65through128
+	JBE	_65through128
 	CMPQ	BX, $256
-	JBE	clr_129through256
+	JBE	_129through256
 	// TODO: use branch table and BSR to make this just a single dispatch
 	// TODO: for really big clears, use MOVNTDQ.
 
-clr_loop:
+loop:
 	MOVOU	X0, 0(DI)
 	MOVOU	X0, 16(DI)
 	MOVOU	X0, 32(DI)
@@ -58,38 +58,38 @@ clr_loop:
 	SUBQ	$256, BX
 	ADDQ	$256, DI
 	CMPQ	BX, $256
-	JAE	clr_loop
-	JMP	clr_tail
+	JAE	loop
+	JMP	tail
 
-clr_1or2:
+_1or2:
 	MOVB	AX, (DI)
 	MOVB	AX, -1(DI)(BX*1)
 	RET
-clr_0:
+_0:
 	RET
-clr_3or4:
+_3or4:
 	MOVW	AX, (DI)
 	MOVW	AX, -2(DI)(BX*1)
 	RET
-clr_5through8:
+_5through8:
 	MOVL	AX, (DI)
 	MOVL	AX, -4(DI)(BX*1)
 	RET
-clr_9through16:
+_9through16:
 	MOVQ	AX, (DI)
 	MOVQ	AX, -8(DI)(BX*1)
 	RET
-clr_17through32:
+_17through32:
 	MOVOU	X0, (DI)
 	MOVOU	X0, -16(DI)(BX*1)
 	RET
-clr_33through64:
+_33through64:
 	MOVOU	X0, (DI)
 	MOVOU	X0, 16(DI)
 	MOVOU	X0, -32(DI)(BX*1)
 	MOVOU	X0, -16(DI)(BX*1)
 	RET
-clr_65through128:
+_65through128:
 	MOVOU	X0, (DI)
 	MOVOU	X0, 16(DI)
 	MOVOU	X0, 32(DI)
@@ -99,7 +99,7 @@ clr_65through128:
 	MOVOU	X0, -32(DI)(BX*1)
 	MOVOU	X0, -16(DI)(BX*1)
 	RET
-clr_129through256:
+_129through256:
 	MOVOU	X0, (DI)
 	MOVOU	X0, 16(DI)
 	MOVOU	X0, 32(DI)
diff --git a/src/runtime/memclr_plan9_386.s b/src/runtime/memclr_plan9_386.s
index b4b671f773..50f327b4ed 100644
--- a/src/runtime/memclr_plan9_386.s
+++ b/src/runtime/memclr_plan9_386.s
@@ -10,40 +10,40 @@ TEXT runtime·memclr(SB), NOSPLIT, $0-8
 	MOVL	n+4(FP), BX
 	XORL	AX, AX
 
-clr_tail:
+tail:
 	TESTL	BX, BX
-	JEQ	clr_0
+	JEQ	_0
 	CMPL	BX, $2
-	JBE	clr_1or2
+	JBE	_1or2
 	CMPL	BX, $4
-	JBE	clr_3or4
+	JBE	_3or4
 	CMPL	BX, $8
-	JBE	clr_5through8
+	JBE	_5through8
 	CMPL	BX, $16
-	JBE	clr_9through16
+	JBE	_9through16
 	MOVL	BX, CX
 	SHRL	$2, CX
 	REP
 	STOSL
 	ANDL	$3, BX
-	JNE	clr_tail
+	JNE	tail
 	RET
 
-clr_1or2:
+_1or2:
 	MOVB	AX, (DI)
 	MOVB	AX, -1(DI)(BX*1)
 	RET
-clr_0:
+_0:
 	RET
-clr_3or4:
+_3or4:
 	MOVW	AX, (DI)
 	MOVW	AX, -2(DI)(BX*1)
 	RET
-clr_5through8:
+_5through8:
 	MOVL	AX, (DI)
 	MOVL	AX, -4(DI)(BX*1)
 	RET
-clr_9through16:
+_9through16:
 	MOVL	AX, (DI)
 	MOVL	AX, 4(DI)
 	MOVL	AX, -8(DI)(BX*1)
diff --git a/src/runtime/race_amd64.s b/src/runtime/race_amd64.s
index bdea28c7c0..15b18ff8f8 100644
--- a/src/runtime/race_amd64.s
+++ b/src/runtime/race_amd64.s
@@ -140,20 +140,20 @@ TEXT	racecalladdr<>(SB), NOSPLIT, $0-0
 	MOVQ	g_racectx(R14), RARG0	// goroutine context
 	// Check that addr is within [arenastart, arenaend) or within [noptrdata, enoptrbss).
 	CMPQ	RARG1, runtime·racearenastart(SB)
-	JB	racecalladdr_data
+	JB	data
 	CMPQ	RARG1, runtime·racearenaend(SB)
-	JB	racecalladdr_call
-racecalladdr_data:
+	JB	call
+data:
 	MOVQ	$runtime·noptrdata(SB), R13
 	CMPQ	RARG1, R13
-	JB	racecalladdr_ret
+	JB	ret
 	MOVQ	$runtime·enoptrbss(SB), R13
 	CMPQ	RARG1, R13
-	JAE	racecalladdr_ret
-racecalladdr_call:
+	JAE	ret
+call:
 	MOVQ	AX, AX		// w/o this 6a miscompiles this function
 	JMP	racecall<>(SB)
-racecalladdr_ret:
+ret:
 	RET
 
 // func runtime·racefuncenter(pc uintptr)
@@ -335,9 +335,9 @@ TEXT	racecall<>(SB), NOSPLIT, $0-0
 	MOVQ	SP, R12		// callee-saved, preserved across the CALL
 	MOVQ	m_g0(R13), R10
 	CMPQ	R10, R14
-	JE	racecall_cont	// already on g0
+	JE	call	// already on g0
 	MOVQ	(g_sched+gobuf_sp)(R10), SP
-racecall_cont:
+call:
 	ANDQ	$~15, SP	// alignment for gcc ABI
 	CALL	AX
 	MOVQ	R12, SP
diff --git a/src/runtime/sys_darwin_386.s b/src/runtime/sys_darwin_386.s
index a961c71a83..3bf8b1d411 100644
--- a/src/runtime/sys_darwin_386.s
+++ b/src/runtime/sys_darwin_386.s
@@ -248,7 +248,7 @@ TEXT runtime·sigtramp(SB),NOSPLIT,$40
 	MOVL	BX, 0(SP)
 	MOVL	$runtime·badsignal(SB), AX
 	CALL	AX
-	JMP 	sigtramp_ret
+	JMP 	ret
 
 	// save g
 	MOVL	DI, 20(SP)
@@ -275,7 +275,7 @@ TEXT runtime·sigtramp(SB),NOSPLIT,$40
 	MOVL	20(SP), DI
 	MOVL	DI, g(CX)
 
-sigtramp_ret:
+ret:
 	// call sigreturn
 	MOVL	context+16(FP), CX
 	MOVL	style+4(FP), BX
diff --git a/src/runtime/sys_darwin_amd64.s b/src/runtime/sys_darwin_amd64.s
index bd397d72a7..8a8928e066 100644
--- a/src/runtime/sys_darwin_amd64.s
+++ b/src/runtime/sys_darwin_amd64.s
@@ -211,7 +211,7 @@ TEXT runtime·sigtramp(SB),NOSPLIT,$64
 	MOVL	DX, 0(SP)
 	MOVQ	$runtime·badsignal(SB), AX
 	CALL	AX
-	JMP 	sigtramp_ret
+	JMP 	ret
 
 	// save g
 	MOVQ	R10, 48(SP)
@@ -233,7 +233,7 @@ TEXT runtime·sigtramp(SB),NOSPLIT,$64
 	MOVQ	48(SP), R10
 	MOVQ	R10, g(BX)
 
-sigtramp_ret:
+ret:
 	// call sigreturn
 	MOVL	$(0x2000000+184), AX	// sigreturn(ucontext, infostyle)
 	MOVQ	32(SP), DI	// saved ucontext
diff --git a/src/runtime/sys_dragonfly_386.s b/src/runtime/sys_dragonfly_386.s
index 161eaec19d..71ece9ecbf 100644
--- a/src/runtime/sys_dragonfly_386.s
+++ b/src/runtime/sys_dragonfly_386.s
@@ -217,7 +217,7 @@ TEXT runtime·sigtramp(SB),NOSPLIT,$44
 	MOVL	BX, 0(SP)
 	MOVL	$runtime·badsignal(SB), AX
 	CALL	AX
-	JMP 	sigtramp_ret
+	JMP 	ret
 
 	// save g
 	MOVL	DI, 20(SP)
@@ -243,7 +243,7 @@ TEXT runtime·sigtramp(SB),NOSPLIT,$44
 	MOVL	20(SP), BX
 	MOVL	BX, g(CX)
 
-sigtramp_ret:
+ret:
 	// call sigreturn
 	MOVL	context+8(FP), AX
 	MOVL	$0, 0(SP)	// syscall gap
diff --git a/src/runtime/sys_freebsd_386.s b/src/runtime/sys_freebsd_386.s
index 2c40fc433b..66d03c27da 100644
--- a/src/runtime/sys_freebsd_386.s
+++ b/src/runtime/sys_freebsd_386.s
@@ -197,7 +197,7 @@ TEXT runtime·sigtramp(SB),NOSPLIT,$44
 	MOVL	BX, 0(SP)
 	MOVL	$runtime·badsignal(SB), AX
 	CALL	AX
-	JMP 	sigtramp_ret
+	JMP 	ret
 
 	// save g
 	MOVL	DI, 20(SP)
@@ -223,7 +223,7 @@ TEXT runtime·sigtramp(SB),NOSPLIT,$44
 	MOVL	20(SP), BX
 	MOVL	BX, g(CX)
 
-sigtramp_ret:
+ret:
 	// call sigreturn
 	MOVL	context+8(FP), AX
 	MOVL	$0, 0(SP)	// syscall gap
diff --git a/src/runtime/sys_linux_amd64.s b/src/runtime/sys_linux_amd64.s
index 33b91e872f..d8d86ffadf 100644
--- a/src/runtime/sys_linux_amd64.s
+++ b/src/runtime/sys_linux_amd64.s
@@ -115,7 +115,7 @@ TEXT time·now(SB),NOSPLIT,$16
 	// That leaves 104 for the gettime code to use. Hope that's enough!
 	MOVQ	runtime·__vdso_clock_gettime_sym(SB), AX
 	CMPQ	AX, $0
-	JEQ	fallback_gtod
+	JEQ	fallback
 	MOVL	$0, DI // CLOCK_REALTIME
 	LEAQ	0(SP), SI
 	CALL	AX
@@ -124,7 +124,7 @@ TEXT time·now(SB),NOSPLIT,$16
 	MOVQ	AX, sec+0(FP)
 	MOVL	DX, nsec+8(FP)
 	RET
-fallback_gtod:
+fallback:
 	LEAQ	0(SP), DI
 	MOVQ	$0, SI
 	MOVQ	runtime·__vdso_gettimeofday_sym(SB), AX
@@ -141,7 +141,7 @@ TEXT runtime·nanotime(SB),NOSPLIT,$16
 	// See comment above in time.now.
 	MOVQ	runtime·__vdso_clock_gettime_sym(SB), AX
 	CMPQ	AX, $0
-	JEQ	fallback_gtod_nt
+	JEQ	fallback
 	MOVL	$1, DI // CLOCK_MONOTONIC
 	LEAQ	0(SP), SI
 	CALL	AX
@@ -153,7 +153,7 @@ TEXT runtime·nanotime(SB),NOSPLIT,$16
 	ADDQ	DX, AX
 	MOVQ	AX, ret+0(FP)
 	RET
-fallback_gtod_nt:
+fallback:
 	LEAQ	0(SP), DI
 	MOVQ	$0, SI
 	MOVQ	runtime·__vdso_gettimeofday_sym(SB), AX
diff --git a/src/runtime/sys_linux_arm.s b/src/runtime/sys_linux_arm.s
index bd285f3998..033a036427 100644
--- a/src/runtime/sys_linux_arm.s
+++ b/src/runtime/sys_linux_arm.s
@@ -373,20 +373,20 @@ TEXT cas<>(SB),NOSPLIT,$0
 TEXT runtime·cas(SB),NOSPLIT,$0
 	MOVW	ptr+0(FP), R2
 	MOVW	old+4(FP), R0
-casagain:
+loop:
 	MOVW	new+8(FP), R1
 	BL	cas<>(SB)
-	BCC	cascheck
+	BCC	check
 	MOVW	$1, R0
 	MOVB	R0, ret+12(FP)
 	RET
-cascheck:
+check:
 	// Kernel lies; double-check.
 	MOVW	ptr+0(FP), R2
 	MOVW	old+4(FP), R0
 	MOVW	0(R2), R3
 	CMP	R0, R3
-	BEQ	casagain
+	BEQ	loop
 	MOVW	$0, R0
 	MOVB	R0, ret+12(FP)
 	RET
diff --git a/src/runtime/sys_nacl_386.s b/src/runtime/sys_nacl_386.s
index 47985f31f5..16cd721d9b 100644
--- a/src/runtime/sys_nacl_386.s
+++ b/src/runtime/sys_nacl_386.s
@@ -293,7 +293,7 @@ TEXT runtime·sigtramp(SB),NOSPLIT,$0
 	MOVL	$0, 0(SP)
 	MOVL	$runtime·badsignal(SB), AX
 	CALL	AX
-	JMP 	sigtramp_ret
+	JMP 	ret
 
 	// save g
 	MOVL	DI, 20(SP)
@@ -317,7 +317,7 @@ TEXT runtime·sigtramp(SB),NOSPLIT,$0
 	MOVL	20(SP), BX
 	MOVL	BX, g(CX)
 
-sigtramp_ret:
+ret:
 	// Enable exceptions again.
 	NACL_SYSCALL(SYS_exception_clear_flag)
 
diff --git a/src/runtime/sys_nacl_amd64p32.s b/src/runtime/sys_nacl_amd64p32.s
index c30c2a8933..06a0dc5dd7 100644
--- a/src/runtime/sys_nacl_amd64p32.s
+++ b/src/runtime/sys_nacl_amd64p32.s
@@ -338,7 +338,6 @@ TEXT runtime·sigtramp(SB),NOSPLIT,$80
 	MOVL	20(SP), BX
 	MOVL	BX, g(CX)
 
-sigtramp_ret:
 	// Enable exceptions again.
 	NACL_SYSCALL(SYS_exception_clear_flag)
 
diff --git a/src/runtime/sys_nacl_arm.s b/src/runtime/sys_nacl_arm.s
index d354ab4837..432deadf44 100644
--- a/src/runtime/sys_nacl_arm.s
+++ b/src/runtime/sys_nacl_arm.s
@@ -269,7 +269,6 @@ TEXT runtime·sigtramp(SB),NOSPLIT,$80
 	// restore g
 	MOVW	20(R13), g
 
-sigtramp_ret:
 	// Enable exceptions again.
 	NACL_SYSCALL(SYS_exception_clear_flag)
 
diff --git a/src/runtime/sys_openbsd_386.s b/src/runtime/sys_openbsd_386.s
index 5cda7768ae..b1ae5eceec 100644
--- a/src/runtime/sys_openbsd_386.s
+++ b/src/runtime/sys_openbsd_386.s
@@ -186,7 +186,7 @@ TEXT runtime·sigtramp(SB),NOSPLIT,$44
 	MOVL	BX, 0(SP)
 	MOVL	$runtime·badsignal(SB), AX
 	CALL	AX
-	JMP 	sigtramp_ret
+	JMP 	ret
 
 	// save g
 	MOVL	DI, 20(SP)
@@ -212,7 +212,7 @@ TEXT runtime·sigtramp(SB),NOSPLIT,$44
 	MOVL	20(SP), BX
 	MOVL	BX, g(CX)
 
-sigtramp_ret:
+ret:
 	// call sigreturn
 	MOVL	context+8(FP), AX
 	MOVL	$0, 0(SP)		// syscall gap
diff --git a/src/runtime/sys_solaris_amd64.s b/src/runtime/sys_solaris_amd64.s
index 0ebdab6ee2..3981893b01 100644
--- a/src/runtime/sys_solaris_amd64.s
+++ b/src/runtime/sys_solaris_amd64.s
@@ -287,24 +287,24 @@ TEXT runtime·usleep1(SB),NOSPLIT,$0
 	// Execute call on m->g0.
 	get_tls(R15)
 	CMPQ	R15, $0
-	JE	usleep1_noswitch
+	JE	noswitch
 
 	MOVQ	g(R15), R13
 	CMPQ	R13, $0
-	JE	usleep1_noswitch
+	JE	noswitch
 	MOVQ	g_m(R13), R13
 	CMPQ	R13, $0
-	JE	usleep1_noswitch
+	JE	noswitch
 	// TODO(aram): do something about the cpu profiler here.
 
 	MOVQ	m_g0(R13), R14
 	CMPQ	g(R15), R14
-	JNE	usleep1_switch
+	JNE	switch
 	// executing on m->g0 already
 	CALL	AX
 	RET
 
-usleep1_switch:
+switch:
 	// Switch to m->g0 stack and back.
 	MOVQ	(g_sched+gobuf_sp)(R14), R14
 	MOVQ	SP, -8(R14)
@@ -313,7 +313,7 @@ usleep1_switch:
 	MOVQ	0(SP), SP
 	RET
 
-usleep1_noswitch:
+noswitch:
 	// Not a Go-managed thread. Do not switch stack.
 	CALL	AX
 	RET
diff --git a/src/runtime/sys_windows_386.s b/src/runtime/sys_windows_386.s
index 932fe9dd24..13fb5bdc93 100644
--- a/src/runtime/sys_windows_386.s
+++ b/src/runtime/sys_windows_386.s
@@ -106,7 +106,7 @@ TEXT runtime·sigtramp(SB),NOSPLIT,$0-0
 	MOVL	g_m(DX), BX
 	MOVL	m_g0(BX), BX
 	CMPL	DX, BX
-	JEQ	sigtramp_g0
+	JEQ	g0
 
 	// switch to the g0 stack
 	get_tls(BP)
@@ -123,7 +123,7 @@ TEXT runtime·sigtramp(SB),NOSPLIT,$0-0
 	MOVL	SP, 36(DI)
 	MOVL	DI, SP
 
-sigtramp_g0:
+g0:
 	MOVL	0(CX), BX // ExceptionRecord*
 	MOVL	4(CX), CX // Context*
 	MOVL	BX, 0(SP)
@@ -383,12 +383,12 @@ TEXT runtime·usleep1(SB),NOSPLIT,$0
 
 	MOVL	m_g0(BP), SI
 	CMPL	g(CX), SI
-	JNE	usleep1_switch
+	JNE	switch
 	// executing on m->g0 already
 	CALL	AX
-	JMP	usleep1_ret
+	JMP	ret
 
-usleep1_switch:
+switch:
 	// Switch to m->g0 stack and back.
 	MOVL	(g_sched+gobuf_sp)(SI), SI
 	MOVL	SP, -4(SI)
@@ -396,7 +396,7 @@ usleep1_switch:
 	CALL	AX
 	MOVL	0(SP), SP
 
-usleep1_ret:
+ret:
 	get_tls(CX)
 	MOVL	g(CX), BP
 	MOVL	g_m(BP), BP
diff --git a/src/runtime/sys_windows_amd64.s b/src/runtime/sys_windows_amd64.s
index e6190ce684..8b95f6d6c1 100644
--- a/src/runtime/sys_windows_amd64.s
+++ b/src/runtime/sys_windows_amd64.s
@@ -138,7 +138,7 @@ TEXT runtime·sigtramp(SB),NOSPLIT,$0-0
 	MOVQ	g_m(DX), BX
 	MOVQ	m_g0(BX), BX
 	CMPQ	DX, BX
-	JEQ	sigtramp_g0
+	JEQ	g0
 
 	// switch to g0 stack
 	get_tls(BP)
@@ -157,7 +157,7 @@ TEXT runtime·sigtramp(SB),NOSPLIT,$0-0
 	MOVQ	SP, 104(DI)
 	MOVQ	DI, SP
 
-sigtramp_g0:
+g0:
 	MOVQ	0(CX), BX // ExceptionRecord*
 	MOVQ	8(CX), CX // Context*
 	MOVQ	BX, 0(SP)
@@ -407,12 +407,12 @@ TEXT runtime·usleep1(SB),NOSPLIT,$0
 
 	MOVQ	m_g0(R13), R14
 	CMPQ	g(R15), R14
-	JNE	usleep1_switch
+	JNE	switch
 	// executing on m->g0 already
 	CALL	AX
-	JMP	usleep1_ret
+	JMP	ret
 
-usleep1_switch:
+switch:
 	// Switch to m->g0 stack and back.
 	MOVQ	(g_sched+gobuf_sp)(R14), R14
 	MOVQ	SP, -8(R14)
@@ -420,7 +420,7 @@ usleep1_switch:
 	CALL	AX
 	MOVQ	0(SP), SP
 
-usleep1_ret:
+ret:
 	MOVQ	$0, m_libcallsp(R13)
 	RET
 
