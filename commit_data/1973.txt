commit 7cbec417b1d1726f1cea5149a0b4138e5da1ce54
Author: Russ Cox <rsc@golang.org>
Date:   Tue Apr 7 21:53:39 2009 -0700

    fumbly fingers + non-working ^C
    submitted CL without applying edits.
    
    make changes from CL 27142 review
    
    R=r
    DELTA=26  (17 added, 3 deleted, 6 changed)
    OCL=27155
    CL=27199
---
 src/lib/path.go      | 11 ++++-------
 src/lib/path_test.go | 21 +++++++++++++++++++--
 2 files changed, 23 insertions(+), 9 deletions(-)

diff --git a/src/lib/path.go b/src/lib/path.go
index fdfcd4bfdf..a7e2c26c3e 100644
--- a/src/lib/path.go
+++ b/src/lib/path.go
@@ -12,9 +12,9 @@ import "io"
 // by purely lexical processing.  It applies the following rules
 // iteratively until no further processing can be done:
 //
-//	1. Replace multiple slashes by a single slash.
+//	1. Replace multiple slashes with a single slash.
 //	2. Eliminate each . path name element (the current directory).
-//	3. Eliminate each .. path name element (the parent directory)
+//	3. Eliminate each inner .. path name element (the parent directory)
 //	   along with the non-.. element that precedes it.
 //	4. Eliminate .. elements that begin a rooted path:
 //	   that is, replace "/.." by "/" at the beginning of a path.
@@ -114,13 +114,10 @@ func Split(path string) (dir, file string) {
 // Join joins dir and file into a single path, adding a separating
 // slash if necessary.  If dir is empty, it returns file.
 func Join(dir, file string) string {
-	switch {
-	case dir == "":
+	if dir == "" {
 		return file;
-	case dir[len(dir)-1] == '/':
-		return dir + file;
 	}
-	return dir + "/" + file;
+	return Clean(dir + "/" + file);
 }
 
 // Ext returns the file name extension used by path.
diff --git a/src/lib/path_test.go b/src/lib/path_test.go
index 067b1d068c..1238ac1cd2 100644
--- a/src/lib/path_test.go
+++ b/src/lib/path_test.go
@@ -97,12 +97,20 @@ type JoinTest struct {
 
 var jointests = []JoinTest {
 	JoinTest{"a", "b", "a/b"},
-	JoinTest{"a", "", "a/"},
+	JoinTest{"a", "", "a"},
 	JoinTest{"", "b", "b"},
 	JoinTest{"/", "a", "/a"},
 	JoinTest{"/", "", "/"},
 	JoinTest{"a/", "b", "a/b"},
-	JoinTest{"a/", "", "a/"},
+	JoinTest{"a/", "", "a"},
+}
+
+func TestJoin(t *testing.T) {
+	for i, test := range jointests {
+		if p := Join(test.dir, test.file); p != test.path {
+			t.Errorf("Join(%q, %q) = %q, want %q", test.dir, test.file, p, test.path);
+		}
+	}
 }
 
 type ExtTest struct {
@@ -117,3 +125,12 @@ var exttests = []ExtTest {
 	ExtTest{"a.dir/b.go", ".go"},
 	ExtTest{"a.dir/", ""},
 }
+
+func TestExt(t *testing.T) {
+	for i, test := range exttests {
+		if x := Ext(test.path); x != test.ext {
+			t.Errorf("Ext(%q) = %q, want %q", test.path, x, test.ext);
+		}
+	}
+}
+
