commit 84f53339befccbb4c3449955e205a6a727282f10
Author: Russ Cox <rsc@golang.org>
Date:   Thu Mar 5 09:52:41 2015 -0500

    runtime: apply comments from CL 3742
    
    I asked for this in CL 3742 and it was ignored.
    
    Change-Id: I30ad05f87c7d9eccb11df7e19288e3ed2c7e2e3f
    Reviewed-on: https://go-review.googlesource.com/6930
    Reviewed-by: Dmitry Vyukov <dvyukov@google.com>
---
 src/runtime/panic.go | 16 ++++++++--------
 src/runtime/proc.go  | 16 ++++++++--------
 2 files changed, 16 insertions(+), 16 deletions(-)

diff --git a/src/runtime/panic.go b/src/runtime/panic.go
index 9507384b92..9b937f5ad7 100644
--- a/src/runtime/panic.go
+++ b/src/runtime/panic.go
@@ -176,10 +176,10 @@ func newdefer(siz int32) *_defer {
 			}
 			unlock(&sched.deferlock)
 		}
-		if ln := len(pp.deferpool[sc]); ln > 0 {
-			d = pp.deferpool[sc][ln-1]
-			pp.deferpool[sc][ln-1] = nil
-			pp.deferpool[sc] = pp.deferpool[sc][:ln-1]
+		if n := len(pp.deferpool[sc]); n > 0 {
+			d = pp.deferpool[sc][n-1]
+			pp.deferpool[sc][n-1] = nil
+			pp.deferpool[sc] = pp.deferpool[sc][:n-1]
 		}
 	}
 	if d == nil {
@@ -228,10 +228,10 @@ func freedefer(d *_defer) {
 			// Transfer half of local cache to the central cache.
 			var first, last *_defer
 			for len(pp.deferpool[sc]) > cap(pp.deferpool[sc])/2 {
-				ln := len(pp.deferpool[sc])
-				d := pp.deferpool[sc][ln-1]
-				pp.deferpool[sc][ln-1] = nil
-				pp.deferpool[sc] = pp.deferpool[sc][:ln-1]
+				n := len(pp.deferpool[sc])
+				d := pp.deferpool[sc][n-1]
+				pp.deferpool[sc][n-1] = nil
+				pp.deferpool[sc] = pp.deferpool[sc][:n-1]
 				if first == nil {
 					first = d
 				} else {
diff --git a/src/runtime/proc.go b/src/runtime/proc.go
index d83b1bebf4..ae52826993 100644
--- a/src/runtime/proc.go
+++ b/src/runtime/proc.go
@@ -192,10 +192,10 @@ func acquireSudog() *sudog {
 			pp.sudogcache = append(pp.sudogcache, new(sudog))
 		}
 	}
-	ln := len(pp.sudogcache)
-	s := pp.sudogcache[ln-1]
-	pp.sudogcache[ln-1] = nil
-	pp.sudogcache = pp.sudogcache[:ln-1]
+	n := len(pp.sudogcache)
+	s := pp.sudogcache[n-1]
+	pp.sudogcache[n-1] = nil
+	pp.sudogcache = pp.sudogcache[:n-1]
 	if s.elem != nil {
 		throw("acquireSudog: found s.elem != nil in cache")
 	}
@@ -230,10 +230,10 @@ func releaseSudog(s *sudog) {
 		// Transfer half of local cache to the central cache.
 		var first, last *sudog
 		for len(pp.sudogcache) > cap(pp.sudogcache)/2 {
-			ln := len(pp.sudogcache)
-			p := pp.sudogcache[ln-1]
-			pp.sudogcache[ln-1] = nil
-			pp.sudogcache = pp.sudogcache[:ln-1]
+			n := len(pp.sudogcache)
+			p := pp.sudogcache[n-1]
+			pp.sudogcache[n-1] = nil
+			pp.sudogcache = pp.sudogcache[:n-1]
 			if first == nil {
 				first = p
 			} else {
