commit f23c37f67ac1388b7d073f78d9061bfe806a1b2f
Author: Ian Lance Taylor <iant@golang.org>
Date:   Mon Oct 5 11:05:10 2015 -0700

    net: remove imports of strconv
    
    The net package already has support for limited uses of the strconv
    package.  Despite this, a few uses of strconv have crept in over time.
    Remove them and use the existing net support instead.
    
    Change-Id: Icdb4bdaa8e1197f1119a96cddcf548ed4a551b74
    Reviewed-on: https://go-review.googlesource.com/15400
    Run-TryBot: Ian Lance Taylor <iant@golang.org>
    Reviewed-by: Brad Fitzpatrick <bradfitz@golang.org>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
---
 src/go/build/deps_test.go      | 4 ++--
 src/net/conf.go                | 3 +--
 src/net/dnsclient_unix.go      | 3 +--
 src/net/lookup_windows_test.go | 5 ++---
 src/net/tcpsockopt_plan9.go    | 3 +--
 5 files changed, 7 insertions(+), 11 deletions(-)

diff --git a/src/go/build/deps_test.go b/src/go/build/deps_test.go
index 7cea94927d..62bcb12a23 100644
--- a/src/go/build/deps_test.go
+++ b/src/go/build/deps_test.go
@@ -271,8 +271,8 @@ var pkgDeps = map[string][]string{
 
 	// Basic networking.
 	// Because net must be used by any package that wants to
-	// do networking portably, it must have a small dependency set: just L1+basic os.
-	"net": {"L1", "CGO", "os", "syscall", "time", "internal/syscall/windows", "internal/singleflight"},
+	// do networking portably, it must have a small dependency set: just L0+basic os.
+	"net": {"L0", "CGO", "math/rand", "os", "sort", "syscall", "time", "internal/syscall/windows", "internal/singleflight"},
 
 	// NET enables use of basic network-related packages.
 	"NET": {
diff --git a/src/net/conf.go b/src/net/conf.go
index c92e579d7e..ddaa978f4f 100644
--- a/src/net/conf.go
+++ b/src/net/conf.go
@@ -9,7 +9,6 @@ package net
 import (
 	"os"
 	"runtime"
-	"strconv"
 	"sync"
 	"syscall"
 )
@@ -293,7 +292,7 @@ func goDebugNetDNS() (dnsMode string, debugLevel int) {
 			return
 		}
 		if '0' <= s[0] && s[0] <= '9' {
-			debugLevel, _ = strconv.Atoi(s)
+			debugLevel, _, _ = dtoi(s, 0)
 		} else {
 			dnsMode = s
 		}
diff --git a/src/net/dnsclient_unix.go b/src/net/dnsclient_unix.go
index 1fbe085bbf..94282ee79e 100644
--- a/src/net/dnsclient_unix.go
+++ b/src/net/dnsclient_unix.go
@@ -20,7 +20,6 @@ import (
 	"io"
 	"math/rand"
 	"os"
-	"strconv"
 	"sync"
 	"time"
 )
@@ -371,7 +370,7 @@ func (o hostLookupOrder) String() string {
 	if s, ok := lookupOrderName[o]; ok {
 		return s
 	}
-	return "hostLookupOrder=" + strconv.Itoa(int(o)) + "??"
+	return "hostLookupOrder=" + itoa(int(o)) + "??"
 }
 
 // goLookupHost is the native Go implementation of LookupHost.
diff --git a/src/net/lookup_windows_test.go b/src/net/lookup_windows_test.go
index 3f64d8cec8..8368ad4bd5 100644
--- a/src/net/lookup_windows_test.go
+++ b/src/net/lookup_windows_test.go
@@ -12,7 +12,6 @@ import (
 	"reflect"
 	"regexp"
 	"sort"
-	"strconv"
 	"strings"
 	"testing"
 )
@@ -184,14 +183,14 @@ func nslookupMX(name string) (mx []*MX, err error) {
 	// golang.org      mail exchanger = 2 alt1.aspmx.l.google.com.
 	rx := regexp.MustCompile(`(?m)^([a-z0-9.\-]+)\s+mail exchanger\s*=\s*([0-9]+)\s*([a-z0-9.\-]+)$`)
 	for _, ans := range rx.FindAllStringSubmatch(r, -1) {
-		pref, _ := strconv.Atoi(ans[2])
+		pref, _, _ := dtoi(ans[2], 0)
 		mx = append(mx, &MX{fqdn(ans[3]), uint16(pref)})
 	}
 	// windows nslookup syntax
 	// gmail.com       MX preference = 30, mail exchanger = alt3.gmail-smtp-in.l.google.com
 	rx = regexp.MustCompile(`(?m)^([a-z0-9.\-]+)\s+MX preference\s*=\s*([0-9]+)\s*,\s*mail exchanger\s*=\s*([a-z0-9.\-]+)$`)
 	for _, ans := range rx.FindAllStringSubmatch(r, -1) {
-		pref, _ := strconv.Atoi(ans[2])
+		pref, _, _ := dtoi(ans[2], 0)
 		mx = append(mx, &MX{fqdn(ans[3]), uint16(pref)})
 	}
 	return
diff --git a/src/net/tcpsockopt_plan9.go b/src/net/tcpsockopt_plan9.go
index 9abe186cec..157282abd3 100644
--- a/src/net/tcpsockopt_plan9.go
+++ b/src/net/tcpsockopt_plan9.go
@@ -7,13 +7,12 @@
 package net
 
 import (
-	"strconv"
 	"time"
 )
 
 // Set keep alive period.
 func setKeepAlivePeriod(fd *netFD, d time.Duration) error {
-	cmd := "keepalive " + strconv.Itoa(int(d/time.Millisecond))
+	cmd := "keepalive " + itoa(int(d/time.Millisecond))
 	_, e := fd.ctl.WriteAt([]byte(cmd), 0)
 	return e
 }
