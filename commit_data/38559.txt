commit c1a16b7dadfee27b03a2a70a20c3cf339a069a40
Author: Josh Bleecher Snyder <josharian@gmail.com>
Date:   Sun Oct 28 11:19:33 2018 -0700

    cmd/compile: loop in disjoint OpOffPtr check
    
    We collapse OpOffPtrs during generic rewrites.
    However, we also use disjoint at the same time.
    Instead of waiting for all OpOffPtrs to be collapsed
    before the disjointness rules can kick in,
    burrow through all OpOffPtrs immediately.
    
    Change-Id: I60d0a70a9b4605b1817db7c4aab0c0d789651c90
    Reviewed-on: https://go-review.googlesource.com/c/145206
    Run-TryBot: Josh Bleecher Snyder <josharian@gmail.com>
    Reviewed-by: Michael Munday <mike.munday@ibm.com>
    Reviewed-by: Keith Randall <khr@golang.org>
---
 src/cmd/compile/internal/ssa/rewrite.go | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/cmd/compile/internal/ssa/rewrite.go b/src/cmd/compile/internal/ssa/rewrite.go
index ed5bce861e..17d7cb3414 100644
--- a/src/cmd/compile/internal/ssa/rewrite.go
+++ b/src/cmd/compile/internal/ssa/rewrite.go
@@ -542,7 +542,7 @@ func disjoint(p1 *Value, n1 int64, p2 *Value, n2 int64) bool {
 	}
 	baseAndOffset := func(ptr *Value) (base *Value, offset int64) {
 		base, offset = ptr, 0
-		if base.Op == OpOffPtr {
+		for base.Op == OpOffPtr {
 			offset += base.AuxInt
 			base = base.Args[0]
 		}
