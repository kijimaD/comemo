commit 185ae4f99e4ac5a56471fb47d866e65d2ac04da9
Author: Rob Pike <r@golang.org>
Date:   Thu Aug 27 18:23:45 2009 -0700

    add Sort methods for convenience types
    
    R=gri
    DELTA=9  (9 added, 0 deleted, 0 changed)
    OCL=34000
    CL=34003
---
 src/pkg/sort/sort.go | 9 +++++++++
 1 file changed, 9 insertions(+)

diff --git a/src/pkg/sort/sort.go b/src/pkg/sort/sort.go
index 99ba0a0ef1..70c746de64 100644
--- a/src/pkg/sort/sort.go
+++ b/src/pkg/sort/sort.go
@@ -152,6 +152,9 @@ func (p IntArray) Len() int            { return len(p); }
 func (p IntArray) Less(i, j int) bool  { return p[i] < p[j]; }
 func (p IntArray) Swap(i, j int)       { p[i], p[j] = p[j], p[i]; }
 
+// Sort is a convenience method.
+func (p IntArray) Sort()       { Sort(p); }
+
 
 // FloatArray attaches the methods of SortInterface to []float, sorting in increasing order.
 type FloatArray  []float
@@ -160,6 +163,9 @@ func (p FloatArray) Len() int            { return len(p); }
 func (p FloatArray) Less(i, j int) bool  { return p[i] < p[j]; }
 func (p FloatArray) Swap(i, j int)       { p[i], p[j] = p[j], p[i]; }
 
+// Sort is a convenience method.
+ffunc (p FloatArray) Sort()       { Sort(p); }
+
 
 // StringArray attaches the methods of SortInterface to []string, sorting in increasing order.
 type StringArray []string
@@ -168,6 +174,9 @@ func (p StringArray) Len() int            { return len(p); }
 func (p StringArray) Less(i, j int) bool  { return p[i] < p[j]; }
 func (p StringArray) Swap(i, j int)       { p[i], p[j] = p[j], p[i]; }
 
+// Sort is a convenience method.
+ffunc (p StringArray) Sort()       { Sort(p); }
+
 
 // Convenience wrappers for common cases
 
