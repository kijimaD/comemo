commit ad646b33c9fd2366c91a44b262910c1064b24f11
Author: mzh <mzh@golangcn.org>
Date:   Sun Mar 27 23:08:32 2022 +0000

    Revert "reflect, runtime: add reflect support for regabi on riscv64"
    
    This reverts commit 56400fc70675cc2f404f33e3ed13386967cfe4da.
    
    Reason for revert: this CL requires CL360296 be merged
    
    Change-Id: I4c48c4d23b73b6e892cf86cbbc864698ebc5c992
    Reviewed-on: https://go-review.googlesource.com/c/go/+/396076
    Reviewed-by: Ian Lance Taylor <iant@golang.org>
    Trust: mzh <mzh@golangcn.org>
    Run-TryBot: mzh <mzh@golangcn.org>
    TryBot-Result: Gopher Robot <gobot@golang.org>
---
 src/reflect/asm_riscv64.s | 54 +++++++----------------------------------------
 src/runtime/stack.go      |  3 +--
 2 files changed, 9 insertions(+), 48 deletions(-)

diff --git a/src/reflect/asm_riscv64.s b/src/reflect/asm_riscv64.s
index 8ca1d3bbd9..e707112277 100644
--- a/src/reflect/asm_riscv64.s
+++ b/src/reflect/asm_riscv64.s
@@ -5,72 +5,34 @@
 #include "textflag.h"
 #include "funcdata.h"
 
-// The frames of each of the two functions below contain two locals, at offsets
-// that are known to the runtime.
-//
-// The first local is a bool called retValid with a whole pointer-word reserved
-// for it on the stack. The purpose of this word is so that the runtime knows
-// whether the stack-allocated return space contains valid values for stack
-// scanning.
-//
-// The second local is an abi.RegArgs value whose offset is also known to the
-// runtime, so that a stack map for it can be constructed, since it contains
-// pointers visible to the GC.
-#define LOCAL_RETVALID 40
-#define LOCAL_REGARGS 48
-
-// The frame size of the functions below is
-// 32 (args of callReflect/callMethod) + (8 bool with padding) + 392 (abi.RegArgs) = 432.
-
 // makeFuncStub is the code half of the function returned by MakeFunc.
 // See the comment on the declaration of makeFuncStub in makefunc.go
 // for more details.
 // No arg size here, runtime pulls arg map out of the func value.
-TEXT ·makeFuncStub(SB),(NOSPLIT|WRAPPER),$432
+TEXT ·makeFuncStub(SB),(NOSPLIT|WRAPPER),$40
 	NO_LOCAL_POINTERS
-	ADD	$LOCAL_REGARGS, SP, X25 // spillArgs using X25
-	CALL	runtime·spillArgs(SB)
-	MOV	CTXT, 32(SP) // save CTXT > args of moveMakeFuncArgPtrs < LOCAL_REGARGS
-	MOV	CTXT, 8(SP)
-	MOV	X25, 16(SP)
-	CALL	·moveMakeFuncArgPtrs(SB)
-	MOV	32(SP), CTXT // restore CTXT
-
 	MOV	CTXT, 8(SP)
 	MOV	$argframe+0(FP), T0
 	MOV	T0, 16(SP)
-	MOV	ZERO, LOCAL_RETVALID(SP)
-	ADD	$LOCAL_RETVALID, SP, T1
+	ADD	$40, SP, T1
 	MOV	T1, 24(SP)
-	MOV	$LOCAL_REGARGS, SP, T1
-	MOV	T1, 32(SP)
+	MOV	ZERO, 32(SP)
+	MOVB	ZERO, 40(SP)
 	CALL	·callReflect(SB)
-	ADD	$LOCAL_REGARGS, SP, X25 // unspillArgs using X25
-	CALL	runtime·unspillArgs(SB)
 	RET
 
 // methodValueCall is the code half of the function returned by makeMethodValue.
 // See the comment on the declaration of methodValueCall in makefunc.go
 // for more details.
 // No arg size here; runtime pulls arg map out of the func value.
-TEXT ·methodValueCall(SB),(NOSPLIT|WRAPPER),$432
+TEXT ·methodValueCall(SB),(NOSPLIT|WRAPPER),$40
 	NO_LOCAL_POINTERS
-	ADD	$LOCAL_REGARGS, SP, X25 // spillArgs using X25
-	CALL	runtime·spillArgs(SB)
-	MOV	CTXT, 32(SP) // save CTXT
-	MOV	CTXT, 8(SP)
-	MOV	X25, 16(SP)
-	CALL	·moveMakeFuncArgPtrs(SB)
-	MOV	32(SP), CTXT // restore CTXT
 	MOV	CTXT, 8(SP)
 	MOV	$argframe+0(FP), T0
 	MOV	T0, 16(SP)
-	MOV	ZERO, LOCAL_RETVALID(SP)
-	ADD	$LOCAL_RETVALID, SP, T1
+	ADD	$40, SP, T1
 	MOV	T1, 24(SP)
-	MOV	$LOCAL_REGARGS, SP, T1
-	MOV	T1, 32(SP) // frame size to 32+SP as callreflect args
+	MOV	ZERO, 32(SP)
+	MOVB	ZERO, 40(SP)
 	CALL	·callMethod(SB)
-	ADD	$LOCAL_REGARGS, SP, X25 // unspillArgs using X25
-	CALL	runtime·unspillArgs(SB)
 	RET
diff --git a/src/runtime/stack.go b/src/runtime/stack.go
index 54a02173c3..edc37d4878 100644
--- a/src/runtime/stack.go
+++ b/src/runtime/stack.go
@@ -1332,8 +1332,7 @@ func getStackMap(frame *stkframe, cache *pcvalueCache, debug bool) (locals, args
 	}
 
 	// stack objects.
-	if (GOARCH == "amd64" || GOARCH == "arm64" || GOARCH == "ppc64" || GOARCH == "ppc64le" || GOARCH == "riscv64") &&
-		unsafe.Sizeof(abi.RegArgs{}) > 0 && frame.argmap != nil {
+	if (GOARCH == "amd64" || GOARCH == "arm64" || GOARCH == "ppc64" || GOARCH == "ppc64le") && unsafe.Sizeof(abi.RegArgs{}) > 0 && frame.argmap != nil {
 		// argmap is set when the function is reflect.makeFuncStub or reflect.methodValueCall.
 		// We don't actually use argmap in this case, but we need to fake the stack object
 		// record for these frames which contain an internal/abi.RegArgs at a hard-coded offset.
