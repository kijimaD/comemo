commit 890b96f7abd8ba5b2243959d9b49c212a0fc4d78
Author: Meng Zhuo <mzh@golangcn.org>
Date:   Tue Jul 11 14:53:54 2023 +0800

    cmd/asm, cmd/internal/obj: generate proper atomic ops for riscv64
    
    Go's memory model closely follows the approach C++ concurrency memory
    model (https://go.dev/ref/mem) and Go atomic "has the same semantics as C++'s
    sequentially consistent atomics".
    
    Meanwhile according to RISCV manual A.6 "Mappings from C/C++ primitives to RISC-V primitives".
    C/C++ atomic operations (memory_order_acq_rel) should be map to "amo<op>.{w|d}.aqrl"
    LR/SC (memory_order_acq_rel) should map to "lr.{w|d}.aq; <op>; sc.{w|d}.rl"
    
    goos: linux
    goarch: riscv64
    pkg: runtime/internal/atomic
                    │ atomic.old.bench │          atomic.new.bench           │
                    │      sec/op      │   sec/op     vs base                │
    AtomicLoad64-4         4.216n ± 1%   4.202n ± 0%        ~ (p=0.127 n=10)
    AtomicStore64-4        5.040n ± 0%   6.718n ± 0%  +33.30% (p=0.000 n=10)
    AtomicLoad-4           4.217n ± 0%   4.213n ± 0%        ~ (p=0.145 n=10)
    AtomicStore-4          5.040n ± 0%   6.718n ± 0%  +33.30% (p=0.000 n=10)
    And8-4                 9.237n ± 0%   9.240n ± 0%        ~ (p=0.582 n=10)
    And-4                  5.878n ± 0%   6.719n ± 0%  +14.31% (p=0.000 n=10)
    And8Parallel-4         28.44n ± 0%   28.46n ± 0%   +0.07% (p=0.000 n=10)
    AndParallel-4          28.40n ± 0%   28.43n ± 0%   +0.11% (p=0.000 n=10)
    Or8-4                  8.399n ± 0%   8.398n ± 0%        ~ (p=0.357 n=10)
    Or-4                   5.879n ± 0%   6.718n ± 0%  +14.27% (p=0.000 n=10)
    Or8Parallel-4          28.43n ± 0%   28.45n ± 0%   +0.09% (p=0.000 n=10)
    OrParallel-4           28.40n ± 0%   28.43n ± 0%   +0.11% (p=0.000 n=10)
    Xadd-4                 30.05n ± 0%   30.10n ± 0%   +0.18% (p=0.000 n=10)
    Xadd64-4               30.05n ± 0%   30.09n ± 0%   +0.12% (p=0.000 n=10)
    Cas-4                  60.48n ± 0%   61.13n ± 0%   +1.08% (p=0.000 n=10)
    Cas64-4                62.28n ± 0%   62.34n ± 0%        ~ (p=0.810 n=10)
    Xchg-4                 30.05n ± 0%   30.09n ± 0%   +0.15% (p=0.000 n=10)
    Xchg64-4               30.05n ± 0%   30.09n ± 0%   +0.13% (p=0.000 n=10)
    geomean                15.42n        16.17n        +4.89%
    
    Fixes #61295
    
    Change-Id: I97b5325db50467eeec36fb079bded7b09a32330f
    Reviewed-on: https://go-review.googlesource.com/c/go/+/508715
    Reviewed-by: Austin Clements <austin@google.com>
    Reviewed-by: Joel Sing <joel@sing.id.au>
    Run-TryBot: M Zhuo <mzh@golangcn.org>
    Reviewed-by: Cherry Mui <cherryyz@google.com>
    Reviewed-by: Bryan Mills <bcmills@google.com>
    TryBot-Result: Gopher Robot <gobot@golang.org>

 src/cmd/asm/internal/asm/testdata/riscv64.s | 40 ++++++++++++++---------------
 src/cmd/internal/obj/riscv/obj.go           | 13 +++++++---
 2 files changed, 29 insertions(+), 24 deletions(-)
