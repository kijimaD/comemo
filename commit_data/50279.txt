commit 24e798e2876f05d628f1e9a32ce8c7f4a3ed3268
Author: Tobias Klauser <tklauser@distanz.ch>
Date:   Wed Oct 13 16:30:16 2021 +0200

    syscall: use fcntl with F_DUP2FD_CLOEXEC in forkAndExecInChild on FreeBSD
    
    Use fcntl(oldfd, F_DUP2FD_CLOEXEC, newfd) to duplicate the file
    descriptor and mark is as close-on-exec instead of dup2 & fcntl.
    
    FreeBSD implements dup3 like this in libc.
    
    Change-Id: I36e37bc61c2e31561adb49001f287764125a74de
    Reviewed-on: https://go-review.googlesource.com/c/go/+/355571
    Trust: Tobias Klauser <tobias.klauser@gmail.com>
    Reviewed-by: Ian Lance Taylor <iant@golang.org>
---
 src/syscall/exec_freebsd.go | 6 ++----
 1 file changed, 2 insertions(+), 4 deletions(-)

diff --git a/src/syscall/exec_freebsd.go b/src/syscall/exec_freebsd.go
index a7410db4b6..90793fe83f 100644
--- a/src/syscall/exec_freebsd.go
+++ b/src/syscall/exec_freebsd.go
@@ -214,11 +214,10 @@ func forkAndExecInChild(argv0 *byte, argv, envv []*byte, chroot, dir *byte, attr
 	// Pass 1: look for fd[i] < i and move those up above len(fd)
 	// so that pass 2 won't stomp on an fd it needs later.
 	if pipe < nextfd {
-		_, _, err1 = RawSyscall(SYS_DUP2, uintptr(pipe), uintptr(nextfd), 0)
+		_, _, err1 = RawSyscall(SYS_FCNTL, uintptr(pipe), F_DUP2FD_CLOEXEC, uintptr(nextfd))
 		if err1 != 0 {
 			goto childerror
 		}
-		RawSyscall(SYS_FCNTL, uintptr(nextfd), F_SETFD, FD_CLOEXEC)
 		pipe = nextfd
 		nextfd++
 	}
@@ -227,11 +226,10 @@ func forkAndExecInChild(argv0 *byte, argv, envv []*byte, chroot, dir *byte, attr
 			if nextfd == pipe { // don't stomp on pipe
 				nextfd++
 			}
-			_, _, err1 = RawSyscall(SYS_DUP2, uintptr(fd[i]), uintptr(nextfd), 0)
+			_, _, err1 = RawSyscall(SYS_FCNTL, uintptr(fd[i]), F_DUP2FD_CLOEXEC, uintptr(nextfd))
 			if err1 != 0 {
 				goto childerror
 			}
-			RawSyscall(SYS_FCNTL, uintptr(nextfd), F_SETFD, FD_CLOEXEC)
 			fd[i] = nextfd
 			nextfd++
 		}
