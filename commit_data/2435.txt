commit bf5c0c957c3c3ea9add6cfd51b90c463cb4814b5
Author: Russ Cox <rsc@golang.org>
Date:   Tue Jun 9 09:45:30 2009 -0700

    bug: pointer arithmetic involving large offsets
    needs to dereference the base pointer to make
    sure it catches nil.
    
    R=r,ken
    DELTA=21  (21 added, 0 deleted, 0 changed)
    OCL=30083
    CL=30101
---
 test/bugs/bug162.go | 25 +++++++++++++++++++++++++
 1 file changed, 25 insertions(+)

diff --git a/test/bugs/bug162.go b/test/bugs/bug162.go
new file mode 100644
index 0000000000..717f1f0a4d
--- /dev/null
+++ b/test/bugs/bug162.go
@@ -0,0 +1,25 @@
+// $G $D/$F.go && $L $F.$A && (! ./$A.out || echo BUG: should fail)
+
+// Copyright 2009 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package main
+
+import "unsafe"
+
+var x byte
+
+func main() {
+	var p *[1<<30]byte = nil;
+	x = 123;
+
+	// The problem here is not the use of unsafe:
+	// it is that indexing into p[] with a large
+	// enough index jumps out of the unmapped section
+	// at the beginning of memory and into valid memory.
+	// Pointer offsets and array indices, if they are
+	// very large, need to dereference the base pointer
+	// to trigger a trap.
+	println(p[uintptr(unsafe.Pointer(&x))]);
+}
