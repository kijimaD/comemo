commit 1b82e03a8fd1a2558979d8870d973244505b5494
Author: Russ Cox <rsc@golang.org>
Date:   Thu Dec 15 12:33:36 2011 -0500

    os: make compatible with go/build
    
    It is probably a mistake to have these here at all -
    os is supposed to be portable - but this only fixes
    the build issue.
    
    R=golang-dev, r, r, iant
    CC=golang-dev
    https://golang.org/cl/5487073
---
 src/pkg/os/Makefile                 | 20 +++++----------
 src/pkg/os/mksignals.sh             | 22 ++++++++++++++++
 src/pkg/os/mkunixsignals.sh         |  7 +++--
 src/pkg/os/zsignal_darwin_386.go    | 48 ++++++++++++++++++++++++++++++++++
 src/pkg/os/zsignal_darwin_amd64.go  | 48 ++++++++++++++++++++++++++++++++++
 src/pkg/os/zsignal_freebsd_386.go   | 50 ++++++++++++++++++++++++++++++++++++
 src/pkg/os/zsignal_freebsd_amd64.go | 50 ++++++++++++++++++++++++++++++++++++
 src/pkg/os/zsignal_linux_386.go     | 51 +++++++++++++++++++++++++++++++++++++
 src/pkg/os/zsignal_linux_amd64.go   | 51 +++++++++++++++++++++++++++++++++++++
 src/pkg/os/zsignal_linux_arm.go     | 51 +++++++++++++++++++++++++++++++++++++
 src/pkg/os/zsignal_openbsd_386.go   | 49 +++++++++++++++++++++++++++++++++++
 src/pkg/os/zsignal_openbsd_amd64.go | 49 +++++++++++++++++++++++++++++++++++
 src/pkg/os/zsignal_windows_386.go   | 29 +++++++++++++++++++++
 src/pkg/os/zsignal_windows_amd64.go | 29 +++++++++++++++++++++
 14 files changed, 538 insertions(+), 16 deletions(-)

diff --git a/src/pkg/os/Makefile b/src/pkg/os/Makefile
index 7f756cbd8e..f875c09a11 100644
--- a/src/pkg/os/Makefile
+++ b/src/pkg/os/Makefile
@@ -26,7 +26,7 @@ GOFILES_freebsd=\
 	sys_bsd.go\
 	exec_posix.go\
 	exec_unix.go\
-	signal_unix.go\
+	zsignal_$(GOOS)_$(GOARCH).go\
 
 GOFILES_darwin=\
 	dir_unix.go\
@@ -37,7 +37,7 @@ GOFILES_darwin=\
 	sys_bsd.go\
 	exec_posix.go\
 	exec_unix.go\
-	signal_unix.go\
+	zsignal_$(GOOS)_$(GOARCH).go\
 
 GOFILES_linux=\
 	dir_unix.go\
@@ -48,7 +48,7 @@ GOFILES_linux=\
 	sys_linux.go\
 	exec_posix.go\
 	exec_unix.go\
-	signal_unix.go\
+	zsignal_$(GOOS)_$(GOARCH).go\
 
 GOFILES_netbsd=\
 	dir_unix.go\
@@ -59,7 +59,7 @@ GOFILES_netbsd=\
 	sys_bsd.go\
 	exec_posix.go\
 	exec_unix.go\
-	signal_unix.go\
+	zsignal_$(GOOS)_$(GOARCH).go\
 
 GOFILES_openbsd=\
 	dir_unix.go\
@@ -70,7 +70,7 @@ GOFILES_openbsd=\
 	sys_bsd.go\
 	exec_posix.go\
 	exec_unix.go\
-	signal_unix.go\
+	zsignal_$(GOOS)_$(GOARCH).go\
 
 GOFILES_windows=\
 	dir_windows.go\
@@ -81,7 +81,7 @@ GOFILES_windows=\
 	sys_windows.go\
 	exec_posix.go\
 	exec_windows.go\
-	signal_windows.go\
+	zsignal_$(GOOS)_$(GOARCH).go\
 
 GOFILES_plan9=\
 	dir_plan9.go\
@@ -94,12 +94,4 @@ GOFILES_plan9=\
 
 GOFILES+=$(GOFILES_$(GOOS))
 
-CLEANFILES+=signal_unix.go signal_windows.go
-
 include ../../Make.pkg
-
-signal_unix.go: ../syscall/zerrors_$(GOOS)_$(GOARCH).go
-	./mkunixsignals.sh $< > $@ || rm -f $@
-
-signal_windows.go: ../syscall/ztypes_$(GOOS).go
-	./mkunixsignals.sh $< > $@ || rm -f $@
diff --git a/src/pkg/os/mksignals.sh b/src/pkg/os/mksignals.sh
new file mode 100755
index 0000000000..9c35e8209d
--- /dev/null
+++ b/src/pkg/os/mksignals.sh
@@ -0,0 +1,22 @@
+#!/bin/sh
+
+for targ in \
+	darwin_386 \
+	darwin_amd64 \
+	freebsd_386 \
+	freebsd_amd64 \
+	linux_386 \
+	linux_amd64 \
+	linux_arm \
+	openbsd_386 \
+	openbsd_amd64 \
+; do
+	./mkunixsignals.sh ../syscall/zerrors_$targ.go |gofmt >zsignal_$targ.go
+done
+
+for targ in \
+	windows_386 \
+	windows_amd64 \
+; do
+	./mkunixsignals.sh ../syscall/ztypes_windows.go |gofmt >zsignal_$targ.go
+done
diff --git a/src/pkg/os/mkunixsignals.sh b/src/pkg/os/mkunixsignals.sh
index df3236210b..ec62f1d708 100755
--- a/src/pkg/os/mkunixsignals.sh
+++ b/src/pkg/os/mkunixsignals.sh
@@ -3,8 +3,11 @@
 # Use of this source code is governed by a BSD-style
 # license that can be found in the LICENSE file.
 
-echo '// ./mkunixsignals.sh' "$1"
-echo '// MACHINE GENERATED BY THE COMMAND ABOVE; DO NOT EDIT'
+echo '// MACHINE GENERATED; DO NOT EDIT'
+echo '// To regenerate, run'
+echo '//	./mksignals.sh'
+echo '// which, for this file, will run'
+echo '//	./mkunixsignals.sh' "$1"
 echo
 
 cat <<EOH
diff --git a/src/pkg/os/zsignal_darwin_386.go b/src/pkg/os/zsignal_darwin_386.go
new file mode 100644
index 0000000000..8251113b16
--- /dev/null
+++ b/src/pkg/os/zsignal_darwin_386.go
@@ -0,0 +1,48 @@
+// MACHINE GENERATED; DO NOT EDIT
+// To regenerate, run
+//	./mksignals.sh
+// which, for this file, will run
+//	./mkunixsignals.sh ../syscall/zerrors_darwin_386.go
+
+package os
+
+import (
+	"syscall"
+)
+
+var _ = syscall.Open // in case there are zero signals
+
+const (
+	SIGABRT   = UnixSignal(syscall.SIGABRT)
+	SIGALRM   = UnixSignal(syscall.SIGALRM)
+	SIGBUS    = UnixSignal(syscall.SIGBUS)
+	SIGCHLD   = UnixSignal(syscall.SIGCHLD)
+	SIGCONT   = UnixSignal(syscall.SIGCONT)
+	SIGEMT    = UnixSignal(syscall.SIGEMT)
+	SIGFPE    = UnixSignal(syscall.SIGFPE)
+	SIGHUP    = UnixSignal(syscall.SIGHUP)
+	SIGILL    = UnixSignal(syscall.SIGILL)
+	SIGINFO   = UnixSignal(syscall.SIGINFO)
+	SIGINT    = UnixSignal(syscall.SIGINT)
+	SIGIO     = UnixSignal(syscall.SIGIO)
+	SIGIOT    = UnixSignal(syscall.SIGIOT)
+	SIGKILL   = UnixSignal(syscall.SIGKILL)
+	SIGPIPE   = UnixSignal(syscall.SIGPIPE)
+	SIGPROF   = UnixSignal(syscall.SIGPROF)
+	SIGQUIT   = UnixSignal(syscall.SIGQUIT)
+	SIGSEGV   = UnixSignal(syscall.SIGSEGV)
+	SIGSTOP   = UnixSignal(syscall.SIGSTOP)
+	SIGSYS    = UnixSignal(syscall.SIGSYS)
+	SIGTERM   = UnixSignal(syscall.SIGTERM)
+	SIGTRAP   = UnixSignal(syscall.SIGTRAP)
+	SIGTSTP   = UnixSignal(syscall.SIGTSTP)
+	SIGTTIN   = UnixSignal(syscall.SIGTTIN)
+	SIGTTOU   = UnixSignal(syscall.SIGTTOU)
+	SIGURG    = UnixSignal(syscall.SIGURG)
+	SIGUSR1   = UnixSignal(syscall.SIGUSR1)
+	SIGUSR2   = UnixSignal(syscall.SIGUSR2)
+	SIGVTALRM = UnixSignal(syscall.SIGVTALRM)
+	SIGWINCH  = UnixSignal(syscall.SIGWINCH)
+	SIGXCPU   = UnixSignal(syscall.SIGXCPU)
+	SIGXFSZ   = UnixSignal(syscall.SIGXFSZ)
+)
diff --git a/src/pkg/os/zsignal_darwin_amd64.go b/src/pkg/os/zsignal_darwin_amd64.go
new file mode 100644
index 0000000000..7c64af86ec
--- /dev/null
+++ b/src/pkg/os/zsignal_darwin_amd64.go
@@ -0,0 +1,48 @@
+// MACHINE GENERATED; DO NOT EDIT
+// To regenerate, run
+//	./mksignals.sh
+// which, for this file, will run
+//	./mkunixsignals.sh ../syscall/zerrors_darwin_amd64.go
+
+package os
+
+import (
+	"syscall"
+)
+
+var _ = syscall.Open // in case there are zero signals
+
+const (
+	SIGABRT   = UnixSignal(syscall.SIGABRT)
+	SIGALRM   = UnixSignal(syscall.SIGALRM)
+	SIGBUS    = UnixSignal(syscall.SIGBUS)
+	SIGCHLD   = UnixSignal(syscall.SIGCHLD)
+	SIGCONT   = UnixSignal(syscall.SIGCONT)
+	SIGEMT    = UnixSignal(syscall.SIGEMT)
+	SIGFPE    = UnixSignal(syscall.SIGFPE)
+	SIGHUP    = UnixSignal(syscall.SIGHUP)
+	SIGILL    = UnixSignal(syscall.SIGILL)
+	SIGINFO   = UnixSignal(syscall.SIGINFO)
+	SIGINT    = UnixSignal(syscall.SIGINT)
+	SIGIO     = UnixSignal(syscall.SIGIO)
+	SIGIOT    = UnixSignal(syscall.SIGIOT)
+	SIGKILL   = UnixSignal(syscall.SIGKILL)
+	SIGPIPE   = UnixSignal(syscall.SIGPIPE)
+	SIGPROF   = UnixSignal(syscall.SIGPROF)
+	SIGQUIT   = UnixSignal(syscall.SIGQUIT)
+	SIGSEGV   = UnixSignal(syscall.SIGSEGV)
+	SIGSTOP   = UnixSignal(syscall.SIGSTOP)
+	SIGSYS    = UnixSignal(syscall.SIGSYS)
+	SIGTERM   = UnixSignal(syscall.SIGTERM)
+	SIGTRAP   = UnixSignal(syscall.SIGTRAP)
+	SIGTSTP   = UnixSignal(syscall.SIGTSTP)
+	SIGTTIN   = UnixSignal(syscall.SIGTTIN)
+	SIGTTOU   = UnixSignal(syscall.SIGTTOU)
+	SIGURG    = UnixSignal(syscall.SIGURG)
+	SIGUSR1   = UnixSignal(syscall.SIGUSR1)
+	SIGUSR2   = UnixSignal(syscall.SIGUSR2)
+	SIGVTALRM = UnixSignal(syscall.SIGVTALRM)
+	SIGWINCH  = UnixSignal(syscall.SIGWINCH)
+	SIGXCPU   = UnixSignal(syscall.SIGXCPU)
+	SIGXFSZ   = UnixSignal(syscall.SIGXFSZ)
+)
diff --git a/src/pkg/os/zsignal_freebsd_386.go b/src/pkg/os/zsignal_freebsd_386.go
new file mode 100644
index 0000000000..029e63fab3
--- /dev/null
+++ b/src/pkg/os/zsignal_freebsd_386.go
@@ -0,0 +1,50 @@
+// MACHINE GENERATED; DO NOT EDIT
+// To regenerate, run
+//	./mksignals.sh
+// which, for this file, will run
+//	./mkunixsignals.sh ../syscall/zerrors_freebsd_386.go
+
+package os
+
+import (
+	"syscall"
+)
+
+var _ = syscall.Open // in case there are zero signals
+
+const (
+	SIGABRT   = UnixSignal(syscall.SIGABRT)
+	SIGALRM   = UnixSignal(syscall.SIGALRM)
+	SIGBUS    = UnixSignal(syscall.SIGBUS)
+	SIGCHLD   = UnixSignal(syscall.SIGCHLD)
+	SIGCONT   = UnixSignal(syscall.SIGCONT)
+	SIGEMT    = UnixSignal(syscall.SIGEMT)
+	SIGFPE    = UnixSignal(syscall.SIGFPE)
+	SIGHUP    = UnixSignal(syscall.SIGHUP)
+	SIGILL    = UnixSignal(syscall.SIGILL)
+	SIGINFO   = UnixSignal(syscall.SIGINFO)
+	SIGINT    = UnixSignal(syscall.SIGINT)
+	SIGIO     = UnixSignal(syscall.SIGIO)
+	SIGIOT    = UnixSignal(syscall.SIGIOT)
+	SIGKILL   = UnixSignal(syscall.SIGKILL)
+	SIGLWP    = UnixSignal(syscall.SIGLWP)
+	SIGPIPE   = UnixSignal(syscall.SIGPIPE)
+	SIGPROF   = UnixSignal(syscall.SIGPROF)
+	SIGQUIT   = UnixSignal(syscall.SIGQUIT)
+	SIGSEGV   = UnixSignal(syscall.SIGSEGV)
+	SIGSTOP   = UnixSignal(syscall.SIGSTOP)
+	SIGSYS    = UnixSignal(syscall.SIGSYS)
+	SIGTERM   = UnixSignal(syscall.SIGTERM)
+	SIGTHR    = UnixSignal(syscall.SIGTHR)
+	SIGTRAP   = UnixSignal(syscall.SIGTRAP)
+	SIGTSTP   = UnixSignal(syscall.SIGTSTP)
+	SIGTTIN   = UnixSignal(syscall.SIGTTIN)
+	SIGTTOU   = UnixSignal(syscall.SIGTTOU)
+	SIGURG    = UnixSignal(syscall.SIGURG)
+	SIGUSR1   = UnixSignal(syscall.SIGUSR1)
+	SIGUSR2   = UnixSignal(syscall.SIGUSR2)
+	SIGVTALRM = UnixSignal(syscall.SIGVTALRM)
+	SIGWINCH  = UnixSignal(syscall.SIGWINCH)
+	SIGXCPU   = UnixSignal(syscall.SIGXCPU)
+	SIGXFSZ   = UnixSignal(syscall.SIGXFSZ)
+)
diff --git a/src/pkg/os/zsignal_freebsd_amd64.go b/src/pkg/os/zsignal_freebsd_amd64.go
new file mode 100644
index 0000000000..ba2e2e44f1
--- /dev/null
+++ b/src/pkg/os/zsignal_freebsd_amd64.go
@@ -0,0 +1,50 @@
+// MACHINE GENERATED; DO NOT EDIT
+// To regenerate, run
+//	./mksignals.sh
+// which, for this file, will run
+//	./mkunixsignals.sh ../syscall/zerrors_freebsd_amd64.go
+
+package os
+
+import (
+	"syscall"
+)
+
+var _ = syscall.Open // in case there are zero signals
+
+const (
+	SIGABRT   = UnixSignal(syscall.SIGABRT)
+	SIGALRM   = UnixSignal(syscall.SIGALRM)
+	SIGBUS    = UnixSignal(syscall.SIGBUS)
+	SIGCHLD   = UnixSignal(syscall.SIGCHLD)
+	SIGCONT   = UnixSignal(syscall.SIGCONT)
+	SIGEMT    = UnixSignal(syscall.SIGEMT)
+	SIGFPE    = UnixSignal(syscall.SIGFPE)
+	SIGHUP    = UnixSignal(syscall.SIGHUP)
+	SIGILL    = UnixSignal(syscall.SIGILL)
+	SIGINFO   = UnixSignal(syscall.SIGINFO)
+	SIGINT    = UnixSignal(syscall.SIGINT)
+	SIGIO     = UnixSignal(syscall.SIGIO)
+	SIGIOT    = UnixSignal(syscall.SIGIOT)
+	SIGKILL   = UnixSignal(syscall.SIGKILL)
+	SIGLWP    = UnixSignal(syscall.SIGLWP)
+	SIGPIPE   = UnixSignal(syscall.SIGPIPE)
+	SIGPROF   = UnixSignal(syscall.SIGPROF)
+	SIGQUIT   = UnixSignal(syscall.SIGQUIT)
+	SIGSEGV   = UnixSignal(syscall.SIGSEGV)
+	SIGSTOP   = UnixSignal(syscall.SIGSTOP)
+	SIGSYS    = UnixSignal(syscall.SIGSYS)
+	SIGTERM   = UnixSignal(syscall.SIGTERM)
+	SIGTHR    = UnixSignal(syscall.SIGTHR)
+	SIGTRAP   = UnixSignal(syscall.SIGTRAP)
+	SIGTSTP   = UnixSignal(syscall.SIGTSTP)
+	SIGTTIN   = UnixSignal(syscall.SIGTTIN)
+	SIGTTOU   = UnixSignal(syscall.SIGTTOU)
+	SIGURG    = UnixSignal(syscall.SIGURG)
+	SIGUSR1   = UnixSignal(syscall.SIGUSR1)
+	SIGUSR2   = UnixSignal(syscall.SIGUSR2)
+	SIGVTALRM = UnixSignal(syscall.SIGVTALRM)
+	SIGWINCH  = UnixSignal(syscall.SIGWINCH)
+	SIGXCPU   = UnixSignal(syscall.SIGXCPU)
+	SIGXFSZ   = UnixSignal(syscall.SIGXFSZ)
+)
diff --git a/src/pkg/os/zsignal_linux_386.go b/src/pkg/os/zsignal_linux_386.go
new file mode 100644
index 0000000000..74cd029a4a
--- /dev/null
+++ b/src/pkg/os/zsignal_linux_386.go
@@ -0,0 +1,51 @@
+// MACHINE GENERATED; DO NOT EDIT
+// To regenerate, run
+//	./mksignals.sh
+// which, for this file, will run
+//	./mkunixsignals.sh ../syscall/zerrors_linux_386.go
+
+package os
+
+import (
+	"syscall"
+)
+
+var _ = syscall.Open // in case there are zero signals
+
+const (
+	SIGABRT   = UnixSignal(syscall.SIGABRT)
+	SIGALRM   = UnixSignal(syscall.SIGALRM)
+	SIGBUS    = UnixSignal(syscall.SIGBUS)
+	SIGCHLD   = UnixSignal(syscall.SIGCHLD)
+	SIGCLD    = UnixSignal(syscall.SIGCLD)
+	SIGCONT   = UnixSignal(syscall.SIGCONT)
+	SIGFPE    = UnixSignal(syscall.SIGFPE)
+	SIGHUP    = UnixSignal(syscall.SIGHUP)
+	SIGILL    = UnixSignal(syscall.SIGILL)
+	SIGINT    = UnixSignal(syscall.SIGINT)
+	SIGIO     = UnixSignal(syscall.SIGIO)
+	SIGIOT    = UnixSignal(syscall.SIGIOT)
+	SIGKILL   = UnixSignal(syscall.SIGKILL)
+	SIGPIPE   = UnixSignal(syscall.SIGPIPE)
+	SIGPOLL   = UnixSignal(syscall.SIGPOLL)
+	SIGPROF   = UnixSignal(syscall.SIGPROF)
+	SIGPWR    = UnixSignal(syscall.SIGPWR)
+	SIGQUIT   = UnixSignal(syscall.SIGQUIT)
+	SIGSEGV   = UnixSignal(syscall.SIGSEGV)
+	SIGSTKFLT = UnixSignal(syscall.SIGSTKFLT)
+	SIGSTOP   = UnixSignal(syscall.SIGSTOP)
+	SIGSYS    = UnixSignal(syscall.SIGSYS)
+	SIGTERM   = UnixSignal(syscall.SIGTERM)
+	SIGTRAP   = UnixSignal(syscall.SIGTRAP)
+	SIGTSTP   = UnixSignal(syscall.SIGTSTP)
+	SIGTTIN   = UnixSignal(syscall.SIGTTIN)
+	SIGTTOU   = UnixSignal(syscall.SIGTTOU)
+	SIGUNUSED = UnixSignal(syscall.SIGUNUSED)
+	SIGURG    = UnixSignal(syscall.SIGURG)
+	SIGUSR1   = UnixSignal(syscall.SIGUSR1)
+	SIGUSR2   = UnixSignal(syscall.SIGUSR2)
+	SIGVTALRM = UnixSignal(syscall.SIGVTALRM)
+	SIGWINCH  = UnixSignal(syscall.SIGWINCH)
+	SIGXCPU   = UnixSignal(syscall.SIGXCPU)
+	SIGXFSZ   = UnixSignal(syscall.SIGXFSZ)
+)
diff --git a/src/pkg/os/zsignal_linux_amd64.go b/src/pkg/os/zsignal_linux_amd64.go
new file mode 100644
index 0000000000..0416e0c57f
--- /dev/null
+++ b/src/pkg/os/zsignal_linux_amd64.go
@@ -0,0 +1,51 @@
+// MACHINE GENERATED; DO NOT EDIT
+// To regenerate, run
+//	./mksignals.sh
+// which, for this file, will run
+//	./mkunixsignals.sh ../syscall/zerrors_linux_amd64.go
+
+package os
+
+import (
+	"syscall"
+)
+
+var _ = syscall.Open // in case there are zero signals
+
+const (
+	SIGABRT   = UnixSignal(syscall.SIGABRT)
+	SIGALRM   = UnixSignal(syscall.SIGALRM)
+	SIGBUS    = UnixSignal(syscall.SIGBUS)
+	SIGCHLD   = UnixSignal(syscall.SIGCHLD)
+	SIGCLD    = UnixSignal(syscall.SIGCLD)
+	SIGCONT   = UnixSignal(syscall.SIGCONT)
+	SIGFPE    = UnixSignal(syscall.SIGFPE)
+	SIGHUP    = UnixSignal(syscall.SIGHUP)
+	SIGILL    = UnixSignal(syscall.SIGILL)
+	SIGINT    = UnixSignal(syscall.SIGINT)
+	SIGIO     = UnixSignal(syscall.SIGIO)
+	SIGIOT    = UnixSignal(syscall.SIGIOT)
+	SIGKILL   = UnixSignal(syscall.SIGKILL)
+	SIGPIPE   = UnixSignal(syscall.SIGPIPE)
+	SIGPOLL   = UnixSignal(syscall.SIGPOLL)
+	SIGPROF   = UnixSignal(syscall.SIGPROF)
+	SIGPWR    = UnixSignal(syscall.SIGPWR)
+	SIGQUIT   = UnixSignal(syscall.SIGQUIT)
+	SIGSEGV   = UnixSignal(syscall.SIGSEGV)
+	SIGSTKFLT = UnixSignal(syscall.SIGSTKFLT)
+	SIGSTOP   = UnixSignal(syscall.SIGSTOP)
+	SIGSYS    = UnixSignal(syscall.SIGSYS)
+	SIGTERM   = UnixSignal(syscall.SIGTERM)
+	SIGTRAP   = UnixSignal(syscall.SIGTRAP)
+	SIGTSTP   = UnixSignal(syscall.SIGTSTP)
+	SIGTTIN   = UnixSignal(syscall.SIGTTIN)
+	SIGTTOU   = UnixSignal(syscall.SIGTTOU)
+	SIGUNUSED = UnixSignal(syscall.SIGUNUSED)
+	SIGURG    = UnixSignal(syscall.SIGURG)
+	SIGUSR1   = UnixSignal(syscall.SIGUSR1)
+	SIGUSR2   = UnixSignal(syscall.SIGUSR2)
+	SIGVTALRM = UnixSignal(syscall.SIGVTALRM)
+	SIGWINCH  = UnixSignal(syscall.SIGWINCH)
+	SIGXCPU   = UnixSignal(syscall.SIGXCPU)
+	SIGXFSZ   = UnixSignal(syscall.SIGXFSZ)
+)
diff --git a/src/pkg/os/zsignal_linux_arm.go b/src/pkg/os/zsignal_linux_arm.go
new file mode 100644
index 0000000000..40cb6863b4
--- /dev/null
+++ b/src/pkg/os/zsignal_linux_arm.go
@@ -0,0 +1,51 @@
+// MACHINE GENERATED; DO NOT EDIT
+// To regenerate, run
+//	./mksignals.sh
+// which, for this file, will run
+//	./mkunixsignals.sh ../syscall/zerrors_linux_arm.go
+
+package os
+
+import (
+	"syscall"
+)
+
+var _ = syscall.Open // in case there are zero signals
+
+const (
+	SIGABRT   = UnixSignal(syscall.SIGABRT)
+	SIGALRM   = UnixSignal(syscall.SIGALRM)
+	SIGBUS    = UnixSignal(syscall.SIGBUS)
+	SIGCHLD   = UnixSignal(syscall.SIGCHLD)
+	SIGCLD    = UnixSignal(syscall.SIGCLD)
+	SIGCONT   = UnixSignal(syscall.SIGCONT)
+	SIGFPE    = UnixSignal(syscall.SIGFPE)
+	SIGHUP    = UnixSignal(syscall.SIGHUP)
+	SIGILL    = UnixSignal(syscall.SIGILL)
+	SIGINT    = UnixSignal(syscall.SIGINT)
+	SIGIO     = UnixSignal(syscall.SIGIO)
+	SIGIOT    = UnixSignal(syscall.SIGIOT)
+	SIGKILL   = UnixSignal(syscall.SIGKILL)
+	SIGPIPE   = UnixSignal(syscall.SIGPIPE)
+	SIGPOLL   = UnixSignal(syscall.SIGPOLL)
+	SIGPROF   = UnixSignal(syscall.SIGPROF)
+	SIGPWR    = UnixSignal(syscall.SIGPWR)
+	SIGQUIT   = UnixSignal(syscall.SIGQUIT)
+	SIGSEGV   = UnixSignal(syscall.SIGSEGV)
+	SIGSTKFLT = UnixSignal(syscall.SIGSTKFLT)
+	SIGSTOP   = UnixSignal(syscall.SIGSTOP)
+	SIGSYS    = UnixSignal(syscall.SIGSYS)
+	SIGTERM   = UnixSignal(syscall.SIGTERM)
+	SIGTRAP   = UnixSignal(syscall.SIGTRAP)
+	SIGTSTP   = UnixSignal(syscall.SIGTSTP)
+	SIGTTIN   = UnixSignal(syscall.SIGTTIN)
+	SIGTTOU   = UnixSignal(syscall.SIGTTOU)
+	SIGUNUSED = UnixSignal(syscall.SIGUNUSED)
+	SIGURG    = UnixSignal(syscall.SIGURG)
+	SIGUSR1   = UnixSignal(syscall.SIGUSR1)
+	SIGUSR2   = UnixSignal(syscall.SIGUSR2)
+	SIGVTALRM = UnixSignal(syscall.SIGVTALRM)
+	SIGWINCH  = UnixSignal(syscall.SIGWINCH)
+	SIGXCPU   = UnixSignal(syscall.SIGXCPU)
+	SIGXFSZ   = UnixSignal(syscall.SIGXFSZ)
+)
diff --git a/src/pkg/os/zsignal_openbsd_386.go b/src/pkg/os/zsignal_openbsd_386.go
new file mode 100644
index 0000000000..90e11375cc
--- /dev/null
+++ b/src/pkg/os/zsignal_openbsd_386.go
@@ -0,0 +1,49 @@
+// MACHINE GENERATED; DO NOT EDIT
+// To regenerate, run
+//	./mksignals.sh
+// which, for this file, will run
+//	./mkunixsignals.sh ../syscall/zerrors_openbsd_386.go
+
+package os
+
+import (
+	"syscall"
+)
+
+var _ = syscall.Open // in case there are zero signals
+
+const (
+	SIGABRT   = UnixSignal(syscall.SIGABRT)
+	SIGALRM   = UnixSignal(syscall.SIGALRM)
+	SIGBUS    = UnixSignal(syscall.SIGBUS)
+	SIGCHLD   = UnixSignal(syscall.SIGCHLD)
+	SIGCONT   = UnixSignal(syscall.SIGCONT)
+	SIGEMT    = UnixSignal(syscall.SIGEMT)
+	SIGFPE    = UnixSignal(syscall.SIGFPE)
+	SIGHUP    = UnixSignal(syscall.SIGHUP)
+	SIGILL    = UnixSignal(syscall.SIGILL)
+	SIGINFO   = UnixSignal(syscall.SIGINFO)
+	SIGINT    = UnixSignal(syscall.SIGINT)
+	SIGIO     = UnixSignal(syscall.SIGIO)
+	SIGIOT    = UnixSignal(syscall.SIGIOT)
+	SIGKILL   = UnixSignal(syscall.SIGKILL)
+	SIGPIPE   = UnixSignal(syscall.SIGPIPE)
+	SIGPROF   = UnixSignal(syscall.SIGPROF)
+	SIGQUIT   = UnixSignal(syscall.SIGQUIT)
+	SIGSEGV   = UnixSignal(syscall.SIGSEGV)
+	SIGSTOP   = UnixSignal(syscall.SIGSTOP)
+	SIGSYS    = UnixSignal(syscall.SIGSYS)
+	SIGTERM   = UnixSignal(syscall.SIGTERM)
+	SIGTHR    = UnixSignal(syscall.SIGTHR)
+	SIGTRAP   = UnixSignal(syscall.SIGTRAP)
+	SIGTSTP   = UnixSignal(syscall.SIGTSTP)
+	SIGTTIN   = UnixSignal(syscall.SIGTTIN)
+	SIGTTOU   = UnixSignal(syscall.SIGTTOU)
+	SIGURG    = UnixSignal(syscall.SIGURG)
+	SIGUSR1   = UnixSignal(syscall.SIGUSR1)
+	SIGUSR2   = UnixSignal(syscall.SIGUSR2)
+	SIGVTALRM = UnixSignal(syscall.SIGVTALRM)
+	SIGWINCH  = UnixSignal(syscall.SIGWINCH)
+	SIGXCPU   = UnixSignal(syscall.SIGXCPU)
+	SIGXFSZ   = UnixSignal(syscall.SIGXFSZ)
+)
diff --git a/src/pkg/os/zsignal_openbsd_amd64.go b/src/pkg/os/zsignal_openbsd_amd64.go
new file mode 100644
index 0000000000..7f4dc6d175
--- /dev/null
+++ b/src/pkg/os/zsignal_openbsd_amd64.go
@@ -0,0 +1,49 @@
+// MACHINE GENERATED; DO NOT EDIT
+// To regenerate, run
+//	./mksignals.sh
+// which, for this file, will run
+//	./mkunixsignals.sh ../syscall/zerrors_openbsd_amd64.go
+
+package os
+
+import (
+	"syscall"
+)
+
+var _ = syscall.Open // in case there are zero signals
+
+const (
+	SIGABRT   = UnixSignal(syscall.SIGABRT)
+	SIGALRM   = UnixSignal(syscall.SIGALRM)
+	SIGBUS    = UnixSignal(syscall.SIGBUS)
+	SIGCHLD   = UnixSignal(syscall.SIGCHLD)
+	SIGCONT   = UnixSignal(syscall.SIGCONT)
+	SIGEMT    = UnixSignal(syscall.SIGEMT)
+	SIGFPE    = UnixSignal(syscall.SIGFPE)
+	SIGHUP    = UnixSignal(syscall.SIGHUP)
+	SIGILL    = UnixSignal(syscall.SIGILL)
+	SIGINFO   = UnixSignal(syscall.SIGINFO)
+	SIGINT    = UnixSignal(syscall.SIGINT)
+	SIGIO     = UnixSignal(syscall.SIGIO)
+	SIGIOT    = UnixSignal(syscall.SIGIOT)
+	SIGKILL   = UnixSignal(syscall.SIGKILL)
+	SIGPIPE   = UnixSignal(syscall.SIGPIPE)
+	SIGPROF   = UnixSignal(syscall.SIGPROF)
+	SIGQUIT   = UnixSignal(syscall.SIGQUIT)
+	SIGSEGV   = UnixSignal(syscall.SIGSEGV)
+	SIGSTOP   = UnixSignal(syscall.SIGSTOP)
+	SIGSYS    = UnixSignal(syscall.SIGSYS)
+	SIGTERM   = UnixSignal(syscall.SIGTERM)
+	SIGTHR    = UnixSignal(syscall.SIGTHR)
+	SIGTRAP   = UnixSignal(syscall.SIGTRAP)
+	SIGTSTP   = UnixSignal(syscall.SIGTSTP)
+	SIGTTIN   = UnixSignal(syscall.SIGTTIN)
+	SIGTTOU   = UnixSignal(syscall.SIGTTOU)
+	SIGURG    = UnixSignal(syscall.SIGURG)
+	SIGUSR1   = UnixSignal(syscall.SIGUSR1)
+	SIGUSR2   = UnixSignal(syscall.SIGUSR2)
+	SIGVTALRM = UnixSignal(syscall.SIGVTALRM)
+	SIGWINCH  = UnixSignal(syscall.SIGWINCH)
+	SIGXCPU   = UnixSignal(syscall.SIGXCPU)
+	SIGXFSZ   = UnixSignal(syscall.SIGXFSZ)
+)
diff --git a/src/pkg/os/zsignal_windows_386.go b/src/pkg/os/zsignal_windows_386.go
new file mode 100644
index 0000000000..b4b88dccfb
--- /dev/null
+++ b/src/pkg/os/zsignal_windows_386.go
@@ -0,0 +1,29 @@
+// MACHINE GENERATED; DO NOT EDIT
+// To regenerate, run
+//	./mksignals.sh
+// which, for this file, will run
+//	./mkunixsignals.sh ../syscall/ztypes_windows.go
+
+package os
+
+import (
+	"syscall"
+)
+
+var _ = syscall.Open // in case there are zero signals
+
+const (
+	SIGHUP  = UnixSignal(syscall.SIGHUP)
+	SIGINT  = UnixSignal(syscall.SIGINT)
+	SIGQUIT = UnixSignal(syscall.SIGQUIT)
+	SIGILL  = UnixSignal(syscall.SIGILL)
+	SIGTRAP = UnixSignal(syscall.SIGTRAP)
+	SIGABRT = UnixSignal(syscall.SIGABRT)
+	SIGBUS  = UnixSignal(syscall.SIGBUS)
+	SIGFPE  = UnixSignal(syscall.SIGFPE)
+	SIGKILL = UnixSignal(syscall.SIGKILL)
+	SIGSEGV = UnixSignal(syscall.SIGSEGV)
+	SIGPIPE = UnixSignal(syscall.SIGPIPE)
+	SIGALRM = UnixSignal(syscall.SIGALRM)
+	SIGTERM = UnixSignal(syscall.SIGTERM)
+)
diff --git a/src/pkg/os/zsignal_windows_amd64.go b/src/pkg/os/zsignal_windows_amd64.go
new file mode 100644
index 0000000000..b4b88dccfb
--- /dev/null
+++ b/src/pkg/os/zsignal_windows_amd64.go
@@ -0,0 +1,29 @@
+// MACHINE GENERATED; DO NOT EDIT
+// To regenerate, run
+//	./mksignals.sh
+// which, for this file, will run
+//	./mkunixsignals.sh ../syscall/ztypes_windows.go
+
+package os
+
+import (
+	"syscall"
+)
+
+var _ = syscall.Open // in case there are zero signals
+
+const (
+	SIGHUP  = UnixSignal(syscall.SIGHUP)
+	SIGINT  = UnixSignal(syscall.SIGINT)
+	SIGQUIT = UnixSignal(syscall.SIGQUIT)
+	SIGILL  = UnixSignal(syscall.SIGILL)
+	SIGTRAP = UnixSignal(syscall.SIGTRAP)
+	SIGABRT = UnixSignal(syscall.SIGABRT)
+	SIGBUS  = UnixSignal(syscall.SIGBUS)
+	SIGFPE  = UnixSignal(syscall.SIGFPE)
+	SIGKILL = UnixSignal(syscall.SIGKILL)
+	SIGSEGV = UnixSignal(syscall.SIGSEGV)
+	SIGPIPE = UnixSignal(syscall.SIGPIPE)
+	SIGALRM = UnixSignal(syscall.SIGALRM)
+	SIGTERM = UnixSignal(syscall.SIGTERM)
+)
