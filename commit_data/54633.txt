commit 6d58aea5d412d135ec08463db515ee9453c508b5
Author: Michael Matloob <matloob@golang.org>
Date:   Fri Nov 4 16:42:52 2022 -0400

    cmd/go: use clean GOCACHE in TestNewReleaseRebuildsStalePackagesInGOPATH
    
    Now that most GOROOT packages do not have install targets, their
    staleness depends on whether their builds have been cached. That means
    that, from a clean cache, once
    TestNewReleaseRebuildsStalePackagesInGOPATH builds certain targets, they
    will stay non-stale for the second run of the test, becasue the will
    still be in the cache. So the first run of the test from a clean cache
    will pass and the second will fail. Set GOCACHE to a temporary directory
    in the test to use a clean cache and avoid this.
    
    Change-Id: I91f954138a4723d81545134441148badbfc515f5
    Reviewed-on: https://go-review.googlesource.com/c/go/+/448018
    Reviewed-by: Bryan Mills <bcmills@google.com>
    Reviewed-by: Than McIntosh <thanm@google.com>
    Run-TryBot: Michael Matloob <matloob@golang.org>
    TryBot-Result: Gopher Robot <gobot@golang.org>
---
 src/cmd/go/go_test.go | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/src/cmd/go/go_test.go b/src/cmd/go/go_test.go
index f5f583fbea..4f451e614b 100644
--- a/src/cmd/go/go_test.go
+++ b/src/cmd/go/go_test.go
@@ -894,6 +894,11 @@ func TestNewReleaseRebuildsStalePackagesInGOPATH(t *testing.T) {
 	defer tg.cleanup()
 	tg.parallel()
 
+	// Set GOCACHE to an empty directory so that a previous run of
+	// this test does not affect the staleness of the packages it builds.
+	tg.tempDir("gocache")
+	tg.setenv("GOCACHE", tg.path("gocache"))
+
 	// Copy the runtime packages into a temporary GOROOT
 	// so that we can change files.
 	for _, copydir := range []string{
