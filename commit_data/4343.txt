commit 8c22dd24e0e5aa847bd56dc7e573092f8652e3c5
Author: Christopher Wedgwood <cw@f00f.org>
Date:   Mon Dec 7 11:31:56 2009 -0800

    Remove copyBytes completely in favor of copy.
    
    R=r, rsc
    https://golang.org/cl/165068
---
 src/pkg/bytes/buffer.go | 13 ++-----------
 1 file changed, 2 insertions(+), 11 deletions(-)

diff --git a/src/pkg/bytes/buffer.go b/src/pkg/bytes/buffer.go
index 61780947f0..41838d4907 100644
--- a/src/pkg/bytes/buffer.go
+++ b/src/pkg/bytes/buffer.go
@@ -19,15 +19,6 @@ func copyString(dst []byte, doff int, str string) {
 	}
 }
 
-// Copy from bytes to byte array at offset doff.  Assume there's room.
-func copyBytes(dst []byte, doff int, src []byte) {
-	if len(src) == 1 {
-		dst[doff] = src[0];
-		return;
-	}
-	copy(dst[doff:], src);
-}
-
 // A Buffer is a variable-sized buffer of bytes
 // with Read and Write methods.
 // The zero value for Buffer is an empty buffer ready to use.
@@ -98,7 +89,7 @@ func (b *Buffer) Write(p []byte) (n int, err os.Error) {
 		b.resize(n)
 	}
 	b.buf = b.buf[0 : b.off+m+n];
-	copyBytes(b.buf, b.off+m, p);
+	copy(b.buf[b.off+m:], p);
 	return n, nil;
 }
 
@@ -194,7 +185,7 @@ func (b *Buffer) Read(p []byte) (n int, err os.Error) {
 		n = m
 	}
 
-	copyBytes(p, 0, b.buf[b.off:b.off+n]);
+	copy(p, b.buf[b.off:b.off+n]);
 	b.off += n;
 	return n, err;
 }
