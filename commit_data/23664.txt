commit 03410f675808ad51fa1e1fd153fd3d182ebcb217
Author: Brad Fitzpatrick <bradfitz@golang.org>
Date:   Wed Jun 3 16:16:32 2015 -0700

    runtime: fix TestFixedGOROOT to properly restore the GOROOT env var after test
    
    Otherwise subsequent tests won't see any modified GOROOT.
    
    With this CL I can move my GOROOT, set GOROOT to the new location, and
    the runtime tests pass. Previously the crash_tests would instead look
    for the GOROOT baked into the binary, instead of the env var:
    
    --- FAIL: TestGcSys (0.01s)
            crash_test.go:92: building source: exit status 2
                    go: cannot find GOROOT directory: /home/bradfitz/go
    --- FAIL: TestGCFairness (0.01s)
            crash_test.go:92: building source: exit status 2
                    go: cannot find GOROOT directory: /home/bradfitz/go
    --- FAIL: TestGdbPython (0.07s)
            runtime-gdb_test.go:64: building source exit status 2
                    go: cannot find GOROOT directory: /home/bradfitz/go
    --- FAIL: TestLargeStringConcat (0.01s)
            crash_test.go:92: building source: exit status 2
                    go: cannot find GOROOT directory: /home/bradfitz/go
    
    Update #10029
    
    Change-Id: If91be0f04d3acdcf39a9e773a4e7905a446bc477
    Reviewed-on: https://go-review.googlesource.com/10685
    Reviewed-by: Andrew Gerrand <adg@golang.org>
    Run-TryBot: Brad Fitzpatrick <bradfitz@golang.org>
---
 src/runtime/env_test.go | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/src/runtime/env_test.go b/src/runtime/env_test.go
index 203f38065d..2399e46faa 100644
--- a/src/runtime/env_test.go
+++ b/src/runtime/env_test.go
@@ -15,6 +15,12 @@ func TestFixedGOROOT(t *testing.T) {
 		t.Skipf("skipping plan9, it is inconsistent by allowing GOROOT to be updated by Setenv")
 	}
 
+	// Restore both the real GOROOT environment variable, and runtime's copies:
+	if orig, ok := syscall.Getenv("GOROOT"); ok {
+		defer syscall.Setenv("GOROOT", orig)
+	} else {
+		defer syscall.Unsetenv("GOROOT")
+	}
 	envs := runtime.Envs()
 	oldenvs := append([]string{}, envs...)
 	defer runtime.SetEnvs(oldenvs)
