commit 2730c17a863e0eeb7afa3589608eece8cc50e6f3
Author: Brad Fitzpatrick <bradfitz@golang.org>
Date:   Tue Mar 21 22:16:16 2017 +0000

    syscall, os: fix FreeBSD 9 build
    
    I broke FreeBSD 9 in https://golang.org/cl/38426 by using Pipe2.
    
    We still want to support FreeBSD 9 for one last release (Go 1.9 will
    be the last), and FreeBSD 9 doesn't have Pipe2.
    
    So this still uses Pipe2, but falls back to Pipe on error.
    
    Updates #18854
    Updates #19072
    
    Change-Id: I1de90fb83606c93fb84b4b86fba31e207a702835
    Reviewed-on: https://go-review.googlesource.com/38430
    Reviewed-by: Rob Pike <r@golang.org>
    Reviewed-by: Ian Lance Taylor <iant@golang.org>
    Run-TryBot: Brad Fitzpatrick <bradfitz@golang.org>
    TryBot-Result: Gobot Gobot <gobot@golang.org>
---
 src/os/pipe_freebsd.go                | 16 +++++++++++++++-
 src/syscall/exec_freebsd.go           | 18 +++++++++++++++++-
 src/syscall/syscall_freebsd.go        |  9 ++++++++-
 src/syscall/zsyscall_freebsd_386.go   | 12 ++++++++++++
 src/syscall/zsyscall_freebsd_amd64.go | 12 ++++++++++++
 src/syscall/zsyscall_freebsd_arm.go   | 12 ++++++++++++
 6 files changed, 76 insertions(+), 3 deletions(-)

diff --git a/src/os/pipe_freebsd.go b/src/os/pipe_freebsd.go
index 06723729f1..ea6622cd26 100644
--- a/src/os/pipe_freebsd.go
+++ b/src/os/pipe_freebsd.go
@@ -13,7 +13,21 @@ func Pipe() (r *File, w *File, err error) {
 
 	e := syscall.Pipe2(p[0:], syscall.O_CLOEXEC)
 	if e != nil {
-		return nil, nil, NewSyscallError("pipe", e)
+		// Fallback support for FreeBSD 9, which lacks Pipe2.
+		//
+		// TODO: remove this for Go 1.10 when FreeBSD 9
+		// is removed (Issue 19072).
+
+		// See ../syscall/exec.go for description of lock.
+		syscall.ForkLock.RLock()
+		e := syscall.Pipe(p[0:])
+		if e != nil {
+			syscall.ForkLock.RUnlock()
+			return nil, nil, NewSyscallError("pipe", e)
+		}
+		syscall.CloseOnExec(p[0])
+		syscall.CloseOnExec(p[1])
+		syscall.ForkLock.RUnlock()
 	}
 
 	return newFile(uintptr(p[0]), "|0", true), newFile(uintptr(p[1]), "|1", true), nil
diff --git a/src/syscall/exec_freebsd.go b/src/syscall/exec_freebsd.go
index 1654b4ba2a..4ed32c0614 100644
--- a/src/syscall/exec_freebsd.go
+++ b/src/syscall/exec_freebsd.go
@@ -5,5 +5,21 @@
 package syscall
 
 func forkExecPipe(p []int) error {
-	return Pipe2(p, O_CLOEXEC)
+	err := Pipe2(p, O_CLOEXEC)
+	if err == nil {
+		return nil
+	}
+
+	// FreeBSD 9 fallback.
+	// TODO: remove this for Go 1.10 per Issue 19072
+	err = Pipe(p)
+	if err != nil {
+		return err
+	}
+	_, err = fcntl(p[0], F_SETFD, FD_CLOEXEC)
+	if err != nil {
+		return err
+	}
+	_, err = fcntl(p[1], F_SETFD, FD_CLOEXEC)
+	return err
 }
diff --git a/src/syscall/syscall_freebsd.go b/src/syscall/syscall_freebsd.go
index e4cc621f9a..64c881ad8e 100644
--- a/src/syscall/syscall_freebsd.go
+++ b/src/syscall/syscall_freebsd.go
@@ -66,8 +66,15 @@ func direntNamlen(buf []byte) (uint64, bool) {
 	return readInt(buf, unsafe.Offsetof(Dirent{}.Namlen), unsafe.Sizeof(Dirent{}.Namlen))
 }
 
+//sysnb pipe() (r int, w int, err error)
+
 func Pipe(p []int) error {
-	return Pipe2(p, 0)
+	if len(p) != 2 {
+		return EINVAL
+	}
+	var err error
+	p[0], p[1], err = pipe()
+	return err
 }
 
 //sysnb pipe2(p *[2]_C_int, flags int) (err error)
diff --git a/src/syscall/zsyscall_freebsd_386.go b/src/syscall/zsyscall_freebsd_386.go
index 8f3da43b64..63061b2794 100644
--- a/src/syscall/zsyscall_freebsd_386.go
+++ b/src/syscall/zsyscall_freebsd_386.go
@@ -261,6 +261,18 @@ func fcntl(fd int, cmd int, arg int) (val int, err error) {
 
 // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
 
+func pipe() (r int, w int, err error) {
+	r0, r1, e1 := RawSyscall(SYS_PIPE, 0, 0, 0)
+	r = int(r0)
+	w = int(r1)
+	if e1 != 0 {
+		err = errnoErr(e1)
+	}
+	return
+}
+
+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
+
 func pipe2(p *[2]_C_int, flags int) (err error) {
 	_, _, e1 := RawSyscall(SYS_PIPE2, uintptr(unsafe.Pointer(p)), uintptr(flags), 0)
 	if e1 != 0 {
diff --git a/src/syscall/zsyscall_freebsd_amd64.go b/src/syscall/zsyscall_freebsd_amd64.go
index 7a6d6a685a..8120980332 100644
--- a/src/syscall/zsyscall_freebsd_amd64.go
+++ b/src/syscall/zsyscall_freebsd_amd64.go
@@ -261,6 +261,18 @@ func fcntl(fd int, cmd int, arg int) (val int, err error) {
 
 // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
 
+func pipe() (r int, w int, err error) {
+	r0, r1, e1 := RawSyscall(SYS_PIPE, 0, 0, 0)
+	r = int(r0)
+	w = int(r1)
+	if e1 != 0 {
+		err = errnoErr(e1)
+	}
+	return
+}
+
+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
+
 func pipe2(p *[2]_C_int, flags int) (err error) {
 	_, _, e1 := RawSyscall(SYS_PIPE2, uintptr(unsafe.Pointer(p)), uintptr(flags), 0)
 	if e1 != 0 {
diff --git a/src/syscall/zsyscall_freebsd_arm.go b/src/syscall/zsyscall_freebsd_arm.go
index a9da768352..f6c44c793d 100644
--- a/src/syscall/zsyscall_freebsd_arm.go
+++ b/src/syscall/zsyscall_freebsd_arm.go
@@ -261,6 +261,18 @@ func fcntl(fd int, cmd int, arg int) (val int, err error) {
 
 // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
 
+func pipe() (r int, w int, err error) {
+	r0, r1, e1 := RawSyscall(SYS_PIPE, 0, 0, 0)
+	r = int(r0)
+	w = int(r1)
+	if e1 != 0 {
+		err = errnoErr(e1)
+	}
+	return
+}
+
+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT
+
 func pipe2(p *[2]_C_int, flags int) (err error) {
 	_, _, e1 := RawSyscall(SYS_PIPE2, uintptr(unsafe.Pointer(p)), uintptr(flags), 0)
 	if e1 != 0 {
