commit 37951d888152c6f3a2e4c11c609bfb0fbad6b15d
Author: Josh Bleecher Snyder <josharian@gmail.com>
Date:   Fri Nov 5 10:07:11 2021 -0700

    net/netip: optimize As4 and As16
    
    name    old time/op  new time/op  delta
    As16-8  2.88ns ± 3%  2.16ns ± 3%  -25.19%  (p=0.000 n=15+15)
    
    Fixes #49379
    Updates #20859
    
    Change-Id: If4cf58d19ed0e2ac0f179da5c132ed37061e4cb7
    Reviewed-on: https://go-review.googlesource.com/c/go/+/361674
    Trust: Josh Bleecher Snyder <josharian@gmail.com>
    Run-TryBot: Josh Bleecher Snyder <josharian@gmail.com>
    Reviewed-by: Brad Fitzpatrick <bradfitz@golang.org>
---
 src/net/netip/netip.go      | 16 +++++++---------
 src/net/netip/netip_test.go |  9 +++++++++
 2 files changed, 16 insertions(+), 9 deletions(-)

diff --git a/src/net/netip/netip.go b/src/net/netip/netip.go
index b0c13b81fc..8cde6ef3d2 100644
--- a/src/net/netip/netip.go
+++ b/src/net/netip/netip.go
@@ -698,21 +698,19 @@ const (
 // IPv6 addresses with zones are returned without their zone (use the
 // Zone method to get it).
 // The ip zero value returns all zeroes.
-func (ip Addr) As16() [16]byte {
-	var ret [16]byte
-	bePutUint64(ret[:8], ip.addr.hi)
-	bePutUint64(ret[8:], ip.addr.lo)
-	return ret
+func (ip Addr) As16() (a16 [16]byte) {
+	bePutUint64(a16[:8], ip.addr.hi)
+	bePutUint64(a16[8:], ip.addr.lo)
+	return a16
 }
 
 // As4 returns an IPv4 or IPv4-in-IPv6 address in its 4-byte representation.
 // If ip is the zero Addr or an IPv6 address, As4 panics.
 // Note that 0.0.0.0 is not the zero Addr.
-func (ip Addr) As4() [4]byte {
+func (ip Addr) As4() (a4 [4]byte) {
 	if ip.z == z4 || ip.Is4In6() {
-		var ret [4]byte
-		bePutUint32(ret[:], uint32(ip.addr.lo))
-		return ret
+		bePutUint32(a4[:], uint32(ip.addr.lo))
+		return a4
 	}
 	if ip.z == z0 {
 		panic("As4 called on IP zero value")
diff --git a/src/net/netip/netip_test.go b/src/net/netip/netip_test.go
index 241a71bb83..c39b1ec201 100644
--- a/src/net/netip/netip_test.go
+++ b/src/net/netip/netip_test.go
@@ -1806,3 +1806,12 @@ func TestInvalidAddrPortString(t *testing.T) {
 		}
 	}
 }
+
+var sink16 [16]byte
+
+func BenchmarkAs16(b *testing.B) {
+	addr := MustParseAddr("1::10")
+	for i := 0; i < b.N; i++ {
+		sink16 = addr.As16()
+	}
+}
