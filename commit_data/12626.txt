commit 9eeb90945eb56edc9095c662741b89170e522419
Author: Mikio Hara <mikioh.mikioh@gmail.com>
Date:   Wed Mar 14 13:07:25 2012 +0900

    runtime/cgo: linux signal masking
    
    Fixes #3314.
    Fixes #3101 (again).
    
    R=golang-dev, rsc
    CC=golang-dev
    https://golang.org/cl/5820047
---
 src/pkg/runtime/cgo/gcc_linux_386.c   | 8 ++++++++
 src/pkg/runtime/cgo/gcc_linux_amd64.c | 8 ++++++++
 2 files changed, 16 insertions(+)

diff --git a/src/pkg/runtime/cgo/gcc_linux_386.c b/src/pkg/runtime/cgo/gcc_linux_386.c
index 8401a75caa..7d84acc11e 100644
--- a/src/pkg/runtime/cgo/gcc_linux_386.c
+++ b/src/pkg/runtime/cgo/gcc_linux_386.c
@@ -4,6 +4,7 @@
 
 #include <pthread.h>
 #include <string.h>
+#include <signal.h>
 #include "libcgo.h"
 
 static void *threadentry(void*);
@@ -26,10 +27,14 @@ void
 libcgo_sys_thread_start(ThreadStart *ts)
 {
 	pthread_attr_t attr;
+	sigset_t ign, oset;
 	pthread_t p;
 	size_t size;
 	int err;
 
+	sigfillset(&ign);
+	sigprocmask(SIG_SETMASK, &ign, &oset);
+
 	// Not sure why the memset is necessary here,
 	// but without it, we get a bogus stack size
 	// out of pthread_attr_getstacksize.  C'est la Linux.
@@ -39,6 +44,9 @@ libcgo_sys_thread_start(ThreadStart *ts)
 	pthread_attr_getstacksize(&attr, &size);
 	ts->g->stackguard = size;
 	err = pthread_create(&p, &attr, threadentry, ts);
+
+	sigprocmask(SIG_SETMASK, &oset, nil);
+
 	if (err != 0) {
 		fprintf(stderr, "runtime/cgo: pthread_create failed: %s\n", strerror(err));
 		abort();
diff --git a/src/pkg/runtime/cgo/gcc_linux_amd64.c b/src/pkg/runtime/cgo/gcc_linux_amd64.c
index 6ce3333a85..28cbf78c52 100644
--- a/src/pkg/runtime/cgo/gcc_linux_amd64.c
+++ b/src/pkg/runtime/cgo/gcc_linux_amd64.c
@@ -4,6 +4,7 @@
 
 #include <pthread.h>
 #include <string.h> // strerror
+#include <signal.h>
 #include "libcgo.h"
 
 static void* threadentry(void*);
@@ -26,14 +27,21 @@ void
 libcgo_sys_thread_start(ThreadStart *ts)
 {
 	pthread_attr_t attr;
+	sigset_t ign, oset;
 	pthread_t p;
 	size_t size;
 	int err;
 
+	sigfillset(&ign);
+	sigprocmask(SIG_SETMASK, &ign, &oset);
+
 	pthread_attr_init(&attr);
 	pthread_attr_getstacksize(&attr, &size);
 	ts->g->stackguard = size;
 	err = pthread_create(&p, &attr, threadentry, ts);
+
+	sigprocmask(SIG_SETMASK, &oset, nil);
+
 	if (err != 0) {
 		fprintf(stderr, "runtime/cgo: pthread_create failed: %s\n", strerror(err));
 		abort();
