commit 444839014bce7046165358bb6e920ad35c3463c2
Merge: b8540fc288 829b286f2c
Author: Russ Cox <rsc@golang.org>
Date:   Fri Dec 5 11:40:41 2014 -0500

    [dev.garbage] all: merge dev.cc (81884b89bd88) into dev.garbage
    
    TBR=rlh
    CC=golang-codereviews
    https://golang.org/cl/181100044

 .hgtags                                         |   1 +
 doc/contrib.html                                |  21 +-
 doc/go_spec.html                                |   2 +-
 lib/time/update.bash                            |   4 +-
 lib/time/zoneinfo.zip                           | Bin 358933 -> 360713 bytes
 src/cmd/5g/reg.c                                |   2 +-
 src/cmd/6g/reg.c                                |   2 +-
 src/cmd/9g/opt.h                                |  10 +
 src/cmd/9g/peep.c                               | 896 +++++++++++++++++++++++-
 src/cmd/9g/prog.c                               | 162 +++++
 src/cmd/9g/reg.c                                |   2 +-
 src/cmd/9l/asm.c                                |  22 +-
 src/cmd/go/doc.go                               |  28 +-
 src/cmd/go/generate.go                          |  75 +-
 src/cmd/go/generate_test.go                     |   2 +-
 src/cmd/ld/lib.c                                |  24 +-
 src/cmd/pprof/internal/commands/commands.go     |  26 +-
 src/cmd/pprof/internal/symbolizer/symbolizer.go |   4 +
 src/go/build/build.go                           |   8 +-
 src/go/build/build_test.go                      |   1 +
 src/liblink/asm9.c                              |   2 +-
 src/liblink/pass.c                              |   4 +-
 src/reflect/all_test.go                         | 101 +++
 src/reflect/export_test.go                      |  19 +
 src/reflect/type.go                             |   4 +-
 src/runtime/defs_dragonfly_386.go               |  80 ++-
 src/runtime/proc1.go                            |  30 +
 src/runtime/signal_dragonfly_386.go             |  34 +
 src/runtime/signal_dragonfly_386.h              |  23 -
 src/runtime/stack1.go                           |  14 +-
 30 files changed, 1450 insertions(+), 153 deletions(-)

diff --cc src/runtime/proc1.go
index be01f26718,aeded0e773..5a898ff41b
--- a/src/runtime/proc1.go
+++ b/src/runtime/proc1.go
@@@ -375,6 -371,36 +375,36 @@@ func casgstatus(gp *g, oldval, newval u
  	// loop if gp->atomicstatus is in a scan state giving
  	// GC time to finish and change the state to oldval.
  	for !cas(&gp.atomicstatus, oldval, newval) {
+ 		if oldval == _Gwaiting && gp.atomicstatus == _Grunnable {
+ 			systemstack(func() {
+ 				gothrow("casgstatus: waiting for Gwaiting but is Grunnable")
+ 			})
+ 		}
+ 		// Help GC if needed.
 -		if gp.preemptscan && !gp.gcworkdone && (oldval == _Grunning || oldval == _Gsyscall) {
 -			gp.preemptscan = false
 -			systemstack(func() {
 -				gcphasework(gp)
 -			})
 -		}
++		// if gp.preemptscan && !gp.gcworkdone && (oldval == _Grunning || oldval == _Gsyscall) {
++		// 	gp.preemptscan = false
++		// 	systemstack(func() {
++		// 		gcphasework(gp)
++		// 	})
++		// }
+ 	}
+ }
+ 
+ // casgstatus(gp, oldstatus, Gcopystack), assuming oldstatus is Gwaiting or Grunnable.
+ // Returns old status. Cannot call casgstatus directly, because we are racing with an
+ // async wakeup that might come in from netpoll. If we see Gwaiting from the readgstatus,
+ // it might have become Grunnable by the time we get to the cas. If we called casgstatus,
+ // it would loop waiting for the status to go back to Gwaiting, which it never will.
+ //go:nosplit
+ func casgcopystack(gp *g) uint32 {
+ 	for {
+ 		oldstatus := readgstatus(gp) &^ _Gscan
+ 		if oldstatus != _Gwaiting && oldstatus != _Grunnable {
+ 			gothrow("copystack: bad status, not Gwaiting or Grunnable")
+ 		}
+ 		if cas(&gp.atomicstatus, oldstatus, _Gcopystack) {
+ 			return oldstatus
+ 		}
  	}
  }
  
diff --cc src/runtime/stack1.go
index c14347dbdf,1fd61ce1a2..28000864d6
--- a/src/runtime/stack1.go
+++ b/src/runtime/stack1.go
@@@ -718,12 -708,8 +718,10 @@@ func newstack() 
  		gothrow("stack overflow")
  	}
  
- 	oldstatus := readgstatus(gp)
- 	oldstatus &^= _Gscan
- 	casgstatus(gp, oldstatus, _Gcopystack) // oldstatus is Gwaiting or Grunnable
 -	// Note that the concurrent GC might be scanning the stack as we try to replace it.
 -	// copystack takes care of the appropriate coordination with the stack scanner.
++	casgstatus(gp, _Gwaiting, _Gcopystack)
 +
 +	// The concurrent GC will not scan the stack while we are doing the copy since
 +	// the gp is in a Gcopystack status.
  	copystack(gp, uintptr(newsize))
  	if stackDebug >= 1 {
  		print("stack grow done\n")
@@@ -788,18 -777,7 +786,10 @@@ func shrinkstack(gp *g) 
  	if stackDebug > 0 {
  		print("shrinking stack ", oldsize, "->", newsize, "\n")
  	}
 +
- 	// This is being done in a Gscan state and was initiated by the GC so no need to move to
- 	// the Gcopystate.
- 	// The world is stopped, so the goroutine must be Gwaiting or Grunnable,
- 	// and what it is is not changing underfoot.
- 	oldstatus := readgstatus(gp) &^ _Gscan
- 	if oldstatus != _Gwaiting && oldstatus != _Grunnable {
- 		gothrow("status is not Gwaiting or Grunnable")
- 	}
- 	casgstatus(gp, oldstatus, _Gcopystack)
++	oldstatus := casgcopystack(gp)
  	copystack(gp, newsize)
 +	casgstatus(gp, _Gcopystack, oldstatus)
  }
  
  // Do any delayed stack freeing that was queued up during GC.
