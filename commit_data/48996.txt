commit c45d0eaadb77f11061cf9b18f521eb0b27e6bedb
Author: Matthew Dempsky <mdempsky@google.com>
Date:   Sat Jul 3 04:53:25 2021 -0700

    [dev.typeparams] cmd/compile: flatten OINLCALL in walk
    
    Inlining replaces inlined calls with OINLCALL nodes, and then somewhat
    clumsily tries to rewrite these in place without messing up
    order-of-evaluation rules.
    
    But handling these rules cleanly is much easier to do during order,
    and escape analysis is the only major pass between inlining and
    order. It's simpler to teach escape analysis how to analyze OINLCALL
    nodes than to try to hide them from escape analysis.
    
    Does not pass toolstash -cmp, but seems to just be line number
    changes.
    
    Change-Id: I1986cea39793e3e1ed5e887ba29d46364c6c532e
    Reviewed-on: https://go-review.googlesource.com/c/go/+/332649
    Run-TryBot: Matthew Dempsky <mdempsky@google.com>
    TryBot-Result: Go Bot <gobot@golang.org>
    Reviewed-by: Cuong Manh Le <cuong.manhle.vn@gmail.com>
    Trust: Matthew Dempsky <mdempsky@google.com>

 src/cmd/compile/internal/escape/call.go        |  11 +++
 src/cmd/compile/internal/escape/expr.go        |   2 +-
 src/cmd/compile/internal/escape/stmt.go        |   2 +-
 src/cmd/compile/internal/inline/inl.go         | 110 +++++++------------------
 src/cmd/compile/internal/ir/expr.go            |  14 +++-
 src/cmd/compile/internal/ir/fmt.go             |   9 ++
 src/cmd/compile/internal/logopt/logopt_test.go |   2 +-
 src/cmd/compile/internal/noder/reader.go       |  18 +---
 src/cmd/compile/internal/typecheck/dcl.go      |   1 +
 src/cmd/compile/internal/walk/order.go         |  33 +++++++-
 10 files changed, 102 insertions(+), 100 deletions(-)
