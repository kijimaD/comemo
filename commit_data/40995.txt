commit 372b0eed175b88ba2654607b05a36416f08c4cea
Author: Bryan C. Mills <bcmills@google.com>
Date:   Wed Aug 28 12:42:37 2019 +0000

    Revert "cmd/compile: optimize 386's math.bits.TrailingZeros16"
    
    This reverts CL 189277.
    
    Reason for revert: broke 32-bit builders.
    
    Updates #33902
    
    Change-Id: Ie5f180d0371a90e5057ed578c334372e5fc3a286
    Reviewed-on: https://go-review.googlesource.com/c/go/+/192097
    Run-TryBot: Bryan C. Mills <bcmills@google.com>
    Reviewed-by: Daniel Mart√≠ <mvdan@mvdan.cc>
---
 src/cmd/compile/internal/gc/ssa.go         |  2 +-
 src/cmd/compile/internal/ssa/gen/386.rules |  2 --
 src/cmd/compile/internal/ssa/rewrite386.go | 18 ------------------
 test/codegen/mathbits.go                   |  1 -
 4 files changed, 1 insertion(+), 22 deletions(-)

diff --git a/src/cmd/compile/internal/gc/ssa.go b/src/cmd/compile/internal/gc/ssa.go
index 069e2f6c9e..9871e11a09 100644
--- a/src/cmd/compile/internal/gc/ssa.go
+++ b/src/cmd/compile/internal/gc/ssa.go
@@ -3370,7 +3370,7 @@ func init() {
 		func(s *state, n *Node, args []*ssa.Value) *ssa.Value {
 			return s.newValue1(ssa.OpCtz16, types.Types[TINT], args[0])
 		},
-		sys.AMD64, sys.ARM, sys.I386, sys.ARM64, sys.Wasm)
+		sys.AMD64, sys.ARM, sys.ARM64, sys.Wasm)
 	addF("math/bits", "TrailingZeros16",
 		func(s *state, n *Node, args []*ssa.Value) *ssa.Value {
 			x := s.newValue1(ssa.OpZeroExt16to64, types.Types[TUINT64], args[0])
diff --git a/src/cmd/compile/internal/ssa/gen/386.rules b/src/cmd/compile/internal/ssa/gen/386.rules
index 395ebb085d..d7cbba1718 100644
--- a/src/cmd/compile/internal/ssa/gen/386.rules
+++ b/src/cmd/compile/internal/ssa/gen/386.rules
@@ -66,8 +66,6 @@
 
 (Sqrt x) -> (SQRTSD x)
 
-(Ctz16 x) -> (BSFL (ORLconst <typ.UInt32> [0x10000] x))
-
 // Lowering extension
 (SignExt8to16  x) -> (MOVBLSX x)
 (SignExt8to32  x) -> (MOVBLSX x)
diff --git a/src/cmd/compile/internal/ssa/rewrite386.go b/src/cmd/compile/internal/ssa/rewrite386.go
index 2336561560..812aa9420d 100644
--- a/src/cmd/compile/internal/ssa/rewrite386.go
+++ b/src/cmd/compile/internal/ssa/rewrite386.go
@@ -360,8 +360,6 @@ func rewriteValue386(v *Value) bool {
 		return rewriteValue386_OpConstBool_0(v)
 	case OpConstNil:
 		return rewriteValue386_OpConstNil_0(v)
-	case OpCtz16:
-		return rewriteValue386_OpCtz16_0(v)
 	case OpCvt32Fto32:
 		return rewriteValue386_OpCvt32Fto32_0(v)
 	case OpCvt32Fto64F:
@@ -20785,22 +20783,6 @@ func rewriteValue386_OpConstNil_0(v *Value) bool {
 		return true
 	}
 }
-func rewriteValue386_OpCtz16_0(v *Value) bool {
-	b := v.Block
-	typ := &b.Func.Config.Types
-	// match: (Ctz16 x)
-	// cond:
-	// result: (BSFL (ORLconst <typ.UInt32> [0x10000] x))
-	for {
-		x := v.Args[0]
-		v.reset(Op386BSFL)
-		v0 := b.NewValue0(v.Pos, Op386ORLconst, typ.UInt32)
-		v0.AuxInt = 0x10000
-		v0.AddArg(x)
-		v.AddArg(v0)
-		return true
-	}
-}
 func rewriteValue386_OpCvt32Fto32_0(v *Value) bool {
 	// match: (Cvt32Fto32 x)
 	// cond:
diff --git a/test/codegen/mathbits.go b/test/codegen/mathbits.go
index 779ea6e322..0d94bd1bc8 100644
--- a/test/codegen/mathbits.go
+++ b/test/codegen/mathbits.go
@@ -296,7 +296,6 @@ func TrailingZeros32(n uint32) int {
 
 func TrailingZeros16(n uint16) int {
 	// amd64:"BSFL","BTSL\\t\\$16"
-	// 386:"BSFL\t"
 	// arm:"ORR\t\\$65536","CLZ",-"MOVHU\tR"
 	// arm64:"ORR\t\\$65536","RBITW","CLZW",-"MOVHU\tR",-"RBIT\t",-"CLZ\t"
 	// s390x:"FLOGR","OR\t\\$65536"
