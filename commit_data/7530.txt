commit 814075dffba9c3f906d9ba641e787a35289a2f86
Author: Russ Cox <rsc@golang.org>
Date:   Tue Feb 22 18:23:14 2011 -0500

    test: do not depend on implicit if condition
    
    Deleted test/ken/robif.go because test/if.go is
    the same program modulo formatting.
    
    R=golang-dev, gri, r2
    CC=golang-dev
    https://golang.org/cl/4186068
---
 test/fixedbugs/bug001.go | 11 ------
 test/fixedbugs/bug140.go |  4 +-
 test/fixedbugs/bug219.go | 12 +++---
 test/if.go               | 12 ------
 test/if1.go              | 20 ----------
 test/ken/robif.go        | 97 ------------------------------------------------
 6 files changed, 8 insertions(+), 148 deletions(-)

diff --git a/test/fixedbugs/bug001.go b/test/fixedbugs/bug001.go
deleted file mode 100644
index 2df8791fff..0000000000
--- a/test/fixedbugs/bug001.go
+++ /dev/null
@@ -1,11 +0,0 @@
-// $G $D/$F.go && $L $F.$A && ./$A.out
-
-// Copyright 2009 The Go Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-
-package main
-
-func main() {
-	if {}  // compiles; should be an error (must be an expression)
-}
diff --git a/test/fixedbugs/bug140.go b/test/fixedbugs/bug140.go
index 33d1deb8a0..298081663b 100644
--- a/test/fixedbugs/bug140.go
+++ b/test/fixedbugs/bug140.go
@@ -7,8 +7,8 @@
 package main
 
 func main() {
-	if {} else L1: ;
-	if {} else L2: main() ;
+	if true {} else L1: ;
+	if true {} else L2: main() ;
 }
 
 /*
diff --git a/test/fixedbugs/bug219.go b/test/fixedbugs/bug219.go
index 21361a2aab..966d3fcf31 100644
--- a/test/fixedbugs/bug219.go
+++ b/test/fixedbugs/bug219.go
@@ -12,8 +12,8 @@ func f(func()) int { return 0 }
 // bug219.go:16: syntax error near if
 func g1() {
 	if x := f(func() {
-		if {}
-	}); {
+		if true {}
+	}); true {
 		_ = x;
 	}
 }
@@ -21,8 +21,8 @@ func g1() {
 // this works
 func g2() {
 	if x := f(func() {
-		//if {}
-	}); {
+		//if true {}
+	}); true {
 		_ = x;
 	}
 }
@@ -30,9 +30,9 @@ func g2() {
 // this works
 func g3() {
 	x := f(func() {
-		if {}
+		if true {}
 	});
-	if {
+	if true {
 		_ = x;
 	}
 }
diff --git a/test/if.go b/test/if.go
index db1fe8b790..c1bb69d277 100644
--- a/test/if.go
+++ b/test/if.go
@@ -44,18 +44,6 @@ func main() {
 	}
 	assertequal(count, 0, "if false one")
 
-	count = 0
-	if {
-		count = count + 1
-	}
-	assertequal(count, 1, "if empty")
-
-	count = 0
-	if one := 1; true {
-		count = count + one
-	}
-	assertequal(count, 1, "if empty one")
-
 	count = 0
 	if i5 < i7 {
 		count = count + 1
diff --git a/test/if1.go b/test/if1.go
deleted file mode 100644
index 061c36411e..0000000000
--- a/test/if1.go
+++ /dev/null
@@ -1,20 +0,0 @@
-// $G $F.go && $L $F.$A && ./$A.out
-
-// Copyright 2009 The Go Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-
-package main
-
-import "os"
-
-func main() {
-	count := 7
-	if one := 1; {
-		count = count + one
-	}
-	if count != 8 {
-		print(count, " should be 8\n")
-		os.Exit(1)
-	}
-}
diff --git a/test/ken/robif.go b/test/ken/robif.go
deleted file mode 100644
index b6fe4e4330..0000000000
--- a/test/ken/robif.go
+++ /dev/null
@@ -1,97 +0,0 @@
-// $G $D/$F.go && $L $F.$A && ./$A.out
-
-// Copyright 2009 The Go Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-
-package main
-
-func assertequal(is, shouldbe int, msg string) {
-	if is != shouldbe {
-		print("assertion fail" + msg + "\n");
-		panic(1);
-	}
-}
-
-func main() {
-	i5 := 5;
-	i7 := 7;
-
-	var count int;
-
-	count = 0;
-	if true {
-		count = count + 1;
-	}
-	assertequal(count, 1, "if true");
-
-	count = 0;
-	if false {
-		count = count + 1;
-	}
-	assertequal(count, 0, "if false");
-
-	count = 0;
-	if one := 1; true {
-		count = count + one;
-	}
-	assertequal(count, 1, "if true one");
-
-	count = 0;
-	if one := 1; false {
-		_ = one;
-		count = count + 1;
-	}
-	assertequal(count, 0, "if false one");
-
-	count = 0;
-	if {
-		count = count + 1;
-	}
-	assertequal(count, 1, "if empty");
-
-	count = 0;
-	if one := 1; {
-		count = count + one;
-	}
-	assertequal(count, 1, "if empty one");
-
-	count = 0;
-	if i5 < i7 {
-		count = count + 1;
-	}
-	assertequal(count, 1, "if cond");
-
-	count = 0;
-	if true {
-		count = count + 1;
-	} else
-		count = count - 1;
-	assertequal(count, 1, "if else true");
-
-	count = 0;
-	if false {
-		count = count + 1;
-	} else
-		count = count - 1;
-	assertequal(count, -1, "if else false");
-
-	count = 0;
-	if t:=1; false {
-		count = count + 1;
-		t := 7;
-		_ = t;
-	} else
-		count = count - t;
-	assertequal(count, -1, "if else false var");
-
-	count = 0;
-	t := 1;
-	if false {
-		count = count + 1;
-		t := 7;
-		_ = t;
-	} else
-		count = count - t;
-	assertequal(count, -1, "if else false var outside");
-}
